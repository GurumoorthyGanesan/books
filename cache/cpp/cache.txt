958 1553669031372 glotoutput
Sha1: e42661367816780176b1974fff579f4ae40f490a
Lang: C++
FileName: main.cpp
CodeFull:+397
// :glot
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    double a = 0.1;
    double b = 0.2;
    double c = 0.3;
    if (a + b == c) {
        // This never prints on IEEE754-compliant machines
        std::cout << "This Computer is Magic!" << std::endl; 
    } else {
        std::cout << "This Computer is pretty normal, all things considered." << std::endl;
    }
}
CodeToRun:+388
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    double a = 0.1;
    double b = 0.2;
    double c = 0.3;
    if (a + b == c) {
        // This never prints on IEEE754-compliant machines
        std::cout << "This Computer is Magic!" << std::endl; 
    } else {
        std::cout << "This Computer is pretty normal, all things considered." << std::endl;
    }
}
Output:+55
This Computer is pretty normal, all things considered.
66 1553669032203 glotid
Sha1: e42661367816780176b1974fff579f4ae40f490a
GlotID: faq9p76ahm
325 1553669034649 glotoutput
Sha1: e8aa6a4b3fcf070b5e601e2ba021cd6a8f5949df
Lang: C++
FileName: main.cpp
CodeFull:+102
// :glot
#include <iostream>

int main()
{
    std::cout << "Hello World!" << std::endl;
		return 0;
}
CodeToRun:+93
#include <iostream>

int main()
{
    std::cout << "Hello World!" << std::endl;
		return 0;
}
Output:+13
Hello World!
66 1553669034819 glotid
Sha1: e8aa6a4b3fcf070b5e601e2ba021cd6a8f5949df
GlotID: faq9p8qc94
677 1553669037517 glotoutput
Sha1: 7586cb15389379e003c46268197fd6c5592ac48d
Lang: C++
FileName: main.cpp
CodeFull:+273
// :glot
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    int a = 5;     // 0101b  (0x05)
    int b = 12;    // 1100b  (0x0C)
    int c = a | b; // 1101b  (0x0D)
    
    std::cout << "a = " << a << ", b = " << b << ", c = " << c << std::endl;
}
CodeToRun:+264
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    int a = 5;     // 0101b  (0x05)
    int b = 12;    // 1100b  (0x0C)
    int c = a | b; // 1101b  (0x0D)
    
    std::cout << "a = " << a << ", b = " << b << ", c = " << c << std::endl;
}
Output:+22
a = 5, b = 12, c = 13
66 1553669037684 glotid
Sha1: 7586cb15389379e003c46268197fd6c5592ac48d
GlotID: faq9pafsa4
521 1553669039578 glotoutput
Sha1: 295b8fc6d3069477460a344e33061fe86eea4fb6
Lang: C++
FileName: main.cpp
CodeFull:+203
// :glot
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    int a = 5;  // 0101b  (0x05)
    a |= 12;    // a = 0101b | 1101b == 13

    std::cout << "a = " << a << std::endl;
}
CodeToRun:+194
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    int a = 5;  // 0101b  (0x05)
    a |= 12;    // a = 0101b | 1101b == 13

    std::cout << "a = " << a << std::endl;
}
Output:+7
a = 13
66 1553669039744 glotid
Sha1: 295b8fc6d3069477460a344e33061fe86eea4fb6
GlotID: faq9pbnxol
676 1553669041612 glotoutput
Sha1: 4fb24f8ca4a2ad6e8bf2d8daacc7a5b606db8e68
Lang: C++
FileName: main.cpp
CodeFull:+273
// :glot
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    int a = 5;     // 0101b  (0x05)
    int b = 9;     // 1001b  (0x09)
    int c = a ^ b; // 1100b  (0x0C)
    
    std::cout << "a = " << a << ", b = " << b << ", c = " << c << std::endl;
}
CodeToRun:+264
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    int a = 5;     // 0101b  (0x05)
    int b = 9;     // 1001b  (0x09)
    int c = a ^ b; // 1100b  (0x0C)
    
    std::cout << "a = " << a << ", b = " << b << ", c = " << c << std::endl;
}
Output:+21
a = 5, b = 9, c = 12
66 1553669041780 glotid
Sha1: 4fb24f8ca4a2ad6e8bf2d8daacc7a5b606db8e68
GlotID: faq9pcvkrw
471 1553669043560 glotoutput
Sha1: e4efd9cae0d9295f095c28817e4bfb22419dc790
Lang: C++
FileName: main.cpp
CodeFull:+178
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 5;  // 0101b  (0x05)
    a ^= 9;    // a = 0101b ^ 1001b

    std::cout << "a = " << a << std::endl;
}
CodeToRun:+169
#include <iostream>

int main(int argc, char **argv) {
    int a = 5;  // 0101b  (0x05)
    a ^= 9;    // a = 0101b ^ 1001b

    std::cout << "a = " << a << std::endl;
}
Output:+7
a = 12
66 1553669043730 glotid
Sha1: e4efd9cae0d9295f095c28817e4bfb22419dc790
GlotID: faq9pe1cms
640 1553669046529 glotoutput
Sha1: 05a17abc63003e43f22c85e99e216d677312fdd9
Lang: C++
FileName: main.cpp
CodeFull:+255
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 6;     // 0110b  (0x06)
    int b = 10;    // 1010b  (0x0A)
    int c = a & b; // 0010b  (0x02)
    
    std::cout << "a = " << a << ", b = " << b << ", c = " << c << std::endl;
}
CodeToRun:+246
#include <iostream>

int main(int argc, char **argv) {
    int a = 6;     // 0110b  (0x06)
    int b = 10;    // 1010b  (0x0A)
    int c = a & b; // 0010b  (0x02)
    
    std::cout << "a = " << a << ", b = " << b << ", c = " << c << std::endl;
}
Output:+21
a = 6, b = 10, c = 2
66 1553669046698 glotid
Sha1: 05a17abc63003e43f22c85e99e216d677312fdd9
GlotID: faq9pfsypm
482 1553669048883 glotoutput
Sha1: de0905e9e94d72d4f3a890f890ad2662bbf94701
Lang: C++
FileName: main.cpp
CodeFull:+184
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 5;  // 0101b  (0x05)
    a &= 10;    // a = 0101b & 1010b == 0

    std::cout << "a = " << a << std::endl;
}
CodeToRun:+175
#include <iostream>

int main(int argc, char **argv) {
    int a = 5;  // 0101b  (0x05)
    a &= 10;    // a = 0101b & 1010b == 0

    std::cout << "a = " << a << std::endl;
}
Output:+6
a = 0
66 1553669049051 glotid
Sha1: de0905e9e94d72d4f3a890f890ad2662bbf94701
GlotID: faq9ph7dgp
498 1553669051034 glotoutput
Sha1: d2f9f8e3e89ba7b34aacb7c95af363f516721279
Lang: C++
FileName: main.cpp
CodeFull:+188
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 1;      // 0001b
    int b = a << 1; // 0010b
    
    std::cout << "a = " << a << ", b = " << b << std::endl;
}
CodeToRun:+179
#include <iostream>

int main(int argc, char **argv) {
    int a = 1;      // 0001b
    int b = a << 1; // 0010b
    
    std::cout << "a = " << a << ", b = " << b << std::endl;
}
Output:+13
a = 1, b = 2
66 1553669051202 glotid
Sha1: d2f9f8e3e89ba7b34aacb7c95af363f516721279
GlotID: faq9pihhkj
660 1553669053082 glotoutput
Sha1: b25badb8a9ba0a12b02f00aee0ffe70c6532cd67
Lang: C++
FileName: main.cpp
CodeFull:+264
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 2147483647; // 0111 1111 1111 1111 1111 1111 1111 1111
    int b = a << 1;     // 1111 1111 1111 1111 1111 1111 1111 1110
    
    std::cout << "a = " << a << ", b = " << b << std::endl;
}
CodeToRun:+255
#include <iostream>

int main(int argc, char **argv) {
    int a = 2147483647; // 0111 1111 1111 1111 1111 1111 1111 1111
    int b = a << 1;     // 1111 1111 1111 1111 1111 1111 1111 1110
    
    std::cout << "a = " << a << ", b = " << b << std::endl;
}
Output:+23
a = 2147483647, b = -2
66 1553669053251 glotid
Sha1: b25badb8a9ba0a12b02f00aee0ffe70c6532cd67
GlotID: faq9pjpe9x
445 1553669054825 glotoutput
Sha1: 47296de3436e88dd1ad0c632b826eca9fa64a7c3
Lang: C++
FileName: main.cpp
CodeFull:+165
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 5;  // 0101b
    a <<= 1;    // a = a << 1;

    std::cout << "a = " << a << std::endl;
}
CodeToRun:+156
#include <iostream>

int main(int argc, char **argv) {
    int a = 5;  // 0101b
    a <<= 1;    // a = a << 1;

    std::cout << "a = " << a << std::endl;
}
Output:+7
a = 10
66 1553669054992 glotid
Sha1: 47296de3436e88dd1ad0c632b826eca9fa64a7c3
GlotID: faq9pkqq2w
498 1553669056973 glotoutput
Sha1: d0f7a9ba677ee495749bdf133f8ae451b34d40db
Lang: C++
FileName: main.cpp
CodeFull:+188
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 2;      // 0010b
    int b = a >> 1; // 0001b
    
    std::cout << "a = " << a << ", b = " << b << std::endl;
}
CodeToRun:+179
#include <iostream>

int main(int argc, char **argv) {
    int a = 2;      // 0010b
    int b = a >> 1; // 0001b
    
    std::cout << "a = " << a << ", b = " << b << std::endl;
}
Output:+13
a = 2, b = 1
66 1553669057141 glotid
Sha1: d0f7a9ba677ee495749bdf133f8ae451b34d40db
GlotID: faq9pm0swv
446 1553669059741 glotoutput
Sha1: 219c00bb5db81e81c3c72d07bfde895c2627d8ff
Lang: C++
FileName: main.cpp
CodeFull:+166
// :glot
#include <iostream>

int main(int argc, char **argv) {
    int a = 2;  // 0010b
    a >>= 1;    // a = a >> 1;

    std::cout << "a = " << a  << std::endl;
}
CodeToRun:+157
#include <iostream>

int main(int argc, char **argv) {
    int a = 2;  // 0010b
    a >>= 1;    // a = a >> 1;

    std::cout << "a = " << a  << std::endl;
}
Output:+6
a = 1
66 1553669059907 glotid
Sha1: 219c00bb5db81e81c3c72d07bfde895c2627d8ff
GlotID: faq9pno2st
683 1553669061888 glotoutput
Sha1: 7b5fc2083054ed608935a33c50c0e1f493f80e24
Lang: C++
FileName: main.cpp
CodeFull:+279
// :glot
#include <iostream>

int main(int argc, char **argv) {
    unsigned char a = 234;  // 1110 1010b  (0xEA)
    unsigned char b = ~a;   // 0001 0101b  (0x15)
    
    std::cout << "a = " << static_cast<int>(a) <<
             ", b = " << static_cast<int>(b) << std::endl;
}
CodeToRun:+270
#include <iostream>

int main(int argc, char **argv) {
    unsigned char a = 234;  // 1110 1010b  (0xEA)
    unsigned char b = ~a;   // 0001 0101b  (0x15)
    
    std::cout << "a = " << static_cast<int>(a) <<
             ", b = " << static_cast<int>(b) << std::endl;
}
Output:+16
a = 234, b = 21
66 1553669062055 glotid
Sha1: 7b5fc2083054ed608935a33c50c0e1f493f80e24
GlotID: faq9poy4sm
635 1553669065576 glotoutput
Sha1: d178b77873a018346bca7469472b17d1887a67d0
Lang: C++
FileName: main.cpp
CodeFull:+244
// :glot
#include <iostream>

int main(int argc, char **argv) {
    unsigned int i = ~0;
    unsigned char c = ~0;
    
    std::cout << "max uint = " << i << std::endl <<
                 "max uchar = " << static_cast<short>(c) << std::endl;
}
CodeToRun:+235
#include <iostream>

int main(int argc, char **argv) {
    unsigned int i = ~0;
    unsigned char c = ~0;
    
    std::cout << "max uint = " << i << std::endl <<
                 "max uchar = " << static_cast<short>(c) << std::endl;
}
Output:+38
max uint = 4294967295
max uchar = 255
66 1553669065744 glotid
Sha1: d178b77873a018346bca7469472b17d1887a67d0
GlotID: faq9pr56ed
641 1553669066906 glotoutput
Sha1: de24267175777e7cbb09dd06898351045e25eece
Lang: C++
FileName: main.cpp
CodeFull:+249
// :glot
#include <cstdio>

int main()
{
    char op1 = 'a';  // "a" letter (i.e. small case)
    int mask = 0xDF; // choosing a proper mask

    printf("a (AND) mask = A\n");
    printf("%c   &   0xDF = %c\n", op1, op1 & mask);
    
    return 0;
}
CodeToRun:+240
#include <cstdio>

int main()
{
    char op1 = 'a';  // "a" letter (i.e. small case)
    int mask = 0xDF; // choosing a proper mask

    printf("a (AND) mask = A\n");
    printf("%c   &   0xDF = %c\n", op1, op1 & mask);
    
    return 0;
}
Output:+34
a (AND) mask = A
a   &   0xDF = A
66 1553669067079 glotid
Sha1: de24267175777e7cbb09dd06898351045e25eece
GlotID: faq9prxt2a
451 1553669069058 glotoutput
Sha1: 261b3c2c8ff51fbfed9a4ee6bc54d7947540701a
Lang: C++
FileName: main.cpp
CodeFull:+170
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    int array[5] = { 10, 20, 30, 40, 50 };
    std::cout << array[4];
    std::cout << array[0];
}
CodeToRun:+161
#include <iostream>
using namespace std;

auto main() -> int
{
    int array[5] = { 10, 20, 30, 40, 50 };
    std::cout << array[4];
    std::cout << array[0];
}
Output: 5010
66 1553669069235 glotid
Sha1: 261b3c2c8ff51fbfed9a4ee6bc54d7947540701a
GlotID: faq9pt7x9a
1452 1553669072128 glotoutput
Sha1: f7426e5e654de641ad9da406cbc7c440960ce096
Lang: C++
FileName: main.cpp
CodeFull:+628
// :glot
// A fixed size raw array matrix (that is, a 2D raw array).
#include <iostream>
#include <iomanip>
using namespace std;

auto main() -> int
{
    int const   n_rows  = 3;
    int const   n_cols  = 7;
    int const   m[n_rows][n_cols] =             // A raw array matrix.
    {
        {  1,  2,  3,  4,  5,  6,  7 },
        {  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21 }
    };
    
    for( int y = 0; y < n_rows; ++y )
    {
        for( int x = 0; x < n_cols; ++x )
        {
            cout << setw( 4 ) << m[y][x];       // Note: do NOT use m[y,x]!
        }
        cout << '\n';
    }
}
CodeToRun:+619
// A fixed size raw array matrix (that is, a 2D raw array).
#include <iostream>
#include <iomanip>
using namespace std;

auto main() -> int
{
    int const   n_rows  = 3;
    int const   n_cols  = 7;
    int const   m[n_rows][n_cols] =             // A raw array matrix.
    {
        {  1,  2,  3,  4,  5,  6,  7 },
        {  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21 }
    };
    
    for( int y = 0; y < n_rows; ++y )
    {
        for( int x = 0; x < n_cols; ++x )
        {
            cout << setw( 4 ) << m[y][x];       // Note: do NOT use m[y,x]!
        }
        cout << '\n';
    }
}
Output:+87
   1   2   3   4   5   6   7
   8   9  10  11  12  13  14
  15  16  17  18  19  20  21
66 1553669072298 glotid
Sha1: f7426e5e654de641ad9da406cbc7c440960ce096
GlotID: faq9pv1ll8
1074 1553669074381 glotoutput
Sha1: 6126fa5f9760396fc055bf4c90096ef8daaeb6ff
Lang: C++
FileName: main.cpp
CodeFull:+478
// :glot
#include <cstddef>     // size_t, ptrdiff_t

using Size = ptrdiff_t;

template< class Item, size_t n >
constexpr auto n_items( Item (&)[n] ) noexcept
    -> Size
{ return n; }


#include <iostream>
using namespace std;
auto main()
    -> int
{
    int const   a[]     = {3, 1, 4, 1, 5, 9, 2, 6, 5, 4};
    Size const  n       = n_items( a );
    int         b[n]    = {};       // An array of the same size as a.
    
    (void) b;
    cout << "Size = " << n << "\n";
}
CodeToRun:+468
#include <cstddef>     // size_t, ptrdiff_t

using Size = ptrdiff_t;

template< class Item, size_t n >
constexpr auto n_items( Item (&)[n] ) noexcept
    -> Size
{ return n; }

#include <iostream>
using namespace std;
auto main()
    -> int
{
    int const   a[]     = {3, 1, 4, 1, 5, 9, 2, 6, 5, 4};
    Size const  n       = n_items( a );
    int         b[n]    = {};       // An array of the same size as a.
    
    (void) b;
    cout << "Size = " << n << "\n";
}
Output:+10
Size = 10
66 1553669074553 glotid
Sha1: 6126fa5f9760396fc055bf4c90096ef8daaeb6ff
GlotID: faq9pwdz8w
496 1553669308990 glotoutput
Sha1: b7656e12c69e43e2353db8ba91fc184ec644d1ab
Lang: C++
FileName: main.cpp
CodeFull:+193
// :glot
#include <iostream>

int main(int argc, char **argv)
{
    char MyArray[] = { 'X','o','c','e' };
    const auto n = std::extent<decltype(MyArray)>::value;
    std::cout << n << "\n";
}
CodeToRun:+184
#include <iostream>

int main(int argc, char **argv)
{
    char MyArray[] = { 'X','o','c','e' };
    const auto n = std::extent<decltype(MyArray)>::value;
    std::cout << n << "\n";
}
Output:+2
4
66 1553669309713 glotid
Sha1: b7656e12c69e43e2353db8ba91fc184ec644d1ab
GlotID: faq9tse6hg
4836 1553669594697 glotoutput
Sha1: 09f2aeabdc7d743cc765d6ad05e2b8512f0c114b
Lang: C++
FileName: main.cpp
CodeFull:+2319
// :glot
#include <algorithm>        // std::copy
#include <cassert>          // assert
#include <initializer_list> // std::initializer_list
#include <vector>           // std::vector
#include <cstddef>          // ptrdiff_t

// A dynamic size matrix using std::vector for storage.

namespace my {
    using Size = ptrdiff_t;
    using std::initializer_list;
    using std::vector;

    template< class Item >
    class Matrix
    {
    private:
        vector<Item>    items_;
        Size            n_cols_;
        
        auto index_for( Size const x, Size const y ) const
            -> Size
        { return y*n_cols_ + x; }

    public:
        auto n_rows() const -> Size { return items_.size()/n_cols_; }
        auto n_cols() const -> Size { return n_cols_; }

        auto item( Size const x, Size const y )
            -> Item&
        { return items_[index_for(x, y)]; }
        
        auto item( Size const x, Size const y ) const
            -> Item const&
        { return items_[index_for(x, y)]; }

        Matrix(): n_cols_( 0 ) {}

        Matrix( Size const n_cols, Size const n_rows )
            : items_( n_cols*n_rows )
            , n_cols_( n_cols )
        {}
        
        Matrix( initializer_list< initializer_list<Item> > const& values )
            : items_()
            , n_cols_( values.size() == 0? 0 : values.begin()->size() )
        {
            for( auto const& row : values )
            {
                assert( Size( row.size() ) == n_cols_ );
                items_.insert( items_.end(), row.begin(), row.end() );
            }
        }
    };
}  // namespace my

//--------------------------------------------- Usage:
using my::Matrix;

auto some_matrix()
    -> Matrix<int>
{
    return
    {
        {  1,  2,  3,  4,  5,  6,  7 },
        {  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21 }
    };
}

#include <iostream>
#include <iomanip>
using namespace std;
auto main() -> int
{
    Matrix<int> const m = some_matrix();
    assert( m.n_cols() == 7 );
    assert( m.n_rows() == 3 );
    for( int y = 0, y_end = m.n_rows(); y < y_end; ++y )
    {
        for( int x = 0, x_end = m.n_cols(); x < x_end; ++x )
        {
            cout << setw( 4 ) << m.item( x, y );        // ← Note: not `m[y][x]`!
        }
        cout << '\n';
    }
}
CodeToRun:+2310
#include <algorithm>        // std::copy
#include <cassert>          // assert
#include <initializer_list> // std::initializer_list
#include <vector>           // std::vector
#include <cstddef>          // ptrdiff_t

// A dynamic size matrix using std::vector for storage.

namespace my {
    using Size = ptrdiff_t;
    using std::initializer_list;
    using std::vector;

    template< class Item >
    class Matrix
    {
    private:
        vector<Item>    items_;
        Size            n_cols_;
        
        auto index_for( Size const x, Size const y ) const
            -> Size
        { return y*n_cols_ + x; }

    public:
        auto n_rows() const -> Size { return items_.size()/n_cols_; }
        auto n_cols() const -> Size { return n_cols_; }

        auto item( Size const x, Size const y )
            -> Item&
        { return items_[index_for(x, y)]; }
        
        auto item( Size const x, Size const y ) const
            -> Item const&
        { return items_[index_for(x, y)]; }

        Matrix(): n_cols_( 0 ) {}

        Matrix( Size const n_cols, Size const n_rows )
            : items_( n_cols*n_rows )
            , n_cols_( n_cols )
        {}
        
        Matrix( initializer_list< initializer_list<Item> > const& values )
            : items_()
            , n_cols_( values.size() == 0? 0 : values.begin()->size() )
        {
            for( auto const& row : values )
            {
                assert( Size( row.size() ) == n_cols_ );
                items_.insert( items_.end(), row.begin(), row.end() );
            }
        }
    };
}  // namespace my

//--------------------------------------------- Usage:
using my::Matrix;

auto some_matrix()
    -> Matrix<int>
{
    return
    {
        {  1,  2,  3,  4,  5,  6,  7 },
        {  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21 }
    };
}

#include <iostream>
#include <iomanip>
using namespace std;
auto main() -> int
{
    Matrix<int> const m = some_matrix();
    assert( m.n_cols() == 7 );
    assert( m.n_rows() == 3 );
    for( int y = 0, y_end = m.n_rows(); y < y_end; ++y )
    {
        for( int x = 0, x_end = m.n_cols(); x < x_end; ++x )
        {
            cout << setw( 4 ) << m.item( x, y );        // ← Note: not `m[y][x]`!
        }
        cout << '\n';
    }
}
Output:+87
   1   2   3   4   5   6   7
   8   9  10  11  12  13  14
  15  16  17  18  19  20  21
66 1553669595659 glotid
Sha1: 09f2aeabdc7d743cc765d6ad05e2b8512f0c114b
GlotID: faq9yimxes
480 1553669607087 glotoutput
Sha1: a8308c83591abe5b3fa9d0765dfef79248fb7a71
Lang: C++
FileName: main.cpp
CodeFull:+175
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    for (int i=0; i<10; i++){
    	if (i%2 == 0) {
    		continue;
    	}
    	cout<<"\n @"<<i;
    }
}
CodeToRun:+166
#include <iostream>
using namespace std;

auto main() -> int
{
    for (int i=0; i<10; i++){
    	if (i%2 == 0) {
    		continue;
    	}
    	cout<<"\n @"<<i;
    }
}
Output:+20

 @1
 @3
 @5
 @7
 @9
66 1553669607258 glotid
Sha1: a8308c83591abe5b3fa9d0765dfef79248fb7a71
GlotID: faq9ypjiyz
808 1553669635760 glotoutput
Sha1: 658f15a10eda12945d793c31caf92fcc6e526478
Lang: C++
FileName: main.cpp
CodeFull:+307
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    int num = 1;
    STEP:
    do {
        if (num % 2 == 0)
        {
            num = num + 1;
            goto STEP;
         }
    
       cout << "value of num : " << num << endl;
       num = num + 1;
    } while( num < 10 );
}
CodeToRun:+298
#include <iostream>
using namespace std;

auto main() -> int
{
    int num = 1;
    STEP:
    do {
        if (num % 2 == 0)
        {
            num = num + 1;
            goto STEP;
         }
    
       cout << "value of num : " << num << endl;
       num = num + 1;
    } while( num < 10 );
}
Output:+85
value of num : 1
value of num : 3
value of num : 5
value of num : 7
value of num : 9
66 1553669636427 glotid
Sha1: 658f15a10eda12945d793c31caf92fcc6e526478
GlotID: faq9z6wpsr
512 1553669646614 glotoutput
Sha1: b00352200ab054630d6e21c26db7011f5c45ef96
Lang: C++
FileName: main.cpp
CodeFull:+191
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    int i = 0;
    while (i < 10)
    {
        std::cout << i << " ";
        ++i;
    }
    std::cout << std::endl;
}
CodeToRun:+182
#include <iostream>
using namespace std;

auto main() -> int
{
    int i = 0;
    while (i < 10)
    {
        std::cout << i << " ";
        ++i;
    }
    std::cout << std::endl;
}
Output:+21
0 1 2 3 4 5 6 7 8 9 
66 1553669646786 glotid
Sha1: b00352200ab054630d6e21c26db7011f5c45ef96
GlotID: faq9zd2qoo
482 1553669652349 glotoutput
Sha1: 89a5caf674884583a86344d2cc318185f774fa5b
Lang: C++
FileName: main.cpp
CodeFull:+186
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    int i =0;
    do
    {
        std::cout << i;
        ++i;
    } while (i < 0);
    std::cout << std::endl;
}
CodeToRun:+177
#include <iostream>
using namespace std;

auto main() -> int
{
    int i =0;
    do
    {
        std::cout << i;
        ++i;
    } while (i < 0);
    std::cout << std::endl;
}
Output:+2
0
66 1553669652657 glotid
Sha1: 89a5caf674884583a86344d2cc318185f774fa5b
GlotID: faq9zgiinp
595 1553669655578 glotoutput
Sha1: bb21b6dc66ff798514bce6b109412ce46f2bf1c8
Lang: C++
FileName: main.cpp
CodeFull:+240
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    int i = 0;
    do
    {
        std::cout << i;
        ++i;
        if (i > 5) {
            break;
        }
    }
    while (true);
    std::cout << std::endl;
}
CodeToRun:+231
#include <iostream>
using namespace std;

auto main() -> int
{
    int i = 0;
    do
    {
        std::cout << i;
        ++i;
        if (i > 5) {
            break;
        }
    }
    while (true);
    std::cout << std::endl;
}
Output:+7
012345
66 1553669655753 glotid
Sha1: bb21b6dc66ff798514bce6b109412ce46f2bf1c8
GlotID: faq9ziewev
572 1553669659824 glotoutput
Sha1: b141afbc2c5365bd792d833c5f0d0b949640e5c3
Lang: C++
FileName: main.cpp
CodeFull:+228
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    for (int i = 0; i < 10; i++)
    {
        if (i == 4)
            break; // this will immediately exit our loop
        std::cout << i << '\n';
    }
}
CodeToRun:+219
#include <iostream>
using namespace std;

auto main() -> int
{
    for (int i = 0; i < 10; i++)
    {
        if (i == 4)
            break; // this will immediately exit our loop
        std::cout << i << '\n';
    }
}
Output:+8
0
1
2
3
66 1553669660030 glotid
Sha1: b141afbc2c5365bd792d833c5f0d0b949640e5c3
GlotID: faq9zkxwhq
1000 1553669664110 glotoutput
Sha1: 663bc9d85178828448969fc9151c4f126a4382f1
Lang: C++
FileName: main.cpp
CodeFull:+417
// :glot
#include <iostream>
using namespace std;

auto main() -> int
{
    for (int i = 0; i < 6; i++)
    {
        if (i % 2 == 0) // evaluates to true if i is even
            continue; // this will immediately go back to the start of the loop
        /* the next line will only be reached if the above "continue" statement 
           does not execute  */
        std::cout << i << " is an odd number\n";
    }
}
CodeToRun:+408
#include <iostream>
using namespace std;

auto main() -> int
{
    for (int i = 0; i < 6; i++)
    {
        if (i % 2 == 0) // evaluates to true if i is even
            continue; // this will immediately go back to the start of the loop
        /* the next line will only be reached if the above "continue" statement 
           does not execute  */
        std::cout << i << " is an odd number\n";
    }
}
Output:+57
1 is an odd number
3 is an odd number
5 is an odd number
66 1553669664282 glotid
Sha1: 663bc9d85178828448969fc9151c4f126a4382f1
GlotID: faq9znhq37
2217 1553669668631 glotoutput
Sha1: fd0be7374bb7084ee9225b82b2badf038295db5a
Lang: C++
FileName: main.cpp
CodeFull:+1040
// :glot
#include <iostream>

class Animal {
private:
    double weight;
    double height;
public:
    Animal(double w, double h) : weight(w), height(h) { }
    friend void printWeight(Animal animal);
    friend class AnimalPrinter;
    // A common use for a friend function is to overload the operator<< for streaming. 
    friend std::ostream& operator<<(std::ostream& os, Animal animal);
};

void printWeight(Animal animal)
{
    std::cout << animal.weight << "\n";
}

class AnimalPrinter
{
public:
    void print(const Animal& animal)
    {
        // Because of the `friend class AnimalPrinter;" declaration, we are
        // allowed to access private members here.
        std::cout << animal.weight << ", " << animal.height << std::endl;
    }
};

std::ostream& operator<<(std::ostream& os, Animal animal)
{
    os << "Animal height: " << animal.height << "\n";
    return os;
}

int main() {
    Animal animal = {10, 5};
    printWeight(animal);

    AnimalPrinter aPrinter;
    aPrinter.print(animal);

    std::cout << animal;
}
CodeToRun:+1031
#include <iostream>

class Animal {
private:
    double weight;
    double height;
public:
    Animal(double w, double h) : weight(w), height(h) { }
    friend void printWeight(Animal animal);
    friend class AnimalPrinter;
    // A common use for a friend function is to overload the operator<< for streaming. 
    friend std::ostream& operator<<(std::ostream& os, Animal animal);
};

void printWeight(Animal animal)
{
    std::cout << animal.weight << "\n";
}

class AnimalPrinter
{
public:
    void print(const Animal& animal)
    {
        // Because of the `friend class AnimalPrinter;" declaration, we are
        // allowed to access private members here.
        std::cout << animal.weight << ", " << animal.height << std::endl;
    }
};

std::ostream& operator<<(std::ostream& os, Animal animal)
{
    os << "Animal height: " << animal.height << "\n";
    return os;
}

int main() {
    Animal animal = {10, 5};
    printWeight(animal);

    AnimalPrinter aPrinter;
    aPrinter.print(animal);

    std::cout << animal;
}
Output:+26
10
10, 5
Animal height: 5
66 1553669668804 glotid
Sha1: fd0be7374bb7084ee9225b82b2badf038295db5a
GlotID: faq9zq6nnu
747 1553669679896 glotoutput
Sha1: 19357eb1c250c1e350cf02870aff264cd4d1274e
Lang: C++
FileName: main.cpp
CodeFull:+308
// :glot
#include <iostream>
#include <string>

using namespace std;
 
int main() {
    std::string str = "Curiosity killed the cat";
    auto it = str.find("cat");
    
    if (it != std::string::npos)
        std::cout << "Found at position: " << it << '\n';
    else
        std::cout << "Not found!\n";
}
CodeToRun:+299
#include <iostream>
#include <string>

using namespace std;
 
int main() {
    std::string str = "Curiosity killed the cat";
    auto it = str.find("cat");
    
    if (it != std::string::npos)
        std::cout << "Found at position: " << it << '\n';
    else
        std::cout << "Not found!\n";
}
Output:+22
Found at position: 21
66 1553669680070 glotid
Sha1: 19357eb1c250c1e350cf02870aff264cd4d1274e
GlotID: faq9zww340
510 1553669686551 glotoutput
Sha1: b7c2301c07baf25d7c0684ff49d51e9b0cb35386
Lang: C++
FileName: main.cpp
CodeFull:+201
// :glot
#include <iostream>
#include <string>

using namespace std;
 
int main() {
    std::string str = "dog dog cat cat";
    std::cout << "Found at position: " << str.find_last_of("gzx") << '\n';
}
CodeToRun:+192
#include <iostream>
#include <string>

using namespace std;
 
int main() {
    std::string str = "dog dog cat cat";
    std::cout << "Found at position: " << str.find_last_of("gzx") << '\n';
}
Output:+0
66 1553669686728 glotid
Sha1: b7c2301c07baf25d7c0684ff49d51e9b0cb35386
GlotID: faqa00uul6
1504 1553669701696 glotoutput
Sha1: faaa450bed93d80fa1ad8807a2ff44a1f16b4c57
Lang: C++
FileName: main.cpp
CodeFull:+656
// :glot
#include <iostream>
#include <string>
#include <exception>
#include <stdexcept>
 
void handle_eptr(std::exception_ptr eptr) // passing by value is ok
{
    try {
        if (eptr) {
            std::rethrow_exception(eptr);
        }
    } catch(const std::exception& e) {
        std::cout << "Caught exception \"" << e.what() << "\"\n";
    }
}
 
int main()
{
    std::exception_ptr eptr;
    try {
        std::string().at(1); // this generates an std::out_of_range
    } catch(...) {
        eptr = std::current_exception(); // capture
    }
    handle_eptr(eptr);
} // destructor for std::out_of_range called here, when the eptr is destructed
CodeToRun:+647
#include <iostream>
#include <string>
#include <exception>
#include <stdexcept>
 
void handle_eptr(std::exception_ptr eptr) // passing by value is ok
{
    try {
        if (eptr) {
            std::rethrow_exception(eptr);
        }
    } catch(const std::exception& e) {
        std::cout << "Caught exception \"" << e.what() << "\"\n";
    }
}
 
int main()
{
    std::exception_ptr eptr;
    try {
        std::string().at(1); // this generates an std::out_of_range
    } catch(...) {
        eptr = std::current_exception(); // capture
    }
    handle_eptr(eptr);
} // destructor for std::out_of_range called here, when the eptr is destructed
Output:+83
Caught exception "basic_string::at: __n (which is 1) >= this->size() (which is 0)"
66 1553669701870 glotid
Sha1: faaa450bed93d80fa1ad8807a2ff44a1f16b4c57
GlotID: faqa09vlji
