{
  "ID": "35d45907-5d17-47f1-a956-dfffea7f783e",
  "Root": {
    "alive": true,
    "content": [
      "01ca6045-2d82-4787-a5cd-3fbbcfef2b36",
      "08b23c10-7c28-4265-a9fc-0241bf302e15",
      "0fc15a22-53eb-45d0-b9fb-618995eb3e75",
      "a810fde2-8b93-476d-9c4c-d3451d5d174b",
      "4422b752-7bac-4b02-ac10-7a8834660c2b",
      "848f798b-2b86-4ec5-b73e-d17f797ec81e",
      "273ee4e1-9636-4dc9-bf95-9dacc20b25b2",
      "b940246c-e241-494d-bd0d-37341c0c8868",
      "15534b93-1701-4d24-a421-541e87ebbdd5",
      "7eca221a-0dc3-47a3-8c60-a36cca529b8a",
      "3abb5d67-8c23-444b-aaa3-444b9c846873",
      "656a61df-ba12-41c2-8171-ed720261e66e",
      "b51bf1a1-b2ec-4176-adfb-5f972254acdc",
      "160f29ef-65c0-4ee9-bfbe-99d08d8bee2b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552024721336,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "35d45907-5d17-47f1-a956-dfffea7f783e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552024721336,
    "parent_id": "1ee62efb-a132-4463-ad88-13047e39701a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Symmetric Encryption and Decryption of large Files with OpenSSL"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721330,
        "id": "01ca6045-2d82-4787-a5cd-3fbbcfef2b36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721330,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PHP lacks a build-in function to encrypt and decrypt large files. "
            ],
            [
              "openssl_encrypt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to encrypt strings, but loading a huge file into memory is a bad idea."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PHP lacks a build-in function to encrypt and decrypt large files. "
          },
          {
            "Text": "openssl_encrypt",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to encrypt strings, but loading a huge file into memory is a bad idea."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "08b23c10-7c28-4265-a9fc-0241bf302e15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So we have to write a userland function doing that. This example uses the symmetric "
            ],
            [
              "AES-128-CBC",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/a/33124706/1119601"
                ]
              ]
            ],
            [
              " algorithm to encrypt smaller chunks of a large file and writes them into another file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So we have to write a userland function doing that. This example uses the symmetric "
          },
          {
            "Text": "AES-128-CBC",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/a/33124706/1119601"
          },
          {
            "Text": " algorithm to encrypt smaller chunks of a large file and writes them into another file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "0fc15a22-53eb-45d0-b9fb-618995eb3e75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Encrypt Files"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Encrypt Files"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "a810fde2-8b93-476d-9c4c-d3451d5d174b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * Define the number of blocks that should be read from the source file for each chunk.\n * For 'AES-128-CBC' each block consist of 16 bytes.\n * So if we read 10,000 blocks we load 160kb into memory. You may adjust this value\n * to read/write shorter or longer chunks.\n */\ndefine('FILE_ENCRYPTION_BLOCKS', 10000);\n\n/**\n * Encrypt the passed file and saves the result in a new file with \".enc\" as suffix.\n * \n * @param string $source Path to file that should be encrypted\n * @param string $key    The key used for the encryption\n * @param string $dest   File name where the encryped file should be written to.\n * @return string|false  Returns the file name that has been created or FALSE if an error occured\n */\nfunction encryptFile($source, $key, $dest)\n{\n    $key = substr(sha1($key, true), 0, 16);\n    $iv = openssl_random_pseudo_bytes(16);\n\n    $error = false;\n    if ($fpOut = fopen($dest, 'w')) {\n        // Put the initialzation vector to the beginning of the file\n        fwrite($fpOut, $iv);\n        if ($fpIn = fopen($source, 'rb')) {\n            while (!feof($fpIn)) {\n                $plaintext = fread($fpIn, 16 * FILE_ENCRYPTION_BLOCKS);\n                $ciphertext = openssl_encrypt($plaintext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);\n                // Use the first 16 bytes of the ciphertext as the next initialization vector\n                $iv = substr($ciphertext, 0, 16);\n                fwrite($fpOut, $ciphertext);\n            }\n            fclose($fpIn);\n        } else {\n            $error = true;\n        }\n        fclose($fpOut);\n    } else {\n        $error = true;\n    }\n\n    return $error ? false : $dest;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * Define the number of blocks that should be read from the source file for each chunk.\n * For 'AES-128-CBC' each block consist of 16 bytes.\n * So if we read 10,000 blocks we load 160kb into memory. You may adjust this value\n * to read/write shorter or longer chunks.\n */\ndefine('FILE_ENCRYPTION_BLOCKS', 10000);\n\n/**\n * Encrypt the passed file and saves the result in a new file with \".enc\" as suffix.\n * \n * @param string $source Path to file that should be encrypted\n * @param string $key    The key used for the encryption\n * @param string $dest   File name where the encryped file should be written to.\n * @return string|false  Returns the file name that has been created or FALSE if an error occured\n */\nfunction encryptFile($source, $key, $dest)\n{\n    $key = substr(sha1($key, true), 0, 16);\n    $iv = openssl_random_pseudo_bytes(16);\n\n    $error = false;\n    if ($fpOut = fopen($dest, 'w')) {\n        // Put the initialzation vector to the beginning of the file\n        fwrite($fpOut, $iv);\n        if ($fpIn = fopen($source, 'rb')) {\n            while (!feof($fpIn)) {\n                $plaintext = fread($fpIn, 16 * FILE_ENCRYPTION_BLOCKS);\n                $ciphertext = openssl_encrypt($plaintext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);\n                // Use the first 16 bytes of the ciphertext as the next initialization vector\n                $iv = substr($ciphertext, 0, 16);\n                fwrite($fpOut, $ciphertext);\n            }\n            fclose($fpIn);\n        } else {\n            $error = true;\n        }\n        fclose($fpOut);\n    } else {\n        $error = true;\n    }\n\n    return $error ? false : $dest;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "4422b752-7bac-4b02-ac10-7a8834660c2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decrypt Files"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Decrypt Files"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "848f798b-2b86-4ec5-b73e-d17f797ec81e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To decrypt files that have been encrypted with the above function you can use this function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To decrypt files that have been encrypted with the above function you can use this function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "273ee4e1-9636-4dc9-bf95-9dacc20b25b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * Dencrypt the passed file and saves the result in a new file, removing the\n * last 4 characters from file name.\n * \n * @param string $source Path to file that should be decrypted\n * @param string $key    The key used for the decryption (must be the same as for encryption)\n * @param string $dest   File name where the decryped file should be written to.\n * @return string|false  Returns the file name that has been created or FALSE if an error occured\n */\nfunction decryptFile($source, $key, $dest)\n{\n    $key = substr(sha1($key, true), 0, 16);\n\n    $error = false;\n    if ($fpOut = fopen($dest, 'w')) {\n        if ($fpIn = fopen($source, 'rb')) {\n            // Get the initialzation vector from the beginning of the file\n            $iv = fread($fpIn, 16);\n            while (!feof($fpIn)) {\n                $ciphertext = fread($fpIn, 16 * (FILE_ENCRYPTION_BLOCKS + 1)); // we have to read one block more for decrypting than for encrypting\n                $plaintext = openssl_decrypt($ciphertext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);\n                // Use the first 16 bytes of the ciphertext as the next initialization vector\n                $iv = substr($ciphertext, 0, 16);\n                fwrite($fpOut, $plaintext);\n            }\n            fclose($fpIn);\n        } else {\n            $error = true;\n        }\n        fclose($fpOut);\n    } else {\n        $error = true;\n    }\n\n    return $error ? false : $dest;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * Dencrypt the passed file and saves the result in a new file, removing the\n * last 4 characters from file name.\n * \n * @param string $source Path to file that should be decrypted\n * @param string $key    The key used for the decryption (must be the same as for encryption)\n * @param string $dest   File name where the decryped file should be written to.\n * @return string|false  Returns the file name that has been created or FALSE if an error occured\n */\nfunction decryptFile($source, $key, $dest)\n{\n    $key = substr(sha1($key, true), 0, 16);\n\n    $error = false;\n    if ($fpOut = fopen($dest, 'w')) {\n        if ($fpIn = fopen($source, 'rb')) {\n            // Get the initialzation vector from the beginning of the file\n            $iv = fread($fpIn, 16);\n            while (!feof($fpIn)) {\n                $ciphertext = fread($fpIn, 16 * (FILE_ENCRYPTION_BLOCKS + 1)); // we have to read one block more for decrypting than for encrypting\n                $plaintext = openssl_decrypt($ciphertext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);\n                // Use the first 16 bytes of the ciphertext as the next initialization vector\n                $iv = substr($ciphertext, 0, 16);\n                fwrite($fpOut, $plaintext);\n            }\n            fclose($fpIn);\n        } else {\n            $error = true;\n        }\n        fclose($fpOut);\n    } else {\n        $error = true;\n    }\n\n    return $error ? false : $dest;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721334,
        "id": "b940246c-e241-494d-bd0d-37341c0c8868",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721334,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to use"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721335,
        "id": "15534b93-1701-4d24-a421-541e87ebbdd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721335,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need a small snippet to see how this works or to test the above functions, look at the following code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need a small snippet to see how this works or to test the above functions, look at the following code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721335,
        "id": "7eca221a-0dc3-47a3-8c60-a36cca529b8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721335,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$fileName = __DIR__.'/testfile.txt';\n$key = 'my secret key';\nfile_put_contents($fileName, 'Hello World, here I am.');\nencryptFile($fileName, $key, $fileName . '.enc');\ndecryptFile($fileName . '.enc', $key, $fileName . '.dec');"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$fileName = __DIR__.'/testfile.txt';\n$key = 'my secret key';\nfile_put_contents($fileName, 'Hello World, here I am.');\nencryptFile($fileName, $key, $fileName . '.enc');\ndecryptFile($fileName . '.enc', $key, $fileName . '.dec');",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721335,
        "id": "3abb5d67-8c23-444b-aaa3-444b9c846873",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721335,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will create three files:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will create three files:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721335,
        "id": "656a61df-ba12-41c2-8171-ed720261e66e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721335,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "testfile.txt",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " with the plain text"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "testfile.txt",
            "AttrFlags": 4
          },
          {
            "Text": " with the plain text"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721335,
        "id": "b51bf1a1-b2ec-4176-adfb-5f972254acdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721335,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "testfile.txt.enc",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " with the encrypted file"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "testfile.txt.enc",
            "AttrFlags": 4
          },
          {
            "Text": " with the encrypted file"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024721336,
        "id": "160f29ef-65c0-4ee9-bfbe-99d08d8bee2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024721336,
        "parent_id": "35d45907-5d17-47f1-a956-dfffea7f783e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "testfile.txt.dec",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " with the decrypted file. This should have the same content as "
            ],
            [
              "testfile.txt",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "testfile.txt.dec",
            "AttrFlags": 4
          },
          {
            "Text": " with the decrypted file. This should have the same content as "
          },
          {
            "Text": "testfile.txt",
            "AttrFlags": 4
          }
        ]
      }
    ],
    "title": "Symmetric Encryption and Decryption of large Files with OpenSSL",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}