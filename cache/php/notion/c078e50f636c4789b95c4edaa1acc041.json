{
  "ID": "c078e50f-636c-4789-b95c-4edaa1acc041",
  "Root": {
    "alive": true,
    "content": [
      "3c1720bb-fba0-4cec-99f7-e4a6de9159bf",
      "8ec33845-70b5-43a2-bd88-5ba47d1c3b9d",
      "b429894b-e526-4161-8db2-33fa49ba217b",
      "17086c32-ae24-4c74-9908-fc2b3e604807",
      "43a7a206-57a5-42e4-8868-b38f781b8212",
      "7e705873-a301-4a6e-9463-28b79f4ecf31",
      "46dac757-83ac-43bf-bb90-f30d6b97236c",
      "fbec30d6-66ce-4185-867f-04894ee9c54d",
      "f4dc794b-70b4-498c-8975-113c083649b3",
      "d87941d8-31ec-48bc-a7eb-e74f5e1732d0",
      "2cfa8ec2-4030-40f0-9fcf-b0ae5e843946",
      "5c3a35e1-34ce-433a-aba4-23c960b23875",
      "e0158b72-6370-4c40-8963-f9bd6da0b8f5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552024398114,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c078e50f-636c-4789-b95c-4edaa1acc041",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552024398114,
    "parent_id": "d5631366-098b-4c90-b10a-4c27cda07738",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "HTTP Client Based on Ev Extension"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398111,
        "id": "3c1720bb-fba0-4cec-99f7-e4a6de9159bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398111,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a sample HTTP client based on "
            ],
            [
              "Ev",
              [
                [
                  "a",
                  "https://pecl.php.net/package/ev"
                ]
              ]
            ],
            [
              " extension."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a sample HTTP client based on "
          },
          {
            "Text": "Ev",
            "Link": "https://pecl.php.net/package/ev"
          },
          {
            "Text": " extension."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398112,
        "id": "8ec33845-70b5-43a2-bd88-5ba47d1c3b9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398112,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ev extension implements a simple yet powerful general purpose event loop. It doesn’t provide network-specific watchers, but its "
            ],
            [
              "I/O watcher",
              [
                [
                  "a",
                  "http://docs.php.net/manual/en/class.evio.php"
                ]
              ]
            ],
            [
              " can be used for asynchronous processing of "
            ],
            [
              "sockets",
              [
                [
                  "a",
                  "http://docs.php.net/manual/en/book.sockets.php"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ev extension implements a simple yet powerful general purpose event loop. It doesn’t provide network-specific watchers, but its "
          },
          {
            "Text": "I/O watcher",
            "Link": "http://docs.php.net/manual/en/class.evio.php"
          },
          {
            "Text": " can be used for asynchronous processing of "
          },
          {
            "Text": "sockets",
            "Link": "http://docs.php.net/manual/en/book.sockets.php"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398113,
        "id": "b429894b-e526-4161-8db2-33fa49ba217b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398113,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following code shows how HTTP requests can be scheduled for parallel processing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following code shows how HTTP requests can be scheduled for parallel processing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398113,
        "id": "17086c32-ae24-4c74-9908-fc2b3e604807",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398113,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http-client.php"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "http-client.php"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398113,
        "id": "43a7a206-57a5-42e4-8868-b38f781b8212",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398113,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\nclass MyHttpRequest {\n  /// @var MyHttpClient\n  private $http_client;\n  /// @var string\n  private $address;\n  /// @var string HTTP resource such as /page?get=param\n  private $resource;\n  /// @var string HTTP method such as GET, POST etc.\n  private $method;\n  /// @var int\n  private $service_port;\n  /// @var resource Socket\n  private $socket;\n  /// @var double Connection timeout in seconds.\n  private $timeout = 10.;\n  /// @var int Chunk size in bytes for socket_recv()\n  private $chunk_size = 20;\n  /// @var EvTimer\n  private $timeout_watcher;\n  /// @var EvIo\n  private $write_watcher;\n  /// @var EvIo\n  private $read_watcher;\n  /// @var EvTimer\n  private $conn_watcher;\n  /// @var string buffer for incoming data\n  private $buffer;\n  /// @var array errors reported by sockets extension in non-blocking mode.\n  private static $e_nonblocking = [\n    11, // EAGAIN or EWOULDBLOCK\n    115, // EINPROGRESS\n  ];\n\n  /**\n   * @param MyHttpClient $client\n   * @param string $host Hostname, e.g. google.co.uk\n   * @param string $resource HTTP resource, e.g. /page?a=b\u0026c=d\n   * @param string $method HTTP method: GET, HEAD, POST, PUT etc.\n   * @throws RuntimeException\n   */\n  public function __construct(MyHttpClient $client, $host, $resource, $method) {\n    $this-\u003ehttp_client = $client;\n    $this-\u003ehost        = $host;\n    $this-\u003eresource    = $resource;\n    $this-\u003emethod      = $method;\n\n    // Get the port for the WWW service\n    $this-\u003eservice_port = getservbyname('www', 'tcp');\n\n    // Get the IP address for the target host\n    $this-\u003eaddress = gethostbyname($this-\u003ehost);\n\n    // Create a TCP/IP socket\n    $this-\u003esocket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if (!$this-\u003esocket) {\n      throw new RuntimeException(\"socket_create() failed: reason: \" .\n        socket_strerror(socket_last_error()));\n    }\n\n    // Set O_NONBLOCK flag\n    socket_set_nonblock($this-\u003esocket);\n\n    $this-\u003econn_watcher = $this-\u003ehttp_client-\u003egetLoop()\n      -\u003etimer(0, 0., [$this, 'connect']);\n  }\n\n  public function __destruct() {\n    $this-\u003eclose();\n  }\n\n  private function freeWatcher(\u0026$w) {\n    if ($w) {\n      $w-\u003estop();\n      $w = null;\n    }\n  }\n\n  /**\n   * Deallocates all resources of the request\n   */\n  private function close() {\n    if ($this-\u003esocket) {\n      socket_close($this-\u003esocket);\n      $this-\u003esocket = null;\n    }\n\n    $this-\u003efreeWatcher($this-\u003etimeout_watcher);\n    $this-\u003efreeWatcher($this-\u003eread_watcher);\n    $this-\u003efreeWatcher($this-\u003ewrite_watcher);\n    $this-\u003efreeWatcher($this-\u003econn_watcher);\n  }\n\n  /**\n   * Initializes a connection on socket\n   * @return bool\n   */\n  public function connect() {\n    $loop = $this-\u003ehttp_client-\u003egetLoop();\n\n    $this-\u003etimeout_watcher = $loop-\u003etimer($this-\u003etimeout, 0., [$this, '_onTimeout']);\n    $this-\u003ewrite_watcher = $loop-\u003eio($this-\u003esocket, Ev::WRITE, [$this, '_onWritable']);\n\n    return socket_connect($this-\u003esocket, $this-\u003eaddress, $this-\u003eservice_port);\n  }\n\n  /**\n   * Callback for timeout (EvTimer) watcher\n   */\n  public function _onTimeout(EvTimer $w) {\n    $w-\u003estop();\n    $this-\u003eclose();\n  }\n\n  /**\n   * Callback which is called when the socket becomes wriable\n   */\n  public function _onWritable(EvIo $w) {\n    $this-\u003etimeout_watcher-\u003estop();\n    $w-\u003estop();\n\n    $in = implode(\"\\r\\n\", [\n      \"{$this-\u003emethod} {$this-\u003eresource} HTTP/1.1\",\n      \"Host: {$this-\u003ehost}\",\n      'Connection: Close',\n    ]) . \"\\r\\n\\r\\n\";\n\n    if (!socket_write($this-\u003esocket, $in, strlen($in))) {\n      trigger_error(\"Failed writing $in to socket\", E_USER_ERROR);\n      return;\n    }\n\n    $loop = $this-\u003ehttp_client-\u003egetLoop();\n    $this-\u003eread_watcher = $loop-\u003eio($this-\u003esocket,\n      Ev::READ, [$this, '_onReadable']);\n\n    // Continue running the loop\n    $loop-\u003erun();\n  }\n\n  /**\n   * Callback which is called when the socket becomes readable\n   */\n  public function _onReadable(EvIo $w) {\n    // recv() 20 bytes in non-blocking mode\n    $ret = socket_recv($this-\u003esocket, $out, 20, MSG_DONTWAIT);\n\n    if ($ret) {\n      // Still have data to read. Append the read chunk to the buffer.\n      $this-\u003ebuffer .= $out;\n    } elseif ($ret === 0) {\n      // All is read\n      printf(\"\\n\u003c\u003c\u003c\u003c\\n%s\\n\u003e\u003e\u003e\u003e\", rtrim($this-\u003ebuffer));\n      fflush(STDOUT);\n      $w-\u003estop();\n      $this-\u003eclose();\n      return;\n    }\n\n    // Caught EINPROGRESS, EAGAIN, or EWOULDBLOCK\n    if (in_array(socket_last_error(), static::$e_nonblocking)) {\n      return;\n    }\n\n    $w-\u003estop();\n    $this-\u003eclose();\n  }\n}\n\n/////////////////////////////////////\nclass MyHttpClient {\n  /// @var array Instances of MyHttpRequest\n  private $requests = [];\n  /// @var EvLoop\n  private $loop;\n\n  public function __construct() {\n    // Each HTTP client runs its own event loop\n    $this-\u003eloop = new EvLoop();\n  }\n\n  public function __destruct() {\n    $this-\u003eloop-\u003estop();\n  }\n\n  /**\n   * @return EvLoop\n   */\n  public function getLoop() {\n    return $this-\u003eloop;\n  }\n\n  /**\n   * Adds a pending request\n   */\n  public function addRequest(MyHttpRequest $r) {\n    $this-\u003erequests []= $r;\n  }\n\n  /**\n   * Dispatches all pending requests\n   */\n  public function run() {\n    $this-\u003eloop-\u003erun();\n  }\n}\n\n\n/////////////////////////////////////\n// Usage\n$client = new MyHttpClient();\nforeach (range(1, 10) as $i) {\n  $client-\u003eaddRequest(new MyHttpRequest($client, 'my-host.local', '/test.php?a=' . $i, 'GET'));\n}\n$client-\u003erun();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\nclass MyHttpRequest {\n  /// @var MyHttpClient\n  private $http_client;\n  /// @var string\n  private $address;\n  /// @var string HTTP resource such as /page?get=param\n  private $resource;\n  /// @var string HTTP method such as GET, POST etc.\n  private $method;\n  /// @var int\n  private $service_port;\n  /// @var resource Socket\n  private $socket;\n  /// @var double Connection timeout in seconds.\n  private $timeout = 10.;\n  /// @var int Chunk size in bytes for socket_recv()\n  private $chunk_size = 20;\n  /// @var EvTimer\n  private $timeout_watcher;\n  /// @var EvIo\n  private $write_watcher;\n  /// @var EvIo\n  private $read_watcher;\n  /// @var EvTimer\n  private $conn_watcher;\n  /// @var string buffer for incoming data\n  private $buffer;\n  /// @var array errors reported by sockets extension in non-blocking mode.\n  private static $e_nonblocking = [\n    11, // EAGAIN or EWOULDBLOCK\n    115, // EINPROGRESS\n  ];\n\n  /**\n   * @param MyHttpClient $client\n   * @param string $host Hostname, e.g. google.co.uk\n   * @param string $resource HTTP resource, e.g. /page?a=b\u0026c=d\n   * @param string $method HTTP method: GET, HEAD, POST, PUT etc.\n   * @throws RuntimeException\n   */\n  public function __construct(MyHttpClient $client, $host, $resource, $method) {\n    $this-\u003ehttp_client = $client;\n    $this-\u003ehost        = $host;\n    $this-\u003eresource    = $resource;\n    $this-\u003emethod      = $method;\n\n    // Get the port for the WWW service\n    $this-\u003eservice_port = getservbyname('www', 'tcp');\n\n    // Get the IP address for the target host\n    $this-\u003eaddress = gethostbyname($this-\u003ehost);\n\n    // Create a TCP/IP socket\n    $this-\u003esocket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if (!$this-\u003esocket) {\n      throw new RuntimeException(\"socket_create() failed: reason: \" .\n        socket_strerror(socket_last_error()));\n    }\n\n    // Set O_NONBLOCK flag\n    socket_set_nonblock($this-\u003esocket);\n\n    $this-\u003econn_watcher = $this-\u003ehttp_client-\u003egetLoop()\n      -\u003etimer(0, 0., [$this, 'connect']);\n  }\n\n  public function __destruct() {\n    $this-\u003eclose();\n  }\n\n  private function freeWatcher(\u0026$w) {\n    if ($w) {\n      $w-\u003estop();\n      $w = null;\n    }\n  }\n\n  /**\n   * Deallocates all resources of the request\n   */\n  private function close() {\n    if ($this-\u003esocket) {\n      socket_close($this-\u003esocket);\n      $this-\u003esocket = null;\n    }\n\n    $this-\u003efreeWatcher($this-\u003etimeout_watcher);\n    $this-\u003efreeWatcher($this-\u003eread_watcher);\n    $this-\u003efreeWatcher($this-\u003ewrite_watcher);\n    $this-\u003efreeWatcher($this-\u003econn_watcher);\n  }\n\n  /**\n   * Initializes a connection on socket\n   * @return bool\n   */\n  public function connect() {\n    $loop = $this-\u003ehttp_client-\u003egetLoop();\n\n    $this-\u003etimeout_watcher = $loop-\u003etimer($this-\u003etimeout, 0., [$this, '_onTimeout']);\n    $this-\u003ewrite_watcher = $loop-\u003eio($this-\u003esocket, Ev::WRITE, [$this, '_onWritable']);\n\n    return socket_connect($this-\u003esocket, $this-\u003eaddress, $this-\u003eservice_port);\n  }\n\n  /**\n   * Callback for timeout (EvTimer) watcher\n   */\n  public function _onTimeout(EvTimer $w) {\n    $w-\u003estop();\n    $this-\u003eclose();\n  }\n\n  /**\n   * Callback which is called when the socket becomes wriable\n   */\n  public function _onWritable(EvIo $w) {\n    $this-\u003etimeout_watcher-\u003estop();\n    $w-\u003estop();\n\n    $in = implode(\"\\r\\n\", [\n      \"{$this-\u003emethod} {$this-\u003eresource} HTTP/1.1\",\n      \"Host: {$this-\u003ehost}\",\n      'Connection: Close',\n    ]) . \"\\r\\n\\r\\n\";\n\n    if (!socket_write($this-\u003esocket, $in, strlen($in))) {\n      trigger_error(\"Failed writing $in to socket\", E_USER_ERROR);\n      return;\n    }\n\n    $loop = $this-\u003ehttp_client-\u003egetLoop();\n    $this-\u003eread_watcher = $loop-\u003eio($this-\u003esocket,\n      Ev::READ, [$this, '_onReadable']);\n\n    // Continue running the loop\n    $loop-\u003erun();\n  }\n\n  /**\n   * Callback which is called when the socket becomes readable\n   */\n  public function _onReadable(EvIo $w) {\n    // recv() 20 bytes in non-blocking mode\n    $ret = socket_recv($this-\u003esocket, $out, 20, MSG_DONTWAIT);\n\n    if ($ret) {\n      // Still have data to read. Append the read chunk to the buffer.\n      $this-\u003ebuffer .= $out;\n    } elseif ($ret === 0) {\n      // All is read\n      printf(\"\\n\u003c\u003c\u003c\u003c\\n%s\\n\u003e\u003e\u003e\u003e\", rtrim($this-\u003ebuffer));\n      fflush(STDOUT);\n      $w-\u003estop();\n      $this-\u003eclose();\n      return;\n    }\n\n    // Caught EINPROGRESS, EAGAIN, or EWOULDBLOCK\n    if (in_array(socket_last_error(), static::$e_nonblocking)) {\n      return;\n    }\n\n    $w-\u003estop();\n    $this-\u003eclose();\n  }\n}\n\n/////////////////////////////////////\nclass MyHttpClient {\n  /// @var array Instances of MyHttpRequest\n  private $requests = [];\n  /// @var EvLoop\n  private $loop;\n\n  public function __construct() {\n    // Each HTTP client runs its own event loop\n    $this-\u003eloop = new EvLoop();\n  }\n\n  public function __destruct() {\n    $this-\u003eloop-\u003estop();\n  }\n\n  /**\n   * @return EvLoop\n   */\n  public function getLoop() {\n    return $this-\u003eloop;\n  }\n\n  /**\n   * Adds a pending request\n   */\n  public function addRequest(MyHttpRequest $r) {\n    $this-\u003erequests []= $r;\n  }\n\n  /**\n   * Dispatches all pending requests\n   */\n  public function run() {\n    $this-\u003eloop-\u003erun();\n  }\n}\n\n\n/////////////////////////////////////\n// Usage\n$client = new MyHttpClient();\nforeach (range(1, 10) as $i) {\n  $client-\u003eaddRequest(new MyHttpRequest($client, 'my-host.local', '/test.php?a=' . $i, 'GET'));\n}\n$client-\u003erun();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398113,
        "id": "7e705873-a301-4a6e-9463-28b79f4ecf31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398113,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Testing"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Testing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398113,
        "id": "46dac757-83ac-43bf-bb90-f30d6b97236c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398113,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose "
            ],
            [
              "http://my-host.local/test.php",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " script is printing the dump of "
            ],
            [
              "$_GET",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose "
          },
          {
            "Text": "http://my-host.local/test.php",
            "AttrFlags": 2
          },
          {
            "Text": " script is printing the dump of "
          },
          {
            "Text": "$_GET",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398113,
        "id": "fbec30d6-66ce-4185-867f-04894ee9c54d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398113,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\necho 'GET: ', var_export($_GET, true), PHP_EOL;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\necho 'GET: ', var_export($_GET, true), PHP_EOL;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398114,
        "id": "f4dc794b-70b4-498c-8975-113c083649b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398114,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then the output of "
            ],
            [
              "php http-client.php",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " command will be similar to the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then the output of "
          },
          {
            "Text": "php http-client.php",
            "AttrFlags": 2
          },
          {
            "Text": " command will be similar to the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398114,
        "id": "d87941d8-31ec-48bc-a7eb-e74f5e1732d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398114,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c\u003c\u003c\u003c\nHTTP/1.1 200 OK\nServer: nginx/1.10.1\nDate: Fri, 02 Dec 2016 12:39:54 GMT\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nConnection: close\nX-Powered-By: PHP/7.0.13-pl0-gentoo\n\n1d\nGET: array (\n  'a' =\u003e '3',\n)\n\n0\n\u003e\u003e\u003e\u003e\n\u003c\u003c\u003c\u003c\nHTTP/1.1 200 OK\nServer: nginx/1.10.1\nDate: Fri, 02 Dec 2016 12:39:54 GMT\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nConnection: close\nX-Powered-By: PHP/7.0.13-pl0-gentoo\n\n1d\nGET: array (\n  'a' =\u003e '2',\n)\n\n0\n\u003e\u003e\u003e\u003e\n..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c\u003c\u003c\u003c\nHTTP/1.1 200 OK\nServer: nginx/1.10.1\nDate: Fri, 02 Dec 2016 12:39:54 GMT\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nConnection: close\nX-Powered-By: PHP/7.0.13-pl0-gentoo\n\n1d\nGET: array (\n  'a' =\u003e '3',\n)\n\n0\n\u003e\u003e\u003e\u003e\n\u003c\u003c\u003c\u003c\nHTTP/1.1 200 OK\nServer: nginx/1.10.1\nDate: Fri, 02 Dec 2016 12:39:54 GMT\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nConnection: close\nX-Powered-By: PHP/7.0.13-pl0-gentoo\n\n1d\nGET: array (\n  'a' =\u003e '2',\n)\n\n0\n\u003e\u003e\u003e\u003e\n...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398114,
        "id": "2cfa8ec2-4030-40f0-9fcf-b0ae5e843946",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398114,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(trimmed)",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(trimmed)",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398114,
        "id": "5c3a35e1-34ce-433a-aba4-23c960b23875",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398114,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note, in PHP 5 the "
            ],
            [
              "sockets",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " extension may log warnings for "
            ],
            [
              "EINPROGRESS",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "EAGAIN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "EWOULDBLOCK",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "errno",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values. It is possible to turn off the logs with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note, in PHP 5 the "
          },
          {
            "Text": "sockets",
            "AttrFlags": 4
          },
          {
            "Text": " extension may log warnings for "
          },
          {
            "Text": "EINPROGRESS",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "EAGAIN",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "EWOULDBLOCK",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "errno",
            "AttrFlags": 2
          },
          {
            "Text": " values. It is possible to turn off the logs with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024398114,
        "id": "e0158b72-6370-4c40-8963-f9bd6da0b8f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024398114,
        "parent_id": "c078e50f-636c-4789-b95c-4edaa1acc041",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "error_reporting(E_ERROR);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "error_reporting(E_ERROR);",
        "code_language": "Plain Text"
      }
    ],
    "title": "HTTP Client Based on Ev Extension",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}