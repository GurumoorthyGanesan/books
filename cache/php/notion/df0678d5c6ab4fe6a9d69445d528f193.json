{
  "ID": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
  "Root": {
    "alive": true,
    "content": [
      "0ba1831a-1994-4a48-a51b-c97d290db064",
      "d52c45a3-c989-4fe8-a295-11cf7bbe3df7",
      "cb408a21-68a5-4790-af95-b5b59abe521c",
      "82304222-8295-420f-9b17-fa2d51dc97a8",
      "06125521-7484-47a6-9088-972f6e9669d9",
      "4edf8238-5f98-4cf0-9869-106893ebf180",
      "2f945a5e-0ac7-4246-9384-1e77ca4c9bbe",
      "ab0a6a8f-4da7-45c9-83e6-659f300b88c0",
      "c6e2f98f-e7b2-4b17-bd8e-4a6e9a2739a8",
      "81fdbcaf-eab8-48dd-83e2-479a245dee1c",
      "c28d0705-639a-4b87-a076-4390bca97228",
      "6bfed2d0-f720-4538-9e8e-1175c769110c",
      "de480e02-fb3a-4aca-ab4b-b5ab396f0b41",
      "3e202d6d-482e-4a6c-89ac-6363326d5aeb",
      "ada28b73-1d33-46eb-9ff0-a603455b39e4",
      "dcb10461-788e-4fb4-9265-d793a1ab28eb",
      "b5dc5333-3589-42aa-820b-9ca751adc54e",
      "b3233640-785e-4b96-bba2-6c009e1919fd",
      "50462948-2a49-4a4d-bab0-c9787cef031a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552024729167,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552024729167,
    "parent_id": "3bb8f2d9-3a30-426a-90e4-c8d89d2b2785",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Preventing SQL injection with Parameterized Queries"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729157,
        "id": "0ba1831a-1994-4a48-a51b-c97d290db064",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729157,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SQL injection is a kind of attack that allows a malicious user to modify the SQL query, adding unwanted commands to it. For example, the following code is "
            ],
            [
              "vulnerable",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SQL injection is a kind of attack that allows a malicious user to modify the SQL query, adding unwanted commands to it. For example, the following code is "
          },
          {
            "Text": "vulnerable",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729160,
        "id": "d52c45a3-c989-4fe8-a295-11cf7bbe3df7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729160,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Do not use this vulnerable code!\n$sql = 'SELECT name, email, user_level FROM users WHERE userID = ' . $_GET['user'];\n$conn-\u003equery($sql);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Do not use this vulnerable code!\n$sql = 'SELECT name, email, user_level FROM users WHERE userID = ' . $_GET['user'];\n$conn-\u003equery($sql);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729160,
        "id": "cb408a21-68a5-4790-af95-b5b59abe521c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729160,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows any user of this script to modify our database basically at will. For example consider the following query string:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows any user of this script to modify our database basically at will. For example consider the following query string:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729160,
        "id": "82304222-8295-420f-9b17-fa2d51dc97a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729160,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "page.php?user=0;%20TRUNCATE%20TABLE%20users;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "page.php?user=0;%20TRUNCATE%20TABLE%20users;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729160,
        "id": "06125521-7484-47a6-9088-972f6e9669d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729160,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This makes our example query look like this"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This makes our example query look like this"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729160,
        "id": "4edf8238-5f98-4cf0-9869-106893ebf180",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729160,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "SELECT name, email, user_level FROM users WHERE userID = 0; TRUNCATE TABLE users;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "SELECT name, email, user_level FROM users WHERE userID = 0; TRUNCATE TABLE users;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729160,
        "id": "2f945a5e-0ac7-4246-9384-1e77ca4c9bbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729160,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While this is an extreme example (most SQL injection attacks do not aim to delete data, nor do most PHP query execution functions support multi-query), this is an example of how a SQL injection attack can be made possible by the careless assembly of the query. Unfortunately, attacks like this are very common, and are highly effective due to coders who fail to take proper precautions to protect their data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While this is an extreme example (most SQL injection attacks do not aim to delete data, nor do most PHP query execution functions support multi-query), this is an example of how a SQL injection attack can be made possible by the careless assembly of the query. Unfortunately, attacks like this are very common, and are highly effective due to coders who fail to take proper precautions to protect their data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729161,
        "id": "ab0a6a8f-4da7-45c9-83e6-659f300b88c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729161,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To prevent SQL injection from occurring, "
            ],
            [
              "prepared statements",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are the recommended solution. Instead of concatenating user data directly to the query, a "
            ],
            [
              "placeholder",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is used instead. The data is then sent separately, which means there is no chance of the SQL engine confusing user data for a set of instructions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To prevent SQL injection from occurring, "
          },
          {
            "Text": "prepared statements",
            "AttrFlags": 1
          },
          {
            "Text": " are the recommended solution. Instead of concatenating user data directly to the query, a "
          },
          {
            "Text": "placeholder",
            "AttrFlags": 4
          },
          {
            "Text": " is used instead. The data is then sent separately, which means there is no chance of the SQL engine confusing user data for a set of instructions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729161,
        "id": "c6e2f98f-e7b2-4b17-bd8e-4a6e9a2739a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729161,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While the topic here is PDO, please note that the PHP MySQLi extension also supports prepared statements"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "While the topic here is PDO, please note that the PHP MySQLi extension also supports prepared statements"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729161,
        "id": "81fdbcaf-eab8-48dd-83e2-479a245dee1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729161,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PDO supports two kinds of placeholders (placeholders cannot be used for column or table names, only values):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PDO supports two kinds of placeholders (placeholders cannot be used for column or table names, only values):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729163,
        "id": "c28d0705-639a-4b87-a076-4390bca97228",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729163,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Named placeholders. A colon("
            ],
            [
              ":",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), followed by a distinct name (eg. "
            ],
            [
              ":user",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Named placeholders. A colon("
          },
          {
            "Text": ":",
            "AttrFlags": 2
          },
          {
            "Text": "), followed by a distinct name (eg. "
          },
          {
            "Text": ":user",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729163,
        "id": "6bfed2d0-f720-4538-9e8e-1175c769110c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729163,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// using named placeholders\n$sql = 'SELECT name, email, user_level FROM users WHERE userID = :user';\n$prep = $conn-\u003eprepare($sql);\n$prep-\u003eexecute(['user' =\u003e $_GET['user']]); // associative array\n$result = $prep-\u003efetchAll();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// using named placeholders\n$sql = 'SELECT name, email, user_level FROM users WHERE userID = :user';\n$prep = $conn-\u003eprepare($sql);\n$prep-\u003eexecute(['user' =\u003e $_GET['user']]); // associative array\n$result = $prep-\u003efetchAll();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729163,
        "id": "de480e02-fb3a-4aca-ab4b-b5ab396f0b41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729163,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Traditional SQL positional placeholders, represented as "
            ],
            [
              "?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Traditional SQL positional placeholders, represented as "
          },
          {
            "Text": "?",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729163,
        "id": "3e202d6d-482e-4a6c-89ac-6363326d5aeb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729163,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// using question-mark placeholders\n$sql = 'SELECT name, user_level FROM users WHERE userID = ? AND user_level = ?';\n$prep = $conn-\u003eprepare($sql);\n$prep-\u003eexecute([$_GET['user'], $_GET['user_level']]); // indexed array\n$result = $prep-\u003efetchAll();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// using question-mark placeholders\n$sql = 'SELECT name, user_level FROM users WHERE userID = ? AND user_level = ?';\n$prep = $conn-\u003eprepare($sql);\n$prep-\u003eexecute([$_GET['user'], $_GET['user_level']]); // indexed array\n$result = $prep-\u003efetchAll();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729163,
        "id": "ada28b73-1d33-46eb-9ff0-a603455b39e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729163,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If ever you need to dynamically change table or column names, know that this is at your own security risks and a bad practice. Though, it can be done by string concatenation. One way to improve security of such queries is to set a table of allowed values and compare the value you want to concatenate to this table."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If ever you need to dynamically change table or column names, know that this is at your own security risks and a bad practice. Though, it can be done by string concatenation. One way to improve security of such queries is to set a table of allowed values and compare the value you want to concatenate to this table."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729165,
        "id": "dcb10461-788e-4fb4-9265-d793a1ab28eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729165,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be aware that it is important to set connection charset through DSN only, otherwise your application could be prone to an "
            ],
            [
              "obscure vulnerability",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218"
                ]
              ]
            ],
            [
              " if some odd encoding is used. For PDO versions prior to 5.3.6 setting charset through DSN is not available and thus the only option is to set "
            ],
            [
              "PDO::ATTR_EMULATE_PREPARES",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " attribute to "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the connection right after it’s created."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be aware that it is important to set connection charset through DSN only, otherwise your application could be prone to an "
          },
          {
            "Text": "obscure vulnerability",
            "Link": "https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218"
          },
          {
            "Text": " if some odd encoding is used. For PDO versions prior to 5.3.6 setting charset through DSN is not available and thus the only option is to set "
          },
          {
            "Text": "PDO::ATTR_EMULATE_PREPARES",
            "AttrFlags": 2
          },
          {
            "Text": " attribute to "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " on the connection right after it’s created."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729165,
        "id": "b5dc5333-3589-42aa-820b-9ca751adc54e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729165,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$conn-\u003esetAttribute(PDO::ATTR_EMULATE_PREPARES, false);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$conn-\u003esetAttribute(PDO::ATTR_EMULATE_PREPARES, false);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729165,
        "id": "b3233640-785e-4b96-bba2-6c009e1919fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729165,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This causes PDO to use the underlying DBMS’s native prepared statements instead of just emulating it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This causes PDO to use the underlying DBMS’s native prepared statements instead of just emulating it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024729166,
        "id": "50462948-2a49-4a4d-bab0-c9787cef031a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024729166,
        "parent_id": "df0678d5-c6ab-4fe6-a9d6-9445d528f193",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, be aware that PDO will "
            ],
            [
              "silently fallback",
              [
                [
                  "a",
                  "https://github.com/php/php-src/blob/master/ext/pdo_mysql/mysql_driver.c#L210"
                ]
              ]
            ],
            [
              " to emulating statements that MySQL cannot prepare natively: those that it can are "
            ],
            [
              "listed in the manual",
              [
                [
                  "a",
                  "http://dev.mysql.com/doc/en/sql-syntax-prepared-statements.html"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "source",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, be aware that PDO will "
          },
          {
            "Text": "silently fallback",
            "Link": "https://github.com/php/php-src/blob/master/ext/pdo_mysql/mysql_driver.c#L210"
          },
          {
            "Text": " to emulating statements that MySQL cannot prepare natively: those that it can are "
          },
          {
            "Text": "listed in the manual",
            "Link": "http://dev.mysql.com/doc/en/sql-syntax-prepared-statements.html"
          },
          {
            "Text": " ("
          },
          {
            "Text": "source",
            "Link": "https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218"
          },
          {
            "Text": ")."
          }
        ]
      }
    ],
    "title": "Preventing SQL injection with Parameterized Queries",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}