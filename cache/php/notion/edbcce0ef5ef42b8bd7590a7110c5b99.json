{
  "ID": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
  "Root": {
    "alive": true,
    "content": [
      "1865daad-33df-4794-a8b2-9826be9df84a",
      "5264b7fc-de27-49cd-916a-374dbd8efb1e",
      "175e1ae6-78bd-4562-8bc0-43f5cc866b33",
      "98ea2b7a-d889-43bd-ab59-75afc3aa0bfa",
      "d7215e1a-cf81-4840-8189-3a0d87643c09",
      "68ddb4b1-640f-4341-bf3c-6a601548818c",
      "dca6b0dd-44ec-42b7-9b02-4aa533777bf2",
      "bb72a10f-c271-4d90-b4db-4547fed5d9e5",
      "80ce60a6-714f-44fa-bb24-6416f7b70c1b",
      "9a30d518-5175-4e26-8e31-b5713677955e",
      "7a8616a6-7ad7-4057-9e51-d7f164b6e50e",
      "37084014-de1f-4cac-ad22-1a79dbe869e1",
      "0c6973d1-2772-4b34-b734-8724ed9bf205",
      "2b9c4a7d-727b-44ee-ae36-38f49f52739e",
      "338b23fa-1074-4161-9fb7-cca352a97aee",
      "ec453ddb-ae3b-4046-aefa-dbcfe6e5e4ab",
      "d9b96514-3a37-469a-aa7c-928bf301cb74",
      "01e8410b-f818-4798-af00-bbdf5729d85a",
      "ae9086ee-638a-4cfb-b698-7941daf15780",
      "0d87c17d-aa39-4106-8fc8-5502c3f7cc98"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022402191,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022402191,
    "parent_id": "8e344e73-ab23-422f-9bc5-1b7a660edb69",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Accessing private and protected member variables"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402182,
        "id": "1865daad-33df-4794-a8b2-9826be9df84a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402182,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects. It’s also great for inspecting the state of an object at any given point in time. Here’s an example of using Reflection in a unit test to verify a protected class member contains the expected value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects. It’s also great for inspecting the state of an object at any given point in time. Here’s an example of using Reflection in a unit test to verify a protected class member contains the expected value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402185,
        "id": "5264b7fc-de27-49cd-916a-374dbd8efb1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402185,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is a very basic class for a Car. It has a protected member variable that will contain the value representing the color of the car. Because the member variable is protected we cannot access it directly and must use a getter and setter method to retrieve and set its value respectively."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is a very basic class for a Car. It has a protected member variable that will contain the value representing the color of the car. Because the member variable is protected we cannot access it directly and must use a getter and setter method to retrieve and set its value respectively."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402185,
        "id": "175e1ae6-78bd-4562-8bc0-43f5cc866b33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402185,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Car\n{\n    protected $color\n    \n    public function setColor($color)\n    {\n        $this-\u003ecolor = $color;\n    }\n    \n    public function getColor($color)\n    {\n        return $this-\u003ecolor;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Car\n{\n    protected $color\n    \n    public function setColor($color)\n    {\n        $this-\u003ecolor = $color;\n    }\n    \n    public function getColor($color)\n    {\n        return $this-\u003ecolor;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402185,
        "id": "98ea2b7a-d889-43bd-ab59-75afc3aa0bfa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402185,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To test this many developers will create a Car object, set the car’s color using "
            ],
            [
              "Car::setColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", retrieve the color using "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and compare that value to the color they set:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To test this many developers will create a Car object, set the car’s color using "
          },
          {
            "Text": "Car::setColor()",
            "AttrFlags": 2
          },
          {
            "Text": ", retrieve the color using "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": ", and compare that value to the color they set:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402186,
        "id": "d7215e1a-cf81-4840-8189-3a0d87643c09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402186,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * @test\n * @covers     \\Car::setColor\n */\npublic function testSetColor()\n{\n    $color = 'Red';\n\n    $car = new \\Car();\n    $car-\u003esetColor($color);\n    $getColor = $car-\u003egetColor();\n        \n    $this-\u003eassertEquals($color, $reflectionColor);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * @test\n * @covers     \\Car::setColor\n */\npublic function testSetColor()\n{\n    $color = 'Red';\n\n    $car = new \\Car();\n    $car-\u003esetColor($color);\n    $getColor = $car-\u003egetColor();\n        \n    $this-\u003eassertEquals($color, $reflectionColor);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402186,
        "id": "68ddb4b1-640f-4341-bf3c-6a601548818c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402186,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the surface this seems okay. After all, all "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does is return the value of the protected member variable "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But this test is flawed in two ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the surface this seems okay. After all, all "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " does is return the value of the protected member variable "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": ". But this test is flawed in two ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402186,
        "id": "dca6b0dd-44ec-42b7-9b02-4aa533777bf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402186,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It exercises "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is out of the scope of this test"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It exercises "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " which is out of the scope of this test"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402186,
        "id": "bb72a10f-c271-4d90-b4db-4547fed5d9e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402186,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It depends on "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which may have a bug itself which can make the test have a false positive or negative"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "It depends on "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " which may have a bug itself which can make the test have a false positive or negative"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402187,
        "id": "80ce60a6-714f-44fa-bb24-6416f7b70c1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402187,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s look at why we shouldn’t use "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in our unit test and should use Reflection instead. Let’s say a developer is assigned a task to add “Metallic” to every car color. So they attempt to modify the "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to prepend “Metallic” to the car’s color:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s look at why we shouldn’t use "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " in our unit test and should use Reflection instead. Let’s say a developer is assigned a task to add “Metallic” to every car color. So they attempt to modify the "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " to prepend “Metallic” to the car’s color:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402187,
        "id": "9a30d518-5175-4e26-8e31-b5713677955e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402187,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Car\n{\n    protected $color\n    \n    public function setColor($color)\n    {\n        $this-\u003ecolor = $color;\n    }\n    \n    public function getColor($color)\n    {\n        return \"Metallic \"; $this-\u003ecolor;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Car\n{\n    protected $color\n    \n    public function setColor($color)\n    {\n        $this-\u003ecolor = $color;\n    }\n    \n    public function getColor($color)\n    {\n        return \"Metallic \"; $this-\u003ecolor;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402187,
        "id": "7a8616a6-7ad7-4057-9e51-d7f164b6e50e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402187,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Do you see the error? The developer used a semi-colon instead of the concatenation operator in an attempt to prepend “Metallic” to the car’s color. As a result, whenever "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called, “Metallic “ will be returned regardless of what the car’s actual color is. As a result our "
            ],
            [
              "Car::setColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " unit test will fail "
            ],
            [
              "even though ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "Car::setColor()",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " works perfectly fine and was not affected by this change",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Do you see the error? The developer used a semi-colon instead of the concatenation operator in an attempt to prepend “Metallic” to the car’s color. As a result, whenever "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " is called, “Metallic “ will be returned regardless of what the car’s actual color is. As a result our "
          },
          {
            "Text": "Car::setColor()",
            "AttrFlags": 2
          },
          {
            "Text": " unit test will fail "
          },
          {
            "Text": "even though ",
            "AttrFlags": 4
          },
          {
            "Text": "Car::setColor()",
            "AttrFlags": 6
          },
          {
            "Text": " works perfectly fine and was not affected by this change",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402187,
        "id": "37084014-de1f-4cac-ad22-1a79dbe869e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402187,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So how do we verify "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " contains the value we are setting via "
            ],
            [
              "Car::setColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? We can use Refelection to inspect the protected member variable directly. So how do we do "
            ],
            [
              "that",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "? We can use Refelection to make the protected member variable accessible to our code so it can retrieve the value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So how do we verify "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": " contains the value we are setting via "
          },
          {
            "Text": "Car::setColor()",
            "AttrFlags": 2
          },
          {
            "Text": "? We can use Refelection to inspect the protected member variable directly. So how do we do "
          },
          {
            "Text": "that",
            "AttrFlags": 4
          },
          {
            "Text": "? We can use Refelection to make the protected member variable accessible to our code so it can retrieve the value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402187,
        "id": "0c6973d1-2772-4b34-b734-8724ed9bf205",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402187,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s see the code first and then break it down:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s see the code first and then break it down:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402188,
        "id": "2b9c4a7d-727b-44ee-ae36-38f49f52739e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402188,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * @test\n * @covers     \\Car::setColor\n */\npublic function testSetColor()\n{\n    $color = 'Red';\n\n    $car = new \\Car();\n    $car-\u003esetColor($color);\n    \n    $reflectionOfCar = new \\ReflectionObject($car);\n    $protectedColor = $reflectionOfForm-\u003egetProperty('color');\n    $protectedColor-\u003esetAccessible(true);\n    $reflectionColor = $protectedColor-\u003egetValue($car);\n    \n    $this-\u003eassertEquals($color, $reflectionColor);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * @test\n * @covers     \\Car::setColor\n */\npublic function testSetColor()\n{\n    $color = 'Red';\n\n    $car = new \\Car();\n    $car-\u003esetColor($color);\n    \n    $reflectionOfCar = new \\ReflectionObject($car);\n    $protectedColor = $reflectionOfForm-\u003egetProperty('color');\n    $protectedColor-\u003esetAccessible(true);\n    $reflectionColor = $protectedColor-\u003egetValue($car);\n    \n    $this-\u003eassertEquals($color, $reflectionColor);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402188,
        "id": "338b23fa-1074-4161-9fb7-cca352a97aee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402188,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is how we are using Reflection to get the value of "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the code above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is how we are using Reflection to get the value of "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": " in the code above:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402189,
        "id": "ec453ddb-ae3b-4046-aefa-dbcfe6e5e4ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402189,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We create a new "
            ],
            [
              "ReflectionObject",
              [
                [
                  "a",
                  "http://php.net/manual/en/class.reflectionobject.php"
                ]
              ]
            ],
            [
              " representing our Car object"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We create a new "
          },
          {
            "Text": "ReflectionObject",
            "Link": "http://php.net/manual/en/class.reflectionobject.php"
          },
          {
            "Text": " representing our Car object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402190,
        "id": "d9b96514-3a37-469a-aa7c-928bf301cb74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402190,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We get a "
            ],
            [
              "ReflectionProperty",
              [
                [
                  "a",
                  "http://php.net/manual/en/class.reflectionproperty.php"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (this “represents” the "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We get a "
          },
          {
            "Text": "ReflectionProperty",
            "Link": "http://php.net/manual/en/class.reflectionproperty.php"
          },
          {
            "Text": " for "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": " (this “represents” the "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": " variable)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402190,
        "id": "01e8410b-f818-4798-af00-bbdf5729d85a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402190,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We make "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " accessible"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We make "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": " accessible"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402190,
        "id": "ae9086ee-638a-4cfb-b698-7941daf15780",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402190,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We get the value of "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We get the value of "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022402191,
        "id": "0d87c17d-aa39-4106-8fc8-5502c3f7cc98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022402191,
        "parent_id": "edbcce0e-f5ef-42b8-bd75-90a7110c5b99",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see by using Reflection we could get the value of "
            ],
            [
              "Car::$color",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without having to call "
            ],
            [
              "Car::getColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or any other accessor function which could cause invalid test results. Now our unit test for "
            ],
            [
              "Car::setColor()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is safe and accurate."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see by using Reflection we could get the value of "
          },
          {
            "Text": "Car::$color",
            "AttrFlags": 2
          },
          {
            "Text": " without having to call "
          },
          {
            "Text": "Car::getColor()",
            "AttrFlags": 2
          },
          {
            "Text": " or any other accessor function which could cause invalid test results. Now our unit test for "
          },
          {
            "Text": "Car::setColor()",
            "AttrFlags": 2
          },
          {
            "Text": " is safe and accurate."
          }
        ]
      }
    ],
    "title": "Accessing private and protected member variables",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}