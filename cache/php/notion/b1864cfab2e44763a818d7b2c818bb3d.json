{
  "ID": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
  "Root": {
    "alive": true,
    "content": [
      "91c92f50-c37b-4340-90ea-08a72c9eb096",
      "17340f2c-fcb6-485f-ae54-ef120e67c36d",
      "24653208-c5f8-4040-8c41-1878815929ae",
      "0dae87fd-1e05-41f5-8571-48909feebc1a",
      "0f3eaba2-18d4-49ea-8e7d-60196c5beb50",
      "cdddd14c-f996-4dce-8969-436a49ccdc6d",
      "ee5af379-8907-446a-b3f8-45a4c8c4b7c8",
      "689f16d2-7c4f-4503-9d56-9e991ab91630",
      "af6a835d-5354-4eec-b3a2-08bca918666e",
      "8f9ea541-0833-4064-a3c8-5915f4a799b3",
      "eaae214d-80aa-4be8-8420-34605e0113eb",
      "4b19421d-95c6-4f67-8ca7-9a5f5efc2658",
      "390630d4-7d33-4d5f-a7ef-4a8f6c09d872",
      "9431204b-7b19-4692-abab-9bdbf2661b8e",
      "e35bf2d3-acbc-43e2-bfb7-ebd4812a5fcd",
      "7a5365b7-3001-4d4a-8442-b9b3bd1d835f",
      "fce06449-16c7-46f6-922c-591fe5b54bbe",
      "197e8d8a-85af-4093-aaf3-c41dd1124c1a",
      "a2d42223-30cc-47f9-bc48-81346a001560"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022363086,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022363086,
    "parent_id": "caabd093-67a6-454d-8e67-b40f2303905b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Abstract Classes"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363078,
        "id": "91c92f50-c37b-4340-90ea-08a72c9eb096",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363078,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An abstract class is a class that cannot be instantiated. Abstract classes can define abstract methods, which are methods without any body, only a definition:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An abstract class is a class that cannot be instantiated. Abstract classes can define abstract methods, which are methods without any body, only a definition:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363081,
        "id": "17340f2c-fcb6-485f-ae54-ef120e67c36d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363081,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "abstract class MyAbstractClass {\n    abstract public function doSomething($a, $b);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "abstract class MyAbstractClass {\n    abstract public function doSomething($a, $b);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363081,
        "id": "24653208-c5f8-4040-8c41-1878815929ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363081,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract classes should be extended by a child class which can then provide the implementation of these abstract methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract classes should be extended by a child class which can then provide the implementation of these abstract methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363081,
        "id": "0dae87fd-1e05-41f5-8571-48909feebc1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363081,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The main purpose of a class like this is to provide a kind of template that allows children classes to inherit from, “forcing” a structure to adhere to. Lets elaborate on this with an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The main purpose of a class like this is to provide a kind of template that allows children classes to inherit from, “forcing” a structure to adhere to. Lets elaborate on this with an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363082,
        "id": "0f3eaba2-18d4-49ea-8e7d-60196c5beb50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363082,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example we will be implementing a "
            ],
            [
              "Worker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface. First we define the interface:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example we will be implementing a "
          },
          {
            "Text": "Worker",
            "AttrFlags": 2
          },
          {
            "Text": " interface. First we define the interface:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363082,
        "id": "cdddd14c-f996-4dce-8969-436a49ccdc6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363082,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Worker {\n    public function run();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Worker {\n    public function run();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363082,
        "id": "ee5af379-8907-446a-b3f8-45a4c8c4b7c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363082,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To ease the development of further Worker implementations, we will create an abstract worker class that already provides the "
            ],
            [
              "run()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method from the interface, but specifies some abstract methods that need to be filled in by any child class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To ease the development of further Worker implementations, we will create an abstract worker class that already provides the "
          },
          {
            "Text": "run()",
            "AttrFlags": 2
          },
          {
            "Text": " method from the interface, but specifies some abstract methods that need to be filled in by any child class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363082,
        "id": "689f16d2-7c4f-4503-9d56-9e991ab91630",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363082,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "abstract class AbstractWorker implements Worker {\n    protected $pdo;\n    protected $logger;\n\n    public function __construct(PDO $pdo, Logger $logger) {\n        $this-\u003epdo = $pdo;\n        $this-\u003elogger = $logger;\n    }\n\n    public function run() {\n        try {\n            $this-\u003esetMemoryLimit($this-\u003egetMemoryLimit());\n            $this-\u003elogger-\u003elog(\"Preparing main\");\n            $this-\u003eprepareMain();\n            $this-\u003elogger-\u003elog(\"Executing main\");\n            $this-\u003emain();\n        } catch (Throwable $e) {\n            // Catch and rethrow all errors so they can be logged by the worker\n            $this-\u003elogger-\u003elog(\"Worker failed with exception: {$e-\u003egetMessage()}\");\n            throw $e;\n        }\n    }\n\n    private function setMemoryLimit($memoryLimit) {\n        ini_set('memory_limit', $memoryLimit);\n        $this-\u003elogger-\u003elog(\"Set memory limit to $memoryLimit\");\n    }\n\n    abstract protected function getMemoryLimit();\n\n    abstract protected function prepareMain();\n\n    abstract protected function main();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "abstract class AbstractWorker implements Worker {\n    protected $pdo;\n    protected $logger;\n\n    public function __construct(PDO $pdo, Logger $logger) {\n        $this-\u003epdo = $pdo;\n        $this-\u003elogger = $logger;\n    }\n\n    public function run() {\n        try {\n            $this-\u003esetMemoryLimit($this-\u003egetMemoryLimit());\n            $this-\u003elogger-\u003elog(\"Preparing main\");\n            $this-\u003eprepareMain();\n            $this-\u003elogger-\u003elog(\"Executing main\");\n            $this-\u003emain();\n        } catch (Throwable $e) {\n            // Catch and rethrow all errors so they can be logged by the worker\n            $this-\u003elogger-\u003elog(\"Worker failed with exception: {$e-\u003egetMessage()}\");\n            throw $e;\n        }\n    }\n\n    private function setMemoryLimit($memoryLimit) {\n        ini_set('memory_limit', $memoryLimit);\n        $this-\u003elogger-\u003elog(\"Set memory limit to $memoryLimit\");\n    }\n\n    abstract protected function getMemoryLimit();\n\n    abstract protected function prepareMain();\n\n    abstract protected function main();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363082,
        "id": "af6a835d-5354-4eec-b3a2-08bca918666e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363082,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First of all, we have provided an abstract method "
            ],
            [
              "getMemoryLimit()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Any class extending from "
            ],
            [
              "AbstractWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " needs to provide this method and return its memory limit. The "
            ],
            [
              "AbstractWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then sets the memory limit and logs it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First of all, we have provided an abstract method "
          },
          {
            "Text": "getMemoryLimit()",
            "AttrFlags": 2
          },
          {
            "Text": ". Any class extending from "
          },
          {
            "Text": "AbstractWorker",
            "AttrFlags": 2
          },
          {
            "Text": " needs to provide this method and return its memory limit. The "
          },
          {
            "Text": "AbstractWorker",
            "AttrFlags": 2
          },
          {
            "Text": " then sets the memory limit and logs it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363083,
        "id": "8f9ea541-0833-4064-a3c8-5915f4a799b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363083,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Secondly the "
            ],
            [
              "AbstractWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calls the "
            ],
            [
              "prepareMain()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "main()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods, after logging that they have been called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Secondly the "
          },
          {
            "Text": "AbstractWorker",
            "AttrFlags": 2
          },
          {
            "Text": " calls the "
          },
          {
            "Text": "prepareMain()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "main()",
            "AttrFlags": 2
          },
          {
            "Text": " methods, after logging that they have been called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363083,
        "id": "eaae214d-80aa-4be8-8420-34605e0113eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363083,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, all of these method calls have been grouped in a "
            ],
            [
              "try",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-"
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block. So if any of the abstract methods defined by the child class throws an exception, we will catch that exception, log it and rethrow it. This prevents all child classes from having to implement this themselves."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, all of these method calls have been grouped in a "
          },
          {
            "Text": "try",
            "AttrFlags": 2
          },
          {
            "Text": "-"
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " block. So if any of the abstract methods defined by the child class throws an exception, we will catch that exception, log it and rethrow it. This prevents all child classes from having to implement this themselves."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363083,
        "id": "4b19421d-95c6-4f67-8ca7-9a5f5efc2658",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363083,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now lets define a child class that extends from the "
            ],
            [
              "AbstractWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now lets define a child class that extends from the "
          },
          {
            "Text": "AbstractWorker",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363083,
        "id": "390630d4-7d33-4d5f-a7ef-4a8f6c09d872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363083,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class TranscactionProcessorWorker extends AbstractWorker {\n    private $transactions;\n\n    protected function getMemoryLimit() {\n        return \"512M\";\n    }\n\n    protected function prepareMain() {\n        $stmt = $this-\u003epdo-\u003equery(\"SELECT * FROM transactions WHERE processed = 0 LIMIT 500\");\n        $stmt-\u003eexecute();\n        $this-\u003etransactions = $stmt-\u003efetchAll();\n    }\n\n    protected function main() {\n        foreach ($this-\u003etransactions as $transaction) {\n            // Could throw some PDO or MYSQL exception, but that is handled by the AbstractWorker\n            $stmt = $this-\u003epdo-\u003equery(\"UPDATE transactions SET processed = 1 WHERE id = {$transaction['id']} LIMIT 1\");\n            $stmt-\u003eexecute();\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class TranscactionProcessorWorker extends AbstractWorker {\n    private $transactions;\n\n    protected function getMemoryLimit() {\n        return \"512M\";\n    }\n\n    protected function prepareMain() {\n        $stmt = $this-\u003epdo-\u003equery(\"SELECT * FROM transactions WHERE processed = 0 LIMIT 500\");\n        $stmt-\u003eexecute();\n        $this-\u003etransactions = $stmt-\u003efetchAll();\n    }\n\n    protected function main() {\n        foreach ($this-\u003etransactions as $transaction) {\n            // Could throw some PDO or MYSQL exception, but that is handled by the AbstractWorker\n            $stmt = $this-\u003epdo-\u003equery(\"UPDATE transactions SET processed = 1 WHERE id = {$transaction['id']} LIMIT 1\");\n            $stmt-\u003eexecute();\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363084,
        "id": "9431204b-7b19-4692-abab-9bdbf2661b8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363084,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see, the "
            ],
            [
              "TransactionProcessorWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was rather easy to implement, as we only had to specify the memory limit and worry about the actual actions that it needed to perform. No error handling is needed in the "
            ],
            [
              "TransactionProcessorWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because that is handled in the "
            ],
            [
              "AbsractWorker",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see, the "
          },
          {
            "Text": "TransactionProcessorWorker",
            "AttrFlags": 2
          },
          {
            "Text": " was rather easy to implement, as we only had to specify the memory limit and worry about the actual actions that it needed to perform. No error handling is needed in the "
          },
          {
            "Text": "TransactionProcessorWorker",
            "AttrFlags": 2
          },
          {
            "Text": " because that is handled in the "
          },
          {
            "Text": "AbsractWorker",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363084,
        "id": "e35bf2d3-acbc-43e2-bfb7-ebd4812a5fcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363084,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important Note"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important Note"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363084,
        "id": "7a5365b7-3001-4d4a-8442-b9b3bd1d835f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363084,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When inheriting from an abstract class, all methods marked abstract in the parent’s class declaration must be defined by the child (or the child itself must also be marked abstract); additionally, these methods must be defined with the same (or a less restricted) visibility. For example, if the abstract method is defined as protected, the function implementation must be defined as either protected or public, but not private."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "When inheriting from an abstract class, all methods marked abstract in the parent’s class declaration must be defined by the child (or the child itself must also be marked abstract); additionally, these methods must be defined with the same (or a less restricted) visibility. For example, if the abstract method is defined as protected, the function implementation must be defined as either protected or public, but not private."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363086,
        "id": "fce06449-16c7-46f6-922c-591fe5b54bbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363086,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Taken from the ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "PHP Documentation for Class Abstraction",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://php.net/manual/en/language.oop5.abstract.php"
                ]
              ]
            ],
            [
              ".",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Taken from the ",
            "AttrFlags": 4
          },
          {
            "Text": "PHP Documentation for Class Abstraction",
            "AttrFlags": 4,
            "Link": "http://php.net/manual/en/language.oop5.abstract.php"
          },
          {
            "Text": ".",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363086,
        "id": "197e8d8a-85af-4093-aaf3-c41dd1124c1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363086,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you "
            ],
            [
              "do not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " define the parent abstract classes methods within the child class, you will be thrown a "
            ],
            [
              "Fatal PHP Error",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " like the following."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you "
          },
          {
            "Text": "do not",
            "AttrFlags": 1
          },
          {
            "Text": " define the parent abstract classes methods within the child class, you will be thrown a "
          },
          {
            "Text": "Fatal PHP Error",
            "AttrFlags": 1
          },
          {
            "Text": " like the following."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022363086,
        "id": "a2d42223-30cc-47f9-bc48-81346a001560",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022363086,
        "parent_id": "b1864cfa-b2e4-4763-a818-d7b2c818bb3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fatal error: Class X contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (X::x) in"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fatal error: Class X contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (X::x) in"
          }
        ]
      }
    ],
    "title": "Abstract Classes",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}