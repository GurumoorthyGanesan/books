{
  "ID": "c75597e0-65eb-43da-ab38-3649b209f50f",
  "Root": {
    "alive": true,
    "content": [
      "1383df91-cb46-432c-ac5d-f4c19938a307",
      "93507431-08c2-4a08-867b-43d8cca4618e",
      "96e05b3f-042a-4456-a787-6da06ce289f7",
      "60dbc7a4-9c6a-446d-8e1d-a943a50d6215",
      "6198dc8e-7724-4143-8355-a6e8a92233de",
      "29f74121-31d1-4c68-ba3d-5c16a511d54b",
      "036b6221-d57b-436b-a009-dc308a88f735"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552023051161,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c75597e0-65eb-43da-ab38-3649b209f50f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552023051161,
    "parent_id": "c09beb38-7179-42f3-a2d1-f4b433238aa0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Escaping Strings"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051158,
        "id": "1383df91-cb46-432c-ac5d-f4c19938a307",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051158,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Escaping strings is an older ("
            ],
            [
              "and less secure",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ") method of securing data for insertion into a query. It works by using "
            ],
            [
              "MySQL’s function mysql_real_escape_string()",
              [
                [
                  "a",
                  "http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string.html"
                ]
              ]
            ],
            [
              " to process and sanitize the data (in other words, PHP is not doing the escaping). The MySQLi API provides direct access to this function"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Escaping strings is an older ("
          },
          {
            "Text": "and less secure",
            "AttrFlags": 1
          },
          {
            "Text": ") method of securing data for insertion into a query. It works by using "
          },
          {
            "Text": "MySQL’s function mysql_real_escape_string()",
            "Link": "http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string.html"
          },
          {
            "Text": " to process and sanitize the data (in other words, PHP is not doing the escaping). The MySQLi API provides direct access to this function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051159,
        "id": "93507431-08c2-4a08-867b-43d8cca4618e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051159,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$escaped = $conn-\u003ereal_escape_string($_GET['var']);\n// OR\n$escaped = mysqli_real_escape_string($conn, $_GET['var']);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$escaped = $conn-\u003ereal_escape_string($_GET['var']);\n// OR\n$escaped = mysqli_real_escape_string($conn, $_GET['var']);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051159,
        "id": "96e05b3f-042a-4456-a787-6da06ce289f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051159,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At this point, you have a string that MySQL considers to be safe for use in a direct query"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At this point, you have a string that MySQL considers to be safe for use in a direct query"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051160,
        "id": "60dbc7a4-9c6a-446d-8e1d-a943a50d6215",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051160,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$sql = 'SELECT * FROM users WHERE username = \"' . $escaped . '\"';\n$result = $conn-\u003equery($sql);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$sql = 'SELECT * FROM users WHERE username = \"' . $escaped . '\"';\n$result = $conn-\u003equery($sql);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051160,
        "id": "6198dc8e-7724-4143-8355-a6e8a92233de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051160,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So why is this not as secure as "
            ],
            [
              "prepared statements",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/php/2784/php-mysqli/11958/prepared-statements-in-mysqli"
                ]
              ]
            ],
            [
              "? There are ways to trick MySQL to produce a string it considers safe. Consider the following example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So why is this not as secure as "
          },
          {
            "Text": "prepared statements",
            "Link": "http://stackoverflow.com/documentation/php/2784/php-mysqli/11958/prepared-statements-in-mysqli"
          },
          {
            "Text": "? There are ways to trick MySQL to produce a string it considers safe. Consider the following example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051160,
        "id": "29f74121-31d1-4c68-ba3d-5c16a511d54b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051160,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$id = mysqli_real_escape_string(\"1 OR 1=1\");    \n$sql = 'SELECT * FROM table WHERE id = ' . $id;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$id = mysqli_real_escape_string(\"1 OR 1=1\");    \n$sql = 'SELECT * FROM table WHERE id = ' . $id;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023051161,
        "id": "036b6221-d57b-436b-a009-dc308a88f735",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023051161,
        "parent_id": "c75597e0-65eb-43da-ab38-3649b209f50f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 OR 1=1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not represent data that MySQL will escape, yet this still represents SQL injection. There are "
            ],
            [
              "other examples",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string"
                ]
              ]
            ],
            [
              " as well that represent places where it returns unsafe data. The problem is that MySQL’s escaping function is designed to "
            ],
            [
              "make data comply with SQL syntax",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". It’s NOT designed to make sure that "
            ],
            [
              "MySQL can’t confuse user data for SQL instructions",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 OR 1=1",
            "AttrFlags": 2
          },
          {
            "Text": " does not represent data that MySQL will escape, yet this still represents SQL injection. There are "
          },
          {
            "Text": "other examples",
            "Link": "http://stackoverflow.com/questions/5741187/sql-injection-that-gets-around-mysql-real-escape-string"
          },
          {
            "Text": " as well that represent places where it returns unsafe data. The problem is that MySQL’s escaping function is designed to "
          },
          {
            "Text": "make data comply with SQL syntax",
            "AttrFlags": 1
          },
          {
            "Text": ". It’s NOT designed to make sure that "
          },
          {
            "Text": "MySQL can’t confuse user data for SQL instructions",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Escaping Strings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}