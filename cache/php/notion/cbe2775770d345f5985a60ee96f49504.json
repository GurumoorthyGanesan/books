{
  "ID": "cbe27757-70d3-45f5-985a-60ee96f49504",
  "Root": {
    "alive": true,
    "content": [
      "a40f9251-b69a-48a4-834f-223cf93988e0",
      "88be855e-5f51-4d75-95fc-153a4cca54eb",
      "92f9241e-91b9-4116-8b60-1435aa2b827a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022688250,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cbe27757-70d3-45f5-985a-60ee96f49504",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022688250,
    "parent_id": "6358c964-0c94-4f8a-a8f5-0b120eed603b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Pools and Workers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022688249,
        "id": "a40f9251-b69a-48a4-834f-223cf93988e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022688249,
        "parent_id": "cbe27757-70d3-45f5-985a-60ee96f49504",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pooling provides a higher level abstraction of the Worker functionality, including the management of references in the way required by pthreads. From: http://php.net/manual/en/class.pool.php"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pooling provides a higher level abstraction of the Worker functionality, including the management of references in the way required by pthreads. From: http://php.net/manual/en/class.pool.php"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022688250,
        "id": "88be855e-5f51-4d75-95fc-153a4cca54eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022688250,
        "parent_id": "cbe27757-70d3-45f5-985a-60ee96f49504",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pools and workers provide an higher level of control and ease of creating multi-threaded"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pools and workers provide an higher level of control and ease of creating multi-threaded"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022688250,
        "id": "92f9241e-91b9-4116-8b60-1435aa2b827a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022688250,
        "parent_id": "cbe27757-70d3-45f5-985a-60ee96f49504",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\n// This is the *Work* which would be ran by the worker.\n// The work which you'd want to do in your worker.\n// This class needs to extend the \\Threaded or \\Collectable or \\Thread class.\nclass AwesomeWork extends Thread {\n    private $workName;\n\n    /**\n     * @param string $workName\n     * The work name wich would be given to every work.\n     */\n    public function __construct(string $workName) {\n        // The block of code in the constructor of your work,\n        // would be executed when a work is submitted to your pool.\n\n        $this-\u003eworkName = $workName;\n        printf(\"A new work was submitted with the name: %s\\n\", $workName);\n    }\n\n    public function run() {\n        // This block of code in, the method, run\n        // would be called by your worker.\n        // All the code in this method will be executed in another thread.\n        $workName = $this-\u003eworkName;\n        printf(\"Work named %s starting...\\n\", $workName);\n        printf(\"New random number: %d\\n\", mt_rand());\n    }\n}\n\n// Create an empty worker for the sake of simplicity.\nclass AwesomeWorker extends Worker {\n    public function run() {\n        // You can put some code in here, which would be executed\n        // before the Work's are started (the block of code in the `run` method of your Work)\n        // by the Worker.\n        /* ... */\n    }\n}\n\n// Create a new Pool Instance.\n// The ctor of \\Pool accepts two parameters.\n// First: The maximum number of workers your pool can create.\n// Second: The name of worker class.\n$pool = new \\Pool(1, \\AwesomeWorker::class);\n\n// You need to submit your jobs, rather the instance of\n// the objects (works) which extends the \\Threaded class.\n$pool-\u003esubmit(new \\AwesomeWork(\"DeadlyWork\"));\n$pool-\u003esubmit(new \\AwesomeWork(\"FatalWork\"));\n\n// We need to explicitly shutdown the pool, otherwise,\n// unexpected things may happen.\n// See: http://stackoverflow.com/a/23600861/23602185\n$pool-\u003eshutdown();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\n// This is the *Work* which would be ran by the worker.\n// The work which you'd want to do in your worker.\n// This class needs to extend the \\Threaded or \\Collectable or \\Thread class.\nclass AwesomeWork extends Thread {\n    private $workName;\n\n    /**\n     * @param string $workName\n     * The work name wich would be given to every work.\n     */\n    public function __construct(string $workName) {\n        // The block of code in the constructor of your work,\n        // would be executed when a work is submitted to your pool.\n\n        $this-\u003eworkName = $workName;\n        printf(\"A new work was submitted with the name: %s\\n\", $workName);\n    }\n\n    public function run() {\n        // This block of code in, the method, run\n        // would be called by your worker.\n        // All the code in this method will be executed in another thread.\n        $workName = $this-\u003eworkName;\n        printf(\"Work named %s starting...\\n\", $workName);\n        printf(\"New random number: %d\\n\", mt_rand());\n    }\n}\n\n// Create an empty worker for the sake of simplicity.\nclass AwesomeWorker extends Worker {\n    public function run() {\n        // You can put some code in here, which would be executed\n        // before the Work's are started (the block of code in the `run` method of your Work)\n        // by the Worker.\n        /* ... */\n    }\n}\n\n// Create a new Pool Instance.\n// The ctor of \\Pool accepts two parameters.\n// First: The maximum number of workers your pool can create.\n// Second: The name of worker class.\n$pool = new \\Pool(1, \\AwesomeWorker::class);\n\n// You need to submit your jobs, rather the instance of\n// the objects (works) which extends the \\Threaded class.\n$pool-\u003esubmit(new \\AwesomeWork(\"DeadlyWork\"));\n$pool-\u003esubmit(new \\AwesomeWork(\"FatalWork\"));\n\n// We need to explicitly shutdown the pool, otherwise,\n// unexpected things may happen.\n// See: http://stackoverflow.com/a/23600861/23602185\n$pool-\u003eshutdown();",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using Pools and Workers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}