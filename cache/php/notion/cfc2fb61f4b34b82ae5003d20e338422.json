{
  "ID": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
  "Root": {
    "alive": true,
    "content": [
      "7c39539e-5c1d-469c-a1a0-31f0cde991c3",
      "cbeb4c4b-362a-47d9-85e8-5ba10cf29ab3",
      "13672272-ce18-40fc-ba99-912ad6876456",
      "a60b5bbf-2068-4e8b-8a89-64a8d67318ae",
      "d888f79a-996a-4c2e-af78-89c6d392066f",
      "1f990f31-1378-4ce3-a5b1-168eee57b983",
      "55e30378-e75a-4440-8655-f5bc43a9ae56",
      "a691a600-e0bc-4947-b647-437a17646ce4",
      "775147b3-2dca-4653-a346-ba0319ea1572",
      "031c2aef-1b2d-48d1-9fd2-efdbba00b805",
      "d5c8d991-0d98-4bd4-ba13-1c6d292d118b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552024758631,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552024758631,
    "parent_id": "99767f42-6259-4914-8dc4-5d6b25fdc196",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "String interpolation"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758625,
        "id": "7c39539e-5c1d-469c-a1a0-31f0cde991c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758625,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also use interpolation to interpolate ("
            ],
            [
              "insert",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") a variable within a string. Interpolation works in double quoted strings and the heredoc syntax only."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also use interpolation to interpolate ("
          },
          {
            "Text": "insert",
            "AttrFlags": 4
          },
          {
            "Text": ") a variable within a string. Interpolation works in double quoted strings and the heredoc syntax only."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758628,
        "id": "cbeb4c4b-362a-47d9-85e8-5ba10cf29ab3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758628,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$name = 'Joel';\n\n// $name will be replaced with `Joel`\necho \"\u003cp\u003eHello $name, Nice to see you.\u003c/p\u003e\";\n#                ↕\n#\u003e   \"\u003cp\u003eHello Joel, Nice to see you.\u003c/p\u003e\"\n\n// Single Quotes: outputs $name as the raw text (without interpreting it)\necho 'Hello $name, Nice to see you.'; # Careful with this notation\n#\u003e \"Hello $name, Nice to see you.\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$name = 'Joel';\n\n// $name will be replaced with `Joel`\necho \"\u003cp\u003eHello $name, Nice to see you.\u003c/p\u003e\";\n#                ↕\n#\u003e   \"\u003cp\u003eHello Joel, Nice to see you.\u003c/p\u003e\"\n\n// Single Quotes: outputs $name as the raw text (without interpreting it)\necho 'Hello $name, Nice to see you.'; # Careful with this notation\n#\u003e \"Hello $name, Nice to see you.\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758629,
        "id": "13672272-ce18-40fc-ba99-912ad6876456",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758629,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "complex (curly) syntax",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://php.net/manual/en/language.types.string.php#language.types.string.parsing.complex"
                ]
              ]
            ],
            [
              " format provides another option which requires that you wrap your variable within curly braces "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This can be useful when embedding variables within textual content and helping to prevent possible ambiguity between textual content and variables."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "complex (curly) syntax",
            "AttrFlags": 1,
            "Link": "http://php.net/manual/en/language.types.string.php#language.types.string.parsing.complex"
          },
          {
            "Text": " format provides another option which requires that you wrap your variable within curly braces "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": ". This can be useful when embedding variables within textual content and helping to prevent possible ambiguity between textual content and variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758630,
        "id": "a60b5bbf-2068-4e8b-8a89-64a8d67318ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758630,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$name = 'Joel';\n\n// Example using the curly brace syntax for the variable $name\necho \"\u003cp\u003eWe need more {$name}s to help us!\u003c/p\u003e\";\n#\u003e \"\u003cp\u003eWe need more Joels to help us!\u003c/p\u003e\"\n\n// This line will throw an error (as `$names` is not defined)\necho \"\u003cp\u003eWe need more $names to help us!\u003c/p\u003e\";\n#\u003e \"Notice: Undefined variable: names\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$name = 'Joel';\n\n// Example using the curly brace syntax for the variable $name\necho \"\u003cp\u003eWe need more {$name}s to help us!\u003c/p\u003e\";\n#\u003e \"\u003cp\u003eWe need more Joels to help us!\u003c/p\u003e\"\n\n// This line will throw an error (as `$names` is not defined)\necho \"\u003cp\u003eWe need more $names to help us!\u003c/p\u003e\";\n#\u003e \"Notice: Undefined variable: names\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758630,
        "id": "d888f79a-996a-4c2e-af78-89c6d392066f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758630,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax only interpolates variables starting with a "
            ],
            [
              "$",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a string. The "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax "
            ],
            [
              "does not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " evaluate arbitrary PHP expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": " syntax only interpolates variables starting with a "
          },
          {
            "Text": "$",
            "AttrFlags": 2
          },
          {
            "Text": " into a string. The "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": " syntax "
          },
          {
            "Text": "does not",
            "AttrFlags": 1
          },
          {
            "Text": " evaluate arbitrary PHP expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758630,
        "id": "1f990f31-1378-4ce3-a5b1-168eee57b983",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758630,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Example tying to interpolate a PHP expression\necho \"1 + 2 = {1 + 2}\";\n#\u003e \"1 + 2 = {1 + 2}\"\n\n// Example using a constant\ndefine(\"HELLO_WORLD\", \"Hello World!!\");\necho \"My constant is {HELLO_WORLD}\";\n#\u003e \"My constant is {HELLO_WORLD}\"\n\n// Example using a function\nfunction say_hello() {\n    return \"Hello!\";\n};\necho \"I say: {say_hello()}\";\n#\u003e \"I say: {say_hello()}\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Example tying to interpolate a PHP expression\necho \"1 + 2 = {1 + 2}\";\n#\u003e \"1 + 2 = {1 + 2}\"\n\n// Example using a constant\ndefine(\"HELLO_WORLD\", \"Hello World!!\");\necho \"My constant is {HELLO_WORLD}\";\n#\u003e \"My constant is {HELLO_WORLD}\"\n\n// Example using a function\nfunction say_hello() {\n    return \"Hello!\";\n};\necho \"I say: {say_hello()}\";\n#\u003e \"I say: {say_hello()}\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758630,
        "id": "55e30378-e75a-4440-8655-f5bc43a9ae56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758630,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, the "
            ],
            [
              "{}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax does evaluate any array access, property access and function/method calls on variables, array elements or properties:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, the "
          },
          {
            "Text": "{}",
            "AttrFlags": 2
          },
          {
            "Text": " syntax does evaluate any array access, property access and function/method calls on variables, array elements or properties:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758630,
        "id": "a691a600-e0bc-4947-b647-437a17646ce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758630,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Example accessing a value from an array — multidimensional access is allowed\n$companions = [0 =\u003e ['name' =\u003e 'Amy Pond'], 1 =\u003e ['name' =\u003e 'Dave Random']];\necho \"The best companion is: {$companions[0]['name']}\";\n#\u003e \"The best companion is: Amy Pond\"\n\n// Example of calling a method on an instantiated object\nclass Person {\n  function say_hello() {\n    return \"Hello!\";\n  }\n}\n\n$max = new Person();\n\necho \"Max says: {$max-\u003esay_hello()}\";\n#\u003e \"Max says: Hello!\"\n\n// Example of invoking a Closure — the parameter list allows for custom expressions\n$greet = function($num) {\n    return \"A $num greetings!\";\n};\necho \"From us all: {$greet(10 ** 3)}\";\n#\u003e \"From us all: A 1000 greetings!\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Example accessing a value from an array — multidimensional access is allowed\n$companions = [0 =\u003e ['name' =\u003e 'Amy Pond'], 1 =\u003e ['name' =\u003e 'Dave Random']];\necho \"The best companion is: {$companions[0]['name']}\";\n#\u003e \"The best companion is: Amy Pond\"\n\n// Example of calling a method on an instantiated object\nclass Person {\n  function say_hello() {\n    return \"Hello!\";\n  }\n}\n\n$max = new Person();\n\necho \"Max says: {$max-\u003esay_hello()}\";\n#\u003e \"Max says: Hello!\"\n\n// Example of invoking a Closure — the parameter list allows for custom expressions\n$greet = function($num) {\n    return \"A $num greetings!\";\n};\necho \"From us all: {$greet(10 ** 3)}\";\n#\u003e \"From us all: A 1000 greetings!\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758631,
        "id": "775147b3-2dca-4653-a346-ba0319ea1572",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758631,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice that the dollar "
            ],
            [
              "$",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sign can appear after the opening curly brace "
            ],
            [
              "\\{",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as the above examples, or, like in Perl or Shell Script, can appear before it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice that the dollar "
          },
          {
            "Text": "$",
            "AttrFlags": 2
          },
          {
            "Text": " sign can appear after the opening curly brace "
          },
          {
            "Text": "\\{",
            "AttrFlags": 2
          },
          {
            "Text": " as the above examples, or, like in Perl or Shell Script, can appear before it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758631,
        "id": "031c2aef-1b2d-48d1-9fd2-efdbba00b805",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758631,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$name = 'Joel';\n\n// Example using the curly brace syntax with dollar sign before the opening curly brace\necho \"\u003cp\u003eWe need more ${name}s to help us!\u003c/p\u003e\";\n#\u003e \"\u003cp\u003eWe need more Joels to help us!\u003c/p\u003e\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$name = 'Joel';\n\n// Example using the curly brace syntax with dollar sign before the opening curly brace\necho \"\u003cp\u003eWe need more ${name}s to help us!\u003c/p\u003e\";\n#\u003e \"\u003cp\u003eWe need more Joels to help us!\u003c/p\u003e\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024758631,
        "id": "d5c8d991-0d98-4bd4-ba13-1c6d292d118b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024758631,
        "parent_id": "cfc2fb61-f4b3-4b82-ae50-03d20e338422",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Complex (curly) syntax is not called as such because it’s complex, but rather because it allows for the use of ‘complex expressions’. Read more about Complex (curly) syntax"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Complex (curly) syntax is not called as such because it’s complex, but rather because it allows for the use of ‘complex expressions’. Read more about Complex (curly) syntax"
          }
        ]
      }
    ],
    "title": "String interpolation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}