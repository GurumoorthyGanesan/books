{
  "ID": "4ec8e445-4a25-4ef0-ad8e-11b2487abed8",
  "Root": {
    "alive": true,
    "content": [
      "5597bb88-1b97-49f2-b1de-bf3a3daa2bba",
      "058bb167-4567-471a-8e6b-ca55336718f4",
      "ae56b73a-df73-4a35-895b-dd87d7bfe768",
      "59061fd8-82e1-4342-a9ad-da29ded556ea"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552023098147,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4ec8e445-4a25-4ef0-ad8e-11b2487abed8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552023098147,
    "parent_id": "f0aa9c04-6b09-48e8-9f6d-39195ed864c6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Static properties and variables"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023098144,
        "id": "5597bb88-1b97-49f2-b1de-bf3a3daa2bba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023098144,
        "parent_id": "4ec8e445-4a25-4ef0-ad8e-11b2487abed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static class properties that are defined with the "
            ],
            [
              "public",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " visibility are functionally the same as global variables. They can be accessed from anywhere the class is defined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static class properties that are defined with the "
          },
          {
            "Text": "public",
            "AttrFlags": 2
          },
          {
            "Text": " visibility are functionally the same as global variables. They can be accessed from anywhere the class is defined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023098147,
        "id": "058bb167-4567-471a-8e6b-ca55336718f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023098147,
        "parent_id": "4ec8e445-4a25-4ef0-ad8e-11b2487abed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class SomeClass {\n    public static int $counter = 0;\n}\n\n// The static $counter variable can be read/written from anywhere\n// and doesn't require an instantiation of the class\nSomeClass::$counter += 1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class SomeClass {\n    public static int $counter = 0;\n}\n\n// The static $counter variable can be read/written from anywhere\n// and doesn't require an instantiation of the class\nSomeClass::$counter += 1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023098147,
        "id": "ae56b73a-df73-4a35-895b-dd87d7bfe768",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023098147,
        "parent_id": "4ec8e445-4a25-4ef0-ad8e-11b2487abed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functions can also define static variables inside their own scope. These static variables persist through multiple function calls, unlike regular variables defined in a function scope. This can be a very easy and simple way to implement the Singleton design pattern:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functions can also define static variables inside their own scope. These static variables persist through multiple function calls, unlike regular variables defined in a function scope. This can be a very easy and simple way to implement the Singleton design pattern:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023098147,
        "id": "59061fd8-82e1-4342-a9ad-da29ded556ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023098147,
        "parent_id": "4ec8e445-4a25-4ef0-ad8e-11b2487abed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Singleton {\n    public static function getInstance() {\n        // Static variable $instance is not deleted when the function ends\n        static $instance;\n\n        // Second call to this function will not get into the if-statement,\n        // Because an instance of Singleton is now stored in the $instance\n        // variable and is persisted through multiple calls\n        if (!$instance) {\n            // First call to this function will reach this line,\n            // because the $instance has only been declared, not initialized\n            $instance = new Singleton();\n        }\n\n        return $instance;\n\n    }\n}\n\n$instance1 = Singleton::getInstance();\n$instance2 = Singleton::getInstance();\n\n// Comparing objects with the '===' operator checks whether they are\n// the same instance. Will print 'true', because the static $instance\n// variable in the getInstance() method is persisted through multiple calls\nvar_dump($instance1 === $instance2);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Singleton {\n    public static function getInstance() {\n        // Static variable $instance is not deleted when the function ends\n        static $instance;\n\n        // Second call to this function will not get into the if-statement,\n        // Because an instance of Singleton is now stored in the $instance\n        // variable and is persisted through multiple calls\n        if (!$instance) {\n            // First call to this function will reach this line,\n            // because the $instance has only been declared, not initialized\n            $instance = new Singleton();\n        }\n\n        return $instance;\n\n    }\n}\n\n$instance1 = Singleton::getInstance();\n$instance2 = Singleton::getInstance();\n\n// Comparing objects with the '===' operator checks whether they are\n// the same instance. Will print 'true', because the static $instance\n// variable in the getInstance() method is persisted through multiple calls\nvar_dump($instance1 === $instance2);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Static properties and variables",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}