{
  "ID": "d282a0ed-9ed7-4bc3-9b47-6248c525343d",
  "Root": {
    "alive": true,
    "content": [
      "1da6d7ea-f74c-430d-9bf4-1d0b16860624",
      "9c59885a-b396-47e1-91e2-07191b302ead",
      "ff4dd061-9d19-4076-8e45-5de5965314cd",
      "664836a8-0cec-4353-8695-f347e7498f68"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552024489594,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d282a0ed-9ed7-4bc3-9b47-6248c525343d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552024489594,
    "parent_id": "0933ee85-f73c-456d-a664-05037c9050a2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Registering a stream wrapper"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024489593,
        "id": "1da6d7ea-f74c-430d-9bf4-1d0b16860624",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024489593,
        "parent_id": "d282a0ed-9ed7-4bc3-9b47-6248c525343d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A stream wrapper provides a handler for one or more specific schemes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A stream wrapper provides a handler for one or more specific schemes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024489593,
        "id": "9c59885a-b396-47e1-91e2-07191b302ead",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024489593,
        "parent_id": "d282a0ed-9ed7-4bc3-9b47-6248c525343d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example below shows a simple stream wrapper that sends "
            ],
            [
              "PATCH",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " HTTP requests when the stream is closed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example below shows a simple stream wrapper that sends "
          },
          {
            "Text": "PATCH",
            "AttrFlags": 2
          },
          {
            "Text": " HTTP requests when the stream is closed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024489594,
        "id": "ff4dd061-9d19-4076-8e45-5de5965314cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024489594,
        "parent_id": "d282a0ed-9ed7-4bc3-9b47-6248c525343d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// register the FooWrapper class as a wrapper for foo:// URLs.\nstream_wrapper_register(\"foo\", FooWrapper::class, STREAM_IS_URL) or die(\"Duplicate stream wrapper registered\");\n\nclass FooWrapper {\n    // this will be modified by PHP to show the context passed in the current call.\n    public $context;\n\n    // this is used in this example internally to store the URL\n    private $url;\n\n    // when fopen() with a protocol for this wrapper is called, this method can be implemented to store data like the host.\n    public function stream_open(string $path, string $mode, int $options, string \u0026$openedPath) : bool {\n        $url = parse_url($path);\n        if($url === false) return false;\n        $this-\u003eurl = $url[\"host\"] . \"/\" . $url[\"path\"];\n        return true;\n    }\n\n    // handles calls to fwrite() on this stream\n    public function stream_write(string $data) : int {\n        $this-\u003ebuffer .= $data;\n        return strlen($data);\n    }\n\n    // handles calls to fclose() on this stream\n    public function stream_close() {\n        $curl = curl_init(\"http://\" . $this-\u003eurl);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, $this-\u003ebuffer);\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n        curl_exec($curl);\n        curl_close($curl);\n        $this-\u003ebuffer = \"\";\n    }\n\n    // fallback exception handler if an unsupported operation is attempted.\n    // this is not necessary.\n    public function __call($name, $args) {\n        throw new \\RuntimeException(\"This wrapper does not support $name\");\n    }\n\n    // this is called when unlink(\"foo://something-else\") is called.\n    public function unlink(string $path) {\n        $url = parse_url($path);\n        $curl = curl_init(\"http://\" . $url[\"host\"] . \"/\" . $url[\"path\"]);\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n        curl_exec($curl);\n        curl_close($curl);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// register the FooWrapper class as a wrapper for foo:// URLs.\nstream_wrapper_register(\"foo\", FooWrapper::class, STREAM_IS_URL) or die(\"Duplicate stream wrapper registered\");\n\nclass FooWrapper {\n    // this will be modified by PHP to show the context passed in the current call.\n    public $context;\n\n    // this is used in this example internally to store the URL\n    private $url;\n\n    // when fopen() with a protocol for this wrapper is called, this method can be implemented to store data like the host.\n    public function stream_open(string $path, string $mode, int $options, string \u0026$openedPath) : bool {\n        $url = parse_url($path);\n        if($url === false) return false;\n        $this-\u003eurl = $url[\"host\"] . \"/\" . $url[\"path\"];\n        return true;\n    }\n\n    // handles calls to fwrite() on this stream\n    public function stream_write(string $data) : int {\n        $this-\u003ebuffer .= $data;\n        return strlen($data);\n    }\n\n    // handles calls to fclose() on this stream\n    public function stream_close() {\n        $curl = curl_init(\"http://\" . $this-\u003eurl);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, $this-\u003ebuffer);\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"PATCH\");\n        curl_exec($curl);\n        curl_close($curl);\n        $this-\u003ebuffer = \"\";\n    }\n\n    // fallback exception handler if an unsupported operation is attempted.\n    // this is not necessary.\n    public function __call($name, $args) {\n        throw new \\RuntimeException(\"This wrapper does not support $name\");\n    }\n\n    // this is called when unlink(\"foo://something-else\") is called.\n    public function unlink(string $path) {\n        $url = parse_url($path);\n        $curl = curl_init(\"http://\" . $url[\"host\"] . \"/\" . $url[\"path\"]);\n        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n        curl_exec($curl);\n        curl_close($curl);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024489594,
        "id": "664836a8-0cec-4353-8695-f347e7498f68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024489594,
        "parent_id": "d282a0ed-9ed7-4bc3-9b47-6248c525343d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example only shows some examples of what a generic stream wrapper would contain. These are not all methods available. A full list of methods that can be implemented can be found at http://php.net/streamWrapper."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example only shows some examples of what a generic stream wrapper would contain. These are not all methods available. A full list of methods that can be implemented can be found at http://php.net/streamWrapper."
          }
        ]
      }
    ],
    "title": "Registering a stream wrapper",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}