{
  "ID": "138e183e-7a15-4fa6-98c2-916a093fde92",
  "Root": {
    "alive": true,
    "content": [
      "e433e69b-e10b-4e1d-b17c-94f56e98a97e",
      "6c713558-16a6-4ee9-8215-0243580b79f8",
      "e4b3738e-0aaf-4f2d-8c27-c204ef2fd295",
      "93cb01cf-1b50-40f2-86ed-a6a0242d51b9",
      "f939b9c7-8cf3-47a4-8e41-3953aadc1bac",
      "f3a96694-9824-4d6c-ad7a-92d498cb6507",
      "26193086-89df-403f-a75f-9375def6dc4e",
      "4c9b2c57-dd0f-43ad-b9b9-681d77a086e3",
      "42d2facf-a4b0-4a33-a1fe-747646f3373e",
      "cf04212a-f53b-4de5-af56-cdfe8b45fe2c",
      "1138c1f2-d0ff-43bd-9279-bfb40d8b0cc7",
      "080975ce-a52a-4af0-978e-aa64757be107",
      "dce9b5d3-62cb-4f11-8e83-aea125ad6ffd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552023032063,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "138e183e-7a15-4fa6-98c2-916a093fde92",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552023032063,
    "parent_id": "39389e18-4435-40d2-be30-84d806209e25",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "What is Type Juggling"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032061,
        "id": "e433e69b-e10b-4e1d-b17c-94f56e98a97e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032061,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PHP is a loosely typed language. This means that, by default, it doesn’t require operands in an expression to be of the same (or compatible) types. For example, you can append a number to a string and expect it to work."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PHP is a loosely typed language. This means that, by default, it doesn’t require operands in an expression to be of the same (or compatible) types. For example, you can append a number to a string and expect it to work."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032061,
        "id": "6c713558-16a6-4ee9-8215-0243580b79f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032061,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var_dump (\"This is example number \" . 1);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var_dump (\"This is example number \" . 1);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032061,
        "id": "e4b3738e-0aaf-4f2d-8c27-c204ef2fd295",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032061,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The output will be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The output will be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032061,
        "id": "93cb01cf-1b50-40f2-86ed-a6a0242d51b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032061,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "string(24) “This is example number 1”"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "string(24) “This is example number 1”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "f939b9c7-8cf3-47a4-8e41-3953aadc1bac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PHP accomplishes this by automatically casting incompatible variable types into types that allow the requested operation to take place. In the case above, it will cast the integer literal 1 into a string, meaning that it can be concatenated onto the preceding string literal. This is referred to as type juggling. This is a very powerful feature of PHP, but it is also a feature that can lead you to a lot of hair-pulling if you are not aware of it, and can even lead to security problems."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PHP accomplishes this by automatically casting incompatible variable types into types that allow the requested operation to take place. In the case above, it will cast the integer literal 1 into a string, meaning that it can be concatenated onto the preceding string literal. This is referred to as type juggling. This is a very powerful feature of PHP, but it is also a feature that can lead you to a lot of hair-pulling if you are not aware of it, and can even lead to security problems."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "f3a96694-9824-4d6c-ad7a-92d498cb6507",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "26193086-89df-403f-a75f-9375def6dc4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (1 == $variable) {\n    // do something\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (1 == $variable) {\n    // do something\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "4c9b2c57-dd0f-43ad-b9b9-681d77a086e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The intent appears to be that the programmer is checking that a variable has a value of 1. But what happens if $variable has a value of “1 and a half” instead? The answer might surprise you."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The intent appears to be that the programmer is checking that a variable has a value of 1. But what happens if $variable has a value of “1 and a half” instead? The answer might surprise you."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "42d2facf-a4b0-4a33-a1fe-747646f3373e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$variable = \"1 and a half\";\nvar_dump (1 == $variable);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$variable = \"1 and a half\";\nvar_dump (1 == $variable);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "cf04212a-f53b-4de5-af56-cdfe8b45fe2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "1138c1f2-d0ff-43bd-9279-bfb40d8b0cc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "bool(true)"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "bool(true)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032062,
        "id": "080975ce-a52a-4af0-978e-aa64757be107",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032062,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why has this happened? It’s because PHP realised that the string “1 and a half” isn’t an integer, but it needs to be in order to compare it to integer 1. Instead of failing, PHP initiates type juggling and, attempts to convert the variable into an integer. It does this by taking all the characters at the start of the string that can be cast to integer and casting them. It stops as soon as it encounters a character that can’t be treated as a number. Therefore “1 and a half” gets cast to integer 1."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why has this happened? It’s because PHP realised that the string “1 and a half” isn’t an integer, but it needs to be in order to compare it to integer 1. Instead of failing, PHP initiates type juggling and, attempts to convert the variable into an integer. It does this by taking all the characters at the start of the string that can be cast to integer and casting them. It stops as soon as it encounters a character that can’t be treated as a number. Therefore “1 and a half” gets cast to integer 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023032063,
        "id": "dce9b5d3-62cb-4f11-8e83-aea125ad6ffd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023032063,
        "parent_id": "138e183e-7a15-4fa6-98c2-916a093fde92",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Granted, this is a very contrived example, but it serves to demonstrate the issue. The next few examples will cover some cases where I’ve run into errors caused by type juggling that happened in real software."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Granted, this is a very contrived example, but it serves to demonstrate the issue. The next few examples will cover some cases where I’ve run into errors caused by type juggling that happened in real software."
          }
        ]
      }
    ],
    "title": "What is Type Juggling",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}