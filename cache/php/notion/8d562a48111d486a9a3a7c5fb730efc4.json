{
  "ID": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
  "Root": {
    "alive": true,
    "content": [
      "d346157e-daec-4986-9036-317a13303efb",
      "5ba62b78-7c31-4852-b374-6429d798d9a2",
      "0793efc5-2d3d-4c68-9259-3b904a48d9e8",
      "f8d922a7-e182-4e2e-b409-b06da5a0f5f2",
      "7d77792b-8538-42a6-adca-c6334c3b4ae4",
      "cc9e22bd-7c24-4696-99a9-b265b912c5b1",
      "a81ea4ca-f003-4fe6-8d62-981c2f139d68",
      "4bd94361-6181-4b88-a4d4-c7f517a33747",
      "c2e3cb2f-3950-43fa-9052-bc312df3b250",
      "6f7b1d39-df39-4e0d-932e-2b3730b3c0da",
      "ff6a2eb4-7efa-4a33-9b96-ae240cb355b2",
      "89b77740-2181-4b0a-8615-86471738421b",
      "27f83d95-11dd-4567-ab3d-7f9bb0bc5a20",
      "51d13d3c-d0d7-4e4b-ae87-d01136cbfe9a",
      "e6e6ce67-61f9-4cb0-b319-69bfda188b0a",
      "d4f0140e-23b8-45ab-8f84-25b4f1f6ce16",
      "636f7ed6-1627-405d-bb23-bdc18e1f4cc3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022288157,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022288157,
    "parent_id": "6427ea2b-9d2c-4408-a6ff-9721a6dc9cdc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Closures"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288150,
        "id": "d346157e-daec-4986-9036-317a13303efb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288150,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A closure is an anonymous function that can’t access outside scope.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A closure is an anonymous function that can’t access outside scope.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288153,
        "id": "5ba62b78-7c31-4852-b374-6429d798d9a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288153,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When defining an anonymous function as such, you’re creating a “namespace” for that function. It currently only has access to that namespace."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When defining an anonymous function as such, you’re creating a “namespace” for that function. It currently only has access to that namespace."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288153,
        "id": "0793efc5-2d3d-4c68-9259-3b904a48d9e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288153,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$externalVariable = \"Hello\";\n$secondExternalVariable = \"Foo\"; \n$myFunction = function() { \n  \n  var_dump($externalVariable, $secondExternalVariable); // returns two error notice, since the variables aren´t defined \n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$externalVariable = \"Hello\";\n$secondExternalVariable = \"Foo\"; \n$myFunction = function() { \n  \n  var_dump($externalVariable, $secondExternalVariable); // returns two error notice, since the variables aren´t defined \n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288154,
        "id": "f8d922a7-e182-4e2e-b409-b06da5a0f5f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288154,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It doesn’t have access to any external variables. To grant this permission for this namespace to access external variables, you need to introduce it via closures ("
            ],
            [
              "use()",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It doesn’t have access to any external variables. To grant this permission for this namespace to access external variables, you need to introduce it via closures ("
          },
          {
            "Text": "use()",
            "AttrFlags": 6
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288154,
        "id": "7d77792b-8538-42a6-adca-c6334c3b4ae4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288154,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$myFunction = function() use($externalVariable, $secondExternalVariable) {\n   var_dump($externalVariable, $secondExternalVariable); // Hello Foo\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$myFunction = function() use($externalVariable, $secondExternalVariable) {\n   var_dump($externalVariable, $secondExternalVariable); // Hello Foo\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288154,
        "id": "cc9e22bd-7c24-4696-99a9-b265b912c5b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288154,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is heavily attributed to PHP’s tight variable scoping - "
            ],
            [
              "If a variable isn’t defined within the scope, or isn’t brought in with ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "global",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " then it does not exist.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is heavily attributed to PHP’s tight variable scoping - "
          },
          {
            "Text": "If a variable isn’t defined within the scope, or isn’t brought in with ",
            "AttrFlags": 4
          },
          {
            "Text": "global",
            "AttrFlags": 6
          },
          {
            "Text": " then it does not exist.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288154,
        "id": "a81ea4ca-f003-4fe6-8d62-981c2f139d68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288154,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also note:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also note:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288154,
        "id": "4bd94361-6181-4b88-a4d4-c7f517a33747",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288154,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288154,
        "id": "c2e3cb2f-3950-43fa-9052-bc312df3b250",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288154,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from)."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288156,
        "id": "6f7b1d39-df39-4e0d-932e-2b3730b3c0da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288156,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Taken from the ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "PHP Documentation for Anonymous Functions",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://php.net/manual/en/functions.anonymous.php"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Taken from the ",
            "AttrFlags": 4
          },
          {
            "Text": "PHP Documentation for Anonymous Functions",
            "AttrFlags": 4,
            "Link": "http://php.net/manual/en/functions.anonymous.php"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288156,
        "id": "ff6a2eb4-7efa-4a33-9b96-ae240cb355b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288156,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288156,
        "id": "89b77740-2181-4b0a-8615-86471738421b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288156,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In PHP, closures use an "
            ],
            [
              "early-binding",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " approach. This means that variables passed to the closure’s namespace using "
            ],
            [
              "use",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword will have the same values when the closure was defined."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In PHP, closures use an "
          },
          {
            "Text": "early-binding",
            "AttrFlags": 1
          },
          {
            "Text": " approach. This means that variables passed to the closure’s namespace using "
          },
          {
            "Text": "use",
            "AttrFlags": 2
          },
          {
            "Text": " keyword will have the same values when the closure was defined."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288156,
        "id": "27f83d95-11dd-4567-ab3d-7f9bb0bc5a20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288156,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To change this behavior you should pass the variable "
            ],
            [
              "by-reference",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To change this behavior you should pass the variable "
          },
          {
            "Text": "by-reference",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288157,
        "id": "51d13d3c-d0d7-4e4b-ae87-d01136cbfe9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288157,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$rate = .05;\n\n// Exports variable to closure's scope\n$calculateTax = function ($value) use ($rate) {\n    return $value * $rate;\n};\n\n$rate = .1; \n\nprint $calculateTax(100); // 5"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$rate = .05;\n\n// Exports variable to closure's scope\n$calculateTax = function ($value) use ($rate) {\n    return $value * $rate;\n};\n\n$rate = .1; \n\nprint $calculateTax(100); // 5",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288157,
        "id": "e6e6ce67-61f9-4cb0-b319-69bfda188b0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288157,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$rate = .05;\n\n// Exports variable to closure's scope\n$calculateTax = function ($value) use (\u0026$rate) { // notice the \u0026 before $rate\n    return $value * $rate;\n};\n\n$rate = .1;\n\nprint $calculateTax(100); // 10"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$rate = .05;\n\n// Exports variable to closure's scope\n$calculateTax = function ($value) use (\u0026$rate) { // notice the \u0026 before $rate\n    return $value * $rate;\n};\n\n$rate = .1;\n\nprint $calculateTax(100); // 10",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288157,
        "id": "d4f0140e-23b8-45ab-8f84-25b4f1f6ce16",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288157,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Default arguments are not implicitly required when defining anonymous functions with/without closures."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Default arguments are not implicitly required when defining anonymous functions with/without closures."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022288157,
        "id": "636f7ed6-1627-405d-bb23-bdc18e1f4cc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022288157,
        "parent_id": "8d562a48-111d-486a-9a3a-7c5fb730efc4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$message = 'Im yelling at you';\n\n$yell = function() use($message) {\n    echo strtoupper($message);\n};\n\n$yell(); // returns: IM YELLING AT YOU"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$message = 'Im yelling at you';\n\n$yell = function() use($message) {\n    echo strtoupper($message);\n};\n\n$yell(); // returns: IM YELLING AT YOU",
        "code_language": "Plain Text"
      }
    ],
    "title": "Closures",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}