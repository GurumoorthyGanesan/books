{
  "ID": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
  "Root": {
    "alive": true,
    "content": [
      "3561f4af-a3e3-49a7-a940-0ef73990e9f5",
      "287cae44-6b2f-4777-b682-3bcaaab99a21",
      "fe5e9efa-5a73-4058-a2a0-82e19ab505a5",
      "c7e625a3-0d85-48d7-8a67-11a4f9bd52c5",
      "c2ddc191-ab6a-4b0d-aa49-18d451338f8c",
      "a91d944b-8c1f-4523-a76a-896c8b628e24",
      "3e142644-eb73-41c8-919f-a321469816e3",
      "7a518570-8388-4629-be02-2deeae419629"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552023021162,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552023021163,
    "parent_id": "c2cfe994-4a4e-42a5-a1f3-29b806f5c459",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Use closures to implement observer pattern"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021159,
        "id": "3561f4af-a3e3-49a7-a940-0ef73990e9f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021159,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general, an observer is a class with a specific method being called when an action on the observed object occurs. In certain situations, closures can be enough to implement the observer design pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general, an observer is a class with a specific method being called when an action on the observed object occurs. In certain situations, closures can be enough to implement the observer design pattern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021161,
        "id": "287cae44-6b2f-4777-b682-3bcaaab99a21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021161,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is a detailed example of such an implementation. Let’s first declare a class whose purpose is to notify observers when its property is changed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is a detailed example of such an implementation. Let’s first declare a class whose purpose is to notify observers when its property is changed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021162,
        "id": "fe5e9efa-5a73-4058-a2a0-82e19ab505a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021162,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\n\nclass ObservedStuff implements SplSubject\n{\n    protected $property;\n    protected $observers = [];\n\n    public function attach(SplObserver $observer)\n    {\n        $this-\u003eobservers[] = $observer;\n        return $this;\n    }\n\n    public function detach(SplObserver $observer)\n    {\n        if (false !== $key = array_search($observer, $this-\u003eobservers, true)) {\n            unset($this-\u003eobservers[$key]);\n        }\n    }\n\n    public function notify()\n    {\n        foreach ($this-\u003eobservers as $observer) {\n            $observer-\u003eupdate($this);\n        }\n    }\n\n    public function getProperty()\n    {\n        return $this-\u003eproperty;\n    }\n\n    public function setProperty($property)\n    {\n        $this-\u003eproperty = $property;\n        $this-\u003enotify();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\n\nclass ObservedStuff implements SplSubject\n{\n    protected $property;\n    protected $observers = [];\n\n    public function attach(SplObserver $observer)\n    {\n        $this-\u003eobservers[] = $observer;\n        return $this;\n    }\n\n    public function detach(SplObserver $observer)\n    {\n        if (false !== $key = array_search($observer, $this-\u003eobservers, true)) {\n            unset($this-\u003eobservers[$key]);\n        }\n    }\n\n    public function notify()\n    {\n        foreach ($this-\u003eobservers as $observer) {\n            $observer-\u003eupdate($this);\n        }\n    }\n\n    public function getProperty()\n    {\n        return $this-\u003eproperty;\n    }\n\n    public function setProperty($property)\n    {\n        $this-\u003eproperty = $property;\n        $this-\u003enotify();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021162,
        "id": "c7e625a3-0d85-48d7-8a67-11a4f9bd52c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021162,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then, let’s declare the class that will represent the different observers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then, let’s declare the class that will represent the different observers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021162,
        "id": "c2ddc191-ab6a-4b0d-aa49-18d451338f8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021162,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\n\nclass NamedObserver implements SplObserver\n{\n    protected $name;\n    protected $closure;\n\n    public function __construct(Closure $closure, $name)\n    {\n        $this-\u003eclosure = $closure-\u003ebindTo($this, $this);\n        $this-\u003ename = $name;\n    }\n\n    public function update(SplSubject $subject)\n    {\n        $closure = $this-\u003eclosure;\n        $closure($subject);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\n\nclass NamedObserver implements SplObserver\n{\n    protected $name;\n    protected $closure;\n\n    public function __construct(Closure $closure, $name)\n    {\n        $this-\u003eclosure = $closure-\u003ebindTo($this, $this);\n        $this-\u003ename = $name;\n    }\n\n    public function update(SplSubject $subject)\n    {\n        $closure = $this-\u003eclosure;\n        $closure($subject);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021162,
        "id": "a91d944b-8c1f-4523-a76a-896c8b628e24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021162,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s finally test this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s finally test this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021162,
        "id": "3e142644-eb73-41c8-919f-a321469816e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021162,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\n\n$o = new ObservedStuff;\n\n$observer1 = function(SplSubject $subject) {\n    echo $this-\u003ename, ' has been notified! New property value: ', $subject-\u003egetProperty(), \"\\n\";\n};\n\n$observer2 = function(SplSubject $subject) {\n    echo $this-\u003ename, ' has been notified! New property value: ', $subject-\u003egetProperty(), \"\\n\";\n};\n\n$o-\u003eattach(new NamedObserver($observer1, 'Observer1'))\n  -\u003eattach(new NamedObserver($observer2, 'Observer2'));\n\n$o-\u003esetProperty('Hello world!');\n// Shows:\n// Observer1 has been notified! New property value: Hello world!\n// Observer2 has been notified! New property value: Hello world!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\n\n$o = new ObservedStuff;\n\n$observer1 = function(SplSubject $subject) {\n    echo $this-\u003ename, ' has been notified! New property value: ', $subject-\u003egetProperty(), \"\\n\";\n};\n\n$observer2 = function(SplSubject $subject) {\n    echo $this-\u003ename, ' has been notified! New property value: ', $subject-\u003egetProperty(), \"\\n\";\n};\n\n$o-\u003eattach(new NamedObserver($observer1, 'Observer1'))\n  -\u003eattach(new NamedObserver($observer2, 'Observer2'));\n\n$o-\u003esetProperty('Hello world!');\n// Shows:\n// Observer1 has been notified! New property value: Hello world!\n// Observer2 has been notified! New property value: Hello world!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023021162,
        "id": "7a518570-8388-4629-be02-2deeae419629",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023021162,
        "parent_id": "ac125ee7-9b46-460c-9ae2-c2c3d74f3f0b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this example works because the observers share the same nature (they are both “named observers.”)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this example works because the observers share the same nature (they are both “named observers.”)"
          }
        ]
      }
    ],
    "title": "Use closures to implement observer pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}