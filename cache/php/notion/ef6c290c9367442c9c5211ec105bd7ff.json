{
  "ID": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
  "Root": {
    "alive": true,
    "content": [
      "bdf04af9-192b-4fa2-9f64-e97d468ea2bf",
      "88c6615b-68ee-43a5-abfa-1d305143e9df",
      "04b30c33-095d-40ff-9fee-47047f512505",
      "b89ff331-a4a5-41e9-888b-ed33e5f97a27",
      "37b00223-bad3-42ca-86cd-b0662d7db749",
      "8274df89-0803-42a8-b406-a293dfc5a6b6",
      "e0c8ef70-db34-4dcc-80c0-f0f62fd32fc5",
      "101b16b7-7561-4c99-bf16-0c4ce4a79ee5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022615103,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022615103,
    "parent_id": "27de0930-be0d-4503-9a9b-05150c7d754e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Implementing a Singleton using Traits"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615099,
        "id": "bdf04af9-192b-4fa2-9f64-e97d468ea2bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615099,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Disclaimer",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "In no way does this example advocate the use of singletons. Singletons are to be used with a lot of care.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Disclaimer",
            "AttrFlags": 1
          },
          {
            "Text": ": "
          },
          {
            "Text": "In no way does this example advocate the use of singletons. Singletons are to be used with a lot of care.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615102,
        "id": "88c6615b-68ee-43a5-abfa-1d305143e9df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615102,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In PHP there is quite a standard way of implementing a singleton:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In PHP there is quite a standard way of implementing a singleton:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615102,
        "id": "04b30c33-095d-40ff-9fee-47047f512505",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615102,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Singleton {\n    private $instance;\n\n    private function __construct() { };\n\n    public function getInstance() {\n        if (!self::$instance) {\n            // new self() is 'basically' equivalent to new Singleton()\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    // Prevent cloning of the instance\n    protected function __clone() { }\n\n    // Prevent serialization of the instance\n    protected function __sleep() { }\n\n    // Prevent deserialization of the instance\n    protected function __wakeup() { }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Singleton {\n    private $instance;\n\n    private function __construct() { };\n\n    public function getInstance() {\n        if (!self::$instance) {\n            // new self() is 'basically' equivalent to new Singleton()\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    // Prevent cloning of the instance\n    protected function __clone() { }\n\n    // Prevent serialization of the instance\n    protected function __sleep() { }\n\n    // Prevent deserialization of the instance\n    protected function __wakeup() { }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615102,
        "id": "b89ff331-a4a5-41e9-888b-ed33e5f97a27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615102,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To prevent code duplication, it is a good idea to extract this behaviour into a trait."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To prevent code duplication, it is a good idea to extract this behaviour into a trait."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615102,
        "id": "37b00223-bad3-42ca-86cd-b0662d7db749",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615102,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "trait SingletonTrait {\n    private $instance;\n\n    protected function __construct() { };\n\n    public function getInstance() {\n        if (!self::$instance) {\n            // new self() will refer to the class that uses the trait\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    protected function __clone() { }\n    protected function __sleep() { }\n    protected function __wakeup() { }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "trait SingletonTrait {\n    private $instance;\n\n    protected function __construct() { };\n\n    public function getInstance() {\n        if (!self::$instance) {\n            // new self() will refer to the class that uses the trait\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    protected function __clone() { }\n    protected function __sleep() { }\n    protected function __wakeup() { }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615102,
        "id": "8274df89-0803-42a8-b406-a293dfc5a6b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615102,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now any class that wants to function as a singleton can simply use the trait:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now any class that wants to function as a singleton can simply use the trait:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615103,
        "id": "e0c8ef70-db34-4dcc-80c0-f0f62fd32fc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615103,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MyClass {\n    use SingletonTrait;\n}\n\n// Error! Constructor is not publicly accessible\n$myClass = new MyClass();\n\n$myClass = MyClass::getInstance();\n\n// All calls below will fail due to method visibility\n$myClassCopy = clone $myClass; // Error!\n$serializedMyClass = serialize($myClass); // Error!\n$myClass = deserialize($serializedMyclass); // Error!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MyClass {\n    use SingletonTrait;\n}\n\n// Error! Constructor is not publicly accessible\n$myClass = new MyClass();\n\n$myClass = MyClass::getInstance();\n\n// All calls below will fail due to method visibility\n$myClassCopy = clone $myClass; // Error!\n$serializedMyClass = serialize($myClass); // Error!\n$myClass = deserialize($serializedMyclass); // Error!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022615103,
        "id": "101b16b7-7561-4c99-bf16-0c4ce4a79ee5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022615103,
        "parent_id": "ef6c290c-9367-442c-9c52-11ec105bd7ff",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though it is now impossible to serialize a singleton, it is still useful to also disallow the deserialize method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though it is now impossible to serialize a singleton, it is still useful to also disallow the deserialize method."
          }
        ]
      }
    ],
    "title": "Implementing a Singleton using Traits",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}