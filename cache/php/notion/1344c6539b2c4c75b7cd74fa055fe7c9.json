{
  "ID": "1344c653-9b2c-4c75-b7cd-74fa055fe7c9",
  "Root": {
    "alive": true,
    "content": [
      "02d70be0-eeb9-459c-adae-0eeeb7192591",
      "323da09f-35ae-474d-9a8b-dd82251f1f3b",
      "cba4d9ff-8951-4638-9462-31b5f8577c26"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552024881182,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1344c653-9b2c-4c75-b7cd-74fa055fe7c9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552024881182,
    "parent_id": "8f27b6c2-32e0-46fe-9052-1bece702489a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using bcmath to readwrite a binary long on 32-bit system"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024881177,
        "id": "02d70be0-eeb9-459c-adae-0eeeb7192591",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024881177,
        "parent_id": "1344c653-9b2c-4c75-b7cd-74fa055fe7c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On 32-bit systems, integers greater than "
            ],
            [
              "0x7FFFFFFF",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be stored primitively, while integers between "
            ],
            [
              "0x0000000080000000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "0x7FFFFFFFFFFFFFFF",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be stored primitively on 64-bit systems but not 32-bit systems ("
            ],
            [
              "signed long long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). However, since 64-bit systems and many other languages support storing "
            ],
            [
              "signed long long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " integers, it is sometimes necessary to store this range of integers in exact value. There are several ways to do so, such as creating an array with two numbers, or converting the integer into its decimal human-readable form. This has several advantages, such as the convenience in presenting to the user, and the ability to manipulate it with bcmath directly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On 32-bit systems, integers greater than "
          },
          {
            "Text": "0x7FFFFFFF",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be stored primitively, while integers between "
          },
          {
            "Text": "0x0000000080000000",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "0x7FFFFFFFFFFFFFFF",
            "AttrFlags": 2
          },
          {
            "Text": " can be stored primitively on 64-bit systems but not 32-bit systems ("
          },
          {
            "Text": "signed long long",
            "AttrFlags": 2
          },
          {
            "Text": "). However, since 64-bit systems and many other languages support storing "
          },
          {
            "Text": "signed long long",
            "AttrFlags": 2
          },
          {
            "Text": " integers, it is sometimes necessary to store this range of integers in exact value. There are several ways to do so, such as creating an array with two numbers, or converting the integer into its decimal human-readable form. This has several advantages, such as the convenience in presenting to the user, and the ability to manipulate it with bcmath directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024881182,
        "id": "323da09f-35ae-474d-9a8b-dd82251f1f3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024881182,
        "parent_id": "1344c653-9b2c-4c75-b7cd-74fa055fe7c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "pack",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://php.net/pack"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "unpack",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://php.net/unpack"
                ]
              ]
            ],
            [
              " methods can be used to convert between binary bytes and decimal form of the numbers (both of type "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but one is binary and one is ASCII), but they will always try to cast the ASCII string into a 32-bit int on 32-bit systems. The following snippet provides an alternative:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "pack",
            "AttrFlags": 2,
            "Link": "https://php.net/pack"
          },
          {
            "Text": "/"
          },
          {
            "Text": "unpack",
            "AttrFlags": 2,
            "Link": "https://php.net/unpack"
          },
          {
            "Text": " methods can be used to convert between binary bytes and decimal form of the numbers (both of type "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": ", but one is binary and one is ASCII), but they will always try to cast the ASCII string into a 32-bit int on 32-bit systems. The following snippet provides an alternative:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552024881182,
        "id": "cba4d9ff-8951-4638-9462-31b5f8577c26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552024881182,
        "parent_id": "1344c653-9b2c-4c75-b7cd-74fa055fe7c9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/** Use pack(\"J\") or pack(\"p\") for 64-bit systems */\nfunction writeLong(string $ascii) : string {\n    if(bccomp($ascii, \"0\") === -1) { // if $ascii \u003c 0\n        // 18446744073709551616 is equal to (1 \u003c\u003c 64)\n        // remember to add the quotes, or the number will be parsed as a float literal\n        $ascii = bcadd($ascii, \"18446744073709551616\");\n    }\n\n    // \"n\" is big-endian 16-bit unsigned short. Use \"v\" for small-endian.\n    return pack(\"n\", bcmod(bcdiv($ascii, \"281474976710656\"), \"65536\")) .\n        pack(\"n\", bcmod(bcdiv($ascii, \"4294967296\"), \"65536\")) .\n        pack(\"n\", bcdiv($ascii, \"65536\"), \"65536\")) .\n        pack(\"n\", bcmod($ascii, \"65536\"));\n}\n\nfunction readLong(string $binary) : string {\n    $result = \"0\";\n    $result = bcadd($result, unpack(\"n\", substr($binary, 0, 2)));\n    $result = bcmul($result, \"65536\");\n    $result = bcadd($result, unpack(\"n\", substr($binary, 2, 2)));\n    $result = bcmul($result, \"65536\");\n    $result = bcadd($result, unpack(\"n\", substr($binary, 4, 2)));\n    $result = bcmul($result, \"65536\");\n    $result = bcadd($result, unpack(\"n\", substr($binary, 6, 2)));\n\n    // if $binary is a signed long long\n    // 9223372036854775808 is equal to (1 \u003c\u003c 63) (note that this expression actually does not work even on 64-bit systems)\n    if(bccomp($result, \"9223372036854775808\") !== -1) { // if $result \u003e= 9223372036854775807\n        $result = bcsub($result, \"18446744073709551616\"); // $result -= (1 \u003c\u003c 64)\n    }\n    return $result;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/** Use pack(\"J\") or pack(\"p\") for 64-bit systems */\nfunction writeLong(string $ascii) : string {\n    if(bccomp($ascii, \"0\") === -1) { // if $ascii \u003c 0\n        // 18446744073709551616 is equal to (1 \u003c\u003c 64)\n        // remember to add the quotes, or the number will be parsed as a float literal\n        $ascii = bcadd($ascii, \"18446744073709551616\");\n    }\n\n    // \"n\" is big-endian 16-bit unsigned short. Use \"v\" for small-endian.\n    return pack(\"n\", bcmod(bcdiv($ascii, \"281474976710656\"), \"65536\")) .\n        pack(\"n\", bcmod(bcdiv($ascii, \"4294967296\"), \"65536\")) .\n        pack(\"n\", bcdiv($ascii, \"65536\"), \"65536\")) .\n        pack(\"n\", bcmod($ascii, \"65536\"));\n}\n\nfunction readLong(string $binary) : string {\n    $result = \"0\";\n    $result = bcadd($result, unpack(\"n\", substr($binary, 0, 2)));\n    $result = bcmul($result, \"65536\");\n    $result = bcadd($result, unpack(\"n\", substr($binary, 2, 2)));\n    $result = bcmul($result, \"65536\");\n    $result = bcadd($result, unpack(\"n\", substr($binary, 4, 2)));\n    $result = bcmul($result, \"65536\");\n    $result = bcadd($result, unpack(\"n\", substr($binary, 6, 2)));\n\n    // if $binary is a signed long long\n    // 9223372036854775808 is equal to (1 \u003c\u003c 63) (note that this expression actually does not work even on 64-bit systems)\n    if(bccomp($result, \"9223372036854775808\") !== -1) { // if $result \u003e= 9223372036854775807\n        $result = bcsub($result, \"18446744073709551616\"); // $result -= (1 \u003c\u003c 64)\n    }\n    return $result;\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using bcmath to readwrite a binary long on 32-bit system",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}