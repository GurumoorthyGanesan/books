{
  "ID": "625c1d51-b664-49e8-bb4b-9218dc005b3d",
  "Root": {
    "alive": true,
    "content": [
      "93d7c6f8-b0de-4596-85c4-906c4af76018",
      "d24a9dc3-8bc8-49b9-b117-32c75255f6a9",
      "9ff05b6d-b75b-4926-9153-7a99de0b1847",
      "7e80ca24-c975-43dc-b667-d262643b776d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022645097,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "625c1d51-b664-49e8-bb4b-9218dc005b3d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022645097,
    "parent_id": "73d52685-2f50-4a6a-b764-7a1742062923",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "call and callStatic"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022645094,
        "id": "93d7c6f8-b0de-4596-85c4-906c4af76018",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022645094,
        "parent_id": "625c1d51-b664-49e8-bb4b-9218dc005b3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "__call()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "__callStatic()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are called when somebody is calling nonexistent object method in object or static context."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "__call()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "__callStatic()",
            "AttrFlags": 2
          },
          {
            "Text": " are called when somebody is calling nonexistent object method in object or static context."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022645096,
        "id": "d24a9dc3-8bc8-49b9-b117-32c75255f6a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022645096,
        "parent_id": "625c1d51-b664-49e8-bb4b-9218dc005b3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\n{\n    /**\n     * This method will be called when somebody will try to invoke a method in object\n     * context, which does not exist, like:\n     *\n     * $foo-\u003emethod($arg, $arg1);\n     *\n     * First argument will contain the method name(in example above it will be \"method\"),\n     * and the second will contain the values of $arg and $arg1 as an array.\n     */\n    public function __call($method, $arguments)\n    {\n        // do something with that information here, like overloading\n        // or something generic.\n        // For sake of example let's say we're making a generic class,\n        // that holds some data and allows user to get/set/has via\n        // getter/setter methods. Also let's assume that there is some\n        // CaseHelper which helps to convert camelCase into snake_case.\n        // Also this method is simplified, so it does not check if there\n        // is a valid name or\n        $snakeName = CaseHelper::camelToSnake($method);\n        // Get get/set/has prefix\n        $subMethod = substr($snakeName, 0, 3);\n\n        // Drop method name.\n        $propertyName = substr($snakeName, 4);\n\n        switch ($subMethod) {\n            case \"get\":\n                return $this-\u003edata[$propertyName];\n            case \"set\":\n                $this-\u003edata[$propertyName] = $arguments[0];\n                break;\n            case \"has\":\n                return isset($this-\u003edata[$propertyName]);\n            default:\n                throw new BadMethodCallException(\"Undefined method $method\");\n        }\n    }\n\n    /**\n     * __callStatic will be called from static content, that is, when calling a nonexistent\n     * static method:\n     *\n     * Foo::buildSomethingCool($arg);\n     *\n     * First argument will contain the method name(in example above it will be \"buildSomethingCool\"),\n     * and the second will contain the value $arg in an array.\n     *\n     * Note that signature of this method is different(requires static keyword). This method was not\n     * available prior PHP 5.3\n     */\n    public static function __callStatic($method, $arguments)\n    {\n        // This method can be used when you need something like generic factory\n        // or something else(to be honest use case for this is not so clear to me).\n        print_r(func_get_args());\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\n{\n    /**\n     * This method will be called when somebody will try to invoke a method in object\n     * context, which does not exist, like:\n     *\n     * $foo-\u003emethod($arg, $arg1);\n     *\n     * First argument will contain the method name(in example above it will be \"method\"),\n     * and the second will contain the values of $arg and $arg1 as an array.\n     */\n    public function __call($method, $arguments)\n    {\n        // do something with that information here, like overloading\n        // or something generic.\n        // For sake of example let's say we're making a generic class,\n        // that holds some data and allows user to get/set/has via\n        // getter/setter methods. Also let's assume that there is some\n        // CaseHelper which helps to convert camelCase into snake_case.\n        // Also this method is simplified, so it does not check if there\n        // is a valid name or\n        $snakeName = CaseHelper::camelToSnake($method);\n        // Get get/set/has prefix\n        $subMethod = substr($snakeName, 0, 3);\n\n        // Drop method name.\n        $propertyName = substr($snakeName, 4);\n\n        switch ($subMethod) {\n            case \"get\":\n                return $this-\u003edata[$propertyName];\n            case \"set\":\n                $this-\u003edata[$propertyName] = $arguments[0];\n                break;\n            case \"has\":\n                return isset($this-\u003edata[$propertyName]);\n            default:\n                throw new BadMethodCallException(\"Undefined method $method\");\n        }\n    }\n\n    /**\n     * __callStatic will be called from static content, that is, when calling a nonexistent\n     * static method:\n     *\n     * Foo::buildSomethingCool($arg);\n     *\n     * First argument will contain the method name(in example above it will be \"buildSomethingCool\"),\n     * and the second will contain the value $arg in an array.\n     *\n     * Note that signature of this method is different(requires static keyword). This method was not\n     * available prior PHP 5.3\n     */\n    public static function __callStatic($method, $arguments)\n    {\n        // This method can be used when you need something like generic factory\n        // or something else(to be honest use case for this is not so clear to me).\n        print_r(func_get_args());\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022645097,
        "id": "9ff05b6d-b75b-4926-9153-7a99de0b1847",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022645097,
        "parent_id": "625c1d51-b664-49e8-bb4b-9218dc005b3d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022645097,
        "id": "7e80ca24-c975-43dc-b667-d262643b776d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022645097,
        "parent_id": "625c1d51-b664-49e8-bb4b-9218dc005b3d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$instance = new Foo();\n\n$instance-\u003esetSomeState(\"foo\");\nvar_dump($instance-\u003ehasSomeState());      // bool(true)\nvar_dump($instance-\u003egetSomeState());      // string \"foo\"\n\nFoo::exampleStaticCall(\"test\");\n// outputs:\nArray\n(\n    [0] =\u003e exampleCallStatic\n    [1] =\u003e test\n)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$instance = new Foo();\n\n$instance-\u003esetSomeState(\"foo\");\nvar_dump($instance-\u003ehasSomeState());      // bool(true)\nvar_dump($instance-\u003egetSomeState());      // string \"foo\"\n\nFoo::exampleStaticCall(\"test\");\n// outputs:\nArray\n(\n    [0] =\u003e exampleCallStatic\n    [1] =\u003e test\n)",
        "code_language": "Plain Text"
      }
    ],
    "title": "call and callStatic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}