{
  "ID": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
  "Root": {
    "alive": true,
    "content": [
      "387fb129-eb5e-4913-8f1d-13925d57bc5f",
      "ea83a241-1898-4d43-9c45-c793d4fbdcd6",
      "4c5d9a8e-bb1b-4ae7-bda2-c562b0cf0858",
      "b87aba24-2465-4dc0-a2c4-486b9f1530a4",
      "1752dca8-01bc-4380-a868-584ac167abe0",
      "efbe69ab-4f7e-4294-9285-09ff967067dd",
      "c0ee44ba-f6f4-4fe8-b58f-f0c7684a7e76",
      "d6725723-cf0c-4367-a768-fe7e9e4ade16",
      "8aeafbd1-4b17-4a9f-81ba-fa3623881ccd",
      "301bc02f-f3ca-4c06-8d6b-2997846081e7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022612106,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022612106,
    "parent_id": "27de0930-be0d-4503-9a9b-05150c7d754e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "What is a Trait"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612097,
        "id": "387fb129-eb5e-4913-8f1d-13925d57bc5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612097,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PHP only allows single inheritance. In other words, a class can only "
            ],
            [
              "extend",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " one other class. But what if you need to include something that doesn’t belong in the parent class? Prior to PHP 5.4 you would have to get creative, but in 5.4 Traits were introduced. Traits allow you to basically “copy and paste” a portion of a class into your main class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PHP only allows single inheritance. In other words, a class can only "
          },
          {
            "Text": "extend",
            "AttrFlags": 2
          },
          {
            "Text": " one other class. But what if you need to include something that doesn’t belong in the parent class? Prior to PHP 5.4 you would have to get creative, but in 5.4 Traits were introduced. Traits allow you to basically “copy and paste” a portion of a class into your main class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612099,
        "id": "ea83a241-1898-4d43-9c45-c793d4fbdcd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612099,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "trait Talk {\n    /** @var string */\n    public $phrase = 'Well Wilbur...';\n    public function speak() {\n         echo $this-\u003ephrase;\n    }\n}\n\nclass MrEd extends Horse {\n    use Talk;\n    public function __construct() {\n         $this-\u003espeak();\n    }\n\n    public function setPhrase($phrase) {\n         $this-\u003ephrase = $phrase;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "trait Talk {\n    /** @var string */\n    public $phrase = 'Well Wilbur...';\n    public function speak() {\n         echo $this-\u003ephrase;\n    }\n}\n\nclass MrEd extends Horse {\n    use Talk;\n    public function __construct() {\n         $this-\u003espeak();\n    }\n\n    public function setPhrase($phrase) {\n         $this-\u003ephrase = $phrase;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612100,
        "id": "4c5d9a8e-bb1b-4ae7-bda2-c562b0cf0858",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612100,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So here we have "
            ],
            [
              "MrEd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is already extending "
            ],
            [
              "Horse",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But not all horses "
            ],
            [
              "Talk",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so we have a Trait for that. Let’s note what this is doing"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So here we have "
          },
          {
            "Text": "MrEd",
            "AttrFlags": 2
          },
          {
            "Text": ", which is already extending "
          },
          {
            "Text": "Horse",
            "AttrFlags": 2
          },
          {
            "Text": ". But not all horses "
          },
          {
            "Text": "Talk",
            "AttrFlags": 2
          },
          {
            "Text": ", so we have a Trait for that. Let’s note what this is doing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612103,
        "id": "b87aba24-2465-4dc0-a2c4-486b9f1530a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612103,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, we define our Trait. We can use it with autoloading and Namespaces (see also "
            ],
            [
              "http://stackoverflow.com/documentation/php/1021/namespaces/3305/referencing-a-class-or-function-in-a-namespace",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/php/1021/namespaces/3305/referencing-a-class-or-function-in-a-namespace"
                ]
              ]
            ],
            [
              "). Then we include it into our "
            ],
            [
              "MrEd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class with the keyword "
            ],
            [
              "use",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, we define our Trait. We can use it with autoloading and Namespaces (see also "
          },
          {
            "Text": "http://stackoverflow.com/documentation/php/1021/namespaces/3305/referencing-a-class-or-function-in-a-namespace",
            "Link": "http://stackoverflow.com/documentation/php/1021/namespaces/3305/referencing-a-class-or-function-in-a-namespace"
          },
          {
            "Text": "). Then we include it into our "
          },
          {
            "Text": "MrEd",
            "AttrFlags": 2
          },
          {
            "Text": " class with the keyword "
          },
          {
            "Text": "use",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612104,
        "id": "1752dca8-01bc-4380-a868-584ac167abe0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612104,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You’ll note that "
            ],
            [
              "MrEd",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes to using the "
            ],
            [
              "Talk",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions and variables without defining them. Remember what we said about "
            ],
            [
              "copy and paste",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "? These functions and variables are all defined within the class now, as if this class had defined them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You’ll note that "
          },
          {
            "Text": "MrEd",
            "AttrFlags": 2
          },
          {
            "Text": " takes to using the "
          },
          {
            "Text": "Talk",
            "AttrFlags": 2
          },
          {
            "Text": " functions and variables without defining them. Remember what we said about "
          },
          {
            "Text": "copy and paste",
            "AttrFlags": 1
          },
          {
            "Text": "? These functions and variables are all defined within the class now, as if this class had defined them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612105,
        "id": "efbe69ab-4f7e-4294-9285-09ff967067dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612105,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Traits are most closely related to "
            ],
            [
              "Abstract classes",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/php/504/classes-and-objects/6304/abstract-classes"
                ]
              ]
            ],
            [
              " in that you can define variables and functions. You also cannot instantiate a Trait directly (i.e. "
            ],
            [
              "new Trait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Traits cannot force a class to implicitly define a function like an Abstract class or an Interface can. Traits are "
            ],
            [
              "only",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for explicit definitions (since you can "
            ],
            [
              "implement",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as many Interfaces as you want, see "
            ],
            [
              "http://stackoverflow.com/documentation/php/504/classes-and-objects/2754/using-interfaces",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/php/504/classes-and-objects/2754/using-interfaces"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Traits are most closely related to "
          },
          {
            "Text": "Abstract classes",
            "Link": "http://stackoverflow.com/documentation/php/504/classes-and-objects/6304/abstract-classes"
          },
          {
            "Text": " in that you can define variables and functions. You also cannot instantiate a Trait directly (i.e. "
          },
          {
            "Text": "new Trait()",
            "AttrFlags": 2
          },
          {
            "Text": "). Traits cannot force a class to implicitly define a function like an Abstract class or an Interface can. Traits are "
          },
          {
            "Text": "only",
            "AttrFlags": 1
          },
          {
            "Text": " for explicit definitions (since you can "
          },
          {
            "Text": "implement",
            "AttrFlags": 2
          },
          {
            "Text": " as many Interfaces as you want, see "
          },
          {
            "Text": "http://stackoverflow.com/documentation/php/504/classes-and-objects/2754/using-interfaces",
            "Link": "http://stackoverflow.com/documentation/php/504/classes-and-objects/2754/using-interfaces"
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612105,
        "id": "c0ee44ba-f6f4-4fe8-b58f-f0c7684a7e76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612105,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When should I use a Trait?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "When should I use a Trait?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612105,
        "id": "d6725723-cf0c-4367-a768-fe7e9e4ade16",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612105,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first thing you should do, when considering a Trait, is to ask yourself this important question"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first thing you should do, when considering a Trait, is to ask yourself this important question"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612105,
        "id": "8aeafbd1-4b17-4a9f-81ba-fa3623881ccd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612105,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Can I avoid using a Trait by restructuring my code?"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Can I avoid using a Trait by restructuring my code?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022612106,
        "id": "301bc02f-f3ca-4c06-8d6b-2997846081e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022612106,
        "parent_id": "6e6bd4e2-41f5-41c6-a83b-ada82a43f8fe",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More often than not, the answer is going to be "
            ],
            [
              "Yes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Traits are edge cases caused by single inheritance. The temptation to misuse or overuse Traits can be high. But consider that a Trait introduces another source for your code, which means there’s another layer of complexity. In the example here, we’re only dealing with 3 classes. But Traits mean you can now be dealing with far more than that. For each Trait, your class becomes that much harder to deal with, since you must now go reference each Trait to find out what it defines (and potentially where a collision happened, see "
            ],
            [
              "http://stackoverflow.com/documentation/php/999/traits/7271/conflict-resolution",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/php/999/traits/7271/conflict-resolution"
                ]
              ]
            ],
            [
              "). Ideally, you should keep as few Traits in your code as possible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More often than not, the answer is going to be "
          },
          {
            "Text": "Yes",
            "AttrFlags": 4
          },
          {
            "Text": ". Traits are edge cases caused by single inheritance. The temptation to misuse or overuse Traits can be high. But consider that a Trait introduces another source for your code, which means there’s another layer of complexity. In the example here, we’re only dealing with 3 classes. But Traits mean you can now be dealing with far more than that. For each Trait, your class becomes that much harder to deal with, since you must now go reference each Trait to find out what it defines (and potentially where a collision happened, see "
          },
          {
            "Text": "http://stackoverflow.com/documentation/php/999/traits/7271/conflict-resolution",
            "Link": "http://stackoverflow.com/documentation/php/999/traits/7271/conflict-resolution"
          },
          {
            "Text": "). Ideally, you should keep as few Traits in your code as possible."
          }
        ]
      }
    ],
    "title": "What is a Trait",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}