{
  "ID": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
  "Root": {
    "alive": true,
    "content": [
      "c2b84cc7-d5ed-4192-90a8-efacc4263323",
      "ff5aee38-4f2a-454e-9bbb-7f56773f297a",
      "44e6922f-fe40-48db-bf91-ba7f0e6638ba",
      "5f55afa4-14a0-4c9f-b17b-108dbd0422f8",
      "346d0183-8c76-43ff-bdd3-2ca401279b88",
      "a9debec5-0dce-4250-96c1-7237f712c310",
      "f50b268f-3921-4ff6-8495-e17a255b8321",
      "c99fd469-2966-4a91-b1b9-0230e683806c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022418081,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022418081,
    "parent_id": "8b30ba45-a57e-44b5-b6c2-501af4626d35",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Setter Injection"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418077,
        "id": "c2b84cc7-d5ed-4192-90a8-efacc4263323",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418077,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dependencies can also be injected by setters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dependencies can also be injected by setters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418079,
        "id": "ff5aee38-4f2a-454e-9bbb-7f56773f297a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418079,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Logger {\n    public function log($message);\n}\n\nclass Component {\n    private $logger;\n    private $databaseConnection;\n\n    public function __construct(DatabaseConnection $databaseConnection) {\n        $this-\u003edatabaseConnection = $databaseConnection;\n    }\n\n    public function setLogger(Logger $logger) {\n        $this-\u003elogger = $logger;\n    }\n\n    public function core() {\n        $this-\u003elogSave();    \n        return $this-\u003edatabaseConnection-\u003esave($this);\n    }\n\n    public function logSave() {\n         if ($this-\u003elogger) {\n            $this-\u003elogger-\u003elog('saving');\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Logger {\n    public function log($message);\n}\n\nclass Component {\n    private $logger;\n    private $databaseConnection;\n\n    public function __construct(DatabaseConnection $databaseConnection) {\n        $this-\u003edatabaseConnection = $databaseConnection;\n    }\n\n    public function setLogger(Logger $logger) {\n        $this-\u003elogger = $logger;\n    }\n\n    public function core() {\n        $this-\u003elogSave();    \n        return $this-\u003edatabaseConnection-\u003esave($this);\n    }\n\n    public function logSave() {\n         if ($this-\u003elogger) {\n            $this-\u003elogger-\u003elog('saving');\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418079,
        "id": "44e6922f-fe40-48db-bf91-ba7f0e6638ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418079,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is especially interesting when the core functionality of the class does not rely on the dependency to work."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is especially interesting when the core functionality of the class does not rely on the dependency to work."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418080,
        "id": "5f55afa4-14a0-4c9f-b17b-108dbd0422f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418080,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the "
            ],
            [
              "only",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " needed dependency is the "
            ],
            [
              "DatabaseConnection",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so it’s in the constructor. The "
            ],
            [
              "Logger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dependency is optional and thus does not need to be part of the constructor, making the class easier to use."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the "
          },
          {
            "Text": "only",
            "AttrFlags": 1
          },
          {
            "Text": " needed dependency is the "
          },
          {
            "Text": "DatabaseConnection",
            "AttrFlags": 2
          },
          {
            "Text": " so it’s in the constructor. The "
          },
          {
            "Text": "Logger",
            "AttrFlags": 2
          },
          {
            "Text": " dependency is optional and thus does not need to be part of the constructor, making the class easier to use."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418080,
        "id": "346d0183-8c76-43ff-bdd3-2ca401279b88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418080,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that when using setter injection, it’s better to extend the functionality rather than replacing it. When setting a dependency, there’s nothing confirming that the dependency won’t change at some point, which could lead in unexpected results. For example, a "
            ],
            [
              "FileLogger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could be set at first, and then a "
            ],
            [
              "MailLogger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could be set. This breaks encapsulation and makes logs hard to find, because we’re "
            ],
            [
              "replacing",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the dependency."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that when using setter injection, it’s better to extend the functionality rather than replacing it. When setting a dependency, there’s nothing confirming that the dependency won’t change at some point, which could lead in unexpected results. For example, a "
          },
          {
            "Text": "FileLogger",
            "AttrFlags": 2
          },
          {
            "Text": " could be set at first, and then a "
          },
          {
            "Text": "MailLogger",
            "AttrFlags": 2
          },
          {
            "Text": " could be set. This breaks encapsulation and makes logs hard to find, because we’re "
          },
          {
            "Text": "replacing",
            "AttrFlags": 1
          },
          {
            "Text": " the dependency."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418080,
        "id": "a9debec5-0dce-4250-96c1-7237f712c310",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418080,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To prevent this, we should "
            ],
            [
              "add",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a dependency with setter injection, like so :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To prevent this, we should "
          },
          {
            "Text": "add",
            "AttrFlags": 1
          },
          {
            "Text": " a dependency with setter injection, like so :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418080,
        "id": "f50b268f-3921-4ff6-8495-e17a255b8321",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418080,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Logger {\n    public function log($message);\n}\n\nclass Component {\n    private $loggers = array();\n    private $databaseConnection;\n\n    public function __construct(DatabaseConnection $databaseConnection) {\n        $this-\u003edatabaseConnection = $databaseConnection;\n    }\n\n    public function addLogger(Logger $logger) {\n        $this-\u003eloggers[] = $logger;\n    }\n\n    public function core() {\n        $this-\u003elogSave();\n        return $this-\u003edatabaseConnection-\u003esave($this);\n    }\n\n    public function logSave() {\n        foreach ($this-\u003eloggers as $logger) {\n            $logger-\u003elog('saving');\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Logger {\n    public function log($message);\n}\n\nclass Component {\n    private $loggers = array();\n    private $databaseConnection;\n\n    public function __construct(DatabaseConnection $databaseConnection) {\n        $this-\u003edatabaseConnection = $databaseConnection;\n    }\n\n    public function addLogger(Logger $logger) {\n        $this-\u003eloggers[] = $logger;\n    }\n\n    public function core() {\n        $this-\u003elogSave();\n        return $this-\u003edatabaseConnection-\u003esave($this);\n    }\n\n    public function logSave() {\n        foreach ($this-\u003eloggers as $logger) {\n            $logger-\u003elog('saving');\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022418080,
        "id": "c99fd469-2966-4a91-b1b9-0230e683806c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022418080,
        "parent_id": "3ed6f592-a221-41cc-a7ba-6ee7045c1502",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Like this, whenever we’ll use the core functionality, it won’t break even if there is no logger dependency added, and any logger added will be used even though another logger could’ve been added. We’re "
            ],
            [
              "extending",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " functionality instead of "
            ],
            [
              "replacing",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Like this, whenever we’ll use the core functionality, it won’t break even if there is no logger dependency added, and any logger added will be used even though another logger could’ve been added. We’re "
          },
          {
            "Text": "extending",
            "AttrFlags": 1
          },
          {
            "Text": " functionality instead of "
          },
          {
            "Text": "replacing",
            "AttrFlags": 1
          },
          {
            "Text": " it."
          }
        ]
      }
    ],
    "title": "Setter Injection",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}