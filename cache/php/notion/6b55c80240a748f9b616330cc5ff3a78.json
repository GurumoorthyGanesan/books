{
  "ID": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
  "Root": {
    "alive": true,
    "content": [
      "53d84658-4dac-468d-ad1c-3531a9fbee25",
      "634b1db8-a6a2-431f-93f8-ad8f4e539493",
      "92ca8318-d3b2-471b-9cc0-d3c0c951f623",
      "2e7c7338-b5a3-481f-9a1a-59fd14767942",
      "231e2319-f7a0-4d45-a48c-8a93b90d9733",
      "305680f1-5ad7-418c-a72e-b44f547a1a5b",
      "e6dc205a-e053-454a-be13-346ff1b5ea8d",
      "8025d3a8-5be4-4411-91e6-20cf56916476",
      "0e9819b6-833e-4e7e-a844-e674deddde14",
      "141dfa27-a144-47cb-bc04-0729fd48378e",
      "e517aec1-4744-4cd9-a510-914cdde1a74f",
      "74fe324b-8a48-48cf-891b-c3c817764d4f",
      "fc0f7461-c88f-4331-b5df-75a9cd0d38b4",
      "73bc21e6-902f-4ccb-90f0-de92d1af9b5b",
      "b6ce6fd2-67a6-441e-a5e8-f2f8a3d9031c",
      "dd2b3f8f-01f5-436e-9cfb-6226b558f0e3",
      "7c3e8c42-90f1-40b2-acd4-b2542d7e9bc3",
      "a9754d1e-654d-420f-b0f1-622f2e28230e",
      "d0bdc0e6-220d-4aa3-8a04-c8af1d6b3314",
      "bb01bff1-5eeb-48e3-8f98-40e477438909",
      "c7f6daff-a0d2-4c85-b744-9bb220744b1f",
      "d8d7de4d-eaf6-4ca0-b4e9-788c2edc959e",
      "98ab9d9c-d87f-4705-9ad9-fdaaff68b87c",
      "7b465f58-804e-45e4-b49a-5a9ef22ec9ed",
      "e3b6ad68-8822-4048-a832-0ae09bfdf9c1",
      "6fd3f566-8425-40a4-a714-c7a1d0d08e82",
      "7b576443-5ca0-4f43-b8b4-d343b6b9b0ce",
      "aec628be-b35f-4632-9d6c-ffdfcb22ac0f",
      "ae986654-0c52-4209-afd3-0f4f25c42929",
      "f30261f3-dad7-4ea5-884c-a663a9b104bd",
      "0bf688fe-bdc5-439a-a2ba-60dad989797d",
      "72d99577-238d-4a08-80a7-1ec8635eb24f",
      "393b4943-a7b7-4ce2-ba05-bc4d5be57823",
      "76856dfb-4840-48d4-8654-ecfbee725bba",
      "9143b149-94b8-4309-ae11-bdc21de8a879",
      "fcbe5b53-c562-48a8-8df9-570ab899419d",
      "12eca0df-6590-4b2d-a86a-db120aae4f6a",
      "289dadc8-e716-49fe-98a0-684c35ea9dbc",
      "79c195d5-3768-404e-a7f6-4c5f79124eb4",
      "a56744ac-95cf-4712-b87e-d40be97343a4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022724178,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022724178,
    "parent_id": "98823712-1c98-4a43-8727-0a1d762add3b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bitwise Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724168,
        "id": "53d84658-4dac-468d-ad1c-3531a9fbee25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724168,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prefix bitwise operators"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prefix bitwise operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724171,
        "id": "634b1db8-a6a2-431f-93f8-ad8f4e539493",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724171,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise operators are like logical operators but executed per bit rather than per boolean value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise operators are like logical operators but executed per bit rather than per boolean value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724171,
        "id": "92ca8318-d3b2-471b-9cc0-d3c0c951f623",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724171,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// bitwise NOT ~: sets all unset bits and unsets all set bits\nprintf(\"%'06b\", ~0b110110); // 001001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// bitwise NOT ~: sets all unset bits and unsets all set bits\nprintf(\"%'06b\", ~0b110110); // 001001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724171,
        "id": "2e7c7338-b5a3-481f-9a1a-59fd14767942",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724171,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitmask-bitmask operators"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitmask-bitmask operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724171,
        "id": "231e2319-f7a0-4d45-a48c-8a93b90d9733",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724171,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise AND "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": a bit is set only if it is set in both operands"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise AND "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ": a bit is set only if it is set in both operands"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724171,
        "id": "305680f1-5ad7-418c-a72e-b44f547a1a5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724171,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"%'06b\", 0b110101 \u0026 0b011001); // 010001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"%'06b\", 0b110101 \u0026 0b011001); // 010001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "e6dc205a-e053-454a-be13-346ff1b5ea8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise OR "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": a bit is set if it is set in either or both operands"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise OR "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": ": a bit is set if it is set in either or both operands"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "8025d3a8-5be4-4411-91e6-20cf56916476",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"%'06b\", 0b110101 | 0b011001); // 111101"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"%'06b\", 0b110101 | 0b011001); // 111101",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "0e9819b6-833e-4e7e-a844-e674deddde14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise XOR "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": a bit is set if it is set in one operand and not set in another operand, i.e. only if that bit is in different state in the two operands"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise XOR "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": ": a bit is set if it is set in one operand and not set in another operand, i.e. only if that bit is in different state in the two operands"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "141dfa27-a144-47cb-bc04-0729fd48378e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"%'06b\", 0b110101 ^ 0b011001); // 101100"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"%'06b\", 0b110101 ^ 0b011001); // 101100",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "e517aec1-4744-4cd9-a510-914cdde1a74f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example uses of bitmasks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example uses of bitmasks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "74fe324b-8a48-48cf-891b-c3c817764d4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These operators can be used to manipulate bitmasks. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These operators can be used to manipulate bitmasks. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724172,
        "id": "fc0f7461-c88f-4331-b5df-75a9cd0d38b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724172,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "file_put_contents(\"file.log\", LOCK_EX | FILE_APPEND);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "file_put_contents(\"file.log\", LOCK_EX | FILE_APPEND);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724173,
        "id": "73bc21e6-902f-4ccb-90f0-de92d1af9b5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724173,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used to combine the two bitmasks. Although "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has the same effect, "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " emphasizes that you are combining bitmasks, not adding two normal scalar integers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used to combine the two bitmasks. Although "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " has the same effect, "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " emphasizes that you are combining bitmasks, not adding two normal scalar integers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724173,
        "id": "b6ce6fd2-67a6-441e-a5e8-f2f8a3d9031c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724173,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo{\n    const OPTION_A = 1;\n    const OPTION_B = 2;\n    const OPTION_C = 4;\n    const OPTION_A = 8;\n\n    private $options = self::OPTION_A | self::OPTION_C;\n\n    public function toggleOption(int $option){\n        $this-\u003eoptions ^= $option;\n    }\n\n    public function enable(int $option){\n        $this-\u003eoptions |= $option; // enable $option regardless of its original state\n    }\n\n    public function disable(int $option){\n        $this-\u003eoptions \u0026= ~$option; // disable $option regardless of its original state,\n                                    // without affecting other bits\n    }\n\n    /** returns whether at least one of the options is enabled */\n    public function isOneEnabled(int $options) : bool{\n        return $this-\u003eoptions \u0026 $option !== 0;\n        // Use !== rather than \u003e, because \n        // if $options is about a high bit, we may be handling a negative integer\n    }\n\n    /** returns whether all of the options are enabled */\n    public function areAllEnabled(int $options) : bool{\n        return ($this-\u003eoptions \u0026 $options) === $options;\n        // note the parentheses; beware the operator precedence\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo{\n    const OPTION_A = 1;\n    const OPTION_B = 2;\n    const OPTION_C = 4;\n    const OPTION_A = 8;\n\n    private $options = self::OPTION_A | self::OPTION_C;\n\n    public function toggleOption(int $option){\n        $this-\u003eoptions ^= $option;\n    }\n\n    public function enable(int $option){\n        $this-\u003eoptions |= $option; // enable $option regardless of its original state\n    }\n\n    public function disable(int $option){\n        $this-\u003eoptions \u0026= ~$option; // disable $option regardless of its original state,\n                                    // without affecting other bits\n    }\n\n    /** returns whether at least one of the options is enabled */\n    public function isOneEnabled(int $options) : bool{\n        return $this-\u003eoptions \u0026 $option !== 0;\n        // Use !== rather than \u003e, because \n        // if $options is about a high bit, we may be handling a negative integer\n    }\n\n    /** returns whether all of the options are enabled */\n    public function areAllEnabled(int $options) : bool{\n        return ($this-\u003eoptions \u0026 $options) === $options;\n        // note the parentheses; beware the operator precedence\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724173,
        "id": "dd2b3f8f-01f5-436e-9cfb-6226b558f0e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724173,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example (assuming "
            ],
            [
              "$option",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " always only contain one bit) uses:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example (assuming "
          },
          {
            "Text": "$option",
            "AttrFlags": 2
          },
          {
            "Text": " always only contain one bit) uses:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724173,
        "id": "7c3e8c42-90f1-40b2-acd4-b2542d7e9bc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724173,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to conveniently toggle bitmasks."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " operator to conveniently toggle bitmasks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724174,
        "id": "a9754d1e-654d-420f-b0f1-622f2e28230e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724174,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to set a bit neglecting its original state or other bits"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " operator to set a bit neglecting its original state or other bits"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724174,
        "id": "d0bdc0e6-220d-4aa3-8a04-c8af1d6b3314",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724174,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the "
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to convert an integer with only one bit set into an integer with only one bit not set"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the "
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": " operator to convert an integer with only one bit set into an integer with only one bit not set"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724174,
        "id": "bb01bff1-5eeb-48e3-8f98-40e477438909",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724174,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator to unset a bit, using these properties of "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " operator to unset a bit, using these properties of "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724175,
        "id": "c7f6daff-a0d2-4c85-b744-9bb220744b1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724175,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since "
            ],
            [
              "\u0026=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a set bit will not do anything ("
            ],
            [
              "(1 \u0026 1) === 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "(0 \u0026 1) === 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), doing "
            ],
            [
              "\u0026=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with an integer with only one bit not set will only unset that bit, not affecting other bits."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since "
          },
          {
            "Text": "\u0026=",
            "AttrFlags": 2
          },
          {
            "Text": " with a set bit will not do anything ("
          },
          {
            "Text": "(1 \u0026 1) === 1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "(0 \u0026 1) === 0",
            "AttrFlags": 2
          },
          {
            "Text": "), doing "
          },
          {
            "Text": "\u0026=",
            "AttrFlags": 2
          },
          {
            "Text": " with an integer with only one bit not set will only unset that bit, not affecting other bits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724175,
        "id": "d8d7de4d-eaf6-4ca0-b4e9-788c2edc959e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724175,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u0026=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with an unset bit will unset that bit ("
            ],
            [
              "(1 \u0026 0) === 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "(0 \u0026 0) === 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u0026=",
            "AttrFlags": 2
          },
          {
            "Text": " with an unset bit will unset that bit ("
          },
          {
            "Text": "(1 \u0026 0) === 0",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "(0 \u0026 0) === 0",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724175,
        "id": "98ab9d9c-d87f-4705-9ad9-fdaaff68b87c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724175,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator with another bitmask will filter away all other bits not set in that bitmask."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " operator with another bitmask will filter away all other bits not set in that bitmask."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724175,
        "id": "7b465f58-804e-45e4-b49a-5a9ef22ec9ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724175,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the output has any bits set, it means that any one of the options are enabled."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the output has any bits set, it means that any one of the options are enabled."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724176,
        "id": "e3b6ad68-8822-4048-a832-0ae09bfdf9c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724176,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the output has all bits of the bitmask set, it means that all of the options in the bitmask are enabled."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the output has all bits of the bitmask set, it means that all of the options in the bitmask are enabled."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724176,
        "id": "6fd3f566-8425-40a4-a714-c7a1d0d08e82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724176,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bear in mind that these comparison operators: ("
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "===",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "!==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c=\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") have higher precedence than these bitmask-bitmask operators: ("
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). As bitwise results are often compared using these comparison operators, this is a common pitfall to be aware of."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bear in mind that these comparison operators: ("
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "===",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "!==",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c=\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") have higher precedence than these bitmask-bitmask operators: ("
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": "). As bitwise results are often compared using these comparison operators, this is a common pitfall to be aware of."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724176,
        "id": "7b576443-5ca0-4f43-b8b4-d343b6b9b0ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724176,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bit-shifting operators"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bit-shifting operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724176,
        "id": "aec628be-b35f-4632-9d6c-ffdfcb22ac0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724176,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise left shift \u003c\u003c: shift all bits to the left (more significant) by the given number of steps and discard the bits exceeding the int size"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise left shift \u003c\u003c: shift all bits to the left (more significant) by the given number of steps and discard the bits exceeding the int size"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724177,
        "id": "ae986654-0c52-4209-afd3-0f4f25c42929",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724177,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003c\u003c $x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to unsetting the highest "
            ],
            [
              "$x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bits and multiplying by the "
            ],
            [
              "$x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "th power of 2"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003c\u003c $x",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to unsetting the highest "
          },
          {
            "Text": "$x",
            "AttrFlags": 2
          },
          {
            "Text": " bits and multiplying by the "
          },
          {
            "Text": "$x",
            "AttrFlags": 2
          },
          {
            "Text": "th power of 2"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724177,
        "id": "f30261f3-dad7-4ea5-884c-a663a9b104bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724177,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"%'08b\", 0b00001011\u003c\u003c 2); // 00101100\n\nassert(PHP_INT_SIZE === 4); // a 32-bit system\nprintf(\"%x, %x\", 0x5FFFFFFF \u003c\u003c 2, 0x1FFFFFFF \u003c\u003c 4); // 7FFFFFFC, FFFFFFFF"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"%'08b\", 0b00001011\u003c\u003c 2); // 00101100\n\nassert(PHP_INT_SIZE === 4); // a 32-bit system\nprintf(\"%x, %x\", 0x5FFFFFFF \u003c\u003c 2, 0x1FFFFFFF \u003c\u003c 4); // 7FFFFFFC, FFFFFFFF",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724177,
        "id": "0bf688fe-bdc5-439a-a2ba-60dad989797d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724177,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise right shift "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": discard the lowest shift and shift the remaining bits to the right (less significant)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise right shift "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ": discard the lowest shift and shift the remaining bits to the right (less significant)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724177,
        "id": "72d99577-238d-4a08-80a7-1ec8635eb24f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724177,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003e\u003e $x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to dividing by the "
            ],
            [
              "$x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "th power of 2 and discard the non-integer part"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003e\u003e $x",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to dividing by the "
          },
          {
            "Text": "$x",
            "AttrFlags": 2
          },
          {
            "Text": "th power of 2 and discard the non-integer part"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724177,
        "id": "393b4943-a7b7-4ce2-ba05-bc4d5be57823",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724177,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "printf(\"%x\", 0xFFFFFFFF \u003e\u003e 3); // 1FFFFFFF"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "printf(\"%x\", 0xFFFFFFFF \u003e\u003e 3); // 1FFFFFFF",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724177,
        "id": "76856dfb-4840-48d4-8654-ecfbee725bba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724177,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example uses of bit shifting:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example uses of bit shifting:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724178,
        "id": "9143b149-94b8-4309-ae11-bdc21de8a879",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724178,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fast division by 16 (better performance than "
            ],
            [
              "/= 16",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fast division by 16 (better performance than "
          },
          {
            "Text": "/= 16",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724178,
        "id": "fcbe5b53-c562-48a8-8df9-570ab899419d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724178,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$x \u003e\u003e= 4;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$x \u003e\u003e= 4;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724178,
        "id": "12eca0df-6590-4b2d-a86a-db120aae4f6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724178,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On 32-bit systems, this discards all bits in the integer, setting the value to 0. On 64-bit systems, this unsets the most significant 32 bits and keep the least"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On 32-bit systems, this discards all bits in the integer, setting the value to 0. On 64-bit systems, this unsets the most significant 32 bits and keep the least"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724178,
        "id": "289dadc8-e716-49fe-98a0-684c35ea9dbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724178,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$x = $x \u003c\u003c 32 \u003e\u003e 32;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$x = $x \u003c\u003c 32 \u003e\u003e 32;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724178,
        "id": "79c195d5-3768-404e-a7f6-4c5f79124eb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724178,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "significant 32 bits, equivalent to "
            ],
            [
              "$x \u0026 0xFFFFFFFF",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "significant 32 bits, equivalent to "
          },
          {
            "Text": "$x \u0026 0xFFFFFFFF",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022724178,
        "id": "a56744ac-95cf-4712-b87e-d40be97343a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022724178,
        "parent_id": "6b55c802-40a7-48f9-b616-330cc5ff3a78",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: In this example, "
            ],
            [
              "printf(\"%'06b\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used. It outputs the value in 6 binary digits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: In this example, "
          },
          {
            "Text": "printf(\"%'06b\")",
            "AttrFlags": 2
          },
          {
            "Text": " is used. It outputs the value in 6 binary digits."
          }
        ]
      }
    ],
    "title": "Bitwise Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}