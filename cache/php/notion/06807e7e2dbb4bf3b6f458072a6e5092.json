{
  "ID": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
  "Root": {
    "alive": true,
    "content": [
      "9f4090b1-65e2-4542-91de-d1f179f0c58a",
      "8cf0129e-788e-45f4-81c0-1d04c9ae7d5d",
      "332a2bf0-7e92-4b41-80da-9baaa52b8147",
      "b053d6ab-0a90-41ad-bf0b-41e5caa33f38",
      "32461709-7e97-43ed-bb6e-ad98be33f46e",
      "9e7e1018-2f94-48fc-9394-46b087c2ab22",
      "f302f491-cd24-4015-83e8-0bd4ad80b42b",
      "b2db9600-1edf-4cb8-8bac-67ec79b9051b",
      "3d3ddcce-e0c0-4c72-ae9e-dfe8142fec2a",
      "9c6992f5-ada8-44d5-80c7-00ced662c9d6",
      "9d029fbb-f392-49f1-a093-aeb5c930bf66",
      "ff859492-9576-4e08-a60c-0f7da10f6b83",
      "6d73b749-6810-4468-a871-ef145efe784c",
      "b9bab476-c6c6-48be-91f6-3931be98811e",
      "7ec94700-1a61-496f-bbe9-8db8a24c6c75",
      "f7b22c5f-2f34-45d6-a3a9-dcaa17925fc3",
      "bc04b721-d958-4e7e-a94c-fcf95ed5d37d",
      "a7403d3c-fd59-4f56-912f-c12f79fe8246",
      "c4da9712-ef36-4b41-ac13-1c2c246144b0",
      "0ff0a72d-fe45-4815-a8a7-81d451539a3a",
      "23a8e94c-53a1-4058-bc4e-7c9c55b5c549",
      "acdf6c10-b706-467d-b6fe-ede5ce526ce9",
      "e204e7b0-d89f-404b-9ac5-286669fc9c48",
      "a17140f6-5b0f-4ae9-8ed6-3828b73fadcb",
      "1f96b7e3-da26-4f15-a213-b91e9c176de9",
      "bfac4909-7e9f-4d90-bdc0-50444adec4c9",
      "e1e39fc8-03eb-458f-b1ec-2278c459a965",
      "206024f5-1e92-4773-a56d-a2350070af41",
      "70d202cd-624c-4eac-9a6a-2ae3f97b8652",
      "59353ebf-c6a0-4843-9755-387b4e78b07f",
      "6ef64463-c770-495f-9b77-12de06ca2367",
      "1558451c-860a-4021-bf28-eda24996f817",
      "e2b04b62-8ac7-40f5-95b8-09161c7e7560",
      "4f214b52-9f13-43a2-90dd-23bc7884c4e1",
      "7b0a260d-0aa9-4cf5-a707-e0c1cd844992",
      "6c7a9d0e-d389-4ad3-b2da-afc7b44ae7ca",
      "eb530045-dd8f-482d-95f0-2f16944f4593",
      "9b5f8279-bd71-4e82-b300-92d024d974f0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022362161,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022362161,
    "parent_id": "caabd093-67a6-454d-8e67-b40f2303905b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Class Constants"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362155,
        "id": "9f4090b1-65e2-4542-91de-d1f179f0c58a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362155,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class constants provide a mechanism for holding fixed values in a program. That is, they provide a way of giving a name (and associated compile-time checking) to a value like "
            ],
            [
              "3.14",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "\"Apple\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Class constants can only be defined with the "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword - the "
            ],
            [
              "define",
              [
                [
                  "a",
                  "http://php.net/define"
                ]
              ]
            ],
            [
              " function cannot be used in this context."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class constants provide a mechanism for holding fixed values in a program. That is, they provide a way of giving a name (and associated compile-time checking) to a value like "
          },
          {
            "Text": "3.14",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "\"Apple\"",
            "AttrFlags": 2
          },
          {
            "Text": ". Class constants can only be defined with the "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " keyword - the "
          },
          {
            "Text": "define",
            "Link": "http://php.net/define"
          },
          {
            "Text": " function cannot be used in this context."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "8cf0129e-788e-45f4-81c0-1d04c9ae7d5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As an example, it may be convenient to have a shorthand representation for the value of π throughout a program. A class with "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values provides a simple way to hold such values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As an example, it may be convenient to have a shorthand representation for the value of π throughout a program. A class with "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " values provides a simple way to hold such values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "332a2bf0-7e92-4b41-80da-9baaa52b8147",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MathValues {\n    const PI = M_PI;\n    const PHI = 1.61803;\n}\n\n$area = MathValues::PI * $radius * $radius;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MathValues {\n    const PI = M_PI;\n    const PHI = 1.61803;\n}\n\n$area = MathValues::PI * $radius * $radius;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "b053d6ab-0a90-41ad-bf0b-41e5caa33f38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class constants may be accessed by using the double colon operator (so-called the scope resolution operator) on a class, much like static variables. Unlike static variables, however, class constants have their values fixed at compile time and cannot be reassigned to (e.g. "
            ],
            [
              "MathValues::PI = 7",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would produce a fatal error)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class constants may be accessed by using the double colon operator (so-called the scope resolution operator) on a class, much like static variables. Unlike static variables, however, class constants have their values fixed at compile time and cannot be reassigned to (e.g. "
          },
          {
            "Text": "MathValues::PI = 7",
            "AttrFlags": 2
          },
          {
            "Text": " would produce a fatal error)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "32461709-7e97-43ed-bb6e-ad98be33f46e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class constants are also useful for defining things internal to a class that might need changing later (but do not change frequently enough to warrant storing in, say, a database). We can reference this internally using the "
            ],
            [
              "self",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " scope resolutor (which works in both instanced and static implementations)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class constants are also useful for defining things internal to a class that might need changing later (but do not change frequently enough to warrant storing in, say, a database). We can reference this internally using the "
          },
          {
            "Text": "self",
            "AttrFlags": 2
          },
          {
            "Text": " scope resolutor (which works in both instanced and static implementations)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "9e7e1018-2f94-48fc-9394-46b087c2ab22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Labor {\n    /** How long, in hours, does it take to build the item? */\n    const LABOR_UNITS = 0.26;\n    /** How much are we paying employees per hour? */\n    const LABOR_COST = 12.75;\n\n    public function getLaborCost($number_units) {\n         return (self::LABOR_UNITS * self::LABOR_COST) * $number_units;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Labor {\n    /** How long, in hours, does it take to build the item? */\n    const LABOR_UNITS = 0.26;\n    /** How much are we paying employees per hour? */\n    const LABOR_COST = 12.75;\n\n    public function getLaborCost($number_units) {\n         return (self::LABOR_UNITS * self::LABOR_COST) * $number_units;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "f302f491-cd24-4015-83e8-0bd4ad80b42b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class constants can only contain scalar values in versions \u003c 5.6"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class constants can only contain scalar values in versions \u003c 5.6"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362156,
        "id": "b2db9600-1edf-4cb8-8bac-67ec79b9051b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362156,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of PHP 5.6 we can use expressions with constants, meaning math statements and strings with concatenation are acceptable constants"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of PHP 5.6 we can use expressions with constants, meaning math statements and strings with concatenation are acceptable constants"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "3d3ddcce-e0c0-4c72-ae9e-dfe8142fec2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Labor {\n    /** How much are we paying employees per hour? Hourly wages * hours taken to make */\n    const LABOR_COSTS = 12.75 * 0.26;\n\n    public function getLaborCost($number_units) {\n         return self::LABOR_COSTS * $number_units;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Labor {\n    /** How much are we paying employees per hour? Hourly wages * hours taken to make */\n    const LABOR_COSTS = 12.75 * 0.26;\n\n    public function getLaborCost($number_units) {\n         return self::LABOR_COSTS * $number_units;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "9c6992f5-ada8-44d5-80c7-00ced662c9d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of PHP 7.0, constants declared with "
            ],
            [
              "define",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may now contain arrays."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of PHP 7.0, constants declared with "
          },
          {
            "Text": "define",
            "AttrFlags": 2
          },
          {
            "Text": " may now contain arrays."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "9d029fbb-f392-49f1-a093-aeb5c930bf66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "define(\"BAZ\", array('baz'));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "define(\"BAZ\", array('baz'));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "ff859492-9576-4e08-a60c-0f7da10f6b83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class constants are useful for more than just storing mathematical concepts. For example, if preparing a pie, it might be convenient to have a single "
            ],
            [
              "Pie",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class capable of taking different kinds of fruit."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class constants are useful for more than just storing mathematical concepts. For example, if preparing a pie, it might be convenient to have a single "
          },
          {
            "Text": "Pie",
            "AttrFlags": 2
          },
          {
            "Text": " class capable of taking different kinds of fruit."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "6d73b749-6810-4468-a871-ef145efe784c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Pie {\n    protected $fruit;\n\n    public function __construct($fruit) {\n        $this-\u003efruit = $fruit;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Pie {\n    protected $fruit;\n\n    public function __construct($fruit) {\n        $this-\u003efruit = $fruit;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "b9bab476-c6c6-48be-91f6-3931be98811e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can then use the "
            ],
            [
              "Pie",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class like so"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can then use the "
          },
          {
            "Text": "Pie",
            "AttrFlags": 2
          },
          {
            "Text": " class like so"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362157,
        "id": "7ec94700-1a61-496f-bbe9-8db8a24c6c75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362157,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "$pie = new Pie(\"strawberry\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "$pie = new Pie(\"strawberry\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "f7b22c5f-2f34-45d6-a3a9-dcaa17925fc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem that arises here is, when instantiating the "
            ],
            [
              "Pie",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class, no guidance is provided as to the acceptable values. For example, when making a “boysenberry” pie, it might be misspelled “boisenberry”. Furthermore, we might not support a plum pie. Instead, it would be useful to have a list of acceptable fruit types already defined somewhere it would make sense to look for them. Say a class named "
            ],
            [
              "Fruit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem that arises here is, when instantiating the "
          },
          {
            "Text": "Pie",
            "AttrFlags": 2
          },
          {
            "Text": " class, no guidance is provided as to the acceptable values. For example, when making a “boysenberry” pie, it might be misspelled “boisenberry”. Furthermore, we might not support a plum pie. Instead, it would be useful to have a list of acceptable fruit types already defined somewhere it would make sense to look for them. Say a class named "
          },
          {
            "Text": "Fruit",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "bc04b721-d958-4e7e-a94c-fcf95ed5d37d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Fruit {\n    const APPLE = \"apple\";\n    const STRAWBERRY = \"strawberry\";\n    const BOYSENBERRY = \"boysenberry\";\n}\n\n$pie = new Pie(Fruit::STRAWBERRY);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Fruit {\n    const APPLE = \"apple\";\n    const STRAWBERRY = \"strawberry\";\n    const BOYSENBERRY = \"boysenberry\";\n}\n\n$pie = new Pie(Fruit::STRAWBERRY);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "a7403d3c-fd59-4f56-912f-c12f79fe8246",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Listing the acceptable values as class constants provides a valuable hint as to the acceptable values which a method accepts. It also ensures that misspellings cannot make it past the compiler. While "
            ],
            [
              "new Pie('aple')",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "new Pie('apple')",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are both acceptable to the compiler, "
            ],
            [
              "new Pie(Fruit::APLE)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will produce a compiler error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Listing the acceptable values as class constants provides a valuable hint as to the acceptable values which a method accepts. It also ensures that misspellings cannot make it past the compiler. While "
          },
          {
            "Text": "new Pie('aple')",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "new Pie('apple')",
            "AttrFlags": 2
          },
          {
            "Text": " are both acceptable to the compiler, "
          },
          {
            "Text": "new Pie(Fruit::APLE)",
            "AttrFlags": 2
          },
          {
            "Text": " will produce a compiler error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "c4da9712-ef36-4b41-ac13-1c2c246144b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, using class constants means that the actual value of the constant may be modified in a single place, and any code using the constant automatically has the effects of the modification."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, using class constants means that the actual value of the constant may be modified in a single place, and any code using the constant automatically has the effects of the modification."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "0ff0a72d-fe45-4815-a8a7-81d451539a3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Whilst the most common method to access a class constant is "
            ],
            [
              "MyClass::CONSTANT_NAME",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it may also be accessed by:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Whilst the most common method to access a class constant is "
          },
          {
            "Text": "MyClass::CONSTANT_NAME",
            "AttrFlags": 2
          },
          {
            "Text": ", it may also be accessed by:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "23a8e94c-53a1-4058-bc4e-7c9c55b5c549",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "echo MyClass::CONSTANT;\n\n$classname = \"MyClass\";\necho $classname::CONSTANT; // As of PHP 5.3.0"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "echo MyClass::CONSTANT;\n\n$classname = \"MyClass\";\necho $classname::CONSTANT; // As of PHP 5.3.0",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362158,
        "id": "acdf6c10-b706-467d-b6fe-ede5ce526ce9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362158,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class constants in PHP are conventionally named all in uppercase with underscores as word separators, although any valid label name may be used as a class constant name."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class constants in PHP are conventionally named all in uppercase with underscores as word separators, although any valid label name may be used as a class constant name."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "e204e7b0-d89f-404b-9ac5-286669fc9c48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of PHP 7.1, class constants may now be defined with different visibilities from the default public scope. This means that both protected and private constants can now be defined to prevent class constants from unnecessarily leaking into the public scope (see http://stackoverflow.com/documentation/php/504/classes-and-objects/6471/method-and-property-visibility ). For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of PHP 7.1, class constants may now be defined with different visibilities from the default public scope. This means that both protected and private constants can now be defined to prevent class constants from unnecessarily leaking into the public scope (see http://stackoverflow.com/documentation/php/504/classes-and-objects/6471/method-and-property-visibility ). For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "a17140f6-5b0f-4ae9-8ed6-3828b73fadcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Something {\n    const PUBLIC_CONST_A = 1;\n    public const PUBLIC_CONST_B = 2;\n    protected const PROTECTED_CONST = 3;\n    private const PRIVATE_CONST = 4;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Something {\n    const PUBLIC_CONST_A = 1;\n    public const PUBLIC_CONST_B = 2;\n    protected const PROTECTED_CONST = 3;\n    private const PRIVATE_CONST = 4;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "1f96b7e3-da26-4f15-a213-b91e9c176de9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "define vs class constants"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "define vs class constants"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "bfac4909-7e9f-4d90-bdc0-50444adec4c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Although this is a valid construction:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Although this is a valid construction:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "e1e39fc8-03eb-458f-b1ec-2278c459a965",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function bar() { return 2; };\n\ndefine('BAR', bar());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function bar() { return 2; };\n\ndefine('BAR', bar());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "206024f5-1e92-4773-a56d-a2350070af41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you try to do the same with class constants, you’ll get an error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you try to do the same with class constants, you’ll get an error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "70d202cd-624c-4eac-9a6a-2ae3f97b8652",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function bar() { return 2; };\n\nclass Foo {\n    const BAR = bar(); // Error: Constant expression contains invalid operations\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function bar() { return 2; };\n\nclass Foo {\n    const BAR = bar(); // Error: Constant expression contains invalid operations\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "59353ebf-c6a0-4843-9755-387b4e78b07f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But you can do:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But you can do:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362159,
        "id": "6ef64463-c770-495f-9b77-12de06ca2367",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362159,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function bar() { return 2; };\n\ndefine('BAR', bar());\n\nclass Foo {\n    const BAR = BAR; // OK\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function bar() { return 2; };\n\ndefine('BAR', bar());\n\nclass Foo {\n    const BAR = BAR; // OK\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362160,
        "id": "1558451c-860a-4021-bf28-eda24996f817",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362160,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information, see "
            ],
            [
              "constants in the manual",
              [
                [
                  "a",
                  "http://php.net/manual/en/language.constants.php"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information, see "
          },
          {
            "Text": "constants in the manual",
            "Link": "http://php.net/manual/en/language.constants.php"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362160,
        "id": "e2b04b62-8ac7-40f5-95b8-09161c7e7560",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362160,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using ::class to retrieve class’s name"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using ::class to retrieve class’s name"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362160,
        "id": "4f214b52-9f13-43a2-90dd-23bc7884c4e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362160,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PHP 5.5 introduced the "
            ],
            [
              "::class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax to retrieve the full class name, taking namespace scope and "
            ],
            [
              "use",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements into account."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PHP 5.5 introduced the "
          },
          {
            "Text": "::class",
            "AttrFlags": 2
          },
          {
            "Text": " syntax to retrieve the full class name, taking namespace scope and "
          },
          {
            "Text": "use",
            "AttrFlags": 2
          },
          {
            "Text": " statements into account."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362160,
        "id": "7b0a260d-0aa9-4cf5-a707-e0c1cd844992",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362160,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "namespace foo;\nuse bar\\Bar;\necho json_encode(Bar::class); // \"bar\\\\Bar\"\necho json_encode(Foo::class); // \"foo\\\\Foo\"\necho json_encode(\\Foo::class); // \"Foo\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "namespace foo;\nuse bar\\Bar;\necho json_encode(Bar::class); // \"bar\\\\Bar\"\necho json_encode(Foo::class); // \"foo\\\\Foo\"\necho json_encode(\\Foo::class); // \"Foo\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362160,
        "id": "6c7a9d0e-d389-4ad3-b2da-afc7b44ae7ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362160,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above works even if the classes are not even defined (i.e. this code snippet works alone)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above works even if the classes are not even defined (i.e. this code snippet works alone)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362161,
        "id": "eb530045-dd8f-482d-95f0-2f16944f4593",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362161,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This syntax is useful for functions that require a class name. For example, it can be used with "
            ],
            [
              "class_exists",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to check a class exists. No errors will be generated regardless of return value in this snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This syntax is useful for functions that require a class name. For example, it can be used with "
          },
          {
            "Text": "class_exists",
            "AttrFlags": 2
          },
          {
            "Text": " to check a class exists. No errors will be generated regardless of return value in this snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022362161,
        "id": "9b5f8279-bd71-4e82-b300-92d024d974f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022362161,
        "parent_id": "06807e7e-2dbb-4bf3-b6f4-58072a6e5092",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class_exists(ThisClass\\Will\\NeverBe\\Loaded::class, false);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class_exists(ThisClass\\Will\\NeverBe\\Loaded::class, false);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Class Constants",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}