{
  "ID": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
  "Root": {
    "alive": true,
    "content": [
      "e4f37c40-c7a9-49dc-8618-51c75597017b",
      "7ce6374a-207d-4ed4-a4be-bf9a4d35341c",
      "3d153bf5-4226-4516-9dcc-0722de8761e7",
      "a4b54818-e1a6-464f-be8d-57ea52c3e2d4",
      "4ce06f4a-ecdd-4295-af46-036493284e11",
      "2838a66d-6028-4b11-bc4d-711940161cde",
      "951e2c0b-20e1-43ba-9e1f-78070914cd25",
      "1c82953d-f8cc-4956-bf2a-b3c37416d82f",
      "20f83c6a-fc07-48d9-ab65-675c3242f400"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022709939,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022709939,
    "parent_id": "98823712-1c98-4a43-8727-0a1d762add3b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709934,
        "id": "e4f37c40-c7a9-49dc-8618-51c75597017b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709934,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709934,
        "id": "7ce6374a-207d-4ed4-a4be-bf9a4d35341c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709934,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An operator is something that takes one or more values (or expressions, in programming jargon) and yields another value (so that the construction itself becomes an expression)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An operator is something that takes one or more values (or expressions, in programming jargon) and yields another value (so that the construction itself becomes an expression)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709934,
        "id": "3d153bf5-4226-4516-9dcc-0722de8761e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709934,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators can be grouped according to the number of values they take."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators can be grouped according to the number of values they take."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709934,
        "id": "a4b54818-e1a6-464f-be8d-57ea52c3e2d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709934,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709935,
        "id": "4ce06f4a-ecdd-4295-af46-036493284e11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709935,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators ‘operate’ or act on one (unary operators such as "
            ],
            [
              "!$a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "++$a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), two (binary operators such as "
            ],
            [
              "$a + $b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "$a \u003e\u003e $b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or three (the only ternary operator is "
            ],
            [
              "$a ? $b : $c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators ‘operate’ or act on one (unary operators such as "
          },
          {
            "Text": "!$a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "++$a",
            "AttrFlags": 2
          },
          {
            "Text": "), two (binary operators such as "
          },
          {
            "Text": "$a + $b",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "$a \u003e\u003e $b",
            "AttrFlags": 2
          },
          {
            "Text": ") or three (the only ternary operator is "
          },
          {
            "Text": "$a ? $b : $c",
            "AttrFlags": 2
          },
          {
            "Text": ") expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709935,
        "id": "2838a66d-6028-4b11-bc4d-711940161cde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709935,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operator precedence influences how operators are grouped (as if there were parentheses). The following is a list of operators in order of there precendence (operators in the second column). If multiple operators are in one row, the grouping is determined by the code order, where the first column indicates the associativity (see examples)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operator precedence influences how operators are grouped (as if there were parentheses). The following is a list of operators in order of there precendence (operators in the second column). If multiple operators are in one row, the grouping is determined by the code order, where the first column indicates the associativity (see examples)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709937,
        "id": "951e2c0b-20e1-43ba-9e1f-78070914cd25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709937,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Association | Operator ———– | –––– left | "
            ],
            [
              "-\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " none | "
            ],
            [
              "clone",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "\\[",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " right | "
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " right | "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "(float)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "(string)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "(array)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "(object)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "(bool)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " none | "
            ],
            [
              "instanceof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " right | "
            ],
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "%",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " none | "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " none | "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "===",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "!==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c=\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | | left | "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | || right | "
            ],
            [
              "??",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "? :",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " right | "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "+=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "-=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "*=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "**=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "/=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              ".=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "%=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u0026=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "|=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "^=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003c\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003e\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "xor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " left | "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Association | Operator ———– | –––– left | "
          },
          {
            "Text": "-\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": " none | "
          },
          {
            "Text": "clone",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "\\[",
            "AttrFlags": 2
          },
          {
            "Text": " right | "
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": " right | "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "(int)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "(float)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "(string)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "(array)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "(object)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "(bool)",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "@",
            "AttrFlags": 2
          },
          {
            "Text": " none | "
          },
          {
            "Text": "instanceof",
            "AttrFlags": 2
          },
          {
            "Text": " right | "
          },
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "%",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " none | "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": " none | "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "===",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "!==",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c=\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " left | | left | "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " left | || right | "
          },
          {
            "Text": "??",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "? :",
            "AttrFlags": 2
          },
          {
            "Text": " right | "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "+=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "-=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "*=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "**=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "/=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": ".=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "%=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u0026=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "|=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "^=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003c\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003e\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "and",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "xor",
            "AttrFlags": 2
          },
          {
            "Text": " left | "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709938,
        "id": "1c82953d-f8cc-4956-bf2a-b3c37416d82f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709938,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full information is at "
            ],
            [
              "Stack Overflow",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/3737139/reference-what-do-various-symbols-mean-in-php"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full information is at "
          },
          {
            "Text": "Stack Overflow",
            "Link": "http://stackoverflow.com/questions/3737139/reference-what-do-various-symbols-mean-in-php"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022709939,
        "id": "20f83c6a-fc07-48d9-ab65-675c3242f400",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022709939,
        "parent_id": "b9deb6ba-2c65-4375-b8fd-626800b8d771",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that functions and language constructs (e.g. "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") are always evaluated first, but any return value will be used according to the above precedence/associativity rules. Special care is needed if the parentheses after a language construct are omitted. E.g. "
            ],
            [
              "echo 2 . print 3 + 4;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " echo’s "
            ],
            [
              "721",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": the "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " part evaluates "
            ],
            [
              "3 + 4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", prints the outcome "
            ],
            [
              "7",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and returns "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". After that, "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is echoed, concatenated with the return value of "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that functions and language constructs (e.g. "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": ") are always evaluated first, but any return value will be used according to the above precedence/associativity rules. Special care is needed if the parentheses after a language construct are omitted. E.g. "
          },
          {
            "Text": "echo 2 . print 3 + 4;",
            "AttrFlags": 2
          },
          {
            "Text": " echo’s "
          },
          {
            "Text": "721",
            "AttrFlags": 2
          },
          {
            "Text": ": the "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": " part evaluates "
          },
          {
            "Text": "3 + 4",
            "AttrFlags": 2
          },
          {
            "Text": ", prints the outcome "
          },
          {
            "Text": "7",
            "AttrFlags": 2
          },
          {
            "Text": " and returns "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ". After that, "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": " is echoed, concatenated with the return value of "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      }
    ],
    "title": "Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}