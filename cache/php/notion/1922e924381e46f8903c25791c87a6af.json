{
  "ID": "1922e924-381e-46f8-903c-25791c87a6af",
  "Root": {
    "alive": true,
    "content": [
      "714d6e44-67db-4d01-a32b-7d7d9ce838bd",
      "88cb322e-7eb6-47a0-a331-cec33266b5a7",
      "09e89084-bb2b-485e-adcf-c641fac3c357",
      "3c837115-653c-4a4f-ba25-e4e2c42fba7d",
      "9f264144-60bc-4966-9e44-61745838c510",
      "52dd6e54-4689-447a-adf2-2c455d7cfd7c",
      "56e3691f-7d94-4bec-b44e-6bf7faa423cb",
      "6c375216-578c-4adc-82b5-ef697b221cf1",
      "eb427f8f-af08-4944-aa6a-cad80be8c08b",
      "ba992ace-ae69-4ba6-9ac3-18961422f79c",
      "a2fe4714-55a3-4496-a84a-b06a72f9e5b5",
      "af3b5f8f-6333-42d5-8a22-3f90c5803d93",
      "5216578b-ead2-4d3a-9e84-f1d50cca10f5",
      "4dc32279-6350-4657-8632-a658ce82b23b",
      "ce4f68b3-30fb-4b3f-88a8-17e65d9d875b",
      "bb51485c-0801-448a-8a23-b0068ee69b75",
      "f3edcf90-3c13-4d26-bc16-4f14b69632ae",
      "2622b4dd-8ddb-486d-bf5e-3a35d9aa8585",
      "41902e48-545c-471f-9ec8-904a6e2c13a3",
      "ccb83385-7595-4264-ab95-29e67cab82c2",
      "4b3e025d-bb70-4da6-9267-165d1db0ce9b",
      "7ee4c140-c450-4eb4-87b3-61eff4b24c6a",
      "c581bb42-ac45-4ed3-967e-18a4be721b12",
      "3e73f92e-bb87-48ff-8844-f7786b5b5212",
      "a33d4668-24bb-4c3b-92b6-563372e614f1",
      "4aa2b61b-0e29-4772-b1d1-13b79fbd8cb8",
      "bc458f1e-6f5f-4917-be79-0abede11ae5c",
      "6d898a24-b6b5-40a3-81db-1dc13232b650"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552023089144,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1922e924-381e-46f8-903c-25791c87a6af",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552023089144,
    "parent_id": "8aad07a8-ece6-477b-8cf0-8ad575a906a8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "PHPUnit Data Providers"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089135,
        "id": "714d6e44-67db-4d01-a32b-7d7d9ce838bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089135,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test methods often need data to be tested with. To test some methods completely you need to provide different data sets for every possible test condition. Of course, you can do it manually using loops, like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test methods often need data to be tested with. To test some methods completely you need to provide different data sets for every possible test condition. Of course, you can do it manually using loops, like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089138,
        "id": "88cb322e-7eb6-47a0-a331-cec33266b5a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089138,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "...\npublic function testSomething()\n{\n    $data = [...];\n    foreach($data as $dataSet) {\n       $this-\u003eassertSomething($dataSet);\n    }\n}\n..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "...\npublic function testSomething()\n{\n    $data = [...];\n    foreach($data as $dataSet) {\n       $this-\u003eassertSomething($dataSet);\n    }\n}\n...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "09e89084-bb2b-485e-adcf-c641fac3c357",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And someone can find it convenient. But there are some drawbacks of this approach. First, you’ll have to perform additional actions to extract data if your test function accepts several parameters. Second, on failure it would be difficult to distinguish the failing data set without additional messages and debugging. Third, PHPUnit provides automatic way to deal with test data sets using "
            ],
            [
              "data providers",
              [
                [
                  "a",
                  "https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And someone can find it convenient. But there are some drawbacks of this approach. First, you’ll have to perform additional actions to extract data if your test function accepts several parameters. Second, on failure it would be difficult to distinguish the failing data set without additional messages and debugging. Third, PHPUnit provides automatic way to deal with test data sets using "
          },
          {
            "Text": "data providers",
            "Link": "https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "3c837115-653c-4a4f-ba25-e4e2c42fba7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Data provider is a function, that should return data for your particular test case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Data provider is a function, that should return data for your particular test case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "9f264144-60bc-4966-9e44-61745838c510",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A data provider method must be public and either return an array of arrays or an object that implements the Iterator interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "A data provider method must be public and either return an array of arrays or an object that implements the Iterator interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "52dd6e54-4689-447a-adf2-2c455d7cfd7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use a data provider with your test, use "
            ],
            [
              "@dataProvider",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " annotation with the name of data provider function specified:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use a data provider with your test, use "
          },
          {
            "Text": "@dataProvider",
            "AttrFlags": 2
          },
          {
            "Text": " annotation with the name of data provider function specified:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "56e3691f-7d94-4bec-b44e-6bf7faa423cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n* @dataProvider dataProviderForTest\n*/\npublic function testEquals($a, $b)\n{\n    $this-\u003eassertEquals($a, $b);\n}\n\npublic function dataProviderForTest()\n{\n    return [\n        [1,1],\n        [2,2],\n        [3,2] //this will fail\n    ];\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n* @dataProvider dataProviderForTest\n*/\npublic function testEquals($a, $b)\n{\n    $this-\u003eassertEquals($a, $b);\n}\n\npublic function dataProviderForTest()\n{\n    return [\n        [1,1],\n        [2,2],\n        [3,2] //this will fail\n    ];\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "6c375216-578c-4adc-82b5-ef697b221cf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Array of arrays"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Array of arrays"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089140,
        "id": "eb427f8f-af08-4944-aa6a-cad80be8c08b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089140,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that dataProviderForTest() returns array of arrays. Each nested array has two elements and they will fill necessary parameters for testEquals() one by one. Error like this will be thrown Missing argument 2 for Test::testEquals() if there are not enough elements. PHPUnit will automatically loop through data and run tests:"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that dataProviderForTest() returns array of arrays. Each nested array has two elements and they will fill necessary parameters for testEquals() one by one. Error like this will be thrown Missing argument 2 for Test::testEquals() if there are not enough elements. PHPUnit will automatically loop through data and run tests:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "ba992ace-ae69-4ba6-9ac3-18961422f79c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public function dataProviderForTest()\n{\n    return [\n        [1,1], // [0] testEquals($a = 1, $b = 1)\n        [2,2], // [1] testEquals($a = 2, $b = 2)\n        [3,2]  // [2] There was 1 failure: 1) Test::testEquals with data set #2 (3, 4)\n    ];\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public function dataProviderForTest()\n{\n    return [\n        [1,1], // [0] testEquals($a = 1, $b = 1)\n        [2,2], // [1] testEquals($a = 2, $b = 2)\n        [3,2]  // [2] There was 1 failure: 1) Test::testEquals with data set #2 (3, 4)\n    ];\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "a2fe4714-55a3-4496-a84a-b06a72f9e5b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each data set can be "
            ],
            [
              "named",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for convenience. It will be easier to detect failing data:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each data set can be "
          },
          {
            "Text": "named",
            "AttrFlags": 1
          },
          {
            "Text": " for convenience. It will be easier to detect failing data:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "af3b5f8f-6333-42d5-8a22-3f90c5803d93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public function dataProviderForTest()\n{\n    return [\n        'Test 1' =\u003e [1,1], // [0] testEquals($a = 1, $b = 1)\n        'Test 2' =\u003e [2,2], // [1] testEquals($a = 2, $b = 2)\n        'Test 3' =\u003e [3,2]  // [2] There was 1 failure: \n                           //     1) Test::testEquals with data set \"Test 3\" (3, 4)\n    ];\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public function dataProviderForTest()\n{\n    return [\n        'Test 1' =\u003e [1,1], // [0] testEquals($a = 1, $b = 1)\n        'Test 2' =\u003e [2,2], // [1] testEquals($a = 2, $b = 2)\n        'Test 3' =\u003e [3,2]  // [2] There was 1 failure: \n                           //     1) Test::testEquals with data set \"Test 3\" (3, 4)\n    ];\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "5216578b-ead2-4d3a-9e84-f1d50cca10f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "4dc32279-6350-4657-8632-a658ce82b23b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MyIterator implements Iterator {\n    protected $array = [];\n\n    public function __construct($array) {\n        $this-\u003earray = $array;\n    }\n\n    function rewind() {\n        return reset($this-\u003earray);\n    }\n\n    function current() {\n        return current($this-\u003earray);\n    }\n\n    function key() {\n        return key($this-\u003earray);\n    }\n\n    function next() {\n        return next($this-\u003earray);\n    }\n\n    function valid() {\n        return key($this-\u003earray) !== null;\n    }\n}\n...\n\nclass Test extends TestCase\n{\n    /**\n     * @dataProvider dataProviderForTest\n     */\n    public function testEquals($a)\n    {\n        $toCompare = 0;\n\n        $this-\u003eassertEquals($a, $toCompare);\n    }\n\n    public function dataProviderForTest()\n    {\n        return new MyIterator([\n            'Test 1' =\u003e [0],\n            'Test 2' =\u003e [false],\n            'Test 3' =\u003e [null]\n        ]);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MyIterator implements Iterator {\n    protected $array = [];\n\n    public function __construct($array) {\n        $this-\u003earray = $array;\n    }\n\n    function rewind() {\n        return reset($this-\u003earray);\n    }\n\n    function current() {\n        return current($this-\u003earray);\n    }\n\n    function key() {\n        return key($this-\u003earray);\n    }\n\n    function next() {\n        return next($this-\u003earray);\n    }\n\n    function valid() {\n        return key($this-\u003earray) !== null;\n    }\n}\n...\n\nclass Test extends TestCase\n{\n    /**\n     * @dataProvider dataProviderForTest\n     */\n    public function testEquals($a)\n    {\n        $toCompare = 0;\n\n        $this-\u003eassertEquals($a, $toCompare);\n    }\n\n    public function dataProviderForTest()\n    {\n        return new MyIterator([\n            'Test 1' =\u003e [0],\n            'Test 2' =\u003e [false],\n            'Test 3' =\u003e [null]\n        ]);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "ce4f68b3-30fb-4b3f-88a8-17e65d9d875b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see, simple iterator also works."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see, simple iterator also works."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089141,
        "id": "bb51485c-0801-448a-8a23-b0068ee69b75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089141,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that even for a single parameter, data provider must return an array [$parameter]"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that even for a single parameter, data provider must return an array [$parameter]"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "f3edcf90-3c13-4d26-bc16-4f14b69632ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because if we change our "
            ],
            [
              "current()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method (which actually return data on every iteration) to this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because if we change our "
          },
          {
            "Text": "current()",
            "AttrFlags": 2
          },
          {
            "Text": " method (which actually return data on every iteration) to this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "2622b4dd-8ddb-486d-bf5e-3a35d9aa8585",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function current() {\n    return current($this-\u003earray)[0];\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function current() {\n    return current($this-\u003earray)[0];\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "41902e48-545c-471f-9ec8-904a6e2c13a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or change actual data:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or change actual data:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "ccb83385-7595-4264-ab95-29e67cab82c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "return new MyIterator([\n            'Test 1' =\u003e 0,\n            'Test 2' =\u003e false,\n            'Test 3' =\u003e null\n        ]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "return new MyIterator([\n            'Test 1' =\u003e 0,\n            'Test 2' =\u003e false,\n            'Test 3' =\u003e null\n        ]);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "4b3e025d-bb70-4da6-9267-165d1db0ce9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll get an error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll get an error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "7ee4c140-c450-4eb4-87b3-61eff4b24c6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "There was 1 warning:\n\n1) Warning\nThe data provider specified for Test::testEquals is invalid."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "There was 1 warning:\n\n1) Warning\nThe data provider specified for Test::testEquals is invalid.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "c581bb42-ac45-4ed3-967e-18a4be721b12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Of course, it is not useful to use Iterator object over a simple array. It should implement some specific logic for your case."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Of course, it is not useful to use Iterator object over a simple array. It should implement some specific logic for your case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089142,
        "id": "3e73f92e-bb87-48ff-8844-f7786b5b5212",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089142,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089143,
        "id": "a33d4668-24bb-4c3b-92b6-563372e614f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089143,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is not explicitly noted and shown in manual, but you can also use a "
            ],
            [
              "generator",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/php/1684/generators#t=201607260816011891273"
                ]
              ]
            ],
            [
              " as data provider. Note that "
            ],
            [
              "Generator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class actually implements "
            ],
            [
              "Iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is not explicitly noted and shown in manual, but you can also use a "
          },
          {
            "Text": "generator",
            "Link": "http://stackoverflow.com/documentation/php/1684/generators#t=201607260816011891273"
          },
          {
            "Text": " as data provider. Note that "
          },
          {
            "Text": "Generator",
            "AttrFlags": 2
          },
          {
            "Text": " class actually implements "
          },
          {
            "Text": "Iterator",
            "AttrFlags": 2
          },
          {
            "Text": " interface."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089143,
        "id": "4aa2b61b-0e29-4772-b1d1-13b79fbd8cb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089143,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So here’s an example of using "
            ],
            [
              "DirectoryIterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " combined with "
            ],
            [
              "generator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So here’s an example of using "
          },
          {
            "Text": "DirectoryIterator",
            "AttrFlags": 2
          },
          {
            "Text": " combined with "
          },
          {
            "Text": "generator",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089143,
        "id": "bc458f1e-6f5f-4917-be79-0abede11ae5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089143,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * @param string $file\n *\n * @dataProvider fileDataProvider\n */\npublic function testSomethingWithFiles($fileName)\n{\n    //$fileName is available here\n    \n    //do test here\n}\n\npublic function fileDataProvider()\n{\n    $directory = new DirectoryIterator('path-to-the-directory');\n\n    foreach ($directory as $file) {\n        if ($file-\u003eisFile() \u0026\u0026 $file-\u003eisReadable()) {\n            yield [$file-\u003egetPathname()]; // invoke generator here.\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * @param string $file\n *\n * @dataProvider fileDataProvider\n */\npublic function testSomethingWithFiles($fileName)\n{\n    //$fileName is available here\n    \n    //do test here\n}\n\npublic function fileDataProvider()\n{\n    $directory = new DirectoryIterator('path-to-the-directory');\n\n    foreach ($directory as $file) {\n        if ($file-\u003eisFile() \u0026\u0026 $file-\u003eisReadable()) {\n            yield [$file-\u003egetPathname()]; // invoke generator here.\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023089143,
        "id": "6d898a24-b6b5-40a3-81db-1dc13232b650",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023089143,
        "parent_id": "1922e924-381e-46f8-903c-25791c87a6af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note provider yields an array. You’ll get an invalid-data-provider warning instead."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note provider yields an array. You’ll get an invalid-data-provider warning instead."
          }
        ]
      }
    ],
    "title": "PHPUnit Data Providers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}