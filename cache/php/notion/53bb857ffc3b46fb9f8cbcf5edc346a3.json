{
  "ID": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
  "Root": {
    "alive": true,
    "content": [
      "3c07b516-5136-4a19-8be2-f2ddbd838ecf",
      "9edf84af-8417-4b95-a56c-8c322fe2a750",
      "1a88e1db-1cf8-4940-9700-3224ed681960",
      "d7404124-4911-4ada-bbcc-f1677d64ea66",
      "ba4ebe95-5d84-4f2e-b69e-8b0fea0aa16c",
      "4ea3eb7d-ac84-4410-a71f-57e8df8ff270",
      "425b908b-3fb3-4f59-9a93-e1df8aa0109b",
      "a8521bd7-b88a-4dbc-a100-b5e8871be65a",
      "77d192d9-4495-42fd-ad69-14f98a633e53",
      "04129203-7a93-4d69-b852-52915ed958f5",
      "724fca51-42a2-448d-8c2a-30b32cd720ec",
      "1de4b304-45f4-4463-951b-456ce2bb7625",
      "edb54def-e0d6-40a3-a0f4-797db54bbc3e",
      "60754cb7-4f7d-4e1b-ba5d-d51f5800126f",
      "4f35ea74-d1a1-445b-925e-1cef24b38919"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552023088768,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552023088768,
    "parent_id": "8aad07a8-ece6-477b-8cf0-8ad575a906a8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Testing class rules"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088761,
        "id": "3c07b516-5136-4a19-8be2-f2ddbd838ecf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088761,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say, we have a simple "
            ],
            [
              "LoginForm",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class with rules() method (used in login page as framework template):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say, we have a simple "
          },
          {
            "Text": "LoginForm",
            "AttrFlags": 2
          },
          {
            "Text": " class with rules() method (used in login page as framework template):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088763,
        "id": "9edf84af-8417-4b95-a56c-8c322fe2a750",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088763,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class LoginForm {\n    public $email;\n    public $rememberMe;\n    public $password;\n\n    /* rules() method returns an array with what each field has as a requirement.\n     * Login form uses email and password to authenticate user.\n     */\n    public function rules() {\n        return [\n            // Email and Password are both required\n            [['email', 'password'], 'required'],\n\n            // Email must be in email format\n            ['email', 'email'],\n\n            // rememberMe must be a boolean value\n            ['rememberMe', 'boolean'],\n\n            // Password must match this pattern (must contain only letters and numbers)\n            ['password', 'match', 'pattern' =\u003e '/^[a-z0-9]+$/i'],\n        ];\n    }\n\n    /** the validate function checks for correctness of the passed rules */\n    public function validate($rule) {\n        $success = true;\n        list($var, $type) = $rule;\n        foreach ((array) $var as $var) {\n            switch ($type) {\n                case \"required\":\n                    $success = $success \u0026\u0026 $this-\u003e$var != \"\";\n                    break;\n                case \"email\":\n                    $success = $success \u0026\u0026 filter_var($this-\u003e$var, FILTER_VALIDATE_EMAIL);\n                    break;\n                case \"boolean\":\n                    $success = $success \u0026\u0026 filter_var($this-\u003e$var, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE) !== null;\n                    break;\n                case \"match\":\n                    $success = $success \u0026\u0026 preg_match($rule[\"pattern\"], $this-\u003e$var);\n                    break;\n                default:\n                    throw new \\InvalidArgumentException(\"Invalid filter type passed\")\n            }\n        }\n        return $success;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class LoginForm {\n    public $email;\n    public $rememberMe;\n    public $password;\n\n    /* rules() method returns an array with what each field has as a requirement.\n     * Login form uses email and password to authenticate user.\n     */\n    public function rules() {\n        return [\n            // Email and Password are both required\n            [['email', 'password'], 'required'],\n\n            // Email must be in email format\n            ['email', 'email'],\n\n            // rememberMe must be a boolean value\n            ['rememberMe', 'boolean'],\n\n            // Password must match this pattern (must contain only letters and numbers)\n            ['password', 'match', 'pattern' =\u003e '/^[a-z0-9]+$/i'],\n        ];\n    }\n\n    /** the validate function checks for correctness of the passed rules */\n    public function validate($rule) {\n        $success = true;\n        list($var, $type) = $rule;\n        foreach ((array) $var as $var) {\n            switch ($type) {\n                case \"required\":\n                    $success = $success \u0026\u0026 $this-\u003e$var != \"\";\n                    break;\n                case \"email\":\n                    $success = $success \u0026\u0026 filter_var($this-\u003e$var, FILTER_VALIDATE_EMAIL);\n                    break;\n                case \"boolean\":\n                    $success = $success \u0026\u0026 filter_var($this-\u003e$var, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE) !== null;\n                    break;\n                case \"match\":\n                    $success = $success \u0026\u0026 preg_match($rule[\"pattern\"], $this-\u003e$var);\n                    break;\n                default:\n                    throw new \\InvalidArgumentException(\"Invalid filter type passed\")\n            }\n        }\n        return $success;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088764,
        "id": "1a88e1db-1cf8-4940-9700-3224ed681960",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088764,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to perform tests on this class, we use "
            ],
            [
              "Unit",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " tests (checking source code to see if it fits our expectations):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to perform tests on this class, we use "
          },
          {
            "Text": "Unit",
            "AttrFlags": 1
          },
          {
            "Text": " tests (checking source code to see if it fits our expectations):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088764,
        "id": "d7404124-4911-4ada-bbcc-f1677d64ea66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088764,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class LoginFormTest extends TestCase {\n    protected $loginForm;\n\n    // Executing code on the start of the test\n    public function setUp() {\n        $this-\u003eloginForm = new LoginForm;\n    }\n\n    // To validate our rules, we should use the validate() method\n\n    /**\n     * This method belongs to Unit test class LoginFormTest and\n     * it's testing rules that are described above.\n     */\n    public function testRuleValidation() {\n        $rules = $this-\u003eloginForm-\u003erules();\n\n        // Initialize to valid and test this\n        $this-\u003eloginForm-\u003eemail = \"valid@email.com\";\n        $this-\u003eloginForm-\u003epassword = \"password\";\n        $this-\u003eloginForm-\u003erememberMe = true;\n        $this-\u003eassertTrue($this-\u003eloginForm-\u003evalidate($rules), \"Should be valid as nothing is invalid\");\n\n        // Test email validation\n        // Since we made email to be in email format, it cannot be empty\n        $this-\u003eloginForm-\u003eemail = '';\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"Email should not be valid (empty)\");\n\n        // It does not contain \"@\" in string so it's invalid\n        $this-\u003eloginForm-\u003eemail = 'invalid.email.com';\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"Email should not be valid (invalid format)\");\n\n        // Revert email to valid for next test\n        $this-\u003eloginForm-\u003eemail = 'valid@email.com';\n\n        // Test password validation\n        // Password cannot be empty (since it's required)\n        $this-\u003eloginForm-\u003epassword = '';\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"Password should not be valid (empty)\");\n\n        // Revert password to valid for next test\n        $this-\u003eloginForm-\u003epassword = 'ThisIsMyPassword';\n\n        // Test rememberMe validation\n        $this-\u003eloginForm-\u003erememberMe = 999;\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"RememberMe should not be valid (integer type)\");\n\n        // Revert remeberMe to valid for next test\n        $this-\u003eloginForm-\u003erememberMe = true;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class LoginFormTest extends TestCase {\n    protected $loginForm;\n\n    // Executing code on the start of the test\n    public function setUp() {\n        $this-\u003eloginForm = new LoginForm;\n    }\n\n    // To validate our rules, we should use the validate() method\n\n    /**\n     * This method belongs to Unit test class LoginFormTest and\n     * it's testing rules that are described above.\n     */\n    public function testRuleValidation() {\n        $rules = $this-\u003eloginForm-\u003erules();\n\n        // Initialize to valid and test this\n        $this-\u003eloginForm-\u003eemail = \"valid@email.com\";\n        $this-\u003eloginForm-\u003epassword = \"password\";\n        $this-\u003eloginForm-\u003erememberMe = true;\n        $this-\u003eassertTrue($this-\u003eloginForm-\u003evalidate($rules), \"Should be valid as nothing is invalid\");\n\n        // Test email validation\n        // Since we made email to be in email format, it cannot be empty\n        $this-\u003eloginForm-\u003eemail = '';\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"Email should not be valid (empty)\");\n\n        // It does not contain \"@\" in string so it's invalid\n        $this-\u003eloginForm-\u003eemail = 'invalid.email.com';\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"Email should not be valid (invalid format)\");\n\n        // Revert email to valid for next test\n        $this-\u003eloginForm-\u003eemail = 'valid@email.com';\n\n        // Test password validation\n        // Password cannot be empty (since it's required)\n        $this-\u003eloginForm-\u003epassword = '';\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"Password should not be valid (empty)\");\n\n        // Revert password to valid for next test\n        $this-\u003eloginForm-\u003epassword = 'ThisIsMyPassword';\n\n        // Test rememberMe validation\n        $this-\u003eloginForm-\u003erememberMe = 999;\n        $this-\u003eassertFalse($this-\u003eloginForm-\u003evalidate($rules), \"RememberMe should not be valid (integer type)\");\n\n        // Revert remeberMe to valid for next test\n        $this-\u003eloginForm-\u003erememberMe = true;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088764,
        "id": "ba4ebe95-5d84-4f2e-b69e-8b0fea0aa16c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088764,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How exactly "
            ],
            [
              "Unit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tests can help with (excluding general examples) in here? For example, it fits very well when we get unexpected results. For example, let’s take this rule from earlier:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How exactly "
          },
          {
            "Text": "Unit",
            "AttrFlags": 2
          },
          {
            "Text": " tests can help with (excluding general examples) in here? For example, it fits very well when we get unexpected results. For example, let’s take this rule from earlier:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088764,
        "id": "4ea3eb7d-ac84-4410-a71f-57e8df8ff270",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088764,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "['password', 'match', 'pattern' =\u003e '/^[a-z0-9]+$/i'],"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "['password', 'match', 'pattern' =\u003e '/^[a-z0-9]+$/i'],",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088764,
        "id": "425b908b-3fb3-4f59-9a93-e1df8aa0109b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088764,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, if we missed one important thing and wrote this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, if we missed one important thing and wrote this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088764,
        "id": "a8521bd7-b88a-4dbc-a100-b5e8871be65a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088764,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "['password', 'match', 'pattern' =\u003e '/^[a-z0-9]$/i'],"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "['password', 'match', 'pattern' =\u003e '/^[a-z0-9]$/i'],",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088765,
        "id": "77d192d9-4495-42fd-ad69-14f98a633e53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088765,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With dozens of different rules (assuming we are using not just email and password), it’s difficult to detect mistakes. This unit test:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With dozens of different rules (assuming we are using not just email and password), it’s difficult to detect mistakes. This unit test:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088765,
        "id": "04129203-7a93-4d69-b852-52915ed958f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088765,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Initialize to valid and test this\n$this-\u003eloginForm-\u003eemail = \"valid@email.com\";\n$this-\u003eloginForm-\u003epassword = \"password\";\n$this-\u003eloginForm-\u003erememberMe = true;\n$this-\u003eassertTrue($this-\u003eloginForm-\u003evalidate($rules), \"Should be valid as nothing is invalid\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Initialize to valid and test this\n$this-\u003eloginForm-\u003eemail = \"valid@email.com\";\n$this-\u003eloginForm-\u003epassword = \"password\";\n$this-\u003eloginForm-\u003erememberMe = true;\n$this-\u003eassertTrue($this-\u003eloginForm-\u003evalidate($rules), \"Should be valid as nothing is invalid\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088765,
        "id": "724fca51-42a2-448d-8c2a-30b32cd720ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088765,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Will pass our "
            ],
            [
              "first",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " example but not "
            ],
            [
              "second",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Why? Because in 2nd example we wrote a pattern with a typo (missed "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sign), meaning it only accepts one letter/number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Will pass our "
          },
          {
            "Text": "first",
            "AttrFlags": 1
          },
          {
            "Text": " example but not "
          },
          {
            "Text": "second",
            "AttrFlags": 1
          },
          {
            "Text": ". Why? Because in 2nd example we wrote a pattern with a typo (missed "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " sign), meaning it only accepts one letter/number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088765,
        "id": "1de4b304-45f4-4463-951b-456ce2bb7625",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088765,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unit",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " tests can be run in console with command: "
            ],
            [
              "phpunit [path_to_file]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If everything is OK, we should be able to see that all tests are in "
            ],
            [
              "OK",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " state, else we will see either "
            ],
            [
              "Error",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (syntax errors) or "
            ],
            [
              "Fail",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (at least one line in that method did not pass)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unit",
            "AttrFlags": 1
          },
          {
            "Text": " tests can be run in console with command: "
          },
          {
            "Text": "phpunit [path_to_file]",
            "AttrFlags": 2
          },
          {
            "Text": ". If everything is OK, we should be able to see that all tests are in "
          },
          {
            "Text": "OK",
            "AttrFlags": 2
          },
          {
            "Text": " state, else we will see either "
          },
          {
            "Text": "Error",
            "AttrFlags": 2
          },
          {
            "Text": " (syntax errors) or "
          },
          {
            "Text": "Fail",
            "AttrFlags": 2
          },
          {
            "Text": " (at least one line in that method did not pass)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088767,
        "id": "edb54def-e0d6-40a3-a0f4-797db54bbc3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088767,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With additional parameters like "
            ],
            [
              "--coverage",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we can also see visually how many lines in backend code were tested and which passed/failed. This applies to any framework that has installed "
            ],
            [
              "PHPUnit",
              [
                [
                  "a",
                  "https://phpunit.de/"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With additional parameters like "
          },
          {
            "Text": "--coverage",
            "AttrFlags": 2
          },
          {
            "Text": " we can also see visually how many lines in backend code were tested and which passed/failed. This applies to any framework that has installed "
          },
          {
            "Text": "PHPUnit",
            "Link": "https://phpunit.de/"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088767,
        "id": "60754cb7-4f7d-4e1b-ba5d-d51f5800126f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088767,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example how "
            ],
            [
              "PHPUnit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " test looks like in console (general look, not according to this example):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example how "
          },
          {
            "Text": "PHPUnit",
            "AttrFlags": 2
          },
          {
            "Text": " test looks like in console (general look, not according to this example):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552023088767,
        "id": "4f35ea74-d1a1-445b-925e-1cef24b38919",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552023088767,
        "parent_id": "53bb857f-fc3b-46fb-9f8c-bcf5edc346a3",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/9633be08-1e30-4aa5-9573-0a3c80759269/df812d12156c4ac6330532f30ac24ce467725704.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/9633be08-1e30-4aa5-9573-0a3c80759269/df812d12156c4ac6330532f30ac24ce467725704.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F9633be08-1e30-4aa5-9573-0a3c80759269%2Fdf812d12156c4ac6330532f30ac24ce467725704.png"
      }
    ],
    "title": "Testing class rules",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}