{
  "ID": "64d1dfcf-b27a-4b60-883b-b6c4a75e3173",
  "Root": {
    "alive": true,
    "content": [
      "6ce22519-6781-4018-a572-ae280498ca09",
      "130e5ded-fdc1-4938-9f33-f054b5c90b61",
      "9207e0c6-93a8-418f-8671-5a5db199caec"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552022311149,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "64d1dfcf-b27a-4b60-883b-b6c4a75e3173",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552022311149,
    "parent_id": "feed5453-5dd0-4311-9546-05916acc717b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Autoloading replaces manual class definition loading"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022311144,
        "id": "6ce22519-6781-4018-a572-ae280498ca09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022311144,
        "parent_id": "64d1dfcf-b27a-4b60-883b-b6c4a75e3173",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// autoload.php\nspl_autoload_register(function ($class) {\n    require_once \"$class.php\";\n});\n\n// Animal.php\nclass Animal {\n    public function eats($food) {\n         echo \"Yum, $food!\";\n    }\n}\n\n// zoo.php\nrequire 'autoload.php';\n$animal = new Animal;\n$animal-\u003eeats('slop');\n\n// aquarium.php\nrequire 'autoload.php';\n$animal = new Animal;\n$animal-\u003eeats('shrimp');"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// autoload.php\nspl_autoload_register(function ($class) {\n    require_once \"$class.php\";\n});\n\n// Animal.php\nclass Animal {\n    public function eats($food) {\n         echo \"Yum, $food!\";\n    }\n}\n\n// zoo.php\nrequire 'autoload.php';\n$animal = new Animal;\n$animal-\u003eeats('slop');\n\n// aquarium.php\nrequire 'autoload.php';\n$animal = new Animal;\n$animal-\u003eeats('shrimp');",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022311147,
        "id": "130e5ded-fdc1-4938-9f33-f054b5c90b61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022311147,
        "parent_id": "64d1dfcf-b27a-4b60-883b-b6c4a75e3173",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compare this to the other examples. Notice how "
            ],
            [
              "require \"Animal.php\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was replaced with "
            ],
            [
              "require \"autoload.php\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We’re still including an external file at run-time, but rather than including a "
            ],
            [
              "specific",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " class definition we’re including logic that can include "
            ],
            [
              "any",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " class. It’s a level of indirection that eases our development. Instead of writing one "
            ],
            [
              "require",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for every class we need, we write one "
            ],
            [
              "require",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for all classes. We can replace N "
            ],
            [
              "require",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with 1 "
            ],
            [
              "require",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compare this to the other examples. Notice how "
          },
          {
            "Text": "require \"Animal.php\"",
            "AttrFlags": 2
          },
          {
            "Text": " was replaced with "
          },
          {
            "Text": "require \"autoload.php\"",
            "AttrFlags": 2
          },
          {
            "Text": ". We’re still including an external file at run-time, but rather than including a "
          },
          {
            "Text": "specific",
            "AttrFlags": 4
          },
          {
            "Text": " class definition we’re including logic that can include "
          },
          {
            "Text": "any",
            "AttrFlags": 4
          },
          {
            "Text": " class. It’s a level of indirection that eases our development. Instead of writing one "
          },
          {
            "Text": "require",
            "AttrFlags": 2
          },
          {
            "Text": " for every class we need, we write one "
          },
          {
            "Text": "require",
            "AttrFlags": 2
          },
          {
            "Text": " for all classes. We can replace N "
          },
          {
            "Text": "require",
            "AttrFlags": 2
          },
          {
            "Text": " with 1 "
          },
          {
            "Text": "require",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552022311149,
        "id": "9207e0c6-93a8-418f-8671-5a5db199caec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552022311149,
        "parent_id": "64d1dfcf-b27a-4b60-883b-b6c4a75e3173",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The magic happens with "
            ],
            [
              "spl_autoload_register",
              [
                [
                  "a",
                  "http://php.net/manual/en/function.spl-autoload-register.php"
                ]
              ]
            ],
            [
              ". This PHP function takes a closure and adds the closure to a "
            ],
            [
              "queue",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of closures. When PHP encounters a class for which it has no definition, PHP hands the class name to each closure in the queue. If the class exists after calling a closure, PHP returns to its previous business. If the class fails to exist after trying the entire queue, PHP crashes with “Class ‘Whatever’ not found.”"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The magic happens with "
          },
          {
            "Text": "spl_autoload_register",
            "Link": "http://php.net/manual/en/function.spl-autoload-register.php"
          },
          {
            "Text": ". This PHP function takes a closure and adds the closure to a "
          },
          {
            "Text": "queue",
            "AttrFlags": 4
          },
          {
            "Text": " of closures. When PHP encounters a class for which it has no definition, PHP hands the class name to each closure in the queue. If the class exists after calling a closure, PHP returns to its previous business. If the class fails to exist after trying the entire queue, PHP crashes with “Class ‘Whatever’ not found.”"
          }
        ]
      }
    ],
    "title": "Autoloading replaces manual class definition loading",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}