{
  "ID": "50c392fa-11f9-479d-9f3e-f479decc6444",
  "Root": {
    "alive": true,
    "content": [
      "b6e87c22-99f1-4094-adb5-deb9f23ba9ec",
      "a39ca778-6c8c-453c-9417-195c4f19419d",
      "6af4c4ef-1dd5-4e23-947c-f236cfc487f0",
      "06da980d-531d-4c76-b13a-9f911a004ef0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552025078123,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "50c392fa-11f9-479d-9f3e-f479decc6444",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552025078123,
    "parent_id": "c2d0558a-e174-47cc-b309-c640ed3984b2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple TCPIP server"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552025078119,
        "id": "b6e87c22-99f1-4094-adb5-deb9f23ba9ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552025078119,
        "parent_id": "50c392fa-11f9-479d-9f3e-f479decc6444",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Minimal example based on PHP manual example found here: http://php.net/manual/en/sockets.examples.php"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Minimal example based on PHP manual example found here: http://php.net/manual/en/sockets.examples.php"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552025078122,
        "id": "a39ca778-6c8c-453c-9417-195c4f19419d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552025078122,
        "parent_id": "50c392fa-11f9-479d-9f3e-f479decc6444",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Create a websocket script that listens to Port 5000 Use putty, terminal to run "
            ],
            [
              "telnet 127.0.0.1 5000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (localhost). This script replies with the message you sent (as a ping-back)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Create a websocket script that listens to Port 5000 Use putty, terminal to run "
          },
          {
            "Text": "telnet 127.0.0.1 5000",
            "AttrFlags": 2
          },
          {
            "Text": " (localhost). This script replies with the message you sent (as a ping-back)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552025078123,
        "id": "6af4c4ef-1dd5-4e23-947c-f236cfc487f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552025078123,
        "parent_id": "50c392fa-11f9-479d-9f3e-f479decc6444",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\nset_time_limit(0); // disable timeout\nob_implicit_flush(); // disable output caching \n\n// Settings    \n$address = '127.0.0.1';\n$port = 5000;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\nset_time_limit(0); // disable timeout\nob_implicit_flush(); // disable output caching \n\n// Settings    \n$address = '127.0.0.1';\n$port = 5000;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552025078123,
        "id": "06da980d-531d-4c76-b13a-9f911a004ef0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552025078123,
        "parent_id": "50c392fa-11f9-479d-9f3e-f479decc6444",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/*\n    function socket_create ( int $domain , int $type , int $protocol )\n    $domain can be AF_INET, AF_INET6 for IPV6 , AF_UNIX for Local communication protocol\n    $protocol can be SOL_TCP, SOL_UDP  (TCP/UDP)\n    @returns true on success\n*/\n\nif (($socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo \"Couldn't create socket\".socket_strerror(socket_last_error()).\"\\n\";\n}\n\n\n/*\n    socket_bind ( resource $socket , string $address [, int $port = 0 ] )\n    Bind socket to listen to address and port\n*/\n\nif (socket_bind($socket, $address, $port) === false) {\n    echo \"Bind Error \".socket_strerror(socket_last_error($sock)) .\"\\n\";\n}\n\nif (socket_listen($socket, 5) === false) {\n    echo \"Listen Failed \".socket_strerror(socket_last_error($socket)) . \"\\n\";\n}\n\ndo {\n    if (($msgsock = socket_accept($socket)) === false) {\n        echo \"Error: socket_accept: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n        break;\n    }\n\n    /* Send Welcome message. */\n    $msg = \"\\nPHP Websocket \\n\";\n\n    // Listen to user input\n    do {\n        if (false === ($buf = socket_read($msgsock, 2048, PHP_NORMAL_READ))) {\n            echo \"socket read error: \".socket_strerror(socket_last_error($msgsock)) . \"\\n\";\n            break 2;\n        }\n        if (!$buf = trim($buf)) {\n            continue;\n        }\n\n        // Reply to user with their message\n        $talkback = \"PHP: You said '$buf'.\\n\";\n        socket_write($msgsock, $talkback, strlen($talkback));\n        // Print message in terminal\n        echo \"$buf\\n\";\n        \n    } while (true);\n    socket_close($msgsock);\n} while (true);\n\nsocket_close($socket);\n?\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/*\n    function socket_create ( int $domain , int $type , int $protocol )\n    $domain can be AF_INET, AF_INET6 for IPV6 , AF_UNIX for Local communication protocol\n    $protocol can be SOL_TCP, SOL_UDP  (TCP/UDP)\n    @returns true on success\n*/\n\nif (($socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {\n    echo \"Couldn't create socket\".socket_strerror(socket_last_error()).\"\\n\";\n}\n\n\n/*\n    socket_bind ( resource $socket , string $address [, int $port = 0 ] )\n    Bind socket to listen to address and port\n*/\n\nif (socket_bind($socket, $address, $port) === false) {\n    echo \"Bind Error \".socket_strerror(socket_last_error($sock)) .\"\\n\";\n}\n\nif (socket_listen($socket, 5) === false) {\n    echo \"Listen Failed \".socket_strerror(socket_last_error($socket)) . \"\\n\";\n}\n\ndo {\n    if (($msgsock = socket_accept($socket)) === false) {\n        echo \"Error: socket_accept: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n        break;\n    }\n\n    /* Send Welcome message. */\n    $msg = \"\\nPHP Websocket \\n\";\n\n    // Listen to user input\n    do {\n        if (false === ($buf = socket_read($msgsock, 2048, PHP_NORMAL_READ))) {\n            echo \"socket read error: \".socket_strerror(socket_last_error($msgsock)) . \"\\n\";\n            break 2;\n        }\n        if (!$buf = trim($buf)) {\n            continue;\n        }\n\n        // Reply to user with their message\n        $talkback = \"PHP: You said '$buf'.\\n\";\n        socket_write($msgsock, $talkback, strlen($talkback));\n        // Print message in terminal\n        echo \"$buf\\n\";\n        \n    } while (true);\n    socket_close($msgsock);\n} while (true);\n\nsocket_close($socket);\n?\u003e",
        "code_language": "Plain Text"
      }
    ],
    "title": "Simple TCPIP server",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}