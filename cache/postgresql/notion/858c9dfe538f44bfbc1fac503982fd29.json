{
  "ID": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
  "Root": {
    "alive": true,
    "content": [
      "689cff90-d2f3-4b3f-87e6-01bad2178d5e",
      "0d1dda31-0743-4059-838d-eb37f28315d8",
      "4c222cc0-7bf8-4220-b48a-da3f9b195504",
      "a80f204e-3795-4ae4-b032-f331c0fefa68",
      "d954f416-40cf-455b-b4ca-a4dd3ed07259",
      "32721db3-c876-4dca-ba39-126066294b45",
      "0e6bf9b3-4f5b-4a47-aa3d-c33d26606fc2",
      "02c87dde-3e1c-4a84-82a6-50eabd411c82",
      "349031f9-a160-493d-a865-e94692fb99ee",
      "eb1cd7d1-fd04-4366-91c8-fd36cb52f447"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550385138162,
    "id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550480640000,
    "parent_id": "0ceb6cef-14f0-4b09-9f87-9e98af207550",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "regr slopeY X slope of the least-squares-fit linear equation determined by the X Y pairs"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138159,
        "id": "689cff90-d2f3-4b3f-87e6-01bad2178d5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138159,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To illustrate how to use regr_slope(Y,X), I applied it to a real world problem. In Java, if you don’t clean up memory properly, the garbage can get stuck and fill up the memory. You dump statistics every hour about memory utilization of different classes and load it into a postgres database for analysis."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To illustrate how to use regr_slope(Y,X), I applied it to a real world problem. In Java, if you don’t clean up memory properly, the garbage can get stuck and fill up the memory. You dump statistics every hour about memory utilization of different classes and load it into a postgres database for analysis."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138161,
        "id": "0d1dda31-0743-4059-838d-eb37f28315d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138161,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All memory leak candidates will have a trend of consuming more memory as more time passes. If you plot this trend, you would imagine a line going up and to the left:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All memory leak candidates will have a trend of consuming more memory as more time passes. If you plot this trend, you would imagine a line going up and to the left:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138161,
        "id": "4c222cc0-7bf8-4220-b48a-da3f9b195504",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138161,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "^\n|\ns   |  Legend:\ni   |  *  - data point\nz   |  -- - trend\ne   |\n(   |\nb   |                 *\ny   |                     --\nt   |                  --\ne   |             * --    *\ns   |           --\n)   |       *--      *\n|     --    *\n|  -- *\n---------------------------------------\u003e\n                  time"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "^\n|\ns   |  Legend:\ni   |  *  - data point\nz   |  -- - trend\ne   |\n(   |\nb   |                 *\ny   |                     --\nt   |                  --\ne   |             * --    *\ns   |           --\n)   |       *--      *\n|     --    *\n|  -- *\n---------------------------------------\u003e\n                  time",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "a80f204e-3795-4ae4-b032-f331c0fefa68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose you have a table containing heap dump histogram data (a mapping of classes to how much memory they consume):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose you have a table containing heap dump histogram data (a mapping of classes to how much memory they consume):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "d954f416-40cf-455b-b4ca-a4dd3ed07259",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "CREATE TABLE heap_histogram (\n    -- when the heap histogram was taken\n    histwhen timestamp without time zone NOT NULL, \n    -- the object type bytes are referring to\n    -- ex: java.util.String\n    class character varying NOT NULL,\n    -- the size in bytes used by the above class\n    bytes integer NOT NULL\n);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "CREATE TABLE heap_histogram (\n    -- when the heap histogram was taken\n    histwhen timestamp without time zone NOT NULL, \n    -- the object type bytes are referring to\n    -- ex: java.util.String\n    class character varying NOT NULL,\n    -- the size in bytes used by the above class\n    bytes integer NOT NULL\n);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "32721db3-c876-4dca-ba39-126066294b45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To compute the slope for each class, we group by over the class. The HAVING clause \u003e 0 ensures that we get only candidates with a positive slop (a line going up and to the left). We sort by the slope descending so that we get the classes with the largest rate of memory increase at the top."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To compute the slope for each class, we group by over the class. The HAVING clause \u003e 0 ensures that we get only candidates with a positive slop (a line going up and to the left). We sort by the slope descending so that we get the classes with the largest rate of memory increase at the top."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "0e6bf9b3-4f5b-4a47-aa3d-c33d26606fc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-- epoch returns seconds\nSELECT class, REGR_SLOPE(bytes,extract(epoch from histwhen)) as slope\n    FROM public.heap_histogram\n    GROUP BY class\n    HAVING REGR_SLOPE(bytes,extract(epoch from histwhen)) \u003e 0\n    ORDER BY slope DESC ;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-- epoch returns seconds\nSELECT class, REGR_SLOPE(bytes,extract(epoch from histwhen)) as slope\n    FROM public.heap_histogram\n    GROUP BY class\n    HAVING REGR_SLOPE(bytes,extract(epoch from histwhen)) \u003e 0\n    ORDER BY slope DESC ;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "02c87dde-3e1c-4a84-82a6-50eabd411c82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "349031f9-a160-493d-a865-e94692fb99ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class             |        slope         \n---------------------------+----------------------\njava.util.ArrayList       |     71.7993806279174\njava.util.HashMap         |     49.0324576155785\njava.lang.String          |     31.7770770326123\njoe.schmoe.BusinessObject |     23.2036817108056\njava.lang.ThreadLocal     |     20.9013528767851"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class             |        slope         \n---------------------------+----------------------\njava.util.ArrayList       |     71.7993806279174\njava.util.HashMap         |     49.0324576155785\njava.lang.String          |     31.7770770326123\njoe.schmoe.BusinessObject |     23.2036817108056\njava.lang.ThreadLocal     |     20.9013528767851",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550385138162,
        "id": "eb1cd7d1-fd04-4366-91c8-fd36cb52f447",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550385138162,
        "parent_id": "858c9dfe-538f-44bf-bc1f-ac503982fd29",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From the output we see that java.util.ArrayList’s memory consumption is increasing the fastest at 71.799 bytes per second and is potentially part of the memory leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From the output we see that java.util.ArrayList’s memory consumption is increasing the fastest at 71.799 bytes per second and is potentially part of the memory leak."
          }
        ]
      }
    ],
    "title": "regr slopeY X slope of the least-squares-fit linear equation determined by the X Y pairs"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}