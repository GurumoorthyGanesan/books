{
  "ID": "c554dd7b-6806-4e98-86d5-80f4dcaf8be4",
  "Root": {
    "alive": true,
    "content": [
      "193b64db-b504-4ecd-ab18-478ebbde1a27",
      "74de1c9b-0803-42f6-9a43-19725b833791",
      "3ae3650d-848b-4137-9dae-b00fa6482fa8",
      "d9c0fa44-3d11-494d-9056-9e2cdc3d0267"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550384987231,
    "id": "c554dd7b-6806-4e98-86d5-80f4dcaf8be4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550480400000,
    "parent_id": "f25f5b01-03a7-4c7d-8e93-9426f864b292",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Accessing PostgreSQL from PHP using Pomm2"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550384987229,
        "id": "193b64db-b504-4ecd-ab18-478ebbde1a27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550384987229,
        "parent_id": "c554dd7b-6806-4e98-86d5-80f4dcaf8be4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the shoulders of the low level drivers, there is "
            ],
            [
              "pomm",
              [
                [
                  "a",
                  "http://www.pomm-project.org/"
                ]
              ]
            ],
            [
              ". It proposes a modular approach, data converters, listen/notify support, database inspector and much more."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the shoulders of the low level drivers, there is "
          },
          {
            "Text": "pomm",
            "Link": "http://www.pomm-project.org/"
          },
          {
            "Text": ". It proposes a modular approach, data converters, listen/notify support, database inspector and much more."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550384987230,
        "id": "74de1c9b-0803-42f6-9a43-19725b833791",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550384987230,
        "parent_id": "c554dd7b-6806-4e98-86d5-80f4dcaf8be4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assuming, Pomm has been installed using composer, here is a complete example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assuming, Pomm has been installed using composer, here is a complete example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550384987230,
        "id": "3ae3650d-848b-4137-9dae-b00fa6482fa8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550384987230,
        "parent_id": "c554dd7b-6806-4e98-86d5-80f4dcaf8be4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003c?php\nuse PommProject\\Foundation\\Pomm;\n$loader = require __DIR__ . '/vendor/autoload.php';\n$pomm = new Pomm(['my_db' =\u003e ['dsn' =\u003e 'pgsql://user:pass@host:5432/db_name']]);\n\n// TABLE comment (\n// comment_id uuid PK, created_at timestamptz NN,\n// is_moderated bool NN default false,\n// content text NN CHECK (content !~ '^\\s+$'), author_email text NN)\n$sql = \u003c\u003c\u003cSQL\nSELECT\n  comment_id,\n  created_at,\n  is_moderated,\n  content,\n  author_email\nFROM comment\n  INNER JOIN author USING (author_email)\nWHERE\n  age(now(), created_at) \u003c $*::interval\nORDER BY created_at ASC\nSQL;\n\n// the argument will be converted as it is cast in the query above\n$comments = $pomm['my_db']\n    -\u003egetQueryManager()\n    -\u003equery($sql, [DateInterval::createFromDateString('1 day')]);\n\nif ($comments-\u003eisEmpty()) {\n    printf(\"There are no new comments since yesterday.\");\n} else {\n    foreach ($comments as $comment) {\n        printf(\n                \"%s has posted at %s. %s\\n\",\n                $comment['author_email'],\n                $comment['created_at']-\u003eformat(\"Y-m-d H:i:s\"),\n                $comment['is_moderated'] ? '[OK]' : '');\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003c?php\nuse PommProject\\Foundation\\Pomm;\n$loader = require __DIR__ . '/vendor/autoload.php';\n$pomm = new Pomm(['my_db' =\u003e ['dsn' =\u003e 'pgsql://user:pass@host:5432/db_name']]);\n\n// TABLE comment (\n// comment_id uuid PK, created_at timestamptz NN,\n// is_moderated bool NN default false,\n// content text NN CHECK (content !~ '^\\s+$'), author_email text NN)\n$sql = \u003c\u003c\u003cSQL\nSELECT\n  comment_id,\n  created_at,\n  is_moderated,\n  content,\n  author_email\nFROM comment\n  INNER JOIN author USING (author_email)\nWHERE\n  age(now(), created_at) \u003c $*::interval\nORDER BY created_at ASC\nSQL;\n\n// the argument will be converted as it is cast in the query above\n$comments = $pomm['my_db']\n    -\u003egetQueryManager()\n    -\u003equery($sql, [DateInterval::createFromDateString('1 day')]);\n\nif ($comments-\u003eisEmpty()) {\n    printf(\"There are no new comments since yesterday.\");\n} else {\n    foreach ($comments as $comment) {\n        printf(\n                \"%s has posted at %s. %s\\n\",\n                $comment['author_email'],\n                $comment['created_at']-\u003eformat(\"Y-m-d H:i:s\"),\n                $comment['is_moderated'] ? '[OK]' : '');\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550384987231,
        "id": "d9c0fa44-3d11-494d-9056-9e2cdc3d0267",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550384987231,
        "parent_id": "c554dd7b-6806-4e98-86d5-80f4dcaf8be4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pomm’s query manager module escapes query arguments to prevent SQL injection. When the arguments are cast, it also converts them from a PHP representation to valid Postgres values. The result is an iterator, it uses a cursor internally. Every row is converted on the fly, booleans to booleans, timestamps to \\DateTime etc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pomm’s query manager module escapes query arguments to prevent SQL injection. When the arguments are cast, it also converts them from a PHP representation to valid Postgres values. The result is an iterator, it uses a cursor internally. Every row is converted on the fly, booleans to booleans, timestamps to \\DateTime etc."
          }
        ]
      }
    ],
    "title": "Accessing PostgreSQL from PHP using Pomm2"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}