{
  "ID": "20d62fc0-4647-4690-bf28-8ee0fa6558d8",
  "Root": {
    "id": "20d62fc0-4647-4690-bf28-8ee0fa6558d8",
    "alive": true,
    "content": [
      "0e70f9a6-b904-4f92-b0ea-e411c15c05ee",
      "2ad26f9a-0d55-4bd1-ba46-9a73c8d671e1",
      "59511235-6e33-4830-bb6a-5d07d8d881b0",
      "fb53377d-a563-4b3e-85bb-7b23b59f1722"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549529733380,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550221380000,
    "parent_id": "3f90ad64-662d-4026-9438-8f1c858f7ce9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Syntax tree"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "id": "0e70f9a6-b904-4f92-b0ea-e411c15c05ee",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529733377,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529733377,
        "parent_id": "20d62fc0-4647-4690-bf28-8ee0fa6558d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "Syntax Tree",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is an immutable data structure representing the program as a tree of names, commands and marks (as previously configured in the editor.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "Syntax Tree",
            "AttrFlags": 1
          },
          {
            "Text": " is an immutable data structure representing the program as a tree of names, commands and marks (as previously configured in the editor.)"
          }
        ]
      },
      {
        "id": "2ad26f9a-0d55-4bd1-ba46-9a73c8d671e1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529733380,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529733380,
        "parent_id": "20d62fc0-4647-4690-bf28-8ee0fa6558d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, assume a "
            ],
            [
              "Microsoft.CodeAnalysis.Compilation",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance named "
            ],
            [
              "compilation",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has been configured. There are multiple ways to list the names of every variable declared in the loaded code. To do so naively, take all pieces of syntax in every document (the "
            ],
            [
              "DescendantNodes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method) and use Linq to select nodes that describe variable declaration:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, assume a "
          },
          {
            "Text": "Microsoft.CodeAnalysis.Compilation",
            "AttrFlags": 2
          },
          {
            "Text": " instance named "
          },
          {
            "Text": "compilation",
            "AttrFlags": 2
          },
          {
            "Text": " has been configured. There are multiple ways to list the names of every variable declared in the loaded code. To do so naively, take all pieces of syntax in every document (the "
          },
          {
            "Text": "DescendantNodes",
            "AttrFlags": 2
          },
          {
            "Text": " method) and use Linq to select nodes that describe variable declaration:"
          }
        ]
      },
      {
        "id": "59511235-6e33-4830-bb6a-5d07d8d881b0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529733380,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550221380000,
        "parent_id": "20d62fc0-4647-4690-bf28-8ee0fa6558d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "foreach (var syntaxTree in compilation.SyntaxTrees)\n{\n    var root = await syntaxTree.GetRootAsync();\n    var declaredIdentifiers = root.DescendantNodes()\n        .Where(an =\u003e an is VariableDeclaratorSyntax)\n        .Cast\u003cVariableDeclaratorSyntax\u003e()\n        .Select(vd =\u003e vd.Identifier);\n\n    foreach (var di in declaredIdentifiers)\n    {\n        Console.WriteLine(di);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "foreach (var syntaxTree in compilation.SyntaxTrees)\n{\n    var root = await syntaxTree.GetRootAsync();\n    var declaredIdentifiers = root.DescendantNodes()\n        .Where(an =\u003e an is VariableDeclaratorSyntax)\n        .Cast\u003cVariableDeclaratorSyntax\u003e()\n        .Select(vd =\u003e vd.Identifier);\n\n    foreach (var di in declaredIdentifiers)\n    {\n        Console.WriteLine(di);\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "fb53377d-a563-4b3e-85bb-7b23b59f1722",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529733380,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529733380,
        "parent_id": "20d62fc0-4647-4690-bf28-8ee0fa6558d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Every type of C# construct with a corresponding type will exist in the syntax tree. To quickly find specific types, use the "
            ],
            [
              "Syntax Visualizer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " window from Visual Studio. This will interpret the current opened document as a Roslyn syntax tree."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Every type of C# construct with a corresponding type will exist in the syntax tree. To quickly find specific types, use the "
          },
          {
            "Text": "Syntax Visualizer",
            "AttrFlags": 2
          },
          {
            "Text": " window from Visual Studio. This will interpret the current opened document as a Roslyn syntax tree."
          }
        ]
      }
    ],
    "title": "Syntax tree",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}