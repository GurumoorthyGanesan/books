{
  "ID": "ff993975-8ef4-4b69-abc9-1114a61692e2",
  "Root": {
    "alive": true,
    "content": [
      "eb6bf656-e3eb-4bd0-9fd3-dcfa0aeb7fc3",
      "fd783fb4-2a3c-44f0-a2eb-f8f6d2ce3cd3",
      "cd9c5b79-2301-4ff6-93d0-57909a2682e5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525046530,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ff993975-8ef4-4b69-abc9-1114a61692e2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549941960000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "switch"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525046527,
        "id": "eb6bf656-e3eb-4bd0-9fd3-dcfa0aeb7fc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525046527,
        "parent_id": "ff993975-8ef4-4b69-abc9-1114a61692e2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement is a control statement that selects a switch section to execute from a list of candidates. A switch statement includes one or more switch sections. Each switch section contains one or more "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " labels followed by one or more statements. If no case label contains a matching value, control is transferred to the "
            ],
            [
              "default",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " section, if there is one. Case fall-through is not supported in C#, strictly speaking. However, if 1 or more "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " labels are empty, execution will follow the code of the next "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block which contains code. This allows grouping of multiple "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " labels with the same implementation. In the following example, if "
            ],
            [
              "month",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " equals 12, the code in "
            ],
            [
              "case 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be executed since the "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " labels "
            ],
            [
              "12",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are grouped. If a "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block is not empty, a "
            ],
            [
              "break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must be present before the next "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " label, otherwise the compiler will flag an error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement is a control statement that selects a switch section to execute from a list of candidates. A switch statement includes one or more switch sections. Each switch section contains one or more "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " labels followed by one or more statements. If no case label contains a matching value, control is transferred to the "
          },
          {
            "Text": "default",
            "AttrFlags": 2
          },
          {
            "Text": " section, if there is one. Case fall-through is not supported in C#, strictly speaking. However, if 1 or more "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " labels are empty, execution will follow the code of the next "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " block which contains code. This allows grouping of multiple "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " labels with the same implementation. In the following example, if "
          },
          {
            "Text": "month",
            "AttrFlags": 2
          },
          {
            "Text": " equals 12, the code in "
          },
          {
            "Text": "case 2",
            "AttrFlags": 2
          },
          {
            "Text": " will be executed since the "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " labels "
          },
          {
            "Text": "12",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": " are grouped. If a "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " block is not empty, a "
          },
          {
            "Text": "break",
            "AttrFlags": 2
          },
          {
            "Text": " must be present before the next "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " label, otherwise the compiler will flag an error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525046529,
        "id": "fd783fb4-2a3c-44f0-a2eb-f8f6d2ce3cd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941960000,
        "parent_id": "ff993975-8ef4-4b69-abc9-1114a61692e2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "int month = DateTime.Now.Month; // this is expected to be 1-12 for Jan-Dec\n\nswitch (month)\n{\n    case 12: \n    case 1: \n    case 2:\n        Console.WriteLine(\"Winter\");\n        break;\n    case 3: \n    case 4: \n    case 5:\n        Console.WriteLine(\"Spring\");\n        break;\n    case 6: \n    case 7: \n    case 8:\n        Console.WriteLine(\"Summer\");\n        break;\n    case 9:     \n    case 10: \n    case 11:\n        Console.WriteLine(\"Autumn\");\n        break;\n    default:\n        Console.WriteLine(\"Incorrect month index\");\n        break;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "int month = DateTime.Now.Month; // this is expected to be 1-12 for Jan-Dec\n\nswitch (month)\n{\n    case 12: \n    case 1: \n    case 2:\n        Console.WriteLine(\"Winter\");\n        break;\n    case 3: \n    case 4: \n    case 5:\n        Console.WriteLine(\"Spring\");\n        break;\n    case 6: \n    case 7: \n    case 8:\n        Console.WriteLine(\"Summer\");\n        break;\n    case 9:     \n    case 10: \n    case 11:\n        Console.WriteLine(\"Autumn\");\n        break;\n    default:\n        Console.WriteLine(\"Incorrect month index\");\n        break;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525046530,
        "id": "cd9c5b79-2301-4ff6-93d0-57909a2682e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525046530,
        "parent_id": "ff993975-8ef4-4b69-abc9-1114a61692e2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can only be labeled by a value known at "
            ],
            [
              "compile time",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (e.g. "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\"str\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Enum.A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), so a "
            ],
            [
              "variable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " isn’t a valid "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " label, but a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or an "
            ],
            [
              "Enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value is (as well as any literal value)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " can only be labeled by a value known at "
          },
          {
            "Text": "compile time",
            "AttrFlags": 4
          },
          {
            "Text": " (e.g. "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\"str\"",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Enum.A",
            "AttrFlags": 2
          },
          {
            "Text": "), so a "
          },
          {
            "Text": "variable",
            "AttrFlags": 2
          },
          {
            "Text": " isn’t a valid "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " label, but a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " or an "
          },
          {
            "Text": "Enum",
            "AttrFlags": 2
          },
          {
            "Text": " value is (as well as any literal value)."
          }
        ]
      }
    ],
    "title": "switch",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}