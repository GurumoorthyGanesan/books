{
  "ID": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
  "Root": {
    "alive": true,
    "content": [
      "41d93625-8979-47eb-bb8b-ef05c63466fa",
      "aa62756c-0b06-4008-9d3b-8c5bd2100c9d",
      "12c82806-a35d-494e-b969-e9087ef67154",
      "f7a5d79d-45c2-4c6b-949a-a1797ba43210",
      "da58ea0c-4093-4144-bc14-0bce221b5f63",
      "ea6232b4-aeca-4df6-a9f8-dc5b5e1ef170",
      "b7d6dfb9-ff60-4da6-937d-4dd52c8718d2",
      "1ee9e48e-0ba4-479b-a1ef-1b883b6f45b3",
      "034dccf0-33c5-4abf-a7a6-1321904b360a",
      "65c7f5a0-e3e1-4a69-a85f-bcb8d99e9db3",
      "a4c533d5-e496-4c17-b9bc-202b91da913d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530046453,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549791660000,
    "parent_id": "7ab4d6e5-5a1c-4950-82d0-073379ffb854",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "C-Style Unions in C#"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046448,
        "id": "41d93625-8979-47eb-bb8b-ef05c63466fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046448,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Union types are used in several languages, like C-language, to contain several different types which can “overlap”. In other words, they might contain different fields all of which start at the same memory offset, even when they might have different lengths and types. This has the benefit of both saving memory, and doing automatic conversion. Think of an IP address, as an example. Internally, an IP address is represented as an integer, but sometimes we want to access the different Byte component, as in Byte1.Byte2.Byte3.Byte4. This works for any value types, be it primitives like Int32 or long, or for other structs that you define yourself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Union types are used in several languages, like C-language, to contain several different types which can “overlap”. In other words, they might contain different fields all of which start at the same memory offset, even when they might have different lengths and types. This has the benefit of both saving memory, and doing automatic conversion. Think of an IP address, as an example. Internally, an IP address is represented as an integer, but sometimes we want to access the different Byte component, as in Byte1.Byte2.Byte3.Byte4. This works for any value types, be it primitives like Int32 or long, or for other structs that you define yourself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046450,
        "id": "aa62756c-0b06-4008-9d3b-8c5bd2100c9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046450,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can achieve the same effect in C# by using Explicit Layout Structs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can achieve the same effect in C# by using Explicit Layout Structs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "12c82806-a35d-494e-b969-e9087ef67154",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Runtime.InteropServices;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.Runtime.InteropServices;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "f7a5d79d-45c2-4c6b-949a-a1797ba43210",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// The struct needs to be annotated as \"Explicit Layout\"\n[StructLayout(LayoutKind.Explicit)]\nstruct IpAddress\n{\n    // The \"FieldOffset\" means that this Integer starts, an offset in bytes.\n    // sizeof(int) 4, sizeof(byte) = 1\n    [FieldOffset(0)] public int Address;\n    [FieldOffset(0)] public byte Byte1;\n    [FieldOffset(1)] public byte Byte2;\n    [FieldOffset(2)] public byte Byte3;\n    [FieldOffset(3)] public byte Byte4;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// The struct needs to be annotated as \"Explicit Layout\"\n[StructLayout(LayoutKind.Explicit)]\nstruct IpAddress\n{\n    // The \"FieldOffset\" means that this Integer starts, an offset in bytes.\n    // sizeof(int) 4, sizeof(byte) = 1\n    [FieldOffset(0)] public int Address;\n    [FieldOffset(0)] public byte Byte1;\n    [FieldOffset(1)] public byte Byte2;\n    [FieldOffset(2)] public byte Byte3;\n    [FieldOffset(3)] public byte Byte4;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "da58ea0c-4093-4144-bc14-0bce221b5f63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public IpAddress(int address) : this()\n    {\n        // When we init the Int, the Bytes will change too.\n        Address = address;\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public IpAddress(int address) : this()\n    {\n        // When we init the Int, the Bytes will change too.\n        Address = address;\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "ea6232b4-aeca-4df6-a9f8-dc5b5e1ef170",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Now we can use the explicit layout to access the \n    // bytes separately, without doing any conversion.\n    public override string ToString() =\u003e $\"{Byte1}.{Byte2}.{Byte3}.{Byte4}\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Now we can use the explicit layout to access the \n    // bytes separately, without doing any conversion.\n    public override string ToString() =\u003e $\"{Byte1}.{Byte2}.{Byte3}.{Byte4}\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "b7d6dfb9-ff60-4da6-937d-4dd52c8718d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Having defined out Struct in this way, we can use it as we would use a Union in C. For example, let’s create an IP address as a Random Integer and then modify the first token in the address to ‘100’, by changing it from ‘A.B.C.D’ to ‘100.B.C.D’:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Having defined out Struct in this way, we can use it as we would use a Union in C. For example, let’s create an IP address as a Random Integer and then modify the first token in the address to ‘100’, by changing it from ‘A.B.C.D’ to ‘100.B.C.D’:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "1ee9e48e-0ba4-479b-a1ef-1b883b6f45b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var ip = new IpAddress(new Random().Next());\nConsole.WriteLine($\"{ip} = {ip.Address}\");\nip.Byte1 = 100;\nConsole.WriteLine($\"{ip} = {ip.Address}\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var ip = new IpAddress(new Random().Next());\nConsole.WriteLine($\"{ip} = {ip.Address}\");\nip.Byte1 = 100;\nConsole.WriteLine($\"{ip} = {ip.Address}\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "034dccf0-33c5-4abf-a7a6-1321904b360a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046451,
        "id": "65c7f5a0-e3e1-4a69-a85f-bcb8d99e9db3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046451,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "75.49.5.32 = 537211211\n100.49.5.32 = 537211236"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "75.49.5.32 = 537211211\n100.49.5.32 = 537211236",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530046453,
        "id": "a4c533d5-e496-4c17-b9bc-202b91da913d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530046453,
        "parent_id": "ee2a75b5-d932-431e-a0fa-2f2270c2bdd5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "View Demo",
              [
                [
                  "a",
                  "https://dotnetfiddle.net/CnrgBi"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "View Demo",
            "Link": "https://dotnetfiddle.net/CnrgBi"
          }
        ]
      }
    ],
    "title": "C-Style Unions in C#",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}