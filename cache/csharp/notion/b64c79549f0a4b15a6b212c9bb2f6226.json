{
  "ID": "b64c7954-9f0a-4b15-a6b2-12c9bb2f6226",
  "Root": {
    "alive": true,
    "content": [
      "895f6c5f-c42f-441a-9b12-9fe423e72de4",
      "cdf85992-a6a7-46fc-9ab2-b3984150785b",
      "9b4fa243-0005-472a-ae8f-3ad8c6ef33a9",
      "f6595ca0-4a94-4cd9-b699-564c522c8519"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524915225,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b64c7954-9f0a-4b15-a6b2-12c9bb2f6226",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549939740000,
    "parent_id": "28ea2117-40fd-45d0-994d-634e6ddcd552",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Calling virtual methods in constructor"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524915221,
        "id": "895f6c5f-c42f-441a-9b12-9fe423e72de4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524915221,
        "parent_id": "b64c7954-9f0a-4b15-a6b2-12c9bb2f6226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike C++ in C# you can call a virtual method from class constructor (OK, you can also in C++ but behavior at first is surprising). For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike C++ in C# you can call a virtual method from class constructor (OK, you can also in C++ but behavior at first is surprising). For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524915224,
        "id": "cdf85992-a6a7-46fc-9ab2-b3984150785b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549939740000,
        "parent_id": "b64c7954-9f0a-4b15-a6b2-12c9bb2f6226",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "abstract class Base\n{\n    protected Base()\n    {\n        _obj = CreateAnother();\n    }\n\n    protected virtual AnotherBase CreateAnother()\n    {\n        return new AnotherBase();\n    }\n\n    private readonly AnotherBase _obj;\n}\n\nsealed class Derived : Base\n{\n    public Derived() { }\n\n    protected override AnotherBase CreateAnother()\n    {\n        return new AnotherDerived();\n    }\n}\n\nvar test = new Derived();\n// test._obj is AnotherDerived"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "abstract class Base\n{\n    protected Base()\n    {\n        _obj = CreateAnother();\n    }\n\n    protected virtual AnotherBase CreateAnother()\n    {\n        return new AnotherBase();\n    }\n\n    private readonly AnotherBase _obj;\n}\n\nsealed class Derived : Base\n{\n    public Derived() { }\n\n    protected override AnotherBase CreateAnother()\n    {\n        return new AnotherDerived();\n    }\n}\n\nvar test = new Derived();\n// test._obj is AnotherDerived",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524915224,
        "id": "9b4fa243-0005-472a-ae8f-3ad8c6ef33a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524915224,
        "parent_id": "b64c7954-9f0a-4b15-a6b2-12c9bb2f6226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you come from a C++ background this is surprising, base class constructor already sees derived class virtual method table!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you come from a C++ background this is surprising, base class constructor already sees derived class virtual method table!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524915224,
        "id": "f6595ca0-4a94-4cd9-b699-564c522c8519",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524915224,
        "parent_id": "b64c7954-9f0a-4b15-a6b2-12c9bb2f6226",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be careful",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": derived class may not been fully initialized yet (its constructor will be executed after base class constructor) and this technique is dangerous (there is also a StyleCop warning for this). Usually this is regarded as bad practice."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be careful",
            "AttrFlags": 1
          },
          {
            "Text": ": derived class may not been fully initialized yet (its constructor will be executed after base class constructor) and this technique is dangerous (there is also a StyleCop warning for this). Usually this is regarded as bad practice."
          }
        ]
      }
    ],
    "title": "Calling virtual methods in constructor",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}