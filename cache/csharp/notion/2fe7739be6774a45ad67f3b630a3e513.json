{
  "ID": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
  "Root": {
    "id": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
    "alive": true,
    "content": [
      "3ce29007-6017-4042-8436-b71d6fabff0a",
      "f42c932e-a713-48cb-ab03-5372c4a7d6a2",
      "d6bffebe-b218-4735-82da-8a3bab3d3fb9",
      "717d9068-7d11-4b9f-9ba4-333038948528",
      "a97e4de0-dbf0-4f57-a3bc-00b2dd6e5f2f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527789506,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550205060000,
    "parent_id": "97d7d0bc-7873-4d24-b89e-70a0d8483664",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using a BackgroundWorker to complete a task."
        ]
      ]
    },
    "type": "page",
    "version": 22,
    "content_resolved": [
      {
        "id": "3ce29007-6017-4042-8436-b71d6fabff0a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527789502,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527789502,
        "parent_id": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example demonstrates the use of a BackgroundWorker to update a WinForms ProgressBar. The backgroundWorker will update the value of the progress bar without blocking the UI thread, thus showing a reactive UI while work is done in the background."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example demonstrates the use of a BackgroundWorker to update a WinForms ProgressBar. The backgroundWorker will update the value of the progress bar without blocking the UI thread, thus showing a reactive UI while work is done in the background."
          }
        ]
      },
      {
        "id": "f42c932e-a713-48cb-ab03-5372c4a7d6a2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527789504,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550205060000,
        "parent_id": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "namespace BgWorkerExample\n{\n    public partial class Form1 : Form\n\t\t{\n\n\t    // a new instance of a backgroundWorker is created.\n\t    BackgroundWorker bgWorker = new BackgroundWorker();\n\t    \n\t    public Form1()\n\t    {\n\t        InitializeComponent();\n\t\n\t        prgProgressBar.Step = 1;\n\t\n\t        //this assigns event handlers for the backgroundWorker\n\t        bgWorker.DoWork += bgWorker_DoWork;\n\t        bgWorker.RunWorkerCompleted += bgWorker_WorkComplete;\n\t\n\t        //tell the backgroundWorker to raise the \"DoWork\" event, thus starting it.\n\t        //Check to make sure the background worker is not already running.\n\t        if(!bgWorker.IsBusy)\n\t            bgWorker.RunWorkerAsync();        \n\t    }\n\t\n\t    private void bgWorker_DoWork(object sender, DoWorkEventArgs e)\n\t    {\n\t        //this is the method that the backgroundworker will perform on in the background thread.\n\t        /* One thing to note! A try catch is not necessary as any exceptions will terminate the backgroundWorker and report \n\t          the error to the \"RunWorkerCompleted\" event */\n\t        CountToY();    \n\t    }\n\t\n\t    private void bgWorker_WorkComplete(object sender, RunWorkerCompletedEventArgs e)\n\t    {\n\t        //e.Error will contain any exceptions caught by the backgroundWorker\n\t        if (e.Error != null)\n\t        {\n\t            MessageBox.Show(e.Error.Message);\n\t        }\n\t        else\n\t        {\n\t            MessageBox.Show(\"Task Complete!\");\n\t            prgProgressBar.Value = 0;\n\t        }\n\t    }\n\t\n\t    // example method to perform a \"long\" running task.\n\t    private void CountToY()\n\t    {\n\t        int x = 0;\n\t\n\t        int maxProgress = 100;\n\t        prgProgressBar.Maximum = maxProgress;\n\t        \n\t\n\t        while (x \u003c maxProgress)\n\t        {\n\t            System.Threading.Thread.Sleep(50);\n\t            Invoke(new Action(() =\u003e { prgProgressBar.PerformStep(); }));\n\t            x += 1;\n\t        }\n\t    }\n\t }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 31,
        "code": "namespace BgWorkerExample\n{\n    public partial class Form1 : Form\n\t\t{\n\n\t    // a new instance of a backgroundWorker is created.\n\t    BackgroundWorker bgWorker = new BackgroundWorker();\n\t    \n\t    public Form1()\n\t    {\n\t        InitializeComponent();\n\t\n\t        prgProgressBar.Step = 1;\n\t\n\t        //this assigns event handlers for the backgroundWorker\n\t        bgWorker.DoWork += bgWorker_DoWork;\n\t        bgWorker.RunWorkerCompleted += bgWorker_WorkComplete;\n\t\n\t        //tell the backgroundWorker to raise the \"DoWork\" event, thus starting it.\n\t        //Check to make sure the background worker is not already running.\n\t        if(!bgWorker.IsBusy)\n\t            bgWorker.RunWorkerAsync();        \n\t    }\n\t\n\t    private void bgWorker_DoWork(object sender, DoWorkEventArgs e)\n\t    {\n\t        //this is the method that the backgroundworker will perform on in the background thread.\n\t        /* One thing to note! A try catch is not necessary as any exceptions will terminate the backgroundWorker and report \n\t          the error to the \"RunWorkerCompleted\" event */\n\t        CountToY();    \n\t    }\n\t\n\t    private void bgWorker_WorkComplete(object sender, RunWorkerCompletedEventArgs e)\n\t    {\n\t        //e.Error will contain any exceptions caught by the backgroundWorker\n\t        if (e.Error != null)\n\t        {\n\t            MessageBox.Show(e.Error.Message);\n\t        }\n\t        else\n\t        {\n\t            MessageBox.Show(\"Task Complete!\");\n\t            prgProgressBar.Value = 0;\n\t        }\n\t    }\n\t\n\t    // example method to perform a \"long\" running task.\n\t    private void CountToY()\n\t    {\n\t        int x = 0;\n\t\n\t        int maxProgress = 100;\n\t        prgProgressBar.Maximum = maxProgress;\n\t        \n\t\n\t        while (x \u003c maxProgress)\n\t        {\n\t            System.Threading.Thread.Sleep(50);\n\t            Invoke(new Action(() =\u003e { prgProgressBar.PerformStep(); }));\n\t            x += 1;\n\t        }\n\t    }\n\t }\n}",
        "code_language": "C#"
      },
      {
        "id": "d6bffebe-b218-4735-82da-8a3bab3d3fb9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527789505,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527789505,
        "parent_id": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result is the following…",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result is the following…",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "717d9068-7d11-4b9f-9ba4-333038948528",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527789506,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527789506,
        "parent_id": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/xGryX.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/xGryX.png",
        "image_url": "http://i.stack.imgur.com/xGryX.png"
      },
      {
        "id": "a97e4de0-dbf0-4f57-a3bc-00b2dd6e5f2f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527789506,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527789506,
        "parent_id": "2fe7739b-e677-4a45-ad67-f3b630a3e513",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/CRarn.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/CRarn.png",
        "image_url": "http://i.stack.imgur.com/CRarn.png"
      }
    ],
    "title": "Using a BackgroundWorker to complete a task.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}