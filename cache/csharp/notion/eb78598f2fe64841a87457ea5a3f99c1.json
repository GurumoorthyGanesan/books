{
  "ID": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
  "Root": {
    "alive": true,
    "content": [
      "08ef6186-c618-41f8-b297-b113c4e265f1",
      "4886aafa-fda0-4998-9325-2a391025da3e",
      "3f49c288-227c-4895-a430-fd8e0ef1efd7",
      "5dc1f178-ac23-459d-bfa5-cde427112143",
      "dd14dc8e-5c2e-4181-bf74-70551078767b",
      "aaa921c5-5661-4daa-80ec-07d526e13d90",
      "20084884-5090-4a84-b7a6-181d57ee69b5",
      "9685a6a6-e5a6-4c45-82c5-80fc8ef69918",
      "dfb50b44-74d3-4a2a-914c-485d34a048d9",
      "041ce4ae-1128-49cb-b66d-6d9c72c9c911",
      "81177350-70c2-4bf0-b5ef-6c78a9d98b6f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549526093353,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550126460000,
    "parent_id": "a34c1078-f01c-44b1-b468-522f804fbc2d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Enumerating the Enumerable"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093345,
        "id": "08ef6186-c618-41f8-b297-b113c4e265f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093345,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The IEnumerable\u003cT\u003e interface is the base interface for all generic enumerators and is a quintessential part of understanding LINQ. At its core, it represents the sequence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The IEnumerable\u003cT\u003e interface is the base interface for all generic enumerators and is a quintessential part of understanding LINQ. At its core, it represents the sequence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093350,
        "id": "4886aafa-fda0-4998-9325-2a391025da3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093350,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This underlying interface is inherited by all of the generic collections, such as "
            ],
            [
              "Collection\u003cT\u003e",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/ms132397(v=vs.110).aspx"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Array",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/system.array(v=vs.110).aspx"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "List\u003cT\u003e",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Dictionary\u003cTKey, TValue\u003e Class",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.110).aspx"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "HashSet\u003cT\u003e",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/bb359438(v=vs.110).aspx"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This underlying interface is inherited by all of the generic collections, such as "
          },
          {
            "Text": "Collection\u003cT\u003e",
            "Link": "https://msdn.microsoft.com/en-us/library/ms132397(v=vs.110).aspx"
          },
          {
            "Text": ", "
          },
          {
            "Text": "Array",
            "Link": "https://msdn.microsoft.com/en-us/library/system.array(v=vs.110).aspx"
          },
          {
            "Text": ", "
          },
          {
            "Text": "List\u003cT\u003e",
            "Link": "https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx"
          },
          {
            "Text": ", "
          },
          {
            "Text": "Dictionary\u003cTKey, TValue\u003e Class",
            "Link": "https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.110).aspx"
          },
          {
            "Text": ", and "
          },
          {
            "Text": "HashSet\u003cT\u003e",
            "Link": "https://msdn.microsoft.com/en-us/library/bb359438(v=vs.110).aspx"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093351,
        "id": "3f49c288-227c-4895-a430-fd8e0ef1efd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093351,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to representing the sequence, any class that inherits from IEnumerable\u003cT\u003e must provide an IEnumerator\u003cT\u003e. The enumerator exposes the iterator for the enumerable, and these two interconnected interfaces and ideas are the source of the saying “enumerate the enumerable”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to representing the sequence, any class that inherits from IEnumerable\u003cT\u003e must provide an IEnumerator\u003cT\u003e. The enumerator exposes the iterator for the enumerable, and these two interconnected interfaces and ideas are the source of the saying “enumerate the enumerable”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093351,
        "id": "5dc1f178-ac23-459d-bfa5-cde427112143",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093351,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“Enumerating the enumerable” is an important phrase. The enumerable is simply a structure for how to iterate, it does not hold any materialized objects. For example, when sorting, an enumerable may hold the criteria of the field to sort, but using "
            ],
            [
              ".OrderBy()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in itself will return an IEnumerable\u003cT\u003e which only knows "
            ],
            [
              "how",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to sort. Using a call which will materialize the objects, as in iterate the set, is known as enumerating (for example "
            ],
            [
              ".ToList()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). The enumeration process will use the the enumerable definition of "
            ],
            [
              "how",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in order to move through the series and return the relevant objects (in order, filtered, projected, etc.)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "“Enumerating the enumerable” is an important phrase. The enumerable is simply a structure for how to iterate, it does not hold any materialized objects. For example, when sorting, an enumerable may hold the criteria of the field to sort, but using "
          },
          {
            "Text": ".OrderBy()",
            "AttrFlags": 2
          },
          {
            "Text": " in itself will return an IEnumerable\u003cT\u003e which only knows "
          },
          {
            "Text": "how",
            "AttrFlags": 4
          },
          {
            "Text": " to sort. Using a call which will materialize the objects, as in iterate the set, is known as enumerating (for example "
          },
          {
            "Text": ".ToList()",
            "AttrFlags": 2
          },
          {
            "Text": "). The enumeration process will use the the enumerable definition of "
          },
          {
            "Text": "how",
            "AttrFlags": 4
          },
          {
            "Text": " in order to move through the series and return the relevant objects (in order, filtered, projected, etc.)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093352,
        "id": "dd14dc8e-5c2e-4181-bf74-70551078767b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093352,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Only once the enumerable has been enumerated does it cause the materialization of the objects, which is when metrics like "
            ],
            [
              "time complexity",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Time_complexity"
                ]
              ]
            ],
            [
              " (how long it should take related to series size) and spacial complexity (how much space it should use related to series size) can be measured."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Only once the enumerable has been enumerated does it cause the materialization of the objects, which is when metrics like "
          },
          {
            "Text": "time complexity",
            "Link": "https://en.wikipedia.org/wiki/Time_complexity"
          },
          {
            "Text": " (how long it should take related to series size) and spacial complexity (how much space it should use related to series size) can be measured."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093352,
        "id": "aaa921c5-5661-4daa-80ec-07d526e13d90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093352,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating your own class that inherits from IEnumerable\u003cT\u003e can be a little complicated depending on the underlying series that needs to be enumerable. In general it is best to use one of the existing generic collections. That said, it is also possible to inherit from the IEnumerable\u003cT\u003e interface without having a defined array as the underlying structure."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating your own class that inherits from IEnumerable\u003cT\u003e can be a little complicated depending on the underlying series that needs to be enumerable. In general it is best to use one of the existing generic collections. That said, it is also possible to inherit from the IEnumerable\u003cT\u003e interface without having a defined array as the underlying structure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093352,
        "id": "20084884-5090-4a84-b7a6-181d57ee69b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093352,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, using the Fibonacci series as the underlying sequence. Note that the call to "
            ],
            [
              "Where",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " simply builds an "
            ],
            [
              "IEnumerable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and it is not until a call to enumerate that enumerable is made that any of the values are materialized."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, using the Fibonacci series as the underlying sequence. Note that the call to "
          },
          {
            "Text": "Where",
            "AttrFlags": 2
          },
          {
            "Text": " simply builds an "
          },
          {
            "Text": "IEnumerable",
            "AttrFlags": 2
          },
          {
            "Text": ", and it is not until a call to enumerate that enumerable is made that any of the values are materialized."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093352,
        "id": "9685a6a6-e5a6-4c45-82c5-80fc8ef69918",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549626720000,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "void Main()\n{\n    Fibonacci Fibo = new Fibonacci();\n    IEnumerable\u003clong\u003e quadrillionplus = Fibo.Where(i =\u003e i \u003e 1000000000000);\n    Console.WriteLine(\"Enumerable built\");\n    Console.WriteLine(quadrillionplus.Take(2).Sum());\n    Console.WriteLine(quadrillionplus.Skip(2).First());\n\n    IEnumerable\u003clong\u003e fibMod612 = Fibo.OrderBy(i =\u003e i % 612);\n    Console.WriteLine(\"Enumerable built\");\n    Console.WriteLine(fibMod612.First());//smallest divisible by 612\n}\n\npublic class Fibonacci : IEnumerable\u003clong\u003e\n{\n    private int max = 90;\n\n    //Enumerator called typically from foreach\n    public IEnumerator GetEnumerator() {\n        long n0 = 1;\n        long n1 = 1;\n        Console.WriteLine(\"Enumerating the Enumerable\");\n        for(int i = 0; i \u003c max; i++){\n            yield return n0+n1;\n            n1 += n0;\n            n0 = n1-n0;\n        }\n    }\n    \n    //Enumerable called typically from linq\n    IEnumerator\u003clong\u003e IEnumerable\u003clong\u003e.GetEnumerator() {\n        long n0 = 1;\n        long n1 = 1;\n        Console.WriteLine(\"Enumerating the Enumerable\");\n        for(int i = 0; i \u003c max; i++){\n            yield return n0+n1;\n            n1 += n0;\n            n0 = n1-n0;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void Main()\n{\n    Fibonacci Fibo = new Fibonacci();\n    IEnumerable\u003clong\u003e quadrillionplus = Fibo.Where(i =\u003e i \u003e 1000000000000);\n    Console.WriteLine(\"Enumerable built\");\n    Console.WriteLine(quadrillionplus.Take(2).Sum());\n    Console.WriteLine(quadrillionplus.Skip(2).First());\n\n    IEnumerable\u003clong\u003e fibMod612 = Fibo.OrderBy(i =\u003e i % 612);\n    Console.WriteLine(\"Enumerable built\");\n    Console.WriteLine(fibMod612.First());//smallest divisible by 612\n}\n\npublic class Fibonacci : IEnumerable\u003clong\u003e\n{\n    private int max = 90;\n\n    //Enumerator called typically from foreach\n    public IEnumerator GetEnumerator() {\n        long n0 = 1;\n        long n1 = 1;\n        Console.WriteLine(\"Enumerating the Enumerable\");\n        for(int i = 0; i \u003c max; i++){\n            yield return n0+n1;\n            n1 += n0;\n            n0 = n1-n0;\n        }\n    }\n    \n    //Enumerable called typically from linq\n    IEnumerator\u003clong\u003e IEnumerable\u003clong\u003e.GetEnumerator() {\n        long n0 = 1;\n        long n1 = 1;\n        Console.WriteLine(\"Enumerating the Enumerable\");\n        for(int i = 0; i \u003c max; i++){\n            yield return n0+n1;\n            n1 += n0;\n            n0 = n1-n0;\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093352,
        "id": "dfb50b44-74d3-4a2a-914c-485d34a048d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093352,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093352,
        "id": "041ce4ae-1128-49cb-b66d-6d9c72c9c911",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093352,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Enumerable built\nEnumerating the Enumerable\n4052739537881\nEnumerating the Enumerable\n4052739537881\nEnumerable built\nEnumerating the Enumerable\n14930352"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Enumerable built\nEnumerating the Enumerable\n4052739537881\nEnumerating the Enumerable\n4052739537881\nEnumerable built\nEnumerating the Enumerable\n14930352",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526093353,
        "id": "81177350-70c2-4bf0-b5ef-6c78a9d98b6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526093353,
        "parent_id": "eb78598f-2fe6-4841-a874-57ea5a3f99c1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The strength in the second set (the fibMod612) is that even though we made the call to order our entire set of Fibonacci numbers, since only one value was taken using "
            ],
            [
              ".First()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the time complexity was O(n) as only 1 value needed to be compared during the ordering algorithm’s execution. This is because our enumerator only asked for 1 value, and so the entire enumerable did not have to be materialized. Had we used "
            ],
            [
              ".Take(5)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              ".First()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the enumerator would have asked for 5 values, and at most 5 values would need to be materialized. Compared to needing to order an entire set "
            ],
            [
              "and then",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " take the first 5 values, the principle of saves a lot of execution time and space."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The strength in the second set (the fibMod612) is that even though we made the call to order our entire set of Fibonacci numbers, since only one value was taken using "
          },
          {
            "Text": ".First()",
            "AttrFlags": 2
          },
          {
            "Text": " the time complexity was O(n) as only 1 value needed to be compared during the ordering algorithm’s execution. This is because our enumerator only asked for 1 value, and so the entire enumerable did not have to be materialized. Had we used "
          },
          {
            "Text": ".Take(5)",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": ".First()",
            "AttrFlags": 2
          },
          {
            "Text": " the enumerator would have asked for 5 values, and at most 5 values would need to be materialized. Compared to needing to order an entire set "
          },
          {
            "Text": "and then",
            "AttrFlags": 4
          },
          {
            "Text": " take the first 5 values, the principle of saves a lot of execution time and space."
          }
        ]
      }
    ],
    "title": "Enumerating the Enumerable",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}