{
  "ID": "ad944b6b-9ae6-4b8d-b18b-09405ae09de4",
  "Root": {
    "id": "ad944b6b-9ae6-4b8d-b18b-09405ae09de4",
    "alive": true,
    "content": [
      "574489ae-67cb-4b93-b961-b26a451fe43f",
      "1098c019-3b28-4c48-84a6-33b2b856072a",
      "02bf41f6-af1f-48b9-9cd5-229d2969a4cb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525882816,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550113500000,
    "parent_id": "f800e038-5163-4461-bc72-3fe658228e37",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Anonymous method"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "574489ae-67cb-4b93-b961-b26a451fe43f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525882813,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525882813,
        "parent_id": "ad944b6b-9ae6-4b8d-b18b-09405ae09de4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Anonymous methods provide a technique to pass a code block as a delegate parameter. They are methods with a body, but no name."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Anonymous methods provide a technique to pass a code block as a delegate parameter. They are methods with a body, but no name."
          }
        ]
      },
      {
        "id": "1098c019-3b28-4c48-84a6-33b2b856072a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525882815,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113500000,
        "parent_id": "ad944b6b-9ae6-4b8d-b18b-09405ae09de4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "delegate int IntOp(int lhs, int rhs);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "delegate int IntOp(int lhs, int rhs);",
        "code_language": "C#"
      },
      {
        "id": "02bf41f6-af1f-48b9-9cd5-229d2969a4cb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525882816,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113500000,
        "parent_id": "ad944b6b-9ae6-4b8d-b18b-09405ae09de4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "class Program\n{\n    static void Main(string[] args)\n    {\n        // C# 2.0 definition\n        IntOp add = delegate(int lhs, int rhs)\n        {\n            return lhs + rhs;\n        };\n\n        // C# 3.0 definition\n        IntOp mul = (lhs, rhs) =\u003e\n        {\n            return lhs * rhs;\n        };\n\n        // C# 3.0 definition - shorthand\n        IntOp sub = (lhs, rhs) =\u003e lhs - rhs;\n\n        // Calling each method\n        Console.WriteLine(\"2 + 3 = \" + add(2, 3));\n        Console.WriteLine(\"2 * 3 = \" + mul(2, 3));\n        Console.WriteLine(\"2 - 3 = \" + sub(2, 3));\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "class Program\n{\n    static void Main(string[] args)\n    {\n        // C# 2.0 definition\n        IntOp add = delegate(int lhs, int rhs)\n        {\n            return lhs + rhs;\n        };\n\n        // C# 3.0 definition\n        IntOp mul = (lhs, rhs) =\u003e\n        {\n            return lhs * rhs;\n        };\n\n        // C# 3.0 definition - shorthand\n        IntOp sub = (lhs, rhs) =\u003e lhs - rhs;\n\n        // Calling each method\n        Console.WriteLine(\"2 + 3 = \" + add(2, 3));\n        Console.WriteLine(\"2 * 3 = \" + mul(2, 3));\n        Console.WriteLine(\"2 - 3 = \" + sub(2, 3));\n    }\n}",
        "code_language": "C#"
      }
    ],
    "title": "Anonymous method",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}