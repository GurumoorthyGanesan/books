{
  "ID": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
  "Root": {
    "alive": true,
    "content": [
      "776c5142-0a54-4aa0-aead-90c8b0672720",
      "f7830fd9-845d-4ed5-b756-d0484b9cfb05",
      "853ae525-d579-48c3-bc93-86e126dd8873",
      "4225fc17-4de5-4633-baef-80f001c26ba0",
      "3f021750-d439-4a42-a46a-85cabd0d75aa",
      "0a5e946e-aecf-4a0d-abb8-135cdc4fb360",
      "69228c11-977f-4e9f-8c57-59294af994ce",
      "08ea7776-8e14-43e6-8ff6-5f0e6898780c",
      "80934b3f-e394-4bbd-9101-fefb2739e31a",
      "a107845e-0ec2-49d5-9c90-1196a0445340",
      "ccf7531e-990d-4de1-a65d-f1addcb7b53f",
      "60119652-35c3-4afd-9f22-2e8cc3313d56",
      "c55fc765-4441-4f5d-a6d7-50b3bd6c515f",
      "4e2357fa-28a1-4cc9-844c-b6616d1af18d",
      "afdbfe9a-093f-4aa3-aba3-a29457105089",
      "f8ac2378-f08a-43a6-9503-f2028e5bc5a6",
      "1ce3baff-b35e-4168-8635-2f8082dbcb46",
      "0250cc0d-5d82-48b9-ab2c-4ba938d809b0",
      "695918de-b122-4dee-a8e4-120813fb5424",
      "bb027087-5c31-4b75-a1ae-e3ddbafefae5",
      "a3a9d1a2-4704-44dc-a529-6f327ff58dfe",
      "6719af18-5433-4e59-b3c5-8269fc9fae2c",
      "ab062d6a-6b50-43b3-b59d-236c06b1a209",
      "d1d30e67-4da4-4ac5-ab48-8954b8de2228",
      "a8155cb3-7f92-4190-9f43-3ea71d2e2473",
      "0a4d8074-5eb0-4713-aa73-4f11e7de9ea4",
      "ac4e8856-01ce-4a6e-9fc5-f3b6c7d1ddc5",
      "9a2f13c2-c414-4909-ba00-c7fe1cea0dd2",
      "05655acb-c33e-437d-a19e-3fbdc5cbd5b6",
      "05dd6df7-1bc9-4bc2-b072-bd2580065979",
      "b3422d68-0f9c-4428-a762-45eac9f49f1f",
      "6553f016-adc8-4cd9-b768-60b88fe072b2",
      "d39db33c-52aa-4e7c-a740-1435c66316e5",
      "1f2be6f0-17a4-40a5-a87a-b7b364818008",
      "aeeda70d-f2fc-4e21-a179-bdcd06135b4e",
      "764b7f0a-326c-4c76-b070-c3bb2e75473b",
      "8227d49a-9923-40b0-8f98-963525ea1620",
      "92de6c77-74ff-4da8-9c8f-46b06b3f9c17",
      "79bd2140-47a8-415d-99ae-3a5ea4e686b2",
      "e56e41ca-4872-49d9-bda8-130fe9e56b76",
      "1916c5be-9cf2-4c2d-a74c-4b43e4cdd091",
      "83e556bc-e316-4ab1-990d-18fef96d8523",
      "62bb488d-7095-4bc9-9deb-25b79a9d16a5",
      "fe5f8977-24b8-4bec-aac8-2d256cc9fd19",
      "42b4d823-5d16-4077-adf4-40fe1773f85c",
      "39dbac6e-d981-42ef-9dfb-e08a247cac3a",
      "53f0a652-7388-418a-a5a4-78f2f15203a7",
      "8570a7e8-a032-4aea-b5bb-d4f4da2fc939",
      "cd59969e-6322-49e8-8957-5d4852379ba9",
      "2af77cf1-039f-45f2-b7a0-6af0282839aa",
      "c7fde052-5a37-4e08-b790-28ee652d8fed"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549526210211,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549785120000,
    "parent_id": "fa946197-d3a2-4cf6-8c65-bc2d23788972",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "0Expression Trees"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210200,
        "id": "776c5142-0a54-4aa0-aead-90c8b0672720",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210200,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Versions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Versions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210202,
        "id": "f7830fd9-845d-4ed5-b756-d0484b9cfb05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210202,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[{“Name”:“4.0”,“GroupName”:null},{“Name”:“5.0”,“GroupName”:null},{“Name”:“6.0”,“GroupName”:null},{“Name”:“7.0”,“GroupName”:null}]"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[{“Name”:“4.0”,“GroupName”:null},{“Name”:“5.0”,“GroupName”:null},{“Name”:“6.0”,“GroupName”:null},{“Name”:“7.0”,“GroupName”:null}]"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210202,
        "id": "853ae525-d579-48c3-bc93-86e126dd8873",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210202,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "4225fc17-4de5-4633-baef-80f001c26ba0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression Trees are Expressions arranged in a treelike data structure. Each node in the tree is a representation of an expression, an expression being code. An In-Memory representation of a Lambda expression would be an Expression tree, which holds the actual elements (i.e. code) of the query, but not its result. Expression trees make the structure of a lambda expression transparent and explicit."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression Trees are Expressions arranged in a treelike data structure. Each node in the tree is a representation of an expression, an expression being code. An In-Memory representation of a Lambda expression would be an Expression tree, which holds the actual elements (i.e. code) of the query, but not its result. Expression trees make the structure of a lambda expression transparent and explicit."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "3f021750-d439-4a42-a46a-85cabd0d75aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "0a5e946e-aecf-4a0d-abb8-135cdc4fb360",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression\u003cTDelegate\u003e name = lambdaExpression;"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression\u003cTDelegate\u003e name = lambdaExpression;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "69228c11-977f-4e9f-8c57-59294af994ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "08ea7776-8e14-43e6-8ff6-5f0e6898780c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameter | Details |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameter | Details |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "80934b3f-e394-4bbd-9101-fefb2739e31a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "——— | —–– |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "——— | —–– |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210203,
        "id": "a107845e-0ec2-49d5-9c90-1196a0445340",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210203,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "TDelegate | The delegate type to be used for the expression |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "TDelegate | The delegate type to be used for the expression |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "ccf7531e-990d-4de1-a65d-f1addcb7b53f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lambdaExpression | The lambda expression (ex. "
            ],
            [
              "num =\u003e num \u003c 5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "lambdaExpression | The lambda expression (ex. "
          },
          {
            "Text": "num =\u003e num \u003c 5",
            "AttrFlags": 2
          },
          {
            "Text": ") |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "60119652-35c3-4afd-9f22-2e8cc3313d56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "c55fc765-4441-4f5d-a6d7-50b3bd6c515f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Intro to Expression Trees"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Intro to Expression Trees"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "4e2357fa-28a1-4cc9-844c-b6616d1af18d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Where we came from"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Where we came from"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "afdbfe9a-093f-4aa3-aba3-a29457105089",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression trees are all about consuming “source code” at runtime. Consider a method which calculates the sales tax due on a sales order "
            ],
            [
              "decimal CalculateTotalTaxDue(SalesOrder order)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Using that method in a .NET program is easy — you just call it "
            ],
            [
              "decimal taxDue = CalculateTotalTaxDue(order);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". What if you want to apply it to all the results from a remote query (SQL, XML, a remote server, etc)? Those remote query sources cannot call the method! Traditionally, you would have to invert the flow in all these cases. Make the entire query, store it in memory, then loop through the results and calculate tax for each result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression trees are all about consuming “source code” at runtime. Consider a method which calculates the sales tax due on a sales order "
          },
          {
            "Text": "decimal CalculateTotalTaxDue(SalesOrder order)",
            "AttrFlags": 2
          },
          {
            "Text": ". Using that method in a .NET program is easy — you just call it "
          },
          {
            "Text": "decimal taxDue = CalculateTotalTaxDue(order);",
            "AttrFlags": 2
          },
          {
            "Text": ". What if you want to apply it to all the results from a remote query (SQL, XML, a remote server, etc)? Those remote query sources cannot call the method! Traditionally, you would have to invert the flow in all these cases. Make the entire query, store it in memory, then loop through the results and calculate tax for each result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "f8ac2378-f08a-43a6-9503-f2028e5bc5a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to avoid flow inversion’s memory and latency problems"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to avoid flow inversion’s memory and latency problems"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210204,
        "id": "1ce3baff-b35e-4168-8635-2f8082dbcb46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210204,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression trees are data structures in a format of a tree, where each node holds an expression. They are used to translate the compiled instructions (like methods used to filter data) in expressions which could be used outside of the program environment such as inside a database query."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression trees are data structures in a format of a tree, where each node holds an expression. They are used to translate the compiled instructions (like methods used to filter data) in expressions which could be used outside of the program environment such as inside a database query."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210205,
        "id": "0250cc0d-5d82-48b9-ab2c-4ba938d809b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210205,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem here is that a remote query "
            ],
            [
              "cannot access our method",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". We could avoid this problem if instead, we sent the "
            ],
            [
              "instructions",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " for the method to the remote query. In our "
            ],
            [
              "CalculateTotalTaxDue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " example, that means we send this information:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem here is that a remote query "
          },
          {
            "Text": "cannot access our method",
            "AttrFlags": 4
          },
          {
            "Text": ". We could avoid this problem if instead, we sent the "
          },
          {
            "Text": "instructions",
            "AttrFlags": 4
          },
          {
            "Text": " for the method to the remote query. In our "
          },
          {
            "Text": "CalculateTotalTaxDue",
            "AttrFlags": 2
          },
          {
            "Text": " example, that means we send this information:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210205,
        "id": "695918de-b122-4dee-a8e4-120813fb5424",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210205,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Create a variable to store the total tax"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Create a variable to store the total tax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210205,
        "id": "bb027087-5c31-4b75-a1ae-e3ddbafefae5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210205,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Loop through all the lines on the order"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Loop through all the lines on the order"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210205,
        "id": "a3a9d1a2-4704-44dc-a529-6f327ff58dfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210205,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For each line, check if the product is taxable"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "For each line, check if the product is taxable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210205,
        "id": "6719af18-5433-4e59-b3c5-8269fc9fae2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210205,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If it is, multiply the line total by the applicable tax rate and add that amount to the total"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If it is, multiply the line total by the applicable tax rate and add that amount to the total"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210205,
        "id": "ab062d6a-6b50-43b3-b59d-236c06b1a209",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210205,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise do nothing"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise do nothing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "d1d30e67-4da4-4ac5-ab48-8954b8de2228",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With those instructions, the remote query can perform the work as it’s creating the data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With those instructions, the remote query can perform the work as it’s creating the data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "a8155cb3-7f92-4190-9f43-3ea71d2e2473",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two challenges to implementing this. How do you transform a compiled .NET method into a list of instructions, and how do you format the instructions in a way that they can be consumed by the remote system?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two challenges to implementing this. How do you transform a compiled .NET method into a list of instructions, and how do you format the instructions in a way that they can be consumed by the remote system?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "0a4d8074-5eb0-4713-aa73-4f11e7de9ea4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without expression trees, you could only solve the first problem with MSIL. (MSIL is the assembler-like code created by the .NET compiler.) Parsing MSIL is "
            ],
            [
              "possible",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", but it’s not easy. Even when you do parse it properly, it can be hard to determine what the original programmer’s intent was with a particular routine."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without expression trees, you could only solve the first problem with MSIL. (MSIL is the assembler-like code created by the .NET compiler.) Parsing MSIL is "
          },
          {
            "Text": "possible",
            "AttrFlags": 4
          },
          {
            "Text": ", but it’s not easy. Even when you do parse it properly, it can be hard to determine what the original programmer’s intent was with a particular routine."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "ac4e8856-01ce-4a6e-9fc5-f3b6c7d1ddc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression trees save the day"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression trees save the day"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "9a2f13c2-c414-4909-ba00-c7fe1cea0dd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression trees address these exact issues. They represent program instructions a tree data structure where each node represents"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression trees address these exact issues. They represent program instructions a tree data structure where each node represents"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "05655acb-c33e-437d-a19e-3fbdc5cbd5b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "one instruction",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "one instruction",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "05dd6df7-1bc9-4bc2-b072-bd2580065979",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and has references to all the information you need to execute that instruction. For example, a"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and has references to all the information you need to execute that instruction. For example, a"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "b3422d68-0f9c-4428-a762-45eac9f49f1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MethodCallExpression",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "MethodCallExpression",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210206,
        "id": "6553f016-adc8-4cd9-b768-60b88fe072b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210206,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "has reference to 1) the"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "has reference to 1) the"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "d39db33c-52aa-4e7c-a740-1435c66316e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MethodInfo",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "MethodInfo",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "1f2be6f0-17a4-40a5-a87a-b7b364818008",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "it is going to call, 2) a list of"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "it is going to call, 2) a list of"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "aeeda70d-f2fc-4e21-a179-bdcd06135b4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "764b7f0a-326c-4c76-b070-c3bb2e75473b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "s it will pass to that method, 3) for instance methods, the"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "s it will pass to that method, 3) for instance methods, the"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "8227d49a-9923-40b0-8f98-963525ea1620",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "92de6c77-74ff-4da8-9c8f-46b06b3f9c17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "you’ll call the method on. You can “walk the tree” and apply the instructions on your remote query."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "you’ll call the method on. You can “walk the tree” and apply the instructions on your remote query."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210207,
        "id": "79bd2140-47a8-415d-99ae-3a5ea4e686b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210207,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating expression trees"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating expression trees"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210208,
        "id": "e56e41ca-4872-49d9-bda8-130fe9e56b76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210208,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The easiest way to create an expression tree is with a lambda expression. These expressions look almost the same as normal C# methods. It’s important to realize this is "
            ],
            [
              "compiler magic",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". When you first create a lambda expression, the compiler checks what you assign it to. If it’s a "
            ],
            [
              "Delegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type (including "
            ],
            [
              "Action",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Func",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), the compiler converts the lambda expression into a delegate. If it’s a "
            ],
            [
              "LambdaExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or an "
            ],
            [
              "Expression\u003cAction\u003cT\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Expression\u003cFunc\u003cT\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which are strongly typed "
            ],
            [
              "LambdaExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s), the compiler transforms it into a "
            ],
            [
              "LambdaExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is where the magic kicks in. Behind the scenes, the compiler "
            ],
            [
              "uses the expression tree API",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to transform your lambda expression into a "
            ],
            [
              "LambdaExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The easiest way to create an expression tree is with a lambda expression. These expressions look almost the same as normal C# methods. It’s important to realize this is "
          },
          {
            "Text": "compiler magic",
            "AttrFlags": 4
          },
          {
            "Text": ". When you first create a lambda expression, the compiler checks what you assign it to. If it’s a "
          },
          {
            "Text": "Delegate",
            "AttrFlags": 2
          },
          {
            "Text": " type (including "
          },
          {
            "Text": "Action",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Func",
            "AttrFlags": 2
          },
          {
            "Text": "), the compiler converts the lambda expression into a delegate. If it’s a "
          },
          {
            "Text": "LambdaExpression",
            "AttrFlags": 2
          },
          {
            "Text": " (or an "
          },
          {
            "Text": "Expression\u003cAction\u003cT\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Expression\u003cFunc\u003cT\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " which are strongly typed "
          },
          {
            "Text": "LambdaExpression",
            "AttrFlags": 2
          },
          {
            "Text": "’s), the compiler transforms it into a "
          },
          {
            "Text": "LambdaExpression",
            "AttrFlags": 2
          },
          {
            "Text": ". This is where the magic kicks in. Behind the scenes, the compiler "
          },
          {
            "Text": "uses the expression tree API",
            "AttrFlags": 4
          },
          {
            "Text": " to transform your lambda expression into a "
          },
          {
            "Text": "LambdaExpression",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210209,
        "id": "1916c5be-9cf2-4c2d-a74c-4b43e4cdd091",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210209,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda expressions cannot create every type of expression tree. In those cases, you can use the Expressions API manually to create the tree you need to. In the "
            ],
            [
              "Understanding the expressions API",
              [
                [
                  "a",
                  "//stackoverflow.com/documentation/c%23/75/expression-trees/19200/understanding-the-expressions-api"
                ]
              ]
            ],
            [
              " example, we create the "
            ],
            [
              "CalculateTotalSalesTax",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression using the API."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda expressions cannot create every type of expression tree. In those cases, you can use the Expressions API manually to create the tree you need to. In the "
          },
          {
            "Text": "Understanding the expressions API",
            "Link": "//stackoverflow.com/documentation/c%23/75/expression-trees/19200/understanding-the-expressions-api"
          },
          {
            "Text": " example, we create the "
          },
          {
            "Text": "CalculateTotalSalesTax",
            "AttrFlags": 2
          },
          {
            "Text": " expression using the API."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210209,
        "id": "83e556bc-e316-4ab1-990d-18fef96d8523",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210209,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE: The names get a bit confusing here. A "
            ],
            [
              "lambda expression",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (two words, lower case) refers to the block of code with a "
            ],
            [
              "=\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " indicator. It represents an anonymous method in C# and is converted into either a "
            ],
            [
              "Delegate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Expression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". A "
            ],
            [
              "LambdaExpression",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " (one word, PascalCase) refers to the node type within the Expression API which represents a method you can execute."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE: The names get a bit confusing here. A "
          },
          {
            "Text": "lambda expression",
            "AttrFlags": 4
          },
          {
            "Text": " (two words, lower case) refers to the block of code with a "
          },
          {
            "Text": "=\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " indicator. It represents an anonymous method in C# and is converted into either a "
          },
          {
            "Text": "Delegate",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Expression",
            "AttrFlags": 2
          },
          {
            "Text": ". A "
          },
          {
            "Text": "LambdaExpression",
            "AttrFlags": 6
          },
          {
            "Text": " (one word, PascalCase) refers to the node type within the Expression API which represents a method you can execute."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210209,
        "id": "62bb488d-7095-4bc9-9deb-25b79a9d16a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210209,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression Trees and LINQ"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression Trees and LINQ"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210209,
        "id": "fe5f8977-24b8-4bec-aac8-2d256cc9fd19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210209,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the most common uses of expression trees is with LINQ and database queries. LINQ pairs an expression tree with a query provider to apply your instructions to the target remote query. For example, the LINQ to Entity Framework query provider transforms an expression tree into SQL which is executed against the database directly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the most common uses of expression trees is with LINQ and database queries. LINQ pairs an expression tree with a query provider to apply your instructions to the target remote query. For example, the LINQ to Entity Framework query provider transforms an expression tree into SQL which is executed against the database directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210210,
        "id": "42b4d823-5d16-4077-adf4-40fe1773f85c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210210,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Putting all the pieces together, you can see the real power behind LINQ."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Putting all the pieces together, you can see the real power behind LINQ."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210210,
        "id": "39dbac6e-d981-42ef-9dfb-e08a247cac3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210210,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Write a query using a lambda expression: "
            ],
            [
              "products.Where(x =\u003e x.Cost \u003e 5)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Write a query using a lambda expression: "
          },
          {
            "Text": "products.Where(x =\u003e x.Cost \u003e 5)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210210,
        "id": "53f0a652-7388-418a-a5a4-78f2f15203a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210210,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The compiler transforms that expression into an expression tree with the instructions “check if the Cost property of the parameter is greater than five”."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The compiler transforms that expression into an expression tree with the instructions “check if the Cost property of the parameter is greater than five”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210210,
        "id": "8570a7e8-a032-4aea-b5bb-d4f4da2fc939",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210210,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The query provider parses the expression tree and produces a valid SQL query "
            ],
            [
              "SELECT * FROM products WHERE Cost \u003e 5",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The query provider parses the expression tree and produces a valid SQL query "
          },
          {
            "Text": "SELECT * FROM products WHERE Cost \u003e 5",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210211,
        "id": "cd59969e-6322-49e8-8957-5d4852379ba9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210211,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ORM projects all the results into POCOs and you get a list of objects back"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ORM projects all the results into POCOs and you get a list of objects back"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210211,
        "id": "2af77cf1-039f-45f2-b7a0-6af0282839aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210211,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526210211,
        "id": "c7fde052-5a37-4e08-b790-28ee652d8fed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526210211,
        "parent_id": "71fa9ffa-716a-4ca4-895a-a1aaee6f9251",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression trees are immutable. If you want to change an expression tree you need to create a new one, copy the existing one into the new one (to traverse an expression tree you can use the "
            ],
            [
              "ExpressionVisitor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and make the wanted changes."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression trees are immutable. If you want to change an expression tree you need to create a new one, copy the existing one into the new one (to traverse an expression tree you can use the "
          },
          {
            "Text": "ExpressionVisitor",
            "AttrFlags": 2
          },
          {
            "Text": ") and make the wanted changes."
          }
        ]
      }
    ],
    "title": "0Expression Trees",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}