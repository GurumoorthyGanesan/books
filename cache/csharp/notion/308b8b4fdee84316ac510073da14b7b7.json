{
  "ID": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
  "Root": {
    "id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
    "alive": true,
    "content": [
      "97af26ed-0c70-4d7a-a9b7-672472be9942",
      "620e08ac-17a0-44b4-9243-54e3ecee6113",
      "b1132960-5930-408b-8f01-45b2a9ccfb27",
      "8ef5b26f-99ef-4ac4-8d98-946c9d01c2bc",
      "255cd4d0-708d-444b-9a6b-9b15756f346b",
      "7d95c2be-52db-4957-ba39-62cfb218e92a",
      "00dd9be8-939c-4494-a62c-79ce8a94c483",
      "a4d3ab35-4daa-4c29-b66b-b9202926d8f8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528452305,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550211420000,
    "parent_id": "eee4787e-f48e-4f42-9f08-9a1d031866f9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Conversion Operators"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "id": "97af26ed-0c70-4d7a-a9b7-672472be9942",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452301,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528452301,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C#, types can define custom "
            ],
            [
              "Conversion Operators",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", which allow values to be converted to and from other types using either explicit or implicit casts. For example, consider a class that is meant to represent a JavaScript expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C#, types can define custom "
          },
          {
            "Text": "Conversion Operators",
            "AttrFlags": 4
          },
          {
            "Text": ", which allow values to be converted to and from other types using either explicit or implicit casts. For example, consider a class that is meant to represent a JavaScript expression:"
          }
        ]
      },
      {
        "id": "620e08ac-17a0-44b4-9243-54e3ecee6113",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549622040000,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class JsExpression\n{\n    private readonly string expression;\n    public JsExpression(string rawExpression)\n    {\n        this.expression = rawExpression;\n    }\n    public override string ToString()\n    {\n        return this.expression;\n    }\n    public JsExpression IsEqualTo(JsExpression other)\n    {\n        return new JsExpression(\"(\" + this + \" == \" + other + \")\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public class JsExpression\n{\n    private readonly string expression;\n    public JsExpression(string rawExpression)\n    {\n        this.expression = rawExpression;\n    }\n    public override string ToString()\n    {\n        return this.expression;\n    }\n    public JsExpression IsEqualTo(JsExpression other)\n    {\n        return new JsExpression(\"(\" + this + \" == \" + other + \")\");\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "b1132960-5930-408b-8f01-45b2a9ccfb27",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528452304,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we wanted to create a JsExpression representing a comparison of two JavaScript values, we could do something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we wanted to create a JsExpression representing a comparison of two JavaScript values, we could do something like this:"
          }
        ]
      },
      {
        "id": "8ef5b26f-99ef-4ac4-8d98-946c9d01c2bc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550211360000,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "JsExpression intExpression = new JsExpression(\"-1\");\nJsExpression doubleExpression = new JsExpression(\"-1.0\");\nConsole.WriteLine(intExpression.IsEqualTo(doubleExpression)); // (-1 == -1.0)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "JsExpression intExpression = new JsExpression(\"-1\");\nJsExpression doubleExpression = new JsExpression(\"-1.0\");\nConsole.WriteLine(intExpression.IsEqualTo(doubleExpression)); // (-1 == -1.0)",
        "code_language": "C#"
      },
      {
        "id": "255cd4d0-708d-444b-9a6b-9b15756f346b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528452304,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But we can add some "
            ],
            [
              "explicit conversion operators",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "JsExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", to allow a simple conversion when using explicit casting."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But we can add some "
          },
          {
            "Text": "explicit conversion operators",
            "AttrFlags": 4
          },
          {
            "Text": " to "
          },
          {
            "Text": "JsExpression",
            "AttrFlags": 2
          },
          {
            "Text": ", to allow a simple conversion when using explicit casting."
          }
        ]
      },
      {
        "id": "7d95c2be-52db-4957-ba39-62cfb218e92a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550211420000,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static explicit operator JsExpression(int value)\n{\n    return new JsExpression(value.ToString());\n}\npublic static explicit operator JsExpression(double value)\n{\n    return new JsExpression(value.ToString());\n}\n\n// Usage:\nJsExpression intExpression = (JsExpression)(-1);\nJsExpression doubleExpression = (JsExpression)(-1.0);\nConsole.WriteLine(intExpression.IsEqualTo(doubleExpression)); // (-1 == -1.0)"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public static explicit operator JsExpression(int value)\n{\n    return new JsExpression(value.ToString());\n}\npublic static explicit operator JsExpression(double value)\n{\n    return new JsExpression(value.ToString());\n}\n\n// Usage:\nJsExpression intExpression = (JsExpression)(-1);\nJsExpression doubleExpression = (JsExpression)(-1.0);\nConsole.WriteLine(intExpression.IsEqualTo(doubleExpression)); // (-1 == -1.0)",
        "code_language": "C#"
      },
      {
        "id": "00dd9be8-939c-4494-a62c-79ce8a94c483",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452305,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528452305,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or, we could change these operators to "
            ],
            [
              "implicit",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to make the syntax much simpler."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or, we could change these operators to "
          },
          {
            "Text": "implicit",
            "AttrFlags": 4
          },
          {
            "Text": " to make the syntax much simpler."
          }
        ]
      },
      {
        "id": "a4d3ab35-4daa-4c29-b66b-b9202926d8f8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528452305,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550211420000,
        "parent_id": "308b8b4f-dee8-4316-ac51-0073da14b7b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static implicit operator JsExpression(int value)\n{\n    return new JsExpression(value.ToString());\n}\npublic static implicit operator JsExpression(double value)\n{\n    return new JsExpression(value.ToString());\n}\n\n// Usage:\nJsExpression intExpression = -1;\nConsole.WriteLine(intExpression.IsEqualTo(-1.0)); // (-1 == -1.0)"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public static implicit operator JsExpression(int value)\n{\n    return new JsExpression(value.ToString());\n}\npublic static implicit operator JsExpression(double value)\n{\n    return new JsExpression(value.ToString());\n}\n\n// Usage:\nJsExpression intExpression = -1;\nConsole.WriteLine(intExpression.IsEqualTo(-1.0)); // (-1 == -1.0)",
        "code_language": "C#"
      }
    ],
    "title": "Conversion Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}