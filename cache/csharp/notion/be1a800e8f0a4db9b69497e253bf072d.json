{
  "ID": "be1a800e-8f0a-4db9-b694-97e253bf072d",
  "Root": {
    "id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
    "alive": true,
    "content": [
      "d2adb5ff-7ff6-4892-8537-9992a9be01a0",
      "39d0d3cd-0ab3-4ef6-823e-db493dc11821",
      "60d2d28d-15ec-41f8-a895-f0ab2110d8fa",
      "03d4021f-7b79-41a1-b5aa-5081367220cd",
      "c11bdd83-a131-4998-b5a9-dd76c4e1c0d0",
      "e5321248-da76-4095-978c-3805810fffd9",
      "c6d5e4a3-fd8f-4922-9406-88de7d8f0e4c",
      "e47bdd86-95ea-41b7-92ca-fbb1b77338d6",
      "dfa1aa5b-c7fa-41ab-a2e3-f95c2985dc04",
      "ce8e9afe-f673-4982-a03f-20036590fa4c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549526114337,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550127120000,
    "parent_id": "a34c1078-f01c-44b1-b468-522f804fbc2d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Build your own Linq operators for IEnumerableT"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "id": "d2adb5ff-7ff6-4892-8537-9992a9be01a0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114335,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114335,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the great things about Linq is that it is so easy to extend. You just need to create an "
            ],
            [
              "extension method",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/20/extension-methods/33/using-an-extension-method#t=201607280952261411896"
                ]
              ]
            ],
            [
              " whose argument is "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the great things about Linq is that it is so easy to extend. You just need to create an "
          },
          {
            "Text": "extension method",
            "Link": "http://stackoverflow.com/documentation/c%23/20/extension-methods/33/using-an-extension-method#t=201607280952261411896"
          },
          {
            "Text": " whose argument is "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "39d0d3cd-0ab3-4ef6-823e-db493dc11821",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114336,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549626900000,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public namespace MyNamespace\n{\n    public static class LinqExtensions\n    {\n        public static IEnumerable\u003cList\u003cT\u003e\u003e Batch\u003cT\u003e(this IEnumerable\u003cT\u003e source, int batchSize)\n        {\n            var batch = new List\u003cT\u003e();\n            foreach (T item in source)\n            {\n                batch.Add(item);\n                if (batch.Count == batchSize)\n                {\n                    yield return batch;\n                    batch = new List\u003cT\u003e();\n                }\n            }\n            if (batch.Count \u003e 0)\n                yield return batch;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public namespace MyNamespace\n{\n    public static class LinqExtensions\n    {\n        public static IEnumerable\u003cList\u003cT\u003e\u003e Batch\u003cT\u003e(this IEnumerable\u003cT\u003e source, int batchSize)\n        {\n            var batch = new List\u003cT\u003e();\n            foreach (T item in source)\n            {\n                batch.Add(item);\n                if (batch.Count == batchSize)\n                {\n                    yield return batch;\n                    batch = new List\u003cT\u003e();\n                }\n            }\n            if (batch.Count \u003e 0)\n                yield return batch;\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "60d2d28d-15ec-41f8-a895-f0ab2110d8fa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114336,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114336,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example splits the items in an "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into lists of a fixed size, the last list containing the remainder of the items. Notice how the object to which the extension method is applied is passed in (argument "
            ],
            [
              "source",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") as the initial argument using the "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword. Then the "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword is used to output the next item in the output "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before continuing with execution from that point (see "
            ],
            [
              "yield keyword",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/61/yield-keyword#t=201607281004094832778"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example splits the items in an "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " into lists of a fixed size, the last list containing the remainder of the items. Notice how the object to which the extension method is applied is passed in (argument "
          },
          {
            "Text": "source",
            "AttrFlags": 2
          },
          {
            "Text": ") as the initial argument using the "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " keyword. Then the "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " keyword is used to output the next item in the output "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " before continuing with execution from that point (see "
          },
          {
            "Text": "yield keyword",
            "Link": "http://stackoverflow.com/documentation/c%23/61/yield-keyword#t=201607281004094832778"
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "id": "03d4021f-7b79-41a1-b5aa-5081367220cd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114336,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114336,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example would be used in your code like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example would be used in your code like this:"
          }
        ]
      },
      {
        "id": "c11bdd83-a131-4998-b5a9-dd76c4e1c0d0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114337,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550127120000,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "//using MyNamespace;\nvar items = new List\u003cint\u003e { 2, 3, 4, 5, 6 };\nforeach (List\u003cint\u003e sublist in items.Batch(3))\n{\n    // do something\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "//using MyNamespace;\nvar items = new List\u003cint\u003e { 2, 3, 4, 5, 6 };\nforeach (List\u003cint\u003e sublist in items.Batch(3))\n{\n    // do something\n}",
        "code_language": "C#"
      },
      {
        "id": "e5321248-da76-4095-978c-3805810fffd9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114337,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114337,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the first loop, sublist would be "
            ],
            [
              "{2, 3, 4}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and on the second "
            ],
            [
              "{5, 6}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the first loop, sublist would be "
          },
          {
            "Text": "{2, 3, 4}",
            "AttrFlags": 2
          },
          {
            "Text": " and on the second "
          },
          {
            "Text": "{5, 6}",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "c6d5e4a3-fd8f-4922-9406-88de7d8f0e4c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114337,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114337,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Custom LinQ methods can be combined with standard LinQ methods too. e.g.:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Custom LinQ methods can be combined with standard LinQ methods too. e.g.:"
          }
        ]
      },
      {
        "id": "e47bdd86-95ea-41b7-92ca-fbb1b77338d6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114337,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550127120000,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "//using MyNamespace;\nvar result = Enumerable.Range(0, 13)         // generate a list\n                       .Where(x =\u003e x%2 == 0) // filter the list or do something other\n                       .Batch(3)             // call our extension method\n                       .ToList()             // call other standard methods"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "//using MyNamespace;\nvar result = Enumerable.Range(0, 13)         // generate a list\n                       .Where(x =\u003e x%2 == 0) // filter the list or do something other\n                       .Batch(3)             // call our extension method\n                       .ToList()             // call other standard methods",
        "code_language": "C#"
      },
      {
        "id": "dfa1aa5b-c7fa-41ab-a2e3-f95c2985dc04",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114337,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114337,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This query will return even numbers grouped in batches with a size of 3: "
            ],
            [
              "{0, 2, 4}, {6, 8, 10}, {12}",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This query will return even numbers grouped in batches with a size of 3: "
          },
          {
            "Text": "{0, 2, 4}, {6, 8, 10}, {12}",
            "AttrFlags": 2
          }
        ]
      },
      {
        "id": "ce8e9afe-f673-4982-a03f-20036590fa4c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526114337,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526114337,
        "parent_id": "be1a800e-8f0a-4db9-b694-97e253bf072d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remember you need a "
            ],
            [
              "using MyNamespace;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " line in order to be able to access the extension method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remember you need a "
          },
          {
            "Text": "using MyNamespace;",
            "AttrFlags": 2
          },
          {
            "Text": " line in order to be able to access the extension method."
          }
        ]
      }
    ],
    "title": "Build your own Linq operators for IEnumerableT",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}