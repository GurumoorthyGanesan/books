{
  "ID": "0d51e5e5-55d6-403f-bcab-705d6299fa65",
  "Root": {
    "id": "0d51e5e5-55d6-403f-bcab-705d6299fa65",
    "alive": true,
    "content": [
      "d8a17da8-0702-43bf-87a4-3935e5285162",
      "5bc3de11-7ef7-4731-a3f8-1b896796e45a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527755352,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550204460000,
    "parent_id": "15c7c6c1-34d3-4692-bbfc-311e63288f8d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "DateTime.TryParseString DateTime"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "id": "d8a17da8-0702-43bf-87a4-3935e5285162",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527755351,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550204460000,
        "parent_id": "0d51e5e5-55d6-403f-bcab-705d6299fa65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// Converts the specified string representation of a date and time to its DateTime equivalent and returns a value that indicates whether the conversion succeeded\n\nstring[] dateTimeStrings = new []{\n    \"14:23 22 Jul 2016\",\n    \"99:23 2x Jul 2016\",\n    \"22/7/2016 14:23:00\"\n};\n\nforeach(var dateTimeString in dateTimeStrings){\n\n    DateTime dateTime;\n    \n    bool wasParsed = DateTime.TryParse(dateTimeString, out dateTime);\n    \n    string result = dateTimeString +\n        (wasParsed \n            ? $\"was parsed to {dateTime}\" \n            : \"can't be parsed to DateTime\");\n            \n    Console.WriteLine(result);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "// Converts the specified string representation of a date and time to its DateTime equivalent and returns a value that indicates whether the conversion succeeded\n\nstring[] dateTimeStrings = new []{\n    \"14:23 22 Jul 2016\",\n    \"99:23 2x Jul 2016\",\n    \"22/7/2016 14:23:00\"\n};\n\nforeach(var dateTimeString in dateTimeStrings){\n\n    DateTime dateTime;\n    \n    bool wasParsed = DateTime.TryParse(dateTimeString, out dateTime);\n    \n    string result = dateTimeString +\n        (wasParsed \n            ? $\"was parsed to {dateTime}\" \n            : \"can't be parsed to DateTime\");\n            \n    Console.WriteLine(result);\n}",
        "code_language": "C#"
      },
      {
        "id": "5bc3de11-7ef7-4731-a3f8-1b896796e45a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550204460000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550204460000,
        "parent_id": "0d51e5e5-55d6-403f-bcab-705d6299fa65",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "DateTime.TryParseString DateTime",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}