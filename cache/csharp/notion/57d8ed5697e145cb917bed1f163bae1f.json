{
  "ID": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
  "Root": {
    "alive": true,
    "content": [
      "ccffa979-90ee-46ab-8824-698c8d307403",
      "08793620-0110-443b-b674-8340a11482db",
      "0e4456f0-87c3-4dbf-9f44-4f5af5b6f7c6",
      "77c6b792-b407-4be3-8ab5-952f8590c67b",
      "2a215734-5731-46b6-8141-0ba8c0081556",
      "8f777161-eda0-4036-9e59-356bfc3fb310",
      "f01582a7-6d3f-4a7c-a0f6-b6bbe9aae9bd",
      "95098985-e42e-4a24-a502-4b0815d966d0",
      "304f753d-e891-4cd0-892c-fdf41552ab6c",
      "b871c7d6-74a8-4de8-b3e1-b89b71996424",
      "2747f2ac-85ce-4f3c-8fc3-d9fdf7c595ac",
      "ee669c6a-a60f-49f6-9546-15d39677c7d4",
      "628cf4da-3d59-4a16-b1be-b107e0198294",
      "5e194fc6-610c-4aa1-9456-dcca928996ce"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525024531,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549941120000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "ref out"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024525,
        "id": "ccffa979-90ee-46ab-8824-698c8d307403",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024525,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keywords cause an argument to be passed by reference, not by value. For value types, this means that the value of the variable can be changed by the callee."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " keywords cause an argument to be passed by reference, not by value. For value types, this means that the value of the variable can be changed by the callee."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024526,
        "id": "08793620-0110-443b-b674-8340a11482db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941120000,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "int x = 5;\nChangeX(ref x);\n// The value of x could be different now"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int x = 5;\nChangeX(ref x);\n// The value of x could be different now",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024526,
        "id": "0e4456f0-87c3-4dbf-9f44-4f5af5b6f7c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024526,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For reference types, the instance in the variable can not only be modified (as is the case without "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), but it can also be replaced altogether:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For reference types, the instance in the variable can not only be modified (as is the case without "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": "), but it can also be replaced altogether:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024526,
        "id": "77c6b792-b407-4be3-8ab5-952f8590c67b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941120000,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Address a = new Address();\nChangeFieldInAddress(a);\n// a will be the same instance as before, even if it is modified\nCreateANewInstance(ref a);\n// a could be an entirely new instance now"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Address a = new Address();\nChangeFieldInAddress(a);\n// a will be the same instance as before, even if it is modified\nCreateANewInstance(ref a);\n// a could be an entirely new instance now",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024526,
        "id": "2a215734-5731-46b6-8141-0ba8c0081556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024526,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The main difference between the "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword is that "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires the variable to be initialized by the caller, while "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " passes that responsibility to the callee."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The main difference between the "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " keyword is that "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " requires the variable to be initialized by the caller, while "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " passes that responsibility to the callee."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024527,
        "id": "8f777161-eda0-4036-9e59-356bfc3fb310",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024527,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use an "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter, both the method definition and the calling method must explicitly use the "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use an "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " parameter, both the method definition and the calling method must explicitly use the "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " keyword."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024527,
        "id": "f01582a7-6d3f-4a7c-a0f6-b6bbe9aae9bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941120000,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "int number = 1;\nConsole.WriteLine(\"Before AddByRef: \" + number); // number = 1\nAddOneByRef(ref number);\nConsole.WriteLine(\"After AddByRef: \" + number);  // number = 2\nSetByOut(out number);\nConsole.WriteLine(\"After SetByOut: \" + number);  // number = 34\n\nvoid AddOneByRef(ref int value)\n{\n    value++;\n}\n\nvoid SetByOut(out int value)\n{\n    value = 34;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 17,
        "code": "int number = 1;\nConsole.WriteLine(\"Before AddByRef: \" + number); // number = 1\nAddOneByRef(ref number);\nConsole.WriteLine(\"After AddByRef: \" + number);  // number = 2\nSetByOut(out number);\nConsole.WriteLine(\"After SetByOut: \" + number);  // number = 34\n\nvoid AddOneByRef(ref int value)\n{\n    value++;\n}\n\nvoid SetByOut(out int value)\n{\n    value = 34;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024529,
        "id": "95098985-e42e-4a24-a502-4b0815d966d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024529,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Demo on .NET Fiddle",
              [
                [
                  "a",
                  "https://dotnetfiddle.net/ma2ikc"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Demo on .NET Fiddle",
            "Link": "https://dotnetfiddle.net/ma2ikc"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024529,
        "id": "304f753d-e891-4cd0-892c-fdf41552ab6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024529,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following does "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " compile, because "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameters must have a value assigned before the method returns (it would compile using "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following does "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " compile, because "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " parameters must have a value assigned before the method returns (it would compile using "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " instead):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024530,
        "id": "b871c7d6-74a8-4de8-b3e1-b89b71996424",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941120000,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "void PrintByOut(out int value)\n{\n    Console.WriteLine(\"Hello!\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "void PrintByOut(out int value)\n{\n    Console.WriteLine(\"Hello!\");\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024530,
        "id": "2747f2ac-85ce-4f3c-8fc3-d9fdf7c595ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024530,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "using out keyword as Generic Modifier",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "using out keyword as Generic Modifier",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024530,
        "id": "ee669c6a-a60f-49f6-9546-15d39677c7d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024530,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword can also be used in generic type parameters when defining generic interfaces and delegates. In this case, the "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword specifies that the type parameter is covariant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " keyword can also be used in generic type parameters when defining generic interfaces and delegates. In this case, the "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " keyword specifies that the type parameter is covariant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024530,
        "id": "628cf4da-3d59-4a16-b1be-b107e0198294",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525024530,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Covariance enables you to use a more derived type than that specified by the generic parameter. This allows for implicit conversion of classes that implement variant interfaces and implicit conversion of delegate types. Covariance and contravariance are supported for reference types, but they are not supported for value types. - MSDN"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Covariance enables you to use a more derived type than that specified by the generic parameter. This allows for implicit conversion of classes that implement variant interfaces and implicit conversion of delegate types. Covariance and contravariance are supported for reference types, but they are not supported for value types. - MSDN"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525024530,
        "id": "5e194fc6-610c-4aa1-9456-dcca928996ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941120000,
        "parent_id": "57d8ed56-97e1-45cb-917b-ed1f163bae1f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "//if we have an interface like this\ninterface ICovariant\u003cout R\u003e { }\n\n//and two variables like\nICovariant\u003cObject\u003e iobj = new Sample\u003cObject\u003e();\nICovariant\u003cString\u003e istr = new Sample\u003cString\u003e();\n\n// then the following statement is valid\n// without the out keyword this would have thrown error\niobj = istr; // implicit conversion occurs here"
            ]
          ]
        },
        "type": "code",
        "version": 10,
        "code": "//if we have an interface like this\ninterface ICovariant\u003cout R\u003e { }\n\n//and two variables like\nICovariant\u003cObject\u003e iobj = new Sample\u003cObject\u003e();\nICovariant\u003cString\u003e istr = new Sample\u003cString\u003e();\n\n// then the following statement is valid\n// without the out keyword this would have thrown error\niobj = istr; // implicit conversion occurs here",
        "code_language": "C#"
      }
    ],
    "title": "ref out",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}