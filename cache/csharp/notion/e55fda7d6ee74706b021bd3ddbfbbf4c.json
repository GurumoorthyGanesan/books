{
  "ID": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
  "Root": {
    "id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
    "alive": true,
    "content": [
      "c42a12bc-3e73-46d1-b2b6-34c58a6354d9",
      "b9a8ef2b-7641-4cbf-be50-88d261591e56",
      "0bbafa63-cfba-411c-89aa-88545d717aa7",
      "ca82fd9c-0967-423c-9b3a-1985daa9ae45",
      "306876bb-142f-4ea3-81ca-34f1ad937f8f",
      "588823f1-4ccb-4415-9a7a-2bcbca679498",
      "d206602e-d96d-4330-a050-2a38630904c1",
      "0936007c-21a7-479d-a402-14851b5252a0",
      "19e6ca56-46cf-46ef-b0ce-004d95d47e94",
      "380bd3b2-5c4f-45ad-995a-c8b296335206",
      "50b7ff0c-8901-4889-add0-3ba3affce031",
      "3cba2023-26e5-4b82-b503-8062923f5ec7",
      "e942816a-d305-4a3e-9e93-211d541c7fd1",
      "eb8001ba-53e2-4722-8dc3-f3c64f56f0ff",
      "7e967cfc-2947-4a00-80d5-65f6d59f144f",
      "ad15731b-f784-4f6b-8caa-eaad88c1dc96",
      "e0205a62-0c48-491d-8c10-e59582aa935c",
      "69040e95-d341-439c-bd39-8ddc9370beb1",
      "1dea515c-d69b-47a7-acf5-5b7c07bd96f1",
      "1eeee848-3ff6-4d83-8696-808ed9ee6d44",
      "674d4cb0-44ff-47e3-bea0-a9fcba65cccd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528053256,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550207160000,
    "parent_id": "6edb5732-40b8-4df6-b8a8-809fb1164d58",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "ref return and ref local"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "id": "c42a12bc-3e73-46d1-b2b6-34c58a6354d9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053247,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053247,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ref returns and ref locals are useful for manipulating and returning references to blocks of memory instead of copying memory without resorting to unsafe pointers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ref returns and ref locals are useful for manipulating and returning references to blocks of memory instead of copying memory without resorting to unsafe pointers."
          }
        ]
      },
      {
        "id": "b9a8ef2b-7641-4cbf-be50-88d261591e56",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053250,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ref Return"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ref Return"
          }
        ]
      },
      {
        "id": "0bbafa63-cfba-411c-89aa-88545d717aa7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207100000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static ref TValue Choose\u003cTValue\u003e(\n    Func\u003cbool\u003e condition, ref TValue left, ref TValue right)\n{\n    return condition() ? ref left : ref right;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public static ref TValue Choose\u003cTValue\u003e(\n    Func\u003cbool\u003e condition, ref TValue left, ref TValue right)\n{\n    return condition() ? ref left : ref right;\n}",
        "code_language": "C#"
      },
      {
        "id": "ca82fd9c-0967-423c-9b3a-1985daa9ae45",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053250,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With this you can pass two values by reference with one of them being returned based on some condition:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With this you can pass two values by reference with one of them being returned based on some condition:"
          }
        ]
      },
      {
        "id": "306876bb-142f-4ea3-81ca-34f1ad937f8f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207100000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Matrix3D left = …, right = …;\nChoose(chooser, ref left, ref right).M20 = 1.0;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Matrix3D left = …, right = …;\nChoose(chooser, ref left, ref right).M20 = 1.0;",
        "code_language": "C#"
      },
      {
        "id": "588823f1-4ccb-4415-9a7a-2bcbca679498",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053250,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ref Local"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ref Local"
          }
        ]
      },
      {
        "id": "d206602e-d96d-4330-a050-2a38630904c1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207160000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static ref int Max(ref int first, ref int second, ref int third)\n{\n    ref int max = first \u003e second ? ref first : ref second;\n    return max \u003e third ? ref max : ref third;\n}\n…\nint a = 1, b = 2, c = 3;\nMax(ref a, ref b, ref c) = 4;\nDebug.Assert(a == 1); // true\nDebug.Assert(b == 2); // true\nDebug.Assert(c == 4); // true"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public static ref int Max(ref int first, ref int second, ref int third)\n{\n    ref int max = first \u003e second ? ref first : ref second;\n    return max \u003e third ? ref max : ref third;\n}\n…\nint a = 1, b = 2, c = 3;\nMax(ref a, ref b, ref c) = 4;\nDebug.Assert(a == 1); // true\nDebug.Assert(b == 2); // true\nDebug.Assert(c == 4); // true",
        "code_language": "C#"
      },
      {
        "id": "0936007c-21a7-479d-a402-14851b5252a0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053251,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053251,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unsafe Ref Operations"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unsafe Ref Operations"
          }
        ]
      },
      {
        "id": "19e6ca56-46cf-46ef-b0ce-004d95d47e94",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053251,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053251,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In "
            ],
            [
              "System.Runtime.CompilerServices.Unsafe",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a set of unsafe operations have been defined that allow you to manipulate "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values as if they were pointers, basically."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In "
          },
          {
            "Text": "System.Runtime.CompilerServices.Unsafe",
            "AttrFlags": 2
          },
          {
            "Text": " a set of unsafe operations have been defined that allow you to manipulate "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " values as if they were pointers, basically."
          }
        ]
      },
      {
        "id": "380bd3b2-5c4f-45ad-995a-c8b296335206",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053252,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053252,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, reinterpreting a memory address ("
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") as a different type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, reinterpreting a memory address ("
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": ") as a different type:"
          }
        ]
      },
      {
        "id": "50b7ff0c-8901-4889-add0-3ba3affce031",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053252,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207160000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "byte[] b = new byte[4] { 0x42, 0x42, 0x42, 0x42 };\n\nref int r = ref Unsafe.As\u003cbyte, int\u003e(ref b[0]);\nAssert.Equal(0x42424242, r);\n\n0x0EF00EF0;\nAssert.Equal(0xFE, b[0] | b[1] | b[2] | b[3]);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "byte[] b = new byte[4] { 0x42, 0x42, 0x42, 0x42 };\n\nref int r = ref Unsafe.As\u003cbyte, int\u003e(ref b[0]);\nAssert.Equal(0x42424242, r);\n\n0x0EF00EF0;\nAssert.Equal(0xFE, b[0] | b[1] | b[2] | b[3]);",
        "code_language": "C#"
      },
      {
        "id": "3cba2023-26e5-4b82-b503-8062923f5ec7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053254,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053254,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Beware of "
            ],
            [
              "endianness",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Endianness"
                ]
              ]
            ],
            [
              " when doing this, though, e.g. check "
            ],
            [
              "BitConverter.IsLittleEndian",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if needed and handle accordingly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Beware of "
          },
          {
            "Text": "endianness",
            "Link": "https://en.wikipedia.org/wiki/Endianness"
          },
          {
            "Text": " when doing this, though, e.g. check "
          },
          {
            "Text": "BitConverter.IsLittleEndian",
            "AttrFlags": 2
          },
          {
            "Text": " if needed and handle accordingly."
          }
        ]
      },
      {
        "id": "e942816a-d305-4a3e-9e93-211d541c7fd1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053254,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053254,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or iterate over an array in an unsafe manner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or iterate over an array in an unsafe manner:"
          }
        ]
      },
      {
        "id": "eb8001ba-53e2-4722-8dc3-f3c64f56f0ff",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053254,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207160000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "int[] a = new int[] { 0x123, 0x234, 0x345, 0x456 };\n\nref int r1 = ref Unsafe.Add(ref a[0], 1);\nAssert.Equal(0x234, r1);\n\nref int r2 = ref Unsafe.Add(ref r1, 2);\nAssert.Equal(0x456, r2);\n\nref int r3 = ref Unsafe.Add(ref r2, -3);\nAssert.Equal(0x123, r3);"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "int[] a = new int[] { 0x123, 0x234, 0x345, 0x456 };\n\nref int r1 = ref Unsafe.Add(ref a[0], 1);\nAssert.Equal(0x234, r1);\n\nref int r2 = ref Unsafe.Add(ref r1, 2);\nAssert.Equal(0x456, r2);\n\nref int r3 = ref Unsafe.Add(ref r2, -3);\nAssert.Equal(0x123, r3);",
        "code_language": "C#"
      },
      {
        "id": "7e967cfc-2947-4a00-80d5-65f6d59f144f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053254,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053254,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or the similar "
            ],
            [
              "Subtract",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or the similar "
          },
          {
            "Text": "Subtract",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "id": "ad15731b-f784-4f6b-8caa-eaad88c1dc96",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053254,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207160000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "string[] a = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\n\nref string r1 = ref Unsafe.Subtract(ref a[0], -2);\nAssert.Equal(\"ghi\", r1);\n\nref string r2 = ref Unsafe.Subtract(ref r1, -1);\nAssert.Equal(\"jkl\", r2);\n\nref string r3 = ref Unsafe.Subtract(ref r2, 3);\nAssert.Equal(\"abc\", r3);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "string[] a = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\n\nref string r1 = ref Unsafe.Subtract(ref a[0], -2);\nAssert.Equal(\"ghi\", r1);\n\nref string r2 = ref Unsafe.Subtract(ref r1, -1);\nAssert.Equal(\"jkl\", r2);\n\nref string r3 = ref Unsafe.Subtract(ref r2, 3);\nAssert.Equal(\"abc\", r3);",
        "code_language": "C#"
      },
      {
        "id": "e0205a62-0c48-491d-8c10-e59582aa935c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053254,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053254,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, one can check if two "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values are the same i.e. same address:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, one can check if two "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " values are the same i.e. same address:"
          }
        ]
      },
      {
        "id": "69040e95-d341-439c-bd39-8ddc9370beb1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053255,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207160000,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "long[] a = new long[2];\n\nAssert.True(Unsafe.AreSame(ref a[0], ref a[0]));\nAssert.False(Unsafe.AreSame(ref a[0], ref a[1]));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "long[] a = new long[2];\n\nAssert.True(Unsafe.AreSame(ref a[0], ref a[0]));\nAssert.False(Unsafe.AreSame(ref a[0], ref a[1]));",
        "code_language": "C#"
      },
      {
        "id": "1dea515c-d69b-47a7-acf5-5b7c07bd96f1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053255,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053255,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Links"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Links"
          }
        ]
      },
      {
        "id": "1eeee848-3ff6-4d83-8696-808ed9ee6d44",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053255,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053255,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Roslyn Github Issue",
              [
                [
                  "a",
                  "https://github.com/dotnet/roslyn/issues/118"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Roslyn Github Issue",
            "Link": "https://github.com/dotnet/roslyn/issues/118"
          }
        ]
      },
      {
        "id": "674d4cb0-44ff-47e3-bea0-a9fcba65cccd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528053256,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528053256,
        "parent_id": "e55fda7d-6ee7-4706-b021-bd3ddbfbbf4c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "System.Runtime.CompilerServices.Unsafe on github",
              [
                [
                  "a",
                  "https://github.com/dotnet/corefx/tree/master/src/System.Runtime.CompilerServices.Unsafe"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "System.Runtime.CompilerServices.Unsafe on github",
            "Link": "https://github.com/dotnet/corefx/tree/master/src/System.Runtime.CompilerServices.Unsafe"
          }
        ]
      }
    ],
    "title": "ref return and ref local",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}