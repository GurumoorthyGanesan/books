{
  "ID": "1f0b057e-1e8d-4d47-bd2d-1f1cb8a1929c",
  "Root": {
    "id": "1f0b057e-1e8d-4d47-bd2d-1f1cb8a1929c",
    "alive": true,
    "content": [
      "e5e889bf-6360-4a14-847f-4f86a7ae5021",
      "86096caa-9322-4464-b545-afa4d88d9c43"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530237638,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550223840000,
    "parent_id": "d2786b82-24ad-4c4e-b5a8-5ef23d9feee9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "ConstantExpression Method"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "e5e889bf-6360-4a14-847f-4f86a7ae5021",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530237635,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530237635,
        "parent_id": "1f0b057e-1e8d-4d47-bd2d-1f1cb8a1929c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ConstantExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must be the same type of the "
            ],
            [
              "MemberExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The value in this example is a string, which is converted before creating the "
            ],
            [
              "ConstantExpression",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ConstantExpression",
            "AttrFlags": 2
          },
          {
            "Text": " must be the same type of the "
          },
          {
            "Text": "MemberExpression",
            "AttrFlags": 2
          },
          {
            "Text": ". The value in this example is a string, which is converted before creating the "
          },
          {
            "Text": "ConstantExpression",
            "AttrFlags": 2
          },
          {
            "Text": " instance."
          }
        ]
      },
      {
        "id": "86096caa-9322-4464-b545-afa4d88d9c43",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550223845496,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223840000,
        "parent_id": "1f0b057e-1e8d-4d47-bd2d-1f1cb8a1929c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private static ConstantExpression GetConstant(Type type, string value)\n{\n    // Discover the type, convert it, and create ConstantExpression \n    ConstantExpression constant = null;\n    if (type == typeof(int))\n    {\n        int num;\n        int.TryParse(value, out num);\n        constant = Expression.Constant(num);\n    }\n    else if(type == typeof(string))\n    {\n        constant = Expression.Constant(value);\n    }\n    else if (type == typeof(DateTime))\n    {\n        DateTime date;\n        DateTime.TryParse(value, out date);\n        constant = Expression.Constant(date);\n    }\n    else if (type == typeof(bool))\n    {                \n        bool flag;\n        if (bool.TryParse(value, out flag))\n        {\n            flag = true;\n        }\n        constant = Expression.Constant(flag);\n    }\n    else if (type == typeof(decimal))\n    {\n        decimal number;\n        decimal.TryParse(value, out number);\n        constant = Expression.Constant(number);\n    }\n    return constant;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "private static ConstantExpression GetConstant(Type type, string value)\n{\n    // Discover the type, convert it, and create ConstantExpression \n    ConstantExpression constant = null;\n    if (type == typeof(int))\n    {\n        int num;\n        int.TryParse(value, out num);\n        constant = Expression.Constant(num);\n    }\n    else if(type == typeof(string))\n    {\n        constant = Expression.Constant(value);\n    }\n    else if (type == typeof(DateTime))\n    {\n        DateTime date;\n        DateTime.TryParse(value, out date);\n        constant = Expression.Constant(date);\n    }\n    else if (type == typeof(bool))\n    {                \n        bool flag;\n        if (bool.TryParse(value, out flag))\n        {\n            flag = true;\n        }\n        constant = Expression.Constant(flag);\n    }\n    else if (type == typeof(decimal))\n    {\n        decimal number;\n        decimal.TryParse(value, out number);\n        constant = Expression.Constant(number);\n    }\n    return constant;\n}",
        "code_language": "C#"
      }
    ],
    "title": "ConstantExpression Method",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}