{
  "ID": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
  "Root": {
    "alive": true,
    "content": [
      "f65547b7-2cd4-43f7-9acc-1feb2232651f",
      "1d4ecaee-e614-49ef-b325-590b6d1221e6",
      "dcf521c9-0782-46be-a3bf-eedadc361270",
      "1462796e-8f72-4d5d-8f3e-1f3d992131e3",
      "5e484b2f-1c03-4a34-a14b-5cd5c3100a63"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528717546,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550214180000,
    "parent_id": "b11e628d-9a49-4dab-ba8d-ad0de127ca4a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Difference with method parameters ref and out"
        ]
      ]
    },
    "type": "page",
    "version": 18,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528717541,
        "id": "f65547b7-2cd4-43f7-9acc-1feb2232651f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528717541,
        "parent_id": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two possible ways to pass a value type by reference: "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The difference is that by passing it with "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the value must be initialized but not when passing it with "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Using "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ensures that the variable has a value after the method call:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two possible ways to pass a value type by reference: "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": ". The difference is that by passing it with "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " the value must be initialized but not when passing it with "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": ". Using "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " ensures that the variable has a value after the method call:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528717545,
        "id": "1d4ecaee-e614-49ef-b325-590b6d1221e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550214180000,
        "parent_id": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public void ByRef(ref int value)\n{\n    Console.WriteLine(nameof(ByRef) + value);\n    value += 4;\n    Console.WriteLine(nameof(ByRef) + value);\n}\n\npublic void ByOut(out int value)\n{\n    value += 4 // CS0269: Use of unassigned out parameter `value'  \n    Console.WriteLine(nameof(ByOut) + value); // CS0269: Use of unassigned out parameter `value'  \n\n    value = 4;\n    Console.WriteLine(nameof(ByOut) + value);\n}\n\npublic void TestOut()\n{\n    int outValue1;\n    ByOut(out outValue1); // prints 4\n\n    int outValue2 = 10;   // does not make any sense for out\n    ByOut(out outValue2); // prints 4\n}\n\npublic void TestRef()\n{\n    int refValue1;\n    ByRef(ref refValue1); // S0165  Use of unassigned local variable 'refValue'\n\n    int refValue2 = 0;\n    ByRef(ref refValue2); // prints 0 and 4\n\n    int refValue3 = 10;\n    ByRef(ref refValue3); // prints 10 and 14\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public void ByRef(ref int value)\n{\n    Console.WriteLine(nameof(ByRef) + value);\n    value += 4;\n    Console.WriteLine(nameof(ByRef) + value);\n}\n\npublic void ByOut(out int value)\n{\n    value += 4 // CS0269: Use of unassigned out parameter `value'  \n    Console.WriteLine(nameof(ByOut) + value); // CS0269: Use of unassigned out parameter `value'  \n\n    value = 4;\n    Console.WriteLine(nameof(ByOut) + value);\n}\n\npublic void TestOut()\n{\n    int outValue1;\n    ByOut(out outValue1); // prints 4\n\n    int outValue2 = 10;   // does not make any sense for out\n    ByOut(out outValue2); // prints 4\n}\n\npublic void TestRef()\n{\n    int refValue1;\n    ByRef(ref refValue1); // S0165  Use of unassigned local variable 'refValue'\n\n    int refValue2 = 0;\n    ByRef(ref refValue2); // prints 0 and 4\n\n    int refValue3 = 10;\n    ByRef(ref refValue3); // prints 10 and 14\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528717545,
        "id": "dcf521c9-0782-46be-a3bf-eedadc361270",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528717545,
        "parent_id": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The catch is that by using "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the parameter "
            ],
            [
              "must",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be initialized before leaving the method, therefore the following method is possible with "
            ],
            [
              "ref",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but not with "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The catch is that by using "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " the parameter "
          },
          {
            "Text": "must",
            "AttrFlags": 2
          },
          {
            "Text": " be initialized before leaving the method, therefore the following method is possible with "
          },
          {
            "Text": "ref",
            "AttrFlags": 2
          },
          {
            "Text": " but not with "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528717545,
        "id": "1462796e-8f72-4d5d-8f3e-1f3d992131e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550214180000,
        "parent_id": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public void EmtyRef(bool condition, ref int value)\n{\n    if (condition)\n    {\n        value += 10;\n    }\n}\n\npublic void EmtyOut(bool condition, out int value)\n{\n    if (condition)\n    {\n        value = 10;\n    }\n} //CS0177: The out parameter 'value' must be assigned before control leaves the current method"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public void EmtyRef(bool condition, ref int value)\n{\n    if (condition)\n    {\n        value += 10;\n    }\n}\n\npublic void EmtyOut(bool condition, out int value)\n{\n    if (condition)\n    {\n        value = 10;\n    }\n} //CS0177: The out parameter 'value' must be assigned before control leaves the current method",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528717546,
        "id": "5e484b2f-1c03-4a34-a14b-5cd5c3100a63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528717546,
        "parent_id": "baffe2c1-7b49-4704-b13e-1f91c8c13d7c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is because if "
            ],
            [
              "condition",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not hold, "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " goes unassigned."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is because if "
          },
          {
            "Text": "condition",
            "AttrFlags": 2
          },
          {
            "Text": " does not hold, "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " goes unassigned."
          }
        ]
      }
    ],
    "title": "Difference with method parameters ref and out",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}