{
  "ID": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
  "Root": {
    "alive": true,
    "content": [
      "b8050489-8c83-49a1-bae1-188493d1efe3",
      "cec41de3-c6a0-44ae-adc7-bf3399d7b26d",
      "a23691bb-a0df-4266-b440-8e5b2b5e0c04",
      "8d652fab-5649-48fb-a16c-d6afea9e3228",
      "077e0300-6dd3-4545-b85d-e4f3b7e774bf",
      "e18b3153-2fbe-4340-a940-b9b793410fcd",
      "2c66be11-f739-4d8a-8286-ff0f2bd2e7ff",
      "eb45ee72-471a-480b-b400-0d6ecad7f961",
      "2080a12b-72dc-4da5-8b5e-37f6f2b027d0",
      "9cc7e992-8a97-45b6-9d78-4d8fee8ed316",
      "0402d6e3-1ff4-4ba2-8a3d-8a03c47a0f6d",
      "89e7eeba-9925-4a88-a82c-b8996def39fa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530150308,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549791060000,
    "parent_id": "d0852dd6-2ee4-4d9e-af08-4f050ff9f517",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Factory Method pattern"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150304,
        "id": "b8050489-8c83-49a1-bae1-188493d1efe3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150304,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Factory Method is one of creational design patterns. It is used to deal with the problem of creating objects without specifying exact result type. This document will teach you how to use Factory Method DP properly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Factory Method is one of creational design patterns. It is used to deal with the problem of creating objects without specifying exact result type. This document will teach you how to use Factory Method DP properly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150306,
        "id": "cec41de3-c6a0-44ae-adc7-bf3399d7b26d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150306,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let me explain the idea of it to you on a simple example. Imagine you’re working in a factory that produces three types of devices - Ammeter, Voltmeter and resistance meter. You are writing a program for a central computer that will create selected device, but you don’t know final decision of your boss on what to produce."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let me explain the idea of it to you on a simple example. Imagine you’re working in a factory that produces three types of devices - Ammeter, Voltmeter and resistance meter. You are writing a program for a central computer that will create selected device, but you don’t know final decision of your boss on what to produce."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150306,
        "id": "a23691bb-a0df-4266-b440-8e5b2b5e0c04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150306,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s create an interface "
            ],
            [
              "IDevice",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with some common functions that all devices have:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s create an interface "
          },
          {
            "Text": "IDevice",
            "AttrFlags": 2
          },
          {
            "Text": " with some common functions that all devices have:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "8d652fab-5649-48fb-a16c-d6afea9e3228",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface IDevice\n{\n    int Measure();\n    void TurnOff();\n    void TurnOn();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface IDevice\n{\n    int Measure();\n    void TurnOff();\n    void TurnOn();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "077e0300-6dd3-4545-b85d-e4f3b7e774bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, we can create classes that represent our devices. Those classes must implement "
            ],
            [
              "IDevice",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, we can create classes that represent our devices. Those classes must implement "
          },
          {
            "Text": "IDevice",
            "AttrFlags": 2
          },
          {
            "Text": " interface:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "e18b3153-2fbe-4340-a940-b9b793410fcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class AmMeter : IDevice\n{\n    private Random r = null;\n    public AmMeter()\n    {\n        r = new Random();\n    }\n    public int Measure() { return r.Next(-25, 60); }\n    public void TurnOff() { Console.WriteLine(\"AmMeter flashes lights saying good bye!\"); }\n    public void TurnOn() { Console.WriteLine(\"AmMeter turns on...\"); }\n}\npublic class OhmMeter : IDevice\n{\n    private Random r = null;\n    public OhmMeter()\n    {\n        r = new Random();\n    }\n    public int Measure() { return r.Next(0, 1000000); }\n    public void TurnOff() { Console.WriteLine(\"OhmMeter flashes lights saying good bye!\"); }\n    public void TurnOn() { Console.WriteLine(\"OhmMeter turns on...\"); }\n}\npublic class VoltMeter : IDevice\n{\n    private Random r = null;\n    public VoltMeter()\n    {\n        r = new Random();\n    }\n    public int Measure() { return r.Next(-230, 230); }\n    public void TurnOff() { Console.WriteLine(\"VoltMeter flashes lights saying good bye!\"); }\n    public void TurnOn() { Console.WriteLine(\"VoltMeter turns on...\"); }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class AmMeter : IDevice\n{\n    private Random r = null;\n    public AmMeter()\n    {\n        r = new Random();\n    }\n    public int Measure() { return r.Next(-25, 60); }\n    public void TurnOff() { Console.WriteLine(\"AmMeter flashes lights saying good bye!\"); }\n    public void TurnOn() { Console.WriteLine(\"AmMeter turns on...\"); }\n}\npublic class OhmMeter : IDevice\n{\n    private Random r = null;\n    public OhmMeter()\n    {\n        r = new Random();\n    }\n    public int Measure() { return r.Next(0, 1000000); }\n    public void TurnOff() { Console.WriteLine(\"OhmMeter flashes lights saying good bye!\"); }\n    public void TurnOn() { Console.WriteLine(\"OhmMeter turns on...\"); }\n}\npublic class VoltMeter : IDevice\n{\n    private Random r = null;\n    public VoltMeter()\n    {\n        r = new Random();\n    }\n    public int Measure() { return r.Next(-230, 230); }\n    public void TurnOff() { Console.WriteLine(\"VoltMeter flashes lights saying good bye!\"); }\n    public void TurnOn() { Console.WriteLine(\"VoltMeter turns on...\"); }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "2c66be11-f739-4d8a-8286-ff0f2bd2e7ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we have to define factory method. Let’s create "
            ],
            [
              "DeviceFactory",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class with static method inside:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we have to define factory method. Let’s create "
          },
          {
            "Text": "DeviceFactory",
            "AttrFlags": 2
          },
          {
            "Text": " class with static method inside:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "eb45ee72-471a-480b-b400-0d6ecad7f961",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public enum Device\n{\n    AM,\n    VOLT,\n    OHM\n}\npublic class DeviceFactory\n{\n    public static IDevice CreateDevice(Device d)\n    {\n        switch(d)\n        {\n            case Device.AM: return new AmMeter();\n            case Device.VOLT: return new VoltMeter();\n            case Device.OHM: return new OhmMeter();\n            default: return new AmMeter();\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public enum Device\n{\n    AM,\n    VOLT,\n    OHM\n}\npublic class DeviceFactory\n{\n    public static IDevice CreateDevice(Device d)\n    {\n        switch(d)\n        {\n            case Device.AM: return new AmMeter();\n            case Device.VOLT: return new VoltMeter();\n            case Device.OHM: return new OhmMeter();\n            default: return new AmMeter();\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "2080a12b-72dc-4da5-8b5e-37f6f2b027d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Great! Let’s test our code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Great! Let’s test our code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "9cc7e992-8a97-45b6-9d78-4d8fee8ed316",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Program\n{\n    static void Main(string[] args)\n    {\n        IDevice device = DeviceFactory.CreateDevice(Device.AM);\n        device.TurnOn();\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        device.TurnOff();\n        Console.WriteLine();\n\n        device = DeviceFactory.CreateDevice(Device.VOLT);\n        device.TurnOn();\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        device.TurnOff();\n        Console.WriteLine();\n\n        device = DeviceFactory.CreateDevice(Device.OHM);\n        device.TurnOn();\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        device.TurnOff();\n        Console.WriteLine();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Program\n{\n    static void Main(string[] args)\n    {\n        IDevice device = DeviceFactory.CreateDevice(Device.AM);\n        device.TurnOn();\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        device.TurnOff();\n        Console.WriteLine();\n\n        device = DeviceFactory.CreateDevice(Device.VOLT);\n        device.TurnOn();\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        device.TurnOff();\n        Console.WriteLine();\n\n        device = DeviceFactory.CreateDevice(Device.OHM);\n        device.TurnOn();\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        Console.WriteLine(device.Measure());\n        device.TurnOff();\n        Console.WriteLine();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "0402d6e3-1ff4-4ba2-8a3d-8a03c47a0f6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is the example output you might see after running this code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is the example output you might see after running this code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530150307,
        "id": "89e7eeba-9925-4a88-a82c-b8996def39fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530150307,
        "parent_id": "3837ecc4-7d38-4410-afc9-ed3103c02ff1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AmMeter turns on…366334324AmMeter flashes lights saying good bye!VoltMeter turns on…102-618513836VoltMeter flashes lights saying good bye!OhmMeter turns on…723828368536685412800266578595OhmMeter flashes lights saying good bye!"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "AmMeter turns on…366334324AmMeter flashes lights saying good bye!VoltMeter turns on…102-618513836VoltMeter flashes lights saying good bye!OhmMeter turns on…723828368536685412800266578595OhmMeter flashes lights saying good bye!"
          }
        ]
      }
    ],
    "title": "Factory Method pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}