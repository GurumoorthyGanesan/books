{
  "ID": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
  "Root": {
    "alive": true,
    "content": [
      "de7283fd-a668-41b4-a157-c0a61c62bdc6",
      "68fb1318-28c9-4b7f-8094-b7cbe355fdf0",
      "34567897-5ad1-40a1-8325-1fd4e655c92f",
      "5ecfd579-c146-4c62-a83a-ce208f11715f",
      "a9c1905f-dddc-424f-b57b-24e6c223e7f5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528665326,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550213520000,
    "parent_id": "f0c07076-1721-4628-bc3b-9d40618aeb3a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Password Hashing"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528665322,
        "id": "de7283fd-a668-41b4-a157-c0a61c62bdc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528665322,
        "parent_id": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passwords should never be stored as plain text! They should be hashed with a randomly generated salt (to defend against rainbow table attacks) using a slow password hashing algorithm. A high number of iterations (\u003e 10k) can be used to slow down brute force attacks. A delay of ~100ms is acceptable to a user logging in, but makes breaking a long password difficult. When choosing a number of iterations you should use the maximum tolerable value for your application and increase it as computer performance improves. You will also need to consider stopping repeated requests which could be used as a DoS attack."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Passwords should never be stored as plain text! They should be hashed with a randomly generated salt (to defend against rainbow table attacks) using a slow password hashing algorithm. A high number of iterations (\u003e 10k) can be used to slow down brute force attacks. A delay of ~100ms is acceptable to a user logging in, but makes breaking a long password difficult. When choosing a number of iterations you should use the maximum tolerable value for your application and increase it as computer performance improves. You will also need to consider stopping repeated requests which could be used as a DoS attack."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528665325,
        "id": "68fb1318-28c9-4b7f-8094-b7cbe355fdf0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528665325,
        "parent_id": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When hashing for the first time a salt can be generated for you, the resulting hash and salt can then be stored to a file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When hashing for the first time a salt can be generated for you, the resulting hash and salt can then be stored to a file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528665325,
        "id": "34567897-5ad1-40a1-8325-1fd4e655c92f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550213520000,
        "parent_id": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void firstHash(string userName, string userPassword, int numberOfItterations)\n{\n    Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(userPassword, 8, numberOfItterations);    //Hash the password with a 8 byte salt\n    byte[] hashedPassword = PBKDF2.GetBytes(20);    //Returns a 20 byte hash\n    byte[] salt = PBKDF2.Salt;\n    writeHashToFile(userName, hashedPassword, salt, numberOfItterations); //Store the hashed password with the salt and number of itterations to check against future password entries\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private void firstHash(string userName, string userPassword, int numberOfItterations)\n{\n    Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(userPassword, 8, numberOfItterations);    //Hash the password with a 8 byte salt\n    byte[] hashedPassword = PBKDF2.GetBytes(20);    //Returns a 20 byte hash\n    byte[] salt = PBKDF2.Salt;\n    writeHashToFile(userName, hashedPassword, salt, numberOfItterations); //Store the hashed password with the salt and number of itterations to check against future password entries\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528665326,
        "id": "5ecfd579-c146-4c62-a83a-ce208f11715f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528665326,
        "parent_id": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Checking an existing users password, read their hash and salt from a file and compare to the hash of the entered password"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Checking an existing users password, read their hash and salt from a file and compare to the hash of the entered password"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528665326,
        "id": "a9c1905f-dddc-424f-b57b-24e6c223e7f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550213520000,
        "parent_id": "6287a690-7b42-410f-8ca4-01d0f3f9f773",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private bool checkPassword(string userName, string userPassword, int numberOfItterations)\n{\n    byte[] usersHash = getUserHashFromFile(userName);\n    byte[] userSalt = getUserSaltFromFile(userName);\n    Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(userPassword, userSalt, numberOfItterations);    //Hash the password with the users salt\n    byte[] hashedPassword = PBKDF2.GetBytes(20);    //Returns a 20 byte hash            \n    bool passwordsMach = comparePasswords(usersHash, hashedPassword);    //Compares byte arrays\n    return passwordsMach;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private bool checkPassword(string userName, string userPassword, int numberOfItterations)\n{\n    byte[] usersHash = getUserHashFromFile(userName);\n    byte[] userSalt = getUserSaltFromFile(userName);\n    Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(userPassword, userSalt, numberOfItterations);    //Hash the password with the users salt\n    byte[] hashedPassword = PBKDF2.GetBytes(20);    //Returns a 20 byte hash            \n    bool passwordsMach = comparePasswords(usersHash, hashedPassword);    //Compares byte arrays\n    return passwordsMach;\n}",
        "code_language": "C#"
      }
    ],
    "title": "Password Hashing",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}