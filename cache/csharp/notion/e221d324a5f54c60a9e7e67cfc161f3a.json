{
  "ID": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
  "Root": {
    "alive": true,
    "content": [
      "a28ebc38-2f9f-49fc-a337-9d71715e166f",
      "da26a60f-d833-412e-b95a-addd8b4b9a2b",
      "909cf8e5-d9e2-440d-a3fb-a45b81d7d260",
      "a444b286-8b2e-4de7-a340-c3c071020dc8",
      "c3854648-d886-4d02-8f67-8eb2ba8ae0af",
      "6bba4c7c-7889-46ba-82b3-b5ab783604d6",
      "c22e70f6-93bf-438c-bf2f-3f37605c3e8d",
      "42f09887-352d-4d75-bdb7-abf701228135",
      "216c685b-3b41-429d-a24d-37159ede3b56",
      "0050e008-81fd-497d-b025-a329d8b17615",
      "89f41101-7c1b-4f0d-a1f6-ed1b23207c35",
      "b2515b85-e4fa-4b7e-a6f5-599265bbeb42",
      "cbd79b05-3bb5-4496-a782-8856f8be7f42",
      "0d0c81fa-441e-4e36-8ddf-cea339d1bb15",
      "f26977ab-d5d6-46e4-9ce6-4c24dcef28e9",
      "6c723c74-92c6-4c7e-9af3-5adf5509ea8e",
      "a3390fa7-d66f-48d0-bf2b-1fc302dfe7ca",
      "0ab1059b-97e8-400e-b21f-2c4604434b7f",
      "f24817d3-ae84-4b54-9a7c-4e06cb8ee76b",
      "20a81541-7eee-43cd-a006-f00248d512d9",
      "11ad8dcb-d57e-4d61-86f4-09f3dc7f7de1",
      "c0bd20a4-1101-4963-b8fe-72543b359a1a",
      "981f1e57-69c0-427f-abf1-309b8fb1fad3",
      "ba78131d-c59f-4d3d-8b0f-b13cc3c854a4",
      "76abfb8b-e29c-4a1d-acda-3be6885da0b9",
      "d98e62f3-e935-4bd1-8f10-947d535aa764",
      "eaa8f5f8-8f03-4cd0-baf9-37d68004fa7c",
      "94bbe47e-976f-43ee-8596-4397397f20f3",
      "25be5569-32d2-4385-8e2e-f0e2b4899863",
      "eb9c001f-b1cb-48f9-ba84-b26dd6e7e895",
      "e9720ac6-98a9-42de-87ef-d4ae2c9e8ff7",
      "04190b7d-3f12-4a7b-bffd-671e0353d4cd",
      "d4d6543a-3c05-435f-9eee-be61ee71e37d",
      "8ceeec88-35e8-4b88-b84c-fec38203eae1",
      "64451700-872c-454d-9f1e-ca58ff4881c4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524856524,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549938780000,
    "parent_id": "307cbc92-1d45-43c5-9927-7963d630a818",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Expression-bodied function members"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856514,
        "id": "a28ebc38-2f9f-49fc-a337-9d71715e166f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856514,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression-bodied function members allow the use of lambda expressions as member bodies. For simple members, it can result in cleaner and more readable code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression-bodied function members allow the use of lambda expressions as member bodies. For simple members, it can result in cleaner and more readable code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856517,
        "id": "da26a60f-d833-412e-b95a-addd8b4b9a2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856517,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression-bodied functions can be used for properties, indexers, methods, and operators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression-bodied functions can be used for properties, indexers, methods, and operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856517,
        "id": "909cf8e5-d9e2-440d-a3fb-a45b81d7d260",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856517,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Properties"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Properties"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856517,
        "id": "a444b286-8b2e-4de7-a340-c3c071020dc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public decimal TotalPrice =\u003e BasePrice + Taxes;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public decimal TotalPrice =\u003e BasePrice + Taxes;",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856518,
        "id": "c3854648-d886-4d02-8f67-8eb2ba8ae0af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856518,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856518,
        "id": "6bba4c7c-7889-46ba-82b3-b5ab783604d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public decimal TotalPrice\n{\n    get\n    {\n        return BasePrice + Taxes;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public decimal TotalPrice\n{\n    get\n    {\n        return BasePrice + Taxes;\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856518,
        "id": "c22e70f6-93bf-438c-bf2f-3f37605c3e8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856518,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When an expression-bodied function is used with a property, the property is implemented as a getter-only property."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When an expression-bodied function is used with a property, the property is implemented as a getter-only property."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856519,
        "id": "42f09887-352d-4d75-bdb7-abf701228135",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856519,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "View Demo",
              [
                [
                  "a",
                  "https://dotnetfiddle.net/djFd7O"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "View Demo",
            "Link": "https://dotnetfiddle.net/djFd7O"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "216c685b-3b41-429d-a24d-37159ede3b56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856520,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Indexers"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Indexers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "0050e008-81fd-497d-b025-a329d8b17615",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public object this[string key] =\u003e dictionary[key];"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public object this[string key] =\u003e dictionary[key];",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "89f41101-7c1b-4f0d-a1f6-ed1b23207c35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856520,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "b2515b85-e4fa-4b7e-a6f5-599265bbeb42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public object this[string key]\n{\n    get\n    {\n        return dictionary[key];\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public object this[string key]\n{\n    get\n    {\n        return dictionary[key];\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "cbd79b05-3bb5-4496-a782-8856f8be7f42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856520,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Methods"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "0d0c81fa-441e-4e36-8ddf-cea339d1bb15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "static int Multiply(int a, int b) =\u003e a * b;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "static int Multiply(int a, int b) =\u003e a * b;",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "f26977ab-d5d6-46e4-9ce6-4c24dcef28e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856520,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856520,
        "id": "6c723c74-92c6-4c7e-9af3-5adf5509ea8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "static int Multiply(int a, int b)\n{\n    return a * b;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "static int Multiply(int a, int b)\n{\n    return a * b;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856521,
        "id": "a3390fa7-d66f-48d0-bf2b-1fc302dfe7ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856521,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which can also be used with "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which can also be used with "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " methods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856521,
        "id": "0ab1059b-97e8-400e-b21f-2c4604434b7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public void Dispose() =\u003e resource?.Dispose();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public void Dispose() =\u003e resource?.Dispose();",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856521,
        "id": "f24817d3-ae84-4b54-9a7c-4e06cb8ee76b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856521,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An override of "
            ],
            [
              "ToString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could be added to the "
            ],
            [
              "Pair\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An override of "
          },
          {
            "Text": "ToString",
            "AttrFlags": 2
          },
          {
            "Text": " could be added to the "
          },
          {
            "Text": "Pair\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856521,
        "id": "20a81541-7eee-43cd-a006-f00248d512d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public override string ToString() =\u003e $\"{First}, {Second}\";"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public override string ToString() =\u003e $\"{First}, {Second}\";",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856521,
        "id": "11ad8dcb-d57e-4d61-86f4-09f3dc7f7de1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856521,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, this simplistic approach works with the "
            ],
            [
              "override",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, this simplistic approach works with the "
          },
          {
            "Text": "override",
            "AttrFlags": 2
          },
          {
            "Text": " keyword:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856521,
        "id": "c0bd20a4-1101-4963-b8fe-72543b359a1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938720000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Foo\n{\n    public int Bar { get; }\n\n    public string override ToString() =\u003e $\"Bar: {Bar}\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public class Foo\n{\n    public int Bar { get; }\n\n    public string override ToString() =\u003e $\"Bar: {Bar}\";\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856522,
        "id": "981f1e57-69c0-427f-abf1-309b8fb1fad3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856522,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856522,
        "id": "ba78131d-c59f-4d3d-8b0f-b13cc3c854a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856522,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also can be used by operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also can be used by operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856522,
        "id": "76abfb8b-e29c-4a1d-acda-3be6885da0b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938780000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Land\n{\n    public double Area { get; set; }\n\n    public static Land operator +(Land first, Land second) =\u003e\n        new Land { Area = first.Area + second.Area };\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public class Land\n{\n    public double Area { get; set; }\n\n    public static Land operator +(Land first, Land second) =\u003e\n        new Land { Area = first.Area + second.Area };\n}\n",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856522,
        "id": "d98e62f3-e935-4bd1-8f10-947d535aa764",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856522,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Limitations"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Limitations"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856522,
        "id": "eaa8f5f8-8f03-4cd0-baf9-37d68004fa7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856522,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression-bodied function members have some limitations. They can’t contain block statements and any other statements that contain blocks: "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "foreach",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "do",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "try",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression-bodied function members have some limitations. They can’t contain block statements and any other statements that contain blocks: "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "foreach",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "do",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "try",
            "AttrFlags": 2
          },
          {
            "Text": ", etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856523,
        "id": "94bbe47e-976f-43ee-8596-4397397f20f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856523,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements can be replaced with ternary operators. Some "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "foreach",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements can be converted to LINQ queries, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " statements can be replaced with ternary operators. Some "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "foreach",
            "AttrFlags": 2
          },
          {
            "Text": " statements can be converted to LINQ queries, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856523,
        "id": "25be5569-32d2-4385-8e2e-f0e2b4899863",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938780000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "IEnumerable\u003cstring\u003e Digits\n{\n    get\n    {\n        for (int i = 0; i \u003c 10; i++)\n            yield return i.ToString();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "IEnumerable\u003cstring\u003e Digits\n{\n    get\n    {\n        for (int i = 0; i \u003c 10; i++)\n            yield return i.ToString();\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856523,
        "id": "eb9c001f-b1cb-48f9-ba84-b26dd6e7e895",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938780000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "IEnumerable\u003cstring\u003e Digits =\u003e Enumerable.Range(0, 10).Select(i =\u003e i.ToString());"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "IEnumerable\u003cstring\u003e Digits =\u003e Enumerable.Range(0, 10).Select(i =\u003e i.ToString());",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856523,
        "id": "e9720ac6-98a9-42de-87ef-d4ae2c9e8ff7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856523,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In all other cases, the old syntax for function members can be used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In all other cases, the old syntax for function members can be used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856523,
        "id": "04190b7d-3f12-4a7b-bffd-671e0353d4cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856523,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression-bodied function members can contain "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but it’s often redundant:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression-bodied function members can contain "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": ", but it’s often redundant:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856524,
        "id": "d4d6543a-3c05-435f-9eee-be61ee71e37d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938780000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "async Task\u003cint\u003e Foo() =\u003e await Bar();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "async Task\u003cint\u003e Foo() =\u003e await Bar();",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856524,
        "id": "8ceeec88-35e8-4b88-b84c-fec38203eae1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524856524,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Can be replaced with:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Can be replaced with:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524856524,
        "id": "64451700-872c-454d-9f1e-ca58ff4881c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549938780000,
        "parent_id": "e221d324-a5f5-4c60-a9e7-e67cfc161f3a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Task\u003cint\u003e Foo() =\u003e Bar();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Task\u003cint\u003e Foo() =\u003e Bar();",
        "code_language": "C#"
      }
    ],
    "title": "Expression-bodied function members",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}