{
  "ID": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
  "Root": {
    "alive": true,
    "content": [
      "98a843f0-968e-4122-872c-00b3bed869a0",
      "4e96afe8-a8fb-4a9c-82e0-4df05c95c13b",
      "d85dbf62-549c-4107-8a2c-6d9153d8b69a",
      "3cbc811f-6139-48de-a72d-015ee35bf6a5",
      "43ecb392-6b97-491f-8e4a-5f808fe248b8",
      "ae2b0aee-d008-493c-a56b-a27c32b4fb8e",
      "84c91914-c06a-4e2a-92c4-41c878c637c5",
      "4c1562e6-6f84-4089-b9ad-cd89a86618cf",
      "1dff7621-7db1-4a3e-acb3-321d8ead0054"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527230759,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549622220000,
    "parent_id": "73b5ab63-2700-4b45-89fb-fa4c13a44d84",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Effective usage of underlying NullableT argument"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230755,
        "id": "98a843f0-968e-4122-872c-00b3bed869a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527230755,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any nullable type is a "
            ],
            [
              "generic",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " type. And any nullable type is a "
            ],
            [
              "value",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any nullable type is a "
          },
          {
            "Text": "generic",
            "AttrFlags": 1
          },
          {
            "Text": " type. And any nullable type is a "
          },
          {
            "Text": "value",
            "AttrFlags": 1
          },
          {
            "Text": " type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230758,
        "id": "4e96afe8-a8fb-4a9c-82e0-4df05c95c13b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527230758,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are some tricks which allow to "
            ],
            [
              "effectively use",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the result of the "
            ],
            [
              "Nullable.GetUnderlyingType",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/system.nullable.getunderlyingtype(v=vs.110).aspx"
                ]
              ]
            ],
            [
              " method when creating code related to "
            ],
            [
              "reflection",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/28/reflection"
                ]
              ]
            ],
            [
              "/code-generation purposes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are some tricks which allow to "
          },
          {
            "Text": "effectively use",
            "AttrFlags": 1
          },
          {
            "Text": " the result of the "
          },
          {
            "Text": "Nullable.GetUnderlyingType",
            "Link": "https://msdn.microsoft.com/en-us/library/system.nullable.getunderlyingtype(v=vs.110).aspx"
          },
          {
            "Text": " method when creating code related to "
          },
          {
            "Text": "reflection",
            "Link": "http://stackoverflow.com/documentation/c%23/28/reflection"
          },
          {
            "Text": "/code-generation purposes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230758,
        "id": "d85dbf62-549c-4107-8a2c-6d9153d8b69a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549622220000,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static class TypesHelper {\n    public static bool IsNullable(this Type type) {\n        Type underlyingType;\n        return IsNullable(type, out underlyingType);\n    }\n    public static bool IsNullable(this Type type, out Type underlyingType) {\n        underlyingType = Nullable.GetUnderlyingType(type);\n        return underlyingType != null;\n    }\n    public static Type GetNullable(Type type) {\n        Type underlyingType;\n        return IsNullable(type, out underlyingType) ? type : NullableTypesCache.Get(type);\n    }\n    public static bool IsExactOrNullable(this Type type, Func\u003cType, bool\u003e predicate) {\n        Type underlyingType;\n        if(IsNullable(type, out underlyingType))\n            return IsExactOrNullable(underlyingType, predicate);\n        return predicate(type);\n    }\n    public static bool IsExactOrNullable\u003cT\u003e(this Type type)\n        where T : struct {\n        return IsExactOrNullable(type, t =\u003e Equals(t, typeof(T)));\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public static class TypesHelper {\n    public static bool IsNullable(this Type type) {\n        Type underlyingType;\n        return IsNullable(type, out underlyingType);\n    }\n    public static bool IsNullable(this Type type, out Type underlyingType) {\n        underlyingType = Nullable.GetUnderlyingType(type);\n        return underlyingType != null;\n    }\n    public static Type GetNullable(Type type) {\n        Type underlyingType;\n        return IsNullable(type, out underlyingType) ? type : NullableTypesCache.Get(type);\n    }\n    public static bool IsExactOrNullable(this Type type, Func\u003cType, bool\u003e predicate) {\n        Type underlyingType;\n        if(IsNullable(type, out underlyingType))\n            return IsExactOrNullable(underlyingType, predicate);\n        return predicate(type);\n    }\n    public static bool IsExactOrNullable\u003cT\u003e(this Type type)\n        where T : struct {\n        return IsExactOrNullable(type, t =\u003e Equals(t, typeof(T)));\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230758,
        "id": "3cbc811f-6139-48de-a72d-015ee35bf6a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527230758,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230758,
        "id": "43ecb392-6b97-491f-8e4a-5f808fe248b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549622220000,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Type type = typeof(int).GetNullable();\nConsole.WriteLine(type.ToString());\n\nif(type.IsNullable())\n    Console.WriteLine(\"Type is nullable.\");\nType underlyingType;\nif(type.IsNullable(out underlyingType))\n    Console.WriteLine(\"The underlying type is \" + underlyingType.Name + \".\");\nif(type.IsExactOrNullable\u003cint\u003e())\n    Console.WriteLine(\"Type is either exact or nullable Int32.\");\nif(!type.IsExactOrNullable(t =\u003e t.IsEnum))\n    Console.WriteLine(\"Type is neither exact nor nullable enum.\");"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Type type = typeof(int).GetNullable();\nConsole.WriteLine(type.ToString());\n\nif(type.IsNullable())\n    Console.WriteLine(\"Type is nullable.\");\nType underlyingType;\nif(type.IsNullable(out underlyingType))\n    Console.WriteLine(\"The underlying type is \" + underlyingType.Name + \".\");\nif(type.IsExactOrNullable\u003cint\u003e())\n    Console.WriteLine(\"Type is either exact or nullable Int32.\");\nif(!type.IsExactOrNullable(t =\u003e t.IsEnum))\n    Console.WriteLine(\"Type is neither exact nor nullable enum.\");",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230758,
        "id": "ae2b0aee-d008-493c-a56b-a27c32b4fb8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527230758,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230758,
        "id": "84c91914-c06a-4e2a-92c4-41c878c637c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527230759,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "System.Nullable`1[System.Int32]\nType is nullable.\nThe underlying type is Int32.\nType is either exact or nullable Int32.\nType is neither exact nor nullable enum."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "System.Nullable`1[System.Int32]\nType is nullable.\nThe underlying type is Int32.\nType is either exact or nullable Int32.\nType is neither exact nor nullable enum.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230759,
        "id": "4c1562e6-6f84-4089-b9ad-cd89a86618cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527230759,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PS. The "
            ],
            [
              "NullableTypesCache",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is defined as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PS. The "
          },
          {
            "Text": "NullableTypesCache",
            "AttrFlags": 2
          },
          {
            "Text": " is defined as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527230759,
        "id": "1dff7621-7db1-4a3e-acb3-321d8ead0054",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549622220000,
        "parent_id": "5ce8cd8c-9a01-4094-8fc9-77d36959d849",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "static class NullableTypesCache {\n    readonly static ConcurrentDictionary\u003cType, Type\u003e cache = new ConcurrentDictionary\u003cType, Type\u003e();\n    static NullableTypesCache() {\n        cache.TryAdd(typeof(byte), typeof(Nullable\u003cbyte\u003e));\n        cache.TryAdd(typeof(short), typeof(Nullable\u003cshort\u003e));\n        cache.TryAdd(typeof(int), typeof(Nullable\u003cint\u003e));\n        cache.TryAdd(typeof(long), typeof(Nullable\u003clong\u003e));\n        cache.TryAdd(typeof(float), typeof(Nullable\u003cfloat\u003e));\n        cache.TryAdd(typeof(double), typeof(Nullable\u003cdouble\u003e));\n        cache.TryAdd(typeof(decimal), typeof(Nullable\u003cdecimal\u003e));\n        cache.TryAdd(typeof(sbyte), typeof(Nullable\u003csbyte\u003e));\n        cache.TryAdd(typeof(ushort), typeof(Nullable\u003cushort\u003e));\n        cache.TryAdd(typeof(uint), typeof(Nullable\u003cuint\u003e));\n        cache.TryAdd(typeof(ulong), typeof(Nullable\u003culong\u003e));\n        //... \n    }\n    readonly static Type NullableBase = typeof(Nullable\u003c\u003e);\n    internal static Type Get(Type type) {\n        // Try to avoid the expensive MakeGenericType method call\n        return cache.GetOrAdd(type, t =\u003e NullableBase.MakeGenericType(t)); \n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "static class NullableTypesCache {\n    readonly static ConcurrentDictionary\u003cType, Type\u003e cache = new ConcurrentDictionary\u003cType, Type\u003e();\n    static NullableTypesCache() {\n        cache.TryAdd(typeof(byte), typeof(Nullable\u003cbyte\u003e));\n        cache.TryAdd(typeof(short), typeof(Nullable\u003cshort\u003e));\n        cache.TryAdd(typeof(int), typeof(Nullable\u003cint\u003e));\n        cache.TryAdd(typeof(long), typeof(Nullable\u003clong\u003e));\n        cache.TryAdd(typeof(float), typeof(Nullable\u003cfloat\u003e));\n        cache.TryAdd(typeof(double), typeof(Nullable\u003cdouble\u003e));\n        cache.TryAdd(typeof(decimal), typeof(Nullable\u003cdecimal\u003e));\n        cache.TryAdd(typeof(sbyte), typeof(Nullable\u003csbyte\u003e));\n        cache.TryAdd(typeof(ushort), typeof(Nullable\u003cushort\u003e));\n        cache.TryAdd(typeof(uint), typeof(Nullable\u003cuint\u003e));\n        cache.TryAdd(typeof(ulong), typeof(Nullable\u003culong\u003e));\n        //... \n    }\n    readonly static Type NullableBase = typeof(Nullable\u003c\u003e);\n    internal static Type Get(Type type) {\n        // Try to avoid the expensive MakeGenericType method call\n        return cache.GetOrAdd(type, t =\u003e NullableBase.MakeGenericType(t)); \n    }\n}",
        "code_language": "C#"
      }
    ],
    "title": "Effective usage of underlying NullableT argument",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}