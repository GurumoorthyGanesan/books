{
  "ID": "a35dbad3-deda-4dcc-8e09-c1ba223576e1",
  "Root": {
    "id": "a35dbad3-deda-4dcc-8e09-c1ba223576e1",
    "alive": true,
    "content": [
      "a9d0c0b1-99e3-491e-876f-1ae801815670"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530103542,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550223180000,
    "parent_id": "3bfa5008-c262-4959-8331-361cc5d24a98",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dependency injection using MEF"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "id": "a9d0c0b1-99e3-491e-876f-1ae801815670",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550223229956,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223180000,
        "parent_id": "a35dbad3-deda-4dcc-8e09-c1ba223576e1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public interface ILogger\n  {\n      void Log(string message);\n  }\n\n  [Export(typeof(ILogger))]\n  [ExportMetadata(\"Name\", \"Console\")]  \n  public class ConsoleLogger:ILogger\n  {\n      public void Log(string message)\n      {\n          Console.WriteLine(message);\n      }\n  }\n\n  [Export(typeof(ILogger))]\n  [ExportMetadata(\"Name\", \"File\")]  \n  public class FileLogger:ILogger\n  {\n      public void Log(string message)\n      {\n          //Write the message to file\n      }\n  }\n\n  public class User\n  {  \n      private readonly ILogger logger;\n      public User(ILogger logger)   \n      {\n          this.logger = logger;\n      }\n      public void LogUser(string message)\n      {\n          logger.Log(message)  ;\n      }\n  }\n\n  public interface ILoggerMetaData\n  {\n      string Name { get; }\n  }\n  \n  internal class Program\n  {\n      private CompositionContainer _container;\n      \n      [ImportMany]\n      private IEnumerable\u003cLazy\u003cILogger, ILoggerMetaData\u003e\u003e _loggers;\n      \n      private static void Main()\n      {            \n          ComposeLoggers();\n          Lazy\u003cILogger, ILoggerMetaData\u003e loggerNameAndLoggerMapping = _ loggers.First((n) =\u003e ((n.Metadata.Name.ToUpper() ==\"Console\"));\n          ILogger logger= loggerNameAndLoggerMapping.Value\n          var user = new User(logger);\n          user.LogUser(\"user name\");\n      }\n      \n      private void ComposeLoggers()\n      {\n          //An aggregate catalog that combines multiple catalogs\n          var catalog = new AggregateCatalog();\n          string loggersDllDirectory =Path.Combine(Utilities.GetApplicationDirectory(), \"Loggers\");\n          if (!Directory.Exists(loggersDllDirectory ))\n          {\n              Directory.CreateDirectory(loggersDllDirectory );\n          }\n          //Adds all the parts found in the same assembly as the PluginManager class\n          catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly));\n          catalog.Catalogs.Add(new DirectoryCatalog(loggersDllDirectory ));\n          \n          //Create the CompositionContainer with the parts in the catalog\n          _container = new CompositionContainer(catalog);\n          \n          //Fill the imports of this object\n          try\n          {\n              this._container.ComposeParts(this);\n          }\n          catch (CompositionException compositionException)\n          {\n              throw new CompositionException(compositionException.Message);\n          }\n      } \n  }"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public interface ILogger\n  {\n      void Log(string message);\n  }\n\n  [Export(typeof(ILogger))]\n  [ExportMetadata(\"Name\", \"Console\")]  \n  public class ConsoleLogger:ILogger\n  {\n      public void Log(string message)\n      {\n          Console.WriteLine(message);\n      }\n  }\n\n  [Export(typeof(ILogger))]\n  [ExportMetadata(\"Name\", \"File\")]  \n  public class FileLogger:ILogger\n  {\n      public void Log(string message)\n      {\n          //Write the message to file\n      }\n  }\n\n  public class User\n  {  \n      private readonly ILogger logger;\n      public User(ILogger logger)   \n      {\n          this.logger = logger;\n      }\n      public void LogUser(string message)\n      {\n          logger.Log(message)  ;\n      }\n  }\n\n  public interface ILoggerMetaData\n  {\n      string Name { get; }\n  }\n  \n  internal class Program\n  {\n      private CompositionContainer _container;\n      \n      [ImportMany]\n      private IEnumerable\u003cLazy\u003cILogger, ILoggerMetaData\u003e\u003e _loggers;\n      \n      private static void Main()\n      {            \n          ComposeLoggers();\n          Lazy\u003cILogger, ILoggerMetaData\u003e loggerNameAndLoggerMapping = _ loggers.First((n) =\u003e ((n.Metadata.Name.ToUpper() ==\"Console\"));\n          ILogger logger= loggerNameAndLoggerMapping.Value\n          var user = new User(logger);\n          user.LogUser(\"user name\");\n      }\n      \n      private void ComposeLoggers()\n      {\n          //An aggregate catalog that combines multiple catalogs\n          var catalog = new AggregateCatalog();\n          string loggersDllDirectory =Path.Combine(Utilities.GetApplicationDirectory(), \"Loggers\");\n          if (!Directory.Exists(loggersDllDirectory ))\n          {\n              Directory.CreateDirectory(loggersDllDirectory );\n          }\n          //Adds all the parts found in the same assembly as the PluginManager class\n          catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly));\n          catalog.Catalogs.Add(new DirectoryCatalog(loggersDllDirectory ));\n          \n          //Create the CompositionContainer with the parts in the catalog\n          _container = new CompositionContainer(catalog);\n          \n          //Fill the imports of this object\n          try\n          {\n              this._container.ComposeParts(this);\n          }\n          catch (CompositionException compositionException)\n          {\n              throw new CompositionException(compositionException.Message);\n          }\n      } \n  }",
        "code_language": "C#"
      }
    ],
    "title": "Dependency injection using MEF",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}