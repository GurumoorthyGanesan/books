{
  "ID": "755c12b5-2367-4efc-bbe9-719f1f6f1f77",
  "Root": {
    "id": "755c12b5-2367-4efc-bbe9-719f1f6f1f77",
    "alive": true,
    "content": [
      "5c30c0c2-b1bc-4007-8d5a-910e3ff34101",
      "8cd25ea4-6973-4d12-bcc8-ca40f64453d8",
      "c92bdf3a-c529-45b9-88ae-d46f75183594",
      "93f3a4ca-1121-4bb2-b6ac-3a8eccbd5bcd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525047251,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549941960000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "when"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "id": "5c30c0c2-b1bc-4007-8d5a-910e3ff34101",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525047247,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525047247,
        "parent_id": "755c12b5-2367-4efc-bbe9-719f1f6f1f77",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a keyword added in "
            ],
            [
              "C# 6",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", and it is used for exception filtering."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " is a keyword added in "
          },
          {
            "Text": "C# 6",
            "AttrFlags": 1
          },
          {
            "Text": ", and it is used for exception filtering."
          }
        ]
      },
      {
        "id": "8cd25ea4-6973-4d12-bcc8-ca40f64453d8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525047250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525047250,
        "parent_id": "755c12b5-2367-4efc-bbe9-719f1f6f1f77",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before the introduction of the "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, you could have had one catch clause for each type of exception; with the addition of the keyword, a more fine-grained control is now possible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before the introduction of the "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, you could have had one catch clause for each type of exception; with the addition of the keyword, a more fine-grained control is now possible."
          }
        ]
      },
      {
        "id": "c92bdf3a-c529-45b9-88ae-d46f75183594",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525047250,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525047250,
        "parent_id": "755c12b5-2367-4efc-bbe9-719f1f6f1f77",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression is attached to a "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " branch, and only if the "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " condition is "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause will be executed. It is possible to have several "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clauses with the same exception class types, and different "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " conditions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " expression is attached to a "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " branch, and only if the "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " condition is "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ", the "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clause will be executed. It is possible to have several "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " clauses with the same exception class types, and different "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " conditions."
          }
        ]
      },
      {
        "id": "93f3a4ca-1121-4bb2-b6ac-3a8eccbd5bcd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525047251,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941960000,
        "parent_id": "755c12b5-2367-4efc-bbe9-719f1f6f1f77",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void CatchException(Action action)\n{\n    try\n    {\n        action.Invoke();\n    }\n    \n    // exception filter\n    catch (Exception ex) when (ex.Message.Contains(\"when\"))\n    {\n        Console.WriteLine(\"Caught an exception with when\");\n    }\n\n    catch (Exception ex)\n    {\n        Console.WriteLine(\"Caught an exception without when\");\n    }\n}\n\nprivate void Method1() { throw new Exception(\"message for exception with when\"); }\nprivate void Method2() { throw new Exception(\"message for general exception\"); }    \n\nCatchException(Method1);\nCatchException(Method2);"
            ]
          ]
        },
        "type": "code",
        "version": 27,
        "code": "private void CatchException(Action action)\n{\n    try\n    {\n        action.Invoke();\n    }\n    \n    // exception filter\n    catch (Exception ex) when (ex.Message.Contains(\"when\"))\n    {\n        Console.WriteLine(\"Caught an exception with when\");\n    }\n\n    catch (Exception ex)\n    {\n        Console.WriteLine(\"Caught an exception without when\");\n    }\n}\n\nprivate void Method1() { throw new Exception(\"message for exception with when\"); }\nprivate void Method2() { throw new Exception(\"message for general exception\"); }    \n\nCatchException(Method1);\nCatchException(Method2);",
        "code_language": "C#"
      }
    ],
    "title": "when",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}