{
  "ID": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
  "Root": {
    "id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
    "alive": true,
    "content": [
      "aee7c231-63b8-47d1-a5ee-c9915361dc9e",
      "af4c1399-a05c-427a-bc0e-4c519e368946",
      "db67e16a-f9fc-4bfc-9e70-e6040ebbfd39",
      "29e5fe2a-b792-4316-b4b9-295f72bae92d",
      "1aef5c9b-18fd-4c21-bdfb-e58222fb7490",
      "ad8c9d52-dab4-4ce5-8fd3-f2d938baf780",
      "f7389f4c-57fd-4fc8-808d-4c017a47aa3f",
      "080d30d0-c99d-4f9b-9ab9-64ecd0774ec4",
      "e753b060-c789-41fd-9e7b-d1ca7873a68f",
      "6d06e20a-8a40-4c88-93df-8afea9158f94",
      "9149b9ec-a71b-4599-9ab0-8dcab837b836",
      "78fdd719-8b18-4f76-987d-4226e957df51",
      "cb7addd1-8800-4d7b-b418-a50c8659cddd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524487568,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549535400000,
    "parent_id": "f185d627-93ed-4197-8bae-c35411c58fa9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Implicit Cast and Explicit Cast Operators"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "id": "aee7c231-63b8-47d1-a5ee-c9915361dc9e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487563,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487563,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C# allows user-defined types to control assignment and casting through the use of the "
            ],
            [
              "explicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "implicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keywords. The signature of the method takes the form:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C# allows user-defined types to control assignment and casting through the use of the "
          },
          {
            "Text": "explicit",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "implicit",
            "AttrFlags": 2
          },
          {
            "Text": " keywords. The signature of the method takes the form:"
          }
        ]
      },
      {
        "id": "af4c1399-a05c-427a-bc0e-4c519e368946",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487566,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535340000,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static \u003cimplicit/explicit\u003e operator \u003cResultingType\u003e(\u003cSourceType\u003e myType)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public static \u003cimplicit/explicit\u003e operator \u003cResultingType\u003e(\u003cSourceType\u003e myType)",
        "code_language": "C#"
      },
      {
        "id": "db67e16a-f9fc-4bfc-9e70-e6040ebbfd39",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487566,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487566,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The method cannot take any more arguments, nor can it be an instance method. It can, however, access any private members of type it is defined within."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The method cannot take any more arguments, nor can it be an instance method. It can, however, access any private members of type it is defined within."
          }
        ]
      },
      {
        "id": "29e5fe2a-b792-4316-b4b9-295f72bae92d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487566,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487566,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example of both an "
            ],
            [
              "implicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "explicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cast:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example of both an "
          },
          {
            "Text": "implicit",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "explicit",
            "AttrFlags": 2
          },
          {
            "Text": " cast:"
          }
        ]
      },
      {
        "id": "1aef5c9b-18fd-4c21-bdfb-e58222fb7490",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487566,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535340000,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class BinaryImage \n    {\n        private bool[] _pixels;\n\n        public static implicit operator ColorImage(BinaryImage im)\n        {\n            return new ColorImage(im);\n        }\n\n        public static explicit operator bool[](BinaryImage im)\n        {\n            return im._pixels;\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "public class BinaryImage \n    {\n        private bool[] _pixels;\n\n        public static implicit operator ColorImage(BinaryImage im)\n        {\n            return new ColorImage(im);\n        }\n\n        public static explicit operator bool[](BinaryImage im)\n        {\n            return im._pixels;\n        }\n    }",
        "code_language": "C#"
      },
      {
        "id": "ad8c9d52-dab4-4ce5-8fd3-f2d938baf780",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487567,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allowing the following cast syntax:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Allowing the following cast syntax:"
          }
        ]
      },
      {
        "id": "f7389f4c-57fd-4fc8-808d-4c017a47aa3f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535400000,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var binaryImage = new BinaryImage();\nColorImage colorImage = binaryImage; // implicit cast, note the lack of type \nbool[] pixels = (bool[])binaryImage; // explicit cast, defining the type"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var binaryImage = new BinaryImage();\nColorImage colorImage = binaryImage; // implicit cast, note the lack of type \nbool[] pixels = (bool[])binaryImage; // explicit cast, defining the type",
        "code_language": "C#"
      },
      {
        "id": "080d30d0-c99d-4f9b-9ab9-64ecd0774ec4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487567,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The cast operators can work both ways, going "
            ],
            [
              "from",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " your type and going "
            ],
            [
              "to",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " your type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The cast operators can work both ways, going "
          },
          {
            "Text": "from",
            "AttrFlags": 4
          },
          {
            "Text": " your type and going "
          },
          {
            "Text": "to",
            "AttrFlags": 4
          },
          {
            "Text": " your type:"
          }
        ]
      },
      {
        "id": "e753b060-c789-41fd-9e7b-d1ca7873a68f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487567,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class BinaryImage\n{\n    public static explicit operator ColorImage(BinaryImage im)\n    {\n        return new ColorImage(im);\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class BinaryImage\n{\n    public static explicit operator ColorImage(BinaryImage im)\n    {\n        return new ColorImage(im);\n    }",
        "code_language": "Plain Text"
      },
      {
        "id": "6d06e20a-8a40-4c88-93df-8afea9158f94",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535400000,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class BinaryImage\n    {\n        public static explicit operator ColorImage(BinaryImage im)\n        {\n            return new ColorImage(im);\n        }\n\n        public static explicit operator BinaryImage(ColorImage cm)\n        {\n            return new BinaryImage(cm);\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "public class BinaryImage\n    {\n        public static explicit operator ColorImage(BinaryImage im)\n        {\n            return new ColorImage(im);\n        }\n\n        public static explicit operator BinaryImage(ColorImage cm)\n        {\n            return new BinaryImage(cm);\n        }\n    }",
        "code_language": "C#"
      },
      {
        "id": "9149b9ec-a71b-4599-9ab0-8dcab837b836",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487567,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, the "
            ],
            [
              "as",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, which can be involved in casting within a type hierarchy, is "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " valid in this situation. Even after defining either an "
            ],
            [
              "explicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "implicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cast, you cannot do:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, the "
          },
          {
            "Text": "as",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, which can be involved in casting within a type hierarchy, is "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " valid in this situation. Even after defining either an "
          },
          {
            "Text": "explicit",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "implicit",
            "AttrFlags": 2
          },
          {
            "Text": " cast, you cannot do:"
          }
        ]
      },
      {
        "id": "78fdd719-8b18-4f76-987d-4226e957df51",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535400000,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "ColorImage cm = myBinaryImage as ColorImage;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "ColorImage cm = myBinaryImage as ColorImage;",
        "code_language": "C#"
      },
      {
        "id": "cb7addd1-8800-4d7b-b418-a50c8659cddd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524487567,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524487567,
        "parent_id": "ed69c835-ca6e-43f7-9d52-fe9ed1cb2915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It will generate a compilation error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It will generate a compilation error."
          }
        ]
      }
    ],
    "title": "Implicit Cast and Explicit Cast Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}