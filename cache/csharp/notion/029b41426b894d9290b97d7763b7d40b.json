{
  "ID": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
  "Root": {
    "alive": true,
    "content": [
      "2b47e813-64d9-442d-a6e7-eedfb892981c",
      "c892fad4-6444-4242-8560-6bb13f2653a0",
      "e4a02466-4977-448f-b6b1-302dab16310f",
      "09a03969-502d-452f-b307-ad570b2e1775",
      "aae13216-513c-4bea-a372-6a82cf842746",
      "62f8d808-0d9e-4d82-8e35-6f4f5e335d20",
      "3e73a769-1b1e-4915-9eb9-e133a4779e1f",
      "1888f986-e2f4-451b-9663-f2ce085df8ef",
      "0e2d7904-7e0d-4eb3-9997-29783d83fb0d",
      "4f4b688c-d184-4e7b-9fd9-20a2d378e091",
      "b0e09a10-441f-456b-be11-5bd826478c65",
      "51799957-a281-4124-aecc-f6b20f082382",
      "345fb120-b0eb-41b9-8753-f58ea5398221",
      "4f4c4067-3766-4942-9f61-36c607e00be0",
      "04f9c574-ced8-483c-ab66-b039d8a56d3a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528363640,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550210820000,
    "parent_id": "d6ab87f3-3105-4532-8f9a-1b47bf70d308",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Recursion to Get Directory Tree"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363634,
        "id": "2b47e813-64d9-442d-a6e7-eedfb892981c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363634,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the uses of recursion is to navigate through a hierarchical data structure, like a file system directory tree, without knowing how many levels the tree has or the number of objects on each level. In this example, you will see how to use recursion on a directory tree to find all sub-directories of a specified directory and print the whole tree to the console."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the uses of recursion is to navigate through a hierarchical data structure, like a file system directory tree, without knowing how many levels the tree has or the number of objects on each level. In this example, you will see how to use recursion on a directory tree to find all sub-directories of a specified directory and print the whole tree to the console."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363637,
        "id": "c892fad4-6444-4242-8560-6bb13f2653a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550210820000,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "internal class Program\n{\n    internal const int RootLevel = 0;\n    internal const char Tab = '\\t';\n\n    internal static void Main()\n    {\n        Console.WriteLine(\"Enter the path of the root directory:\");\n        var rootDirectorypath = Console.ReadLine();\n\n        Console.WriteLine(\n            $\"Getting directory tree of '{rootDirectorypath}'\");\n\n        PrintDirectoryTree(rootDirectorypath);\n        Console.WriteLine(\"Press 'Enter' to quit...\");\n        Console.ReadLine();\n    }\n\n    internal static void PrintDirectoryTree(string rootDirectoryPath)\n    {\n        try\n        {\n            if (!Directory.Exists(rootDirectoryPath))\n            {\n                throw new DirectoryNotFoundException(\n                    $\"Directory '{rootDirectoryPath}' not found.\");\n            }\n\n            var rootDirectory = new DirectoryInfo(rootDirectoryPath);\n            PrintDirectoryTree(rootDirectory, RootLevel);\n        }\n        catch (DirectoryNotFoundException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    private static void PrintDirectoryTree(\n        DirectoryInfo directory, int currentLevel)\n    {\n        var indentation = string.Empty;\n        for (var i = RootLevel; i \u003c currentLevel; i++)\n        {\n            indentation += Tab;\n        }\n\n        Console.WriteLine($\"{indentation}-{directory.Name}\");\n        var nextLevel = currentLevel + 1;\n        try\n        {\n            foreach (var subDirectory in directory.GetDirectories())\n            {\n                PrintDirectoryTree(subDirectory, nextLevel);\n            }\n        }\n        catch (UnauthorizedAccessException e)\n        {\n            Console.WriteLine($\"{indentation}-{e.Message}\");\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "internal class Program\n{\n    internal const int RootLevel = 0;\n    internal const char Tab = '\\t';\n\n    internal static void Main()\n    {\n        Console.WriteLine(\"Enter the path of the root directory:\");\n        var rootDirectorypath = Console.ReadLine();\n\n        Console.WriteLine(\n            $\"Getting directory tree of '{rootDirectorypath}'\");\n\n        PrintDirectoryTree(rootDirectorypath);\n        Console.WriteLine(\"Press 'Enter' to quit...\");\n        Console.ReadLine();\n    }\n\n    internal static void PrintDirectoryTree(string rootDirectoryPath)\n    {\n        try\n        {\n            if (!Directory.Exists(rootDirectoryPath))\n            {\n                throw new DirectoryNotFoundException(\n                    $\"Directory '{rootDirectoryPath}' not found.\");\n            }\n\n            var rootDirectory = new DirectoryInfo(rootDirectoryPath);\n            PrintDirectoryTree(rootDirectory, RootLevel);\n        }\n        catch (DirectoryNotFoundException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    private static void PrintDirectoryTree(\n        DirectoryInfo directory, int currentLevel)\n    {\n        var indentation = string.Empty;\n        for (var i = RootLevel; i \u003c currentLevel; i++)\n        {\n            indentation += Tab;\n        }\n\n        Console.WriteLine($\"{indentation}-{directory.Name}\");\n        var nextLevel = currentLevel + 1;\n        try\n        {\n            foreach (var subDirectory in directory.GetDirectories())\n            {\n                PrintDirectoryTree(subDirectory, nextLevel);\n            }\n        }\n        catch (UnauthorizedAccessException e)\n        {\n            Console.WriteLine($\"{indentation}-{e.Message}\");\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363638,
        "id": "e4a02466-4977-448f-b6b1-302dab16310f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363638,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code is somewhat more complicated than the bare minimum to complete this task, as it includes exception checking to handle any issues with getting the directories. Below you will find a break-down of the code into smaller segments with explanations of each."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code is somewhat more complicated than the bare minimum to complete this task, as it includes exception checking to handle any issues with getting the directories. Below you will find a break-down of the code into smaller segments with explanations of each."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363638,
        "id": "09a03969-502d-452f-b307-ad570b2e1775",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363638,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Main",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Main",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363638,
        "id": "aae13216-513c-4bea-a372-6a82cf842746",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363638,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The main method takes an input from a user as a string, which is to be used as the path to the root directory. It then calls the "
            ],
            [
              "PrintDirectoryTree",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method with this string as the parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The main method takes an input from a user as a string, which is to be used as the path to the root directory. It then calls the "
          },
          {
            "Text": "PrintDirectoryTree",
            "AttrFlags": 2
          },
          {
            "Text": " method with this string as the parameter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363638,
        "id": "62f8d808-0d9e-4d82-8e35-6f4f5e335d20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363638,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PrintDirectoryTree(string)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PrintDirectoryTree(string)",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363639,
        "id": "3e73a769-1b1e-4915-9eb9-e133a4779e1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363639,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is the first of two methods that handle the actual directory tree printing. This method takes a string representing the path to the root directory as a parameter. It checks if the path is an actual directory, and if not, throws a "
            ],
            [
              "DirectoryNotFoundException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is then handled in the catch block. If the path is a real directory, a "
            ],
            [
              "DirectoryInfo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object "
            ],
            [
              "rootDirectory",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is created from the path, and the second "
            ],
            [
              "PrintDirectoryTree",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method is called with the "
            ],
            [
              "rootDirectory",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object and "
            ],
            [
              "RootLevel",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is an integer constant with a value of zero."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is the first of two methods that handle the actual directory tree printing. This method takes a string representing the path to the root directory as a parameter. It checks if the path is an actual directory, and if not, throws a "
          },
          {
            "Text": "DirectoryNotFoundException",
            "AttrFlags": 2
          },
          {
            "Text": " which is then handled in the catch block. If the path is a real directory, a "
          },
          {
            "Text": "DirectoryInfo",
            "AttrFlags": 2
          },
          {
            "Text": " object "
          },
          {
            "Text": "rootDirectory",
            "AttrFlags": 2
          },
          {
            "Text": " is created from the path, and the second "
          },
          {
            "Text": "PrintDirectoryTree",
            "AttrFlags": 2
          },
          {
            "Text": " method is called with the "
          },
          {
            "Text": "rootDirectory",
            "AttrFlags": 2
          },
          {
            "Text": " object and "
          },
          {
            "Text": "RootLevel",
            "AttrFlags": 2
          },
          {
            "Text": ", which is an integer constant with a value of zero."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363639,
        "id": "1888f986-e2f4-451b-9663-f2ce085df8ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363639,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PrintDirectoryTree(DirectoryInfo, int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PrintDirectoryTree(DirectoryInfo, int)",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363639,
        "id": "0e2d7904-7e0d-4eb3-9997-29783d83fb0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363639,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This second method handles the brunt of the work. It takes a "
            ],
            [
              "DirectoryInfo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and an integer as parameters. The "
            ],
            [
              "DirectoryInfo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the current directory, and the integer is the depth of the directory relative to the root. For ease of reading, the output is indented for each level deep the current directory is, so that the output looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This second method handles the brunt of the work. It takes a "
          },
          {
            "Text": "DirectoryInfo",
            "AttrFlags": 2
          },
          {
            "Text": " and an integer as parameters. The "
          },
          {
            "Text": "DirectoryInfo",
            "AttrFlags": 2
          },
          {
            "Text": " is the current directory, and the integer is the depth of the directory relative to the root. For ease of reading, the output is indented for each level deep the current directory is, so that the output looks like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363639,
        "id": "4f4b688c-d184-4e7b-9fd9-20a2d378e091",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363639,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-Root\n    -Child 1\n    -Child 2\n        -Grandchild 2.1\n    -Child 3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-Root\n    -Child 1\n    -Child 2\n        -Grandchild 2.1\n    -Child 3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363639,
        "id": "b0e09a10-441f-456b-be11-5bd826478c65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363639,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once the current directory is printed, its sub directories are retrieved, and this method is then called on each of them with a depth level value of one more than the current. That part is the recursion: the method calling itself. The program will run in this manner until it has visited every directory in the tree. When it reached a directory with no sub directories, the method will return automatically."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once the current directory is printed, its sub directories are retrieved, and this method is then called on each of them with a depth level value of one more than the current. That part is the recursion: the method calling itself. The program will run in this manner until it has visited every directory in the tree. When it reached a directory with no sub directories, the method will return automatically."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363639,
        "id": "51799957-a281-4124-aecc-f6b20f082382",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363639,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This method also catches an "
            ],
            [
              "UnauthorizedAccessException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is thrown if any of the sub directories of the current directory are protected by the system. The error message is printed at the current indentation level for consistency."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This method also catches an "
          },
          {
            "Text": "UnauthorizedAccessException",
            "AttrFlags": 2
          },
          {
            "Text": ", which is thrown if any of the sub directories of the current directory are protected by the system. The error message is printed at the current indentation level for consistency."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363640,
        "id": "345fb120-b0eb-41b9-8753-f58ea5398221",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363640,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The method below provides a more basic approach to this problem:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The method below provides a more basic approach to this problem:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363640,
        "id": "4f4c4067-3766-4942-9f61-36c607e00be0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550210820000,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "internal static void PrintDirectoryTree(string directoryName)\n{\n    try\n    {\n        if (!Directory.Exists(directoryName)) return;\n        Console.WriteLine(directoryName);\n        foreach (var d in Directory.GetDirectories(directoryName))\n        {\n            PrintDirectoryTree(d);\n        }\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(e.Message);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "internal static void PrintDirectoryTree(string directoryName)\n{\n    try\n    {\n        if (!Directory.Exists(directoryName)) return;\n        Console.WriteLine(directoryName);\n        foreach (var d in Directory.GetDirectories(directoryName))\n        {\n            PrintDirectoryTree(d);\n        }\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(e.Message);\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528363640,
        "id": "04f9c574-ced8-483c-ab66-b039d8a56d3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528363640,
        "parent_id": "029b4142-6b89-4d92-90b9-7d7763b7d40b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This does not include the specific error checking or output formatting of the first approach, but it effectively does the same thing. Since it only uses strings as opposed to "
            ],
            [
              "DirectoryInfo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it cannot provide access to other directory properties like permissions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This does not include the specific error checking or output formatting of the first approach, but it effectively does the same thing. Since it only uses strings as opposed to "
          },
          {
            "Text": "DirectoryInfo",
            "AttrFlags": 2
          },
          {
            "Text": ", it cannot provide access to other directory properties like permissions."
          }
        ]
      }
    ],
    "title": "Using Recursion to Get Directory Tree",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}