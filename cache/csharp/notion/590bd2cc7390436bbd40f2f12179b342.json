{
  "ID": "590bd2cc-7390-436b-bd40-f2f12179b342",
  "Root": {
    "id": "590bd2cc-7390-436b-bd40-f2f12179b342",
    "alive": true,
    "content": [
      "c3c5b56e-f3e4-4fce-8bc2-8c0001a6a3b3",
      "c24e6aea-daf5-4000-b6d2-763a9c71c3ab",
      "774fdaeb-af42-4550-9317-e9a746980691",
      "aa90a664-8ec3-4100-a8fa-a65e40d3c7c7",
      "fcd2e798-9e3a-4ca3-bc23-87dfb9a94128",
      "ce45afe1-c5db-4f70-97a9-5948d6c65dc1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530151371,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550223420000,
    "parent_id": "d0852dd6-2ee4-4d9e-af08-4f050ff9f517",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Abstract Factory Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "c3c5b56e-f3e4-4fce-8bc2-8c0001a6a3b3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530151368,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530151368,
        "parent_id": "590bd2cc-7390-436b-bd40-f2f12179b342",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Provide an interface for creating families of related or dependent objects without specifying their concrete classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Provide an interface for creating families of related or dependent objects without specifying their concrete classes."
          }
        ]
      },
      {
        "id": "c24e6aea-daf5-4000-b6d2-763a9c71c3ab",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530151371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223360000,
        "parent_id": "590bd2cc-7390-436b-bd40-f2f12179b342",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example demonstrates the creation of different animal worlds for a computer game using different factories. Although the animals created by the Continent factories are different, the interactions among the animals remain the same.b"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "In this example demonstrates the creation of different animal worlds for a computer game using different factories. Although the animals created by the Continent factories are different, the interactions among the animals remain the same.b"
          }
        ]
      },
      {
        "id": "774fdaeb-af42-4550-9317-e9a746980691",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530151371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223360000,
        "parent_id": "590bd2cc-7390-436b-bd40-f2f12179b342",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "using System;\n \nnamespace GangOfFour.AbstractFactory\n{\n  /// \u003csummary\u003e\n  /// MainApp startup class for Real-World\n  /// Abstract Factory Design Pattern.\n  /// \u003c/summary\u003e\n  class MainApp\n  {\n    /// \u003csummary\u003e\n    /// Entry point into console application.\n    /// \u003c/summary\u003e\n    public static void Main()\n    {\n      // Create and run the African animal world\n      ContinentFactory africa = new AfricaFactory();\n      AnimalWorld world = new AnimalWorld(africa);\n      world.RunFoodChain();\n \n      // Create and run the American animal world\n      ContinentFactory america = new AmericaFactory();\n      world = new AnimalWorld(america);\n      world.RunFoodChain();\n \n      // Wait for user input\n      Console.ReadKey();\n    }\n  }\n \n \n  /// \u003csummary\u003e\n  /// The 'AbstractFactory' abstract class\n  /// \u003c/summary\u003e\n  abstract class ContinentFactory\n  {\n    public abstract Herbivore CreateHerbivore();\n    public abstract Carnivore CreateCarnivore();\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ConcreteFactory1' class\n  /// \u003c/summary\u003e\n  class AfricaFactory : ContinentFactory\n  {\n    public override Herbivore CreateHerbivore()\n    {\n      return new Wildebeest();\n    }\n    public override Carnivore CreateCarnivore()\n    {\n      return new Lion();\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ConcreteFactory2' class\n  /// \u003c/summary\u003e\n  class AmericaFactory : ContinentFactory\n  {\n    public override Herbivore CreateHerbivore()\n    {\n      return new Bison();\n    }\n    public override Carnivore CreateCarnivore()\n    {\n      return new Wolf();\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'AbstractProductA' abstract class\n  /// \u003c/summary\u003e\n  abstract class Herbivore\n  {\n  }\n \n  /// \u003csummary\u003e\n  /// The 'AbstractProductB' abstract class\n  /// \u003c/summary\u003e\n  abstract class Carnivore\n  {\n    public abstract void Eat(Herbivore h);\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductA1' class\n  /// \u003c/summary\u003e\n  class Wildebeest : Herbivore\n  {\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductB1' class\n  /// \u003c/summary\u003e\n  class Lion : Carnivore\n  {\n    public override void Eat(Herbivore h)\n    {\n      // Eat Wildebeest\n      Console.WriteLine(this.GetType().Name +\n        \" eats \" + h.GetType().Name);\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductA2' class\n  /// \u003c/summary\u003e\n  class Bison : Herbivore\n  {\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductB2' class\n  /// \u003c/summary\u003e\n  class Wolf : Carnivore\n  {\n    public override void Eat(Herbivore h)\n    {\n      // Eat Bison\n      Console.WriteLine(this.GetType().Name +\n        \" eats \" + h.GetType().Name);\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'Client' class \n  /// \u003c/summary\u003e\n  class AnimalWorld\n  {\n    private Herbivore _herbivore;\n    private Carnivore _carnivore;\n \n    // Constructor\n    public AnimalWorld(ContinentFactory factory)\n    {\n      _carnivore = factory.CreateCarnivore();\n      _herbivore = factory.CreateHerbivore();\n    }\n \n    public void RunFoodChain()\n    {\n      _carnivore.Eat(_herbivore);\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "using System;\n \nnamespace GangOfFour.AbstractFactory\n{\n  /// \u003csummary\u003e\n  /// MainApp startup class for Real-World\n  /// Abstract Factory Design Pattern.\n  /// \u003c/summary\u003e\n  class MainApp\n  {\n    /// \u003csummary\u003e\n    /// Entry point into console application.\n    /// \u003c/summary\u003e\n    public static void Main()\n    {\n      // Create and run the African animal world\n      ContinentFactory africa = new AfricaFactory();\n      AnimalWorld world = new AnimalWorld(africa);\n      world.RunFoodChain();\n \n      // Create and run the American animal world\n      ContinentFactory america = new AmericaFactory();\n      world = new AnimalWorld(america);\n      world.RunFoodChain();\n \n      // Wait for user input\n      Console.ReadKey();\n    }\n  }\n \n \n  /// \u003csummary\u003e\n  /// The 'AbstractFactory' abstract class\n  /// \u003c/summary\u003e\n  abstract class ContinentFactory\n  {\n    public abstract Herbivore CreateHerbivore();\n    public abstract Carnivore CreateCarnivore();\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ConcreteFactory1' class\n  /// \u003c/summary\u003e\n  class AfricaFactory : ContinentFactory\n  {\n    public override Herbivore CreateHerbivore()\n    {\n      return new Wildebeest();\n    }\n    public override Carnivore CreateCarnivore()\n    {\n      return new Lion();\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ConcreteFactory2' class\n  /// \u003c/summary\u003e\n  class AmericaFactory : ContinentFactory\n  {\n    public override Herbivore CreateHerbivore()\n    {\n      return new Bison();\n    }\n    public override Carnivore CreateCarnivore()\n    {\n      return new Wolf();\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'AbstractProductA' abstract class\n  /// \u003c/summary\u003e\n  abstract class Herbivore\n  {\n  }\n \n  /// \u003csummary\u003e\n  /// The 'AbstractProductB' abstract class\n  /// \u003c/summary\u003e\n  abstract class Carnivore\n  {\n    public abstract void Eat(Herbivore h);\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductA1' class\n  /// \u003c/summary\u003e\n  class Wildebeest : Herbivore\n  {\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductB1' class\n  /// \u003c/summary\u003e\n  class Lion : Carnivore\n  {\n    public override void Eat(Herbivore h)\n    {\n      // Eat Wildebeest\n      Console.WriteLine(this.GetType().Name +\n        \" eats \" + h.GetType().Name);\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductA2' class\n  /// \u003c/summary\u003e\n  class Bison : Herbivore\n  {\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ProductB2' class\n  /// \u003c/summary\u003e\n  class Wolf : Carnivore\n  {\n    public override void Eat(Herbivore h)\n    {\n      // Eat Bison\n      Console.WriteLine(this.GetType().Name +\n        \" eats \" + h.GetType().Name);\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'Client' class \n  /// \u003c/summary\u003e\n  class AnimalWorld\n  {\n    private Herbivore _herbivore;\n    private Carnivore _carnivore;\n \n    // Constructor\n    public AnimalWorld(ContinentFactory factory)\n    {\n      _carnivore = factory.CreateCarnivore();\n      _herbivore = factory.CreateHerbivore();\n    }\n \n    public void RunFoodChain()\n    {\n      _carnivore.Eat(_herbivore);\n    }\n  }\n}",
        "code_language": "C#"
      },
      {
        "id": "aa90a664-8ec3-4100-a8fa-a65e40d3c7c7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530151371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530151371,
        "parent_id": "590bd2cc-7390-436b-bd40-f2f12179b342",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "id": "fcd2e798-9e3a-4ca3-bc23-87dfb9a94128",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530151371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223420000,
        "parent_id": "590bd2cc-7390-436b-bd40-f2f12179b342",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lion eats Wildebeest\n\nWolf eats Bison"
            ]
          ]
        },
        "type": "quote",
        "version": 5,
        "inline_content": [
          {
            "Text": "Lion eats Wildebeest\n\nWolf eats Bison"
          }
        ]
      },
      {
        "id": "ce45afe1-c5db-4f70-97a9-5948d6c65dc1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550223360000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223360000,
        "parent_id": "590bd2cc-7390-436b-bd40-f2f12179b342",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Abstract Factory Pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}