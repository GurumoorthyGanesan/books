{
  "ID": "24039e8c-a338-40a7-af69-c5a469269c3b",
  "Root": {
    "alive": true,
    "content": [
      "cbd62963-a665-415d-a7eb-422db8f1f972",
      "b00904f2-bd84-436c-8d56-1fe2baf1def4",
      "965582e4-1106-49a4-9603-0b2742dcaaca",
      "eb433fd8-640d-4fde-a613-d5cd370327d3",
      "f8309abb-8da0-42ac-8c51-c7f764d2d9b9",
      "7c6c0dc6-dd4b-4e33-b694-85c14daa452c",
      "0126fab4-07ae-4ab6-aed6-e47ce1c9b826",
      "7ba704d8-0119-433b-b72a-9bb31b1666c6",
      "56f8265a-8bda-456d-b103-6138843cb7f0",
      "0737895c-7cf9-4081-8f3e-d8d39acaf16a",
      "1ec4490f-a94e-4081-9dcf-54d8449c0f23",
      "935859a5-3602-4fcd-b27d-e74b185ef47f",
      "ea1a72e0-0e94-4dcc-adf6-5766c27851d2",
      "0920ed28-4d40-418c-8658-783fdf91ec28",
      "8961ddc8-edd6-4294-84c9-4104f364ea17",
      "dce6554a-e693-4ac6-8b2d-c623b474a98b",
      "16048286-5a09-45b6-9131-f7061c22273e",
      "4dd13313-aa57-4ffb-968b-99642c68d03e",
      "8ba37601-3c93-41b1-b2e7-d77159700ffe",
      "51b70933-fd9b-4b3d-bd2b-7302dd22ef46",
      "6185b38b-84d1-46ed-a97b-22841d438c4f",
      "8441f47f-1f7a-4a6a-9519-0a74e2d71d12",
      "b56123df-3665-4e9a-a82f-23487c64142e",
      "67f8d3b7-ca80-42a5-b09a-1989f59428ce",
      "a7c95b93-66de-4c00-97ca-28766a88c288",
      "3ddf8acb-b7ff-4f38-b5db-7f7ff12a339a",
      "adee4ca2-978a-472b-9f1b-4cfc284eb015",
      "e9b9bc13-67d4-4867-a368-f1b1fc019468",
      "93d02c23-a53b-4bf6-b97b-7ec64f191753",
      "4f19f5fb-42ef-4aaa-ad2a-a13692fae6ca"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525203309,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "24039e8c-a338-40a7-af69-c5a469269c3b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549626240000,
    "parent_id": "e46b0a90-d1e1-4de7-8d79-875641b9f824",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating an instance of a Type"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203300,
        "id": "cbd62963-a665-415d-a7eb-422db8f1f972",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203300,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simplest way is to use the "
            ],
            [
              "Activator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simplest way is to use the "
          },
          {
            "Text": "Activator",
            "AttrFlags": 2
          },
          {
            "Text": " class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203305,
        "id": "b00904f2-bd84-436c-8d56-1fe2baf1def4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203305,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, even though "
            ],
            [
              "Activator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " performance have been improved since .NET 3.5, using "
            ],
            [
              "Activator.CreateInstance()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is bad option sometimes, due to (relatively) low performance: "
            ],
            [
              "Test 1",
              [
                [
                  "a",
                  "https://blogs.msdn.microsoft.com/haibo_luo/2005/11/17/activator-createinstance-and-beyond/"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Test 2",
              [
                [
                  "a",
                  "https://codingsolution.wordpress.com/2013/07/12/activator-createinstance-is-slow/"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Test 3",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/6069661/does-system-activator-createinstancet-have-performance-issues-big-enough-to-di"
                ]
              ]
            ],
            [
              "…"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, even though "
          },
          {
            "Text": "Activator",
            "AttrFlags": 2
          },
          {
            "Text": " performance have been improved since .NET 3.5, using "
          },
          {
            "Text": "Activator.CreateInstance()",
            "AttrFlags": 2
          },
          {
            "Text": " is bad option sometimes, due to (relatively) low performance: "
          },
          {
            "Text": "Test 1",
            "Link": "https://blogs.msdn.microsoft.com/haibo_luo/2005/11/17/activator-createinstance-and-beyond/"
          },
          {
            "Text": ", "
          },
          {
            "Text": "Test 2",
            "Link": "https://codingsolution.wordpress.com/2013/07/12/activator-createinstance-is-slow/"
          },
          {
            "Text": ", "
          },
          {
            "Text": "Test 3",
            "Link": "http://stackoverflow.com/questions/6069661/does-system-activator-createinstancet-have-performance-issues-big-enough-to-di"
          },
          {
            "Text": "…"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "965582e4-1106-49a4-9603-0b2742dcaaca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203306,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "eb433fd8-640d-4fde-a613-d5cd370327d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203306,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With "
            ],
            [
              "Activator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "With "
          },
          {
            "Text": "Activator",
            "AttrFlags": 2
          },
          {
            "Text": " class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "f8309abb-8da0-42ac-8c51-c7f764d2d9b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549626240000,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Type type = typeof(BigInteger);\nobject result = Activator.CreateInstance(type); //Requires parameterless constructor.\nConsole.WriteLine(result); //Output: 0\nresult = Activator.CreateInstance(type, 123); //Requires a constructor which can receive an 'int' compatible argument.\nConsole.WriteLine(result); //Output: 123"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Type type = typeof(BigInteger);\nobject result = Activator.CreateInstance(type); //Requires parameterless constructor.\nConsole.WriteLine(result); //Output: 0\nresult = Activator.CreateInstance(type, 123); //Requires a constructor which can receive an 'int' compatible argument.\nConsole.WriteLine(result); //Output: 123",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "7c6c0dc6-dd4b-4e33-b694-85c14daa452c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203306,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can pass an object array to "
            ],
            [
              "Activator.CreateInstance",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you have more than one parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can pass an object array to "
          },
          {
            "Text": "Activator.CreateInstance",
            "AttrFlags": 2
          },
          {
            "Text": " if you have more than one parameter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "0126fab4-07ae-4ab6-aed6-e47ce1c9b826",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203306,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// With a constructor such as MyClass(int, int, string)\nActivator.CreateInstance(typeof(MyClass), new object[] { 1, 2, \"Hello World\" });"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// With a constructor such as MyClass(int, int, string)\nActivator.CreateInstance(typeof(MyClass), new object[] { 1, 2, \"Hello World\" });",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "7ba704d8-0119-433b-b72a-9bb31b1666c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203306,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Type type = typeof(someObject);\nvar instance = Activator.CreateInstance(type);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Type type = typeof(someObject);\nvar instance = Activator.CreateInstance(type);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203306,
        "id": "56f8265a-8bda-456d-b103-6138843cb7f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203306,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a generic type",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a generic type",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "0737895c-7cf9-4081-8f3e-d8d39acaf16a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "MakeGenericType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method turns an open generic type (like "
            ],
            [
              "List\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") into a concrete type (like "
            ],
            [
              "List\u003cstring\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") by applying type arguments to it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "MakeGenericType",
            "AttrFlags": 2
          },
          {
            "Text": " method turns an open generic type (like "
          },
          {
            "Text": "List\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") into a concrete type (like "
          },
          {
            "Text": "List\u003cstring\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") by applying type arguments to it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "1ec4490f-a94e-4081-9dcf-54d8449c0f23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// generic List with no parameters\nType openType = typeof(List\u003c\u003e);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// generic List with no parameters\nType openType = typeof(List\u003c\u003e);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "935859a5-3602-4fcd-b27d-e74b185ef47f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// To create a List\u003cstring\u003e\nType[] tArgs = { typeof(string) };\nType target = openType.MakeGenericType(tArgs);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// To create a List\u003cstring\u003e\nType[] tArgs = { typeof(string) };\nType target = openType.MakeGenericType(tArgs);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "ea1a72e0-0e94-4dcc-adf6-5766c27851d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Create an instance - Activator.CreateInstance will call the default constructor.\n// This is equivalent to calling new List\u003cstring\u003e().\nList\u003cstring\u003e result = (List\u003cstring\u003e)Activator.CreateInstance(target);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Create an instance - Activator.CreateInstance will call the default constructor.\n// This is equivalent to calling new List\u003cstring\u003e().\nList\u003cstring\u003e result = (List\u003cstring\u003e)Activator.CreateInstance(target);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "0920ed28-4d40-418c-8658-783fdf91ec28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "List\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax is not permitted outside of a "
            ],
            [
              "typeof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "List\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " syntax is not permitted outside of a "
          },
          {
            "Text": "typeof",
            "AttrFlags": 2
          },
          {
            "Text": " expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "8961ddc8-edd6-4294-84c9-4104f364ea17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "dce6554a-e693-4ac6-8b2d-c623b474a98b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Without "
            ],
            [
              "Activator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Without "
          },
          {
            "Text": "Activator",
            "AttrFlags": 2
          },
          {
            "Text": " class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "16048286-5a09-45b6-9131-f7061c22273e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "new",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword (will do for parameterless constructors)",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using ",
            "AttrFlags": 1
          },
          {
            "Text": "new",
            "AttrFlags": 3
          },
          {
            "Text": " keyword (will do for parameterless constructors)",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "4dd13313-aa57-4ffb-968b-99642c68d03e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549626240000,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "T GetInstance\u003cT\u003e() where T : new()\n{\n    T instance = new T();\n    return instance;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "T GetInstance\u003cT\u003e() where T : new()\n{\n    T instance = new T();\n    return instance;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "8ba37601-3c93-41b1-b2e7-d77159700ffe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203307,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using Invoke method",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using Invoke method",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203307,
        "id": "51b70933-fd9b-4b3d-bd2b-7302dd22ef46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549626240000,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// Get the instance of the desired constructor (here it takes a string as a parameter).\nConstructorInfo c = typeof(T).GetConstructor(new[] { typeof(string) }); \n// Don't forget to check if such constructor exists\nif (c == null) \n    throw new InvalidOperationException(string.Format(\"A constructor for type '{0}' was not found.\", typeof(T)));\nT instance = (T)c.Invoke(new object[] { \"test\" });"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Get the instance of the desired constructor (here it takes a string as a parameter).\nConstructorInfo c = typeof(T).GetConstructor(new[] { typeof(string) }); \n// Don't forget to check if such constructor exists\nif (c == null) \n    throw new InvalidOperationException(string.Format(\"A constructor for type '{0}' was not found.\", typeof(T)));\nT instance = (T)c.Invoke(new object[] { \"test\" });",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203308,
        "id": "6185b38b-84d1-46ed-a97b-22841d438c4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203308,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using Expression trees",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using Expression trees",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203308,
        "id": "8441f47f-1f7a-4a6a-9519-0a74e2d71d12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203308,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression trees represent code in a tree-like data structure, where each node is an expression. As "
            ],
            [
              "MSDN",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/ms173144.aspx"
                ]
              ]
            ],
            [
              " explains:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression trees represent code in a tree-like data structure, where each node is an expression. As "
          },
          {
            "Text": "MSDN",
            "Link": "https://msdn.microsoft.com/en-us/library/ms173144.aspx"
          },
          {
            "Text": " explains:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203308,
        "id": "b56123df-3665-4e9a-a82f-23487c64142e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203308,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expression is a sequence of one or more operands and zero or more operators that can be evaluated to a single value, object, method, or namespace. Expressions can consist of a literal value, a method invocation, an operator and its operands, or a simple name. Simple names can be the name of a variable, type member, method parameter, namespace or type."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expression is a sequence of one or more operands and zero or more operators that can be evaluated to a single value, object, method, or namespace. Expressions can consist of a literal value, a method invocation, an operator and its operands, or a simple name. Simple names can be the name of a variable, type member, method parameter, namespace or type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203308,
        "id": "67f8d3b7-ca80-42a5-b09a-1989f59428ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549626240000,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class GenericFactory\u003cTKey, TType\u003e\n    {\n       private readonly Dictionary\u003cTKey, Func\u003cobject[], TType\u003e\u003e _registeredTypes; // dictionary, that holds constructor functions.\n       private object _locker = new object(); // object for locking dictionary, to guarantee thread safety\n\n        public GenericFactory()\n        {\n            _registeredTypes = new Dictionary\u003cTKey, Func\u003cobject[], TType\u003e\u003e();\n        }\n\n        /// \u003csummary\u003e\n        /// Find and register suitable constructor for type\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"TType\"\u003e\u003c/typeparam\u003e\n        /// \u003cparam name=\"key\"\u003eKey for this constructor\u003c/param\u003e\n        /// \u003cparam name=\"parameters\"\u003eParameters\u003c/param\u003e\n        public void Register(TKey key, params Type[] parameters)\n        {\n            ConstructorInfo ci = typeof(TType).GetConstructor(BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.HasThis, parameters, new ParameterModifier[] { }); // Get the instance of ctor.\n            if (ci == null)\n                throw new InvalidOperationException(string.Format(\"Constructor for type '{0}' was not found.\", typeof(TType)));\n\n            Func\u003cobject[], TType\u003e ctor;\n\n            lock (_locker)\n            {\n                if (!_registeredTypes.TryGetValue(key, out ctor)) // check if such ctor already been registered\n                {\n                    var pExp = Expression.Parameter(typeof(object[]), \"arguments\"); // create parameter Expression\n                    var ctorParams = ci.GetParameters(); // get parameter info from constructor\n\n                    var argExpressions = new Expression[ctorParams.Length]; // array that will contains parameter expessions\n                    for (var i = 0; i \u003c parameters.Length; i++)\n                    {\n\n                        var indexedAcccess = Expression.ArrayIndex(pExp, Expression.Constant(i));\n\n                        if (!parameters[i].IsClass \u0026\u0026 !parameters[i].IsInterface) // check if parameter is a value type\n                        {\n                            var localVariable = Expression.Variable(parameters[i], \"localVariable\"); // if so - we should create local variable that will store paraameter value\n\n                            var block = Expression.Block(new[] { localVariable },\n                                    Expression.IfThenElse(Expression.Equal(indexedAcccess, Expression.Constant(null)),\n                                        Expression.Assign(localVariable, Expression.Default(parameters[i])),\n                                        Expression.Assign(localVariable, Expression.Convert(indexedAcccess, parameters[i]))\n                                    ),\n                                    localVariable\n                                );\n\n                            argExpressions[i] = block;\n\n                        }\n                        else\n                            argExpressions[i] = Expression.Convert(indexedAcccess, parameters[i]);\n                    }\n                    var newExpr = Expression.New(ci, argExpressions); // create expression that represents call to specified ctor with the specified arguments.\n  \n                    _registeredTypes.Add(key, Expression.Lambda(newExpr, new[] { pExp }).Compile() as Func\u003cobject[], TType\u003e); // compile expression to create delegate, and add fucntion to dictionary\n                }\n            }\n        }\n\n        /// \u003csummary\u003e\n        /// Returns instance of registered type by key.\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"TType\"\u003e\u003c/typeparam\u003e\n        /// \u003cparam name=\"key\"\u003e\u003c/param\u003e\n        /// \u003cparam name=\"args\"\u003e\u003c/param\u003e\n        /// \u003creturns\u003e\u003c/returns\u003e\n        public TType Create(TKey key, params object[] args)\n        {\n            Func\u003cobject[], TType\u003e foo;\n            if (_registeredTypes.TryGetValue(key, out foo))\n            {\n                return (TType)foo(args);\n            }\n\n            throw new ArgumentException(\"No type registered for this key.\");\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public class GenericFactory\u003cTKey, TType\u003e\n    {\n       private readonly Dictionary\u003cTKey, Func\u003cobject[], TType\u003e\u003e _registeredTypes; // dictionary, that holds constructor functions.\n       private object _locker = new object(); // object for locking dictionary, to guarantee thread safety\n\n        public GenericFactory()\n        {\n            _registeredTypes = new Dictionary\u003cTKey, Func\u003cobject[], TType\u003e\u003e();\n        }\n\n        /// \u003csummary\u003e\n        /// Find and register suitable constructor for type\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"TType\"\u003e\u003c/typeparam\u003e\n        /// \u003cparam name=\"key\"\u003eKey for this constructor\u003c/param\u003e\n        /// \u003cparam name=\"parameters\"\u003eParameters\u003c/param\u003e\n        public void Register(TKey key, params Type[] parameters)\n        {\n            ConstructorInfo ci = typeof(TType).GetConstructor(BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.HasThis, parameters, new ParameterModifier[] { }); // Get the instance of ctor.\n            if (ci == null)\n                throw new InvalidOperationException(string.Format(\"Constructor for type '{0}' was not found.\", typeof(TType)));\n\n            Func\u003cobject[], TType\u003e ctor;\n\n            lock (_locker)\n            {\n                if (!_registeredTypes.TryGetValue(key, out ctor)) // check if such ctor already been registered\n                {\n                    var pExp = Expression.Parameter(typeof(object[]), \"arguments\"); // create parameter Expression\n                    var ctorParams = ci.GetParameters(); // get parameter info from constructor\n\n                    var argExpressions = new Expression[ctorParams.Length]; // array that will contains parameter expessions\n                    for (var i = 0; i \u003c parameters.Length; i++)\n                    {\n\n                        var indexedAcccess = Expression.ArrayIndex(pExp, Expression.Constant(i));\n\n                        if (!parameters[i].IsClass \u0026\u0026 !parameters[i].IsInterface) // check if parameter is a value type\n                        {\n                            var localVariable = Expression.Variable(parameters[i], \"localVariable\"); // if so - we should create local variable that will store paraameter value\n\n                            var block = Expression.Block(new[] { localVariable },\n                                    Expression.IfThenElse(Expression.Equal(indexedAcccess, Expression.Constant(null)),\n                                        Expression.Assign(localVariable, Expression.Default(parameters[i])),\n                                        Expression.Assign(localVariable, Expression.Convert(indexedAcccess, parameters[i]))\n                                    ),\n                                    localVariable\n                                );\n\n                            argExpressions[i] = block;\n\n                        }\n                        else\n                            argExpressions[i] = Expression.Convert(indexedAcccess, parameters[i]);\n                    }\n                    var newExpr = Expression.New(ci, argExpressions); // create expression that represents call to specified ctor with the specified arguments.\n  \n                    _registeredTypes.Add(key, Expression.Lambda(newExpr, new[] { pExp }).Compile() as Func\u003cobject[], TType\u003e); // compile expression to create delegate, and add fucntion to dictionary\n                }\n            }\n        }\n\n        /// \u003csummary\u003e\n        /// Returns instance of registered type by key.\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"TType\"\u003e\u003c/typeparam\u003e\n        /// \u003cparam name=\"key\"\u003e\u003c/param\u003e\n        /// \u003cparam name=\"args\"\u003e\u003c/param\u003e\n        /// \u003creturns\u003e\u003c/returns\u003e\n        public TType Create(TKey key, params object[] args)\n        {\n            Func\u003cobject[], TType\u003e foo;\n            if (_registeredTypes.TryGetValue(key, out foo))\n            {\n                return (TType)foo(args);\n            }\n\n            throw new ArgumentException(\"No type registered for this key.\");\n        }\n    }",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203308,
        "id": "a7c95b93-66de-4c00-97ca-28766a88c288",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203308,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Could be used like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Could be used like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203308,
        "id": "3ddf8acb-b7ff-4f38-b5db-7f7ff12a339a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203308,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class TestClass\n {\n        public TestClass(string parameter)\n        {\n            Console.Write(parameter);\n        }\n }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class TestClass\n {\n        public TestClass(string parameter)\n        {\n            Console.Write(parameter);\n        }\n }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203309,
        "id": "adee4ca2-978a-472b-9f1b-4cfc284eb015",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203309,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void TestMethod()\n{\n       var factory = new GenericFactory\u003cstring, TestClass\u003e();\n       factory.Register(\"key\", typeof(string));\n       TestClass newInstance = factory.Create(\"key\", \"testParameter\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void TestMethod()\n{\n       var factory = new GenericFactory\u003cstring, TestClass\u003e();\n       factory.Register(\"key\", typeof(string));\n       TestClass newInstance = factory.Create(\"key\", \"testParameter\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203309,
        "id": "e9b9bc13-67d4-4867-a368-f1b1fc019468",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203309,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using FormatterServices.GetUninitializedObject",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using FormatterServices.GetUninitializedObject",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203309,
        "id": "93d02c23-a53b-4bf6-b97b-7ec64f191753",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203309,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "T instance = (T)FormatterServices.GetUninitializedObject(typeof(T));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "T instance = (T)FormatterServices.GetUninitializedObject(typeof(T));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525203309,
        "id": "4f19f5fb-42ef-4aaa-ad2a-a13692fae6ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525203309,
        "parent_id": "24039e8c-a338-40a7-af69-c5a469269c3b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In case of using "
            ],
            [
              "FormatterServices.GetUninitializedObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructors and field initializers will not be called. It is meant to be used in serializers and remoting engines"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In case of using "
          },
          {
            "Text": "FormatterServices.GetUninitializedObject",
            "AttrFlags": 2
          },
          {
            "Text": " constructors and field initializers will not be called. It is meant to be used in serializers and remoting engines"
          }
        ]
      }
    ],
    "title": "Creating an instance of a Type",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}