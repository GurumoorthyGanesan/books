{
  "ID": "a2347af8-7862-4301-85ae-12ac62f1db60",
  "Root": {
    "id": "a2347af8-7862-4301-85ae-12ac62f1db60",
    "alive": true,
    "content": [
      "193cb0cd-82de-4a29-9b20-996ef5ef79b1",
      "89cfd39e-5465-4a65-bcf7-389248f551fa",
      "da36e5ea-7cb1-41d6-bc38-f6f67d17a8a3",
      "b6b09204-c2a8-4ff3-9c43-d131ac964c4d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528666521,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550213520000,
    "parent_id": "f0c07076-1721-4628-bc3b-9d40618aeb3a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple Symmetric File Encryption"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "id": "193cb0cd-82de-4a29-9b20-996ef5ef79b1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528666520,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528666520,
        "parent_id": "a2347af8-7862-4301-85ae-12ac62f1db60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following code sample demonstrates a quick and easy means of encrypting and decrypting files using the AES symmetric encryption algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following code sample demonstrates a quick and easy means of encrypting and decrypting files using the AES symmetric encryption algorithm."
          }
        ]
      },
      {
        "id": "89cfd39e-5465-4a65-bcf7-389248f551fa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528666521,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528666521,
        "parent_id": "a2347af8-7862-4301-85ae-12ac62f1db60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The code randomly generates the Salt and Initialization Vectors each time a file is encrypted, meaning that encrypting the same file with the same password will always lead to different output. The salt and IV are written to the output file so that only the password is required to decrypt it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The code randomly generates the Salt and Initialization Vectors each time a file is encrypted, meaning that encrypting the same file with the same password will always lead to different output. The salt and IV are written to the output file so that only the password is required to decrypt it."
          }
        ]
      },
      {
        "id": "da36e5ea-7cb1-41d6-bc38-f6f67d17a8a3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528666521,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550213520000,
        "parent_id": "a2347af8-7862-4301-85ae-12ac62f1db60",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static void ProcessFile(string inputPath, string password, bool encryptMode, string outputPath)\n{\n    using (var cypher = new AesManaged())\n    using (var fsIn = new FileStream(inputPath, FileMode.Open))\n    using (var fsOut = new FileStream(outputPath, FileMode.Create))\n    {\n        const int saltLength = 256;\n        var salt = new byte[saltLength];\n        var iv = new byte[cypher.BlockSize / 8];\n\n        if (encryptMode)\n        {\n            // Generate random salt and IV, then write them to file\n            using (var rng = new RNGCryptoServiceProvider())\n            {\n                rng.GetBytes(salt);\n                rng.GetBytes(iv);\n            }\n            fsOut.Write(salt, 0, salt.Length);\n            fsOut.Write(iv, 0, iv.Length);\n        }\n        else\n        {\n            // Read the salt and IV from the file\n            fsIn.Read(salt, 0, saltLength);\n            fsIn.Read(iv, 0, iv.Length);\n        }\n\n        // Generate a secure password, based on the password and salt provided\n        var pdb = new Rfc2898DeriveBytes(password, salt);\n        var key = pdb.GetBytes(cypher.KeySize / 8);\n\n        // Encrypt or decrypt the file\n        using (var cryptoTransform = encryptMode\n            ? cypher.CreateEncryptor(key, iv)\n            : cypher.CreateDecryptor(key, iv))\n        using (var cs = new CryptoStream(fsOut, cryptoTransform, CryptoStreamMode.Write))\n        {\n            fsIn.CopyTo(cs);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public static void ProcessFile(string inputPath, string password, bool encryptMode, string outputPath)\n{\n    using (var cypher = new AesManaged())\n    using (var fsIn = new FileStream(inputPath, FileMode.Open))\n    using (var fsOut = new FileStream(outputPath, FileMode.Create))\n    {\n        const int saltLength = 256;\n        var salt = new byte[saltLength];\n        var iv = new byte[cypher.BlockSize / 8];\n\n        if (encryptMode)\n        {\n            // Generate random salt and IV, then write them to file\n            using (var rng = new RNGCryptoServiceProvider())\n            {\n                rng.GetBytes(salt);\n                rng.GetBytes(iv);\n            }\n            fsOut.Write(salt, 0, salt.Length);\n            fsOut.Write(iv, 0, iv.Length);\n        }\n        else\n        {\n            // Read the salt and IV from the file\n            fsIn.Read(salt, 0, saltLength);\n            fsIn.Read(iv, 0, iv.Length);\n        }\n\n        // Generate a secure password, based on the password and salt provided\n        var pdb = new Rfc2898DeriveBytes(password, salt);\n        var key = pdb.GetBytes(cypher.KeySize / 8);\n\n        // Encrypt or decrypt the file\n        using (var cryptoTransform = encryptMode\n            ? cypher.CreateEncryptor(key, iv)\n            : cypher.CreateDecryptor(key, iv))\n        using (var cs = new CryptoStream(fsOut, cryptoTransform, CryptoStreamMode.Write))\n        {\n            fsIn.CopyTo(cs);\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "b6b09204-c2a8-4ff3-9c43-d131ac964c4d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550213520000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550213520000,
        "parent_id": "a2347af8-7862-4301-85ae-12ac62f1db60",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Simple Symmetric File Encryption",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}