{
  "ID": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
  "Root": {
    "id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
    "alive": true,
    "content": [
      "bdeb24aa-0d66-4391-956b-99db811e1ba8",
      "5a9d4f9e-1b44-44af-bf24-a76bac48cab3",
      "6e19b0bf-b3bf-4c4b-b6e2-695227cc4770",
      "2c4e5b5d-9961-49ff-bd7d-6e230fa85e60",
      "e5b85928-a942-4a01-b59a-3a89587c56ab",
      "428e93f6-1d90-441a-963b-27822c4e0f2e",
      "f2c4cb3d-07e8-4c36-8001-b95e53ea3d91",
      "59dd522a-fef2-4d53-a651-b3746b8aea7a",
      "6e7ed1e0-b167-4bd2-be14-b0e71d4ba3fa",
      "ffbfb384-762f-418c-a7e2-0bb1f991d3dd",
      "0239c96d-4229-49c2-a9fa-66c55b05b1e2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525130243,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550043840000,
    "parent_id": "6bc8984c-0999-42e1-a500-ace83190c171",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Covariance"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "bdeb24aa-0d66-4391-956b-99db811e1ba8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130238,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525130238,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When is an "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a subtype of a different "
            ],
            [
              "IEnumerable\u003cT1\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? When "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a subtype of "
            ],
            [
              "T1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "IEnumerable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "covariant",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in its "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter, which means that "
            ],
            [
              "IEnumerable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s subtype relationship goes in "
            ],
            [
              "the same direction",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " as "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When is an "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " a subtype of a different "
          },
          {
            "Text": "IEnumerable\u003cT1\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "? When "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is a subtype of "
          },
          {
            "Text": "T1",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "IEnumerable",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "covariant",
            "AttrFlags": 4
          },
          {
            "Text": " in its "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " parameter, which means that "
          },
          {
            "Text": "IEnumerable",
            "AttrFlags": 2
          },
          {
            "Text": "’s subtype relationship goes in "
          },
          {
            "Text": "the same direction",
            "AttrFlags": 4
          },
          {
            "Text": " as "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "’s."
          }
        ]
      },
      {
        "id": "5a9d4f9e-1b44-44af-bf24-a76bac48cab3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130241,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550043780000,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "class Animal { /* ... */ }\nclass Dog : Animal { /* ... */ }\n\nIEnumerable\u003cDog\u003e dogs = Enumerable.Empty\u003cDog\u003e();\nIEnumerable\u003cAnimal\u003e animals = dogs;  // IEnumerable\u003cDog\u003e is a subtype of IEnumerable\u003cAnimal\u003e\n// dogs = animals;  // Compilation error - IEnumerable\u003cAnimal\u003e is not a subtype of IEnumerable\u003cDog\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "class Animal { /* ... */ }\nclass Dog : Animal { /* ... */ }\n\nIEnumerable\u003cDog\u003e dogs = Enumerable.Empty\u003cDog\u003e();\nIEnumerable\u003cAnimal\u003e animals = dogs;  // IEnumerable\u003cDog\u003e is a subtype of IEnumerable\u003cAnimal\u003e\n// dogs = animals;  // Compilation error - IEnumerable\u003cAnimal\u003e is not a subtype of IEnumerable\u003cDog\u003e",
        "code_language": "C#"
      },
      {
        "id": "6e19b0bf-b3bf-4c4b-b6e2-695227cc4770",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130242,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525130242,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An instance of a covariant generic type with a given type parameter is implicitly convertible to the same generic type with a less derived type parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An instance of a covariant generic type with a given type parameter is implicitly convertible to the same generic type with a less derived type parameter."
          }
        ]
      },
      {
        "id": "2c4e5b5d-9961-49ff-bd7d-6e230fa85e60",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130242,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525130242,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This relationship holds because "
            ],
            [
              "IEnumerable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "produces",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s but doesn’t consume them. An object that produces "
            ],
            [
              "Dog",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s can be used as if it produces "
            ],
            [
              "Animal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This relationship holds because "
          },
          {
            "Text": "IEnumerable",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "produces",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": "s but doesn’t consume them. An object that produces "
          },
          {
            "Text": "Dog",
            "AttrFlags": 2
          },
          {
            "Text": "s can be used as if it produces "
          },
          {
            "Text": "Animal",
            "AttrFlags": 2
          },
          {
            "Text": "s."
          }
        ]
      },
      {
        "id": "e5b85928-a942-4a01-b59a-3a89587c56ab",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130242,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525130242,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Covariant type parameters are declared using the "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, because the parameter must be used only as an "
            ],
            [
              "output",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Covariant type parameters are declared using the "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, because the parameter must be used only as an "
          },
          {
            "Text": "output",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "428e93f6-1d90-441a-963b-27822c4e0f2e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130242,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549613400000,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "interface IEnumerable\u003cout T\u003e { /* ... */ }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "interface IEnumerable\u003cout T\u003e { /* ... */ }",
        "code_language": "C#"
      },
      {
        "id": "f2c4cb3d-07e8-4c36-8001-b95e53ea3d91",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130243,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525130243,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A type parameter declared as covariant may not appear as an input."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A type parameter declared as covariant may not appear as an input."
          }
        ]
      },
      {
        "id": "59dd522a-fef2-4d53-a651-b3746b8aea7a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130243,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549613400000,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "interface Bad\u003cout T\u003e\n{\n    void SetT(T t);  // type error\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "interface Bad\u003cout T\u003e\n{\n    void SetT(T t);  // type error\n}",
        "code_language": "C#"
      },
      {
        "id": "6e7ed1e0-b167-4bd2-be14-b0e71d4ba3fa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130243,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525130243,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a complete example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a complete example:"
          }
        ]
      },
      {
        "id": "ffbfb384-762f-418c-a7e2-0bb1f991d3dd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525130243,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550043840000,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "using NUnit.Framework;\n  \nnamespace ToyStore\n{\n   enum Taste { Bitter, Sweet };\n\n   interface IWidget\n   {\n      int Weight { get; }\n   }\n\n   interface IFactory\u003cout TWidget\u003e\n       where TWidget : IWidget\n   {\n      TWidget Create();\n   }\n\n   class Toy : IWidget\n   {\n      public int Weight { get; set; }\n      public Taste Taste { get; set; }\n   }\n\n   class ToyFactory : IFactory\u003cToy\u003e\n   {\n      public const int StandardWeight = 100;\n      public const Taste StandardTaste = Taste.Sweet;\n\n      public Toy Create() { return new Toy { Weight = StandardWeight, Taste = StandardTaste }; }\n   }\n\n   [TestFixture]\n   public class GivenAToyFactory\n   {\n      [Test]\n      public static void WhenUsingToyFactoryToMakeWidgets()\n      {\n         var toyFactory = new ToyFactory();\n\n         //// Without out keyword, note the verbose explicit cast:\n         // IFactory\u003cIWidget\u003e rustBeltFactory = (IFactory\u003cIWidget\u003e)toyFactory;\n\n         // covariance: concrete being assigned to abstract (shiny and new)\n         IFactory\u003cIWidget\u003e widgetFactory = toyFactory;\n         IWidget anotherToy = widgetFactory.Create();\n         Assert.That(anotherToy.Weight, Is.EqualTo(ToyFactory.StandardWeight)); // abstract contract\n         Assert.That(((Toy)anotherToy).Taste, Is.EqualTo(ToyFactory.StandardTaste)); // concrete contract\n      }\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 11,
        "code": "using NUnit.Framework;\n  \nnamespace ToyStore\n{\n   enum Taste { Bitter, Sweet };\n\n   interface IWidget\n   {\n      int Weight { get; }\n   }\n\n   interface IFactory\u003cout TWidget\u003e\n       where TWidget : IWidget\n   {\n      TWidget Create();\n   }\n\n   class Toy : IWidget\n   {\n      public int Weight { get; set; }\n      public Taste Taste { get; set; }\n   }\n\n   class ToyFactory : IFactory\u003cToy\u003e\n   {\n      public const int StandardWeight = 100;\n      public const Taste StandardTaste = Taste.Sweet;\n\n      public Toy Create() { return new Toy { Weight = StandardWeight, Taste = StandardTaste }; }\n   }\n\n   [TestFixture]\n   public class GivenAToyFactory\n   {\n      [Test]\n      public static void WhenUsingToyFactoryToMakeWidgets()\n      {\n         var toyFactory = new ToyFactory();\n\n         //// Without out keyword, note the verbose explicit cast:\n         // IFactory\u003cIWidget\u003e rustBeltFactory = (IFactory\u003cIWidget\u003e)toyFactory;\n\n         // covariance: concrete being assigned to abstract (shiny and new)\n         IFactory\u003cIWidget\u003e widgetFactory = toyFactory;\n         IWidget anotherToy = widgetFactory.Create();\n         Assert.That(anotherToy.Weight, Is.EqualTo(ToyFactory.StandardWeight)); // abstract contract\n         Assert.That(((Toy)anotherToy).Taste, Is.EqualTo(ToyFactory.StandardTaste)); // concrete contract\n      }\n   }\n}",
        "code_language": "C#"
      },
      {
        "id": "0239c96d-4229-49c2-a9fa-66c55b05b1e2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550043840000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550043840000,
        "parent_id": "5357b9b6-2828-4ba1-bd05-a90336c05b0f",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Covariance",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}