{
  "ID": "7286d9bf-e8d5-4c9c-bcf0-47df905c7a0a",
  "Root": {
    "alive": true,
    "content": [
      "af32de4d-2868-4a34-b34c-c7f394a27095",
      "d70a718c-c7a3-4ba0-a336-582ad04171e9",
      "c2ecba7d-fa20-4b97-a533-ee8f5873abea",
      "29daeca3-511b-4d05-9e9c-143c6cf7f44c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524490255,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7286d9bf-e8d5-4c9c-bcf0-47df905c7a0a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549535760000,
    "parent_id": "f185d627-93ed-4197-8bae-c35411c58fa9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "?. (Null Conditional Operator)"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524490254,
        "id": "af32de4d-2868-4a34-b34c-c7f394a27095",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524490254,
        "parent_id": "7286d9bf-e8d5-4c9c-bcf0-47df905c7a0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduced in C# 6.0",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/24/c-sharp-6-0-features/51/null-propagation#t=201607301051500162149"
                ]
              ]
            ],
            [
              ", the Null Conditional Operator "
            ],
            [
              "?.",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will immediately return "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the expression on its left-hand side evaluates to "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", instead of throwing a "
            ],
            [
              "NullReferenceException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If its left-hand side evaluates to a non-"
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value, it is treated just like a normal "
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator. Note that because it might return "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", its return type is always a nullable type. That means that for a struct or primitive type, it is wrapped into a "
            ],
            [
              "Nullable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduced in C# 6.0",
            "Link": "http://stackoverflow.com/documentation/c%23/24/c-sharp-6-0-features/51/null-propagation#t=201607301051500162149"
          },
          {
            "Text": ", the Null Conditional Operator "
          },
          {
            "Text": "?.",
            "AttrFlags": 2
          },
          {
            "Text": " will immediately return "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " if the expression on its left-hand side evaluates to "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ", instead of throwing a "
          },
          {
            "Text": "NullReferenceException",
            "AttrFlags": 2
          },
          {
            "Text": ". If its left-hand side evaluates to a non-"
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " value, it is treated just like a normal "
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": " operator. Note that because it might return "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ", its return type is always a nullable type. That means that for a struct or primitive type, it is wrapped into a "
          },
          {
            "Text": "Nullable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524490254,
        "id": "d70a718c-c7a3-4ba0-a336-582ad04171e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535760000,
        "parent_id": "7286d9bf-e8d5-4c9c-bcf0-47df905c7a0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var bar = Foo.GetBar()?.Value; // will return null if GetBar() returns null\nvar baz = Foo.GetBar()?.IntegerValue; // baz will be of type Nullable\u003cint\u003e, i.e. int?"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var bar = Foo.GetBar()?.Value; // will return null if GetBar() returns null\nvar baz = Foo.GetBar()?.IntegerValue; // baz will be of type Nullable\u003cint\u003e, i.e. int?",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524490254,
        "id": "c2ecba7d-fa20-4b97-a533-ee8f5873abea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524490254,
        "parent_id": "7286d9bf-e8d5-4c9c-bcf0-47df905c7a0a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This comes handy when firing events. Normally you would have to wrap the event call in an if statement checking for "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and raise the event afterwards, which introduces the possibility of a race condition. Using the Null conditional operator this can be fixed in the following way:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This comes handy when firing events. Normally you would have to wrap the event call in an if statement checking for "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " and raise the event afterwards, which introduces the possibility of a race condition. Using the Null conditional operator this can be fixed in the following way:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524490255,
        "id": "29daeca3-511b-4d05-9e9c-143c6cf7f44c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535760000,
        "parent_id": "7286d9bf-e8d5-4c9c-bcf0-47df905c7a0a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "event EventHandler\u003cstring\u003e RaiseMe;\nRaiseMe?.Invoke(\"Event raised\");"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "event EventHandler\u003cstring\u003e RaiseMe;\nRaiseMe?.Invoke(\"Event raised\");",
        "code_language": "C#"
      }
    ],
    "title": "?. (Null Conditional Operator)",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}