{
  "ID": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
  "Root": {
    "alive": true,
    "content": [
      "c8f244c9-5d40-4016-ab22-42d667268cf4",
      "0b388827-92a4-444a-876d-4283678b8e46",
      "a49df6de-e789-45c6-aac9-097da3886796",
      "abe95c70-aceb-44e1-b7ce-b5dd24d577ee",
      "2cfcb7fb-b75b-41af-8bd5-3248fc8142a0",
      "d72e630a-e7ba-4048-a630-fd257ff1a502"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525671316,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549611120000,
    "parent_id": "114a10c9-a82c-42cd-b7ee-4162153e47b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Blocking on async code can cause deadlocks"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525671312,
        "id": "c8f244c9-5d40-4016-ab22-42d667268cf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525671312,
        "parent_id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is a bad practice to block on async calls as it can cause deadlocks in environments that have a synchronization context. The best practice is to use async/await “all the way down.” For example, the following Windows Forms code causes a deadlock:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is a bad practice to block on async calls as it can cause deadlocks in environments that have a synchronization context. The best practice is to use async/await “all the way down.” For example, the following Windows Forms code causes a deadlock:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525671315,
        "id": "0b388827-92a4-444a-876d-4283678b8e46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611120000,
        "parent_id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private async Task\u003cbool\u003e TryThis()\n{\n    Trace.TraceInformation(\"Starting TryThis\");\n    await Task.Run(() =\u003e\n    {\n        Trace.TraceInformation(\"In TryThis task\");\n        for (int i = 0; i \u003c 100; i++)\n        {\n            // This runs successfully - the loop runs to completion\n            Trace.TraceInformation(\"For loop \" + i);\n            System.Threading.Thread.Sleep(10);\n        }\n    });\n\t\t// This never happens due to the deadlock\n    Trace.TraceInformation(\"About to return\");\n    return true;\n}\n\n// Button click event handler\nprivate void button1_Click(object sender, EventArgs e)\n{\n    // .Result causes this to block on the asynchronous call\n    bool result = TryThis().Result;\n    // Never actually gets here\n    Trace.TraceInformation(\"Done with result\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 14,
        "code": "private async Task\u003cbool\u003e TryThis()\n{\n    Trace.TraceInformation(\"Starting TryThis\");\n    await Task.Run(() =\u003e\n    {\n        Trace.TraceInformation(\"In TryThis task\");\n        for (int i = 0; i \u003c 100; i++)\n        {\n            // This runs successfully - the loop runs to completion\n            Trace.TraceInformation(\"For loop \" + i);\n            System.Threading.Thread.Sleep(10);\n        }\n    });\n\t\t// This never happens due to the deadlock\n    Trace.TraceInformation(\"About to return\");\n    return true;\n}\n\n// Button click event handler\nprivate void button1_Click(object sender, EventArgs e)\n{\n    // .Result causes this to block on the asynchronous call\n    bool result = TryThis().Result;\n    // Never actually gets here\n    Trace.TraceInformation(\"Done with result\");\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525671315,
        "id": "a49df6de-e789-45c6-aac9-097da3886796",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525671315,
        "parent_id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Essentially, once the async call completes, it waits for the synchronization context to become available. However, the event handler “holds on” to the synchronization context while it’s waiting for the "
            ],
            [
              "TryThis()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to complete, thus causing a circular wait."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Essentially, once the async call completes, it waits for the synchronization context to become available. However, the event handler “holds on” to the synchronization context while it’s waiting for the "
          },
          {
            "Text": "TryThis()",
            "AttrFlags": 2
          },
          {
            "Text": " method to complete, thus causing a circular wait."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525671315,
        "id": "abe95c70-aceb-44e1-b7ce-b5dd24d577ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525671315,
        "parent_id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To fix this, code should be modified to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To fix this, code should be modified to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525671315,
        "id": "2cfcb7fb-b75b-41af-8bd5-3248fc8142a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611120000,
        "parent_id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private async void button1_Click(object sender, EventArgs e)\n{\n  bool result = await TryThis();\n  Trace.TraceInformation(\"Done with result\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private async void button1_Click(object sender, EventArgs e)\n{\n  bool result = await TryThis();\n  Trace.TraceInformation(\"Done with result\");\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525671316,
        "id": "d72e630a-e7ba-4048-a630-fd257ff1a502",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525671316,
        "parent_id": "f848b4f1-f2c4-4bcc-ba6a-c45131af8c38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: event handlers are the only place where "
            ],
            [
              "async void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be used (because you can’t await an "
            ],
            [
              "async void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: event handlers are the only place where "
          },
          {
            "Text": "async void",
            "AttrFlags": 2
          },
          {
            "Text": " should be used (because you can’t await an "
          },
          {
            "Text": "async void",
            "AttrFlags": 2
          },
          {
            "Text": " method)."
          }
        ]
      }
    ],
    "title": "Blocking on async code can cause deadlocks",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}