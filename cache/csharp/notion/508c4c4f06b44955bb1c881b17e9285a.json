{
  "ID": "508c4c4f-06b4-4955-bb1c-881b17e9285a",
  "Root": {
    "alive": true,
    "content": [
      "eaf71f0d-b2ff-46f3-8f13-d553ca0d572a",
      "c45d2d81-abdb-4895-8da2-bb64d9361311",
      "965285ed-fefe-474f-b16b-1f6a689aa29c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525143987,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "508c4c4f-06b4-4955-bb1c-881b17e9285a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549613580000,
    "parent_id": "6bc8984c-0999-42e1-a500-ace83190c171",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Generic type casting"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525143984,
        "id": "eaf71f0d-b2ff-46f3-8f13-d553ca0d572a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549613580000,
        "parent_id": "508c4c4f-06b4-4955-bb1c-881b17e9285a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "\t\t/// \u003csummary\u003e\n    /// Converts a data type to another data type.\n    /// \u003c/summary\u003e\n    public static class Cast\n    {\n        /// \u003csummary\u003e\n        /// Converts input to Type of default value or given as typeparam T\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"input\"\u003eInput that need to be converted to specified type\u003c/param\u003e\n        /// \u003cparam name=\"defaultValue\"\u003edefaultValue will be returned in case of value is null or any exception occures\u003c/param\u003e\n        /// \u003creturns\u003eInput is converted in Type of default value or given as typeparam T and returned\u003c/returns\u003e\n        public static T To\u003cT\u003e(object input, T defaultValue)\n        {\n            var result = defaultValue;\n            try\n            {\n                if (input == null || input == DBNull.Value) return result;\n                if (typeof (T).IsEnum)\n                {\n                    result = (T) Enum.ToObject(typeof (T), To(input, Convert.ToInt32(defaultValue)));\n                }\n                else\n                {\n                    result = (T) Convert.ChangeType(input, typeof (T));\n                }\n            }\n            catch (Exception ex)\n            {\n                Tracer.Current.LogException(ex);\n            }\n\n            return result;\n        }\n        \n        /// \u003csummary\u003e\n        /// Converts input to Type of typeparam T\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"input\"\u003eInput that need to be converted to specified type\u003c/param\u003e\n        /// \u003creturns\u003eInput is converted in Type of default value or given as typeparam T and returned\u003c/returns\u003e\n        public static T To\u003cT\u003e(object input)\n        {\n            return To(input, default(T));\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 16,
        "code": "\t\t/// \u003csummary\u003e\n    /// Converts a data type to another data type.\n    /// \u003c/summary\u003e\n    public static class Cast\n    {\n        /// \u003csummary\u003e\n        /// Converts input to Type of default value or given as typeparam T\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"input\"\u003eInput that need to be converted to specified type\u003c/param\u003e\n        /// \u003cparam name=\"defaultValue\"\u003edefaultValue will be returned in case of value is null or any exception occures\u003c/param\u003e\n        /// \u003creturns\u003eInput is converted in Type of default value or given as typeparam T and returned\u003c/returns\u003e\n        public static T To\u003cT\u003e(object input, T defaultValue)\n        {\n            var result = defaultValue;\n            try\n            {\n                if (input == null || input == DBNull.Value) return result;\n                if (typeof (T).IsEnum)\n                {\n                    result = (T) Enum.ToObject(typeof (T), To(input, Convert.ToInt32(defaultValue)));\n                }\n                else\n                {\n                    result = (T) Convert.ChangeType(input, typeof (T));\n                }\n            }\n            catch (Exception ex)\n            {\n                Tracer.Current.LogException(ex);\n            }\n\n            return result;\n        }\n        \n        /// \u003csummary\u003e\n        /// Converts input to Type of typeparam T\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"input\"\u003eInput that need to be converted to specified type\u003c/param\u003e\n        /// \u003creturns\u003eInput is converted in Type of default value or given as typeparam T and returned\u003c/returns\u003e\n        public static T To\u003cT\u003e(object input)\n        {\n            return To(input, default(T));\n        }\n    }",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525143987,
        "id": "c45d2d81-abdb-4895-8da2-bb64d9361311",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525143987,
        "parent_id": "508c4c4f-06b4-4955-bb1c-881b17e9285a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usages:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usages:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525143987,
        "id": "965285ed-fefe-474f-b16b-1f6a689aa29c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549613580000,
        "parent_id": "508c4c4f-06b4-4955-bb1c-881b17e9285a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "std.Name = Cast.To\u003cstring\u003e(drConnection[\"Name\"]);\nstd.Age = Cast.To\u003cint\u003e(drConnection[\"Age\"]);\nstd.IsPassed = Cast.To\u003cbool\u003e(drConnection[\"IsPassed\"]);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "std.Name = Cast.To\u003cstring\u003e(drConnection[\"Name\"]);\nstd.Age = Cast.To\u003cint\u003e(drConnection[\"Age\"]);\nstd.IsPassed = Cast.To\u003cbool\u003e(drConnection[\"IsPassed\"]);",
        "code_language": "C#"
      }
    ],
    "title": "Generic type casting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}