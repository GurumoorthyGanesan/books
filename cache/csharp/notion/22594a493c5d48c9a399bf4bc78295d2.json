{
  "ID": "22594a49-3c5d-48c9-a399-bf4bc78295d2",
  "Root": {
    "id": "22594a49-3c5d-48c9-a399-bf4bc78295d2",
    "alive": true,
    "content": [
      "5517a52f-9091-4641-a909-1b3a9ce52791",
      "26c68973-1363-43e5-98fe-a703719751e3",
      "bf387b7f-1d99-48a0-8b9e-8f58a7950048"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528620371,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550213280000,
    "parent_id": "725b2bde-ffc2-44a7-b59e-22caf9f1930b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Complete Password Hashing Solution using Pbkdf2"
        ]
      ]
    },
    "type": "page",
    "version": 23,
    "content_resolved": [
      {
        "id": "5517a52f-9091-4641-a909-1b3a9ce52791",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550213278269,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550213280000,
        "parent_id": "22594a49-3c5d-48c9-a399-bf4bc78295d2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Linq;\nusing System.Security.Cryptography;\n\nnamespace YourCryptoNamespace\n{\n    /// \u003csummary\u003e\n    /// Salted password hashing with PBKDF2-SHA1.\n  /// Compatibility: .NET 3.0 and later.\n  /// \u003c/summary\u003e\n  /// \u003cremarks\u003eSee http://crackstation.net/hashing-security.htm for much more on password hashing.\u003c/remarks\u003e\n  public static class PasswordHashProvider\n  {\n    /// \u003csummary\u003e\n    /// The salt byte size, 64 length ensures safety but could be increased / decreased\n    /// \u003c/summary\u003e\n    private const int SaltByteSize = 64;\n    /// \u003csummary\u003e\n    /// The hash byte size, \n    /// \u003c/summary\u003e\n    private const int HashByteSize = 64;\n    /// \u003csummary\u003e\n    ///  High iteration count is less likely to be cracked\n    /// \u003c/summary\u003e\n    private const int Pbkdf2Iterations = 10000;\n\n    /// \u003csummary\u003e\n    /// Creates a salted PBKDF2 hash of the password.\n    /// \u003c/summary\u003e\n    /// \u003cremarks\u003e\n    /// The salt and the hash have to be persisted side by side for the password. They could be persisted as bytes or as a string using the convenience methods in the next class to convert from byte[] to string and later back again when executing password validation.\n    /// \u003c/remarks\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to hash.\u003c/param\u003e\n    /// \u003creturns\u003eThe hash of the password.\u003c/returns\u003e\n    public static PasswordHashContainer CreateHash(string password)\n    {\n      // Generate a random salt\n      using (var csprng = new RNGCryptoServiceProvider())\n      {\n        // create a unique salt for every password hash to prevent rainbow and dictionary based attacks\n        var salt = new byte[SaltByteSize];\n        csprng.GetBytes(salt);\n\n        // Hash the password and encode the parameters\n        var hash = Pbkdf2(password, salt, Pbkdf2Iterations, HashByteSize);\n\n        return new PasswordHashContainer(hash, salt);\n      }\n    }\n    /// \u003csummary\u003e\n    /// Recreates a password hash based on the incoming password string and the stored salt\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to check.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe salt existing.\u003c/param\u003e\n    /// \u003creturns\u003ethe generated hash based on the password and salt\u003c/returns\u003e\n    public static byte[] CreateHash(string password, byte[] salt)\n    {\n      // Extract the parameters from the hash\n      return Pbkdf2(password, salt, Pbkdf2Iterations, HashByteSize);\n    }\n\n    /// \u003csummary\u003e\n    /// Validates a password given a hash of the correct one.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to check.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe existing stored salt.\u003c/param\u003e\n    /// \u003cparam name=\"correctHash\"\u003eThe hash of the existing password.\u003c/param\u003e\n    /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if the password is correct. \u003cc\u003efalse\u003c/c\u003e otherwise. \u003c/returns\u003e\n    public static bool ValidatePassword(string password, byte[] salt, byte[] correctHash)\n    {\n      // Extract the parameters from the hash\n      byte[] testHash = Pbkdf2(password, salt, Pbkdf2Iterations, HashByteSize);\n      return CompareHashes(correctHash, testHash);\n    }\n    /// \u003csummary\u003e\n    /// Compares two byte arrays (hashes)\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"array1\"\u003eThe array1.\u003c/param\u003e\n    /// \u003cparam name=\"array2\"\u003eThe array2.\u003c/param\u003e\n    /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if they are the same, otherwise \u003cc\u003efalse\u003c/c\u003e\u003c/returns\u003e\n    public static bool CompareHashes(byte[] array1, byte[] array2)\n    {\n      if (array1.Length != array2.Length) return false;\n      return !array1.Where((t, i) =\u003e t != array2[i]).Any();\n    }\n  \n    /// \u003csummary\u003e\n    /// Computes the PBKDF2-SHA1 hash of a password.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to hash.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe salt.\u003c/param\u003e\n    /// \u003cparam name=\"iterations\"\u003eThe PBKDF2 iteration count.\u003c/param\u003e\n    /// \u003cparam name=\"outputBytes\"\u003eThe length of the hash to generate, in bytes.\u003c/param\u003e\n    /// \u003creturns\u003eA hash of the password.\u003c/returns\u003e\n    private static byte[] Pbkdf2(string password, byte[] salt, int iterations, int outputBytes)\n    {\n      using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt))\n      {\n        pbkdf2.IterationCount = iterations;\n        return pbkdf2.GetBytes(outputBytes);\n      }\n    }\n  }\n\n  /// \u003csummary\u003e\n  /// Container for password hash and salt and iterations.\n  /// \u003c/summary\u003e\n  public sealed class PasswordHashContainer\n  {\n    /// \u003csummary\u003e\n    /// Gets the hashed password.\n    /// \u003c/summary\u003e\n    public byte[] HashedPassword { get; private set; }\n    /// \u003csummary\u003e\n    /// Gets the salt.\n    /// \u003c/summary\u003e\n    public byte[] Salt { get; private set; }\n\n    /// \u003csummary\u003e\n    /// Initializes a new instance of the \u003csee cref=\"PasswordHashContainer\" /\u003e class.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"hashedPassword\"\u003eThe hashed password.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe salt.\u003c/param\u003e\n    public PasswordHashContainer(byte[] hashedPassword, byte[] salt)\n    {\n      this.HashedPassword = hashedPassword;\n      this.Salt = salt;\n    }\n  }\n\n  /// \u003csummary\u003e\n  /// Convenience methods for converting between hex strings and byte array.\n  /// \u003c/summary\u003e\n  public static class ByteConverter\n  {\n    /// \u003csummary\u003e\n    /// Converts the hex representation string to an array of bytes\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"hexedString\"\u003eThe hexed string.\u003c/param\u003e\n    /// \u003creturns\u003e\u003c/returns\u003e\n    public static byte[] GetHexBytes(string hexedString)\n    {\n      var bytes = new byte[hexedString.Length / 2];\n      for (var i = 0; i \u003c bytes.Length; i++)\n      {\n        var strPos = i * 2;\n        var chars = hexedString.Substring(strPos, 2);\n        bytes[i] = Convert.ToByte(chars, 16);\n      }\n      return bytes;\n    }\n    /// \u003csummary\u003e\n    /// Gets a hex string representation of the byte array passed in.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"bytes\"\u003eThe bytes.\u003c/param\u003e\n    public static string GetHexString(byte[] bytes)\n    {\n      return BitConverter.ToString(bytes).Replace(\"-\", \"\").ToUpper();\n    }\n  }\n}\n\n/* \n * Password Hashing With PBKDF2 (http://crackstation.net/hashing-security.htm).\n * Copyright (c) 2013, Taylor Hornby\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, \n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation \n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n */"
            ]
          ]
        },
        "type": "code",
        "version": 12,
        "code": "using System;\nusing System.Linq;\nusing System.Security.Cryptography;\n\nnamespace YourCryptoNamespace\n{\n    /// \u003csummary\u003e\n    /// Salted password hashing with PBKDF2-SHA1.\n  /// Compatibility: .NET 3.0 and later.\n  /// \u003c/summary\u003e\n  /// \u003cremarks\u003eSee http://crackstation.net/hashing-security.htm for much more on password hashing.\u003c/remarks\u003e\n  public static class PasswordHashProvider\n  {\n    /// \u003csummary\u003e\n    /// The salt byte size, 64 length ensures safety but could be increased / decreased\n    /// \u003c/summary\u003e\n    private const int SaltByteSize = 64;\n    /// \u003csummary\u003e\n    /// The hash byte size, \n    /// \u003c/summary\u003e\n    private const int HashByteSize = 64;\n    /// \u003csummary\u003e\n    ///  High iteration count is less likely to be cracked\n    /// \u003c/summary\u003e\n    private const int Pbkdf2Iterations = 10000;\n\n    /// \u003csummary\u003e\n    /// Creates a salted PBKDF2 hash of the password.\n    /// \u003c/summary\u003e\n    /// \u003cremarks\u003e\n    /// The salt and the hash have to be persisted side by side for the password. They could be persisted as bytes or as a string using the convenience methods in the next class to convert from byte[] to string and later back again when executing password validation.\n    /// \u003c/remarks\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to hash.\u003c/param\u003e\n    /// \u003creturns\u003eThe hash of the password.\u003c/returns\u003e\n    public static PasswordHashContainer CreateHash(string password)\n    {\n      // Generate a random salt\n      using (var csprng = new RNGCryptoServiceProvider())\n      {\n        // create a unique salt for every password hash to prevent rainbow and dictionary based attacks\n        var salt = new byte[SaltByteSize];\n        csprng.GetBytes(salt);\n\n        // Hash the password and encode the parameters\n        var hash = Pbkdf2(password, salt, Pbkdf2Iterations, HashByteSize);\n\n        return new PasswordHashContainer(hash, salt);\n      }\n    }\n    /// \u003csummary\u003e\n    /// Recreates a password hash based on the incoming password string and the stored salt\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to check.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe salt existing.\u003c/param\u003e\n    /// \u003creturns\u003ethe generated hash based on the password and salt\u003c/returns\u003e\n    public static byte[] CreateHash(string password, byte[] salt)\n    {\n      // Extract the parameters from the hash\n      return Pbkdf2(password, salt, Pbkdf2Iterations, HashByteSize);\n    }\n\n    /// \u003csummary\u003e\n    /// Validates a password given a hash of the correct one.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to check.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe existing stored salt.\u003c/param\u003e\n    /// \u003cparam name=\"correctHash\"\u003eThe hash of the existing password.\u003c/param\u003e\n    /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if the password is correct. \u003cc\u003efalse\u003c/c\u003e otherwise. \u003c/returns\u003e\n    public static bool ValidatePassword(string password, byte[] salt, byte[] correctHash)\n    {\n      // Extract the parameters from the hash\n      byte[] testHash = Pbkdf2(password, salt, Pbkdf2Iterations, HashByteSize);\n      return CompareHashes(correctHash, testHash);\n    }\n    /// \u003csummary\u003e\n    /// Compares two byte arrays (hashes)\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"array1\"\u003eThe array1.\u003c/param\u003e\n    /// \u003cparam name=\"array2\"\u003eThe array2.\u003c/param\u003e\n    /// \u003creturns\u003e\u003cc\u003etrue\u003c/c\u003e if they are the same, otherwise \u003cc\u003efalse\u003c/c\u003e\u003c/returns\u003e\n    public static bool CompareHashes(byte[] array1, byte[] array2)\n    {\n      if (array1.Length != array2.Length) return false;\n      return !array1.Where((t, i) =\u003e t != array2[i]).Any();\n    }\n  \n    /// \u003csummary\u003e\n    /// Computes the PBKDF2-SHA1 hash of a password.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"password\"\u003eThe password to hash.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe salt.\u003c/param\u003e\n    /// \u003cparam name=\"iterations\"\u003eThe PBKDF2 iteration count.\u003c/param\u003e\n    /// \u003cparam name=\"outputBytes\"\u003eThe length of the hash to generate, in bytes.\u003c/param\u003e\n    /// \u003creturns\u003eA hash of the password.\u003c/returns\u003e\n    private static byte[] Pbkdf2(string password, byte[] salt, int iterations, int outputBytes)\n    {\n      using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt))\n      {\n        pbkdf2.IterationCount = iterations;\n        return pbkdf2.GetBytes(outputBytes);\n      }\n    }\n  }\n\n  /// \u003csummary\u003e\n  /// Container for password hash and salt and iterations.\n  /// \u003c/summary\u003e\n  public sealed class PasswordHashContainer\n  {\n    /// \u003csummary\u003e\n    /// Gets the hashed password.\n    /// \u003c/summary\u003e\n    public byte[] HashedPassword { get; private set; }\n    /// \u003csummary\u003e\n    /// Gets the salt.\n    /// \u003c/summary\u003e\n    public byte[] Salt { get; private set; }\n\n    /// \u003csummary\u003e\n    /// Initializes a new instance of the \u003csee cref=\"PasswordHashContainer\" /\u003e class.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"hashedPassword\"\u003eThe hashed password.\u003c/param\u003e\n    /// \u003cparam name=\"salt\"\u003eThe salt.\u003c/param\u003e\n    public PasswordHashContainer(byte[] hashedPassword, byte[] salt)\n    {\n      this.HashedPassword = hashedPassword;\n      this.Salt = salt;\n    }\n  }\n\n  /// \u003csummary\u003e\n  /// Convenience methods for converting between hex strings and byte array.\n  /// \u003c/summary\u003e\n  public static class ByteConverter\n  {\n    /// \u003csummary\u003e\n    /// Converts the hex representation string to an array of bytes\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"hexedString\"\u003eThe hexed string.\u003c/param\u003e\n    /// \u003creturns\u003e\u003c/returns\u003e\n    public static byte[] GetHexBytes(string hexedString)\n    {\n      var bytes = new byte[hexedString.Length / 2];\n      for (var i = 0; i \u003c bytes.Length; i++)\n      {\n        var strPos = i * 2;\n        var chars = hexedString.Substring(strPos, 2);\n        bytes[i] = Convert.ToByte(chars, 16);\n      }\n      return bytes;\n    }\n    /// \u003csummary\u003e\n    /// Gets a hex string representation of the byte array passed in.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"bytes\"\u003eThe bytes.\u003c/param\u003e\n    public static string GetHexString(byte[] bytes)\n    {\n      return BitConverter.ToString(bytes).Replace(\"-\", \"\").ToUpper();\n    }\n  }\n}\n\n/* \n * Password Hashing With PBKDF2 (http://crackstation.net/hashing-security.htm).\n * Copyright (c) 2013, Taylor Hornby\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, \n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation \n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n * POSSIBILITY OF SUCH DAMAGE.\n */",
        "code_language": "C#"
      },
      {
        "id": "26c68973-1363-43e5-98fe-a703719751e3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528620369,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528620369,
        "parent_id": "22594a49-3c5d-48c9-a399-bf4bc78295d2",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "bf387b7f-1d99-48a0-8b9e-8f58a7950048",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528620371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528620371,
        "parent_id": "22594a49-3c5d-48c9-a399-bf4bc78295d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please see this excellent resource "
            ],
            [
              "Crackstation - Salted Password Hashing - Doing it Right",
              [
                [
                  "a",
                  "https://crackstation.net/hashing-security.htm"
                ]
              ]
            ],
            [
              " for more information. Part of this solution (the hashing function) was based on the code from that site."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please see this excellent resource "
          },
          {
            "Text": "Crackstation - Salted Password Hashing - Doing it Right",
            "Link": "https://crackstation.net/hashing-security.htm"
          },
          {
            "Text": " for more information. Part of this solution (the hashing function) was based on the code from that site."
          }
        ]
      }
    ],
    "title": "Complete Password Hashing Solution using Pbkdf2",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}