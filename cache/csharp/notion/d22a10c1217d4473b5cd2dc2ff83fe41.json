{
  "ID": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
  "Root": {
    "id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
    "alive": true,
    "content": [
      "fbe3ef1a-7fd2-4502-a283-c374313ba58a",
      "2f287639-7db7-46e0-8a1c-71e86e4945b7",
      "c29be769-b77c-4b00-bfd9-862bb32ff60e",
      "0dd52da9-0f91-4a6a-85cf-3cea1d99b8aa",
      "bbbe5271-c75e-44c5-8024-c178bce62da3",
      "3e37692d-590c-46db-94e7-bbb6d852d929",
      "6402fb9f-ab36-4537-8a02-07905a7c5cde",
      "bf229e63-e6c9-43fd-af41-e279457e6a49"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525356345,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550046000000,
    "parent_id": "625ceab9-a31c-417d-842a-19793514588c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Executing code in constraint context"
        ]
      ]
    },
    "type": "page",
    "version": 15,
    "content_resolved": [
      {
        "id": "fbe3ef1a-7fd2-4502-a283-c374313ba58a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356342,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525356342,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you have code (a "
            ],
            [
              "routine",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") you want to execute under a specific (constraint) context, you can use dependency injection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you have code (a "
          },
          {
            "Text": "routine",
            "AttrFlags": 4
          },
          {
            "Text": ") you want to execute under a specific (constraint) context, you can use dependency injection."
          }
        ]
      },
      {
        "id": "2f287639-7db7-46e0-8a1c-71e86e4945b7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356344,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525356344,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example shows the constraint of executing under an open SSL connection. This first part would be in your library or framework, which you won’t expose to the client code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example shows the constraint of executing under an open SSL connection. This first part would be in your library or framework, which you won’t expose to the client code."
          }
        ]
      },
      {
        "id": "c29be769-b77c-4b00-bfd9-862bb32ff60e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356344,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550046000000,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static class SSLContext\n{\n    // define the delegate to inject\n    public delegate void TunnelRoutine(BinaryReader sslReader, BinaryWriter sslWriter);\n\n    // this allows the routine to be executed under SSL\n    public static void ClientTunnel(TcpClient tcpClient, TunnelRoutine routine)\n    {\n        using (SslStream sslStream = new SslStream(tcpClient.GetStream(), true, _validate))\n        {\n            sslStream.AuthenticateAsClient(HOSTNAME, null, SslProtocols.Tls, false);\n\n            if (!sslStream.IsAuthenticated)\n            {\n                throw new SecurityException(\"SSL tunnel not authenticated\");\n            }\n\n            if (!sslStream.IsEncrypted)\n            {\n                throw new SecurityException(\"SSL tunnel not encrypted\");\n            }\n\n            using (BinaryReader sslReader = new BinaryReader(sslStream))\n            using (BinaryWriter sslWriter = new BinaryWriter(sslStream))\n            {\n                routine(sslReader, sslWriter);\n            }\n        }\n    }\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 15,
        "code": "public static class SSLContext\n{\n    // define the delegate to inject\n    public delegate void TunnelRoutine(BinaryReader sslReader, BinaryWriter sslWriter);\n\n    // this allows the routine to be executed under SSL\n    public static void ClientTunnel(TcpClient tcpClient, TunnelRoutine routine)\n    {\n        using (SslStream sslStream = new SslStream(tcpClient.GetStream(), true, _validate))\n        {\n            sslStream.AuthenticateAsClient(HOSTNAME, null, SslProtocols.Tls, false);\n\n            if (!sslStream.IsAuthenticated)\n            {\n                throw new SecurityException(\"SSL tunnel not authenticated\");\n            }\n\n            if (!sslStream.IsEncrypted)\n            {\n                throw new SecurityException(\"SSL tunnel not encrypted\");\n            }\n\n            using (BinaryReader sslReader = new BinaryReader(sslStream))\n            using (BinaryWriter sslWriter = new BinaryWriter(sslStream))\n            {\n                routine(sslReader, sslWriter);\n            }\n        }\n    }\n}\n",
        "code_language": "C#"
      },
      {
        "id": "0dd52da9-0f91-4a6a-85cf-3cea1d99b8aa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356345,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525356345,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now the client code which wants to do something under SSL but does not want to handle all the SSL details. You can now do whatever you want inside the SSL tunnel, for example exchange a symmetric key:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now the client code which wants to do something under SSL but does not want to handle all the SSL details. You can now do whatever you want inside the SSL tunnel, for example exchange a symmetric key:"
          }
        ]
      },
      {
        "id": "bbbe5271-c75e-44c5-8024-c178bce62da3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356345,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549612200000,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public void ExchangeSymmetricKey(BinaryReader sslReader, BinaryWriter sslWriter)\n{\n    byte[] bytes = new byte[8];\n    (new RNGCryptoServiceProvider()).GetNonZeroBytes(bytes);\n    sslWriter.Write(BitConverter.ToUInt64(bytes, 0));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public void ExchangeSymmetricKey(BinaryReader sslReader, BinaryWriter sslWriter)\n{\n    byte[] bytes = new byte[8];\n    (new RNGCryptoServiceProvider()).GetNonZeroBytes(bytes);\n    sslWriter.Write(BitConverter.ToUInt64(bytes, 0));\n}",
        "code_language": "C#"
      },
      {
        "id": "3e37692d-590c-46db-94e7-bbb6d852d929",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356345,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525356345,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You execute this routine as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You execute this routine as follows:"
          }
        ]
      },
      {
        "id": "6402fb9f-ab36-4537-8a02-07905a7c5cde",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356345,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549612200000,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "SSLContext.ClientTunnel(tcpClient, this.ExchangeSymmetricKey);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "SSLContext.ClientTunnel(tcpClient, this.ExchangeSymmetricKey);",
        "code_language": "C#"
      },
      {
        "id": "bf229e63-e6c9-43fd-af41-e279457e6a49",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525356345,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525356345,
        "parent_id": "d22a10c1-217d-4473-b5cd-2dc2ff83fe41",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To do this, you need the "
            ],
            [
              "using()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause because it is the only way (apart from a "
            ],
            [
              "try..finally",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block) you can guarantee the client code ("
            ],
            [
              "ExchangeSymmetricKey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") never exits without properly disposing of the disposable resources. Without "
            ],
            [
              "using()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause, you would never know if a routine could break the context’s constraint to dispose of those resources."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To do this, you need the "
          },
          {
            "Text": "using()",
            "AttrFlags": 2
          },
          {
            "Text": " clause because it is the only way (apart from a "
          },
          {
            "Text": "try..finally",
            "AttrFlags": 2
          },
          {
            "Text": " block) you can guarantee the client code ("
          },
          {
            "Text": "ExchangeSymmetricKey",
            "AttrFlags": 2
          },
          {
            "Text": ") never exits without properly disposing of the disposable resources. Without "
          },
          {
            "Text": "using()",
            "AttrFlags": 2
          },
          {
            "Text": " clause, you would never know if a routine could break the context’s constraint to dispose of those resources."
          }
        ]
      }
    ],
    "title": "Executing code in constraint context",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}