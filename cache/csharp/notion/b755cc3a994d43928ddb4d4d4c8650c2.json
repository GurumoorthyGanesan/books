{
  "ID": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
  "Root": {
    "alive": true,
    "content": [
      "ab5a20d1-09f5-4791-bba6-39fb5587065d",
      "d62da158-86da-454d-84e6-f32e9dcdaa30",
      "a8ad6af4-1e94-45fc-ae2e-5c4f57bbd6e7",
      "69b4ab2a-3211-436e-9b6a-775cd0fdd6de",
      "03ba337c-f5b2-4266-a9f6-72f01ef67aab",
      "4b6e9537-976d-4642-9d9e-dc9207300dbf",
      "f81686ac-c505-41ed-9993-c81346c8e6ad",
      "14af883d-4ebc-4f19-a518-0bc5e65d8900",
      "441eda64-9044-4b56-8d9a-7fd1047531ba",
      "8abc91ef-b729-4e09-b580-f58ca3240683",
      "ff961b41-90b2-4efe-97d2-d64ca372a647"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525800265,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550113200000,
    "parent_id": "690c8bdb-4161-40ee-ae39-db6ce423d3b9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Deadlocks two threads waiting on each other"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800261,
        "id": "ab5a20d1-09f5-4791-bba6-39fb5587065d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800261,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A deadlock is what occurs when two or more threads are waiting for eachother to complete or to release a resource in such a way that they wait forever."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A deadlock is what occurs when two or more threads are waiting for eachother to complete or to release a resource in such a way that they wait forever."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800264,
        "id": "d62da158-86da-454d-84e6-f32e9dcdaa30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800264,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A typical scenario of two threads waiting on eachother to complete is when a Windows Forms GUI thread waits for a worker thread and the worker thread attempts to invoke an object managed by the GUI thread. Observe that with this code exmaple, clicking button1 will cause the program to hang."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A typical scenario of two threads waiting on eachother to complete is when a Windows Forms GUI thread waits for a worker thread and the worker thread attempts to invoke an object managed by the GUI thread. Observe that with this code exmaple, clicking button1 will cause the program to hang."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800264,
        "id": "a8ad6af4-1e94-45fc-ae2e-5c4f57bbd6e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113200000,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void button1_Click(object sender, EventArgs e)\n{\n    Thread workerthread= new Thread(dowork);\n    workerthread.Start();\n    workerthread.Join();\n    // Do something after\n}\n\nprivate void dowork()\n{\n    // Do something before\n    textBox1.Invoke(new Action(() =\u003e textBox1.Text = \"Some Text\"));\n    // Do something after\n}"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "private void button1_Click(object sender, EventArgs e)\n{\n    Thread workerthread= new Thread(dowork);\n    workerthread.Start();\n    workerthread.Join();\n    // Do something after\n}\n\nprivate void dowork()\n{\n    // Do something before\n    textBox1.Invoke(new Action(() =\u003e textBox1.Text = \"Some Text\"));\n    // Do something after\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "69b4ab2a-3211-436e-9b6a-775cd0fdd6de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800265,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "workerthread.Join()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a call that blocks the calling thread until workerthread completes. "
            ],
            [
              "textBox1.Invoke(invoke_delegate)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a call that blocks the calling thread until the GUI thread has processed invoke_delegate, but this call causes deadlocks if the GUI thread is already waiting for the calling thread to complete."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "workerthread.Join()",
            "AttrFlags": 2
          },
          {
            "Text": " is a call that blocks the calling thread until workerthread completes. "
          },
          {
            "Text": "textBox1.Invoke(invoke_delegate)",
            "AttrFlags": 2
          },
          {
            "Text": " is a call that blocks the calling thread until the GUI thread has processed invoke_delegate, but this call causes deadlocks if the GUI thread is already waiting for the calling thread to complete."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "03ba337c-f5b2-4266-a9f6-72f01ef67aab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800265,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To get around this, one can use a non-blocking way of invoking the textbox instead:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To get around this, one can use a non-blocking way of invoking the textbox instead:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "4b6e9537-976d-4642-9d9e-dc9207300dbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113200000,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void dowork()\n{\n    // Do work\n    textBox1.BeginInvoke(new Action(() =\u003e textBox1.Text = \"Some Text\"));\n    // Do work that is not dependent on textBox1 being updated first\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private void dowork()\n{\n    // Do work\n    textBox1.BeginInvoke(new Action(() =\u003e textBox1.Text = \"Some Text\"));\n    // Do work that is not dependent on textBox1 being updated first\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "f81686ac-c505-41ed-9993-c81346c8e6ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800265,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, this will cause trouble if you need to run code that is dependent on the textbox being updated first. In that case, run that as part of the invoke, but be aware that this will make it run on the GUI thread."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, this will cause trouble if you need to run code that is dependent on the textbox being updated first. In that case, run that as part of the invoke, but be aware that this will make it run on the GUI thread."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "14af883d-4ebc-4f19-a518-0bc5e65d8900",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113200000,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void dowork()\n{\n    // Do work\n    textBox1.BeginInvoke(new Action(() =\u003e {\n        textBox1.Text = \"Some Text\";\n        // Do work dependent on textBox1 being updated first, \n        // start another worker thread or raise an event\n    }));\n    // Do work that is not dependent on textBox1 being updated first\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private void dowork()\n{\n    // Do work\n    textBox1.BeginInvoke(new Action(() =\u003e {\n        textBox1.Text = \"Some Text\";\n        // Do work dependent on textBox1 being updated first, \n        // start another worker thread or raise an event\n    }));\n    // Do work that is not dependent on textBox1 being updated first\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "441eda64-9044-4b56-8d9a-7fd1047531ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800265,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively start af whole new thread and let that one do the waiting on the GUI thread, so that workerthread might complete."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively start af whole new thread and let that one do the waiting on the GUI thread, so that workerthread might complete."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "8abc91ef-b729-4e09-b580-f58ca3240683",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113200000,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void dowork()\n{\n    // Do work\n    Thread workerthread2 = new Thread(() =\u003e\n    {\n        textBox1.Invoke(new Action(() =\u003e textBox1.Text = \"Some Text\"));\n        // Do work dependent on textBox1 being updated first, \n        // start another worker thread or raise an event\n    });\n    workerthread2.Start();\n    // Do work that is not dependent on textBox1 being updated first\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private void dowork()\n{\n    // Do work\n    Thread workerthread2 = new Thread(() =\u003e\n    {\n        textBox1.Invoke(new Action(() =\u003e textBox1.Text = \"Some Text\"));\n        // Do work dependent on textBox1 being updated first, \n        // start another worker thread or raise an event\n    });\n    workerthread2.Start();\n    // Do work that is not dependent on textBox1 being updated first\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525800265,
        "id": "ff961b41-90b2-4efe-97d2-d64ca372a647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525800265,
        "parent_id": "b755cc3a-994d-4392-8ddb-4d4d4c8650c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To minimize the risk of running into a deadlock of mutual waiting, always avoid circular references between threads when possible. A hierarchy of threads where lower-ranking threads only leave messages for higher-ranking threads and never waiting on them will not run into this kind of issue. However, it would still be vulnerable to deadlocks based on resource locking."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To minimize the risk of running into a deadlock of mutual waiting, always avoid circular references between threads when possible. A hierarchy of threads where lower-ranking threads only leave messages for higher-ranking threads and never waiting on them will not run into this kind of issue. However, it would still be vulnerable to deadlocks based on resource locking."
          }
        ]
      }
    ],
    "title": "Deadlocks two threads waiting on each other",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}