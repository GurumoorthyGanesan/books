{
  "ID": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
  "Root": {
    "alive": true,
    "content": [
      "7d10855e-6b50-48b5-b630-e1381cf6a410",
      "6ba96b2a-dc3a-433a-8989-8dbd7803957f",
      "a6f0e21b-a1e4-4672-9af8-6d0ab74a09d2",
      "5020bd20-0e41-42da-9c30-a9c92dc34dff",
      "e80c5170-5e00-485d-b5b9-b0c5e065ef20",
      "d8ba0bc6-72f4-4127-b68a-81bc5e00b005",
      "10b6cae5-e93b-41c0-9bf3-19107aad07a3",
      "6294690f-c4c7-4f46-971f-b8b7ddf10355",
      "58eccb17-143b-4779-97ee-93920171314f",
      "709ec2af-8178-481c-a2d0-3bdcbaad8c89"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549529450315,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549619820000,
    "parent_id": "e942e648-f87d-4b60-8e8c-527acf37bbf3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating Iterators Using Yield"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450308,
        "id": "7d10855e-6b50-48b5-b630-e1381cf6a410",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450308,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators "
            ],
            [
              "produce",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " enumerators. In C#, enumerators are produced by defining methods, properties or indexers that contain "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterators "
          },
          {
            "Text": "produce",
            "AttrFlags": 4
          },
          {
            "Text": " enumerators. In C#, enumerators are produced by defining methods, properties or indexers that contain "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " statements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450311,
        "id": "6ba96b2a-dc3a-433a-8989-8dbd7803957f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450311,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most methods will return control to their caller through normal "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements, which disposes all state local to that method. In contrast, methods that use "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements allow them to return multiple values to the caller on request while "
            ],
            [
              "preserving",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " local state in-between returning those values. These returned values constitute a sequence. There are two types of "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements used within iterators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most methods will return control to their caller through normal "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " statements, which disposes all state local to that method. In contrast, methods that use "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " statements allow them to return multiple values to the caller on request while "
          },
          {
            "Text": "preserving",
            "AttrFlags": 4
          },
          {
            "Text": " local state in-between returning those values. These returned values constitute a sequence. There are two types of "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " statements used within iterators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450312,
        "id": "a6f0e21b-a1e4-4672-9af8-6d0ab74a09d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450312,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "yield return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which returns control to the caller but preserves state. The callee will continue execution from this line when control is passed back to it."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "yield return",
            "AttrFlags": 2
          },
          {
            "Text": ", which returns control to the caller but preserves state. The callee will continue execution from this line when control is passed back to it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450312,
        "id": "5020bd20-0e41-42da-9c30-a9c92dc34dff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450312,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "yield break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which functions similarly to a normal "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement - this signifies the end of the sequence. Normal "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements themselves are illegal within an iterator block."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "yield break",
            "AttrFlags": 2
          },
          {
            "Text": ", which functions similarly to a normal "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " statement - this signifies the end of the sequence. Normal "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " statements themselves are illegal within an iterator block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450314,
        "id": "e80c5170-5e00-485d-b5b9-b0c5e065ef20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450314,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example below demonstrates an iterator method that can be used to generate the "
            ],
            [
              "Fibonacci sequence",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Fibonacci_number"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example below demonstrates an iterator method that can be used to generate the "
          },
          {
            "Text": "Fibonacci sequence",
            "Link": "https://en.wikipedia.org/wiki/Fibonacci_number"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450314,
        "id": "d8ba0bc6-72f4-4127-b68a-81bc5e00b005",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450314,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IEnumerable\u003cint\u003e Fibonacci(int count)\n{\n    int prev = 1;\n    int curr = 1;\n    \n    for (int i = 0; i \u003c count; i++)\n    {\n        yield return prev;\n        int temp = prev + curr;\n        prev = curr;\n        curr = temp;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IEnumerable\u003cint\u003e Fibonacci(int count)\n{\n    int prev = 1;\n    int curr = 1;\n    \n    for (int i = 0; i \u003c count; i++)\n    {\n        yield return prev;\n        int temp = prev + curr;\n        prev = curr;\n        curr = temp;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450314,
        "id": "10b6cae5-e93b-41c0-9bf3-19107aad07a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450314,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This iterator can then be used to produce an enumerator of the Fibonacci sequence that can be consumed by a calling method. The code below demonstrates how the first ten terms within the Fibonacci sequence can be enumerated:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This iterator can then be used to produce an enumerator of the Fibonacci sequence that can be consumed by a calling method. The code below demonstrates how the first ten terms within the Fibonacci sequence can be enumerated:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450314,
        "id": "6294690f-c4c7-4f46-971f-b8b7ddf10355",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450314,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void Main()\n{\n    foreach (int term in Fibonacci(10))\n    {\n        Console.WriteLine(term);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void Main()\n{\n    foreach (int term in Fibonacci(10))\n    {\n        Console.WriteLine(term);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450314,
        "id": "58eccb17-143b-4779-97ee-93920171314f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450314,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529450314,
        "id": "709ec2af-8178-481c-a2d0-3bdcbaad8c89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529450314,
        "parent_id": "e75fd4ee-999d-4001-bbb5-edb974dfe57e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1\n1\n2\n3\n5\n8\n13\n21\n34\n55"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1\n1\n2\n3\n5\n8\n13\n21\n34\n55",
        "code_language": "Plain Text"
      }
    ],
    "title": "Creating Iterators Using Yield",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}