{
  "ID": "377995f5-f574-449e-a6e2-a664238c4988",
  "Root": {
    "alive": true,
    "content": [
      "b3a168ec-b068-46e6-b1bb-4699cd8f847e",
      "2aea24aa-4282-4b35-84cc-6300578ac13b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527036733,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "377995f5-f574-449e-a6e2-a664238c4988",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550136180000,
    "parent_id": "91106db6-78bc-4ff0-875f-edacdc1e0312",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "An async cancellable polling Task that waits between iterations"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527036733,
        "id": "b3a168ec-b068-46e6-b1bb-4699cd8f847e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550136180000,
        "parent_id": "377995f5-f574-449e-a6e2-a664238c4988",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Foo\n{\n    private const int TASK_ITERATION_DELAY_MS = 1000;\n    private CancellationTokenSource _cts;\n\n    public Foo()\n    {\n        this._cts = new CancellationTokenSource();\n    }\n\n    public void StartExecution()\n    {\n        Task.Factory.StartNew(this.OwnCodeCancelableTask_EveryNSeconds, this._cts.Token);\n    }\n\n    public void CancelExecution()\n    {\n        this._cts.Cancel();\n    }\n\n    /// \u003csummary\u003e\n    /// \"Infinite\" loop that runs every N seconds. Good for checking for a heartbeat or updates.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"taskState\"\u003eThe cancellation token from our _cts field, passed in the StartNew call\u003c/param\u003e\n    private async void OwnCodeCancelableTask_EveryNSeconds(object taskState)\n    {\n        var token = (CancellationToken)taskState;\n\n        while (!token.IsCancellationRequested)\n        {\n            Console.WriteLine(\"Do the work that needs to happen every N seconds in this loop\");\n\n            // Passing token here allows the Delay to be cancelled if your task gets cancelled.\n            await Task.Delay(TASK_ITERATION_DELAY_MS, token);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public class Foo\n{\n    private const int TASK_ITERATION_DELAY_MS = 1000;\n    private CancellationTokenSource _cts;\n\n    public Foo()\n    {\n        this._cts = new CancellationTokenSource();\n    }\n\n    public void StartExecution()\n    {\n        Task.Factory.StartNew(this.OwnCodeCancelableTask_EveryNSeconds, this._cts.Token);\n    }\n\n    public void CancelExecution()\n    {\n        this._cts.Cancel();\n    }\n\n    /// \u003csummary\u003e\n    /// \"Infinite\" loop that runs every N seconds. Good for checking for a heartbeat or updates.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"taskState\"\u003eThe cancellation token from our _cts field, passed in the StartNew call\u003c/param\u003e\n    private async void OwnCodeCancelableTask_EveryNSeconds(object taskState)\n    {\n        var token = (CancellationToken)taskState;\n\n        while (!token.IsCancellationRequested)\n        {\n            Console.WriteLine(\"Do the work that needs to happen every N seconds in this loop\");\n\n            // Passing token here allows the Delay to be cancelled if your task gets cancelled.\n            await Task.Delay(TASK_ITERATION_DELAY_MS, token);\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550136120000,
        "id": "2aea24aa-4282-4b35-84cc-6300578ac13b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550136120000,
        "parent_id": "377995f5-f574-449e-a6e2-a664238c4988",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "An async cancellable polling Task that waits between iterations",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}