{
  "ID": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
  "Root": {
    "id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
    "alive": true,
    "content": [
      "ec5ef53a-5ad9-4086-965b-27840d0d855e",
      "fe8ae45d-f9d2-4540-a5c2-cb82363290da",
      "7a35800a-9c0f-4956-bf86-04e80cc5843c",
      "36e82901-7b1b-4799-85a5-42afc15bdd64",
      "2d660947-3a95-40eb-a1f8-49e1d580bdda",
      "fdc3a3e0-964c-4a37-816b-cb559f88ab19",
      "0a77b256-1370-40c6-a2bb-c19a8793f6c5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530019297,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550222760000,
    "parent_id": "7433cefb-5d9a-4d72-8021-8bff7fca5b91",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pointer arithmetic"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "ec5ef53a-5ad9-4086-965b-27840d0d855e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530019293,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530019293,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Addition and subtraction in pointers works differently from integers. When a pointer is incremented or decremented, the address it points to is increased or decreased by the size of the referent type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Addition and subtraction in pointers works differently from integers. When a pointer is incremented or decremented, the address it points to is increased or decreased by the size of the referent type."
          }
        ]
      },
      {
        "id": "fe8ae45d-f9d2-4540-a5c2-cb82363290da",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530019296,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530019296,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, the type "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (alias for "
            ],
            [
              "System.Int32",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") has a size of 4. If an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be stored in address 0, the subsequent "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be stored in address 4, and so on. In code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, the type "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " (alias for "
          },
          {
            "Text": "System.Int32",
            "AttrFlags": 2
          },
          {
            "Text": ") has a size of 4. If an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " can be stored in address 0, the subsequent "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " can be stored in address 4, and so on. In code:"
          }
        ]
      },
      {
        "id": "7a35800a-9c0f-4956-bf86-04e80cc5843c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530019296,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550222760000,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var ptr = (int*)IntPtr.Zero;\nConsole.WriteLine(new IntPtr(ptr)); // prints 0\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 4\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 8"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var ptr = (int*)IntPtr.Zero;\nConsole.WriteLine(new IntPtr(ptr)); // prints 0\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 4\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 8",
        "code_language": "C#"
      },
      {
        "id": "36e82901-7b1b-4799-85a5-42afc15bdd64",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530019297,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530019297,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, the type "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (alias for "
            ],
            [
              "System.Int64",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") has a size of 8. If a "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be stored in address 0, the subsequent "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "can be stored in address 8, and so on. In code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, the type "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " (alias for "
          },
          {
            "Text": "System.Int64",
            "AttrFlags": 2
          },
          {
            "Text": ") has a size of 8. If a "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " can be stored in address 0, the subsequent "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": "can be stored in address 8, and so on. In code:"
          }
        ]
      },
      {
        "id": "2d660947-3a95-40eb-a1f8-49e1d580bdda",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530019297,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550222760000,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var ptr = (long*)IntPtr.Zero;\nConsole.WriteLine(new IntPtr(ptr)); // prints 0\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 8\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 16"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var ptr = (long*)IntPtr.Zero;\nConsole.WriteLine(new IntPtr(ptr)); // prints 0\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 8\nptr++;\nConsole.WriteLine(new IntPtr(ptr)); // prints 16",
        "code_language": "C#"
      },
      {
        "id": "fdc3a3e0-964c-4a37-816b-cb559f88ab19",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530019297,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530019297,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is special and "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointers are also special and they are used as catch-all pointers when the type isn’t known or doesn’t matter. Due to their size-agnostic nature, "
            ],
            [
              "void",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " pointers cannot be incremented or decremented:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " is special and "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " pointers are also special and they are used as catch-all pointers when the type isn’t known or doesn’t matter. Due to their size-agnostic nature, "
          },
          {
            "Text": "void",
            "AttrFlags": 2
          },
          {
            "Text": " pointers cannot be incremented or decremented:"
          }
        ]
      },
      {
        "id": "0a77b256-1370-40c6-a2bb-c19a8793f6c5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550222756867,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550222700000,
        "parent_id": "8cbeacb3-d5c7-4098-8126-7774d2c29978",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var ptr = (void*)IntPtr.Zero;\nConsole.WriteLine(new IntPtr(ptr));\nptr++; // compile-time error\nConsole.WriteLine(new IntPtr(ptr));\nptr++; // compile-time error\nConsole.WriteLine(new IntPtr(ptr));"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "var ptr = (void*)IntPtr.Zero;\nConsole.WriteLine(new IntPtr(ptr));\nptr++; // compile-time error\nConsole.WriteLine(new IntPtr(ptr));\nptr++; // compile-time error\nConsole.WriteLine(new IntPtr(ptr));",
        "code_language": "C#"
      }
    ],
    "title": "Pointer arithmetic",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}