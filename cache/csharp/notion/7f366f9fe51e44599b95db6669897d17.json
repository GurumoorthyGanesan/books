{
  "ID": "7f366f9f-e51e-4459-9b95-db6669897d17",
  "Root": {
    "id": "7f366f9f-e51e-4459-9b95-db6669897d17",
    "alive": true,
    "content": [
      "535cbe10-063c-478a-829b-fb762ac05e32",
      "7bda3a37-fde1-4a32-a3e6-2ae24e45722a",
      "e8213272-07f9-4025-b9d1-ee8cc6384171",
      "b50f0951-c2e0-4558-9a46-fa7cb1f2c3d1",
      "5cb733bb-6093-4409-bd1e-b33943647b5e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527369497,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549609740000,
    "parent_id": "3ceafdbd-d2b2-4926-829d-3293ff96d517",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Equality kinds in C# and equality operator"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "id": "535cbe10-063c-478a-829b-fb762ac05e32",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527369493,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527369493,
        "parent_id": "7f366f9f-e51e-4459-9b95-db6669897d17",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C#, there are two different kinds of equality: reference equality and value equality. Value equality is the commonly understood meaning of equality: it means that two objects contain the same values. For example, two integers with the value of 2 have value equality. Reference equality means that there are not two objects to compare. Instead, there are two object references, both of which refer to the same object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C#, there are two different kinds of equality: reference equality and value equality. Value equality is the commonly understood meaning of equality: it means that two objects contain the same values. For example, two integers with the value of 2 have value equality. Reference equality means that there are not two objects to compare. Instead, there are two object references, both of which refer to the same object."
          }
        ]
      },
      {
        "id": "7bda3a37-fde1-4a32-a3e6-2ae24e45722a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527369496,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549609620000,
        "parent_id": "7f366f9f-e51e-4459-9b95-db6669897d17",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "object a = new object();\nobject b = a;\nSystem.Object.ReferenceEquals(a, b);  // returns true"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "object a = new object();\nobject b = a;\nSystem.Object.ReferenceEquals(a, b);  // returns true",
        "code_language": "C#"
      },
      {
        "id": "e8213272-07f9-4025-b9d1-ee8cc6384171",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527369496,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527369496,
        "parent_id": "7f366f9f-e51e-4459-9b95-db6669897d17",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For predefined value types, the equality operator (==) returns true if the values of its operands are equal, false otherwise. For reference types other than string, == returns true if its two operands refer to the same object. For the string type, == compares the values of the strings."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For predefined value types, the equality operator (==) returns true if the values of its operands are equal, false otherwise. For reference types other than string, == returns true if its two operands refer to the same object. For the string type, == compares the values of the strings."
          }
        ]
      },
      {
        "id": "b50f0951-c2e0-4558-9a46-fa7cb1f2c3d1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549609620000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549609620000,
        "parent_id": "7f366f9f-e51e-4459-9b95-db6669897d17",
        "parent_table": "block",
        "type": "text",
        "version": 5
      },
      {
        "id": "5cb733bb-6093-4409-bd1e-b33943647b5e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549609632123,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549609620000,
        "parent_id": "7f366f9f-e51e-4459-9b95-db6669897d17",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// Numeric equality: True\nConsole.WriteLine((2 + 2) == 4);\n\n// Reference equality: different objects, \n// same boxed value: False.\nobject s = 1;\nobject t = 1;\nConsole.WriteLine(s == t);\n\n// Define some strings:\nstring a = \"hello\";\nstring b = String.Copy(a);\nstring c = \"hello\";\n\n// Compare string values of a constant and an instance: True\nConsole.WriteLine(a == b);\n\n// Compare string references; \n// a is a constant but b is an instance: False.\nConsole.WriteLine((object)a == (object)b);\n\n// Compare string references, both constants \n// have the same value, so string interning\n// points to same reference: True.\nConsole.WriteLine((object)a == (object)c);"
            ]
          ]
        },
        "type": "code",
        "version": 10,
        "code": "// Numeric equality: True\nConsole.WriteLine((2 + 2) == 4);\n\n// Reference equality: different objects, \n// same boxed value: False.\nobject s = 1;\nobject t = 1;\nConsole.WriteLine(s == t);\n\n// Define some strings:\nstring a = \"hello\";\nstring b = String.Copy(a);\nstring c = \"hello\";\n\n// Compare string values of a constant and an instance: True\nConsole.WriteLine(a == b);\n\n// Compare string references; \n// a is a constant but b is an instance: False.\nConsole.WriteLine((object)a == (object)b);\n\n// Compare string references, both constants \n// have the same value, so string interning\n// points to same reference: True.\nConsole.WriteLine((object)a == (object)c);",
        "code_language": "C#"
      }
    ],
    "title": "Equality kinds in C# and equality operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}