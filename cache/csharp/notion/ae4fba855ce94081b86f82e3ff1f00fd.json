{
  "ID": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
  "Root": {
    "id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
    "alive": true,
    "content": [
      "7ad3b72f-d7df-4a5e-9e52-f83c1c3e28f6",
      "0a3aedb8-9f73-41aa-9748-67f13ff46d09",
      "779043bd-42d6-4ce7-a1dc-84c3c2c67667",
      "3143b020-d90a-4e67-93ca-3929084de077",
      "f1f6984e-eb48-4540-b184-aa088919c615",
      "3c02b10c-8661-4e78-a23c-637be55d928b",
      "efec40c1-7373-4b5e-92b5-883e7e6d3e6d",
      "727082c3-8060-4216-ae10-6c32e0834a34"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525794606,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550113080000,
    "parent_id": "690c8bdb-4161-40ee-ae39-db6ce423d3b9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Deadlocks hold resource and wait"
        ]
      ]
    },
    "type": "page",
    "version": 25,
    "content_resolved": [
      {
        "id": "7ad3b72f-d7df-4a5e-9e52-f83c1c3e28f6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794601,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525794601,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A deadlock is what occurs when two or more threads are waiting for eachother to complete or to release a resource in such a way that they wait forever."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A deadlock is what occurs when two or more threads are waiting for eachother to complete or to release a resource in such a way that they wait forever."
          }
        ]
      },
      {
        "id": "0a3aedb8-9f73-41aa-9748-67f13ff46d09",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794603,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525794603,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If thread1 holds a lock on resource A and is waiting for resource B to be released while thread2 holds resource B and is waiting for resource A to be released, they are deadlocked."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If thread1 holds a lock on resource A and is waiting for resource B to be released while thread2 holds resource B and is waiting for resource A to be released, they are deadlocked."
          }
        ]
      },
      {
        "id": "779043bd-42d6-4ce7-a1dc-84c3c2c67667",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794604,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525794604,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Clicking button1 for the following example code will cause your application to get into aforementioned deadlocked state and hang"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Clicking button1 for the following example code will cause your application to get into aforementioned deadlocked state and hang"
          }
        ]
      },
      {
        "id": "3143b020-d90a-4e67-93ca-3929084de077",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794604,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113080000,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void button_Click(object sender, EventArgs e)\n{\n    DeadlockWorkers workers = new DeadlockWorkers();\n    workers.StartThreads();\n    textBox.Text = workers.GetResult();\n}\n\nprivate class DeadlockWorkers\n{\n    Thread thread1, thread2;\n\n    object resourceA = new object();\n    object resourceB = new object();\n\n    string output;\n\n    public void StartThreads()\n    {\n        thread1 = new Thread(Thread1DoWork);\n        thread2 = new Thread(Thread2DoWork);\n        thread1.Start();\n        thread2.Start();\n    }\n\n    public string GetResult()\n    {\n        thread1.Join();\n        thread2.Join();\n        return output;\n    }\n\n    public void Thread1DoWork()\n    {\n        Thread.Sleep(100);\n        lock (resourceA)\n        {\n            Thread.Sleep(100);\n            lock (resourceB)\n            {\n                output += \"T1#\";\n            }\n        }\n    }\n\n    public void Thread2DoWork()\n    {\n        Thread.Sleep(100);\n        lock (resourceB)\n        {\n            Thread.Sleep(100);\n            lock (resourceA)\n            {\n                output += \"T2#\";\n            }\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 14,
        "code": "private void button_Click(object sender, EventArgs e)\n{\n    DeadlockWorkers workers = new DeadlockWorkers();\n    workers.StartThreads();\n    textBox.Text = workers.GetResult();\n}\n\nprivate class DeadlockWorkers\n{\n    Thread thread1, thread2;\n\n    object resourceA = new object();\n    object resourceB = new object();\n\n    string output;\n\n    public void StartThreads()\n    {\n        thread1 = new Thread(Thread1DoWork);\n        thread2 = new Thread(Thread2DoWork);\n        thread1.Start();\n        thread2.Start();\n    }\n\n    public string GetResult()\n    {\n        thread1.Join();\n        thread2.Join();\n        return output;\n    }\n\n    public void Thread1DoWork()\n    {\n        Thread.Sleep(100);\n        lock (resourceA)\n        {\n            Thread.Sleep(100);\n            lock (resourceB)\n            {\n                output += \"T1#\";\n            }\n        }\n    }\n\n    public void Thread2DoWork()\n    {\n        Thread.Sleep(100);\n        lock (resourceB)\n        {\n            Thread.Sleep(100);\n            lock (resourceA)\n            {\n                output += \"T2#\";\n            }\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "f1f6984e-eb48-4540-b184-aa088919c615",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794605,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525794605,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To avoid being deadlocked this way, one can use Monitor.TryEnter(lock_object, timeout_in_milliseconds) to check if a lock is held on an object already. If Monitor.TryEnter does not succeed in acquiring a lock on lock_object before timeout_in_milliseconds, it returns false, giving the thread a chance to release other held resources and yielding, thus giving other threads a chance to complete as in this slightly modified version of the above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To avoid being deadlocked this way, one can use Monitor.TryEnter(lock_object, timeout_in_milliseconds) to check if a lock is held on an object already. If Monitor.TryEnter does not succeed in acquiring a lock on lock_object before timeout_in_milliseconds, it returns false, giving the thread a chance to release other held resources and yielding, thus giving other threads a chance to complete as in this slightly modified version of the above:"
          }
        ]
      },
      {
        "id": "3c02b10c-8661-4e78-a23c-637be55d928b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794605,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113080000,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void button_Click(object sender, EventArgs e)\n{\n  MonitorWorkers workers = new MonitorWorkers();\n  workers.StartThreads();\n  textBox.Text = workers.GetResult();\n}\n\nprivate class MonitorWorkers\n{\n  Thread thread1, thread2;\n\n  object resourceA = new object();\n  object resourceB = new object();\n\n  string output;\n\n  public void StartThreads()\n  {\n      thread1 = new Thread(Thread1DoWork);\n      thread2 = new Thread(Thread2DoWork);\n      thread1.Start();\n      thread2.Start();\n  }\n\n  public string GetResult()\n  {\n      thread1.Join();\n      thread2.Join();\n      return output;\n  }\n\n  public void Thread1DoWork()\n  {\n      bool mustDoWork = true;\n      Thread.Sleep(100);\n      while (mustDoWork)\n      {\n          lock (resourceA)\n          {\n              Thread.Sleep(100);\n              if (Monitor.TryEnter(resourceB, 0))\n              {\n                  output += \"T1#\";\n                  mustDoWork = false;\n                  Monitor.Exit(resourceB);\n              }\n          }\n          if (mustDoWork) Thread.Yield();\n      }\n  }\n\n  public void Thread2DoWork()\n  {\n      Thread.Sleep(100);\n      lock (resourceB)\n      {\n          Thread.Sleep(100);\n          lock (resourceA)\n          {\n              output += \"T2#\";\n          }\n      }\n  }\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "private void button_Click(object sender, EventArgs e)\n{\n  MonitorWorkers workers = new MonitorWorkers();\n  workers.StartThreads();\n  textBox.Text = workers.GetResult();\n}\n\nprivate class MonitorWorkers\n{\n  Thread thread1, thread2;\n\n  object resourceA = new object();\n  object resourceB = new object();\n\n  string output;\n\n  public void StartThreads()\n  {\n      thread1 = new Thread(Thread1DoWork);\n      thread2 = new Thread(Thread2DoWork);\n      thread1.Start();\n      thread2.Start();\n  }\n\n  public string GetResult()\n  {\n      thread1.Join();\n      thread2.Join();\n      return output;\n  }\n\n  public void Thread1DoWork()\n  {\n      bool mustDoWork = true;\n      Thread.Sleep(100);\n      while (mustDoWork)\n      {\n          lock (resourceA)\n          {\n              Thread.Sleep(100);\n              if (Monitor.TryEnter(resourceB, 0))\n              {\n                  output += \"T1#\";\n                  mustDoWork = false;\n                  Monitor.Exit(resourceB);\n              }\n          }\n          if (mustDoWork) Thread.Yield();\n      }\n  }\n\n  public void Thread2DoWork()\n  {\n      Thread.Sleep(100);\n      lock (resourceB)\n      {\n          Thread.Sleep(100);\n          lock (resourceA)\n          {\n              output += \"T2#\";\n          }\n      }\n  }\n}\n",
        "code_language": "C#"
      },
      {
        "id": "efec40c1-7373-4b5e-92b5-883e7e6d3e6d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525794606,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525794606,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this workaround relies on thread2 being stubborn about its locks and thread1 being willing to yield, such that thread2 always take precedence. Also note that thread1 has to redo the work it did after locking resource A, when it yields. Therefore be careful when implementing this approach with more than one yielding thread, as you’ll then run the risk of entering a so-called livelock - a state which would occur if two threads kept doing the first bit of their work and then yield mutually, starting over repeatedly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this workaround relies on thread2 being stubborn about its locks and thread1 being willing to yield, such that thread2 always take precedence. Also note that thread1 has to redo the work it did after locking resource A, when it yields. Therefore be careful when implementing this approach with more than one yielding thread, as you’ll then run the risk of entering a so-called livelock - a state which would occur if two threads kept doing the first bit of their work and then yield mutually, starting over repeatedly."
          }
        ]
      },
      {
        "id": "727082c3-8060-4216-ae10-6c32e0834a34",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550113080000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113080000,
        "parent_id": "ae4fba85-5ce9-4081-b86f-82e3ff1f00fd",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Deadlocks hold resource and wait",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}