{
  "ID": "01102c33-334e-4ffc-9fca-dc29275a7687",
  "Root": {
    "alive": true,
    "content": [
      "1d461043-d7d2-4b53-909b-53c7a8bbed33",
      "97386e14-a55a-4285-b2fe-60d6fe3631c9",
      "0c94c97b-4663-463d-872d-67e8315fac67",
      "08f935af-b608-4c74-89b9-9d2f5e04ea91",
      "65a4bb66-23ba-4911-a2e2-4538511852d2",
      "96ae7982-ea1b-4817-907b-adfbd6a545c5",
      "eca38cf0-e7e2-45ae-b4ba-08d4fcb9db40",
      "6bb72dc4-a426-490a-9068-45bfb75c5169",
      "70b0b596-97d8-46c8-a4a5-972b14991d8a",
      "1026d797-722b-4e9b-a95f-3608d1651326",
      "b7902e8d-1081-494e-8549-a1d5c174447e",
      "298a7f2b-e72a-4351-9ac2-96d7faf641e2",
      "d060c12b-bc46-40c5-92d0-c260bf1bcc3e",
      "b93e4380-454d-4b02-8ce6-f2b95f2eec24",
      "41993980-ca03-40b6-bb89-7a9ec11eeb58"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525028574,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "01102c33-334e-4ffc-9fca-dc29275a7687",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549614000000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "base"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028571,
        "id": "1d461043-d7d2-4b53-909b-53c7a8bbed33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028571,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "base",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword is used to access members from a base class. It is commonly used to call base implementations of virtual methods, or to specify which base constructor should be called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "base",
            "AttrFlags": 3
          },
          {
            "Text": " keyword is used to access members from a base class. It is commonly used to call base implementations of virtual methods, or to specify which base constructor should be called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028573,
        "id": "97386e14-a55a-4285-b2fe-60d6fe3631c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028573,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Choosing a constructor",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Choosing a constructor",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028573,
        "id": "0c94c97b-4663-463d-872d-67e8315fac67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028573,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Child : SomeBaseClass {\n    public Child() : base(\"some string for the base class\")\n    {\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Child : SomeBaseClass {\n    public Child() : base(\"some string for the base class\")\n    {\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028573,
        "id": "08f935af-b608-4c74-89b9-9d2f5e04ea91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028573,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class SomeBaseClass {\n    public SomeBaseClass()\n    {\n        // new Child() will not call this constructor, as it does not have a parameter\n    }\n    public SomeBaseClass(string message)\n    {\n        // new Child() will use this base constructor because of the specified parameter in Child's constructor\n        Console.WriteLine(message);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class SomeBaseClass {\n    public SomeBaseClass()\n    {\n        // new Child() will not call this constructor, as it does not have a parameter\n    }\n    public SomeBaseClass(string message)\n    {\n        // new Child() will use this base constructor because of the specified parameter in Child's constructor\n        Console.WriteLine(message);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028573,
        "id": "65a4bb66-23ba-4911-a2e2-4538511852d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028573,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling base implementation of virtual method",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling base implementation of virtual method",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "96ae7982-ea1b-4817-907b-adfbd6a545c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public override void SomeVirtualMethod() {\n    // Do something, then call base implementation\n    base.SomeVirtualMethod();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public override void SomeVirtualMethod() {\n    // Do something, then call base implementation\n    base.SomeVirtualMethod();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "eca38cf0-e7e2-45ae-b4ba-08d4fcb9db40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is possible to use the base keyword to call a base implementation from any method. This ties the method call directly to the base implementation, which means that even if new child classes override a virtual method, the base implementation will still be called so this needs to be used with caution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is possible to use the base keyword to call a base implementation from any method. This ties the method call directly to the base implementation, which means that even if new child classes override a virtual method, the base implementation will still be called so this needs to be used with caution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "6bb72dc4-a426-490a-9068-45bfb75c5169",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Parent\n{\n    public virtual int VirtualMethod()\n    {\n        return 1;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Parent\n{\n    public virtual int VirtualMethod()\n    {\n        return 1;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "70b0b596-97d8-46c8-a4a5-972b14991d8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Child : Parent\n{\n    public override int VirtualMethod() {\n        return 11;\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Child : Parent\n{\n    public override int VirtualMethod() {\n        return 11;\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "1026d797-722b-4e9b-a95f-3608d1651326",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public int NormalMethod()\n    {\n        return base.VirtualMethod();\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public int NormalMethod()\n    {\n        return base.VirtualMethod();\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "b7902e8d-1081-494e-8549-a1d5c174447e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void CallMethods()\n    {\n        Assert.AreEqual(11, VirtualMethod());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void CallMethods()\n    {\n        Assert.AreEqual(11, VirtualMethod());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "298a7f2b-e72a-4351-9ac2-96d7faf641e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Assert.AreEqual(1, NormalMethod());\n        Assert.AreEqual(1, base.VirtualMethod());\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Assert.AreEqual(1, NormalMethod());\n        Assert.AreEqual(1, base.VirtualMethod());\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "d060c12b-bc46-40c5-92d0-c260bf1bcc3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class GrandChild : Child\n{\n    public override int VirtualMethod()\n    {\n        return 21;\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class GrandChild : Child\n{\n    public override int VirtualMethod()\n    {\n        return 21;\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "b93e4380-454d-4b02-8ce6-f2b95f2eec24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void CallAgain()\n    {\n        Assert.AreEqual(21, VirtualMethod());\n        Assert.AreEqual(11, base.VirtualMethod());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void CallAgain()\n    {\n        Assert.AreEqual(21, VirtualMethod());\n        Assert.AreEqual(11, base.VirtualMethod());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525028574,
        "id": "41993980-ca03-40b6-bb89-7a9ec11eeb58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525028574,
        "parent_id": "01102c33-334e-4ffc-9fca-dc29275a7687",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Notice that the call to NormalMethod below still returns the value\n        // from the extreme base class even though the method has been overridden\n        // in the child class.\n        Assert.AreEqual(1, NormalMethod());\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Notice that the call to NormalMethod below still returns the value\n        // from the extreme base class even though the method has been overridden\n        // in the child class.\n        Assert.AreEqual(1, NormalMethod());\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "base",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}