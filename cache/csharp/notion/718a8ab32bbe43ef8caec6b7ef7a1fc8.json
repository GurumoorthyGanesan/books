{
  "ID": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
  "Root": {
    "alive": true,
    "content": [
      "cc912ca7-22aa-4aa2-9163-931e935e74df",
      "11cf4b6b-b68e-444d-908d-af5328c546d2",
      "e7b03778-9848-4973-8d88-1362cf7971de",
      "00cf3ed2-31f0-410d-ba92-1627f567c02d",
      "ba3cdce5-3697-4669-97b1-ae25cb43329c",
      "617b553a-ec42-4c62-ac0c-4d84a06992c6",
      "166cc0fd-6ff8-477c-8b49-97115805cfca"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530153429,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549791120000,
    "parent_id": "d0852dd6-2ee4-4d9e-af08-4f050ff9f517",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Prototype Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153425,
        "id": "cc912ca7-22aa-4aa2-9163-931e935e74df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153425,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153428,
        "id": "11cf4b6b-b68e-444d-908d-af5328c546d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153428,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example demonstrates the Prototype pattern in which new Color objects are created by copying pre-existing, user-defined Colors of the same type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example demonstrates the Prototype pattern in which new Color objects are created by copying pre-existing, user-defined Colors of the same type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153428,
        "id": "e7b03778-9848-4973-8d88-1362cf7971de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153428,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Collections.Generic;\n \nnamespace GangOfFour.Prototype\n{\n  /// \u003csummary\u003e\n  /// MainApp startup class for Real-World \n  /// Prototype Design Pattern.\n  /// \u003c/summary\u003e\n  class MainApp\n  {\n    /// \u003csummary\u003e\n    /// Entry point into console application.\n    /// \u003c/summary\u003e\n    static void Main()\n    {\n      ColorManager colormanager = new ColorManager();\n \n      // Initialize with standard colors\n      colormanager[\"red\"] = new Color(255, 0, 0);\n      colormanager[\"green\"] = new Color(0, 255, 0);\n      colormanager[\"blue\"] = new Color(0, 0, 255);\n \n      // User adds personalized colors\n      colormanager[\"angry\"] = new Color(255, 54, 0);\n      colormanager[\"peace\"] = new Color(128, 211, 128);\n      colormanager[\"flame\"] = new Color(211, 34, 20);\n \n      // User clones selected colors\n      Color color1 = colormanager[\"red\"].Clone() as Color;\n      Color color2 = colormanager[\"peace\"].Clone() as Color;\n      Color color3 = colormanager[\"flame\"].Clone() as Color;\n \n      // Wait for user\n      Console.ReadKey();\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'Prototype' abstract class\n  /// \u003c/summary\u003e\n  abstract class ColorPrototype\n  {\n    public abstract ColorPrototype Clone();\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ConcretePrototype' class\n  /// \u003c/summary\u003e\n  class Color : ColorPrototype\n  {\n    private int _red;\n    private int _green;\n    private int _blue;\n \n    // Constructor\n    public Color(int red, int green, int blue)\n    {\n      this._red = red;\n      this._green = green;\n      this._blue = blue;\n    }\n \n    // Create a shallow copy\n    public override ColorPrototype Clone()\n    {\n      Console.WriteLine(\n        \"Cloning color RGB: {0,3},{1,3},{2,3}\",\n        _red, _green, _blue);\n \n      return this.MemberwiseClone() as ColorPrototype;\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// Prototype manager\n  /// \u003c/summary\u003e\n  class ColorManager\n  {\n    private Dictionary\u003cstring, ColorPrototype\u003e _colors =\n      new Dictionary\u003cstring, ColorPrototype\u003e();\n \n    // Indexer\n    public ColorPrototype this[string key]\n    {\n      get { return _colors[key]; }\n      set { _colors.Add(key, value); }\n    }\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "using System;\nusing System.Collections.Generic;\n \nnamespace GangOfFour.Prototype\n{\n  /// \u003csummary\u003e\n  /// MainApp startup class for Real-World \n  /// Prototype Design Pattern.\n  /// \u003c/summary\u003e\n  class MainApp\n  {\n    /// \u003csummary\u003e\n    /// Entry point into console application.\n    /// \u003c/summary\u003e\n    static void Main()\n    {\n      ColorManager colormanager = new ColorManager();\n \n      // Initialize with standard colors\n      colormanager[\"red\"] = new Color(255, 0, 0);\n      colormanager[\"green\"] = new Color(0, 255, 0);\n      colormanager[\"blue\"] = new Color(0, 0, 255);\n \n      // User adds personalized colors\n      colormanager[\"angry\"] = new Color(255, 54, 0);\n      colormanager[\"peace\"] = new Color(128, 211, 128);\n      colormanager[\"flame\"] = new Color(211, 34, 20);\n \n      // User clones selected colors\n      Color color1 = colormanager[\"red\"].Clone() as Color;\n      Color color2 = colormanager[\"peace\"].Clone() as Color;\n      Color color3 = colormanager[\"flame\"].Clone() as Color;\n \n      // Wait for user\n      Console.ReadKey();\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// The 'Prototype' abstract class\n  /// \u003c/summary\u003e\n  abstract class ColorPrototype\n  {\n    public abstract ColorPrototype Clone();\n  }\n \n  /// \u003csummary\u003e\n  /// The 'ConcretePrototype' class\n  /// \u003c/summary\u003e\n  class Color : ColorPrototype\n  {\n    private int _red;\n    private int _green;\n    private int _blue;\n \n    // Constructor\n    public Color(int red, int green, int blue)\n    {\n      this._red = red;\n      this._green = green;\n      this._blue = blue;\n    }\n \n    // Create a shallow copy\n    public override ColorPrototype Clone()\n    {\n      Console.WriteLine(\n        \"Cloning color RGB: {0,3},{1,3},{2,3}\",\n        _red, _green, _blue);\n \n      return this.MemberwiseClone() as ColorPrototype;\n    }\n  }\n \n  /// \u003csummary\u003e\n  /// Prototype manager\n  /// \u003c/summary\u003e\n  class ColorManager\n  {\n    private Dictionary\u003cstring, ColorPrototype\u003e _colors =\n      new Dictionary\u003cstring, ColorPrototype\u003e();\n \n    // Indexer\n    public ColorPrototype this[string key]\n    {\n      get { return _colors[key]; }\n      set { _colors.Add(key, value); }\n    }\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153428,
        "id": "00cf3ed2-31f0-410d-ba92-1627f567c02d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153428,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153428,
        "id": "ba3cdce5-3697-4669-97b1-ae25cb43329c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153428,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Cloning color RGB: 255, 0, 0"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Cloning color RGB: 255, 0, 0"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153429,
        "id": "617b553a-ec42-4c62-ac0c-4d84a06992c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153429,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Cloning color RGB: 128,211,128"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Cloning color RGB: 128,211,128"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530153429,
        "id": "166cc0fd-6ff8-477c-8b49-97115805cfca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530153429,
        "parent_id": "718a8ab3-2bbe-43ef-8cae-c6b7ef7a1fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Cloning color RGB: 211, 34, 20"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Cloning color RGB: 211, 34, 20"
          }
        ]
      }
    ],
    "title": "Prototype Pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}