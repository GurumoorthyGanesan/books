{
  "ID": "8a039b58-b45e-4620-acfc-d570a14ac8d7",
  "Root": {
    "id": "8a039b58-b45e-4620-acfc-d570a14ac8d7",
    "alive": true,
    "content": [
      "8e43f85c-0a63-4a33-b7c2-261856900f28"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549526214275,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550128320000,
    "parent_id": "fa946197-d3a2-4cf6-8c65-bc2d23788972",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Parsing Expression Trees"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "8e43f85c-0a63-4a33-b7c2-261856900f28",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550128374129,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550128320000,
        "parent_id": "8a039b58-b45e-4620-acfc-d570a14ac8d7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "using System.Linq.Expressions;\n\n// Create an expression tree.\nExpression\u003cFunc\u003cint, bool\u003e\u003e exprTree = num =\u003e num \u003c 5;\n\n// Decompose the expression tree.\nParameterExpression param = (ParameterExpression)exprTree.Parameters[0];\nBinaryExpression operation = (BinaryExpression)exprTree.Body;\nParameterExpression left = (ParameterExpression)operation.Left;\nConstantExpression right = (ConstantExpression)operation.Right;\n\nConsole.WriteLine(\"Decomposed expression: {0} =\u003e {1} {2} {3}\",\n                  param.Name, left.Name, operation.NodeType, right.Value);\n\n// Decomposed expression: num =\u003e num LessThan 5"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "using System.Linq.Expressions;\n\n// Create an expression tree.\nExpression\u003cFunc\u003cint, bool\u003e\u003e exprTree = num =\u003e num \u003c 5;\n\n// Decompose the expression tree.\nParameterExpression param = (ParameterExpression)exprTree.Parameters[0];\nBinaryExpression operation = (BinaryExpression)exprTree.Body;\nParameterExpression left = (ParameterExpression)operation.Left;\nConstantExpression right = (ConstantExpression)operation.Right;\n\nConsole.WriteLine(\"Decomposed expression: {0} =\u003e {1} {2} {3}\",\n                  param.Name, left.Name, operation.NodeType, right.Value);\n\n// Decomposed expression: num =\u003e num LessThan 5",
        "code_language": "C#"
      }
    ],
    "title": "Parsing Expression Trees",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}