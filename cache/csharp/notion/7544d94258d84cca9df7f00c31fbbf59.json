{
  "ID": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
  "Root": {
    "alive": true,
    "content": [
      "679d57e7-0302-4763-8618-2d35c35c649d",
      "8ff11c1f-45d3-4348-a549-8973f19a6692",
      "7b0644f3-b609-4b1c-994b-35d652b4c68b",
      "ac85d6a7-76c6-4fb0-aeb0-0685833c80c0",
      "7397600d-8269-4be5-bc18-c5644a296340",
      "bc834015-529f-432a-a449-c48bceccca8b",
      "069ebe14-a315-4044-beea-1c5c29ffb2fe",
      "ad46106e-8893-46f3-8bbe-929fc22937d2",
      "bc73daaa-5924-47f7-8ce1-30d9aa4a5884",
      "d4acb9bc-4ae7-43ed-a100-b794584c5173",
      "8aea2abd-6602-4fc9-8252-00bcab6f7bd7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549526070648,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550125140000,
    "parent_id": "a34c1078-f01c-44b1-b468-522f804fbc2d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "LINQ Queries"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070646,
        "id": "679d57e7-0302-4763-8618-2d35c35c649d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070646,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070646,
        "id": "8ff11c1f-45d3-4348-a549-8973f19a6692",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070646,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LINQ is an acronym which stands for "
            ],
            [
              "L",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "anguage "
            ],
            [
              "IN",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "tegrated "
            ],
            [
              "Q",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "uery. It is a concept which integrates a query language by offering a consistent model for working with data across various kinds of data sources and formats; you use the same basic coding patterns to query and transform data in XML documents, SQL databases, ADO.NET Datasets, .NET collections, and any other format for which a LINQ provider is available."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "LINQ is an acronym which stands for "
          },
          {
            "Text": "L",
            "AttrFlags": 1
          },
          {
            "Text": "anguage "
          },
          {
            "Text": "IN",
            "AttrFlags": 1
          },
          {
            "Text": "tegrated "
          },
          {
            "Text": "Q",
            "AttrFlags": 1
          },
          {
            "Text": "uery. It is a concept which integrates a query language by offering a consistent model for working with data across various kinds of data sources and formats; you use the same basic coding patterns to query and transform data in XML documents, SQL databases, ADO.NET Datasets, .NET collections, and any other format for which a LINQ provider is available."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070646,
        "id": "7b0644f3-b609-4b1c-994b-35d652b4c68b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070646,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070647,
        "id": "ac85d6a7-76c6-4fb0-aeb0-0685833c80c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070647,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Query syntax :"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Query syntax :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070647,
        "id": "7397600d-8269-4be5-bc18-c5644a296340",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550125140000,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "- from \u003crange variable\u003e in \u003ccollection\u003e\n- [from \u003crange variable\u003e in \u003ccollection\u003e, ...]\n- \u003cfilter, joining, grouping, aggregate operators, ...\u003e \u003clambda expression\u003e\n- \u003cselect or groupBy operator\u003e \u003cformulate the result\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 20,
        "code": "- from \u003crange variable\u003e in \u003ccollection\u003e\n- [from \u003crange variable\u003e in \u003ccollection\u003e, ...]\n- \u003cfilter, joining, grouping, aggregate operators, ...\u003e \u003clambda expression\u003e\n- \u003cselect or groupBy operator\u003e \u003cformulate the result\u003e",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070647,
        "id": "bc834015-529f-432a-a449-c48bceccca8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070647,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method syntax :"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method syntax :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070647,
        "id": "069ebe14-a315-4044-beea-1c5c29ffb2fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550125080000,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "- Enumerable.Aggregate(func)\n- Enumerable.Aggregate(seed, func)\n- Enumerable.Aggregate(seed, func, resultSelector)\n- Enumerable.All(predicate)\n- Enumerable.Any()\n- Enumerable.Any(predicate)\n- Enumerable.AsEnumerable()\n- Enumerable.Average()\n- Enumerable.Average(selector)\n- Enumerable.Cast\\\u003cResult\\\u003e()\n- Enumerable.Concat(second)\n- Enumerable.Contains(value)\n- Enumerable.Contains(value, comparer)\n- Enumerable.Count()\n- Enumerable.Count(predicate)\n- Enumerable.DefaultIfEmpty()\n- Enumerable.DefaultIfEmpty(defaultValue)\n- Enumerable.Distinct()\n- Enumerable.Distinct(comparer)\n- Enumerable.ElementAt(index)\n- Enumerable.ElementAtOrDefault(index)\n- Enumerable.Empty()\n- Enumerable.Except(second)\n- Enumerable.Except(second, comparer)\n- Enumerable.First()\n- Enumerable.First(predicate)\n- Enumerable.FirstOrDefault()\n- Enumerable.FirstOrDefault(predicate)\n- Enumerable.GroupBy(keySelector)\n- Enumerable.GroupBy(keySelector, resultSelector)\n- Enumerable.GroupBy(keySelector, elementSelector)\n- Enumerable.GroupBy(keySelector, comparer)\n- Enumerable.GroupBy(keySelector, resultSelector, comparer)\n- Enumerable.GroupBy(keySelector, elementSelector, resultSelector)\n- Enumerable.GroupBy(keySelector, elementSelector, comparer)\n- Enumerable.GroupBy(keySelector, elementSelector, resultSelector, comparer)\n- Enumerable.Intersect(second)\n- Enumerable.Intersect(second, comparer)\n- Enumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector)\n- Enumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector, comparer)\n- Enumerable.Last()\n- Enumerable.Last(predicate)\n- Enumerable.LastOrDefault()\n- Enumerable.LastOrDefault(predicate)\n- Enumerable.LongCount()\n- Enumerable.LongCount(predicate)\n- Enumerable.Max()\n- Enumerable.Max(selector)\n- Enumerable.Min()\n- Enumerable.Min(selector)\n- Enumerable.OfType\\\u003cTResult\\\u003e()\n- Enumerable.OrderBy(keySelector)\n- Enumerable.OrderBy(keySelector, comparer)\n- Enumerable.OrderByDescending(keySelector)\n- Enumerable.OrderByDescending(keySelector, comparer)\n- Enumerable.Range(start, count)\n- Enumerable.Repeat(element, count)\n- Enumerable.Reverse()\n- Enumerable.Select(selector)\n- Enumerable.SelectMany(selector)\n- Enumerable.SelectMany(collectionSelector, resultSelector)\n- Enumerable.SequenceEqual(second)\n- Enumerable.SequenceEqual(second, comparer)\n- Enumerable.Single()\n- Enumerable.Single(predicate)\n- Enumerable.SingleOrDefault()\n- Enumerable.SingleOrDefault(predicate)\n- Enumerable.Skip(count)\n- Enumerable.SkipWhile(predicate)\n- Enumerable.Sum()\n- Enumerable.Sum(selector)\n- Enumerable.Take(count)\n- Enumerable.TakeWhile(predicate)\n- orderedEnumerable.ThenBy(keySelector)\n- orderedEnumerable.ThenBy(keySelector, comparer)\n- orderedEnumerable.ThenByDescending(keySelector)\n- orderedEnumerable.ThenByDescending(keySelector, comparer)\n- Enumerable.ToArray()\n- Enumerable.ToDictionary(keySelector)\n- Enumerable.ToDictionary(keySelector, elementSelector)\n- Enumerable.ToDictionary(keySelector, comparer)\n- Enumerable.ToDictionary(keySelector, elementSelector, comparer)\n- Enumerable.ToList()\n- Enumerable.ToLookup(keySelector)\n- Enumerable.ToLookup(keySelector, elementSelector)\n- Enumerable.ToLookup(keySelector, comparer)\n- Enumerable.ToLookup(keySelector, elementSelector, comparer)\n- Enumerable.Union(second)\n- Enumerable.Union(second, comparer)\n- Enumerable.Where(predicate)\n- Enumerable.Zip(second, resultSelector)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "- Enumerable.Aggregate(func)\n- Enumerable.Aggregate(seed, func)\n- Enumerable.Aggregate(seed, func, resultSelector)\n- Enumerable.All(predicate)\n- Enumerable.Any()\n- Enumerable.Any(predicate)\n- Enumerable.AsEnumerable()\n- Enumerable.Average()\n- Enumerable.Average(selector)\n- Enumerable.Cast\\\u003cResult\\\u003e()\n- Enumerable.Concat(second)\n- Enumerable.Contains(value)\n- Enumerable.Contains(value, comparer)\n- Enumerable.Count()\n- Enumerable.Count(predicate)\n- Enumerable.DefaultIfEmpty()\n- Enumerable.DefaultIfEmpty(defaultValue)\n- Enumerable.Distinct()\n- Enumerable.Distinct(comparer)\n- Enumerable.ElementAt(index)\n- Enumerable.ElementAtOrDefault(index)\n- Enumerable.Empty()\n- Enumerable.Except(second)\n- Enumerable.Except(second, comparer)\n- Enumerable.First()\n- Enumerable.First(predicate)\n- Enumerable.FirstOrDefault()\n- Enumerable.FirstOrDefault(predicate)\n- Enumerable.GroupBy(keySelector)\n- Enumerable.GroupBy(keySelector, resultSelector)\n- Enumerable.GroupBy(keySelector, elementSelector)\n- Enumerable.GroupBy(keySelector, comparer)\n- Enumerable.GroupBy(keySelector, resultSelector, comparer)\n- Enumerable.GroupBy(keySelector, elementSelector, resultSelector)\n- Enumerable.GroupBy(keySelector, elementSelector, comparer)\n- Enumerable.GroupBy(keySelector, elementSelector, resultSelector, comparer)\n- Enumerable.Intersect(second)\n- Enumerable.Intersect(second, comparer)\n- Enumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector)\n- Enumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector, comparer)\n- Enumerable.Last()\n- Enumerable.Last(predicate)\n- Enumerable.LastOrDefault()\n- Enumerable.LastOrDefault(predicate)\n- Enumerable.LongCount()\n- Enumerable.LongCount(predicate)\n- Enumerable.Max()\n- Enumerable.Max(selector)\n- Enumerable.Min()\n- Enumerable.Min(selector)\n- Enumerable.OfType\\\u003cTResult\\\u003e()\n- Enumerable.OrderBy(keySelector)\n- Enumerable.OrderBy(keySelector, comparer)\n- Enumerable.OrderByDescending(keySelector)\n- Enumerable.OrderByDescending(keySelector, comparer)\n- Enumerable.Range(start, count)\n- Enumerable.Repeat(element, count)\n- Enumerable.Reverse()\n- Enumerable.Select(selector)\n- Enumerable.SelectMany(selector)\n- Enumerable.SelectMany(collectionSelector, resultSelector)\n- Enumerable.SequenceEqual(second)\n- Enumerable.SequenceEqual(second, comparer)\n- Enumerable.Single()\n- Enumerable.Single(predicate)\n- Enumerable.SingleOrDefault()\n- Enumerable.SingleOrDefault(predicate)\n- Enumerable.Skip(count)\n- Enumerable.SkipWhile(predicate)\n- Enumerable.Sum()\n- Enumerable.Sum(selector)\n- Enumerable.Take(count)\n- Enumerable.TakeWhile(predicate)\n- orderedEnumerable.ThenBy(keySelector)\n- orderedEnumerable.ThenBy(keySelector, comparer)\n- orderedEnumerable.ThenByDescending(keySelector)\n- orderedEnumerable.ThenByDescending(keySelector, comparer)\n- Enumerable.ToArray()\n- Enumerable.ToDictionary(keySelector)\n- Enumerable.ToDictionary(keySelector, elementSelector)\n- Enumerable.ToDictionary(keySelector, comparer)\n- Enumerable.ToDictionary(keySelector, elementSelector, comparer)\n- Enumerable.ToList()\n- Enumerable.ToLookup(keySelector)\n- Enumerable.ToLookup(keySelector, elementSelector)\n- Enumerable.ToLookup(keySelector, comparer)\n- Enumerable.ToLookup(keySelector, elementSelector, comparer)\n- Enumerable.Union(second)\n- Enumerable.Union(second, comparer)\n- Enumerable.Where(predicate)\n- Enumerable.Zip(second, resultSelector)",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070647,
        "id": "ad46106e-8893-46f3-8bbe-929fc22937d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070647,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070648,
        "id": "bc73daaa-5924-47f7-8ce1-30d9aa4a5884",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070648,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use LINQ queries you need to import "
            ],
            [
              "System.Linq",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use LINQ queries you need to import "
          },
          {
            "Text": "System.Linq",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070648,
        "id": "d4acb9bc-4ae7-43ed-a100-b794584c5173",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070648,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Method Syntax is more powerful and flexible, but the Query Syntax may be simpler and more familiar. All queries written in Query syntax are translated into the functional syntax by the compiler, so performance is the same."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Method Syntax is more powerful and flexible, but the Query Syntax may be simpler and more familiar. All queries written in Query syntax are translated into the functional syntax by the compiler, so performance is the same."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526070648,
        "id": "8aea2abd-6602-4fc9-8252-00bcab6f7bd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526070648,
        "parent_id": "7544d942-58d8-4cca-9df7-f00c31fbbf59",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Query objects are not evaluated until they are used, so they can be changed or added to without a performance penalty."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Query objects are not evaluated until they are used, so they can be changed or added to without a performance penalty."
          }
        ]
      }
    ],
    "title": "LINQ Queries",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}