{
  "ID": "7194498a-6c2d-4983-8b92-353d1b890384",
  "Root": {
    "id": "7194498a-6c2d-4983-8b92-353d1b890384",
    "alive": true,
    "content": [
      "7ae39eef-a01d-41a0-9999-cf5387fb6f74",
      "ac8414c5-09ec-42aa-a33e-cd16595c7f1e",
      "81f8b8ff-67ce-4433-8185-e11464f72a7f",
      "8045abdd-d1f5-49d2-9281-bdeaa1adc804",
      "27f29a6e-ecda-4488-999e-1313f89145af",
      "276e55a3-3ebc-47a5-a594-898c585097b7",
      "315026c9-1306-49f0-8480-b67fdc16dcdb",
      "6e5f5ffc-5d93-4a64-a60e-41824db99b2d",
      "13453a19-9014-46c0-9fd8-a7a3b451fe60",
      "2664cbdc-eb41-4591-897d-6a9647575418",
      "edcc55cb-b1ed-4fa0-81e3-16852b252a33",
      "ceecea95-988a-4fbe-8c3d-a31d7389704e",
      "fea6a6f5-71fc-4476-8346-35767ec19cc3",
      "64cb6d60-6025-41c0-a00a-765b144ce71e",
      "d7395189-727a-4ffd-a5ee-f117ec4d293a",
      "a76ad968-00f2-4116-be1e-c75be35d3a1b",
      "6a6d5021-43bb-41b6-bfb9-181a3b0a441d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530149464,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550223360000,
    "parent_id": "d0852dd6-2ee4-4d9e-af08-4f050ff9f517",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Singleton Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "id": "7ae39eef-a01d-41a0-9999-cf5387fb6f74",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149457,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149457,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Singleton pattern is designed to restrict creation of a class to exactly one single instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Singleton pattern is designed to restrict creation of a class to exactly one single instance."
          }
        ]
      },
      {
        "id": "ac8414c5-09ec-42aa-a33e-cd16595c7f1e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149459,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149459,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This pattern is used in a scenario where it makes sense to have only one of something, such as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This pattern is used in a scenario where it makes sense to have only one of something, such as:"
          }
        ]
      },
      {
        "id": "81f8b8ff-67ce-4433-8185-e11464f72a7f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149460,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149460,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a single class that orchestrates other objects’ interactions, ex. Manager class"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "a single class that orchestrates other objects’ interactions, ex. Manager class"
          }
        ]
      },
      {
        "id": "8045abdd-d1f5-49d2-9281-bdeaa1adc804",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149460,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149460,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or one class that represents a unique, single resource, ex. Logging component"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "or one class that represents a unique, single resource, ex. Logging component"
          }
        ]
      },
      {
        "id": "27f29a6e-ecda-4488-999e-1313f89145af",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149460,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149460,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the most common ways to implement the Singleton pattern is via a static "
            ],
            [
              "factory method",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " such as a "
            ],
            [
              "CreateInstance()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "GetInstance()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or a static property in C#, "
            ],
            [
              "Instance",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), which is then designed to always return the same instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the most common ways to implement the Singleton pattern is via a static "
          },
          {
            "Text": "factory method",
            "AttrFlags": 1
          },
          {
            "Text": " such as a "
          },
          {
            "Text": "CreateInstance()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "GetInstance()",
            "AttrFlags": 2
          },
          {
            "Text": " (or a static property in C#, "
          },
          {
            "Text": "Instance",
            "AttrFlags": 2
          },
          {
            "Text": "), which is then designed to always return the same instance."
          }
        ]
      },
      {
        "id": "276e55a3-3ebc-47a5-a594-898c585097b7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149460,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149460,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first call to the method or property creates and returns the Singleton instance. Thereafter, the method always returns the same instance. This way, there is only ever one instance of the singleton object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first call to the method or property creates and returns the Singleton instance. Thereafter, the method always returns the same instance. This way, there is only ever one instance of the singleton object."
          }
        ]
      },
      {
        "id": "315026c9-1306-49f0-8480-b67fdc16dcdb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149461,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149461,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Preventing creation of instances via "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be accomplished by making the class constructor(s) "
            ],
            [
              "private.",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Preventing creation of instances via "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " can be accomplished by making the class constructor(s) "
          },
          {
            "Text": "private.",
            "AttrFlags": 2
          }
        ]
      },
      {
        "id": "6e5f5ffc-5d93-4a64-a60e-41824db99b2d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149461,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149461,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is a typical code example for implementing a Singleton pattern in C#:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is a typical code example for implementing a Singleton pattern in C#:"
          }
        ]
      },
      {
        "id": "13453a19-9014-46c0-9fd8-a7a3b451fe60",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149461,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223360000,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "class Singleton\n{\n    // Because the _instance member is made private, the only way to get the single \n    // instance is via the static Instance property below. This can also be similarly \n    // achieved with a GetInstance() method instead of the property.\n    private static Singleton _instance = null;\n\n    // Making the constructor private prevents other instances from being \n    // created via something like Singleton s = new Singleton(), protecting\n    // against unintentional misuse.\n    private Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get \n        {\n            // The first call will create the one and only instance.\n            if (_instance == null)\n            {\n                _instance = new Singleton();\n            }\n\n            // Every call afterwards will return the single instance created above.\n            return _instance;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Singleton\n{\n    // Because the _instance member is made private, the only way to get the single \n    // instance is via the static Instance property below. This can also be similarly \n    // achieved with a GetInstance() method instead of the property.\n    private static Singleton _instance = null;\n\n    // Making the constructor private prevents other instances from being \n    // created via something like Singleton s = new Singleton(), protecting\n    // against unintentional misuse.\n    private Singleton()\n    {\n    }\n\n    public static Singleton Instance\n    {\n        get \n        {\n            // The first call will create the one and only instance.\n            if (_instance == null)\n            {\n                _instance = new Singleton();\n            }\n\n            // Every call afterwards will return the single instance created above.\n            return _instance;\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "2664cbdc-eb41-4591-897d-6a9647575418",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149461,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149461,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To illustrate this pattern further, the code below checks whether an identical instance of the Singleton is returned when the Instance property is called more than once."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To illustrate this pattern further, the code below checks whether an identical instance of the Singleton is returned when the Instance property is called more than once."
          }
        ]
      },
      {
        "id": "edcc55cb-b1ed-4fa0-81e3-16852b252a33",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149461,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223360000,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "class Program\n{\n    static void Main(string[] args)\n    {\n        Singleton s1 = Singleton.Instance;\n        Singleton s2 = Singleton.Instance;\n        \n        // Both Singleton objects above should now reference the same Singleton instance.\n        if (Object.ReferenceEquals(s1, s2))\n        {\n            Console.WriteLine(\"Singleton is working\");\n        }\n        else\n        {\n            // Otherwise, the Singleton Instance property is returning something \n            // other than the unique, single instance when called.\n            Console.WriteLine(\"Singleton is broken\");\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Program\n{\n    static void Main(string[] args)\n    {\n        Singleton s1 = Singleton.Instance;\n        Singleton s2 = Singleton.Instance;\n        \n        // Both Singleton objects above should now reference the same Singleton instance.\n        if (Object.ReferenceEquals(s1, s2))\n        {\n            Console.WriteLine(\"Singleton is working\");\n        }\n        else\n        {\n            // Otherwise, the Singleton Instance property is returning something \n            // other than the unique, single instance when called.\n            Console.WriteLine(\"Singleton is broken\");\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "ceecea95-988a-4fbe-8c3d-a31d7389704e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149461,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149461,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: this implementation is not thread safe."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: this implementation is not thread safe."
          }
        ]
      },
      {
        "id": "fea6a6f5-71fc-4476-8346-35767ec19cc3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149463,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149463,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To see more examples, including how to make this thread-safe, visit: "
            ],
            [
              "Singleton Implementation",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/1192/singleton-implementation#t=201608010510155689796"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To see more examples, including how to make this thread-safe, visit: "
          },
          {
            "Text": "Singleton Implementation",
            "Link": "http://stackoverflow.com/documentation/c%23/1192/singleton-implementation#t=201608010510155689796"
          }
        ]
      },
      {
        "id": "64cb6d60-6025-41c0-a00a-765b144ce71e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149463,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149463,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Singletons are conceptually similar to a global value, and cause similar design flaws and concerns. Because of this, the Singleton pattern is widely regarded as an anti-pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Singletons are conceptually similar to a global value, and cause similar design flaws and concerns. Because of this, the Singleton pattern is widely regarded as an anti-pattern."
          }
        ]
      },
      {
        "id": "d7395189-727a-4ffd-a5ee-f117ec4d293a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149463,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149463,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Visit "
            ],
            [
              "“What is so bad about Singletons?”",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons"
                ]
              ]
            ],
            [
              " for more information on the problems that arise with their use."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Visit "
          },
          {
            "Text": "“What is so bad about Singletons?”",
            "Link": "http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons"
          },
          {
            "Text": " for more information on the problems that arise with their use."
          }
        ]
      },
      {
        "id": "a76ad968-00f2-4116-be1e-c75be35d3a1b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149464,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149464,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C#, you have the ability to make a class "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which makes all members static, and the class cannot be instantiated. Given this, it is common to see static classes used in place of the Singleton pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C#, you have the ability to make a class "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": ", which makes all members static, and the class cannot be instantiated. Given this, it is common to see static classes used in place of the Singleton pattern."
          }
        ]
      },
      {
        "id": "6a6d5021-43bb-41b6-bfb9-181a3b0a441d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530149464,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530149464,
        "parent_id": "7194498a-6c2d-4983-8b92-353d1b890384",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For key differences between the two, visit "
            ],
            [
              "C# Singleton Pattern Versus Static Class",
              [
                [
                  "a",
                  "http://www.dotnetperls.com/singleton-static"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For key differences between the two, visit "
          },
          {
            "Text": "C# Singleton Pattern Versus Static Class",
            "Link": "http://www.dotnetperls.com/singleton-static"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Singleton Pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}