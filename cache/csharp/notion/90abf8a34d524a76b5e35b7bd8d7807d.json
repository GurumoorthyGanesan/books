{
  "ID": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
  "Root": {
    "alive": true,
    "content": [
      "3df82e9d-fcba-4ef3-a98e-f4a67c1da997",
      "fbe4459c-17a9-4207-a516-5863b85f2b32",
      "ce5814f9-d0b8-4611-bccd-9b5bce0354db",
      "e255f6c7-2636-4a9a-b099-e4b57b0ea706",
      "1ca66fcc-f5a9-44cf-be70-adfed79c6f13",
      "c5cb9b05-9f55-4e21-8489-e2c0d716cd09",
      "4f491624-f31f-40f2-9fd1-ac11084aed92",
      "3b7013cf-46ca-4e45-b6ed-4161c0e6e303",
      "cc8ff492-8214-4d38-85e7-943925622998",
      "4ab4f5fb-968f-4d2f-9fcc-4a536dd36b21",
      "aa3b1b1e-8d76-4554-a2a9-7121f1ebb260",
      "9612e1e1-52b5-496a-a7ce-3acbbee20542",
      "dc20fd9b-8751-48b0-8ef2-b56c556dac78",
      "611d3b72-c8d7-4757-9f36-6e5c19336e7f",
      "9766ba80-539c-4119-8325-8a58814b99e4",
      "4fcae254-fd11-4131-ac13-0c7539f89fc8",
      "9134654e-31df-4021-96f3-942c384c7aad",
      "2e8be24e-9891-4316-a55d-ce13552be613",
      "d5e15fdb-03fb-40ce-ad4b-f7269a06575e",
      "6d7081e0-266f-4d32-b333-d71ca20794f0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524484387,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549535100000,
    "parent_id": "f185d627-93ed-4197-8bae-c35411c58fa9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Overloadable Operators"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484378,
        "id": "3df82e9d-fcba-4ef3-a98e-f4a67c1da997",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484378,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C# allows user-defined types to overload operators by defining static member functions using the "
            ],
            [
              "operator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C# allows user-defined types to overload operators by defining static member functions using the "
          },
          {
            "Text": "operator",
            "AttrFlags": 2
          },
          {
            "Text": " keyword."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484381,
        "id": "fbe4459c-17a9-4207-a516-5863b85f2b32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484381,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following example illustrates an implementation of the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following example illustrates an implementation of the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484381,
        "id": "ce5814f9-d0b8-4611-bccd-9b5bce0354db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484381,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we have a "
            ],
            [
              "Complex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class which represents a complex number:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we have a "
          },
          {
            "Text": "Complex",
            "AttrFlags": 2
          },
          {
            "Text": " class which represents a complex number:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484381,
        "id": "e255f6c7-2636-4a9a-b099-e4b57b0ea706",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535040000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public struct Complex\n{\n    public double Real { get; set; }\n    public double Imaginary { get; set; }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public struct Complex\n{\n    public double Real { get; set; }\n    public double Imaginary { get; set; }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484382,
        "id": "1ca66fcc-f5a9-44cf-be70-adfed79c6f13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484382,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And we want to add the option to use the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator for this class. i.e.:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And we want to add the option to use the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operator for this class. i.e.:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484382,
        "id": "c5cb9b05-9f55-4e21-8489-e2c0d716cd09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535040000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Complex a = new Complex() { Real = 1, Imaginary = 2 };\nComplex b = new Complex() { Real = 4, Imaginary = 8 };\nComplex c = a + b;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Complex a = new Complex() { Real = 1, Imaginary = 2 };\nComplex b = new Complex() { Real = 4, Imaginary = 8 };\nComplex c = a + b;",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484382,
        "id": "4f491624-f31f-40f2-9fd1-ac11084aed92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484382,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We will need to overload the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator for the class. This is done using a static function and the "
            ],
            [
              "operator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We will need to overload the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operator for the class. This is done using a static function and the "
          },
          {
            "Text": "operator",
            "AttrFlags": 2
          },
          {
            "Text": " keyword:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484382,
        "id": "3b7013cf-46ca-4e45-b6ed-4161c0e6e303",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535100000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static Complex operator +(Complex c1, Complex c2)\n{\n   return new Complex \n   { \n       Real = c1.Real + c2.Real,\n       Imaginary = c1.Imaginary + c2.Imaginary \n\n   };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "public static Complex operator +(Complex c1, Complex c2)\n{\n   return new Complex \n   { \n       Real = c1.Real + c2.Real,\n       Imaginary = c1.Imaginary + c2.Imaginary \n\n   };\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484383,
        "id": "cc8ff492-8214-4d38-85e7-943925622998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484383,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators such as "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can all be overloaded. This also includes Operators that don’t return the same type (for example, "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be overloaded, despite returning booleans) The rule below relating to pairs is also enforced here."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators such as "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": " can all be overloaded. This also includes Operators that don’t return the same type (for example, "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " can be overloaded, despite returning booleans) The rule below relating to pairs is also enforced here."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484383,
        "id": "4ab4f5fb-968f-4d2f-9fcc-4a536dd36b21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484383,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparison operators have to be overloaded in pairs (e.g. if "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is overloaded, "
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " also needs to be overloaded)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparison operators have to be overloaded in pairs (e.g. if "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " is overloaded, "
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " also needs to be overloaded)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484385,
        "id": "aa3b1b1e-8d76-4554-a2a9-7121f1ebb260",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484385,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A full list of overloadable operators (as well as non-overloadable operators and the restrictions placed on some overloadable operators) can be seen at "
            ],
            [
              "MSDN - Overloadable Operators (C# Programming Guide)",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/8edha89s.aspx"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A full list of overloadable operators (as well as non-overloadable operators and the restrictions placed on some overloadable operators) can be seen at "
          },
          {
            "Text": "MSDN - Overloadable Operators (C# Programming Guide)",
            "Link": "https://msdn.microsoft.com/en-us/library/8edha89s.aspx"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484385,
        "id": "9612e1e1-52b5-496a-a7ce-3acbbee20542",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484385,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "overloading of "
            ],
            [
              "operator is",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was introduced with the pattern matching mechanism of C# 7.0. For details see "
            ],
            [
              "Pattern Matching",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/1936/c-sharp-7-0-features/13323/pattern-matching#t=201608081959042378203"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "overloading of "
          },
          {
            "Text": "operator is",
            "AttrFlags": 2
          },
          {
            "Text": " was introduced with the pattern matching mechanism of C# 7.0. For details see "
          },
          {
            "Text": "Pattern Matching",
            "Link": "http://stackoverflow.com/documentation/c%23/1936/c-sharp-7-0-features/13323/pattern-matching#t=201608081959042378203"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484386,
        "id": "dc20fd9b-8751-48b0-8ef2-b56c556dac78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484386,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given a type "
            ],
            [
              "Cartesian",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " defined as follows"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given a type "
          },
          {
            "Text": "Cartesian",
            "AttrFlags": 2
          },
          {
            "Text": " defined as follows"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484386,
        "id": "611d3b72-c8d7-4757-9f36-6e5c19336e7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535100000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Cartesian\n{\n    public int X { get; }\n    public int Y { get; }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public class Cartesian\n{\n    public int X { get; }\n    public int Y { get; }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484386,
        "id": "9766ba80-539c-4119-8325-8a58814b99e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484386,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An overloadable "
            ],
            [
              "operator is",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could e.g. be defined for "
            ],
            [
              "Polar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " coordinates"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An overloadable "
          },
          {
            "Text": "operator is",
            "AttrFlags": 2
          },
          {
            "Text": " could e.g. be defined for "
          },
          {
            "Text": "Polar",
            "AttrFlags": 2
          },
          {
            "Text": " coordinates"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484386,
        "id": "4fcae254-fd11-4131-ac13-0c7539f89fc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535100000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static class Polar\n{\n    public static bool operator is(Cartesian c, out double R, out double Theta)\n    {\n        R = Math.Sqrt(c.X*c.X + c.Y*c.Y);\n        Theta = Math.Atan2(c.Y, c.X);\n        return c.X != 0 || c.Y != 0;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public static class Polar\n{\n    public static bool operator is(Cartesian c, out double R, out double Theta)\n    {\n        R = Math.Sqrt(c.X*c.X + c.Y*c.Y);\n        Theta = Math.Atan2(c.Y, c.X);\n        return c.X != 0 || c.Y != 0;\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484386,
        "id": "9134654e-31df-4021-96f3-942c384c7aad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524484386,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which can be used like this"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which can be used like this"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484386,
        "id": "2e8be24e-9891-4316-a55d-ce13552be613",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535100000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var c = Cartesian(3, 4);\nif (c is Polar(var R, *))\n{\n    Console.WriteLine(R);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var c = Cartesian(3, 4);\nif (c is Polar(var R, *))\n{\n    Console.WriteLine(R);\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524484387,
        "id": "d5e15fdb-03fb-40ce-ad4b-f7269a06575e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535100000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is taken from the "
            ],
            [
              "Roslyn Pattern Matching Documentation",
              [
                [
                  "a",
                  "https://github.com/dotnet/roslyn/blob/future/docs/features/patterns.md"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 10,
        "inline_content": [
          {
            "Text": "This example is taken from the "
          },
          {
            "Text": "Roslyn Pattern Matching Documentation",
            "Link": "https://github.com/dotnet/roslyn/blob/future/docs/features/patterns.md"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549535100000,
        "id": "6d7081e0-266f-4d32-b333-d71ca20794f0",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535100000,
        "parent_id": "90abf8a3-4d52-4a76-b5e3-5b7bd8d7807d",
        "parent_table": "block",
        "type": "text",
        "version": 4
      }
    ],
    "title": "Overloadable Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}