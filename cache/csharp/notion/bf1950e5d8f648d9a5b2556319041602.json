{
  "ID": "bf1950e5-d8f6-48d9-a5b2-556319041602",
  "Root": {
    "id": "bf1950e5-d8f6-48d9-a5b2-556319041602",
    "alive": true,
    "content": [
      "9fc15588-2362-4de3-ad21-a898647d7d89",
      "58d02495-f8bd-40b5-8327-b107945dc120",
      "8e76a570-1297-4e2c-84b1-e82442608cab"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527142530,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549622700000,
    "parent_id": "9b304904-2267-43ba-a97e-7fc56fa64c3c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Lazy thread-safe Singleton using Double Checked Locking"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "id": "9fc15588-2362-4de3-ad21-a898647d7d89",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527142529,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527142529,
        "parent_id": "bf1950e5-d8f6-48d9-a5b2-556319041602",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This thread-safe version of a singleton was necessary in the early versions of .NET where "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " initialization was not guaranteed to be thread-safe. In more modern versions of the framework a "
            ],
            [
              "statically initialized singleton",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/1192/singleton-implementation/3863/statically-initialized-singleton"
                ]
              ]
            ],
            [
              " is usually preferred because it is very easy to make implementation mistakes in the following pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This thread-safe version of a singleton was necessary in the early versions of .NET where "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " initialization was not guaranteed to be thread-safe. In more modern versions of the framework a "
          },
          {
            "Text": "statically initialized singleton",
            "Link": "http://stackoverflow.com/documentation/c%23/1192/singleton-implementation/3863/statically-initialized-singleton"
          },
          {
            "Text": " is usually preferred because it is very easy to make implementation mistakes in the following pattern."
          }
        ]
      },
      {
        "id": "58d02495-f8bd-40b5-8327-b107945dc120",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527142530,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549622700000,
        "parent_id": "bf1950e5-d8f6-48d9-a5b2-556319041602",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public sealed class ThreadSafeSingleton\n{\n   private static volatile ThreadSafeSingleton instance;\n   private static object lockObject = new Object();\n\n   private ThreadSafeSingleton()\n   {\n   }\n\n   public static ThreadSafeSingleton Instance\n   {\n      get \n      {\n         if (instance == null) \n         {\n            lock (lockObject) \n            {\n               if (instance == null)\n               {\n                  instance = new ThreadSafeSingleton();\n               }\n            }\n         }\n\n         return instance;\n      }\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public sealed class ThreadSafeSingleton\n{\n   private static volatile ThreadSafeSingleton instance;\n   private static object lockObject = new Object();\n\n   private ThreadSafeSingleton()\n   {\n   }\n\n   public static ThreadSafeSingleton Instance\n   {\n      get \n      {\n         if (instance == null) \n         {\n            lock (lockObject) \n            {\n               if (instance == null)\n               {\n                  instance = new ThreadSafeSingleton();\n               }\n            }\n         }\n\n         return instance;\n      }\n   }\n}",
        "code_language": "C#"
      },
      {
        "id": "8e76a570-1297-4e2c-84b1-e82442608cab",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527142530,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527142530,
        "parent_id": "bf1950e5-d8f6-48d9-a5b2-556319041602",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice that the "
            ],
            [
              "if (instance == null)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " check is done twice: once before the lock is acquired, and once afterwards. This implementation would still be thread-safe even without the first null check. However, that would mean that a lock would be acquired "
            ],
            [
              "every time",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the instance is requested, and that would cause performance to suffer. The first null check is added so that the lock is not acquired unless it’s necessary. The second null check makes sure that only the first thread to acquire the lock then creates the instance. The other threads will find the instance to be populated and skip ahead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice that the "
          },
          {
            "Text": "if (instance == null)",
            "AttrFlags": 2
          },
          {
            "Text": " check is done twice: once before the lock is acquired, and once afterwards. This implementation would still be thread-safe even without the first null check. However, that would mean that a lock would be acquired "
          },
          {
            "Text": "every time",
            "AttrFlags": 4
          },
          {
            "Text": " the instance is requested, and that would cause performance to suffer. The first null check is added so that the lock is not acquired unless it’s necessary. The second null check makes sure that only the first thread to acquire the lock then creates the instance. The other threads will find the instance to be populated and skip ahead."
          }
        ]
      }
    ],
    "title": "Lazy thread-safe Singleton using Double Checked Locking",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}