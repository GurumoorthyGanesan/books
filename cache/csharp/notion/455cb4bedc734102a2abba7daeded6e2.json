{
  "ID": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
  "Root": {
    "alive": true,
    "content": [
      "9078430c-2556-40b2-8080-efdddde19037",
      "4e703a9f-28d5-4682-a7e3-6e260d0af64c",
      "e3543027-db75-4ce5-a6a4-2cfa282be622",
      "6e24b432-93d6-442a-8e10-bae967bfd7ce",
      "93feb2bb-7bd8-4ef3-a925-b4fdd5d4925d",
      "a49ac7f1-2a40-487f-8a41-e7c7b75eb6e7",
      "9c97e727-f72d-43ec-aea4-a601a5d8ee4b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524684351,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549614900000,
    "parent_id": "190506d8-ff9f-4443-bbce-bdb69e483555",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Extensions and interfaces together enable DRY code and mixin-like functionality"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684347,
        "id": "9078430c-2556-40b2-8080-efdddde19037",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684347,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Extension methods enable you to simplify your interface definitions by only including core required functionality in the interface itself and allowing you to define convenience methods and overloads as extension methods. Interfaces with fewer methods are easier to implement in new classes. Keeping overloads as extensions rather than including them in the interface directly saves you from copying boilerplate code into every implementation, helping you keep your code DRY. This in fact is similar to the mixin pattern which C# does not support."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Extension methods enable you to simplify your interface definitions by only including core required functionality in the interface itself and allowing you to define convenience methods and overloads as extension methods. Interfaces with fewer methods are easier to implement in new classes. Keeping overloads as extensions rather than including them in the interface directly saves you from copying boilerplate code into every implementation, helping you keep your code DRY. This in fact is similar to the mixin pattern which C# does not support."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684350,
        "id": "4e703a9f-28d5-4682-a7e3-6e260d0af64c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684350,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "System.Linq.Enumerable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s extensions to "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a great example of this. "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only requires the implementing class to implement two methods: generic and non-generic "
            ],
            [
              "GetEnumerator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But "
            ],
            [
              "System.Linq.Enumerable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides countless useful utilities as extensions enabling concise and clear consumption of "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "System.Linq.Enumerable",
            "AttrFlags": 2
          },
          {
            "Text": "’s extensions to "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is a great example of this. "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " only requires the implementing class to implement two methods: generic and non-generic "
          },
          {
            "Text": "GetEnumerator()",
            "AttrFlags": 2
          },
          {
            "Text": ". But "
          },
          {
            "Text": "System.Linq.Enumerable",
            "AttrFlags": 2
          },
          {
            "Text": " provides countless useful utilities as extensions enabling concise and clear consumption of "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684351,
        "id": "e3543027-db75-4ce5-a6a4-2cfa282be622",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684351,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following is a very simple interface with convenience overloads provided as extensions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following is a very simple interface with convenience overloads provided as extensions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684351,
        "id": "6e24b432-93d6-442a-8e10-bae967bfd7ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684351,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface ITimeFormatter\n{\n   string Format(TimeSpan span);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface ITimeFormatter\n{\n   string Format(TimeSpan span);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684351,
        "id": "93feb2bb-7bd8-4ef3-a925-b4fdd5d4925d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684351,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static class TimeFormatter\n{\n    // Provide an overload to *all* implementers of ITimeFormatter.\n    public static string Format(\n        this ITimeFormatter formatter,\n        int millisecondsSpan)\n        =\u003e formatter.Format(TimeSpan.FromMilliseconds(millisecondsSpan));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static class TimeFormatter\n{\n    // Provide an overload to *all* implementers of ITimeFormatter.\n    public static string Format(\n        this ITimeFormatter formatter,\n        int millisecondsSpan)\n        =\u003e formatter.Format(TimeSpan.FromMilliseconds(millisecondsSpan));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684351,
        "id": "a49ac7f1-2a40-487f-8a41-e7c7b75eb6e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684351,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Implementations only need to provide one method. Very easy to\n// write additional implementations.\npublic class SecondsTimeFormatter : ITimeFormatter\n{\n   public string Format(TimeSpan span)\n   {\n       return $\"{(int)span.TotalSeconds}s\";\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Implementations only need to provide one method. Very easy to\n// write additional implementations.\npublic class SecondsTimeFormatter : ITimeFormatter\n{\n   public string Format(TimeSpan span)\n   {\n       return $\"{(int)span.TotalSeconds}s\";\n   }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524684351,
        "id": "9c97e727-f72d-43ec-aea4-a601a5d8ee4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524684351,
        "parent_id": "455cb4be-dc73-4102-a2ab-ba7daeded6e2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Program\n{\n    static void Main(string[] args)\n    {\n        var formatter = new SecondsTimeFormatter();\n        // Callers get two method overloads!\n        Console.WriteLine($\"4500ms is rougly {formatter.Format(4500)}\");\n        var span = TimeSpan.FromSeconds(5);\n        Console.WriteLine($\"{span} is formatted as {formatter.Format(span)}\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Program\n{\n    static void Main(string[] args)\n    {\n        var formatter = new SecondsTimeFormatter();\n        // Callers get two method overloads!\n        Console.WriteLine($\"4500ms is rougly {formatter.Format(4500)}\");\n        var span = TimeSpan.FromSeconds(5);\n        Console.WriteLine($\"{span} is formatted as {formatter.Format(span)}\");\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Extensions and interfaces together enable DRY code and mixin-like functionality",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}