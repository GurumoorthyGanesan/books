{
  "ID": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
  "Root": {
    "alive": true,
    "content": [
      "e37cefc3-a983-4ce1-8783-b4a453c83fff",
      "c83005d9-74b1-4037-ad8e-49e182cc5033",
      "915aee02-f9e3-49d6-991c-cc21687929dd",
      "154be1b0-7b20-4356-8703-bb493946408b",
      "c0e1d216-052e-463f-b2e8-2b8bc1f21915",
      "a05475db-d5e6-4dbe-8c8a-480389a54ff8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528962281,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549610100000,
    "parent_id": "9340bd1d-9542-456c-9914-451d6bc67b1d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Override Equals and GetHashCode on custom types"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528962277,
        "id": "e37cefc3-a983-4ce1-8783-b4a453c83fff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528962277,
        "parent_id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a class "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a class "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528962280,
        "id": "c83005d9-74b1-4037-ad8e-49e182cc5033",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549610040000,
        "parent_id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Clothes { get; set; }\n}\n\nvar person1 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some clothes\" };\nvar person2 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some other clothes\" };\n\nbool result = person1.Equals(person2); // false because it's reference Equals"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Clothes { get; set; }\n}\n\nvar person1 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some clothes\" };\nvar person2 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some other clothes\" };\n\nbool result = person1.Equals(person2); // false because it's reference Equals",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528962280,
        "id": "915aee02-f9e3-49d6-991c-cc21687929dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528962280,
        "parent_id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But defining "
            ],
            [
              "Equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "GetHashCode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But defining "
          },
          {
            "Text": "Equals",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "GetHashCode",
            "AttrFlags": 2
          },
          {
            "Text": " as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528962280,
        "id": "154be1b0-7b20-4356-8703-bb493946408b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549610100000,
        "parent_id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Clothes { get; set; }\n\n\t\tpublic override bool Equals(object obj)\n    {\n        var person = obj as Person;\n        if(person == null) return false;\n        return Name == person.Name \u0026\u0026 Age == person.Age; // the clothes are not important when comparing two persons\n    }\n\n\t\tpublic override int GetHashCode()\n    {\n        return Name.GetHashCode()*Age;\n    }\n}\n\nvar person1 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some clothes\" };\nvar person2 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some other clothes\" };\n\nbool result = person1.Equals(person2); // result is true"
            ]
          ]
        },
        "type": "code",
        "version": 18,
        "code": "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Clothes { get; set; }\n\n\t\tpublic override bool Equals(object obj)\n    {\n        var person = obj as Person;\n        if(person == null) return false;\n        return Name == person.Name \u0026\u0026 Age == person.Age; // the clothes are not important when comparing two persons\n    }\n\n\t\tpublic override int GetHashCode()\n    {\n        return Name.GetHashCode()*Age;\n    }\n}\n\nvar person1 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some clothes\" };\nvar person2 = new Person { Name = \"Jon\", Age = 20, Clothes = \"some other clothes\" };\n\nbool result = person1.Equals(person2); // result is true",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528962280,
        "id": "c0e1d216-052e-463f-b2e8-2b8bc1f21915",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528962280,
        "parent_id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also using LINQ to make different queries on persons will check both "
            ],
            [
              "Equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "GetHashCode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also using LINQ to make different queries on persons will check both "
          },
          {
            "Text": "Equals",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "GetHashCode",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528962280,
        "id": "a05475db-d5e6-4dbe-8c8a-480389a54ff8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549610100000,
        "parent_id": "b0b1e0a9-9c43-4c24-8dff-c8e3526bd575",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var persons = new List\u003cPerson\u003e\n{\n     new Person{ Name = \"Jon\", Age = 20, Clothes = \"some clothes\"},\n     new Person{ Name = \"Dave\", Age = 20, Clothes = \"some other clothes\"},\n     new Person{ Name = \"Jon\", Age = 20, Clothes = \"\"}\n};\n\nvar distinctPersons = persons.Distinct().ToList(); // distinctPersons has Count = 2"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "var persons = new List\u003cPerson\u003e\n{\n     new Person{ Name = \"Jon\", Age = 20, Clothes = \"some clothes\"},\n     new Person{ Name = \"Dave\", Age = 20, Clothes = \"some other clothes\"},\n     new Person{ Name = \"Jon\", Age = 20, Clothes = \"\"}\n};\n\nvar distinctPersons = persons.Distinct().ToList(); // distinctPersons has Count = 2",
        "code_language": "C#"
      }
    ],
    "title": "Override Equals and GetHashCode on custom types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}