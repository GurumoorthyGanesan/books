{
  "ID": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
  "Root": {
    "id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
    "alive": true,
    "content": [
      "ab5af228-d6eb-4eb9-8ea7-ade15b8f3284",
      "f1a127ae-5e6d-4128-9161-649256bbeeee",
      "4b29fa79-da7a-420e-9bea-4d68d803e8cf",
      "625f3f0e-34e0-46cb-a49a-d4f6c7182f88",
      "a840af39-277a-45d0-a09e-24711c25d30f",
      "5d229e58-c05e-4589-96e5-4cffd225a3bb",
      "cbe04bc6-90f9-4a1c-9b8e-5ea0c41dd002"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524679576,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549875600000,
    "parent_id": "190506d8-ff9f-4443-bbce-bdb69e483555",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Extension methods with Enumeration"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "id": "ab5af228-d6eb-4eb9-8ea7-ade15b8f3284",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679575,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524679575,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Extension methods are useful for adding functionality to enumerations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Extension methods are useful for adding functionality to enumerations."
          }
        ]
      },
      {
        "id": "f1a127ae-5e6d-4128-9161-649256bbeeee",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679575,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524679575,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One common use is to implement a conversion method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One common use is to implement a conversion method."
          }
        ]
      },
      {
        "id": "4b29fa79-da7a-420e-9bea-4d68d803e8cf",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679575,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549875540000,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public enum YesNo\n{\n    Yes,\n    No,\n}\n\npublic static class EnumExtentions\n{\n    public static bool ToBool(this YesNo yn)\n    {\n        return yn == YesNo.Yes;\n    }\n    public static YesNo ToYesNo(this bool yn)\n    {\n        return yn ? YesNo.Yes : YesNo.No;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public enum YesNo\n{\n    Yes,\n    No,\n}\n\npublic static class EnumExtentions\n{\n    public static bool ToBool(this YesNo yn)\n    {\n        return yn == YesNo.Yes;\n    }\n    public static YesNo ToYesNo(this bool yn)\n    {\n        return yn ? YesNo.Yes : YesNo.No;\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "625f3f0e-34e0-46cb-a49a-d4f6c7182f88",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679576,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524679576,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now you can quickly convert your enum value to a different type. In this case a bool."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now you can quickly convert your enum value to a different type. In this case a bool."
          }
        ]
      },
      {
        "id": "a840af39-277a-45d0-a09e-24711c25d30f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679576,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549875540000,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "bool yesNoBool = YesNo.Yes.ToBool(); // yesNoBool == true\nYesNo yesNoEnum = false.ToYesNo();   // yesNoEnum == YesNo.No"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "bool yesNoBool = YesNo.Yes.ToBool(); // yesNoBool == true\nYesNo yesNoEnum = false.ToYesNo();   // yesNoEnum == YesNo.No",
        "code_language": "C#"
      },
      {
        "id": "5d229e58-c05e-4589-96e5-4cffd225a3bb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679576,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524679576,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively extension methods can be used to add property like methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively extension methods can be used to add property like methods."
          }
        ]
      },
      {
        "id": "cbe04bc6-90f9-4a1c-9b8e-5ea0c41dd002",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524679576,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549875600000,
        "parent_id": "52cf2eff-94c6-4f8b-848f-2c388c6e5815",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public enum Element\n{\n    Hydrogen,\n    Helium,\n    Lithium,\n    Beryllium,\n    Boron,\n    Carbon,\n    Nitrogen,\n    Oxygen\n    //Etc\n}\n\npublic static class ElementExtensions\n{\n    public static double AtomicMass(this Element element)\n    {\n        switch(element)\n        {\n            case Element.Hydrogen:  return 1.00794;\n            case Element.Helium:    return 4.002602;\n            case Element.Lithium:   return 6.941;\n            case Element.Beryllium: return 9.012182;\n            case Element.Boron:     return 10.811;\n            case Element.Carbon:    return 12.0107;\n            case Element.Nitrogen:  return 14.0067;\n            case Element.Oxygen:    return 15.9994;\n            //Etc\n        }\n        return double.Nan;\n    }\n}\n\nvar massWater = 2*Element.Hydrogen.AtomicMass() + Element.Oxygen.AtomicMass();"
            ]
          ]
        },
        "type": "code",
        "version": 10,
        "code": "public enum Element\n{\n    Hydrogen,\n    Helium,\n    Lithium,\n    Beryllium,\n    Boron,\n    Carbon,\n    Nitrogen,\n    Oxygen\n    //Etc\n}\n\npublic static class ElementExtensions\n{\n    public static double AtomicMass(this Element element)\n    {\n        switch(element)\n        {\n            case Element.Hydrogen:  return 1.00794;\n            case Element.Helium:    return 4.002602;\n            case Element.Lithium:   return 6.941;\n            case Element.Beryllium: return 9.012182;\n            case Element.Boron:     return 10.811;\n            case Element.Carbon:    return 12.0107;\n            case Element.Nitrogen:  return 14.0067;\n            case Element.Oxygen:    return 15.9994;\n            //Etc\n        }\n        return double.Nan;\n    }\n}\n\nvar massWater = 2*Element.Hydrogen.AtomicMass() + Element.Oxygen.AtomicMass();",
        "code_language": "C#"
      }
    ],
    "title": "Extension methods with Enumeration",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}