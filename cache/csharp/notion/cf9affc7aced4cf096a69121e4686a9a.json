{
  "ID": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
  "Root": {
    "alive": true,
    "content": [
      "8722c245-0615-4432-a3fb-835f2e692c6f",
      "e4863619-db74-4ff2-ae7c-6eb2bdf45d99",
      "869b642b-e42e-4468-8ae1-254a91778ad5",
      "3130bc21-82cd-4862-8438-a413f9987706",
      "f3f37bb0-3948-45e9-8daf-66af7d63a0bd",
      "b30fe4cc-686f-4f2c-9840-39e5dc2ec6c7",
      "07ac974e-d475-49e0-8895-dc9195568b79",
      "9a85af84-e0b4-4792-b273-a27e9d2b54b4",
      "4d995ca6-6a03-4768-92f2-46f8a3190b79",
      "46cfbec3-bee8-4dbe-85c4-257466ab9002",
      "8029e01c-edb9-4baf-bfc8-f491c806fc0e",
      "54b1776b-f13a-459e-be31-e9f71eb53ebe",
      "65e17848-ca69-47b8-89d9-c8bb9848c696",
      "40cedcd5-767f-4f51-8943-6ed5ee7f9892",
      "0d2d72dd-5d2c-4bde-bb76-bb9071a216d9",
      "950f23ca-5598-488b-a6d1-42a97f4673cb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549524489290,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549536540000,
    "parent_id": "f185d627-93ed-4197-8bae-c35411c58fa9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "? : Ternary Operator"
        ]
      ]
    },
    "type": "page",
    "version": 22,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489286,
        "id": "8722c245-0615-4432-a3fb-835f2e692c6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489286,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Returns one of two values depending on the value of a Boolean expression."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Returns one of two values depending on the value of a Boolean expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489288,
        "id": "e4863619-db74-4ff2-ae7c-6eb2bdf45d99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489288,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489288,
        "id": "869b642b-e42e-4468-8ae1-254a91778ad5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535580000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "condition ? expression_if_true : expression_if_false;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "condition ? expression_if_true : expression_if_false;",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "3130bc21-82cd-4862-8438-a413f9987706",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489289,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "f3f37bb0-3948-45e9-8daf-66af7d63a0bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535640000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "string name = \"Frank\";\nConsole.WriteLine(name == \"Frank\" ? \"The name is Frank\" : \"The name is not Frank\");"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "string name = \"Frank\";\nConsole.WriteLine(name == \"Frank\" ? \"The name is Frank\" : \"The name is not Frank\");",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "b30fe4cc-686f-4f2c-9840-39e5dc2ec6c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489289,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ternary operator is right-associative which allows for compound ternary expressions to be used. This is done by adding additional ternary equations in either the true or false position of a parent ternary equation. Care should be taken to ensure readability, but this can be useful shorthand in some circumstances."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ternary operator is right-associative which allows for compound ternary expressions to be used. This is done by adding additional ternary equations in either the true or false position of a parent ternary equation. Care should be taken to ensure readability, but this can be useful shorthand in some circumstances."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "07ac974e-d475-49e0-8895-dc9195568b79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489289,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, a compound ternary operation evaluates a "
            ],
            [
              "clamp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function and returns the current value if it’s within the range, the "
            ],
            [
              "min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value if it’s below the range, or the "
            ],
            [
              "max",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value if it’s above the range."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, a compound ternary operation evaluates a "
          },
          {
            "Text": "clamp",
            "AttrFlags": 2
          },
          {
            "Text": " function and returns the current value if it’s within the range, the "
          },
          {
            "Text": "min",
            "AttrFlags": 2
          },
          {
            "Text": " value if it’s below the range, or the "
          },
          {
            "Text": "max",
            "AttrFlags": 2
          },
          {
            "Text": " value if it’s above the range."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "9a85af84-e0b4-4792-b273-a27e9d2b54b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535640000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "light.intensity = Clamp(light.intensity, minLight, maxLight);\n\npublic static float Clamp(float val, float min, float max)\n{\n    return (val \u003c min) ? min : (val \u003e max) ? max : val;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 10,
        "code": "light.intensity = Clamp(light.intensity, minLight, maxLight);\n\npublic static float Clamp(float val, float min, float max)\n{\n    return (val \u003c min) ? min : (val \u003e max) ? max : val;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "4d995ca6-6a03-4768-92f2-46f8a3190b79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535640000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ternary operators can also be nested, such as:"
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Ternary operators can also be nested, such as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489289,
        "id": "46cfbec3-bee8-4dbe-85c4-257466ab9002",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535640000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "a ? b ? \"a is true, b is true\" : \"a is true, b is false\" : \"a is false\"\n\n// This is evaluated from left to right and can be more easily seen with parenthesis:\n\na ? (b ? x : y) : z\n\n// Where the result is x if a \u0026\u0026 b, y if a \u0026\u0026 !b, and z if !a"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "a ? b ? \"a is true, b is true\" : \"a is true, b is false\" : \"a is false\"\n\n// This is evaluated from left to right and can be more easily seen with parenthesis:\n\na ? (b ? x : y) : z\n\n// Where the result is x if a \u0026\u0026 b, y if a \u0026\u0026 !b, and z if !a",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489290,
        "id": "8029e01c-edb9-4baf-bfc8-f491c806fc0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489290,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When writing compound ternary statements, it’s common to use parenthesis or indentation to improve readability."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When writing compound ternary statements, it’s common to use parenthesis or indentation to improve readability."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489290,
        "id": "54b1776b-f13a-459e-be31-e9f71eb53ebe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489290,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The types of "
            ],
            [
              "expression_if_true",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "expression_if_false",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " must be identical or there must be an implicit conversion from one to the other."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The types of "
          },
          {
            "Text": "expression_if_true",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "expression_if_false",
            "AttrFlags": 4
          },
          {
            "Text": " must be identical or there must be an implicit conversion from one to the other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489290,
        "id": "65e17848-ca69-47b8-89d9-c8bb9848c696",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535640000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "condition ? 3 : \"Not three\"; // Doesn't compile because `int` and `string` lack an implicit conversion.\n\ncondition ? 3.ToString() : \"Not three\"; // OK because both possible outputs are strings.\n\ncondition ? 3 : 3.5; // OK because there is an implicit conversion from `int` to `double`. The ternary operator will return a `double`.\n\ncondition ? 3.5 : 3; // OK because there is an implicit conversion from `int` to `double`. The ternary operator will return a `double`."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "condition ? 3 : \"Not three\"; // Doesn't compile because `int` and `string` lack an implicit conversion.\n\ncondition ? 3.ToString() : \"Not three\"; // OK because both possible outputs are strings.\n\ncondition ? 3 : 3.5; // OK because there is an implicit conversion from `int` to `double`. The ternary operator will return a `double`.\n\ncondition ? 3.5 : 3; // OK because there is an implicit conversion from `int` to `double`. The ternary operator will return a `double`.",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489290,
        "id": "40cedcd5-767f-4f51-8943-6ed5ee7f9892",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549524489290,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type and conversion requirements apply to your own classes too."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type and conversion requirements apply to your own classes too."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489290,
        "id": "0d2d72dd-5d2c-4bde-bb76-bb9071a216d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535700000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Car\n{}\n\npublic class SportsCar : Car\n{}\n\npublic class SUV : Car\n{}"
            ]
          ]
        },
        "type": "code",
        "version": 11,
        "code": "public class Car\n{}\n\npublic class SportsCar : Car\n{}\n\npublic class SUV : Car\n{}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549524489290,
        "id": "950f23ca-5598-488b-a6d1-42a97f4673cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549535700000,
        "parent_id": "cf9affc7-aced-4cf0-96a6-9121e4686a9a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "condition ? new SportsCar() : new Car(); // OK because there is an implicit conversion from `SportsCar` to `Car`. The ternary operator will return a reference of type `Car`.\n\ncondition ? new Car() : new SportsCar(); // OK because there is an implicit conversion from `SportsCar` to `Car`. The ternary operator will return a reference of type `Car`.\n\ncondition ? new SportsCar() : new SUV(); // Doesn't compile because there is no implicit conversion from `SportsCar` to SUV or `SUV` to `SportsCar`. The compiler is not smart enough to realize that both of them have an implicit conversion to `Car`.\n\ncondition ? new SportsCar() as Car : new SUV() as Car; // OK because both expressions evaluate to a reference of type `Car`. The ternary operator will return a reference of type `Car`."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "condition ? new SportsCar() : new Car(); // OK because there is an implicit conversion from `SportsCar` to `Car`. The ternary operator will return a reference of type `Car`.\n\ncondition ? new Car() : new SportsCar(); // OK because there is an implicit conversion from `SportsCar` to `Car`. The ternary operator will return a reference of type `Car`.\n\ncondition ? new SportsCar() : new SUV(); // Doesn't compile because there is no implicit conversion from `SportsCar` to SUV or `SUV` to `SportsCar`. The compiler is not smart enough to realize that both of them have an implicit conversion to `Car`.\n\ncondition ? new SportsCar() as Car : new SUV() as Car; // OK because both expressions evaluate to a reference of type `Car`. The ternary operator will return a reference of type `Car`.",
        "code_language": "C#"
      }
    ],
    "title": "? : Ternary Operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}