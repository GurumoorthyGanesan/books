{
  "ID": "9ee9c11e-5462-4849-a9c0-10708376a32e",
  "Root": {
    "id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
    "alive": true,
    "content": [
      "5a13c827-9f85-494f-b1de-63c3d3ab08ba",
      "53b1b368-6539-45da-9ba2-91a60498588e",
      "37325026-555b-45f9-98a5-7aec98fa37cf",
      "4be43b63-f25f-453b-85f8-b4aa73aae1f3",
      "199735f0-439c-47fe-9608-61b02fd3e4ed",
      "a9f90181-1170-43d0-8a00-78b77dc9718b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530047270,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550223000000,
    "parent_id": "7ab4d6e5-5a1c-4950-82d0-073379ffb854",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Union Types in C can also contain Struct fields"
        ]
      ]
    },
    "type": "page",
    "version": 21,
    "content_resolved": [
      {
        "id": "5a13c827-9f85-494f-b1de-63c3d3ab08ba",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530047265,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530047265,
        "parent_id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Apart from primitives, the Explicit Layout structs (Unions) in C#, can also contain other Structs. As long as a field is a Value type and not a Reference, it can be contained in a Union:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Apart from primitives, the Explicit Layout structs (Unions) in C#, can also contain other Structs. As long as a field is a Value type and not a Reference, it can be contained in a Union:"
          }
        ]
      },
      {
        "id": "53b1b368-6539-45da-9ba2-91a60498588e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530047267,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223000000,
        "parent_id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "using System;\nusing System.Runtime.InteropServices;\n\n// The struct needs to be annotated as \"Explicit Layout\"\n[StructLayout(LayoutKind.Explicit)]\nstruct IpAddress\n{\n    // Same definition of IpAddress, from the example above\n}\n\n// Now let's see if we can fit a whole URL into a long\n\n// Let's define a short enum to hold protocols\nenum Protocol : short { Http, Https, Ftp, Sftp, Tcp }\n\n// The Service struct will hold the Address, the Port and the Protocol\n[StructLayout(LayoutKind.Explicit)]\nstruct Service\n{\n    [FieldOffset(0)] public IpAddress Address;\n    [FieldOffset(4)] public ushort Port;\n    [FieldOffset(6)] public Protocol AppProtocol;\n    [FieldOffset(0)] public long Payload;\n\n    public Service(IpAddress address, ushort port, Protocol protocol)\n    {\n        Payload = 0;\n        Address = address;\n        Port  = port;\n        AppProtocol = protocol;\n    }\n\n    public Service(long payload)\n    {\n        Address = new IpAddress(0);\n        Port = 80;\n        AppProtocol = Protocol.Http;\n        Payload = payload;\n    }\n\n    public Service Copy() =\u003e new Service(Payload);\n\n    public override string ToString() =\u003e $\"{AppProtocol}//{Address}:{Port}/\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "using System;\nusing System.Runtime.InteropServices;\n\n// The struct needs to be annotated as \"Explicit Layout\"\n[StructLayout(LayoutKind.Explicit)]\nstruct IpAddress\n{\n    // Same definition of IpAddress, from the example above\n}\n\n// Now let's see if we can fit a whole URL into a long\n\n// Let's define a short enum to hold protocols\nenum Protocol : short { Http, Https, Ftp, Sftp, Tcp }\n\n// The Service struct will hold the Address, the Port and the Protocol\n[StructLayout(LayoutKind.Explicit)]\nstruct Service\n{\n    [FieldOffset(0)] public IpAddress Address;\n    [FieldOffset(4)] public ushort Port;\n    [FieldOffset(6)] public Protocol AppProtocol;\n    [FieldOffset(0)] public long Payload;\n\n    public Service(IpAddress address, ushort port, Protocol protocol)\n    {\n        Payload = 0;\n        Address = address;\n        Port  = port;\n        AppProtocol = protocol;\n    }\n\n    public Service(long payload)\n    {\n        Address = new IpAddress(0);\n        Port = 80;\n        AppProtocol = Protocol.Http;\n        Payload = payload;\n    }\n\n    public Service Copy() =\u003e new Service(Payload);\n\n    public override string ToString() =\u003e $\"{AppProtocol}//{Address}:{Port}/\";\n}",
        "code_language": "C#"
      },
      {
        "id": "37325026-555b-45f9-98a5-7aec98fa37cf",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530047268,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530047268,
        "parent_id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can now verify that the whole Service Union fits into the size of a long (8 bytes)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can now verify that the whole Service Union fits into the size of a long (8 bytes)."
          }
        ]
      },
      {
        "id": "4be43b63-f25f-453b-85f8-b4aa73aae1f3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530047269,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223000000,
        "parent_id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var ip = new IpAddress(new Random().Next());\nConsole.WriteLine($\"Size: {Marshal.SizeOf(ip)} bytes. Value: {ip.Address} = {ip}.\");\n\nvar s1 = new Service(ip, 8080, Protocol.Https);\nvar s2 = new Service(s1.Payload);\ns2.Address.Byte1 = 100;\ns2.AppProtocol = Protocol.Ftp;\n\nConsole.WriteLine($\"Size: {Marshal.SizeOf(s1)} bytes. Value: {s1.Address} = {s1}.\");\nConsole.WriteLine($\"Size: {Marshal.SizeOf(s2)} bytes. Value: {s2.Address} = {s2}.\");"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "var ip = new IpAddress(new Random().Next());\nConsole.WriteLine($\"Size: {Marshal.SizeOf(ip)} bytes. Value: {ip.Address} = {ip}.\");\n\nvar s1 = new Service(ip, 8080, Protocol.Https);\nvar s2 = new Service(s1.Payload);\ns2.Address.Byte1 = 100;\ns2.AppProtocol = Protocol.Ftp;\n\nConsole.WriteLine($\"Size: {Marshal.SizeOf(s1)} bytes. Value: {s1.Address} = {s1}.\");\nConsole.WriteLine($\"Size: {Marshal.SizeOf(s2)} bytes. Value: {s2.Address} = {s2}.\");",
        "code_language": "C#"
      },
      {
        "id": "199735f0-439c-47fe-9608-61b02fd3e4ed",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549530047270,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549530047270,
        "parent_id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "View Demo",
              [
                [
                  "a",
                  "https://dotnetfiddle.net/cROlki"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "View Demo",
            "Link": "https://dotnetfiddle.net/cROlki"
          }
        ]
      },
      {
        "id": "a9f90181-1170-43d0-8a00-78b77dc9718b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550223000000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223000000,
        "parent_id": "9ee9c11e-5462-4849-a9c0-10708376a32e",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Union Types in C can also contain Struct fields",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}