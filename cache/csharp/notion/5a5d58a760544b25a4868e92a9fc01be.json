{
  "ID": "5a5d58a7-6054-4b25-a486-8e92a9fc01be",
  "Root": {
    "alive": true,
    "content": [
      "c2a50d5d-b91e-4d2f-ad01-ab9adfdcdd70",
      "466e6bd3-3e9e-4c33-b2ac-ddf37a10de24",
      "94fde6ec-79d1-4eb3-a4cb-c45d461a6c13"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528940288,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5a5d58a7-6054-4b25-a486-8e92a9fc01be",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549627800000,
    "parent_id": "0f6a5396-e84b-478b-b5b4-0ebcef30fb97",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Integer overflow"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528940285,
        "id": "c2a50d5d-b91e-4d2f-ad01-ab9adfdcdd70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528940285,
        "parent_id": "5a5d58a7-6054-4b25-a486-8e92a9fc01be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a maximum capacity an integer can store. And when you go over that limit, it will loop back to the negative side. For "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is "
            ],
            [
              "2147483647",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a maximum capacity an integer can store. And when you go over that limit, it will loop back to the negative side. For "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", it is "
          },
          {
            "Text": "2147483647",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528940288,
        "id": "466e6bd3-3e9e-4c33-b2ac-ddf37a10de24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549627800000,
        "parent_id": "5a5d58a7-6054-4b25-a486-8e92a9fc01be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "int x = int.MaxValue;                //MaxValue is 2147483647\nx = unchecked(x + 1);                //make operation explicitly unchecked so that the example also works when the check for arithmetic overflow/underflow is enabled in the project settings \nConsole.WriteLine(x);                //Will print -2147483648\nConsole.WriteLine(int.MinValue);     //Same as Min value"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int x = int.MaxValue;                //MaxValue is 2147483647\nx = unchecked(x + 1);                //make operation explicitly unchecked so that the example also works when the check for arithmetic overflow/underflow is enabled in the project settings \nConsole.WriteLine(x);                //Will print -2147483648\nConsole.WriteLine(int.MinValue);     //Same as Min value",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528940288,
        "id": "94fde6ec-79d1-4eb3-a4cb-c45d461a6c13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528940288,
        "parent_id": "5a5d58a7-6054-4b25-a486-8e92a9fc01be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For any integers out of this range use namespace System.Numerics which has datatype BigInteger. Check below link for more information https://msdn.microsoft.com/en-us/library/system.numerics.biginteger(v=vs.110).aspx"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For any integers out of this range use namespace System.Numerics which has datatype BigInteger. Check below link for more information https://msdn.microsoft.com/en-us/library/system.numerics.biginteger(v=vs.110).aspx"
          }
        ]
      }
    ],
    "title": "Integer overflow",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}