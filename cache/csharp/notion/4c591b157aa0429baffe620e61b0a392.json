{
  "ID": "4c591b15-7aa0-429b-affe-620e61b0a392",
  "Root": {
    "alive": true,
    "content": [
      "54d5aeb1-0abf-4efe-b440-f81d725c5c3d",
      "bce6c8c8-0254-4253-b0ce-f250c1e70485",
      "2d95ec75-6032-4198-b9e2-784723fab137",
      "82cad58f-3244-43fe-a25f-6175b96e19b5",
      "79912dae-7026-4ac1-ab60-0719292398cc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525666249,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4c591b15-7aa0-429b-affe-620e61b0a392",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549610760000,
    "parent_id": "114a10c9-a82c-42cd-b7ee-4162153e47b0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "TryCatchFinally"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525666244,
        "id": "54d5aeb1-0abf-4efe-b440-f81d725c5c3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525666244,
        "parent_id": "4c591b15-7aa0-429b-affe-620e61b0a392",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of C# 6.0, the "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword can now be used within a "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "finally",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of C# 6.0, the "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " keyword can now be used within a "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "finally",
            "AttrFlags": 2
          },
          {
            "Text": " block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525666247,
        "id": "bce6c8c8-0254-4253-b0ce-f250c1e70485",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549610760000,
        "parent_id": "4c591b15-7aa0-429b-affe-620e61b0a392",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "try {\n   var client = new AsyncClient();\n   await client.DoSomething();\n} catch (MyException ex) {\n   await client.LogExceptionAsync();\n   throw;\n} finally {\n   await client.CloseAsync();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try {\n   var client = new AsyncClient();\n   await client.DoSomething();\n} catch (MyException ex) {\n   await client.LogExceptionAsync();\n   throw;\n} finally {\n   await client.CloseAsync();\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525666249,
        "id": "2d95ec75-6032-4198-b9e2-784723fab137",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525666249,
        "parent_id": "4c591b15-7aa0-429b-affe-620e61b0a392",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prior to C# 6.0, you would need to do something along the lines of the following. Note that 6.0 also cleaned up the null checks with the "
            ],
            [
              "Null Propagating operator",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/24/c-6-features/51/null-propagation#t=201511271308000980289"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prior to C# 6.0, you would need to do something along the lines of the following. Note that 6.0 also cleaned up the null checks with the "
          },
          {
            "Text": "Null Propagating operator",
            "Link": "http://stackoverflow.com/documentation/c%23/24/c-6-features/51/null-propagation#t=201511271308000980289"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525666249,
        "id": "82cad58f-3244-43fe-a25f-6175b96e19b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549610760000,
        "parent_id": "4c591b15-7aa0-429b-affe-620e61b0a392",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "AsynClient client;\nMyException caughtException;\ntry {\n     client = new AsyncClient();\n     await client.DoSomething();\n} catch (MyException ex) {\n     caughtException = ex;\n}\n\nif (client != null) {\n    if (caughtException != null) {\n       await client.LogExceptionAsync();\n    }\n    await client.CloseAsync();\n    if (caughtException != null) throw caughtException;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "AsynClient client;\nMyException caughtException;\ntry {\n     client = new AsyncClient();\n     await client.DoSomething();\n} catch (MyException ex) {\n     caughtException = ex;\n}\n\nif (client != null) {\n    if (caughtException != null) {\n       await client.LogExceptionAsync();\n    }\n    await client.CloseAsync();\n    if (caughtException != null) throw caughtException;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525666249,
        "id": "79912dae-7026-4ac1-ab60-0719292398cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525666249,
        "parent_id": "4c591b15-7aa0-429b-affe-620e61b0a392",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please note that if you await a task not created by "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (e.g. a task created by "
            ],
            [
              "Task.Run",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), some debuggers may break on exceptions thrown by the task even when it is seemingly handled by the surrounding try/catch. This happens because the debugger considers it to be unhandled with respect to user code. In Visual Studio, there is an option called "
            ],
            [
              "“Just My Code”",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/dn457346.aspx"
                ]
              ]
            ],
            [
              ", which can be disabled to prevent the debugger from breaking in such situations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please note that if you await a task not created by "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " (e.g. a task created by "
          },
          {
            "Text": "Task.Run",
            "AttrFlags": 2
          },
          {
            "Text": "), some debuggers may break on exceptions thrown by the task even when it is seemingly handled by the surrounding try/catch. This happens because the debugger considers it to be unhandled with respect to user code. In Visual Studio, there is an option called "
          },
          {
            "Text": "“Just My Code”",
            "Link": "https://msdn.microsoft.com/en-us/library/dn457346.aspx"
          },
          {
            "Text": ", which can be disabled to prevent the debugger from breaking in such situations."
          }
        ]
      }
    ],
    "title": "TryCatchFinally",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}