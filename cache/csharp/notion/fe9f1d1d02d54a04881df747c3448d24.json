{
  "ID": "fe9f1d1d-02d5-4a04-881d-f747c3448d24",
  "Root": {
    "alive": true,
    "content": [
      "dd736d8d-2a3f-430e-ac63-6cf350f22a34",
      "fe28bf93-5481-4266-9a07-aff076015b97",
      "30c3ce99-4d07-4fce-a64e-a841a07c226d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528450553,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fe9f1d1d-02d5-4a04-881d-f747c3448d24",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549622040000,
    "parent_id": "eee4787e-f48e-4f42-9f08-9a1d031866f9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Implicit Casting"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528450536,
        "id": "dd736d8d-2a3f-430e-ac63-6cf350f22a34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528450536,
        "parent_id": "fe9f1d1d-02d5-4a04-881d-f747c3448d24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A value will automatically be cast to the appropriate type if the compiler knows that it can always be converted to that type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A value will automatically be cast to the appropriate type if the compiler knows that it can always be converted to that type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528450553,
        "id": "fe28bf93-5481-4266-9a07-aff076015b97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549622040000,
        "parent_id": "fe9f1d1d-02d5-4a04-881d-f747c3448d24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "int number = -1;\nobject value = number;\nConsole.WriteLine(value);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "int number = -1;\nobject value = number;\nConsole.WriteLine(value);",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528450553,
        "id": "30c3ce99-4d07-4fce-a64e-a841a07c226d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528450553,
        "parent_id": "fe9f1d1d-02d5-4a04-881d-f747c3448d24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, we didn’t need to use the typical explicit casting syntax because the compiler knows all "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s can be cast to "
            ],
            [
              "object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s. In fact, we could avoid creating variables and pass "
            ],
            [
              "-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directly as the argument of "
            ],
            [
              "Console.WriteLine()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that expects an "
            ],
            [
              "object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, we didn’t need to use the typical explicit casting syntax because the compiler knows all "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "s can be cast to "
          },
          {
            "Text": "object",
            "AttrFlags": 2
          },
          {
            "Text": "s. In fact, we could avoid creating variables and pass "
          },
          {
            "Text": "-1",
            "AttrFlags": 2
          },
          {
            "Text": " directly as the argument of "
          },
          {
            "Text": "Console.WriteLine()",
            "AttrFlags": 2
          },
          {
            "Text": " that expects an "
          },
          {
            "Text": "object",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Implicit Casting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}