{
  "ID": "1e61f0b3-fa11-40b1-be46-20ab98fbb425",
  "Root": {
    "id": "1e61f0b3-fa11-40b1-be46-20ab98fbb425",
    "alive": true,
    "content": [
      "32b0836f-9bce-4d63-8089-6e889ddc69b5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549530235285,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550223780000,
    "parent_id": "d2786b82-24ad-4c4e-b5a8-5ef23d9feee9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "GetExpression Method"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "id": "32b0836f-9bce-4d63-8089-6e889ddc69b5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550223795636,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550223780000,
        "parent_id": "1e61f0b3-fa11-40b1-be46-20ab98fbb425",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static Expression\u003cFunc\u003cT, bool\u003e\u003e GetExpression\u003cT\u003e(IList\u003cQueryFilter\u003e filters)\n{\n    Expression exp = null;\n    \n    // Represents a named parameter expression. {parm =\u003e parm.Name.Equals()}, it is the param part\n    // To create a ParameterExpression need the type of the entity that the query is against an a name\n    // The type is possible to find with the generic T and the name is fixed parm\n    ParameterExpression param = Expression.Parameter(typeof(T), \"parm\");\n\n    // It is good parctice never trust in the client, so it is wise to validate.\n    if (filters.Count == 0)\n        return null;\n\n    // The expression creation differ if there is one, two or more filters.    \n    if (filters.Count != 1)\n    {\n        if (filters.Count == 2)\n            // It is result from direct call.\n            // For simplicity sake the private overloads will be explained in another example.\n            exp = GetExpression\u003cT\u003e(param, filters[0], filters[1]);\n        else\n        {\n            // As there is no method for more than two filters, \n            // I iterate through all the filters and put I in the query two at a time\n            while (filters.Count \u003e 0)\n            {\n                // Retreive the first two filters\n                var f1 = filters[0];\n                var f2 = filters[1];\n                \n                // To build a expression with a conditional AND operation that evaluates \n                // the second operand only if the first operand evaluates to true.\n                // It needed to use the BinaryExpression a Expression derived class \n                // That has the AndAlso method that join two expression together\n                exp = exp == null ? GetExpression\u003cT\u003e(param, filters[0], filters[1]) : Expression.AndAlso(exp, GetExpression\u003cT\u003e(param, filters[0], filters[1]));\n                \n                // Remove the two just used filters, for the method in the next iteration finds the next filters\n                filters.Remove(f1);\n                filters.Remove(f2);\n                \n                // If it is that last filter, add the last one and remove it\n                if (filters.Count == 1)\n                {\n                    exp = Expression.AndAlso(exp, GetExpression\u003cT\u003e(param, filters[0]));\n                    filters.RemoveAt(0);\n                }\n            }\n        }\n    }\n    else\n        // It is result from direct call.\n        exp = GetExpression\u003cT\u003e(param, filters[0]);\n\n           // converts the Expression into Lambda and retuns the query\n    return Expression.Lambda\u003cFunc\u003cT, bool\u003e\u003e(exp, param);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public static Expression\u003cFunc\u003cT, bool\u003e\u003e GetExpression\u003cT\u003e(IList\u003cQueryFilter\u003e filters)\n{\n    Expression exp = null;\n    \n    // Represents a named parameter expression. {parm =\u003e parm.Name.Equals()}, it is the param part\n    // To create a ParameterExpression need the type of the entity that the query is against an a name\n    // The type is possible to find with the generic T and the name is fixed parm\n    ParameterExpression param = Expression.Parameter(typeof(T), \"parm\");\n\n    // It is good parctice never trust in the client, so it is wise to validate.\n    if (filters.Count == 0)\n        return null;\n\n    // The expression creation differ if there is one, two or more filters.    \n    if (filters.Count != 1)\n    {\n        if (filters.Count == 2)\n            // It is result from direct call.\n            // For simplicity sake the private overloads will be explained in another example.\n            exp = GetExpression\u003cT\u003e(param, filters[0], filters[1]);\n        else\n        {\n            // As there is no method for more than two filters, \n            // I iterate through all the filters and put I in the query two at a time\n            while (filters.Count \u003e 0)\n            {\n                // Retreive the first two filters\n                var f1 = filters[0];\n                var f2 = filters[1];\n                \n                // To build a expression with a conditional AND operation that evaluates \n                // the second operand only if the first operand evaluates to true.\n                // It needed to use the BinaryExpression a Expression derived class \n                // That has the AndAlso method that join two expression together\n                exp = exp == null ? GetExpression\u003cT\u003e(param, filters[0], filters[1]) : Expression.AndAlso(exp, GetExpression\u003cT\u003e(param, filters[0], filters[1]));\n                \n                // Remove the two just used filters, for the method in the next iteration finds the next filters\n                filters.Remove(f1);\n                filters.Remove(f2);\n                \n                // If it is that last filter, add the last one and remove it\n                if (filters.Count == 1)\n                {\n                    exp = Expression.AndAlso(exp, GetExpression\u003cT\u003e(param, filters[0]));\n                    filters.RemoveAt(0);\n                }\n            }\n        }\n    }\n    else\n        // It is result from direct call.\n        exp = GetExpression\u003cT\u003e(param, filters[0]);\n\n           // converts the Expression into Lambda and retuns the query\n    return Expression.Lambda\u003cFunc\u003cT, bool\u003e\u003e(exp, param);\n}",
        "code_language": "C#"
      }
    ],
    "title": "GetExpression Method",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}