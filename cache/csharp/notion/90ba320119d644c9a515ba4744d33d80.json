{
  "ID": "90ba3201-19d6-44c9-a515-ba4744d33d80",
  "Root": {
    "id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
    "alive": true,
    "content": [
      "93eabc16-2484-4abf-b72b-721f34733cec",
      "668d50f3-689a-4b8a-a314-b99c28bb50af",
      "c9b5f422-bff2-4bd5-95be-969bcf866d9c",
      "ce32547b-062d-40e0-b5d9-3246d60c2cf8",
      "6a4f77d5-f710-4fd9-b45a-dbfd89080ea9",
      "ea60540c-7668-4d39-9f74-cffd5a620111",
      "dfaf643a-3d9b-4ce1-800a-11a5911f4e0c",
      "8c66ce20-7dc3-40d4-b4f7-6738154a3853",
      "146b4e28-b3ca-43af-ad15-889869f028d9",
      "7b4da062-5362-4189-ad75-38e221970c03",
      "9f9fa57c-5cbd-471c-ae2c-b829913370fa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549526071305,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550125200000,
    "parent_id": "a34c1078-f01c-44b1-b468-522f804fbc2d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Chaining methods"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "id": "93eabc16-2484-4abf-b72b-721f34733cec",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071298,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071298,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many LINQ functions",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/system.linq.enumerable(v=vs.110).aspx"
                ]
              ]
            ],
            [
              " both operate on an "
            ],
            [
              "IEnumerable\u003cTSource\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and also return an "
            ],
            [
              "IEnumerable\u003cTResult\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The type parameters "
            ],
            [
              "TSource",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "TResult",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " may or may not refer to the same type, depending on the method in question and any functions passed to it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many LINQ functions",
            "Link": "https://msdn.microsoft.com/en-us/library/system.linq.enumerable(v=vs.110).aspx"
          },
          {
            "Text": " both operate on an "
          },
          {
            "Text": "IEnumerable\u003cTSource\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and also return an "
          },
          {
            "Text": "IEnumerable\u003cTResult\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". The type parameters "
          },
          {
            "Text": "TSource",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "TResult",
            "AttrFlags": 2
          },
          {
            "Text": " may or may not refer to the same type, depending on the method in question and any functions passed to it."
          }
        ]
      },
      {
        "id": "668d50f3-689a-4b8a-a314-b99c28bb50af",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071299,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071299,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A few examples of this are"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A few examples of this are"
          }
        ]
      },
      {
        "id": "c9b5f422-bff2-4bd5-95be-969bcf866d9c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071300,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550125140000,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public static IEnumerable\u003cTResult\u003e Select\u003cTSource, TResult\u003e(\n    this IEnumerable\u003cTSource\u003e source,\n    Func\u003cTSource, TResult\u003e selector\n)\n\npublic static IEnumerable\u003cTSource\u003e Where\u003cTSource\u003e(\n    this IEnumerable\u003cTSource\u003e source,\n    Func\u003cTSource, int, bool\u003e predicate\n)\n\npublic static IOrderedEnumerable\u003cTSource\u003e OrderBy\u003cTSource, TKey\u003e(\n    this IEnumerable\u003cTSource\u003e source,\n    Func\u003cTSource, TKey\u003e keySelector\n)\n"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public static IEnumerable\u003cTResult\u003e Select\u003cTSource, TResult\u003e(\n    this IEnumerable\u003cTSource\u003e source,\n    Func\u003cTSource, TResult\u003e selector\n)\n\npublic static IEnumerable\u003cTSource\u003e Where\u003cTSource\u003e(\n    this IEnumerable\u003cTSource\u003e source,\n    Func\u003cTSource, int, bool\u003e predicate\n)\n\npublic static IOrderedEnumerable\u003cTSource\u003e OrderBy\u003cTSource, TKey\u003e(\n    this IEnumerable\u003cTSource\u003e source,\n    Func\u003cTSource, TKey\u003e keySelector\n)\n",
        "code_language": "C#"
      },
      {
        "id": "ce32547b-062d-40e0-b5d9-3246d60c2cf8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071301,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071301,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While some method chaining may require an entire set to be worked prior to moving on, LINQ takes advantage of "
            ],
            [
              "deferred execution",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/68/linq-queries/8001/deferred-execution"
                ]
              ]
            ],
            [
              " by using "
            ],
            [
              "yield return ",
              [
                [
                  "a",
                  "https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273/"
                ]
              ]
            ],
            [
              "MSDN",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273/"
                ]
              ]
            ],
            [
              " which creates an Enumerable and an Enumerator behind the scenes. The process of chaining in LINQ is essentially building an enumerable (iterator) for the original set – which is deferred – until materialized by "
            ],
            [
              "enumerating the enumerable",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/68/linq-queries/17356/enumerating-the-enumerable"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While some method chaining may require an entire set to be worked prior to moving on, LINQ takes advantage of "
          },
          {
            "Text": "deferred execution",
            "Link": "http://stackoverflow.com/documentation/c%23/68/linq-queries/8001/deferred-execution"
          },
          {
            "Text": " by using "
          },
          {
            "Text": "yield return ",
            "Link": "https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273/"
          },
          {
            "Text": "MSDN",
            "AttrFlags": 1,
            "Link": "https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273/"
          },
          {
            "Text": " which creates an Enumerable and an Enumerator behind the scenes. The process of chaining in LINQ is essentially building an enumerable (iterator) for the original set – which is deferred – until materialized by "
          },
          {
            "Text": "enumerating the enumerable",
            "Link": "http://stackoverflow.com/documentation/c%23/68/linq-queries/17356/enumerating-the-enumerable"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "6a4f77d5-f710-4fd9-b45a-dbfd89080ea9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071302,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071302,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows these functions to be "
            ],
            [
              "fluently chained ",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Fluent_interface"
                ]
              ]
            ],
            [
              "wiki",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Fluent_interface"
                ]
              ]
            ],
            [
              ", where one function can act directly on the result of another. This style of code can be used to perform many sequence based operations in a single statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows these functions to be "
          },
          {
            "Text": "fluently chained ",
            "Link": "https://en.wikipedia.org/wiki/Fluent_interface"
          },
          {
            "Text": "wiki",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Fluent_interface"
          },
          {
            "Text": ", where one function can act directly on the result of another. This style of code can be used to perform many sequence based operations in a single statement."
          }
        ]
      },
      {
        "id": "ea60540c-7668-4d39-9f74-cffd5a620111",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071302,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071302,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, it’s possible to combine "
            ],
            [
              "Select",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Where",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "OrderBy",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to transform, filter and sort a sequence in a single statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, it’s possible to combine "
          },
          {
            "Text": "Select",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Where",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "OrderBy",
            "AttrFlags": 2
          },
          {
            "Text": " to transform, filter and sort a sequence in a single statement."
          }
        ]
      },
      {
        "id": "dfaf643a-3d9b-4ce1-800a-11a5911f4e0c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071303,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550125200000,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var someNumbers = { 4, 3, 2, 1 };\n\nvar processed = someNumbers\n        .Select(n =\u003e n * 2)   // Multiply each number by 2\n        .Where(n =\u003e n != 6)   // Keep all the results, except for 6\n        .OrderBy(n =\u003e n);     // Sort in ascending order\n"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "var someNumbers = { 4, 3, 2, 1 };\n\nvar processed = someNumbers\n        .Select(n =\u003e n * 2)   // Multiply each number by 2\n        .Where(n =\u003e n != 6)   // Keep all the results, except for 6\n        .OrderBy(n =\u003e n);     // Sort in ascending order\n",
        "code_language": "C#"
      },
      {
        "id": "8c66ce20-7dc3-40d4-b4f7-6738154a3853",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071303,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071303,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "146b4e28-b3ca-43af-ad15-889869f028d9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071303,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550125200000,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "2\n4\n8"
            ]
          ]
        },
        "type": "quote",
        "version": 5,
        "inline_content": [
          {
            "Text": "2\n4\n8"
          }
        ]
      },
      {
        "id": "7b4da062-5362-4189-ad75-38e221970c03",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071304,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Demo on .NET Fiddle",
              [
                [
                  "a",
                  "https://dotnetfiddle.net/3Gta8X"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Demo on .NET Fiddle",
            "Link": "https://dotnetfiddle.net/3Gta8X"
          }
        ]
      },
      {
        "id": "9f9fa57c-5cbd-471c-ae2c-b829913370fa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549526071304,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549526071304,
        "parent_id": "90ba3201-19d6-44c9-a515-ba4744d33d80",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any functions that both extend and return the generic "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type can be used as chained clauses in a single statement. This style of fluent programming is powerful, and should be considered when creating your own "
            ],
            [
              "extension methods",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/20/extension-methods#t=201607220826369208865"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any functions that both extend and return the generic "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " type can be used as chained clauses in a single statement. This style of fluent programming is powerful, and should be considered when creating your own "
          },
          {
            "Text": "extension methods",
            "Link": "http://stackoverflow.com/documentation/c%23/20/extension-methods#t=201607220826369208865"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Chaining methods",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}