{
  "ID": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
  "Root": {
    "alive": true,
    "content": [
      "05a4b48c-eb9d-469a-a6c3-18af72dc1b39",
      "18bfe0e6-1df2-458f-927b-a845cf33f073",
      "ff151d44-8074-431a-8f2c-ac2c7625e993",
      "90f6b281-27d9-4970-bbe2-f37c31a368bd",
      "4a917e25-186f-4d36-9b59-a7a1993633fc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525711382,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549628280000,
    "parent_id": "f5bb18c2-bb24-4faf-8598-a275d629a821",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Accessing Properties"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525711379,
        "id": "05a4b48c-eb9d-469a-a6c3-18af72dc1b39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525711379,
        "parent_id": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Program \n{\n    public static void Main(string[] args)\n    {\n        Person aPerson = new Person(\"Ann Xena Sample\", new DateTime(1984, 10, 22));\n        //example of accessing properties (Id, Name \u0026 DOB)\n        Console.WriteLine(\"Id is:  \\t{0}\\nName is:\\t'{1}'.\\nDOB is: \\t{2:yyyy-MM-dd}.\\nAge is: \\t{3}\", aPerson.Id, aPerson.Name, aPerson.DOB, aPerson.GetAgeInYears());\n        //example of setting properties"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Program \n{\n    public static void Main(string[] args)\n    {\n        Person aPerson = new Person(\"Ann Xena Sample\", new DateTime(1984, 10, 22));\n        //example of accessing properties (Id, Name \u0026 DOB)\n        Console.WriteLine(\"Id is:  \\t{0}\\nName is:\\t'{1}'.\\nDOB is: \\t{2:yyyy-MM-dd}.\\nAge is: \\t{3}\", aPerson.Id, aPerson.Name, aPerson.DOB, aPerson.GetAgeInYears());\n        //example of setting properties",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525711381,
        "id": "18bfe0e6-1df2-458f-927b-a845cf33f073",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525711381,
        "parent_id": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "aPerson.Name = \"   Hans Trimmer  \";\n        aPerson.DOB = new DateTime(1961, 11, 11);\n        //aPerson.Id = 5; //this won't compile as Id's SET method is private; so only accessible within the Person class.\n        //aPerson.DOB = DateTime.UtcNow.AddYears(1); //this would throw a runtime error as there's validation to ensure the DOB is in past."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "aPerson.Name = \"   Hans Trimmer  \";\n        aPerson.DOB = new DateTime(1961, 11, 11);\n        //aPerson.Id = 5; //this won't compile as Id's SET method is private; so only accessible within the Person class.\n        //aPerson.DOB = DateTime.UtcNow.AddYears(1); //this would throw a runtime error as there's validation to ensure the DOB is in past.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525711382,
        "id": "ff151d44-8074-431a-8f2c-ac2c7625e993",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525711382,
        "parent_id": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//see how our changes above take effect; note that the Name has been trimmed\n        Console.WriteLine(\"Id is:  \\t{0}\\nName is:\\t'{1}'.\\nDOB is: \\t{2:yyyy-MM-dd}.\\nAge is: \\t{3}\", aPerson.Id, aPerson.Name, aPerson.DOB, aPerson.GetAgeInYears());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//see how our changes above take effect; note that the Name has been trimmed\n        Console.WriteLine(\"Id is:  \\t{0}\\nName is:\\t'{1}'.\\nDOB is: \\t{2:yyyy-MM-dd}.\\nAge is: \\t{3}\", aPerson.Id, aPerson.Name, aPerson.DOB, aPerson.GetAgeInYears());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525711382,
        "id": "90f6b281-27d9-4970-bbe2-f37c31a368bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525711382,
        "parent_id": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Console.WriteLine(\"Press any key to continue\");\n        Console.Read();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Console.WriteLine(\"Press any key to continue\");\n        Console.Read();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525711382,
        "id": "4a917e25-186f-4d36-9b59-a7a1993633fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525711382,
        "parent_id": "4e7c0627-2dd3-4fa1-816c-bd5dbd050c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Person\n{\n    private static int nextId = 0;\n    private string name;\n    private DateTime dob; //dates are held in UTC; i.e. we disregard timezones\n    public Person(string name, DateTime dob)\n    {\n        this.Id = ++Person.nextId;\n        this.Name = name;\n        this.DOB = dob;\n    }\n    public int Id\n    {\n        get;\n        private set;\n    }\n    public string Name\n    {\n        get { return this.name; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value)) throw new InvalidNameException(value);\n            this.name = value.Trim();\n        }\n    }\n    public DateTime DOB\n    {\n        get { return this.dob; }\n        set \n        {\n            if (value \u003c DateTime.UtcNow.AddYears(-200) || value \u003e DateTime.UtcNow) throw new InvalidDobException(value);\n            this.dob = value; \n        }\n    }\n    public int GetAgeInYears()\n    {\n        DateTime today = DateTime.UtcNow;\n        int offset = HasHadBirthdayThisYear() ? 0 : -1;\n        return today.Year - this.dob.Year + offset;\n    }\n    private bool HasHadBirthdayThisYear()\n    {\n        bool hasHadBirthdayThisYear = true;\n        DateTime today = DateTime.UtcNow;\n        if (today.Month \u003e this.dob.Month)\n        {\n            hasHadBirthdayThisYear = true;\n        }\n        else\n        {\n            if (today.Month == this.dob.Month)\n            {\n                hasHadBirthdayThisYear = today.Day \u003e this.dob.Day;\n            }\n            else\n            {\n                hasHadBirthdayThisYear = false;\n            }\n        }\n        return hasHadBirthdayThisYear;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Person\n{\n    private static int nextId = 0;\n    private string name;\n    private DateTime dob; //dates are held in UTC; i.e. we disregard timezones\n    public Person(string name, DateTime dob)\n    {\n        this.Id = ++Person.nextId;\n        this.Name = name;\n        this.DOB = dob;\n    }\n    public int Id\n    {\n        get;\n        private set;\n    }\n    public string Name\n    {\n        get { return this.name; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value)) throw new InvalidNameException(value);\n            this.name = value.Trim();\n        }\n    }\n    public DateTime DOB\n    {\n        get { return this.dob; }\n        set \n        {\n            if (value \u003c DateTime.UtcNow.AddYears(-200) || value \u003e DateTime.UtcNow) throw new InvalidDobException(value);\n            this.dob = value; \n        }\n    }\n    public int GetAgeInYears()\n    {\n        DateTime today = DateTime.UtcNow;\n        int offset = HasHadBirthdayThisYear() ? 0 : -1;\n        return today.Year - this.dob.Year + offset;\n    }\n    private bool HasHadBirthdayThisYear()\n    {\n        bool hasHadBirthdayThisYear = true;\n        DateTime today = DateTime.UtcNow;\n        if (today.Month \u003e this.dob.Month)\n        {\n            hasHadBirthdayThisYear = true;\n        }\n        else\n        {\n            if (today.Month == this.dob.Month)\n            {\n                hasHadBirthdayThisYear = today.Day \u003e this.dob.Day;\n            }\n            else\n            {\n                hasHadBirthdayThisYear = false;\n            }\n        }\n        return hasHadBirthdayThisYear;\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Accessing Properties",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}