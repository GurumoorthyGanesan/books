{
  "ID": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
  "Root": {
    "id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
    "alive": true,
    "content": [
      "f8d9f852-5bf2-40a6-8b3b-ce075e55e15b",
      "ed43c1c2-ded6-4f63-afac-a00ddb262806",
      "984d4b24-cfd7-4b44-aa46-8cebf01a2ac1",
      "7429e10d-68f5-4ac4-8a62-57b22809572b",
      "670070be-813d-487e-9dcb-e4445ac5204f",
      "318a960b-93a8-4c28-a0f9-5c24d0195ce4",
      "1e406a72-da1b-4c59-a313-db1b7ae9435f",
      "009b9d68-67e0-4ff2-a230-d9cda42884ab",
      "bd2054ea-4bca-41c8-bf93-5c208b6aae31",
      "88b12f04-8d39-415b-b15c-85b1fa707d59"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528050407,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550207040000,
    "parent_id": "6edb5732-40b8-4df6-b8a8-809fb1164d58",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binary literals"
        ]
      ]
    },
    "type": "page",
    "version": 15,
    "content_resolved": [
      {
        "id": "f8d9f852-5bf2-40a6-8b3b-ce075e55e15b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050403,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528050403,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "0b",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " prefix can be used to represent Binary literals."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "0b",
            "AttrFlags": 1
          },
          {
            "Text": " prefix can be used to represent Binary literals."
          }
        ]
      },
      {
        "id": "ed43c1c2-ded6-4f63-afac-a00ddb262806",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050406,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528050406,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Binary literals allow constructing numbers from zeroes and ones, which makes seeing which bits are set in the binary representation of a number much easier. This can be useful for working with binary flags."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Binary literals allow constructing numbers from zeroes and ones, which makes seeing which bits are set in the binary representation of a number much easier. This can be useful for working with binary flags."
          }
        ]
      },
      {
        "id": "984d4b24-cfd7-4b44-aa46-8cebf01a2ac1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050406,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528050406,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following are equivalent ways of specifying an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with value "
            ],
            [
              "34",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (=25 + 21):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following are equivalent ways of specifying an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " with value "
          },
          {
            "Text": "34",
            "AttrFlags": 2
          },
          {
            "Text": " (=25 + 21):"
          }
        ]
      },
      {
        "id": "7429e10d-68f5-4ac4-8a62-57b22809572b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050406,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550206980000,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// Using a binary literal:\n//   bits: 76543210\nint a1 = 0b00100010;          // binary: explicitly specify bits\n\n// Existing methods:\nint a2 = 0x22;                // hexadecimal: every digit corresponds to 4 bits\nint a3 = 34;                  // decimal: hard to visualise which bits are set\nint a4 = (1 \u003c\u003c 5) | (1 \u003c\u003c 1); // bitwise arithmetic: combining non-zero bits"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// Using a binary literal:\n//   bits: 76543210\nint a1 = 0b00100010;          // binary: explicitly specify bits\n\n// Existing methods:\nint a2 = 0x22;                // hexadecimal: every digit corresponds to 4 bits\nint a3 = 34;                  // decimal: hard to visualise which bits are set\nint a4 = (1 \u003c\u003c 5) | (1 \u003c\u003c 1); // bitwise arithmetic: combining non-zero bits",
        "code_language": "C#"
      },
      {
        "id": "670070be-813d-487e-9dcb-e4445ac5204f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050407,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528050407,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Flags enumerations"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Flags enumerations"
          }
        ]
      },
      {
        "id": "318a960b-93a8-4c28-a0f9-5c24d0195ce4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050407,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528050407,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before, specifying flag values for an "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could only be done using one of the three methods in this example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before, specifying flag values for an "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " could only be done using one of the three methods in this example:"
          }
        ]
      },
      {
        "id": "1e406a72-da1b-4c59-a313-db1b7ae9435f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050407,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550206980000,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "[Flags]\npublic enum DaysOfWeek\n{\n    // Previously available methods:\n    //          decimal        hex       bit shifting\n    Monday    =  1,    //    = 0x01    = 1 \u003c\u003c 0\n    Tuesday   =  2,    //    = 0x02    = 1 \u003c\u003c 1\n    Wednesday =  4,    //    = 0x04    = 1 \u003c\u003c 2\n    Thursday  =  8,    //    = 0x08    = 1 \u003c\u003c 3\n    Friday    = 16,    //    = 0x10    = 1 \u003c\u003c 4\n    Saturday  = 32,    //    = 0x20    = 1 \u003c\u003c 5\n    Sunday    = 64,    //    = 0x40    = 1 \u003c\u003c 6\n\n    Weekdays = Monday | Tuesday | Wednesday | Thursday | Friday,\n    Weekends = Saturday | Sunday\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[Flags]\npublic enum DaysOfWeek\n{\n    // Previously available methods:\n    //          decimal        hex       bit shifting\n    Monday    =  1,    //    = 0x01    = 1 \u003c\u003c 0\n    Tuesday   =  2,    //    = 0x02    = 1 \u003c\u003c 1\n    Wednesday =  4,    //    = 0x04    = 1 \u003c\u003c 2\n    Thursday  =  8,    //    = 0x08    = 1 \u003c\u003c 3\n    Friday    = 16,    //    = 0x10    = 1 \u003c\u003c 4\n    Saturday  = 32,    //    = 0x20    = 1 \u003c\u003c 5\n    Sunday    = 64,    //    = 0x40    = 1 \u003c\u003c 6\n\n    Weekdays = Monday | Tuesday | Wednesday | Thursday | Friday,\n    Weekends = Saturday | Sunday\n}",
        "code_language": "C#"
      },
      {
        "id": "009b9d68-67e0-4ff2-a230-d9cda42884ab",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528050407,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528050407,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With binary literals it is more obvious which bits are set, and using them does not require understanding hexadecimal numbers and bitwise arithmetic:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With binary literals it is more obvious which bits are set, and using them does not require understanding hexadecimal numbers and bitwise arithmetic:"
          }
        ]
      },
      {
        "id": "bd2054ea-4bca-41c8-bf93-5c208b6aae31",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550207033597,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550206980000,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "[Flags]\npublic enum DaysOfWeek\n{\n    Monday    = 0b00000001,\n    Tuesday   = 0b00000010,\n    Wednesday = 0b00000100,\n    Thursday  = 0b00001000,\n    Friday    = 0b00010000,\n    Saturday  = 0b00100000,\n    Sunday    = 0b01000000,\n\n    Weekdays = Monday | Tuesday | Wednesday | Thursday | Friday,\n    Weekends = Saturday | Sunday\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "[Flags]\npublic enum DaysOfWeek\n{\n    Monday    = 0b00000001,\n    Tuesday   = 0b00000010,\n    Wednesday = 0b00000100,\n    Thursday  = 0b00001000,\n    Friday    = 0b00010000,\n    Saturday  = 0b00100000,\n    Sunday    = 0b01000000,\n\n    Weekdays = Monday | Tuesday | Wednesday | Thursday | Friday,\n    Weekends = Saturday | Sunday\n}",
        "code_language": "C#"
      },
      {
        "id": "88b12f04-8d39-415b-b15c-85b1fa707d59",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550207040000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550207040000,
        "parent_id": "335c6b3d-f62c-4f56-8845-3c58b982ae84",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Binary literals",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}