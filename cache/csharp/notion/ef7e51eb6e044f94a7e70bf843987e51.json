{
  "ID": "ef7e51eb-6e04-4f94-a7e7-0bf843987e51",
  "Root": {
    "id": "ef7e51eb-6e04-4f94-a7e7-0bf843987e51",
    "alive": true,
    "content": [
      "139d3d1f-634e-4f21-95bd-0b8132787e8a",
      "65608319-8a28-4fee-a57a-086d110533f6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525062415,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549944300000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "implicit"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "id": "139d3d1f-634e-4f21-95bd-0b8132787e8a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525062415,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525062415,
        "parent_id": "ef7e51eb-6e04-4f94-a7e7-0bf843987e51",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "implicit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword is used to overload a conversion operator. For example, you may declare a "
            ],
            [
              "Fraction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class that should automatically be converted to a "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when needed, and that can be automatically converted from "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "implicit",
            "AttrFlags": 2
          },
          {
            "Text": " keyword is used to overload a conversion operator. For example, you may declare a "
          },
          {
            "Text": "Fraction",
            "AttrFlags": 2
          },
          {
            "Text": " class that should automatically be converted to a "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " when needed, and that can be automatically converted from "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "id": "65608319-8a28-4fee-a57a-086d110533f6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549944355679,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549944300000,
        "parent_id": "ef7e51eb-6e04-4f94-a7e7-0bf843987e51",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "class Fraction(int numerator, int denominator)\n{\n    public int Numerator { get; } = numerator;\n    public int Denominator { get; } = denominator;\n    // ...\n    public static implicit operator double(Fraction f)\n    {\n        return f.Numerator / (double) f.Denominator;\n    }\n    public static implicit operator Fraction(int i)\n    {\n        return new Fraction(i, 1);\n    }\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "class Fraction(int numerator, int denominator)\n{\n    public int Numerator { get; } = numerator;\n    public int Denominator { get; } = denominator;\n    // ...\n    public static implicit operator double(Fraction f)\n    {\n        return f.Numerator / (double) f.Denominator;\n    }\n    public static implicit operator Fraction(int i)\n    {\n        return new Fraction(i, 1);\n    }\n}\n",
        "code_language": "C#"
      }
    ],
    "title": "implicit",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}