{
  "ID": "dc37aa9b-9f03-46bb-8e38-2922b5b09eb8",
  "Root": {
    "alive": true,
    "content": [
      "867585a2-e8f6-4750-9103-7155e94b1fc1",
      "a5b1f5b7-7a33-49dd-9947-2235c0f7d76d",
      "5f63751c-5c37-4bb6-bc9b-bcbef4b1039d",
      "d27583a5-a58d-4ac2-a7a2-a43b746a8225"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528917388,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dc37aa9b-9f03-46bb-8e38-2922b5b09eb8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550215440000,
    "parent_id": "2b5c894c-d50a-418f-a811-3b61a23cdead",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dynamic loading and unloading of unmanaged DLLs"
        ]
      ]
    },
    "type": "page",
    "version": 15,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528917386,
        "id": "867585a2-e8f6-4750-9103-7155e94b1fc1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528917386,
        "parent_id": "dc37aa9b-9f03-46bb-8e38-2922b5b09eb8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When using the "
            ],
            [
              "DllImport",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " attribute you have to know the correct dll and method name at "
            ],
            [
              "compile time",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". If you want to be more flexible and decide at "
            ],
            [
              "runtime",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " which dll and methods to load, you can use the Windows API methods "
            ],
            [
              "LoadLibrary()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "GetProcAddress()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85).aspx"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "FreeLibrary()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This can be helpful if the library to use depends on runtime conditions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When using the "
          },
          {
            "Text": "DllImport",
            "AttrFlags": 2
          },
          {
            "Text": " attribute you have to know the correct dll and method name at "
          },
          {
            "Text": "compile time",
            "AttrFlags": 4
          },
          {
            "Text": ". If you want to be more flexible and decide at "
          },
          {
            "Text": "runtime",
            "AttrFlags": 4
          },
          {
            "Text": " which dll and methods to load, you can use the Windows API methods "
          },
          {
            "Text": "LoadLibrary()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "GetProcAddress()",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85).aspx"
          },
          {
            "Text": " and "
          },
          {
            "Text": "FreeLibrary()",
            "AttrFlags": 2
          },
          {
            "Text": ". This can be helpful if the library to use depends on runtime conditions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528917387,
        "id": "a5b1f5b7-7a33-49dd-9947-2235c0f7d76d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528917387,
        "parent_id": "dc37aa9b-9f03-46bb-8e38-2922b5b09eb8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pointer returned by "
            ],
            [
              "GetProcAddress()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be casted into a delegate using "
            ],
            [
              "Marshal.GetDelegateForFunctionPointer()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.getdelegateforfunctionpointer(v=vs.110).aspx"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pointer returned by "
          },
          {
            "Text": "GetProcAddress()",
            "AttrFlags": 2
          },
          {
            "Text": " can be casted into a delegate using "
          },
          {
            "Text": "Marshal.GetDelegateForFunctionPointer()",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.getdelegateforfunctionpointer(v=vs.110).aspx"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528917388,
        "id": "5f63751c-5c37-4bb6-bc9b-bcbef4b1039d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528917388,
        "parent_id": "dc37aa9b-9f03-46bb-8e38-2922b5b09eb8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following code sample demonstrates this with the "
            ],
            [
              "myDLL.dll",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from the previous examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following code sample demonstrates this with the "
          },
          {
            "Text": "myDLL.dll",
            "AttrFlags": 2
          },
          {
            "Text": " from the previous examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550215454500,
        "id": "d27583a5-a58d-4ac2-a7a2-a43b746a8225",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550215440000,
        "parent_id": "dc37aa9b-9f03-46bb-8e38-2922b5b09eb8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "class Program\n{\n    // import necessary API as shown in other examples\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern IntPtr LoadLibrary(string lib);\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern void FreeLibrary(IntPtr module);\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern IntPtr GetProcAddress(IntPtr module, string proc);\n\n    // declare a delegate with the required signature\n    private delegate int AddDelegate(int a, int b);\n\n    private static void Main()\n    {\n        // load the dll\n        IntPtr module = LoadLibrary(\"myDLL.dll\");\n        if (module == IntPtr.Zero) // error handling\n        {\n            Console.WriteLine($\"Could not load library: {Marshal.GetLastWin32Error()}\");\n            return;\n        }\n\n        // get a \"pointer\" to the method\n        IntPtr method = GetProcAddress(module, \"add\");\n        if (method == IntPtr.Zero) // error handling\n        {\n            Console.WriteLine($\"Could not load method: {Marshal.GetLastWin32Error()}\");\n            FreeLibrary(module);  // unload library\n            return;\n        }\n            \n        // convert \"pointer\" to delegate\n        AddDelegate add = (AddDelegate)Marshal.GetDelegateForFunctionPointer(method, typeof(AddDelegate));\n    \n        // use function    \n        int result = add(750, 300);\n        \n        // unload library   \n        FreeLibrary(module);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "class Program\n{\n    // import necessary API as shown in other examples\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern IntPtr LoadLibrary(string lib);\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern void FreeLibrary(IntPtr module);\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    public static extern IntPtr GetProcAddress(IntPtr module, string proc);\n\n    // declare a delegate with the required signature\n    private delegate int AddDelegate(int a, int b);\n\n    private static void Main()\n    {\n        // load the dll\n        IntPtr module = LoadLibrary(\"myDLL.dll\");\n        if (module == IntPtr.Zero) // error handling\n        {\n            Console.WriteLine($\"Could not load library: {Marshal.GetLastWin32Error()}\");\n            return;\n        }\n\n        // get a \"pointer\" to the method\n        IntPtr method = GetProcAddress(module, \"add\");\n        if (method == IntPtr.Zero) // error handling\n        {\n            Console.WriteLine($\"Could not load method: {Marshal.GetLastWin32Error()}\");\n            FreeLibrary(module);  // unload library\n            return;\n        }\n            \n        // convert \"pointer\" to delegate\n        AddDelegate add = (AddDelegate)Marshal.GetDelegateForFunctionPointer(method, typeof(AddDelegate));\n    \n        // use function    \n        int result = add(750, 300);\n        \n        // unload library   \n        FreeLibrary(module);\n    }\n}",
        "code_language": "C#"
      }
    ],
    "title": "Dynamic loading and unloading of unmanaged DLLs",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}