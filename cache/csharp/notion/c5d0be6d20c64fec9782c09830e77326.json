{
  "ID": "c5d0be6d-20c6-4fec-9782-c09830e77326",
  "Root": {
    "alive": true,
    "content": [
      "c0540526-a69f-4053-a7ab-67bf3901ec83",
      "47017b4b-b1bc-4c6b-bdef-f726157d637e",
      "c068b972-753c-4c9d-8540-e7ae42f0e324",
      "c8433789-fb10-4714-bea0-7725e0fd3414",
      "26b46a90-9465-4a8a-b1b2-6715e36b2c32",
      "d2a02a02-98c7-4d64-8490-e6be361d33a5",
      "449a1a05-db23-45ae-95a3-679f5c0f972a",
      "ef415445-de55-4bd8-a95b-d5177e9a1e4b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525970326,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550116560000,
    "parent_id": "3579f09a-ed6b-403d-b38a-ab7fa93d0309",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Declaring and Raising Events"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970322,
        "id": "c0540526-a69f-4053-a7ab-67bf3901ec83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525970322,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Declaring an Event"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Declaring an Event"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970325,
        "id": "47017b4b-b1bc-4c6b-bdef-f726157d637e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525970325,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can declare an event on any "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using the following syntax:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can declare an event on any "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": " using the following syntax:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970325,
        "id": "c068b972-753c-4c9d-8540-e7ae42f0e324",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550116500000,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class MyClass\n{\n    // Declares the event for MyClass\n    public event EventHandler MyEvent;\n\n\t\t// Raises the MyEvent event\n    public void RaiseEvent()\n    {\n        OnMyEvent();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public class MyClass\n{\n    // Declares the event for MyClass\n    public event EventHandler MyEvent;\n\n\t\t// Raises the MyEvent event\n    public void RaiseEvent()\n    {\n        OnMyEvent();\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970325,
        "id": "c8433789-fb10-4714-bea0-7725e0fd3414",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525970325,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is an expanded syntax for declaring events, where you hold a private instance of the event, and define a public instance using "
            ],
            [
              "add",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " accessors. The syntax is very similar to C# properties. In all cases, the syntax demonstrated above should be preferred, because the compiler emits code to help ensure that multiple threads can safely add and remove event handlers to the event on your class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is an expanded syntax for declaring events, where you hold a private instance of the event, and define a public instance using "
          },
          {
            "Text": "add",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "set",
            "AttrFlags": 2
          },
          {
            "Text": " accessors. The syntax is very similar to C# properties. In all cases, the syntax demonstrated above should be preferred, because the compiler emits code to help ensure that multiple threads can safely add and remove event handlers to the event on your class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970325,
        "id": "26b46a90-9465-4a8a-b1b2-6715e36b2c32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525970325,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Raising the Event"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Raising the Event"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970325,
        "id": "d2a02a02-98c7-4d64-8490-e6be361d33a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550116560000,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private void OnMyEvent()\n{\n    // Use a local for EventName, because another thread can modify the\n    // public EventName between when we check it for null, and when we\n    // raise the event.\n    var eventName = EventName;\n\n    // If eventName == null, then it means there are no event-subscribers,\n    // and therefore, we cannot raise the event.\n    if(eventName != null)\n        eventName(this, EventArgs.Empty);\n\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "private void OnMyEvent()\n{\n    // Use a local for EventName, because another thread can modify the\n    // public EventName between when we check it for null, and when we\n    // raise the event.\n    var eventName = EventName;\n\n    // If eventName == null, then it means there are no event-subscribers,\n    // and therefore, we cannot raise the event.\n    if(eventName != null)\n        eventName(this, EventArgs.Empty);\n\n}\n",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970326,
        "id": "449a1a05-db23-45ae-95a3-679f5c0f972a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525970326,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that events can only be raised by the declaring type. Clients can only subscribe/unsubscribe."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that events can only be raised by the declaring type. Clients can only subscribe/unsubscribe."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525970326,
        "id": "ef415445-de55-4bd8-a95b-d5177e9a1e4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525970326,
        "parent_id": "c5d0be6d-20c6-4fec-9782-c09830e77326",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For C# versions before 6.0, where "
            ],
            [
              "EventName?.Invoke",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not supported, it is a good practice to assign the event to a temporary variable before invocation, as shown in the example, which ensures thread-safety in cases where multiple threads execute the same code. Failing to do so may cause a "
            ],
            [
              "NullReferenceException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be thrown in certain cases where multiple threads are using the same object instance. In C# 6.0, the compiler emits code similar to that shown in the code example for C# 6."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For C# versions before 6.0, where "
          },
          {
            "Text": "EventName?.Invoke",
            "AttrFlags": 2
          },
          {
            "Text": " is not supported, it is a good practice to assign the event to a temporary variable before invocation, as shown in the example, which ensures thread-safety in cases where multiple threads execute the same code. Failing to do so may cause a "
          },
          {
            "Text": "NullReferenceException",
            "AttrFlags": 2
          },
          {
            "Text": " to be thrown in certain cases where multiple threads are using the same object instance. In C# 6.0, the compiler emits code similar to that shown in the code example for C# 6."
          }
        ]
      }
    ],
    "title": "Declaring and Raising Events",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}