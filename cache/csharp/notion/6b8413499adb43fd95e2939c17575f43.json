{
  "ID": "6b841349-9adb-43fd-95e2-939c17575f43",
  "Root": {
    "alive": true,
    "content": [
      "aaedb88d-8bb9-4dfc-9831-ccd445ad4a3c",
      "c5a51dc4-2791-4684-94b7-d449454ede30",
      "8ead8fdb-d3e8-4307-a79a-11badca10f12"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527790349,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6b841349-9adb-43fd-95e2-939c17575f43",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550205120000,
    "parent_id": "97d7d0bc-7873-4d24-b89e-70a0d8483664",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Assigning Event Handlers to a BackgroundWorker"
        ]
      ]
    },
    "type": "page",
    "version": 18,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527790345,
        "id": "aaedb88d-8bb9-4dfc-9831-ccd445ad4a3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527790345,
        "parent_id": "6b841349-9adb-43fd-95e2-939c17575f43",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once the instance of the BackgroundWorker has been declared, it must be given properties and event handlers for the tasks it performs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once the instance of the BackgroundWorker has been declared, it must be given properties and event handlers for the tasks it performs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527790348,
        "id": "c5a51dc4-2791-4684-94b7-d449454ede30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550205060000,
        "parent_id": "6b841349-9adb-43fd-95e2-939c17575f43",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "/* This is the backgroundworker's \"DoWork\" event handler. This \n   method is what will contain all the work you \n   wish to have your program perform without blocking the UI. */\n\nbgWorker.DoWork += bgWorker_DoWork;\n\n\n/*This is how the DoWork event method signature looks like:*/\nprivate void bgWorker_DoWork(object sender, DoWorkEventArgs e)\n{\n    // Work to be done here   \n    // ...\n    // To get a reference to the current Backgroundworker:\n    BackgroundWorker worker = sender as BackgroundWorker;\n    // The reference to the BackgroundWorker is often used to report progress\n    worker.ReportProgress(...);\n}\n\n/*This is the method that will be run once the BackgroundWorker has completed its tasks */\n\nbgWorker.RunWorkerCompleted += bgWorker_CompletedWork;\n\n/*This is how the RunWorkerCompletedEvent event method signature looks like:*/\nprivate void bgWorker_CompletedWork(object sender, RunWorkerCompletedEventArgs e)\n{\n    // Things to be done after the backgroundworker has finished\n}\n\n/* When you wish to have something occur when a change in progress \n occurs, (like the completion of a specific task) the \"ProgressChanged\" \n event handler is used. Note that ProgressChanged events may be invoked\n by calls to bgWorker.ReportProgress(...) only if bgWorker.WorkerReportsProgress\n is set to true.  */\n\n bgWorker.ProgressChanged += bgWorker_ProgressChanged;\n\n/*This is how the ProgressChanged event method signature looks like:*/\nprivate void bgWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)\n{\n    // Things to be done when a progress change has been reported\n\n    /* The ProgressChangedEventArgs gives access to a percentage,\n     allowing for easy reporting of how far along a process is*/\n    int progress = e.ProgressPercentage;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "/* This is the backgroundworker's \"DoWork\" event handler. This \n   method is what will contain all the work you \n   wish to have your program perform without blocking the UI. */\n\nbgWorker.DoWork += bgWorker_DoWork;\n\n\n/*This is how the DoWork event method signature looks like:*/\nprivate void bgWorker_DoWork(object sender, DoWorkEventArgs e)\n{\n    // Work to be done here   \n    // ...\n    // To get a reference to the current Backgroundworker:\n    BackgroundWorker worker = sender as BackgroundWorker;\n    // The reference to the BackgroundWorker is often used to report progress\n    worker.ReportProgress(...);\n}\n\n/*This is the method that will be run once the BackgroundWorker has completed its tasks */\n\nbgWorker.RunWorkerCompleted += bgWorker_CompletedWork;\n\n/*This is how the RunWorkerCompletedEvent event method signature looks like:*/\nprivate void bgWorker_CompletedWork(object sender, RunWorkerCompletedEventArgs e)\n{\n    // Things to be done after the backgroundworker has finished\n}\n\n/* When you wish to have something occur when a change in progress \n occurs, (like the completion of a specific task) the \"ProgressChanged\" \n event handler is used. Note that ProgressChanged events may be invoked\n by calls to bgWorker.ReportProgress(...) only if bgWorker.WorkerReportsProgress\n is set to true.  */\n\n bgWorker.ProgressChanged += bgWorker_ProgressChanged;\n\n/*This is how the ProgressChanged event method signature looks like:*/\nprivate void bgWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)\n{\n    // Things to be done when a progress change has been reported\n\n    /* The ProgressChangedEventArgs gives access to a percentage,\n     allowing for easy reporting of how far along a process is*/\n    int progress = e.ProgressPercentage;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550205120000,
        "id": "8ead8fdb-d3e8-4307-a79a-11badca10f12",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550205120000,
        "parent_id": "6b841349-9adb-43fd-95e2-939c17575f43",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Assigning Event Handlers to a BackgroundWorker",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}