{
  "ID": "3b1c739e-26fa-47b3-a20a-ea785c330289",
  "Root": {
    "id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
    "alive": true,
    "content": [
      "5887c71a-2fc6-4d3a-b92e-b26c87611d99",
      "55f58086-f68e-4597-843f-5dbfc2405125",
      "8f7685fe-c3e5-4443-89a9-d20c6d0aaa41",
      "07ca486d-1cb5-4158-8b8a-ea3abcff3193",
      "f1f0ed69-84b9-4221-95f7-4893b17db77c",
      "b6dfc903-9ba1-4572-ad10-ad931b56a141",
      "df6f2689-607c-4332-96d6-516da9f6ed5d",
      "f1c0165c-0191-402f-892a-01aa33902792"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525276439,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549612740000,
    "parent_id": "3367ad51-2d2f-44db-b5a0-5d201dfd7ee1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Inheritance Anti-patterns"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "id": "5887c71a-2fc6-4d3a-b92e-b26c87611d99",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276434,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525276434,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Improper Inheritance"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Improper Inheritance"
          }
        ]
      },
      {
        "id": "55f58086-f68e-4597-843f-5dbfc2405125",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276437,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525276437,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lets say there are 2 classes class "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has two features "
            ],
            [
              "Do1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Do2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " needs to use "
            ],
            [
              "Do1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but it doesn’t need "
            ],
            [
              "Do2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or needs feature that is equivalent to "
            ],
            [
              "Do2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but does something completely different."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lets say there are 2 classes class "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " has two features "
          },
          {
            "Text": "Do1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Do2",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " needs to use "
          },
          {
            "Text": "Do1",
            "AttrFlags": 2
          },
          {
            "Text": " from "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": ", but it doesn’t need "
          },
          {
            "Text": "Do2",
            "AttrFlags": 2
          },
          {
            "Text": " or needs feature that is equivalent to "
          },
          {
            "Text": "Do2",
            "AttrFlags": 2
          },
          {
            "Text": " but does something completely different."
          }
        ]
      },
      {
        "id": "8f7685fe-c3e5-4443-89a9-d20c6d0aaa41",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276438,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525276438,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bad way",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": make "
            ],
            [
              "Do2()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " virtual then override it in "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or just "
            ],
            [
              "throw Exception",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "Do2()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bad way",
            "AttrFlags": 1
          },
          {
            "Text": ": make "
          },
          {
            "Text": "Do2()",
            "AttrFlags": 2
          },
          {
            "Text": " on "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " virtual then override it in "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " or just "
          },
          {
            "Text": "throw Exception",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " for "
          },
          {
            "Text": "Do2()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "id": "07ca486d-1cb5-4158-8b8a-ea3abcff3193",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276438,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549612740000,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Bar : Foo\n{\n    public override void Do2()\n    {\n        //Does something completely different that you would expect Foo to do\n        //or simply throws new Exception \n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public class Bar : Foo\n{\n    public override void Do2()\n    {\n        //Does something completely different that you would expect Foo to do\n        //or simply throws new Exception \n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "f1f0ed69-84b9-4221-95f7-4893b17db77c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276438,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525276438,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Good way",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Good way",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "b6dfc903-9ba1-4572-ad10-ad931b56a141",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276439,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525276439,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Take out "
            ],
            [
              "Do1()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and put it into new class "
            ],
            [
              "Baz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then inherit both "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "Baz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and implement "
            ],
            [
              "Do2()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " separately"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Take out "
          },
          {
            "Text": "Do1()",
            "AttrFlags": 2
          },
          {
            "Text": " from "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " and put it into new class "
          },
          {
            "Text": "Baz",
            "AttrFlags": 2
          },
          {
            "Text": " then inherit both "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " from "
          },
          {
            "Text": "Baz",
            "AttrFlags": 2
          },
          {
            "Text": " and implement "
          },
          {
            "Text": "Do2()",
            "AttrFlags": 2
          },
          {
            "Text": " separately"
          }
        ]
      },
      {
        "id": "df6f2689-607c-4332-96d6-516da9f6ed5d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276439,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549612740000,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Baz\n{\n    public void Do1()\n    {\n        // magic\n    }\n}\n\npublic class Foo : Baz\n{\n    public void Do2()\n    {\n        // foo way\n    }\n}\n\npublic class Bar : Baz\n{\n    public void Do2()\n    {\n        // bar way or not have Do2 at all\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public class Baz\n{\n    public void Do1()\n    {\n        // magic\n    }\n}\n\npublic class Foo : Baz\n{\n    public void Do2()\n    {\n        // foo way\n    }\n}\n\npublic class Bar : Baz\n{\n    public void Do2()\n    {\n        // bar way or not have Do2 at all\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "f1c0165c-0191-402f-892a-01aa33902792",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525276439,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525276439,
        "parent_id": "3b1c739e-26fa-47b3-a20a-ea785c330289",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now why first example is bad and second is good: When developer nr2 has to do a change in "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", chances are he will break implementation of "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is now inseparable from "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When doing it by latter example "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " commonalty has been moved to "
            ],
            [
              "Baz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and they do not affect each other (like the shouldn’t)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now why first example is bad and second is good: When developer nr2 has to do a change in "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": ", chances are he will break implementation of "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " because "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " is now inseparable from "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": ". When doing it by latter example "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " commonalty has been moved to "
          },
          {
            "Text": "Baz",
            "AttrFlags": 2
          },
          {
            "Text": " and they do not affect each other (like the shouldn’t)."
          }
        ]
      }
    ],
    "title": "Inheritance Anti-patterns",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}