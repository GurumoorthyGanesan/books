{
  "ID": "efb748d8-d025-450e-a46e-e4c67a9c127c",
  "Root": {
    "id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
    "alive": true,
    "content": [
      "7b05074b-d3f8-4209-964a-0d0b37c0f482",
      "6a0a9726-a28c-40fb-8b68-8c55e3633a69",
      "c3059e7a-7a49-42f5-affb-adbefb66ac3d",
      "5c778084-afb7-4fa0-9bbb-8fa69ef962ee",
      "5a662990-bdf0-4fbc-aa88-9f3f48ebcb49",
      "9f41021b-d942-412b-bcf7-dc3f02ee1772",
      "cbe0c6be-bb9f-465b-88d9-b4dfd573d467",
      "d21faca7-cacb-4c84-85ff-cfaf0e5fcb50",
      "0ce01648-e2ba-4f6b-9a0e-37d7e5105067",
      "e19cbdd4-f8a3-4975-a034-344443d4246f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528365364,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550210940000,
    "parent_id": "d6ab87f3-3105-4532-8f9a-1b47bf70d308",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "PowerOf calculation"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "7b05074b-d3f8-4209-964a-0d0b37c0f482",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365357,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528365357,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calculating the power of a given number can be done recursively as well. Given a base number "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and exponent "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we need to make sure to split the problem in chunks by decreasing the exponent "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calculating the power of a given number can be done recursively as well. Given a base number "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " and exponent "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": ", we need to make sure to split the problem in chunks by decreasing the exponent "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "6a0a9726-a28c-40fb-8b68-8c55e3633a69",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365360,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528365360,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Theoretical Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Theoretical Example:"
          }
        ]
      },
      {
        "id": "c3059e7a-7a49-42f5-affb-adbefb66ac3d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365361,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528365361,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "2² = 2x2"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "2² = 2x2"
          }
        ]
      },
      {
        "id": "5c778084-afb7-4fa0-9bbb-8fa69ef962ee",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365361,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528365361,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "2³ = 2x2x2 or, 2³ = 2² x 2In there lies the secret of our recursive algorithm (see the code below). This is about taking the problem and separating it into smaller and simpler to solve chunks."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "2³ = 2x2x2 or, 2³ = 2² x 2In there lies the secret of our recursive algorithm (see the code below). This is about taking the problem and separating it into smaller and simpler to solve chunks."
          }
        ]
      },
      {
        "id": "5a662990-bdf0-4fbc-aa88-9f3f48ebcb49",
        "alive": true,
        "content": [
          "bf86822b-eda1-41e9-b6f8-b87863b49b65",
          "577ce6ad-d118-4a58-8338-9d3e45e2adb7"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365361,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549624200000,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "content_resolved": [
          {
            "id": "bf86822b-eda1-41e9-b6f8-b87863b49b65",
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1549528365361,
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1549624200000,
            "parent_id": "5a662990-bdf0-4fbc-aa88-9f3f48ebcb49",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "when the base number is 0, we have to be aware to return 0 as 0³ = 0 x 0 x 0"
                ]
              ]
            },
            "type": "bulleted_list",
            "version": 4,
            "inline_content": [
              {
                "Text": "when the base number is 0, we have to be aware to return 0 as 0³ = 0 x 0 x 0"
              }
            ]
          },
          {
            "id": "577ce6ad-d118-4a58-8338-9d3e45e2adb7",
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1549528365362,
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1549624200000,
            "parent_id": "5a662990-bdf0-4fbc-aa88-9f3f48ebcb49",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "when the exponent is 0, we have to be aware to always return 1, as this is a mathematical rule."
                ]
              ]
            },
            "type": "bulleted_list",
            "version": 4,
            "inline_content": [
              {
                "Text": "when the exponent is 0, we have to be aware to always return 1, as this is a mathematical rule."
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "Notes",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "9f41021b-d942-412b-bcf7-dc3f02ee1772",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365362,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528365362,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Code Example:"
          }
        ]
      },
      {
        "id": "cbe0c6be-bb9f-465b-88d9-b4dfd573d467",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365362,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550210940000,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public int CalcPowerOf(int b, int e) {\n    if (b == 0) { return 0; } // when base is 0, it doesn't matter, it will always return 0\n    if (e == 0) { return 1; } // math rule, exponent 0 always returns 1\n    return b * CalcPowerOf(b, e - 1); // actual recursive logic, where we split the problem, aka: 2³ = 2 * 2² etc..\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public int CalcPowerOf(int b, int e) {\n    if (b == 0) { return 0; } // when base is 0, it doesn't matter, it will always return 0\n    if (e == 0) { return 1; } // math rule, exponent 0 always returns 1\n    return b * CalcPowerOf(b, e - 1); // actual recursive logic, where we split the problem, aka: 2³ = 2 * 2² etc..\n}",
        "code_language": "C#"
      },
      {
        "id": "d21faca7-cacb-4c84-85ff-cfaf0e5fcb50",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365364,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528365364,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tests in xUnit to verify the logic: Although this is not necessary, it’s always good to write tests to verify your logic. I include those here written in the "
            ],
            [
              "xUnit framework",
              [
                [
                  "a",
                  "https://xunit.github.io/"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tests in xUnit to verify the logic: Although this is not necessary, it’s always good to write tests to verify your logic. I include those here written in the "
          },
          {
            "Text": "xUnit framework",
            "Link": "https://xunit.github.io/"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "0ce01648-e2ba-4f6b-9a0e-37d7e5105067",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528365364,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550210940000,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "[Theory]\n[MemberData(nameof(PowerOfTestData))]\npublic void PowerOfTest(int @base, int exponent, int expected) {\n    Assert.Equal(expected, CalcPowerOf(@base, exponent));\n}\n\npublic static IEnumerable\u003cobject[]\u003e PowerOfTestData() {\n    yield return new object[] { 0, 0, 0 };\n    yield return new object[] { 0, 1, 0 };\n    yield return new object[] { 2, 0, 1 };\n    yield return new object[] { 2, 1, 2 };\n    yield return new object[] { 2, 2, 4 };\n    yield return new object[] { 5, 2, 25 };\n    yield return new object[] { 5, 3, 125 };\n    yield return new object[] { 5, 4, 625 };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "[Theory]\n[MemberData(nameof(PowerOfTestData))]\npublic void PowerOfTest(int @base, int exponent, int expected) {\n    Assert.Equal(expected, CalcPowerOf(@base, exponent));\n}\n\npublic static IEnumerable\u003cobject[]\u003e PowerOfTestData() {\n    yield return new object[] { 0, 0, 0 };\n    yield return new object[] { 0, 1, 0 };\n    yield return new object[] { 2, 0, 1 };\n    yield return new object[] { 2, 1, 2 };\n    yield return new object[] { 2, 2, 4 };\n    yield return new object[] { 5, 2, 25 };\n    yield return new object[] { 5, 3, 125 };\n    yield return new object[] { 5, 4, 625 };\n}",
        "code_language": "C#"
      },
      {
        "id": "e19cbdd4-f8a3-4975-a034-344443d4246f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550210940000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550210940000,
        "parent_id": "efb748d8-d025-450e-a46e-e4c67a9c127c",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "PowerOf calculation",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}