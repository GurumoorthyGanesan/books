{
  "ID": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
  "Root": {
    "id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
    "alive": true,
    "content": [
      "24e47f22-9240-479e-a326-0792bbfd65aa",
      "6bb51699-ffa1-4626-8920-71b7ea83d330",
      "4915bf52-ce3b-4ac8-81ea-f2b8688aa3e0",
      "600a7040-1662-4cda-bc71-ae6e086d0ec2",
      "8d1c6874-a6b0-4d56-91b7-833b1b7e5efb",
      "358c0057-72a0-4ee8-95ab-c2b9375fa562",
      "6cb705f4-f1fa-4c62-9f38-53c70312c223",
      "958fa71a-32a1-4897-a1ac-695720015cfa",
      "554f884b-ed2b-4a36-92fe-1dc596333c0e",
      "7b74d47f-6349-4028-8170-af3f609c64b3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528203580,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550209860000,
    "parent_id": "50abd569-e57b-4eda-b70d-af5f13922aee",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "IComparableT as an Example of Implementing an Interface"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "id": "24e47f22-9240-479e-a326-0792bbfd65aa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203577,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203577,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interfaces can seem abstract until you seem them in practice. The "
            ],
            [
              "IComparable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "IComparable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are great examples of why interfaces can be helpful to us."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interfaces can seem abstract until you seem them in practice. The "
          },
          {
            "Text": "IComparable",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "IComparable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " are great examples of why interfaces can be helpful to us."
          }
        ]
      },
      {
        "id": "6bb51699-ffa1-4626-8920-71b7ea83d330",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203578,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203578,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say that in a program for a online store, we have a variety of items you can buy. Each item has a name, an ID number, and a price."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say that in a program for a online store, we have a variety of items you can buy. Each item has a name, an ID number, and a price."
          }
        ]
      },
      {
        "id": "4915bf52-ce3b-4ac8-81ea-f2b8688aa3e0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203578,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550209800000,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Item {\n    \n    public string name; // though public variables are generally bad practice,\n    public int idNumber; // to keep this example simple we will use them instead\n    public decimal price; // of a property.\n\n    // body omitted for brevity        \n\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "public class Item {\n    \n    public string name; // though public variables are generally bad practice,\n    public int idNumber; // to keep this example simple we will use them instead\n    public decimal price; // of a property.\n\n    // body omitted for brevity        \n\n}\n",
        "code_language": "C#"
      },
      {
        "id": "600a7040-1662-4cda-bc71-ae6e086d0ec2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203579,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203579,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We have our "
            ],
            [
              "Item",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s stored inside of a "
            ],
            [
              "List\u003cItem\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and in our program somewhere, we want to sort our list by ID number from smallest to largest. Instead of writing our own sorting algorithm, we can instead use the "
            ],
            [
              "Sort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method that "
            ],
            [
              "List\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " already has. However, as our "
            ],
            [
              "Item",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class is right now, there is no way for the "
            ],
            [
              "List\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to understand what order to sort the list. Here is where the "
            ],
            [
              "IComparable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface comes in."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We have our "
          },
          {
            "Text": "Item",
            "AttrFlags": 2
          },
          {
            "Text": "s stored inside of a "
          },
          {
            "Text": "List\u003cItem\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", and in our program somewhere, we want to sort our list by ID number from smallest to largest. Instead of writing our own sorting algorithm, we can instead use the "
          },
          {
            "Text": "Sort()",
            "AttrFlags": 2
          },
          {
            "Text": " method that "
          },
          {
            "Text": "List\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " already has. However, as our "
          },
          {
            "Text": "Item",
            "AttrFlags": 2
          },
          {
            "Text": " class is right now, there is no way for the "
          },
          {
            "Text": "List\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " to understand what order to sort the list. Here is where the "
          },
          {
            "Text": "IComparable",
            "AttrFlags": 2
          },
          {
            "Text": " interface comes in."
          }
        ]
      },
      {
        "id": "8d1c6874-a6b0-4d56-91b7-833b1b7e5efb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203579,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203579,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To correctly implement the "
            ],
            [
              "CompareTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, "
            ],
            [
              "CompareTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should return a positive number if the parameter is “less than” the current one, zero if they are equal, and a negative number if the parameter is “greater than”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To correctly implement the "
          },
          {
            "Text": "CompareTo",
            "AttrFlags": 2
          },
          {
            "Text": " method, "
          },
          {
            "Text": "CompareTo",
            "AttrFlags": 2
          },
          {
            "Text": " should return a positive number if the parameter is “less than” the current one, zero if they are equal, and a negative number if the parameter is “greater than”."
          }
        ]
      },
      {
        "id": "358c0057-72a0-4ee8-95ab-c2b9375fa562",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203579,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550209800000,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "Item apple = new Item();\napple.idNumber = 15;\nItem banana = new Item();\nbanana.idNumber = 4;\nItem cow = new Item();\ncow.idNumber = 15;\nItem diamond = new Item();\ndiamond.idNumber = 18;\n\nConsole.WriteLine(apple.CompareTo(banana)); // 11\nConsole.WriteLine(apple.CompareTo(cow)); // 0\nConsole.WriteLine(apple.CompareTo(diamond)); // -3"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "Item apple = new Item();\napple.idNumber = 15;\nItem banana = new Item();\nbanana.idNumber = 4;\nItem cow = new Item();\ncow.idNumber = 15;\nItem diamond = new Item();\ndiamond.idNumber = 18;\n\nConsole.WriteLine(apple.CompareTo(banana)); // 11\nConsole.WriteLine(apple.CompareTo(cow)); // 0\nConsole.WriteLine(apple.CompareTo(diamond)); // -3",
        "code_language": "C#"
      },
      {
        "id": "6cb705f4-f1fa-4c62-9f38-53c70312c223",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203579,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203579,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s the example "
            ],
            [
              "Item",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s implementation of the interface:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s the example "
          },
          {
            "Text": "Item",
            "AttrFlags": 2
          },
          {
            "Text": "’s implementation of the interface:"
          }
        ]
      },
      {
        "id": "958fa71a-32a1-4897-a1ac-695720015cfa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203579,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550209860000,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Item : IComparable\u003cItem\u003e {\n    \n    private string name;\n    private int idNumber;\n    private decimal price;\n\n    public int CompareTo(Item otherItem) {\n\n        return (this.idNumber - otherItem.idNumber);\n\n    }\n\n    // rest of code omitted for brevity    \n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public class Item : IComparable\u003cItem\u003e {\n    \n    private string name;\n    private int idNumber;\n    private decimal price;\n\n    public int CompareTo(Item otherItem) {\n\n        return (this.idNumber - otherItem.idNumber);\n\n    }\n\n    // rest of code omitted for brevity    \n\n}",
        "code_language": "C#"
      },
      {
        "id": "554f884b-ed2b-4a36-92fe-1dc596333c0e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203580,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203580,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On a surface level, the "
            ],
            [
              "CompareTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method in our item simply returns the difference in their ID numbers, but what does the above do in practice?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On a surface level, the "
          },
          {
            "Text": "CompareTo",
            "AttrFlags": 2
          },
          {
            "Text": " method in our item simply returns the difference in their ID numbers, but what does the above do in practice?"
          }
        ]
      },
      {
        "id": "7b74d47f-6349-4028-8170-af3f609c64b3",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528203580,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528203580,
        "parent_id": "007ad1d9-eea3-436a-83b8-3f2f46dfce2e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, when we call "
            ],
            [
              "Sort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on a "
            ],
            [
              "List\u003cItem\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, the "
            ],
            [
              "List",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will automatically call the "
            ],
            [
              "Item",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s "
            ],
            [
              "CompareTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method when it needs to determine what order to put objects in. Furthermore, besides "
            ],
            [
              "List\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", any other objects that need the ability to compare two objects will work with the "
            ],
            [
              "Item",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because we have defined the ability for two different "
            ],
            [
              "Item",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s to be compared with one another."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, when we call "
          },
          {
            "Text": "Sort()",
            "AttrFlags": 2
          },
          {
            "Text": " on a "
          },
          {
            "Text": "List\u003cItem\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " object, the "
          },
          {
            "Text": "List",
            "AttrFlags": 2
          },
          {
            "Text": " will automatically call the "
          },
          {
            "Text": "Item",
            "AttrFlags": 2
          },
          {
            "Text": "’s "
          },
          {
            "Text": "CompareTo",
            "AttrFlags": 2
          },
          {
            "Text": " method when it needs to determine what order to put objects in. Furthermore, besides "
          },
          {
            "Text": "List\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", any other objects that need the ability to compare two objects will work with the "
          },
          {
            "Text": "Item",
            "AttrFlags": 2
          },
          {
            "Text": " because we have defined the ability for two different "
          },
          {
            "Text": "Item",
            "AttrFlags": 2
          },
          {
            "Text": "s to be compared with one another."
          }
        ]
      }
    ],
    "title": "IComparableT as an Example of Implementing an Interface",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}