{
  "ID": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
  "Root": {
    "alive": true,
    "content": [
      "d8e7cebf-6c52-49bb-be77-664fd1d06d4e",
      "64d03cda-eae7-4a4d-8e68-c4937ce7f44d",
      "6845f666-e1d9-4476-bf7a-1c71ed71c642",
      "33fbeab3-8546-468d-bffe-a45c1f39d8bd",
      "18cd019f-9d2e-4141-b0ef-4cc78e07e77f",
      "fee0ba3a-09c3-48fc-a286-548e0e951fae",
      "0b9d8fa2-82ed-40ea-8657-6c3213926967",
      "3e3d0be5-51a2-4438-96b3-456dce5c8319",
      "dceb1b22-72c0-4526-b8c2-2ead4366538f",
      "84e427c7-e203-4872-acbe-24200dfed8f9",
      "8a176f7a-5d54-40bd-b6d3-f2552918659a",
      "819e5d07-e5a7-4a44-869b-5c233ddf918a",
      "0e72e578-8e83-4999-a0b3-0280fbb8577b",
      "ee0e626d-6373-4c4f-8949-b7ca93ae6291",
      "d65ac00d-2d41-458d-b944-2010d1e8933b",
      "4a895c8d-d063-4738-a32f-8d4219135d79",
      "889040c2-7efb-4488-8b24-3a42978a0723",
      "71380d2b-6262-440a-889e-9573e13cf83c",
      "fa124be0-954a-4813-b9b0-653aa3648b85",
      "0c916aad-efc7-49ee-8403-4753dd2e3568"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525007216,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549613760000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "const"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007210,
        "id": "d8e7cebf-6c52-49bb-be77-664fd1d06d4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007210,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used to represent values that "
            ],
            [
              "will never change",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " throughout the lifetime of the program. Its value is constant from "
            ],
            [
              "compile-time",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", as opposed to the "
            ],
            [
              "readonly",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/26/keywords/110/readonly"
                ]
              ]
            ],
            [
              " keyword, whose value is constant from run-time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " is used to represent values that "
          },
          {
            "Text": "will never change",
            "AttrFlags": 1
          },
          {
            "Text": " throughout the lifetime of the program. Its value is constant from "
          },
          {
            "Text": "compile-time",
            "AttrFlags": 1
          },
          {
            "Text": ", as opposed to the "
          },
          {
            "Text": "readonly",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/c%23/26/keywords/110/readonly"
          },
          {
            "Text": " keyword, whose value is constant from run-time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007211,
        "id": "64d03cda-eae7-4a4d-8e68-c4937ce7f44d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007211,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, since the speed of light will never change, we can store it in a constant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, since the speed of light will never change, we can store it in a constant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007212,
        "id": "6845f666-e1d9-4476-bf7a-1c71ed71c642",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007212,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const double c = 299792458;  // Speed of light\n\ndouble CalculateEnergy(double mass)\n{\n    return mass * c * c;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const double c = 299792458;  // Speed of light\n\ndouble CalculateEnergy(double mass)\n{\n    return mass * c * c;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007212,
        "id": "33fbeab3-8546-468d-bffe-a45c1f39d8bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007212,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is essentially the same as having "
            ],
            [
              "return mass * 299792458 * 299792458",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as the compiler will directly substitute "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with its constant value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is essentially the same as having "
          },
          {
            "Text": "return mass * 299792458 * 299792458",
            "AttrFlags": 2
          },
          {
            "Text": ", as the compiler will directly substitute "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " with its constant value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007212,
        "id": "18cd019f-9d2e-4141-b0ef-4cc78e07e77f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007212,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a result, "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " cannot be changed once declared. The following will produce a compile-time error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As a result, "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " cannot be changed once declared. The following will produce a compile-time error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007212,
        "id": "fee0ba3a-09c3-48fc-a286-548e0e951fae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007212,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const double c = 299792458;  // Speed of light \n\nc = 500;  //compile-time error"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const double c = 299792458;  // Speed of light \n\nc = 500;  //compile-time error",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007212,
        "id": "0b9d8fa2-82ed-40ea-8657-6c3213926967",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007212,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A constant can be prefixed with the same access modifiers as methods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A constant can be prefixed with the same access modifiers as methods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007212,
        "id": "3e3d0be5-51a2-4438-96b3-456dce5c8319",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007212,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private const double c = 299792458;\npublic const double c = 299792458;\ninternal const double c = 299792458;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private const double c = 299792458;\npublic const double c = 299792458;\ninternal const double c = 299792458;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007213,
        "id": "dceb1b22-72c0-4526-b8c2-2ead4366538f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007213,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " members are "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by nature. However using "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " explicitly is not permitted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " members are "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " by nature. However using "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " explicitly is not permitted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007213,
        "id": "84e427c7-e203-4872-acbe-24200dfed8f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007213,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also define method-local constants:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also define method-local constants:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007213,
        "id": "8a176f7a-5d54-40bd-b6d3-f2552918659a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007213,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double CalculateEnergy(double mass)\n{\n    const c = 299792458;\n    return mass * c * c;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double CalculateEnergy(double mass)\n{\n    const c = 299792458;\n    return mass * c * c;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007213,
        "id": "819e5d07-e5a7-4a44-869b-5c233ddf918a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007213,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These can not be prefixed with a "
            ],
            [
              "private",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "public",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, since they are implicitly local to the method they are defined in."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These can not be prefixed with a "
          },
          {
            "Text": "private",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "public",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, since they are implicitly local to the method they are defined in."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007213,
        "id": "0e72e578-8e83-4999-a0b3-0280fbb8577b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007213,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007214,
        "id": "ee0e626d-6373-4c4f-8949-b7ca93ae6291",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007214,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not all types can be used in a "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declaration. The value types that are allowed, are the pre-defined types "
            ],
            [
              "sbyte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "ushort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "uint",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "ulong",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "decimal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and all "
            ],
            [
              "enum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types. Trying to declare "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " members with other value types (such as "
            ],
            [
              "TimeSpan",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Guid",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") will fail at compile-time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not all types can be used in a "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " declaration. The value types that are allowed, are the pre-defined types "
          },
          {
            "Text": "sbyte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "ushort",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "uint",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "ulong",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "decimal",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": ", and all "
          },
          {
            "Text": "enum",
            "AttrFlags": 2
          },
          {
            "Text": " types. Trying to declare "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " members with other value types (such as "
          },
          {
            "Text": "TimeSpan",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Guid",
            "AttrFlags": 2
          },
          {
            "Text": ") will fail at compile-time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007215,
        "id": "d65ac00d-2d41-458d-b944-2010d1e8933b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007215,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the special pre-defined reference type "
            ],
            [
              "string",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", constants can be declared with any value. For all other reference types, constants can be declared but must always have the value "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the special pre-defined reference type "
          },
          {
            "Text": "string",
            "AttrFlags": 2
          },
          {
            "Text": ", constants can be declared with any value. For all other reference types, constants can be declared but must always have the value "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007215,
        "id": "4a895c8d-d063-4738-a32f-8d4219135d79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007215,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007215,
        "id": "889040c2-7efb-4488-8b24-3a42978a0723",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007215,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values are known at compile-time, they are allowed as "
            ],
            [
              "case",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " labels in a "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement, as standard arguments for optional parameters, as arguments to attribute specifications, and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " values are known at compile-time, they are allowed as "
          },
          {
            "Text": "case",
            "AttrFlags": 2
          },
          {
            "Text": " labels in a "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement, as standard arguments for optional parameters, as arguments to attribute specifications, and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007215,
        "id": "71380d2b-6262-440a-889e-9573e13cf83c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007215,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007215,
        "id": "fa124be0-954a-4813-b9b0-653aa3648b85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007215,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values are used across different assemblies, care must be taken with versioning. For example, if assembly A defines a "
            ],
            [
              "public const int MaxRetries = 3;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and assembly B uses that constant, then if the value of "
            ],
            [
              "MaxRetries",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is later changed to "
            ],
            [
              "5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in assembly A (which is then re-compiled), that change will not be effective in assembly B "
            ],
            [
              "unless",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " assembly B is also re-compiled (with a reference to the new version of A)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " values are used across different assemblies, care must be taken with versioning. For example, if assembly A defines a "
          },
          {
            "Text": "public const int MaxRetries = 3;",
            "AttrFlags": 2
          },
          {
            "Text": ", and assembly B uses that constant, then if the value of "
          },
          {
            "Text": "MaxRetries",
            "AttrFlags": 2
          },
          {
            "Text": " is later changed to "
          },
          {
            "Text": "5",
            "AttrFlags": 2
          },
          {
            "Text": " in assembly A (which is then re-compiled), that change will not be effective in assembly B "
          },
          {
            "Text": "unless",
            "AttrFlags": 4
          },
          {
            "Text": " assembly B is also re-compiled (with a reference to the new version of A)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525007216,
        "id": "0c916aad-efc7-49ee-8403-4753dd2e3568",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525007216,
        "parent_id": "6bf68d2d-e419-4f02-b8ef-5a36723bfb5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For that reason, if a value might change in future revisions of the program, and if the value needs to be publicly visible, do not declare that value "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " unless you know that all dependent assemblies will be re-compiled whenever something is changed. The alternative is using "
            ],
            [
              "static readonly",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "const",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is resolved at runtime."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For that reason, if a value might change in future revisions of the program, and if the value needs to be publicly visible, do not declare that value "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": " unless you know that all dependent assemblies will be re-compiled whenever something is changed. The alternative is using "
          },
          {
            "Text": "static readonly",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "const",
            "AttrFlags": 2
          },
          {
            "Text": ", which is resolved at runtime."
          }
        ]
      }
    ],
    "title": "const",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}