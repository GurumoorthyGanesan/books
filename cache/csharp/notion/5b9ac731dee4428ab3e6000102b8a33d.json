{
  "ID": "5b9ac731-dee4-428a-b3e6-000102b8a33d",
  "Root": {
    "id": "5b9ac731-dee4-428a-b3e6-000102b8a33d",
    "alive": true,
    "content": [
      "0528d8b4-0134-4e97-91aa-4c6143cc0b27",
      "6832a208-5fa2-4c82-9fc3-227bb3c879cd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525926229,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550113860000,
    "parent_id": "867a03bf-215a-491d-9311-455a673a589d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "More Pertinent Usage"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "id": "0528d8b4-0134-4e97-91aa-4c6143cc0b27",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525926226,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550113860000,
        "parent_id": "5b9ac731-dee4-428a-b3e6-000102b8a33d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public IEnumerable\u003cUser\u003e SelectUsers()\n{\n    // Execute an SQL query on a database.\n    using (IDataReader reader = this.Database.ExecuteReader(CommandType.Text, \"SELECT Id, Name FROM Users\"))\n    {\n        while (reader.Read())\n        {\n            int id = reader.GetInt32(0);\n            string name = reader.GetString(1);\n            yield return new User(id, name);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "public IEnumerable\u003cUser\u003e SelectUsers()\n{\n    // Execute an SQL query on a database.\n    using (IDataReader reader = this.Database.ExecuteReader(CommandType.Text, \"SELECT Id, Name FROM Users\"))\n    {\n        while (reader.Read())\n        {\n            int id = reader.GetInt32(0);\n            string name = reader.GetString(1);\n            yield return new User(id, name);\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "6832a208-5fa2-4c82-9fc3-227bb3c879cd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525926229,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525926229,
        "parent_id": "5b9ac731-dee4-428a-b3e6-000102b8a33d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are other ways of getting an "
            ],
            [
              "IEnumerable\u003cUser\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from an SQL database, of course – this just demonstrates that you can use "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to turn anything that has “sequence of elements” semantics into an "
            ],
            [
              "IEnumerable\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that someone can iterate over."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are other ways of getting an "
          },
          {
            "Text": "IEnumerable\u003cUser\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " from an SQL database, of course – this just demonstrates that you can use "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " to turn anything that has “sequence of elements” semantics into an "
          },
          {
            "Text": "IEnumerable\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " that someone can iterate over."
          }
        ]
      }
    ],
    "title": "More Pertinent Usage",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}