{
  "ID": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
  "Root": {
    "id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
    "alive": true,
    "content": [
      "e558c8e2-4c52-46b0-90c7-fa10e4e66219",
      "06ba5612-fc09-4989-9f68-16001f9901be",
      "d77b29d6-948e-4e76-9d9f-b5490e955774",
      "e5c7f76b-dbec-4af2-a085-a7b4b3228117",
      "f33d6ab2-b663-49c1-b9ad-f42383284566",
      "ecefa03a-b79f-4d54-b42e-0c14cddc2de4",
      "d023462f-62f5-4692-8f0d-ec83988cfcb5",
      "6aea09c3-d292-4a3f-948c-966a4da17b3d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525933712,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550114280000,
    "parent_id": "867a03bf-215a-491d-9311-455a673a589d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The difference between break and yield break"
        ]
      ]
    },
    "type": "page",
    "version": 18,
    "content_resolved": [
      {
        "id": "e558c8e2-4c52-46b0-90c7-fa10e4e66219",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525933706,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525933706,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "yield break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as opposed to "
            ],
            [
              "break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " might not be as obvious as one may think. There are lot of bad examples on the Internet where the usage of the two is interchangeable and doesn’t really demonstrate the difference."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "yield break",
            "AttrFlags": 2
          },
          {
            "Text": " as opposed to "
          },
          {
            "Text": "break",
            "AttrFlags": 2
          },
          {
            "Text": " might not be as obvious as one may think. There are lot of bad examples on the Internet where the usage of the two is interchangeable and doesn’t really demonstrate the difference."
          }
        ]
      },
      {
        "id": "06ba5612-fc09-4989-9f68-16001f9901be",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525933709,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525933709,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The confusing part is that both of the keywords (or key phrases) make sense only within loops ("
            ],
            [
              "foreach",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "…) So when to choose one over the other?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The confusing part is that both of the keywords (or key phrases) make sense only within loops ("
          },
          {
            "Text": "foreach",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": "…) So when to choose one over the other?"
          }
        ]
      },
      {
        "id": "d77b29d6-948e-4e76-9d9f-b5490e955774",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525933712,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525933712,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s important to realize that once you use the "
            ],
            [
              "yield",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx"
                ]
              ]
            ],
            [
              " keyword in a method you effectively turn the method into an "
            ],
            [
              "iterator",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/mt639331.aspx"
                ]
              ]
            ],
            [
              ". The only purpose of the such method is then to iterate over a finite or infinite collection and yield (output) its elements. Once the purpose is fulfilled, there’s no reason to continue method’s execution. Sometimes, it happens naturally with the last closing bracket of the method "
            ],
            [
              "\\}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But sometimes, you want to end the method prematurely. In a normal (non-iterating) method you would use the "
            ],
            [
              "return",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/1h3swy84.aspx"
                ]
              ]
            ],
            [
              " keyword. But you can’t use "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in an iterator, you have to use "
            ],
            [
              "yield break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, "
            ],
            [
              "yield break",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for an iterator is the same as "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for a standard method. Whereas, the "
            ],
            [
              "break",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/adbctzc4.aspx"
                ]
              ]
            ],
            [
              " statement just terminates the closest loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s important to realize that once you use the "
          },
          {
            "Text": "yield",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx"
          },
          {
            "Text": " keyword in a method you effectively turn the method into an "
          },
          {
            "Text": "iterator",
            "Link": "https://msdn.microsoft.com/en-us/library/mt639331.aspx"
          },
          {
            "Text": ". The only purpose of the such method is then to iterate over a finite or infinite collection and yield (output) its elements. Once the purpose is fulfilled, there’s no reason to continue method’s execution. Sometimes, it happens naturally with the last closing bracket of the method "
          },
          {
            "Text": "\\}",
            "AttrFlags": 2
          },
          {
            "Text": ". But sometimes, you want to end the method prematurely. In a normal (non-iterating) method you would use the "
          },
          {
            "Text": "return",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/1h3swy84.aspx"
          },
          {
            "Text": " keyword. But you can’t use "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " in an iterator, you have to use "
          },
          {
            "Text": "yield break",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, "
          },
          {
            "Text": "yield break",
            "AttrFlags": 2
          },
          {
            "Text": " for an iterator is the same as "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " for a standard method. Whereas, the "
          },
          {
            "Text": "break",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/adbctzc4.aspx"
          },
          {
            "Text": " statement just terminates the closest loop."
          }
        ]
      },
      {
        "id": "e5c7f76b-dbec-4af2-a085-a7b4b3228117",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525933712,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525933712,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s see some examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s see some examples:"
          }
        ]
      },
      {
        "id": "f33d6ab2-b663-49c1-b9ad-f42383284566",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525933712,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550114280000,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "/// Yields numbers from 0 to 9\n/// \u003c/summary\u003e\n/// \u003creturns\u003e{0,1,2,3,4,5,6,7,8,9}\u003c/returns\u003e\npublic static IEnumerable\u003cint\u003e YieldBreak()\n{\n    for (int i = 0; ; i++)\n    {\n        if (i \u003c 10)\n        {\n            // Yields a number\n            yield return i;\n        }\n        else\n        {\n            // Indicates that the iteration has ended, everything \n            // from this line on will be ignored\n            yield break;\n        }\n    }\n    yield return 10; // This will never get executed\n}"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "/// Yields numbers from 0 to 9\n/// \u003c/summary\u003e\n/// \u003creturns\u003e{0,1,2,3,4,5,6,7,8,9}\u003c/returns\u003e\npublic static IEnumerable\u003cint\u003e YieldBreak()\n{\n    for (int i = 0; ; i++)\n    {\n        if (i \u003c 10)\n        {\n            // Yields a number\n            yield return i;\n        }\n        else\n        {\n            // Indicates that the iteration has ended, everything \n            // from this line on will be ignored\n            yield break;\n        }\n    }\n    yield return 10; // This will never get executed\n}",
        "code_language": "C#"
      },
      {
        "id": "ecefa03a-b79f-4d54-b42e-0c14cddc2de4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550114280000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550114280000,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "type": "text",
        "version": 7
      },
      {
        "id": "d023462f-62f5-4692-8f0d-ec83988cfcb5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550114319192,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550114280000,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "/// \u003csummary\u003e\n/// Yields numbers from 0 to 10\n/// \u003c/summary\u003e\n/// \u003creturns\u003e{0,1,2,3,4,5,6,7,8,9,10}\u003c/returns\u003e\npublic static IEnumerable\u003cint\u003e Break()\n{\n    for (int i = 0; ; i++)\n    {\n        if (i \u003c 10)\n        {\n            // Yields a number\n            yield return i;\n        }\n        else\n        {\n            // Terminates just the loop\n            break;\n        }\n    }\n    // Execution continues\n    yield return 10;\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "/// \u003csummary\u003e\n/// Yields numbers from 0 to 10\n/// \u003c/summary\u003e\n/// \u003creturns\u003e{0,1,2,3,4,5,6,7,8,9,10}\u003c/returns\u003e\npublic static IEnumerable\u003cint\u003e Break()\n{\n    for (int i = 0; ; i++)\n    {\n        if (i \u003c 10)\n        {\n            // Yields a number\n            yield return i;\n        }\n        else\n        {\n            // Terminates just the loop\n            break;\n        }\n    }\n    // Execution continues\n    yield return 10;\n}\n",
        "code_language": "C#"
      },
      {
        "id": "6aea09c3-d292-4a3f-948c-966a4da17b3d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525933712,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550114280000,
        "parent_id": "46a251ac-55c0-4ecb-8df5-0a88a37ec4ac",
        "parent_table": "block",
        "type": "text",
        "version": 2
      }
    ],
    "title": "The difference between break and yield break",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}