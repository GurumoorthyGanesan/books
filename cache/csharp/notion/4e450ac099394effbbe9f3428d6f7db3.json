{
  "ID": "4e450ac0-9939-4eff-bbe9-f3428d6f7db3",
  "Root": {
    "id": "4e450ac0-9939-4eff-bbe9-f3428d6f7db3",
    "alive": true,
    "content": [
      "8e8baf19-7723-4eb2-9a62-6806614076d5",
      "7dcefc9a-f8a4-49a8-af1b-28218f0e5b05",
      "76199abd-7468-499a-9af8-49385c88e15c",
      "31c896cc-9016-4a91-9b0c-58db83f9f275"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528449245,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549621980000,
    "parent_id": "eee4787e-f48e-4f42-9f08-9a1d031866f9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Explicit Casting"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "id": "8e8baf19-7723-4eb2-9a62-6806614076d5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528449244,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528449244,
        "parent_id": "4e450ac0-9939-4eff-bbe9-f3428d6f7db3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you know that a value is of a specific type, you can explicitly cast it to that type in order to use it in a context where that type is needed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you know that a value is of a specific type, you can explicitly cast it to that type in order to use it in a context where that type is needed."
          }
        ]
      },
      {
        "id": "7dcefc9a-f8a4-49a8-af1b-28218f0e5b05",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528449244,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549621980000,
        "parent_id": "4e450ac0-9939-4eff-bbe9-f3428d6f7db3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "object value = -1;\nint number = (int) value;\nConsole.WriteLine(Math.Abs(number));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "object value = -1;\nint number = (int) value;\nConsole.WriteLine(Math.Abs(number));",
        "code_language": "C#"
      },
      {
        "id": "76199abd-7468-499a-9af8-49385c88e15c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528449244,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528449244,
        "parent_id": "4e450ac0-9939-4eff-bbe9-f3428d6f7db3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we tried passing "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directly to "
            ],
            [
              "Math.Abs()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we would get a compile-time exception because "
            ],
            [
              "Math.Abs()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " doesn’t have an overload that takes an "
            ],
            [
              "object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we tried passing "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " directly to "
          },
          {
            "Text": "Math.Abs()",
            "AttrFlags": 2
          },
          {
            "Text": ", we would get a compile-time exception because "
          },
          {
            "Text": "Math.Abs()",
            "AttrFlags": 2
          },
          {
            "Text": " doesn’t have an overload that takes an "
          },
          {
            "Text": "object",
            "AttrFlags": 2
          },
          {
            "Text": " as a parameter."
          }
        ]
      },
      {
        "id": "31c896cc-9016-4a91-9b0c-58db83f9f275",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528449245,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528449245,
        "parent_id": "4e450ac0-9939-4eff-bbe9-f3428d6f7db3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could not be cast to an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then the second line in this example would throw an "
            ],
            [
              "InvalidCastException",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " could not be cast to an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", then the second line in this example would throw an "
          },
          {
            "Text": "InvalidCastException",
            "AttrFlags": 2
          }
        ]
      }
    ],
    "title": "Explicit Casting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}