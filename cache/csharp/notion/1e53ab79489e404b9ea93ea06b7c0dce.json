{
  "ID": "1e53ab79-489e-404b-9ea9-3ea06b7c0dce",
  "Root": {
    "alive": true,
    "content": [
      "de850773-b1f9-49bd-8592-87933d98d200",
      "7b707419-32b9-4009-97bf-5503f379e876",
      "cd2958ad-cde4-4ecb-b4fc-8263a9e74bcf",
      "eb7b4c38-10b6-4fab-a487-e1376b192c8e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525144896,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1e53ab79-489e-404b-9ea9-3ea06b7c0dce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550044080000,
    "parent_id": "6bc8984c-0999-42e1-a500-ace83190c171",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Configuration reader with generic type casting"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525144893,
        "id": "de850773-b1f9-49bd-8592-87933d98d200",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549613640000,
        "parent_id": "1e53ab79-489e-404b-9ea9-3ea06b7c0dce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "    /// \u003csummary\u003e\n    /// Read configuration values from app.config and convert to specified types\n    /// \u003c/summary\u003e\n    public static class ConfigurationReader\n    {\n        /// \u003csummary\u003e\n        /// Get value from AppSettings by key, convert to Type of default value or typeparam T and return\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"strKey\"\u003ekey to find value from AppSettings\u003c/param\u003e\n        /// \u003cparam name=\"defaultValue\"\u003edefaultValue will be returned in case of value is null or any exception occures\u003c/param\u003e\n        /// \u003creturns\u003eAppSettings value against key is returned in Type of default value or given as typeparam T\u003c/returns\u003e\n        public static T GetConfigKeyValue\u003cT\u003e(string strKey, T defaultValue)\n        {\n            var result = defaultValue;\n            try\n            {\n                if (ConfigurationManager.AppSettings[strKey] != null)\n                    result = (T)Convert.ChangeType(ConfigurationManager.AppSettings[strKey], typeof(T));\n            }\n            catch (Exception ex)\n            {\n                Tracer.Current.LogException(ex);\n            }\n\n            return result;\n        }\n        /// \u003csummary\u003e\n        /// Get value from AppSettings by key, convert to Type of default value or typeparam T and return\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"strKey\"\u003ekey to find value from AppSettings\u003c/param\u003e\n        /// \u003creturns\u003eAppSettings value against key is returned in Type given as typeparam T\u003c/returns\u003e\n        public static T GetConfigKeyValue\u003cT\u003e(string strKey)\n        {\n            return GetConfigKeyValue(strKey, default(T));\n        }\n\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "    /// \u003csummary\u003e\n    /// Read configuration values from app.config and convert to specified types\n    /// \u003c/summary\u003e\n    public static class ConfigurationReader\n    {\n        /// \u003csummary\u003e\n        /// Get value from AppSettings by key, convert to Type of default value or typeparam T and return\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"strKey\"\u003ekey to find value from AppSettings\u003c/param\u003e\n        /// \u003cparam name=\"defaultValue\"\u003edefaultValue will be returned in case of value is null or any exception occures\u003c/param\u003e\n        /// \u003creturns\u003eAppSettings value against key is returned in Type of default value or given as typeparam T\u003c/returns\u003e\n        public static T GetConfigKeyValue\u003cT\u003e(string strKey, T defaultValue)\n        {\n            var result = defaultValue;\n            try\n            {\n                if (ConfigurationManager.AppSettings[strKey] != null)\n                    result = (T)Convert.ChangeType(ConfigurationManager.AppSettings[strKey], typeof(T));\n            }\n            catch (Exception ex)\n            {\n                Tracer.Current.LogException(ex);\n            }\n\n            return result;\n        }\n        /// \u003csummary\u003e\n        /// Get value from AppSettings by key, convert to Type of default value or typeparam T and return\n        /// \u003c/summary\u003e\n        /// \u003ctypeparam name=\"T\"\u003etypeparam is the type in which value will be returned, it could be any type eg. int, string, bool, decimal etc.\u003c/typeparam\u003e\n        /// \u003cparam name=\"strKey\"\u003ekey to find value from AppSettings\u003c/param\u003e\n        /// \u003creturns\u003eAppSettings value against key is returned in Type given as typeparam T\u003c/returns\u003e\n        public static T GetConfigKeyValue\u003cT\u003e(string strKey)\n        {\n            return GetConfigKeyValue(strKey, default(T));\n        }\n\n    }",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525144896,
        "id": "7b707419-32b9-4009-97bf-5503f379e876",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525144896,
        "parent_id": "1e53ab79-489e-404b-9ea9-3ea06b7c0dce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usages:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usages:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550044132791,
        "id": "cd2958ad-cde4-4ecb-b4fc-8263a9e74bcf",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550044080000,
        "parent_id": "1e53ab79-489e-404b-9ea9-3ea06b7c0dce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var timeOut = ConfigurationReader.GetConfigKeyValue(\"RequestTimeout\", 2000);\nvar url = ConfigurationReader.GetConfigKeyValue(\"URL\", \"www.someurl.com\");\nvar enabled = ConfigurationReader.GetConfigKeyValue(\"IsEnabled\", false);"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "var timeOut = ConfigurationReader.GetConfigKeyValue(\"RequestTimeout\", 2000);\nvar url = ConfigurationReader.GetConfigKeyValue(\"URL\", \"www.someurl.com\");\nvar enabled = ConfigurationReader.GetConfigKeyValue(\"IsEnabled\", false);",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550044080000,
        "id": "eb7b4c38-10b6-4fab-a487-e1376b192c8e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550044080000,
        "parent_id": "1e53ab79-489e-404b-9ea9-3ea06b7c0dce",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Configuration reader with generic type casting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}