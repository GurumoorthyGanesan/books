{
  "ID": "4345acc1-f827-4655-9f25-8c23527ef135",
  "Root": {
    "id": "4345acc1-f827-4655-9f25-8c23527ef135",
    "alive": true,
    "content": [
      "4615f148-6f38-4212-b7b9-80b36d062996",
      "7deb222d-5d7e-44da-ad84-2df777065af8",
      "2116aa61-3867-4f0e-9a78-2e71d1d19206",
      "034c1b65-e0d4-4804-bb09-3c9061900bbd",
      "9e39102e-454f-40b2-ad28-7fc91cd414f9",
      "137f5b65-059e-4dac-ae4e-93e63aa2127a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549528756435,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549627500000,
    "parent_id": "089ce30d-080a-4f0a-a239-88f82ba26f45",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dynamic member lookup"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "id": "4615f148-6f38-4212-b7b9-80b36d062996",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528756432,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528756432,
        "parent_id": "4345acc1-f827-4655-9f25-8c23527ef135",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A new pseudo-type "
            ],
            [
              "dynamic",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is introduced into the C# type system. It is treated as "
            ],
            [
              "System.Object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but in addition, any member access (method call, field, property, or indexer access, or a delegate invocation) or application of an operator on a value of such type is permitted without any type checking, and its resolution is postponed until run-time. This is known as duck typing or late binding. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A new pseudo-type "
          },
          {
            "Text": "dynamic",
            "AttrFlags": 2
          },
          {
            "Text": " is introduced into the C# type system. It is treated as "
          },
          {
            "Text": "System.Object",
            "AttrFlags": 2
          },
          {
            "Text": ", but in addition, any member access (method call, field, property, or indexer access, or a delegate invocation) or application of an operator on a value of such type is permitted without any type checking, and its resolution is postponed until run-time. This is known as duck typing or late binding. For example:"
          }
        ]
      },
      {
        "id": "7deb222d-5d7e-44da-ad84-2df777065af8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528756433,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549627500000,
        "parent_id": "4345acc1-f827-4655-9f25-8c23527ef135",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// Returns the value of Length property or field of any object\nint GetLength(dynamic obj)\n{\n    return obj.Length;\n}\n  \nGetLength(\"Hello, world\");        // a string has a Length property,\nGetLength(new int[] { 1, 2, 3 }); // and so does an array,\nGetLength(42);                    // but not an integer - an exception will be thrown\n                                  // in GetLength method at run-time"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Returns the value of Length property or field of any object\nint GetLength(dynamic obj)\n{\n    return obj.Length;\n}\n  \nGetLength(\"Hello, world\");        // a string has a Length property,\nGetLength(new int[] { 1, 2, 3 }); // and so does an array,\nGetLength(42);                    // but not an integer - an exception will be thrown\n                                  // in GetLength method at run-time",
        "code_language": "C#"
      },
      {
        "id": "2116aa61-3867-4f0e-9a78-2e71d1d19206",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528756433,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528756433,
        "parent_id": "4345acc1-f827-4655-9f25-8c23527ef135",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, dynamic type is used to avoid more verbose Reflection. It still uses Reflection under the hood, but it’s usually faster thanks to caching."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, dynamic type is used to avoid more verbose Reflection. It still uses Reflection under the hood, but it’s usually faster thanks to caching."
          }
        ]
      },
      {
        "id": "034c1b65-e0d4-4804-bb09-3c9061900bbd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528756433,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528756433,
        "parent_id": "4345acc1-f827-4655-9f25-8c23527ef135",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This feature is primarily targeted at interoperability with dynamic languages."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This feature is primarily targeted at interoperability with dynamic languages."
          }
        ]
      },
      {
        "id": "9e39102e-454f-40b2-ad28-7fc91cd414f9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528756433,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549627500000,
        "parent_id": "4345acc1-f827-4655-9f25-8c23527ef135",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// Initialize the engine and execute a file\nvar runtime = ScriptRuntime.CreateFromConfiguration();\ndynamic globals = runtime.Globals;\nruntime.ExecuteFile(\"Calc.rb\");\n\n// Use Calc type from Ruby\ndynamic calc = globals.Calc.@new();\ncalc.valueA = 1337;\ncalc.valueB = 666;\ndynamic answer = calc.Calculate();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Initialize the engine and execute a file\nvar runtime = ScriptRuntime.CreateFromConfiguration();\ndynamic globals = runtime.Globals;\nruntime.ExecuteFile(\"Calc.rb\");\n\n// Use Calc type from Ruby\ndynamic calc = globals.Calc.@new();\ncalc.valueA = 1337;\ncalc.valueB = 666;\ndynamic answer = calc.Calculate();",
        "code_language": "C#"
      },
      {
        "id": "137f5b65-059e-4dac-ae4e-93e63aa2127a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549528756435,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549528756435,
        "parent_id": "4345acc1-f827-4655-9f25-8c23527ef135",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dynamic type has applications even in mostly statically typed code, for example it makes "
            ],
            [
              "double dispatch",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Double_dispatch"
                ]
              ]
            ],
            [
              " posible without implementing Visitor pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dynamic type has applications even in mostly statically typed code, for example it makes "
          },
          {
            "Text": "double dispatch",
            "Link": "https://en.wikipedia.org/wiki/Double_dispatch"
          },
          {
            "Text": " posible without implementing Visitor pattern."
          }
        ]
      }
    ],
    "title": "Dynamic member lookup",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}