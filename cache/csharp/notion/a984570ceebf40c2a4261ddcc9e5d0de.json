{
  "ID": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
  "Root": {
    "id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
    "alive": true,
    "content": [
      "c48130a1-ae41-443a-83e0-f68a92d9ffa4",
      "17bb334f-fe81-4dd4-af0b-b8b3aba01845",
      "2b978b91-bbb9-465f-ad54-c72d80b90896",
      "5cdd081f-e09d-4227-85ab-3ae4cd3cb0dd",
      "0dbd5149-4f61-4371-80ba-c4d1fb5073b4",
      "de8e7180-5fec-403c-9fc7-2ad8210e284c",
      "088c147f-1eb9-4921-a1d2-9e61ca767559",
      "504c8e56-72ec-4d59-9302-25007b391eac"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549529576372,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550220420000,
    "parent_id": "7f7fdd88-2767-47f0-97a2-2dab8a624086",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Async Await"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "id": "c48130a1-ae41-443a-83e0-f68a92d9ffa4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576369,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529576369,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are two operators that are intended to improve performance by freeing up Threads and waiting for operations to complete before moving forward."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " are two operators that are intended to improve performance by freeing up Threads and waiting for operations to complete before moving forward."
          }
        ]
      },
      {
        "id": "17bb334f-fe81-4dd4-af0b-b8b3aba01845",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529576371,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s an example of getting a string before returning it’s length:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s an example of getting a string before returning it’s length:"
          }
        ]
      },
      {
        "id": "2b978b91-bbb9-465f-ad54-c72d80b90896",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576371,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550220420000,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "//This method is async because:\n//1. It has async and Task or Task\u003cT\u003e as modifiers\n//2. It ends in \"Async\"\nasync Task\u003cint\u003e GetStringLengthAsync(string URL){\n    HttpClient client = new HttpClient();\n    //Sends a GET request and returns the response body as a string\n    Task\u003cstring\u003e getString = client.GetStringAsync(URL);\n    //Waits for getString to complete before returning its length\n    string contents = await getString;\n    return contents.Length;\n}\n\nprivate async void doProcess(){\n    int length = await GetStringLengthAsync(\"http://example.com/\");\n    //Waits for all the above to finish before printing the number\n    Console.WriteLine(length);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "//This method is async because:\n//1. It has async and Task or Task\u003cT\u003e as modifiers\n//2. It ends in \"Async\"\nasync Task\u003cint\u003e GetStringLengthAsync(string URL){\n    HttpClient client = new HttpClient();\n    //Sends a GET request and returns the response body as a string\n    Task\u003cstring\u003e getString = client.GetStringAsync(URL);\n    //Waits for getString to complete before returning its length\n    string contents = await getString;\n    return contents.Length;\n}\n\nprivate async void doProcess(){\n    int length = await GetStringLengthAsync(\"http://example.com/\");\n    //Waits for all the above to finish before printing the number\n    Console.WriteLine(length);\n}",
        "code_language": "C#"
      },
      {
        "id": "5cdd081f-e09d-4227-85ab-3ae4cd3cb0dd",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576372,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529576372,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s another example of downloading a file and handling what happens when it’s progress has changed and when the download completes (there are two ways to do this):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s another example of downloading a file and handling what happens when it’s progress has changed and when the download completes (there are two ways to do this):"
          }
        ]
      },
      {
        "id": "0dbd5149-4f61-4371-80ba-c4d1fb5073b4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576372,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529576372,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method 1:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method 1:"
          }
        ]
      },
      {
        "id": "de8e7180-5fec-403c-9fc7-2ad8210e284c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576372,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550220420000,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "//This one using async event handlers, but not async coupled with await\nprivate void DownloadAndUpdateAsync(string uri, string DownloadLocation){\n    WebClient web = new WebClient();\n    //Assign the event handler\n    web.DownloadProgressChanged += new DownloadProgressChangedEventHandler(ProgressChanged);\n    web.DownloadFileCompleted += new AsyncCompletedEventHandler(FileCompleted);\n    //Download the file asynchronously\n    web.DownloadFileAsync(new Uri(uri), DownloadLocation);\n}\n\n//event called for when download progress has changed\nprivate void ProgressChanged(object sender, DownloadProgressChangedEventArgs e){\n    //example code\n    int i = 0;\n    i++;\n    doSomething();\n}\n\n//event called for when download has finished\nprivate void FileCompleted(object sender, AsyncCompletedEventArgs e){\n    Console.WriteLine(\"Completed!\")\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "//This one using async event handlers, but not async coupled with await\nprivate void DownloadAndUpdateAsync(string uri, string DownloadLocation){\n    WebClient web = new WebClient();\n    //Assign the event handler\n    web.DownloadProgressChanged += new DownloadProgressChangedEventHandler(ProgressChanged);\n    web.DownloadFileCompleted += new AsyncCompletedEventHandler(FileCompleted);\n    //Download the file asynchronously\n    web.DownloadFileAsync(new Uri(uri), DownloadLocation);\n}\n\n//event called for when download progress has changed\nprivate void ProgressChanged(object sender, DownloadProgressChangedEventArgs e){\n    //example code\n    int i = 0;\n    i++;\n    doSomething();\n}\n\n//event called for when download has finished\nprivate void FileCompleted(object sender, AsyncCompletedEventArgs e){\n    Console.WriteLine(\"Completed!\")\n}",
        "code_language": "C#"
      },
      {
        "id": "088c147f-1eb9-4921-a1d2-9e61ca767559",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549529576372,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549529576372,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method 2:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method 2:"
          }
        ]
      },
      {
        "id": "504c8e56-72ec-4d59-9302-25007b391eac",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550220469189,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550220420000,
        "parent_id": "a984570c-eebf-40c2-a426-1ddcc9e5d0de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "//however, this one does\n//Refer to first example on why this method is async\nprivate void DownloadAndUpdateAsync(string uri, string DownloadLocation){\n    WebClient web = new WebClient();\n    //Assign the event handler\n    web.DownloadProgressChanged += new DownloadProgressChangedEventHandler(ProgressChanged);\n    //Download the file async\n    web.DownloadFileAsync(new Uri(uri), DownloadLocation);\n    //Notice how there is no complete event, instead we're using techniques from the first example\n}\nprivate void ProgressChanged(object sender, DownloadProgressChangedEventArgs e){\n    int i = 0;\n    i++;\n    doSomething();\n}\nprivate void doProcess(){\n    //Wait for the download to finish\n    await DownloadAndUpdateAsync(new Uri(\"http://example.com/file\"))\n    doSomething();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "//however, this one does\n//Refer to first example on why this method is async\nprivate void DownloadAndUpdateAsync(string uri, string DownloadLocation){\n    WebClient web = new WebClient();\n    //Assign the event handler\n    web.DownloadProgressChanged += new DownloadProgressChangedEventHandler(ProgressChanged);\n    //Download the file async\n    web.DownloadFileAsync(new Uri(uri), DownloadLocation);\n    //Notice how there is no complete event, instead we're using techniques from the first example\n}\nprivate void ProgressChanged(object sender, DownloadProgressChangedEventArgs e){\n    int i = 0;\n    i++;\n    doSomething();\n}\nprivate void doProcess(){\n    //Wait for the download to finish\n    await DownloadAndUpdateAsync(new Uri(\"http://example.com/file\"))\n    doSomething();\n}",
        "code_language": "C#"
      }
    ],
    "title": "Async Await",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}