{
  "ID": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
  "Root": {
    "alive": true,
    "content": [
      "8b6a1c2d-021e-4063-8ec4-202e530a698d",
      "76242ef3-9478-4812-b76d-eda84511c013",
      "d0a674b3-276d-4df0-97de-a94c1bbcb00d",
      "bc473ea3-184a-423d-9c64-2d5ef26cf204",
      "5275b303-32eb-4615-bbeb-e714741caa0b",
      "957560d6-3d29-4669-80f8-8411c85c5617",
      "31543b72-a2c9-496e-8156-44bedf87d9b8",
      "c62d0719-39df-4250-a133-a267c3043658",
      "25c04e7d-bce5-4c9f-aa68-88174e8b2e0d",
      "e2c45d77-f02d-4602-986d-7f9ba4e72051",
      "4b4d186f-71ee-4963-9788-b55638190f2d",
      "5faea810-95e9-421d-895f-44ede2ba4cc6",
      "62c53e3f-e899-4812-93ca-b2ad623069c6",
      "6c80c716-546a-40ba-ac3b-9431b56622c4",
      "ef9ec137-b638-423b-803d-ce52364e31f5",
      "afd1b0be-2b27-431b-94a4-248a4d8e9402",
      "c39712b1-d679-44c2-9ced-b79b7405bd9c",
      "6b83f9dd-6cd9-4132-9970-3dd11f1a36b2",
      "c9368386-63cd-48e2-85b0-8c0d9b6ed240",
      "17460bb9-63ec-45ed-a2df-d774c6b7f8db",
      "336e31e4-ad6c-402b-b143-a9123ac9891c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525477556,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549611660000,
    "parent_id": "9ff3cc78-9f6a-4238-a0a8-e9d9c0209cf7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Best Practices"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477549,
        "id": "8b6a1c2d-021e-4063-8ec4-202e530a698d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477549,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Cheatsheet"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Cheatsheet"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477552,
        "id": "76242ef3-9478-4812-b76d-eda84511c013",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477552,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DO| DON’T |\n—— | —— |\nControl flow with control statements | Control flow with exceptions|\nKeep track of ignored (absorbed) exception by logging|Ignore exception|\nRepeat exception by using "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "|Re-throw exception - "
            ],
            [
              "throw new ArgumentNullException()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "throw ex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nThrow predefined system exceptions| Throw custom exceptions similar to predefined system exceptions|\nThrow custom/predefined exception if it is crucial to application logic | Throw custom/predefined exceptions to state a warning in flow|\nCatch exceptions that you want to handle| Catch every exception |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "DO| DON’T |\n—— | —— |\nControl flow with control statements | Control flow with exceptions|\nKeep track of ignored (absorbed) exception by logging|Ignore exception|\nRepeat exception by using "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": "|Re-throw exception - "
          },
          {
            "Text": "throw new ArgumentNullException()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "throw ex",
            "AttrFlags": 2
          },
          {
            "Text": " |\nThrow predefined system exceptions| Throw custom exceptions similar to predefined system exceptions|\nThrow custom/predefined exception if it is crucial to application logic | Throw custom/predefined exceptions to state a warning in flow|\nCatch exceptions that you want to handle| Catch every exception |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477552,
        "id": "d0a674b3-276d-4df0-97de-a94c1bbcb00d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477552,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DO NOT manage business logic with exceptions."
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "DO NOT manage business logic with exceptions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477552,
        "id": "bc473ea3-184a-423d-9c64-2d5ef26cf204",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477552,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Flow control should NOT be done by exceptions. Use conditional statements instead. If a control can be done with "
            ],
            [
              "if-else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement clearly, don’t use exceptions because it reduces readability and performance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Flow control should NOT be done by exceptions. Use conditional statements instead. If a control can be done with "
          },
          {
            "Text": "if-else",
            "AttrFlags": 2
          },
          {
            "Text": " statement clearly, don’t use exceptions because it reduces readability and performance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477552,
        "id": "5275b303-32eb-4615-bbeb-e714741caa0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477552,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following snippet by Mr. Bad Practices:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following snippet by Mr. Bad Practices:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477552,
        "id": "957560d6-3d29-4669-80f8-8411c85c5617",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611660000,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// This is a snippet example for DO NOT\nobject myObject;\nvoid DoingSomethingWithMyObject()\n{\n    Console.WriteLine(myObject.ToString());\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// This is a snippet example for DO NOT\nobject myObject;\nvoid DoingSomethingWithMyObject()\n{\n    Console.WriteLine(myObject.ToString());\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "31543b72-a2c9-496e-8156-44bedf87d9b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477553,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When execution reaches "
            ],
            [
              "Console.WriteLine(myObject.ToString());",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " application will throw an NullReferenceException. Mr. Bad Practices realized that "
            ],
            [
              "myObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is null and edited his snippet to catch \u0026 handle "
            ],
            [
              "NullReferenceException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When execution reaches "
          },
          {
            "Text": "Console.WriteLine(myObject.ToString());",
            "AttrFlags": 2
          },
          {
            "Text": " application will throw an NullReferenceException. Mr. Bad Practices realized that "
          },
          {
            "Text": "myObject",
            "AttrFlags": 2
          },
          {
            "Text": " is null and edited his snippet to catch \u0026 handle "
          },
          {
            "Text": "NullReferenceException",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "c62d0719-39df-4250-a133-a267c3043658",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611660000,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// This is a snippet example for DO NOT\nobject myObject;\nvoid DoingSomethingWithMyObject()\n{\n    try\n    {\n        Console.WriteLine(myObject.ToString());\n    }\n    catch(NullReferenceException ex)\n    {\n        // Hmmm, if I create a new instance of object and assign it to myObject:\n        myObject = new object();\n        // Nice, now I can continue to work with myObject\n        DoSomethingElseWithMyObject();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// This is a snippet example for DO NOT\nobject myObject;\nvoid DoingSomethingWithMyObject()\n{\n    try\n    {\n        Console.WriteLine(myObject.ToString());\n    }\n    catch(NullReferenceException ex)\n    {\n        // Hmmm, if I create a new instance of object and assign it to myObject:\n        myObject = new object();\n        // Nice, now I can continue to work with myObject\n        DoSomethingElseWithMyObject();\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "25c04e7d-bce5-4c9f-aa68-88174e8b2e0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477553,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since previous snippet only covers logic of exception, what should I do if "
            ],
            [
              "myObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not null at this point? Where should I cover this part of logic? Right after "
            ],
            [
              "Console.WriteLine(myObject.ToString());",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? How about after the "
            ],
            [
              "try...catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since previous snippet only covers logic of exception, what should I do if "
          },
          {
            "Text": "myObject",
            "AttrFlags": 2
          },
          {
            "Text": " is not null at this point? Where should I cover this part of logic? Right after "
          },
          {
            "Text": "Console.WriteLine(myObject.ToString());",
            "AttrFlags": 2
          },
          {
            "Text": "? How about after the "
          },
          {
            "Text": "try...catch",
            "AttrFlags": 2
          },
          {
            "Text": " block?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "e2c45d77-f02d-4602-986d-7f9ba4e72051",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477553,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How about Mr. Best Practices? How would he handle this?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How about Mr. Best Practices? How would he handle this?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "4b4d186f-71ee-4963-9788-b55638190f2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611660000,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// This is a snippet example for DO\nobject myObject;\nvoid DoingSomethingWithMyObject()\n{\n    if(myObject == null)\n        myObject = new object();\n    \n    // When execution reaches this point, we are sure that myObject is not null\n    DoSomethingElseWithMyObject();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// This is a snippet example for DO\nobject myObject;\nvoid DoingSomethingWithMyObject()\n{\n    if(myObject == null)\n        myObject = new object();\n    \n    // When execution reaches this point, we are sure that myObject is not null\n    DoSomethingElseWithMyObject();\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "5faea810-95e9-421d-895f-44ede2ba4cc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477553,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mr. Best Practices achieved same logic with fewer code and a clear \u0026 understandable logic."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Mr. Best Practices achieved same logic with fewer code and a clear \u0026 understandable logic."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477553,
        "id": "62c53e3f-e899-4812-93ca-b2ad623069c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477553,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DO NOT re-throw Exceptions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "DO NOT re-throw Exceptions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477555,
        "id": "6c80c716-546a-40ba-ac3b-9431b56622c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477555,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Re-throwing exceptions is expensive. It negatively impact performance. For code that routinely fails, you can use design patterns to minimize performance issues. "
            ],
            [
              "This topic",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/ms229009(v=vs.100).aspx"
                ]
              ]
            ],
            [
              " describes two design patterns that are useful when exceptions might significantly impact performance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Re-throwing exceptions is expensive. It negatively impact performance. For code that routinely fails, you can use design patterns to minimize performance issues. "
          },
          {
            "Text": "This topic",
            "Link": "https://msdn.microsoft.com/en-us/library/ms229009(v=vs.100).aspx"
          },
          {
            "Text": " describes two design patterns that are useful when exceptions might significantly impact performance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477555,
        "id": "ef9ec137-b638-423b-803d-ce52364e31f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477555,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DO NOT absorb exceptions with no logging"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "DO NOT absorb exceptions with no logging"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477555,
        "id": "afd1b0be-2b27-431b-94a4-248a4d8e9402",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611660000,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "try\n{\n    //Some code that might throw an exception\n}\ncatch(Exception ex)\n{\n    //empty catch block, bad practice\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try\n{\n    //Some code that might throw an exception\n}\ncatch(Exception ex)\n{\n    //empty catch block, bad practice\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477555,
        "id": "c39712b1-d679-44c2-9ced-b79b7405bd9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477555,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Never swallow exceptions. Ignoring exceptions will save that moment but will create a chaos for maintainability later. When logging exceptions, you should always log the exception instance so that the complete stack trace is logged and not the exception message only."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Never swallow exceptions. Ignoring exceptions will save that moment but will create a chaos for maintainability later. When logging exceptions, you should always log the exception instance so that the complete stack trace is logged and not the exception message only."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477555,
        "id": "6b83f9dd-6cd9-4132-9970-3dd11f1a36b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611660000,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "try\n{\n    //Some code that might throw an exception\n}\ncatch(NullException ex)\n{\n    LogManager.Log(ex.ToString());\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try\n{\n    //Some code that might throw an exception\n}\ncatch(NullException ex)\n{\n    LogManager.Log(ex.ToString());\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477555,
        "id": "c9368386-63cd-48e2-85b0-8c0d9b6ed240",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477555,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Do not catch exceptions that you cannot handle"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Do not catch exceptions that you cannot handle"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477556,
        "id": "17460bb9-63ec-45ed-a2df-d774c6b7f8db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525477556,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many resources, such as "
            ],
            [
              "this one",
              [
                [
                  "a",
                  "http://c2.com/cgi/wiki?DontCatchExceptions"
                ]
              ]
            ],
            [
              ", strongly urge you to consider why you are catching an exception in the place that you are catching it. You should only catch an exception if you can handle it at that location. If you can do something there to help mitigate the problem, such as trying an alternative algorithm, connecting to a backup database, trying another filename, waiting 30 seconds and trying again, or notifying an administrator, you can catch the error and do that. If there is nothing that you can plausibly and reasonably do, just “let it go” and let the exception be handled at a higher level. If the exception is sufficiently catastrophic and there is no reasonable option other than for the entire program to crash because of the severity of the problem, then let it crash."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many resources, such as "
          },
          {
            "Text": "this one",
            "Link": "http://c2.com/cgi/wiki?DontCatchExceptions"
          },
          {
            "Text": ", strongly urge you to consider why you are catching an exception in the place that you are catching it. You should only catch an exception if you can handle it at that location. If you can do something there to help mitigate the problem, such as trying an alternative algorithm, connecting to a backup database, trying another filename, waiting 30 seconds and trying again, or notifying an administrator, you can catch the error and do that. If there is nothing that you can plausibly and reasonably do, just “let it go” and let the exception be handled at a higher level. If the exception is sufficiently catastrophic and there is no reasonable option other than for the entire program to crash because of the severity of the problem, then let it crash."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525477556,
        "id": "336e31e4-ad6c-402b-b143-a9123ac9891c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549611660000,
        "parent_id": "ef77d6a1-edc1-4a29-90f1-86ba7738dadc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "try\n{\n    //Try to save the data to the main database.\n}\ncatch(SqlException ex)\n{\n    //Try to save the data to the alternative database.\n}\n//If anything other than a SqlException is thrown, there is nothing we can do here. Let the exception bubble up to a level where it can be handled."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try\n{\n    //Try to save the data to the main database.\n}\ncatch(SqlException ex)\n{\n    //Try to save the data to the alternative database.\n}\n//If anything other than a SqlException is thrown, there is nothing we can do here. Let the exception bubble up to a level where it can be handled.",
        "code_language": "C#"
      }
    ],
    "title": "Best Practices",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}