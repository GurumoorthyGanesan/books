{
  "ID": "d9045414-4cc4-4eac-b590-64116167667a",
  "Root": {
    "id": "d9045414-4cc4-4eac-b590-64116167667a",
    "alive": true,
    "content": [
      "7929c1a0-183b-4fbb-9d9c-256c6a8b336a",
      "364cdc5b-cd76-4f19-b792-0e1b31fca061",
      "69c793bd-0745-4efb-9809-253b7759dd23",
      "8d7b0056-865f-41b3-b23c-1208af2dac71",
      "34da64f4-7e6a-4300-87c1-08965e82fe9f",
      "a75e28ed-804e-4193-8daf-5286abba9e11",
      "f0a8a666-0ab7-418d-9b64-82db5310e834",
      "35350224-93e1-41f8-950f-8a4a7cb64c4d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525029225,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549941300000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "operator"
        ]
      ]
    },
    "type": "page",
    "version": 24,
    "content_resolved": [
      {
        "id": "7929c1a0-183b-4fbb-9d9c-256c6a8b336a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029222,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525029222,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most of the "
            ],
            [
              "built-in operators",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/6a71f45d.aspx"
                ]
              ]
            ],
            [
              " (including conversion operators) can be overloaded by using the "
            ],
            [
              "operator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword along with the "
            ],
            [
              "public",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " modifiers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most of the "
          },
          {
            "Text": "built-in operators",
            "Link": "https://msdn.microsoft.com/en-us/library/6a71f45d.aspx"
          },
          {
            "Text": " (including conversion operators) can be overloaded by using the "
          },
          {
            "Text": "operator",
            "AttrFlags": 2
          },
          {
            "Text": " keyword along with the "
          },
          {
            "Text": "public",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " modifiers."
          }
        ]
      },
      {
        "id": "364cdc5b-cd76-4f19-b792-0e1b31fca061",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029223,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525029223,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operators comes in three forms: unary operators, binary operators and conversion operators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operators comes in three forms: unary operators, binary operators and conversion operators."
          }
        ]
      },
      {
        "id": "69c793bd-0745-4efb-9809-253b7759dd23",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029223,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525029223,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unary and binary operators requires at least one parameter of same type as the containing type, and some requires a complementary matching operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unary and binary operators requires at least one parameter of same type as the containing type, and some requires a complementary matching operator."
          }
        ]
      },
      {
        "id": "8d7b0056-865f-41b3-b23c-1208af2dac71",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029223,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525029223,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversion operators must convert to or from the enclosing type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversion operators must convert to or from the enclosing type."
          }
        ]
      },
      {
        "id": "34da64f4-7e6a-4300-87c1-08965e82fe9f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029224,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941300000,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public struct Vector32\n{\n    \n    public Vector32(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    public int X { get; }\n    public int Y { get; }\n\n    public static bool operator ==(Vector32 left, Vector32 right)\n        =\u003e left.X == right.X \u0026\u0026 left.Y == right.Y;\n\n    public static bool operator !=(Vector32 left, Vector32 right)\n        =\u003e !(left == right);\n\n    public static Vector32 operator +(Vector32 left, Vector32 right)\n        =\u003e new Vector32(left.X + right.X, left.Y + right.Y);\n\n    public static Vector32 operator +(Vector32 left, int right)\n        =\u003e new Vector32(left.X + right, left.Y + right);\n\n    public static Vector32 operator +(int left, Vector32 right)\n        =\u003e right + left;\n\n    public static Vector32 operator -(Vector32 left, Vector32 right)\n        =\u003e new Vector32(left.X - right.X, left.Y - right.Y);\n\n    public static Vector32 operator -(Vector32 left, int right)\n        =\u003e new Vector32(left.X - right, left.Y - right);\n\n    public static Vector32 operator -(int left, Vector32 right)\n        =\u003e right - left;\n\n    public static implicit operator Vector64(Vector32 vector)\n        =\u003e new Vector64(vector.X, vector.Y);\n\n    public override string ToString() =\u003e $\"{{{X}, {Y}}}\";\n\n}\n\npublic struct Vector64\n{\n\n    public Vector64(long x, long y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    public long X { get; }\n    public long Y { get; }\n\n    public override string ToString() =\u003e $\"{{{X}, {Y}}}\";\n\n}\n"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public struct Vector32\n{\n    \n    public Vector32(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    public int X { get; }\n    public int Y { get; }\n\n    public static bool operator ==(Vector32 left, Vector32 right)\n        =\u003e left.X == right.X \u0026\u0026 left.Y == right.Y;\n\n    public static bool operator !=(Vector32 left, Vector32 right)\n        =\u003e !(left == right);\n\n    public static Vector32 operator +(Vector32 left, Vector32 right)\n        =\u003e new Vector32(left.X + right.X, left.Y + right.Y);\n\n    public static Vector32 operator +(Vector32 left, int right)\n        =\u003e new Vector32(left.X + right, left.Y + right);\n\n    public static Vector32 operator +(int left, Vector32 right)\n        =\u003e right + left;\n\n    public static Vector32 operator -(Vector32 left, Vector32 right)\n        =\u003e new Vector32(left.X - right.X, left.Y - right.Y);\n\n    public static Vector32 operator -(Vector32 left, int right)\n        =\u003e new Vector32(left.X - right, left.Y - right);\n\n    public static Vector32 operator -(int left, Vector32 right)\n        =\u003e right - left;\n\n    public static implicit operator Vector64(Vector32 vector)\n        =\u003e new Vector64(vector.X, vector.Y);\n\n    public override string ToString() =\u003e $\"{{{X}, {Y}}}\";\n\n}\n\npublic struct Vector64\n{\n\n    public Vector64(long x, long y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    public long X { get; }\n    public long Y { get; }\n\n    public override string ToString() =\u003e $\"{{{X}, {Y}}}\";\n\n}\n",
        "code_language": "C#"
      },
      {
        "id": "a75e28ed-804e-4193-8daf-5286abba9e11",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029225,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525029225,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "f0a8a666-0ab7-418d-9b64-82db5310e834",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525029225,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941300000,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "var vector1 = new Vector32(15, 39);\nvar vector2 = new Vector32(87, 64);\n        \nConsole.WriteLine(vector1 == vector2); // false\nConsole.WriteLine(vector1 != vector2); // true\nConsole.WriteLine(vector1 + vector2);  // {102, 103}\nConsole.WriteLine(vector1 - vector2);  // {-72, -25}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var vector1 = new Vector32(15, 39);\nvar vector2 = new Vector32(87, 64);\n        \nConsole.WriteLine(vector1 == vector2); // false\nConsole.WriteLine(vector1 != vector2); // true\nConsole.WriteLine(vector1 + vector2);  // {102, 103}\nConsole.WriteLine(vector1 - vector2);  // {-72, -25}",
        "code_language": "C#"
      },
      {
        "id": "35350224-93e1-41f8-950f-8a4a7cb64c4d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549941300000,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941300000,
        "parent_id": "d9045414-4cc4-4eac-b590-64116167667a",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "operator",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}