{
  "ID": "24b11025-661f-47b9-829d-f376fc43e512",
  "Root": {
    "id": "24b11025-661f-47b9-829d-f376fc43e512",
    "alive": true,
    "content": [
      "a554cfba-c51d-489e-91f9-96dddd20ce53",
      "740421a5-61be-4cb0-b0f4-79c24f83813b",
      "c0feb486-c888-4825-82ca-51d199e6271a",
      "0d1b79f8-081a-458e-8f3d-2c5ebd231d2f",
      "63f9f772-5592-4ce3-bcaa-9260bb1f658b",
      "5245d6a9-06d6-4b64-b7ed-4080f60f789a",
      "6bb68afc-4099-4e6e-b731-fe84843c415d",
      "06a3a22e-a241-4c36-a03e-7a03d825e1ca",
      "d79a56ba-af69-4306-875b-9e56f81b39db",
      "97aadcb4-84e0-4e24-a49a-4604d1c476df",
      "962f0a47-49d8-4f99-8ac6-63b63e1682a7",
      "a7138e19-77c0-4abf-a442-3dc821d8d9e1",
      "69497074-5469-4987-bbf1-35c70e74a5b6",
      "9bad88a9-4540-44bd-9403-b0996ee260f7",
      "c4b91042-892d-43ad-9d7d-84c977ada047",
      "0383b892-28c4-438c-a5b3-b547c327a3fb",
      "ae874e1d-2960-488e-83ba-3eed5ccd7dd9",
      "a4a25d5f-969c-4fd9-ad98-35f90fdd56c0",
      "ac6fd3ff-0b3e-44d9-b947-a201ca781a96",
      "5b3cb718-8479-4640-b5e5-63c074ee1ddc",
      "23a460b7-ddea-41bf-b455-73128d2a8555",
      "2945caf0-6f45-4fde-89a7-d15fdaee5121",
      "7fe41535-9ebd-4b7e-9e2f-9c9f183709ab",
      "fc33943c-c5b6-4c0b-bd8c-6e1d21b96164",
      "92bfd613-0d2c-48b7-966d-10c8905d439c",
      "40a1ce37-cf9b-41ad-91b4-dd03b40f170f",
      "fcf68fd5-b4a0-4c2a-8254-6727104e31a7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549527398282,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550203920000,
    "parent_id": "06a46918-892a-4c7f-9b78-e8c23e0b6d32",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Anti-Patterns and gotchas"
        ]
      ]
    },
    "type": "page",
    "version": 30,
    "content_resolved": [
      {
        "id": "a554cfba-c51d-489e-91f9-96dddd20ce53",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398271,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398271,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Locking on an stack-allocated / local variable"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Locking on an stack-allocated / local variable"
          }
        ]
      },
      {
        "id": "740421a5-61be-4cb0-b0f4-79c24f83813b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398274,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398274,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the fallacies while using "
            ],
            [
              "lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the usage of local objects as locker in a function. Since these local object instances will differ on each call of the function, "
            ],
            [
              "lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will not perform as expected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the fallacies while using "
          },
          {
            "Text": "lock",
            "AttrFlags": 2
          },
          {
            "Text": " is the usage of local objects as locker in a function. Since these local object instances will differ on each call of the function, "
          },
          {
            "Text": "lock",
            "AttrFlags": 2
          },
          {
            "Text": " will not perform as expected."
          }
        ]
      },
      {
        "id": "c0feb486-c888-4825-82ca-51d199e6271a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398275,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203740000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "List\u003cstring\u003e stringList = new List\u003cstring\u003e();\n\npublic void AddToListNotThreadSafe(string something)\n{\n    // DO NOT do this, as each call to this method \n    // will lock on a different instance of an Object.\n    // This provides no thread safety, it only degrades performance.\n    var localLock = new Object();\n    lock(localLock)\n    {\n        stringList.Add(something);\n    }\n}\n\n// Define object that can be used for thread safety in the AddToList method\nreadonly object classLock = new object();\n\npublic void AddToList(List\u003cstring\u003e stringList, string something)\n{\n    // USE THE classLock instance field to achieve a \n    // thread-safe lock before adding to stringList\n    lock(classLock)\n    {\n        stringList.Add(something);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "List\u003cstring\u003e stringList = new List\u003cstring\u003e();\n\npublic void AddToListNotThreadSafe(string something)\n{\n    // DO NOT do this, as each call to this method \n    // will lock on a different instance of an Object.\n    // This provides no thread safety, it only degrades performance.\n    var localLock = new Object();\n    lock(localLock)\n    {\n        stringList.Add(something);\n    }\n}\n\n// Define object that can be used for thread safety in the AddToList method\nreadonly object classLock = new object();\n\npublic void AddToList(List\u003cstring\u003e stringList, string something)\n{\n    // USE THE classLock instance field to achieve a \n    // thread-safe lock before adding to stringList\n    lock(classLock)\n    {\n        stringList.Add(something);\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "0d1b79f8-081a-458e-8f3d-2c5ebd231d2f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398275,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398275,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assuming that locking restricts access to the synchronizing object itself"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assuming that locking restricts access to the synchronizing object itself"
          }
        ]
      },
      {
        "id": "63f9f772-5592-4ce3-bcaa-9260bb1f658b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398275,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398275,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one thread calls: "
            ],
            [
              "lock(obj)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and another thread calls "
            ],
            [
              "obj.ToString()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " second thread is not going to be blocked."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one thread calls: "
          },
          {
            "Text": "lock(obj)",
            "AttrFlags": 2
          },
          {
            "Text": " and another thread calls "
          },
          {
            "Text": "obj.ToString()",
            "AttrFlags": 2
          },
          {
            "Text": " second thread is not going to be blocked."
          }
        ]
      },
      {
        "id": "5245d6a9-06d6-4b64-b7ed-4080f60f789a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398275,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203740000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "object obj = new Object();\n \npublic void SomeMethod()\n{\n     lock(obj)\n    {\n       //do dangerous stuff \n    }\n }\n\n //Meanwhile on other tread \n public void SomeOtherMethod()\n {\n   var objInString = obj.ToString(); //this does not block\n }"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "object obj = new Object();\n \npublic void SomeMethod()\n{\n     lock(obj)\n    {\n       //do dangerous stuff \n    }\n }\n\n //Meanwhile on other tread \n public void SomeOtherMethod()\n {\n   var objInString = obj.ToString(); //this does not block\n }",
        "code_language": "C#"
      },
      {
        "id": "6bb68afc-4099-4e6e-b731-fe84843c415d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398275,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398275,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expecting subclasses to know when to lock"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expecting subclasses to know when to lock"
          }
        ]
      },
      {
        "id": "06a3a22e-a241-4c36-a03e-7a03d825e1ca",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398276,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398276,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes base classes are designed such that their subclasses are required to use a lock when accessing certain protected fields:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes base classes are designed such that their subclasses are required to use a lock when accessing certain protected fields:"
          }
        ]
      },
      {
        "id": "d79a56ba-af69-4306-875b-9e56f81b39db",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398276,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203800000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public abstract class Base\n{\n    protected readonly object padlock;\n    protected readonly List\u003cstring\u003e list;\n\n    public Base()\n    {\n        this.padlock = new object();\n        this.list = new List\u003cstring\u003e();\n    }\n\n    public abstract void Do();\n}\n\npublic class Derived1 : Base\n{\n    public override void Do()\n    {\n        lock (this.padlock)\n        {\n            this.list.Add(\"Derived1\");\n        }\n    }\n}\n\npublic class Derived2 : Base\n{\n    public override void Do()\n    {\n        this.list.Add(\"Derived2\"); // OOPS! I forgot to lock!\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 8,
        "code": "public abstract class Base\n{\n    protected readonly object padlock;\n    protected readonly List\u003cstring\u003e list;\n\n    public Base()\n    {\n        this.padlock = new object();\n        this.list = new List\u003cstring\u003e();\n    }\n\n    public abstract void Do();\n}\n\npublic class Derived1 : Base\n{\n    public override void Do()\n    {\n        lock (this.padlock)\n        {\n            this.list.Add(\"Derived1\");\n        }\n    }\n}\n\npublic class Derived2 : Base\n{\n    public override void Do()\n    {\n        this.list.Add(\"Derived2\"); // OOPS! I forgot to lock!\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "97aadcb4-84e0-4e24-a49a-4604d1c476df",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398278,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398278,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is much safer to "
            ],
            [
              "encapsulate locking",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by using a "
            ],
            [
              "Template Method",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Template_method_pattern"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is much safer to "
          },
          {
            "Text": "encapsulate locking",
            "AttrFlags": 4
          },
          {
            "Text": " by using a "
          },
          {
            "Text": "Template Method",
            "Link": "https://en.wikipedia.org/wiki/Template_method_pattern"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "id": "962f0a47-49d8-4f99-8ac6-63b63e1682a7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398278,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203800000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public abstract class Base\n{\n    private readonly object padlock; // This is now private\n    protected readonly List\u003cstring\u003e list;\n\n    public Base()\n    {\n        this.padlock = new object();\n        this.list = new List\u003cstring\u003e();\n    }\n\n    public void Do()\n    {\n        lock (this.padlock) {\n            this.DoInternal();\n        }\n    }\n\n    protected abstract void DoInternal();\n}\n\npublic class Derived1 : Base\n{\n    protected override void DoInternal()\n    {\n        this.list.Add(\"Derived1\"); // Yay! No need to lock\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public abstract class Base\n{\n    private readonly object padlock; // This is now private\n    protected readonly List\u003cstring\u003e list;\n\n    public Base()\n    {\n        this.padlock = new object();\n        this.list = new List\u003cstring\u003e();\n    }\n\n    public void Do()\n    {\n        lock (this.padlock) {\n            this.DoInternal();\n        }\n    }\n\n    protected abstract void DoInternal();\n}\n\npublic class Derived1 : Base\n{\n    protected override void DoInternal()\n    {\n        this.list.Add(\"Derived1\"); // Yay! No need to lock\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "a7138e19-77c0-4abf-a442-3dc821d8d9e1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398278,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398278,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Locking on a boxed ValueType variable does not synchronize"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Locking on a boxed ValueType variable does not synchronize"
          }
        ]
      },
      {
        "id": "69497074-5469-4987-bbf1-35c70e74a5b6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398278,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398278,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the following example, a private variable is implicitly boxed as it’s supplied as an "
            ],
            [
              "object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument to a function, expecting a monitor resource to lock at. The boxing occurs just prior to calling the IncInSync function, so the boxed instance corresponds to a different heap object each time the function is called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the following example, a private variable is implicitly boxed as it’s supplied as an "
          },
          {
            "Text": "object",
            "AttrFlags": 2
          },
          {
            "Text": " argument to a function, expecting a monitor resource to lock at. The boxing occurs just prior to calling the IncInSync function, so the boxed instance corresponds to a different heap object each time the function is called."
          }
        ]
      },
      {
        "id": "9bad88a9-4540-44bd-9403-b0996ee260f7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398278,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203800000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public int Count { get; private set; }\n\nprivate readonly int counterLock = 1;\n\npublic void Inc()\n{\n    IncInSync(counterLock);\n}\n\nprivate void IncInSync(object monitorResource)\n{\n    lock (monitorResource)\n    {\n        Count++;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "public int Count { get; private set; }\n\nprivate readonly int counterLock = 1;\n\npublic void Inc()\n{\n    IncInSync(counterLock);\n}\n\nprivate void IncInSync(object monitorResource)\n{\n    lock (monitorResource)\n    {\n        Count++;\n    }\n}",
        "code_language": "C#"
      },
      {
        "id": "c4b91042-892d-43ad-9d7d-84c977ada047",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398279,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Boxing occurs in the "
            ],
            [
              "Inc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Boxing occurs in the "
          },
          {
            "Text": "Inc",
            "AttrFlags": 2
          },
          {
            "Text": " function:"
          }
        ]
      },
      {
        "id": "0383b892-28c4-438c-a5b3-b547c327a3fb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398279,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "BulemicCounter.Inc:\nIL_0000:  nop         \nIL_0001:  ldarg.0     \nIL_0002:  ldarg.0     \nIL_0003:  ldfld       UserQuery+BulemicCounter.counterLock\nIL_0008:  box         System.Int32**\nIL_000D:  call        UserQuery+BulemicCounter.IncInSync\nIL_0012:  nop         \nIL_0013:  ret"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "BulemicCounter.Inc:\nIL_0000:  nop         \nIL_0001:  ldarg.0     \nIL_0002:  ldarg.0     \nIL_0003:  ldfld       UserQuery+BulemicCounter.counterLock\nIL_0008:  box         System.Int32**\nIL_000D:  call        UserQuery+BulemicCounter.IncInSync\nIL_0012:  nop         \nIL_0013:  ret",
        "code_language": "Plain Text"
      },
      {
        "id": "ae874e1d-2960-488e-83ba-3eed5ccd7dd9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398279,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It does not mean that a boxed ValueType can’t be used for monitor locking at all:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It does not mean that a boxed ValueType can’t be used for monitor locking at all:"
          }
        ]
      },
      {
        "id": "a4a25d5f-969c-4fd9-ad98-35f90fdd56c0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203860000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "private readonly object counterLock = 1;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "private readonly object counterLock = 1;",
        "code_language": "C#"
      },
      {
        "id": "ac6fd3ff-0b3e-44d9-b947-a201ca781a96",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398279,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now boxing occurs in constructor, which is fine for locking:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now boxing occurs in constructor, which is fine for locking:"
          }
        ]
      },
      {
        "id": "5b3cb718-8479-4640-b5e5-63c074ee1ddc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398279,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IL_0001:  ldc.i4.1    \nIL_0002:  box         System.Int32\nIL_0007:  stfld       UserQuery+BulemicCounter.counterLock"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IL_0001:  ldc.i4.1    \nIL_0002:  box         System.Int32\nIL_0007:  stfld       UserQuery+BulemicCounter.counterLock",
        "code_language": "Plain Text"
      },
      {
        "id": "23a460b7-ddea-41bf-b455-73128d2a8555",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398279,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398279,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using locks unnecessarily when a safer alternative exists"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using locks unnecessarily when a safer alternative exists"
          }
        ]
      },
      {
        "id": "2945caf0-6f45-4fde-89a7-d15fdaee5121",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398280,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398280,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A very common pattern is to use a private "
            ],
            [
              "List",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Dictionary",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a thread safe class and lock every time it is accessed:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A very common pattern is to use a private "
          },
          {
            "Text": "List",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Dictionary",
            "AttrFlags": 2
          },
          {
            "Text": " in a thread safe class and lock every time it is accessed:"
          }
        ]
      },
      {
        "id": "7fe41535-9ebd-4b7e-9e2f-9c9f183709ab",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398280,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203860000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Cache\n{\n    private readonly object padlock;\n    private readonly Dictionary\u003cstring, object\u003e values;\n\n    public WordStats()\n    {\n        this.padlock = new object();\n        this.values = new Dictionary\u003cstring, object\u003e();\n    }\n    \n    public void Add(string key, object value)\n    {\n        lock (this.padlock)\n        {\n            this.values.Add(key, value);\n        }\n    }\n\n    /* rest of class omitted */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "public class Cache\n{\n    private readonly object padlock;\n    private readonly Dictionary\u003cstring, object\u003e values;\n\n    public WordStats()\n    {\n        this.padlock = new object();\n        this.values = new Dictionary\u003cstring, object\u003e();\n    }\n    \n    public void Add(string key, object value)\n    {\n        lock (this.padlock)\n        {\n            this.values.Add(key, value);\n        }\n    }\n\n    /* rest of class omitted */\n}",
        "code_language": "C#"
      },
      {
        "id": "fc33943c-c5b6-4c0b-bd8c-6e1d21b96164",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398280,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398280,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If there are multiple methods accessing the "
            ],
            [
              "values",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dictionary, the code can get very long and, more importantly, locking all the time obscures its "
            ],
            [
              "intent",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Locking is also very easy to forget and lack of proper locking can cause very hard to find bugs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If there are multiple methods accessing the "
          },
          {
            "Text": "values",
            "AttrFlags": 2
          },
          {
            "Text": " dictionary, the code can get very long and, more importantly, locking all the time obscures its "
          },
          {
            "Text": "intent",
            "AttrFlags": 4
          },
          {
            "Text": ". Locking is also very easy to forget and lack of proper locking can cause very hard to find bugs."
          }
        ]
      },
      {
        "id": "92bfd613-0d2c-48b7-966d-10c8905d439c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398281,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398281,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By using a "
            ],
            [
              "ConcurrentDictionary",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/dd287191(v=vs.110).aspx?f=255\u0026MSPPError=-2147217396"
                ]
              ]
            ],
            [
              ", we can avoid locking completely:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By using a "
          },
          {
            "Text": "ConcurrentDictionary",
            "AttrFlags": 2,
            "Link": "https://msdn.microsoft.com/en-us/library/dd287191(v=vs.110).aspx?f=255\u0026MSPPError=-2147217396"
          },
          {
            "Text": ", we can avoid locking completely:"
          }
        ]
      },
      {
        "id": "40a1ce37-cf9b-41ad-91b4-dd03b40f170f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398281,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550203860000,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "public class Cache\n{\n    private readonly ConcurrentDictionary\u003cstring, object\u003e values;\n\n    public WordStats()\n    {\n        this.values = new ConcurrentDictionary\u003cstring, object\u003e();\n    }\n    \n    public void Add(string key, object value)\n    {\n        this.values.Add(key, value);\n    }\n\n    /* rest of class omitted */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 7,
        "code": "public class Cache\n{\n    private readonly ConcurrentDictionary\u003cstring, object\u003e values;\n\n    public WordStats()\n    {\n        this.values = new ConcurrentDictionary\u003cstring, object\u003e();\n    }\n    \n    public void Add(string key, object value)\n    {\n        this.values.Add(key, value);\n    }\n\n    /* rest of class omitted */\n}",
        "code_language": "C#"
      },
      {
        "id": "fcf68fd5-b4a0-4c2a-8254-6727104e31a7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549527398281,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549527398281,
        "parent_id": "24b11025-661f-47b9-829d-f376fc43e512",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using concurrent collections also improves performance because "
            ],
            [
              "all of them employ lock-free techniques",
              [
                [
                  "a",
                  "https://blogs.msdn.microsoft.com/pfxteam/2010/01/26/faq-are-all-of-the-new-concurrent-collections-lock-free/"
                ]
              ]
            ],
            [
              " to some extent."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using concurrent collections also improves performance because "
          },
          {
            "Text": "all of them employ lock-free techniques",
            "Link": "https://blogs.msdn.microsoft.com/pfxteam/2010/01/26/faq-are-all-of-the-new-concurrent-collections-lock-free/"
          },
          {
            "Text": " to some extent."
          }
        ]
      }
    ],
    "title": "Anti-Patterns and gotchas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}