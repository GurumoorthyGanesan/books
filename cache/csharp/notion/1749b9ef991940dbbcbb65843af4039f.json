{
  "ID": "1749b9ef-9919-40db-bcbb-65843af4039f",
  "Root": {
    "alive": true,
    "content": [
      "75830cc5-8d05-4a86-9658-ef52c11c45ac",
      "c5ee3cbb-4010-4d2a-8acb-b73660edda39",
      "3cc11d7e-99e1-4ceb-806e-80af2be9e36f",
      "21d6bfc5-9d64-4ff8-8005-42160106bb7b",
      "3f6aa686-1fa2-4c63-9279-72f9b29bf152",
      "c976161f-2bea-446a-babd-0e96dbf451a1",
      "1a13b33c-8abb-4237-86df-14689b43ef14",
      "389f9bf5-7184-4d92-9555-332f59963090",
      "101a4ed3-375a-4bdf-8366-559f01d55d8d",
      "22f9686a-0cdd-4d10-a57f-4c1e69407c2a",
      "27d98acc-1426-445d-9187-e8e615dd28ba",
      "3fdcbc2d-15c2-4e85-b906-35b2e62c8fd1",
      "eb3f4b4c-8829-45ce-8108-704a9a80c5d9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525038580,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1749b9ef-9919-40db-bcbb-65843af4039f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1549941660000,
    "parent_id": "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "unsafe"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038574,
        "id": "75830cc5-8d05-4a86-9658-ef52c11c45ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038574,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "unsafe",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword can be used in type or method declarations or to declare an inline block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "unsafe",
            "AttrFlags": 2
          },
          {
            "Text": " keyword can be used in type or method declarations or to declare an inline block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038576,
        "id": "c5ee3cbb-4010-4d2a-8acb-b73660edda39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038576,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The purpose of this keyword is to enable the use of the "
            ],
            [
              "unsafe subset",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of C# for the block in question. The unsafe subset includes features like pointers, stack allocation, C-like arrays, and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The purpose of this keyword is to enable the use of the "
          },
          {
            "Text": "unsafe subset",
            "AttrFlags": 4
          },
          {
            "Text": " of C# for the block in question. The unsafe subset includes features like pointers, stack allocation, C-like arrays, and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038576,
        "id": "3cc11d7e-99e1-4ceb-806e-80af2be9e36f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038576,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unsafe code is not verifiable and that’s why its usage is discouraged. Compilation of unsafe code requires passing a switch to the C# compiler. Additionally, the CLR requires that the running assembly has full trust."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unsafe code is not verifiable and that’s why its usage is discouraged. Compilation of unsafe code requires passing a switch to the C# compiler. Additionally, the CLR requires that the running assembly has full trust."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038576,
        "id": "21d6bfc5-9d64-4ff8-8005-42160106bb7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038576,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Despite these limitations, unsafe code has valid usages in making some operations more performant (e.g. array indexing) or easier (e.g. interop with some unmanaged libraries)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Despite these limitations, unsafe code has valid usages in making some operations more performant (e.g. array indexing) or easier (e.g. interop with some unmanaged libraries)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038576,
        "id": "3f6aa686-1fa2-4c63-9279-72f9b29bf152",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038576,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a very simple example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As a very simple example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038577,
        "id": "c976161f-2bea-446a-babd-0e96dbf451a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941660000,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "// compile with /unsafe\nclass UnsafeTest\n{\n   unsafe static void SquarePtrParam(int* p)\n   {\n      *p *= *p; // the '*' dereferences the pointer.\n      //Since we passed in \"the address of i\", this becomes \"i *= i\"\n   }\n\n   unsafe static void Main()\n   {\n      int i = 5;\n      // Unsafe method: uses address-of operator (\u0026):\n      SquarePtrParam(\u0026i); // \"\u0026i\" means \"the address of i\". The behavior is similar to \"ref i\"\n      Console.WriteLine(i); // Output: 25\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// compile with /unsafe\nclass UnsafeTest\n{\n   unsafe static void SquarePtrParam(int* p)\n   {\n      *p *= *p; // the '*' dereferences the pointer.\n      //Since we passed in \"the address of i\", this becomes \"i *= i\"\n   }\n\n   unsafe static void Main()\n   {\n      int i = 5;\n      // Unsafe method: uses address-of operator (\u0026):\n      SquarePtrParam(\u0026i); // \"\u0026i\" means \"the address of i\". The behavior is similar to \"ref i\"\n      Console.WriteLine(i); // Output: 25\n   }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038578,
        "id": "1a13b33c-8abb-4237-86df-14689b43ef14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038578,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While working with pointers, we can change the values of memory locations directly, rather than having to address them by name. Note that this often requires the use of the "
            ],
            [
              "fixed",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/26/keywords/59/fixed#t=20160802171014149858"
                ]
              ]
            ],
            [
              " keyword to prevent possible memory corruption as the garbage collector moves things around (otherwise, you may get "
            ],
            [
              "error CS0212",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/29ak9b70(v=vs.140).aspx"
                ]
              ]
            ],
            [
              "). Since a variable that has been “fixed” cannot be written to, we also often have to have a second pointer that starts out pointing to the same location as the first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While working with pointers, we can change the values of memory locations directly, rather than having to address them by name. Note that this often requires the use of the "
          },
          {
            "Text": "fixed",
            "Link": "http://stackoverflow.com/documentation/c%23/26/keywords/59/fixed#t=20160802171014149858"
          },
          {
            "Text": " keyword to prevent possible memory corruption as the garbage collector moves things around (otherwise, you may get "
          },
          {
            "Text": "error CS0212",
            "Link": "https://msdn.microsoft.com/en-us/library/29ak9b70(v=vs.140).aspx"
          },
          {
            "Text": "). Since a variable that has been “fixed” cannot be written to, we also often have to have a second pointer that starts out pointing to the same location as the first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038578,
        "id": "389f9bf5-7184-4d92-9555-332f59963090",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941660000,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "void Main()\n{\n    int[] intArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n    UnsafeSquareArray(intArray);\n    foreach(int i in intArray)\n        Console.WriteLine(i);\n}\n\nunsafe static void UnsafeSquareArray(int[] pArr)\n{\n    int len = pArr.Length;\n\n    //in C or C++, we could say\n    // int* a = \u0026(pArr[0])\n    // however, C# requires you to \"fix\" the variable first \n    fixed(int* fixedPointer = \u0026(pArr[0]))\n    {\n        //Declare a new int pointer because \"fixedPointer\" cannot be written to.\n        // \"p\" points to the same address space, but we can modify it\n        int* p = fixedPointer;\n\n        for (int i = 0; i \u003c len; i++)\n        {\n            *p *= *p; //square the value, just like we did in SquarePtrParam, above\n            p++;      //move the pointer to the next memory space.\n                      // NOTE that the pointer will move 4 bytes since \"p\" is an\n                      // int pointer and an int takes 4 bytes\n\n            //the above 2 lines could be written as one, like this:\n            // \"*p *= *p++;\"\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "void Main()\n{\n    int[] intArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n    UnsafeSquareArray(intArray);\n    foreach(int i in intArray)\n        Console.WriteLine(i);\n}\n\nunsafe static void UnsafeSquareArray(int[] pArr)\n{\n    int len = pArr.Length;\n\n    //in C or C++, we could say\n    // int* a = \u0026(pArr[0])\n    // however, C# requires you to \"fix\" the variable first \n    fixed(int* fixedPointer = \u0026(pArr[0]))\n    {\n        //Declare a new int pointer because \"fixedPointer\" cannot be written to.\n        // \"p\" points to the same address space, but we can modify it\n        int* p = fixedPointer;\n\n        for (int i = 0; i \u003c len; i++)\n        {\n            *p *= *p; //square the value, just like we did in SquarePtrParam, above\n            p++;      //move the pointer to the next memory space.\n                      // NOTE that the pointer will move 4 bytes since \"p\" is an\n                      // int pointer and an int takes 4 bytes\n\n            //the above 2 lines could be written as one, like this:\n            // \"*p *= *p++;\"\n        }\n    }\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038579,
        "id": "101a4ed3-375a-4bdf-8366-559f01d55d8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038579,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038579,
        "id": "22f9686a-0cdd-4d10-a57f-4c1e69407c2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038579,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1\n4\n9\n16\n25\n36\n49\n64\n81\n100"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1\n4\n9\n16\n25\n36\n49\n64\n81\n100",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038579,
        "id": "27d98acc-1426-445d-9187-e8e615dd28ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038579,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "unsafe",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " also allows the use of "
            ],
            [
              "stackalloc",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/c%23/26/keywords/57/stackalloc#t=20160802171014149858"
                ]
              ]
            ],
            [
              " which will allocate memory on the stack like _alloca in the C run-time library. We can modify the above example to use "
            ],
            [
              "stackalloc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "unsafe",
            "AttrFlags": 2
          },
          {
            "Text": " also allows the use of "
          },
          {
            "Text": "stackalloc",
            "Link": "http://stackoverflow.com/documentation/c%23/26/keywords/57/stackalloc#t=20160802171014149858"
          },
          {
            "Text": " which will allocate memory on the stack like _alloca in the C run-time library. We can modify the above example to use "
          },
          {
            "Text": "stackalloc",
            "AttrFlags": 2
          },
          {
            "Text": " as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038579,
        "id": "3fdcbc2d-15c2-4e85-b906-35b2e62c8fd1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549941660000,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "C#"
            ]
          ],
          "title": [
            [
              "unsafe void Main()\n{\n    const int len=10;\n    int* seedArray = stackalloc int[len];\n    \n    //We can no longer use the initializer \"{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\" as before.\n    // We have at least 2 options to populate the array. The end result of either\n    // option will be the same (doing both will also be the same here).\n\n    //FIRST OPTION:\n    int* p = seedArray; // we don't want to lose where the array starts, so we\n                        // create a shadow copy of the pointer\n    for(int i=1; i\u003c=len; i++)\n        *p++ = i;\n    //end of first option\n\n    //SECOND OPTION:\n    for(int i=0; i\u003clen; i++)\n        seedArray[i] = i+1;\n    //end of second option\n\n    UnsafeSquareArray(seedArray, len);\n    for(int i=0; i\u003c len; i++)\n        Console.WriteLine(seedArray[i]);\n}\n\n//Now that we are dealing directly in pointers, we don't need to mess around with\n// \"fixed\", which dramatically simplifies the code\nunsafe static void UnsafeSquareArray(int* p, int len)\n{\n    for (int i = 0; i \u003c len; i++)\n        *p *= *p++;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "unsafe void Main()\n{\n    const int len=10;\n    int* seedArray = stackalloc int[len];\n    \n    //We can no longer use the initializer \"{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\" as before.\n    // We have at least 2 options to populate the array. The end result of either\n    // option will be the same (doing both will also be the same here).\n\n    //FIRST OPTION:\n    int* p = seedArray; // we don't want to lose where the array starts, so we\n                        // create a shadow copy of the pointer\n    for(int i=1; i\u003c=len; i++)\n        *p++ = i;\n    //end of first option\n\n    //SECOND OPTION:\n    for(int i=0; i\u003clen; i++)\n        seedArray[i] = i+1;\n    //end of second option\n\n    UnsafeSquareArray(seedArray, len);\n    for(int i=0; i\u003c len; i++)\n        Console.WriteLine(seedArray[i]);\n}\n\n//Now that we are dealing directly in pointers, we don't need to mess around with\n// \"fixed\", which dramatically simplifies the code\nunsafe static void UnsafeSquareArray(int* p, int len)\n{\n    for (int i = 0; i \u003c len; i++)\n        *p *= *p++;\n}",
        "code_language": "C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525038580,
        "id": "eb3f4b4c-8829-45ce-8108-704a9a80c5d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525038580,
        "parent_id": "1749b9ef-9919-40db-bcbb-65843af4039f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Output is the same as above)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Output is the same as above)"
          }
        ]
      }
    ],
    "title": "unsafe",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}