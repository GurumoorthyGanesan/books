{
  "ID": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
  "Root": {
    "alive": true,
    "content": [
      "24c40438-6c95-4d1f-bb4d-0092d4bfa2b7",
      "75c1cf04-7dd8-4df3-bb19-5fb63a3c060c",
      "5844e3dd-c7f3-48c4-ae7b-3b6f13f55c0e",
      "8528de2b-3d1e-4703-8d8b-d57fc65846cd",
      "7054ae5b-7846-4ce6-b1d8-a25b62eec97a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1549525620383,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550047800000,
    "parent_id": "9002e16c-e08a-4150-b42d-7b660d66b027",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Lambda expressions"
        ]
      ]
    },
    "type": "page",
    "version": 15,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525620381,
        "id": "24c40438-6c95-4d1f-bb4d-0092d4bfa2b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525620381,
        "parent_id": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525620382,
        "id": "75c1cf04-7dd8-4df3-bb19-5fb63a3c060c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525620382,
        "parent_id": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression is a syntax for creating anonymous functions inline. More formally, from the "
            ],
            [
              "C# Programming Guide",
              [
                [
                  "a",
                  "https://msdn.microsoft.com/en-us/library/bb397687.aspx"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression is a syntax for creating anonymous functions inline. More formally, from the "
          },
          {
            "Text": "C# Programming Guide",
            "Link": "https://msdn.microsoft.com/en-us/library/bb397687.aspx"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525620383,
        "id": "5844e3dd-c7f3-48c4-ae7b-3b6f13f55c0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525620383,
        "parent_id": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression is an anonymous function that you can use to create delegates or expression tree types. By using lambda expressions, you can write local functions that can be passed as arguments or returned as the value of function calls."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression is an anonymous function that you can use to create delegates or expression tree types. By using lambda expressions, you can write local functions that can be passed as arguments or returned as the value of function calls."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1549525620383,
        "id": "8528de2b-3d1e-4703-8d8b-d57fc65846cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1549525620383,
        "parent_id": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression is created by using the "
            ],
            [
              "=\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator. Put any parameters on the lefthand side of the operator. On the righthand side, put an expression that can use those parameters; this expression will resolve as the return value of the function. More rarely, if necessary, a whole "
            ],
            [
              "{code block}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used on the righthand side. If the return type is not void, the block will contain a return statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression is created by using the "
          },
          {
            "Text": "=\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operator. Put any parameters on the lefthand side of the operator. On the righthand side, put an expression that can use those parameters; this expression will resolve as the return value of the function. More rarely, if necessary, a whole "
          },
          {
            "Text": "{code block}",
            "AttrFlags": 2
          },
          {
            "Text": " can be used on the righthand side. If the return type is not void, the block will contain a return statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550047800000,
        "id": "7054ae5b-7846-4ce6-b1d8-a25b62eec97a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550047800000,
        "parent_id": "e2073870-43cc-4f6c-8e46-c6aa03f3a649",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Lambda expressions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}