{
  "ID": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
  "Root": {
    "alive": true,
    "content": [
      "aee81a9d-2bc2-499a-bd1d-77f77381cbd2",
      "62422ab2-57ee-4ffb-9cc2-281f060f9b40",
      "582b40e0-22ea-405a-bf4d-96b02b441ba1",
      "3fe09240-5886-47b6-a83b-e5fa0965f6b5",
      "27a94a91-3a76-458c-bc59-6bd395d73077"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461150349,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461150349,
    "parent_id": "6f2fa7ab-2d05-4439-ac96-63b175867e14",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Traversing a Tree data structure with recursion"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461150348,
        "id": "aee81a9d-2bc2-499a-bd1d-77f77381cbd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461150348,
        "parent_id": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the Node class having 3 members data, left child pointer and right child pointer like below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the Node class having 3 members data, left child pointer and right child pointer like below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461150348,
        "id": "62422ab2-57ee-4ffb-9cc2-281f060f9b40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461150348,
        "parent_id": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Node {\n    public int data;\n    public Node left;\n    public Node right;\n    \n    public Node(int data){\n        this.data = data;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Node {\n    public int data;\n    public Node left;\n    public Node right;\n    \n    public Node(int data){\n        this.data = data;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461150349,
        "id": "582b40e0-22ea-405a-bf4d-96b02b441ba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461150349,
        "parent_id": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can traverse the tree constructed by connecting multiple Node class’s object like below, the traversal is called in-order traversal of tree."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can traverse the tree constructed by connecting multiple Node class’s object like below, the traversal is called in-order traversal of tree."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461150349,
        "id": "3fe09240-5886-47b6-a83b-e5fa0965f6b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461150349,
        "parent_id": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void inOrderTraversal(Node root) {\n        if (root != null) {          \n            inOrderTraversal(root.left); // traverse left sub tree\n            System.out.print(root.data + \" \"); // traverse current node\n            inOrderTraversal(root.right); // traverse right sub tree\n        }\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void inOrderTraversal(Node root) {\n        if (root != null) {          \n            inOrderTraversal(root.left); // traverse left sub tree\n            System.out.print(root.data + \" \"); // traverse current node\n            inOrderTraversal(root.right); // traverse right sub tree\n        }\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461150349,
        "id": "27a94a91-3a76-458c-bc59-6bd395d73077",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461150349,
        "parent_id": "2c127e8f-eb82-473a-9476-ddcc110b30b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As demonstrated above, using "
            ],
            [
              "recursion",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " we can traverse the "
            ],
            [
              "tree data structure",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " without using any other data structure which is not possible with the "
            ],
            [
              "iterative",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " approach."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As demonstrated above, using "
          },
          {
            "Text": "recursion",
            "AttrFlags": 1
          },
          {
            "Text": " we can traverse the "
          },
          {
            "Text": "tree data structure",
            "AttrFlags": 1
          },
          {
            "Text": " without using any other data structure which is not possible with the "
          },
          {
            "Text": "iterative",
            "AttrFlags": 1
          },
          {
            "Text": " approach."
          }
        ]
      }
    ],
    "title": "Traversing a Tree data structure with recursion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}