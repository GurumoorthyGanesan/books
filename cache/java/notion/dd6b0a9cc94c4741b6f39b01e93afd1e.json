{
  "ID": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
  "Root": {
    "alive": true,
    "content": [
      "d2d583fa-bbcc-4bf8-a719-128d78feb52a",
      "d16e2b4f-353c-411d-a6a3-99d93247c964",
      "e87d4ab0-0fbc-4750-8442-11c34d0cd995",
      "e11a7c1c-876b-421e-8fd8-340f60c25716",
      "d6bd79cb-7ae6-4115-ae4f-1db0721964d1",
      "410e5295-1e05-4b78-9e19-044ea01a5eb5",
      "6aca1a33-d6b9-40f4-95ab-882c01bd3ddf",
      "f4c07a8c-1ecf-4bed-9873-a11f113d552d",
      "9856785d-6cb2-456f-9746-b04b6a4f2e69"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463195103,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551748790462,
    "parent_id": "6e8be33a-59ae-4ce7-a49e-06a124b207b9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Natural comparable vs explicit comparator sorting"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195099,
        "id": "d2d583fa-bbcc-4bf8-a719-128d78feb52a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195099,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two "
            ],
            [
              "Collections.sort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two "
          },
          {
            "Text": "Collections.sort()",
            "AttrFlags": 2
          },
          {
            "Text": " methods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195102,
        "id": "d16e2b4f-353c-411d-a6a3-99d93247c964",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195102,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One that takes a "
            ],
            [
              "List\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a parameter where "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must implement Comparable and override the "
            ],
            [
              "compareTo()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method that determines sort order."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "One that takes a "
          },
          {
            "Text": "List\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " as a parameter where "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " must implement Comparable and override the "
          },
          {
            "Text": "compareTo()",
            "AttrFlags": 2
          },
          {
            "Text": " method that determines sort order."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195102,
        "id": "e87d4ab0-0fbc-4750-8442-11c34d0cd995",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195102,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One that takes a List and a Comparator as the arguments, where the Comparator determines the sort order."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "One that takes a List and a Comparator as the arguments, where the Comparator determines the sort order."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195102,
        "id": "e11a7c1c-876b-421e-8fd8-340f60c25716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195102,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, here is a Person class that implements Comparable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, here is a Person class that implements Comparable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195102,
        "id": "d6bd79cb-7ae6-4115-ae4f-1db0721964d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195102,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Person implements Comparable\u003cPerson\u003e {         \n    private String name;  \n    private int age;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }         \n\n    @Override\n    public int compareTo(Person o) {\n        return this.getAge() - o.getAge();\n    }\n    @Override\n    public String toString() {\n        return this.getAge()+\"-\"+this.getName();\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Person implements Comparable\u003cPerson\u003e {         \n    private String name;  \n    private int age;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }         \n\n    @Override\n    public int compareTo(Person o) {\n        return this.getAge() - o.getAge();\n    }\n    @Override\n    public String toString() {\n        return this.getAge()+\"-\"+this.getName();\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195103,
        "id": "410e5295-1e05-4b78-9e19-044ea01a5eb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195103,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is how you would use the above class to sort a List in the natural ordering of its elements, defined by the "
            ],
            [
              "compareTo()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method override:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is how you would use the above class to sort a List in the natural ordering of its elements, defined by the "
          },
          {
            "Text": "compareTo()",
            "AttrFlags": 2
          },
          {
            "Text": " method override:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195103,
        "id": "6aca1a33-d6b9-40f4-95ab-882c01bd3ddf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195103,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//-- usage\nList\u003cPerson\u003e pList = new ArrayList\u003cPerson\u003e();\n            Person p = new Person();\n            p.setName(\"A\");\n            p.setAge(10);\n            pList.add(p);\n            p = new Person();\n            p.setName(\"Z\");\n            p.setAge(20);\n            pList.add(p);\n            p = new Person();\n            p.setName(\"D\");\n            p.setAge(30);\n            pList.add(p);\n            \n            //-- natural sorting i.e comes with object implementation, by age\n            Collections.sort(pList);\n\n            System.out.println(pList);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//-- usage\nList\u003cPerson\u003e pList = new ArrayList\u003cPerson\u003e();\n            Person p = new Person();\n            p.setName(\"A\");\n            p.setAge(10);\n            pList.add(p);\n            p = new Person();\n            p.setName(\"Z\");\n            p.setAge(20);\n            pList.add(p);\n            p = new Person();\n            p.setName(\"D\");\n            p.setAge(30);\n            pList.add(p);\n            \n            //-- natural sorting i.e comes with object implementation, by age\n            Collections.sort(pList);\n\n            System.out.println(pList);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195103,
        "id": "f4c07a8c-1ecf-4bed-9873-a11f113d552d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195103,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is how you would use an anonymous inline Comparator to sort a List that does not implement Comparable, or in this case, to sort a List in an order other than the natural ordering:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is how you would use an anonymous inline Comparator to sort a List that does not implement Comparable, or in this case, to sort a List in an order other than the natural ordering:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463195103,
        "id": "9856785d-6cb2-456f-9746-b04b6a4f2e69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463195103,
        "parent_id": "dd6b0a9c-c94c-4741-b6f3-9b01e93afd1e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//-- explicit sorting, define sort on another property here goes with name\nCollections.sort(pList, new Comparator\u003cPerson\u003e() {\n\n    @Override\n    public int compare(Person o1, Person o2) {\n        return o1.getName().compareTo(o2.getName());\n    }\n});            \nSystem.out.println(pList);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//-- explicit sorting, define sort on another property here goes with name\nCollections.sort(pList, new Comparator\u003cPerson\u003e() {\n\n    @Override\n    public int compare(Person o1, Person o2) {\n        return o1.getName().compareTo(o2.getName());\n    }\n});            \nSystem.out.println(pList);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Natural comparable vs explicit comparator sorting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}