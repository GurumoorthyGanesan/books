{
  "ID": "0763508c-7461-4a1d-8d20-317b52cb8d2a",
  "Root": {
    "alive": true,
    "content": [
      "15aa1703-75fa-4fb6-8f23-b1e373a309dc",
      "ee480385-c150-4317-a563-72dc2f9c1528",
      "5ea34d8b-ed3d-4905-b360-e0f7f23a26b2",
      "d6c787fb-3515-4978-9955-15c530f16390"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460133054,
    "id": "0763508c-7461-4a1d-8d20-317b52cb8d2a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460133054,
    "parent_id": "7416eb9a-1bd0-49c2-bd47-b63df006e231",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "130 Collections and Primitive Values"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460133051,
        "id": "15aa1703-75fa-4fb6-8f23-b1e373a309dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460133051,
        "parent_id": "0763508c-7461-4a1d-8d20-317b52cb8d2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Collections in Java only work for objects. I.e. there is no "
            ],
            [
              "Map\u003cint, int\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in Java. Instead, primitive values need to be "
            ],
            [
              "boxed",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " into objects, as in "
            ],
            [
              "Map\u003cInteger, Integer\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Java auto-boxing will enable transparent use of these collections:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Collections in Java only work for objects. I.e. there is no "
          },
          {
            "Text": "Map\u003cint, int\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " in Java. Instead, primitive values need to be "
          },
          {
            "Text": "boxed",
            "AttrFlags": 4
          },
          {
            "Text": " into objects, as in "
          },
          {
            "Text": "Map\u003cInteger, Integer\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". Java auto-boxing will enable transparent use of these collections:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460133054,
        "id": "ee480385-c150-4317-a563-72dc2f9c1528",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460133054,
        "parent_id": "0763508c-7461-4a1d-8d20-317b52cb8d2a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Map\u003cInteger, Integer\u003e map = new HashMap\u003c\u003e();\nmap.put(1, 17); // Automatic boxing of int to Integer objects\nint a = map.get(1); // Automatic unboxing."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Map\u003cInteger, Integer\u003e map = new HashMap\u003c\u003e();\nmap.put(1, 17); // Automatic boxing of int to Integer objects\nint a = map.get(1); // Automatic unboxing.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460133054,
        "id": "5ea34d8b-ed3d-4905-b360-e0f7f23a26b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460133054,
        "parent_id": "0763508c-7461-4a1d-8d20-317b52cb8d2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, the overhead of this is "
            ],
            [
              "substantial",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". A "
            ],
            [
              "HashMap\u003cInteger, Integer\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will require about 72 bytes per entry (e.g. on 64-bit JVM with compressed pointers, and assuming integers larger than 256, and assuming 50% load of the map). Because the actual data is only 8 bytes, this yields a massive overhead. Furthermore, it requires two level of indirection (Map -\u003e Entry -\u003e Value) it is unnecessarily slow."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately, the overhead of this is "
          },
          {
            "Text": "substantial",
            "AttrFlags": 4
          },
          {
            "Text": ". A "
          },
          {
            "Text": "HashMap\u003cInteger, Integer\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " will require about 72 bytes per entry (e.g. on 64-bit JVM with compressed pointers, and assuming integers larger than 256, and assuming 50% load of the map). Because the actual data is only 8 bytes, this yields a massive overhead. Furthermore, it requires two level of indirection (Map -\u003e Entry -\u003e Value) it is unnecessarily slow."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460133054,
        "id": "d6c787fb-3515-4978-9955-15c530f16390",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460133054,
        "parent_id": "0763508c-7461-4a1d-8d20-317b52cb8d2a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There exist several libraries with optimized collections for primitive data types (that require only ~16 bytes per entry at 50% load, i.e. 4x less memory, and one level of indirection less), that can yield substantial performance benefits when using large collections of primitive values in Java."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There exist several libraries with optimized collections for primitive data types (that require only ~16 bytes per entry at 50% load, i.e. 4x less memory, and one level of indirection less), that can yield substantial performance benefits when using large collections of primitive values in Java."
          }
        ]
      }
    ],
    "title": "130 Collections and Primitive Values"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}