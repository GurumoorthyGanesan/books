{
  "ID": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
  "Root": {
    "alive": true,
    "content": [
      "b497df34-89e7-4327-9164-f415b987e5c4",
      "2f27bdf0-cd15-4c8f-b079-be83a249c510",
      "e9285157-7c97-4190-aef8-c56c607413df",
      "a0c09d96-dbef-4536-808f-352211d341eb",
      "eed0ad87-3e92-4036-8f37-3aaf1dd30fee",
      "fceb7abf-cd97-4480-88f2-25e0b75a1805",
      "62d5fe33-0916-42aa-af2e-4173791ca0bc",
      "92ce6539-247f-4fd2-91a6-418c706a9d09",
      "0a8c76c8-4680-4eeb-b229-e0301974312f",
      "687379ce-48df-4cf6-8c92-736c5a1a19c8",
      "923ddc34-5ff0-47d4-aacd-7150130184b3",
      "2e9c8beb-78c9-49cc-b35c-5d56e9964a2f",
      "999927c3-6136-4fcf-9c8f-d70200009a72",
      "bb4304a5-7943-4c56-a8d4-c0d14c7c2ad3",
      "c2c406c4-b488-4498-8479-e5bc42a2b57a",
      "37ca4458-4898-4d9c-986a-15394893234a",
      "85b227eb-7150-407e-89fc-cdff54e26a1f",
      "51aa1ca5-b5ef-493f-a63f-f63045fd6b82",
      "9dd5e391-8c17-4345-be92-690b9bbc55b8",
      "d6574e82-be42-4743-8fde-1f4c4b928989",
      "d9c2d9a0-1762-42f8-9b6d-8843eab48d57",
      "24561d61-6c93-4f3b-ab1d-0e6a2d90e60e",
      "11df991b-e38d-47cf-a5c2-3116d438458d",
      "897f43a9-2925-4b7f-92b4-df5a381def06",
      "f9c7dd63-ac3f-47a9-a586-b00a485359ae",
      "596392bd-e611-4e57-8bf0-1c4ea6f7584c",
      "d72a33ee-1b5c-4a28-9456-18d6c25fae99",
      "e432b43a-9ac9-4954-9449-31314fe7d268",
      "5f15022d-e193-49c1-a918-2dbfca2c9b4f",
      "a517d743-f98f-4430-9f15-792b2f8ae112",
      "a140c049-7611-4428-8ead-e4e0fae6f485",
      "6a0dea82-53d3-46e7-9753-8e50a63af6d8",
      "be8efc05-c25e-445a-8720-f10bbf37e365",
      "93afb793-0c6e-4b20-a98c-2d48d03356a6",
      "cb4f122e-aa1c-43d6-b29a-6231dc6a6ab5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518476466,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551748244154,
    "parent_id": "bac27a47-c983-46b6-ac55-bf131c4ab1ec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pitfall Shared variables require proper synchronization"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476455,
        "id": "b497df34-89e7-4327-9164-f415b987e5c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476455,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider this example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider this example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476458,
        "id": "2f27bdf0-cd15-4c8f-b079-be83a249c510",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476458,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class ThreadTest implements Runnable {\n   \n    private boolean stop = false;\n    \n    public void run() {\n        long counter = 0;\n        while (!stop) {\n            counter = counter + 1;\n        }\n        System.out.println(\"Counted \" + counter);\n    }\n\n    public static void main(String[] args) {\n        ThreadTest tt = new ThreadTest();\n        new Thread(tt).start();    // Create and start child thread\n        Thread.sleep(1000);\n        tt.stop = true;            // Tell child thread to stop.\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class ThreadTest implements Runnable {\n   \n    private boolean stop = false;\n    \n    public void run() {\n        long counter = 0;\n        while (!stop) {\n            counter = counter + 1;\n        }\n        System.out.println(\"Counted \" + counter);\n    }\n\n    public static void main(String[] args) {\n        ThreadTest tt = new ThreadTest();\n        new Thread(tt).start();    // Create and start child thread\n        Thread.sleep(1000);\n        tt.stop = true;            // Tell child thread to stop.\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476458,
        "id": "e9285157-7c97-4190-aef8-c56c607413df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476458,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The intent of this program is intended to start a thread, let it run for 1000 milliseconds, and then cause it to stop by setting the "
            ],
            [
              "stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " flag."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The intent of this program is intended to start a thread, let it run for 1000 milliseconds, and then cause it to stop by setting the "
          },
          {
            "Text": "stop",
            "AttrFlags": 2
          },
          {
            "Text": " flag."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476459,
        "id": "a0c09d96-dbef-4536-808f-352211d341eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476459,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Will it work as intended?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Will it work as intended?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476459,
        "id": "eed0ad87-3e92-4036-8f37-3aaf1dd30fee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476459,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Maybe yes, may be no."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Maybe yes, may be no."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476459,
        "id": "fceb7abf-cd97-4480-88f2-25e0b75a1805",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476459,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An application does not necessarily stop when the "
            ],
            [
              "main",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method returns. If another thread has been created, and that thread has not been marked as a daemon thread, then the application will continue to run after the main thread has ended. In this example, that means that the application will keep running until child thread ends. That should happens when "
            ],
            [
              "tt.stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is set to "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An application does not necessarily stop when the "
          },
          {
            "Text": "main",
            "AttrFlags": 2
          },
          {
            "Text": " method returns. If another thread has been created, and that thread has not been marked as a daemon thread, then the application will continue to run after the main thread has ended. In this example, that means that the application will keep running until child thread ends. That should happens when "
          },
          {
            "Text": "tt.stop",
            "AttrFlags": 2
          },
          {
            "Text": " is set to "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476459,
        "id": "62d5fe33-0916-42aa-af2e-4173791ca0bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476459,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But that is actually not strictly true. In fact, the child thread will stop after it has "
            ],
            [
              "observed",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the value "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Will that happen? Maybe yes, maybe no."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But that is actually not strictly true. In fact, the child thread will stop after it has "
          },
          {
            "Text": "observed",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "stop",
            "AttrFlags": 2
          },
          {
            "Text": " with the value "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ". Will that happen? Maybe yes, maybe no."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476460,
        "id": "92ce6539-247f-4fd2-91a6-418c706a9d09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476460,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Java Language Specification "
            ],
            [
              "guarantees",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that memory reads and writes made in a thread are visible to that thread, as per the order of the statements in the source code. However, in general, this is NOT guaranteed when one thread writes and another thread (subsequently) reads. To get guaranteed visibility, there needs to be a chain of "
            ],
            [
              "happens-before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " relations between a write and a subsequent read. In the example above, there is no such chain for the update to the "
            ],
            [
              "stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " flag, and therefore it is not guaranteed that the child thread will see "
            ],
            [
              "stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " change to "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Java Language Specification "
          },
          {
            "Text": "guarantees",
            "AttrFlags": 4
          },
          {
            "Text": " that memory reads and writes made in a thread are visible to that thread, as per the order of the statements in the source code. However, in general, this is NOT guaranteed when one thread writes and another thread (subsequently) reads. To get guaranteed visibility, there needs to be a chain of "
          },
          {
            "Text": "happens-before",
            "AttrFlags": 4
          },
          {
            "Text": " relations between a write and a subsequent read. In the example above, there is no such chain for the update to the "
          },
          {
            "Text": "stop",
            "AttrFlags": 2
          },
          {
            "Text": " flag, and therefore it is not guaranteed that the child thread will see "
          },
          {
            "Text": "stop",
            "AttrFlags": 2
          },
          {
            "Text": " change to "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476460,
        "id": "0a8c76c8-4680-4eeb-b229-e0301974312f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476460,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Note to authors: There should be a separate Topic on the Java Memory Model to go into the deep technical details.)",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Note to authors: There should be a separate Topic on the Java Memory Model to go into the deep technical details.)",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476460,
        "id": "687379ce-48df-4cf6-8c92-736c5a1a19c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476460,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How do we fix the problem?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How do we fix the problem?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476460,
        "id": "923ddc34-5ff0-47d4-aacd-7150130184b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476460,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, there are two simple ways to ensure that the "
            ],
            [
              "stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " update is visible:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, there are two simple ways to ensure that the "
          },
          {
            "Text": "stop",
            "AttrFlags": 2
          },
          {
            "Text": " update is visible:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476461,
        "id": "2e9c8beb-78c9-49cc-b35c-5d56e9964a2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476461,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Declare "
            ],
            [
              "stop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; i.e."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Declare "
          },
          {
            "Text": "stop",
            "AttrFlags": 2
          },
          {
            "Text": " to be "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": "; i.e."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476461,
        "id": "999927c3-6136-4fcf-9c8f-d70200009a72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476461,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private volatile boolean stop = false;\n\nFor a `volatile` variable, the JLS specifies that there is a *happens-before* relation between a write by one thread and a later read by a second thread."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private volatile boolean stop = false;\n\nFor a `volatile` variable, the JLS specifies that there is a *happens-before* relation between a write by one thread and a later read by a second thread.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476462,
        "id": "bb4304a5-7943-4c56-a8d4-c0d14c7c2ad3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476462,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use a mutex to synchronize as follows:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use a mutex to synchronize as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476462,
        "id": "c2c406c4-b488-4498-8479-e5bc42a2b57a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476462,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class ThreadTest implements Runnable {\n   \n    private boolean stop = false;\n    \n    public void run() {\n        long counter = 0;\n        while (true) {\n            synchronize (this) {\n                if (stop) {\n                    break;\n                }\n            }\n            counter = counter + 1;\n        }\n        System.out.println(\"Counted \" + counter);\n    }\n\n    public static void main(String[] args) {\n        ThreadTest tt = new ThreadTest();\n        new Thread(tt).start();    // Create and start child thread\n        Thread.sleep(1000);\n        synchronize (tt) {\n            tt.stop = true;        // Tell child thread to stop.\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class ThreadTest implements Runnable {\n   \n    private boolean stop = false;\n    \n    public void run() {\n        long counter = 0;\n        while (true) {\n            synchronize (this) {\n                if (stop) {\n                    break;\n                }\n            }\n            counter = counter + 1;\n        }\n        System.out.println(\"Counted \" + counter);\n    }\n\n    public static void main(String[] args) {\n        ThreadTest tt = new ThreadTest();\n        new Thread(tt).start();    // Create and start child thread\n        Thread.sleep(1000);\n        synchronize (tt) {\n            tt.stop = true;        // Tell child thread to stop.\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476462,
        "id": "37ca4458-4898-4d9c-986a-15394893234a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476462,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to ensuring that there is mutual exclusion, the JLS specifies that there is a "
            ],
            [
              "happens-before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " relation between the releasing a mutex in one thread and gaining the same mutex in a second thread."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to ensuring that there is mutual exclusion, the JLS specifies that there is a "
          },
          {
            "Text": "happens-before",
            "AttrFlags": 4
          },
          {
            "Text": " relation between the releasing a mutex in one thread and gaining the same mutex in a second thread."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476462,
        "id": "85b227eb-7150-407e-89fc-cdff54e26a1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476462,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But isn’t assignment atomic?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "But isn’t assignment atomic?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476462,
        "id": "51aa1ca5-b5ef-493f-a63f-f63045fd6b82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476462,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Yes it is!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Yes it is!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "9dd5e391-8c17-4345-be92-690b9bbc55b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, that fact does not mean that the effects of update will be visible simultaneously to all threads. Only a proper chain of "
            ],
            [
              "happens-before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " relations will guarantee that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, that fact does not mean that the effects of update will be visible simultaneously to all threads. Only a proper chain of "
          },
          {
            "Text": "happens-before",
            "AttrFlags": 4
          },
          {
            "Text": " relations will guarantee that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "d6574e82-be42-4743-8fde-1f4c4b928989",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why did they do this?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why did they do this?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "d9c2d9a0-1762-42f8-9b6d-8843eab48d57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Programmers doing multi-threaded programming in Java for the first time find the Memory Model is challenging. Programs behave in an unintuitive way because the natural expectation is that writes are visible uniformly. So why the Java designers design the Memory Model this way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Programmers doing multi-threaded programming in Java for the first time find the Memory Model is challenging. Programs behave in an unintuitive way because the natural expectation is that writes are visible uniformly. So why the Java designers design the Memory Model this way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "24561d61-6c93-4f3b-ab1d-0e6a2d90e60e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It actually comes down to a compromise between performance and ease of use (for the programmer)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It actually comes down to a compromise between performance and ease of use (for the programmer)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "11df991b-e38d-47cf-a5c2-3116d438458d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A modern computer architecture consists of multiple processors (cores) with individual register sets. Main memory is accessible either to all processors or to groups of processors. Another property of modern computer hardware is that access to registers is typically orders of magnitude faster to access than access to main memory. As the number of cores scales up, it is easy to see that reading and writing to main memory can become a system’s main performance bottleneck."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A modern computer architecture consists of multiple processors (cores) with individual register sets. Main memory is accessible either to all processors or to groups of processors. Another property of modern computer hardware is that access to registers is typically orders of magnitude faster to access than access to main memory. As the number of cores scales up, it is easy to see that reading and writing to main memory can become a system’s main performance bottleneck."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "897f43a9-2925-4b7f-92b4-df5a381def06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This mismatch is addressed by implementing one or more levels of memory caching between the processor cores and main memory. Each core access memory cells via its cache. Normally, a main memory read only happens when there is a cache miss, and a main memory write only happens when a cache line needs to be flushed. For an application where each core’s working set of memory locations will fit into its cache, the core speed is no longer limited by main memory speed / bandwidth."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This mismatch is addressed by implementing one or more levels of memory caching between the processor cores and main memory. Each core access memory cells via its cache. Normally, a main memory read only happens when there is a cache miss, and a main memory write only happens when a cache line needs to be flushed. For an application where each core’s working set of memory locations will fit into its cache, the core speed is no longer limited by main memory speed / bandwidth."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476463,
        "id": "f9c7dd63-ac3f-47a9-a586-b00a485359ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476463,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But that gives us a new problem when multiple cores are reading and writing shared variables. The latest version of a variable may sit in one core’s cache. Unless the that core flushes the cache line to main memory, AND other cores invalidate their cached copy of older versions, some of them are liable to see stale versions of the variable. But if the caches were flushed to memory each time there is a cache write (“just in case” there was a read by another core) that would consume main memory bandwidth unnecessarily."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But that gives us a new problem when multiple cores are reading and writing shared variables. The latest version of a variable may sit in one core’s cache. Unless the that core flushes the cache line to main memory, AND other cores invalidate their cached copy of older versions, some of them are liable to see stale versions of the variable. But if the caches were flushed to memory each time there is a cache write (“just in case” there was a read by another core) that would consume main memory bandwidth unnecessarily."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476464,
        "id": "596392bd-e611-4e57-8bf0-1c4ea6f7584c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476464,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The standard solution used at the hardware instruction set level is to provide instructions for cache invalidation and a cache write-through, and leave it to the compiler to decide when to use them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The standard solution used at the hardware instruction set level is to provide instructions for cache invalidation and a cache write-through, and leave it to the compiler to decide when to use them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476464,
        "id": "d72a33ee-1b5c-4a28-9456-18d6c25fae99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476464,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Returning to Java. the Memory Model is designed so that the Java compilers are not required to issue cache invalidation and write-through instructions where they are not really needed. The assumption is that the programmer will use an appropriate synchronization mechanism (e.g. primitive mutexes, "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", higher-level concurrency classes and so on) to indicate that it needs memory visibility. In the absence of a "
            ],
            [
              "happens-before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " relation, the Java compilers are free to "
            ],
            [
              "assume",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that no cache operations (or similar) are required."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Returning to Java. the Memory Model is designed so that the Java compilers are not required to issue cache invalidation and write-through instructions where they are not really needed. The assumption is that the programmer will use an appropriate synchronization mechanism (e.g. primitive mutexes, "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": ", higher-level concurrency classes and so on) to indicate that it needs memory visibility. In the absence of a "
          },
          {
            "Text": "happens-before",
            "AttrFlags": 4
          },
          {
            "Text": " relation, the Java compilers are free to "
          },
          {
            "Text": "assume",
            "AttrFlags": 4
          },
          {
            "Text": " that no cache operations (or similar) are required."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476464,
        "id": "e432b43a-9ac9-4954-9449-31314fe7d268",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476464,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This has significant performance advantages for multi-threaded applications, but the downside is that writing correct multi-threaded applications is not a simple matter. The programmer "
            ],
            [
              "does",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " have to understand what he or she is doing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This has significant performance advantages for multi-threaded applications, but the downside is that writing correct multi-threaded applications is not a simple matter. The programmer "
          },
          {
            "Text": "does",
            "AttrFlags": 4
          },
          {
            "Text": " have to understand what he or she is doing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476465,
        "id": "5f15022d-e193-49c1-a918-2dbfca2c9b4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476465,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why can’t I reproduce this?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why can’t I reproduce this?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476465,
        "id": "a517d743-f98f-4430-9f15-792b2f8ae112",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476465,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are a number of reasons why problems like this are difficult to reproduce:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are a number of reasons why problems like this are difficult to reproduce:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476465,
        "id": "a140c049-7611-4428-8ead-e4e0fae6f485",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476465,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As explained above, the consequence of not dealing with memory visibility issues problems properly is "
            ],
            [
              "typically",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that your compiled application does not handle the memory caches correctly. However, as we alluded to above, memory caches often get flushed anyway."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "As explained above, the consequence of not dealing with memory visibility issues problems properly is "
          },
          {
            "Text": "typically",
            "AttrFlags": 4
          },
          {
            "Text": " that your compiled application does not handle the memory caches correctly. However, as we alluded to above, memory caches often get flushed anyway."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476465,
        "id": "6a0dea82-53d3-46e7-9753-8e50a63af6d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476465,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you change the hardware platform, the characteristics of the memory caches may change. This can lead to different behavior if your application does not synchronize correctly."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you change the hardware platform, the characteristics of the memory caches may change. This can lead to different behavior if your application does not synchronize correctly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476466,
        "id": "be8efc05-c25e-445a-8720-f10bbf37e365",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476466,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may be observing the effects of "
            ],
            [
              "serendipitous",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " synchronization. For example, if you add traceprints, their is typically some synchronization happening behind the scenes in the I/O streams that causes cache flushes. So adding traceprints "
            ],
            [
              "often",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " causes the application to behave differently."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may be observing the effects of "
          },
          {
            "Text": "serendipitous",
            "AttrFlags": 4
          },
          {
            "Text": " synchronization. For example, if you add traceprints, their is typically some synchronization happening behind the scenes in the I/O streams that causes cache flushes. So adding traceprints "
          },
          {
            "Text": "often",
            "AttrFlags": 4
          },
          {
            "Text": " causes the application to behave differently."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476466,
        "id": "93afb793-0c6e-4b20-a98c-2d48d03356a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476466,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Running an application under a debugger causes it to be compiled differently by the JIT compiler. Breakpoints and single stepping exacerbate this. These effects will often change the way an application behaves."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Running an application under a debugger causes it to be compiled differently by the JIT compiler. Breakpoints and single stepping exacerbate this. These effects will often change the way an application behaves."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518476466,
        "id": "cb4f122e-aa1c-43d6-b29a-6231dc6a6ab5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518476466,
        "parent_id": "9185338a-4a8a-4ec1-9c54-b860df65d9e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These things make bugs that are due to inadequate synchronization particularly difficult to solve."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These things make bugs that are due to inadequate synchronization particularly difficult to solve."
          }
        ]
      }
    ],
    "title": "Pitfall Shared variables require proper synchronization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}