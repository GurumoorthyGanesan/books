{
  "ID": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
  "Root": {
    "alive": true,
    "content": [
      "5996241f-a431-4c69-8970-d00772f67a6b",
      "9c91999e-ab29-4b23-a13a-d0d67c98280e",
      "1c088317-cee2-4759-972c-d3563388c99f",
      "a56660b5-5126-4505-8697-c1ef32b73fd3",
      "6638e0d9-62d8-4b37-9c5d-918083e6872a",
      "5407393a-c02d-419c-af0f-df2c92173094",
      "dc7138c1-7ea0-4247-9d97-e896c06ae456",
      "c28055dc-6a0a-48e3-89a4-e89993b8ea2e",
      "73fa82c1-a5f7-40dd-846a-643165f065b9",
      "ed027d1e-ca24-4118-95fe-ddda8e94acfa",
      "c53eda48-9846-43d5-a9ff-5e3791dc34ef",
      "fee2c2b2-75d9-47a5-927b-508072039751",
      "e3186726-121f-4aa5-8e58-fd9e4f1e8034",
      "f7f24b8b-7e33-47aa-9c53-5bcbb96db01e",
      "5eefb9db-e323-472c-a1a7-e32434d5f5df",
      "b9179c7f-d99e-401e-9e0b-6cfcfc04ba55",
      "f1dffb97-5691-43d3-8cfb-f119f5674120",
      "c373724f-5a9b-4118-915e-d11b65b1063b",
      "ac20df58-408b-4e2f-b3b2-2041d7113216",
      "07c4cf2d-c42a-4c3d-bc4a-5726fc775f5a",
      "7c8f4521-4b4e-4cc9-9074-c132f091dc6c",
      "4becb8a4-b56c-4ec1-a66f-0154537e9eaa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519517812,
    "id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519517812,
    "parent_id": "87ac3ba4-bd8c-44a0-86ea-f0715687a44c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Constant Expressions"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517801,
        "id": "5996241f-a431-4c69-8970-d00772f67a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517801,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A constant expression is an expression that yields a primitive type or a String, and whose value can be evaluated at compile time to a literal. The expression must evaluate without throwing an exception, and it must be composed of only the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A constant expression is an expression that yields a primitive type or a String, and whose value can be evaluated at compile time to a literal. The expression must evaluate without throwing an exception, and it must be composed of only the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517802,
        "id": "9c91999e-ab29-4b23-a13a-d0d67c98280e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517802,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Primitive and String literals."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Primitive and String literals."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517802,
        "id": "1c088317-cee2-4759-972c-d3563388c99f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517802,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type casts to primitive types or "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type casts to primitive types or "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517803,
        "id": "a56660b5-5126-4505-8697-c1ef32b73fd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517803,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following unary operators: "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following unary operators: "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517804,
        "id": "6638e0d9-62d8-4b37-9c5d-918083e6872a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517804,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following binary operators: "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "%",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003e\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "||",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following binary operators: "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "%",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003e\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "||",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517805,
        "id": "5407393a-c02d-419c-af0f-df2c92173094",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517805,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ternary conditional operator "
            ],
            [
              "?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              ":",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ternary conditional operator "
          },
          {
            "Text": "?",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": ":",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517805,
        "id": "dc7138c1-7ea0-4247-9d97-e896c06ae456",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517805,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parenthesized constant expressions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parenthesized constant expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517805,
        "id": "c28055dc-6a0a-48e3-89a4-e89993b8ea2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517805,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Simple names that refer to constant variables. (A constant variable is a variable declared as "
            ],
            [
              "final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where the initializer expression is itself a constant expression.)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Simple names that refer to constant variables. (A constant variable is a variable declared as "
          },
          {
            "Text": "final",
            "AttrFlags": 2
          },
          {
            "Text": " where the initializer expression is itself a constant expression.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517806,
        "id": "73fa82c1-a5f7-40dd-846a-643165f065b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517806,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Qualified names of the form "
            ],
            [
              "\u003cTypeName\u003e . \u003cIdentifier\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that refer to constant variables."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Qualified names of the form "
          },
          {
            "Text": "\u003cTypeName\u003e . \u003cIdentifier\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " that refer to constant variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517806,
        "id": "ed027d1e-ca24-4118-95fe-ddda8e94acfa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517806,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the above list "
            ],
            [
              "excludes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the assignment operators, "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "instanceof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", method calls and references to general variables or fields."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the above list "
          },
          {
            "Text": "excludes",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": ", the assignment operators, "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "instanceof",
            "AttrFlags": 2
          },
          {
            "Text": ", method calls and references to general variables or fields."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517807,
        "id": "c53eda48-9846-43d5-a9ff-5e3791dc34ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517807,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Constant expressions of type "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " result in an “interned” "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and floating point operations in constant expressions are evaluated with FP-strict semantics."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Constant expressions of type "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " result in an “interned” "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ", and floating point operations in constant expressions are evaluated with FP-strict semantics."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517807,
        "id": "fee2c2b2-75d9-47a5-927b-508072039751",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517807,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Uses for Constant Expressions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Uses for Constant Expressions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517808,
        "id": "e3186726-121f-4aa5-8e58-fd9e4f1e8034",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517808,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Constant expressions can be used (just about) anywhere that a normal expression can be used. However, they have a special significance in the following contexts."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Constant expressions can be used (just about) anywhere that a normal expression can be used. However, they have a special significance in the following contexts."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517808,
        "id": "f7f24b8b-7e33-47aa-9c53-5bcbb96db01e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517808,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Constant expressions are required for case labels in switch statements. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Constant expressions are required for case labels in switch statements. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517808,
        "id": "5eefb9db-e323-472c-a1a7-e32434d5f5df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517808,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "switch (someValue) {\ncase 1 + 1:            // OK\ncase Math.min(2, 3):   // Error - not a constant expression\n    doSomething();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "switch (someValue) {\ncase 1 + 1:            // OK\ncase Math.min(2, 3):   // Error - not a constant expression\n    doSomething();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517810,
        "id": "b9179c7f-d99e-401e-9e0b-6cfcfc04ba55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517810,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the expression on the right hand side of an assignment is a constant expression, then the assignment can perform a primitive narrowing conversion. This is allowed provided that the value of the constant expression is within the range of the type on the left hand side. (See "
            ],
            [
              "JLS 5.1.3",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.3"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "5.2",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.2"
                ]
              ]
            ],
            [
              ") For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the expression on the right hand side of an assignment is a constant expression, then the assignment can perform a primitive narrowing conversion. This is allowed provided that the value of the constant expression is within the range of the type on the left hand side. (See "
          },
          {
            "Text": "JLS 5.1.3",
            "Link": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.3"
          },
          {
            "Text": " and "
          },
          {
            "Text": "5.2",
            "Link": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.2"
          },
          {
            "Text": ") For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517810,
        "id": "f1dffb97-5691-43d3-8cfb-f119f5674120",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517810,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "byte b1 = 1 + 1;             // OK - primitive narrowing conversion.\nbyte b2 = 127 + 1;           // Error - out of range\nbyte b3 = b1 + 1;            // Error - not a constant expession\nbyte b4 = (byte) (b1 + 1);   // OK"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "byte b1 = 1 + 1;             // OK - primitive narrowing conversion.\nbyte b2 = 127 + 1;           // Error - out of range\nbyte b3 = b1 + 1;            // Error - not a constant expession\nbyte b4 = (byte) (b1 + 1);   // OK",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517811,
        "id": "c373724f-5a9b-4118-915e-d11b65b1063b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517811,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a constant expression is used as the condition in a "
            ],
            [
              "do",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "while",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then it affects the readability analysis. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a constant expression is used as the condition in a "
          },
          {
            "Text": "do",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "while",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": ", then it affects the readability analysis. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517811,
        "id": "ac20df58-408b-4e2f-b3b2-2041d7113216",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517811,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "while (false) {\n    doSomething();           // Error - statenent not reachable\n}\nboolean flag = false;\nwhile (flag) {\n    doSomething();           // OK\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "while (false) {\n    doSomething();           // Error - statenent not reachable\n}\nboolean flag = false;\nwhile (flag) {\n    doSomething();           // OK\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517811,
        "id": "07c4cf2d-c42a-4c3d-bc4a-5726fc775f5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517811,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Note that this does not apply "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements. The Java compiler allows the "
            ],
            [
              "then",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block of an "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement to be unreachable. This is the Java analog of conditional compilation in C and C++.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Note that this does not apply "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " statements. The Java compiler allows the "
          },
          {
            "Text": "then",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "else",
            "AttrFlags": 2
          },
          {
            "Text": " block of an "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " statement to be unreachable. This is the Java analog of conditional compilation in C and C++.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517811,
        "id": "7c8f4521-4b4e-4cc9-9074-c132f091dc6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517811,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, "
            ],
            [
              "static final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields in an class or interface with constant expression initializers are initialized eagerly. Thus, it is guaranteed that these constants will be observed in the initialized state, even when there is a cycle in the class initialization dependency graph."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, "
          },
          {
            "Text": "static final",
            "AttrFlags": 2
          },
          {
            "Text": " fields in an class or interface with constant expression initializers are initialized eagerly. Thus, it is guaranteed that these constants will be observed in the initialized state, even when there is a cycle in the class initialization dependency graph."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519517812,
        "id": "4becb8a4-b56c-4ec1-a66f-0154537e9eaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519517812,
        "parent_id": "1a21c5bb-afd6-4e51-8739-dd9f250f3ec6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information, refer to "
            ],
            [
              "JLS 15.28. Constant Expressions",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.3"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information, refer to "
          },
          {
            "Text": "JLS 15.28. Constant Expressions",
            "Link": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.3"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "040 Constant Expressions"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}