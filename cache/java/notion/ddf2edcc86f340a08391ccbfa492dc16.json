{
  "ID": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
  "Root": {
    "alive": true,
    "content": [
      "4f588f37-025e-411a-ac9f-eee2782acceb",
      "5607a19a-406e-4dc8-ba1e-58158071fcb2",
      "536d4241-acbc-489d-bce7-32b4362dc77f",
      "8b9667e8-f2c0-4945-bb2d-5e037c6e6129",
      "0da078ca-5385-42cf-883c-83198a5d845b",
      "c4cda210-a8b8-4c03-989f-7ce51d800c71",
      "001edf0c-0c58-4c00-b1fa-09ec37232ea3",
      "956130ff-5522-4488-be7a-81ac726bd444",
      "23a3dd6c-eb4f-4b91-8663-091c59cc0894",
      "85daa5f4-b725-4adb-b1a5-56b9b1f0439c",
      "9d3e369b-a597-486e-a3ed-3401f068cec4",
      "6f97994c-b4be-4cd4-b21c-f63ffe57bfee",
      "e3368f5b-4444-4857-9d90-fd47c121b189",
      "4c89861d-88a7-4913-b19d-4c395c4c4b99",
      "b570c2da-44f1-46bc-9bd0-3db64a7b3df5",
      "8a762aad-8785-4042-8743-9189f5809073",
      "320a6317-525f-4076-9668-12c8c1968782",
      "14260a78-b340-4626-b250-d47569ea9d6e",
      "9ddcabe4-6c0e-4b40-b921-adff0c6d8fe7",
      "5f21162c-032d-44e6-a6e4-4d07e4291202",
      "25847bbd-a3ae-4eee-8dc3-9f93179cd43c",
      "90540078-9ede-42d4-b914-b35f920923d9",
      "381b9b39-53f4-40e7-9f40-c9b039ee4441",
      "6bc93ac3-4c8d-47b0-93ea-c906a2483dcd",
      "d113d605-dcb3-4db2-9f99-cd22358d39b8",
      "9062a8e6-da0a-4fee-9c3d-ad9227fc25a6",
      "5ea95105-8964-48f7-ac79-9ac3147f5b64",
      "743a0145-fc59-4855-b16c-150b4a9e0fe5",
      "84ef21ab-7759-48b1-b694-78c0ad51539d",
      "068640ad-6a23-4a41-a1f2-a6a7a4f2cee8",
      "fee30469-1789-42be-82be-ccdf36f6f920",
      "49846ff2-fe5c-4388-b72f-ca7a7acecaa0",
      "28197bcb-3b03-4c79-8afb-df20d23d51a2",
      "32dd10e9-72ad-4d27-8b60-6db47eb9e99b",
      "6925ad12-fb10-41a9-8c55-d59a51814589",
      "9c294ff6-bafa-4059-94ef-97080ed411b7",
      "09149c13-7aaa-4763-8e24-a84517360457",
      "402f9f56-7cb3-492b-a7c5-05f9fb0d71c1",
      "bd20fbd3-029f-4e4f-b089-86951ee77ef9",
      "4923e8e5-187d-4a0c-8e4a-9823122b9bc0",
      "e2686b2d-b0dd-486b-a0fe-871c0e1f0ad6",
      "b661ffa4-83e8-4f4d-bf24-4cb46ae125a4",
      "8d2bd0bb-6154-4e1b-add1-d52c4b59e815",
      "a84902d1-ae0a-4a3e-86c0-2ef7ac673b85",
      "176508c7-1fb5-4ac4-9145-89fe97dfcce4",
      "88bd192d-9684-4f04-b997-206a5ce64d7b",
      "d4a62a67-edbf-45f2-874e-9debdd719d3b",
      "c3138b1a-b839-449d-b1bf-36fd079a2345",
      "75ccb2ab-c185-43c6-9b70-f6b75567f8ac",
      "5abbe5c5-63b7-42a5-9255-0116b65c3e0c",
      "bf3883f6-2c3e-49b2-b2aa-63f96e4281c0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518420160,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551758479416,
    "parent_id": "28d11fe4-92df-4393-8cbb-b9dadc487955",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pitfall - Efficiency concerns with regular expressions"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420142,
        "id": "4f588f37-025e-411a-ac9f-eee2782acceb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420142,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Regular expression matching is a powerful tool (in Java, and in other contexts) but it does have some drawbacks. One of these that regular expressions tends to be rather expensive."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Regular expression matching is a powerful tool (in Java, and in other contexts) but it does have some drawbacks. One of these that regular expressions tends to be rather expensive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420145,
        "id": "5607a19a-406e-4dc8-ba1e-58158071fcb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420145,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pattern and Matcher instances should be reused"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pattern and Matcher instances should be reused"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420145,
        "id": "536d4241-acbc-489d-bce7-32b4362dc77f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420145,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420146,
        "id": "8b9667e8-f2c0-4945-bb2d-5e037c6e6129",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420146,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * Test if all strings in a list consist of English letters and numbers.\n * @param strings the list to be checked\n * @return 'true' if an only if all strings satisfy the criteria\n * @throws NullPointerException if 'strings' is 'null' or a 'null' element.\n */\npublic boolean allAlphanumeric(List\u003cString\u003e strings) {\n    for (String s : strings) {\n        if (!s.matches(\"[A-Za-z0-9]*\")) {\n            return false;\n        }  \n    }\n    return true;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * Test if all strings in a list consist of English letters and numbers.\n * @param strings the list to be checked\n * @return 'true' if an only if all strings satisfy the criteria\n * @throws NullPointerException if 'strings' is 'null' or a 'null' element.\n */\npublic boolean allAlphanumeric(List\u003cString\u003e strings) {\n    for (String s : strings) {\n        if (!s.matches(\"[A-Za-z0-9]*\")) {\n            return false;\n        }  \n    }\n    return true;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420146,
        "id": "0da078ca-5385-42cf-883c-83198a5d845b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420146,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code is correct, but it is inefficient. The problem is in the "
            ],
            [
              "matches(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call. Under the hood, "
            ],
            [
              "s.matches(\"[A-Za-z0-9]*\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code is correct, but it is inefficient. The problem is in the "
          },
          {
            "Text": "matches(...)",
            "AttrFlags": 2
          },
          {
            "Text": " call. Under the hood, "
          },
          {
            "Text": "s.matches(\"[A-Za-z0-9]*\")",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420146,
        "id": "c4cda210-a8b8-4c03-989f-7ce51d800c71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420146,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Pattern.matches(s, \"[A-Za-z0-9]*\")"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Pattern.matches(s, \"[A-Za-z0-9]*\")",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420146,
        "id": "001edf0c-0c58-4c00-b1fa-09ec37232ea3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420146,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which is in turn equivalent to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which is in turn equivalent to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420146,
        "id": "956130ff-5522-4488-be7a-81ac726bd444",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420146,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Pattern.compile(\"[A-Za-z0-9]*\").matcher(s).matches()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Pattern.compile(\"[A-Za-z0-9]*\").matcher(s).matches()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420147,
        "id": "23a3dd6c-eb4f-4b91-8663-091c59cc0894",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420147,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Pattern.compile(\"[A-Za-z0-9]*\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call parses the regular expression, analyze it, and construct a "
            ],
            [
              "Pattern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object that holds the data structure that will be used by the regex engine. This is a non-trivial computation. Then a "
            ],
            [
              "Matcher",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object is created to wrap the "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument. Finally we call "
            ],
            [
              "match()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to do the actual pattern matching."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Pattern.compile(\"[A-Za-z0-9]*\")",
            "AttrFlags": 2
          },
          {
            "Text": " call parses the regular expression, analyze it, and construct a "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 2
          },
          {
            "Text": " object that holds the data structure that will be used by the regex engine. This is a non-trivial computation. Then a "
          },
          {
            "Text": "Matcher",
            "AttrFlags": 2
          },
          {
            "Text": " object is created to wrap the "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " argument. Finally we call "
          },
          {
            "Text": "match()",
            "AttrFlags": 2
          },
          {
            "Text": " to do the actual pattern matching."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420147,
        "id": "85daa5f4-b725-4adb-b1a5-56b9b1f0439c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420147,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem is that this work is all repeated for each loop iteration. The solution is to restructure the code as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem is that this work is all repeated for each loop iteration. The solution is to restructure the code as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420147,
        "id": "9d3e369b-a597-486e-a3ed-3401f068cec4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420147,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static Pattern ALPHA_NUMERIC = Pattern.compile(\"[A-Za-z0-9]*\");\n\npublic boolean allAlphanumeric(List\u003cString\u003e strings) {\n    Matcher matcher = ALPHA_NUMERIC.matcher(\"\");\n    for (String s : strings) {\n        matcher.reset(s);\n        if (!matcher.matches()) {\n            return false;\n        }  \n    }\n    return true;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static Pattern ALPHA_NUMERIC = Pattern.compile(\"[A-Za-z0-9]*\");\n\npublic boolean allAlphanumeric(List\u003cString\u003e strings) {\n    Matcher matcher = ALPHA_NUMERIC.matcher(\"\");\n    for (String s : strings) {\n        matcher.reset(s);\n        if (!matcher.matches()) {\n            return false;\n        }  \n    }\n    return true;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420149,
        "id": "6f97994c-b4be-4cd4-b21c-f63ffe57bfee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420149,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the "
            ],
            [
              "javadoc",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "Pattern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " states:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the "
          },
          {
            "Text": "javadoc",
            "Link": "http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html"
          },
          {
            "Text": " for "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 2
          },
          {
            "Text": " states:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420150,
        "id": "e3368f5b-4444-4857-9d90-fd47c121b189",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420150,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instances of this class are immutable and are safe for use by multiple concurrent threads. Instances of the Matcher class are not safe for such use."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instances of this class are immutable and are safe for use by multiple concurrent threads. Instances of the Matcher class are not safe for such use."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420150,
        "id": "4c89861d-88a7-4913-b19d-4c395c4c4b99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420150,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t use match() when you should use find()"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t use match() when you should use find()"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420150,
        "id": "b570c2da-44f1-46bc-9bd0-3db64a7b3df5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420150,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Suppose you want to test if a string "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " contains three or more digits in a row. You cn express this in various ways including:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Suppose you want to test if a string "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " contains three or more digits in a row. You cn express this in various ways including:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420150,
        "id": "8a762aad-8785-4042-8743-9189f5809073",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420150,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (s.matches(\".*[0-9]{3}.*\")) {\n    System.out.println(\"matches\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (s.matches(\".*[0-9]{3}.*\")) {\n    System.out.println(\"matches\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420150,
        "id": "320a6317-525f-4076-9668-12c8c1968782",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420150,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "or"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "or"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "14260a78-b340-4626-b250-d47569ea9d6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (Pattern.compile(\"[0-9]{3}\").matcher(s).find()) {\n    System.out.println(\"matches\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (Pattern.compile(\"[0-9]{3}\").matcher(s).find()) {\n    System.out.println(\"matches\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "9ddcabe4-6c0e-4b40-b921-adff0c6d8fe7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first one is more concise, but it is also likely to be less efficient. On the face of it, the first version is going to try to match the entire string against the pattern. Furthermore, since “.*” is a “greedy” pattern, the pattern matcher is likely to advance “eagerly” try to the end of the string, and backtrack until it finds a match."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first one is more concise, but it is also likely to be less efficient. On the face of it, the first version is going to try to match the entire string against the pattern. Furthermore, since “.*” is a “greedy” pattern, the pattern matcher is likely to advance “eagerly” try to the end of the string, and backtrack until it finds a match."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "5f21162c-032d-44e6-a6e4-4d07e4291202",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By contrast, the second version will search from left to right and will stop searching as soon as it finds the 3 digits in a row."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By contrast, the second version will search from left to right and will stop searching as soon as it finds the 3 digits in a row."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "25847bbd-a3ae-4eee-8dc3-9f93179cd43c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use more efficient alternatives to regular expressions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use more efficient alternatives to regular expressions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "90540078-9ede-42d4-b914-b35f920923d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Regular expressions are a powerful tool, but they should not be your only tool. A lot of tasks can be done more efficiently in other ways. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Regular expressions are a powerful tool, but they should not be your only tool. A lot of tasks can be done more efficiently in other ways. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "381b9b39-53f4-40e7-9f40-c9b039ee4441",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Pattern.compile(\"ABC\").matcher(s).find()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Pattern.compile(\"ABC\").matcher(s).find()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "6bc93ac3-4c8d-47b0-93ea-c906a2483dcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "does the same thing as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "does the same thing as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420151,
        "id": "d113d605-dcb3-4db2-9f99-cd22358d39b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420151,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "s.contains(\"ABC\")"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "s.contains(\"ABC\")",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420152,
        "id": "9062a8e6-da0a-4fee-9c3d-ad9227fc25a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420152,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "except that the latter is a lot more efficient. (Even if you can amortize the cost of compiling the regular expression.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "except that the latter is a lot more efficient. (Even if you can amortize the cost of compiling the regular expression.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420152,
        "id": "5ea95105-8964-48f7-ac79-9ac3147f5b64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420152,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often, the non-regex form is more complicated. For example, the test performed by the "
            ],
            [
              "matches()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call the earlier "
            ],
            [
              "allAlplanumeric",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method can be rewritten as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often, the non-regex form is more complicated. For example, the test performed by the "
          },
          {
            "Text": "matches()",
            "AttrFlags": 2
          },
          {
            "Text": " call the earlier "
          },
          {
            "Text": "allAlplanumeric",
            "AttrFlags": 2
          },
          {
            "Text": " method can be rewritten as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420152,
        "id": "743a0145-fc59-4855-b16c-150b4a9e0fe5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420152,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public boolean matches(String s) {\n    for (char c : s) {\n        if ((c \u003e= 'A' \u0026\u0026 c \u003c= 'Z') ||\n            (c \u003e= 'a' \u0026\u0026 c \u003c= 'z') ||\n            (c \u003e= '0' \u0026\u0026 c \u003c= '9')) {\n             return false;\n        }\n    }\n    return true;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public boolean matches(String s) {\n    for (char c : s) {\n        if ((c \u003e= 'A' \u0026\u0026 c \u003c= 'Z') ||\n            (c \u003e= 'a' \u0026\u0026 c \u003c= 'z') ||\n            (c \u003e= '0' \u0026\u0026 c \u003c= '9')) {\n             return false;\n        }\n    }\n    return true;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420152,
        "id": "84ef21ab-7759-48b1-b694-78c0ad51539d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420152,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now that is more code than using a "
            ],
            [
              "Matcher",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but it is also going to be significantly faster."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now that is more code than using a "
          },
          {
            "Text": "Matcher",
            "AttrFlags": 2
          },
          {
            "Text": ", but it is also going to be significantly faster."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420152,
        "id": "068640ad-6a23-4a41-a1f2-a6a7a4f2cee8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420152,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Catastrophic Backtracking"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Catastrophic Backtracking"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420152,
        "id": "fee30469-1789-42be-82be-ccdf36f6f920",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420152,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(This is potentially a problem with all implementations of regular expressions, but we will mention it here because it is a pitfall for "
            ],
            [
              "Pattern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " usage.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(This is potentially a problem with all implementations of regular expressions, but we will mention it here because it is a pitfall for "
          },
          {
            "Text": "Pattern",
            "AttrFlags": 2
          },
          {
            "Text": " usage.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420153,
        "id": "49846ff2-fe5c-4388-b72f-ca7a7acecaa0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420153,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider this (contrived) example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider this (contrived) example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420153,
        "id": "28197bcb-3b03-4c79-8afb-df20d23d51a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420153,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Pattern pat = Pattern.compile(\"(A+)+B\");\nSystem.out.println(pat.matcher(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\").matches());\nSystem.out.println(pat.matcher(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\").matches());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Pattern pat = Pattern.compile(\"(A+)+B\");\nSystem.out.println(pat.matcher(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\").matches());\nSystem.out.println(pat.matcher(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\").matches());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420153,
        "id": "32dd10e9-72ad-4d27-8b60-6db47eb9e99b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420153,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first "
            ],
            [
              "println",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call will quickly print "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The second one will print "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Eventually. Indeed, if you experiment with the code above, you will see that each time you add an "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before the "
            ],
            [
              "C",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the time take will double."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first "
          },
          {
            "Text": "println",
            "AttrFlags": 2
          },
          {
            "Text": " call will quickly print "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ". The second one will print "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ". Eventually. Indeed, if you experiment with the code above, you will see that each time you add an "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " before the "
          },
          {
            "Text": "C",
            "AttrFlags": 2
          },
          {
            "Text": ", the time take will double."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420153,
        "id": "6925ad12-fb10-41a9-8c55-d59a51814589",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420153,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is behavior is an example of "
            ],
            [
              "catastrophic backtracking",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The pattern matching engine that implements the regex matching is fruitlessly trying all of the "
            ],
            [
              "possible",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ways that the pattern "
            ],
            [
              "might",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " match."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is behavior is an example of "
          },
          {
            "Text": "catastrophic backtracking",
            "AttrFlags": 4
          },
          {
            "Text": ". The pattern matching engine that implements the regex matching is fruitlessly trying all of the "
          },
          {
            "Text": "possible",
            "AttrFlags": 4
          },
          {
            "Text": " ways that the pattern "
          },
          {
            "Text": "might",
            "AttrFlags": 4
          },
          {
            "Text": " match."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420154,
        "id": "9c294ff6-bafa-4059-94ef-97080ed411b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420154,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let us look at what "
            ],
            [
              "(A+)+B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " actually means. Superficially, it seems to say “one or more "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " characters followed by a "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value”, but in reality it says one or more groups, each of which consists of one or more "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " characters. So, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let us look at what "
          },
          {
            "Text": "(A+)+B",
            "AttrFlags": 2
          },
          {
            "Text": " actually means. Superficially, it seems to say “one or more "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " characters followed by a "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " value”, but in reality it says one or more groups, each of which consists of one or more "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " characters. So, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420154,
        "id": "09149c13-7aaa-4763-8e24-a84517360457",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420154,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "‘AB’ matches one way only: ‘(A)B’"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "‘AB’ matches one way only: ‘(A)B’"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420155,
        "id": "402f9f56-7cb3-492b-a7c5-05f9fb0d71c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420155,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "‘AAB’ matches two ways: ‘(AA)B’ or ’(A)(A)B`"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "‘AAB’ matches two ways: ‘(AA)B’ or ’(A)(A)B`"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420155,
        "id": "bd20fbd3-029f-4e4f-b089-86951ee77ef9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420155,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "‘AAAB’ matches four ways: ‘(AAA)B’ or ’(AA)(A)B"
            ],
            [
              "or '(A)(AA)B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or ’(A)(A)(A)B`"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "‘AAAB’ matches four ways: ‘(AAA)B’ or ’(AA)(A)B"
          },
          {
            "Text": "or '(A)(AA)B",
            "AttrFlags": 2
          },
          {
            "Text": " or ’(A)(A)(A)B`"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420155,
        "id": "4923e8e5-187d-4a0c-8e4a-9823122b9bc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420155,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and so on"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "and so on"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420155,
        "id": "e2686b2d-b0dd-486b-a0fe-871c0e1f0ad6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420155,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In other words, the number of possible matches is 2N where N is the number of "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " characters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In other words, the number of possible matches is 2N where N is the number of "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " characters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420156,
        "id": "b661ffa4-83e8-4f4d-bf24-4cb46ae125a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420156,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above example is clearly contrived, but patterns that exhibit this kind of performance characteristics (i.e. "
            ],
            [
              "O(2^N)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "O(N^K)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for a large "
            ],
            [
              "K",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") arise frequently when ill-considered regular expressions are used. There are some standard remedies:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above example is clearly contrived, but patterns that exhibit this kind of performance characteristics (i.e. "
          },
          {
            "Text": "O(2^N)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "O(N^K)",
            "AttrFlags": 2
          },
          {
            "Text": " for a large "
          },
          {
            "Text": "K",
            "AttrFlags": 2
          },
          {
            "Text": ") arise frequently when ill-considered regular expressions are used. There are some standard remedies:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420156,
        "id": "8d2bd0bb-6154-4e1b-add1-d52c4b59e815",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420156,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Avoid nesting repeating patterns within other repeating patterns."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Avoid nesting repeating patterns within other repeating patterns."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420156,
        "id": "a84902d1-ae0a-4a3e-86c0-2ef7ac673b85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420156,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Avoid using too many repeating patterns."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Avoid using too many repeating patterns."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420156,
        "id": "176508c7-1fb5-4ac4-9145-89fe97dfcce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420156,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use non-backtracking repetition as appropriate."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use non-backtracking repetition as appropriate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420157,
        "id": "88bd192d-9684-4f04-b997-206a5ce64d7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420157,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t use regexes for complicated parsing tasks. (Write a proper parser instead.)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t use regexes for complicated parsing tasks. (Write a proper parser instead.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420157,
        "id": "d4a62a67-edbf-45f2-874e-9debdd719d3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420157,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, beware of situations where a user or an API client can supply a regex string with pathological characteristics. That can lead to accidental or deliberate “denial of service”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, beware of situations where a user or an API client can supply a regex string with pathological characteristics. That can lead to accidental or deliberate “denial of service”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420157,
        "id": "c3138b1a-b839-449d-b1bf-36fd079a2345",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420157,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "References:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "References:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420158,
        "id": "75ccb2ab-c185-43c6-9b70-f6b75567f8ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420158,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Regular Expressions",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/regex"
                ]
              ]
            ],
            [
              " tag, particularly http://stackoverflow.com/documentation/regex/977/backtracking#t=201610010339131361163 and http://stackoverflow.com/documentation/regex/4527/when-you-should-not-use-regular-expressions#t=201610010339593564913"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Regular Expressions",
            "Link": "http://stackoverflow.com/documentation/regex"
          },
          {
            "Text": " tag, particularly http://stackoverflow.com/documentation/regex/977/backtracking#t=201610010339131361163 and http://stackoverflow.com/documentation/regex/4527/when-you-should-not-use-regular-expressions#t=201610010339593564913"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420159,
        "id": "5abbe5c5-63b7-42a5-9255-0116b65c3e0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420159,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“Regex Performance”",
              [
                [
                  "a",
                  "https://blog.codinghorror.com/regex-performance/"
                ]
              ]
            ],
            [
              " by Jeff Atwood."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "“Regex Performance”",
            "Link": "https://blog.codinghorror.com/regex-performance/"
          },
          {
            "Text": " by Jeff Atwood."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518420160,
        "id": "bf3883f6-2c3e-49b2-b2aa-63f96e4281c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518420160,
        "parent_id": "ddf2edcc-86f3-40a0-8391-ccbfa492dc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“How to kill Java with a Regular Expression”",
              [
                [
                  "a",
                  "http://andreas.haufler.info/2013/09/how-to-kill-java-with-regular-expression.html"
                ]
              ]
            ],
            [
              " by Andreas Haufler."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "“How to kill Java with a Regular Expression”",
            "Link": "http://andreas.haufler.info/2013/09/how-to-kill-java-with-regular-expression.html"
          },
          {
            "Text": " by Andreas Haufler."
          }
        ]
      }
    ],
    "title": "Pitfall - Efficiency concerns with regular expressions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}