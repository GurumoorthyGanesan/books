{
  "ID": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
  "Root": {
    "alive": true,
    "content": [
      "676ff4be-4bf2-4cad-acdf-0f55e7cc1d91",
      "bb1c132f-e931-4734-a289-fc45dfba3ade",
      "2c4dafb5-8eec-4d0c-857e-9e1517b85f93",
      "2a06927e-0953-486f-8fa4-db6326a37497",
      "04f0fd75-450e-4a30-96b7-0f851c16c6bd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460155096,
    "id": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460155096,
    "parent_id": "b352327f-4045-48dc-891e-ceda03965ca0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "110 Lambdas and Execute-around Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460155095,
        "id": "676ff4be-4bf2-4cad-acdf-0f55e7cc1d91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460155095,
        "parent_id": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several good examples of using lambdas as a FunctionalInterface in simple scenarios. A fairly common use case that can be improved by lambdas is what is called the Execute-Around pattern. In this pattern, you have a set of standard setup/teardown code that is needed for multiple scenarios surrounding use case specific code. A few common example of this are file io, database io, try/catch blocks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several good examples of using lambdas as a FunctionalInterface in simple scenarios. A fairly common use case that can be improved by lambdas is what is called the Execute-Around pattern. In this pattern, you have a set of standard setup/teardown code that is needed for multiple scenarios surrounding use case specific code. A few common example of this are file io, database io, try/catch blocks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460155095,
        "id": "bb1c132f-e931-4734-a289-fc45dfba3ade",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460155095,
        "parent_id": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface DataProcessor {\n    void process( Connection connection ) throws SQLException;;\n}\n\npublic void doProcessing( DataProcessor processor ) throws SQLException{\n    try (Connection connection = DBUtil.getDatabaseConnection();) {\n        processor.process(connection);\n        connection.commit();\n    } \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface DataProcessor {\n    void process( Connection connection ) throws SQLException;;\n}\n\npublic void doProcessing( DataProcessor processor ) throws SQLException{\n    try (Connection connection = DBUtil.getDatabaseConnection();) {\n        processor.process(connection);\n        connection.commit();\n    } \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460155095,
        "id": "2c4dafb5-8eec-4d0c-857e-9e1517b85f93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460155095,
        "parent_id": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then to call this method with a lambda it might look like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then to call this method with a lambda it might look like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460155095,
        "id": "2a06927e-0953-486f-8fa4-db6326a37497",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460155095,
        "parent_id": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void updateMyDAO(MyVO vo) throws DatabaseException {\n    doProcessing((Connection conn) -\u003e MyDAO.update(conn, ObjectMapper.map(vo)));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void updateMyDAO(MyVO vo) throws DatabaseException {\n    doProcessing((Connection conn) -\u003e MyDAO.update(conn, ObjectMapper.map(vo)));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460155096,
        "id": "04f0fd75-450e-4a30-96b7-0f851c16c6bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460155096,
        "parent_id": "467b61f9-8019-4019-b89b-0a2c5d7afc5b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is not limited to I/O operations. It can apply to any scenario where similar setup/tear down tasks are applicable with minor variations. The main benefit of this Pattern is code re-use and enforcing DRY (Don’t Repeat Yourself)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is not limited to I/O operations. It can apply to any scenario where similar setup/tear down tasks are applicable with minor variations. The main benefit of this Pattern is code re-use and enforcing DRY (Don’t Repeat Yourself)."
          }
        ]
      }
    ],
    "title": "110 Lambdas and Execute-around Pattern"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}