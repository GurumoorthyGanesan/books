{
  "ID": "5a976933-0432-476e-9bac-40a234e1d044",
  "Root": {
    "alive": true,
    "content": [
      "409dfc63-ad03-4ced-bad9-c01b1234eadd",
      "59da9a15-2231-4ff6-ac0a-a2a626258b83",
      "8a3db3b1-3f72-4ca5-adda-77e6716fbf13",
      "9c9b08b1-0887-4d91-911c-1f78a7603998",
      "d98d9714-6c23-4708-97dd-d226dfc91bf1",
      "53f44f31-2fd4-4664-bcbd-b699417447de",
      "07af85a5-6c4f-492a-8de7-9314fd622dbf",
      "0dc2635d-c679-4eb2-ba79-325acb42915e",
      "a76045c1-332d-4953-aef3-72aa38a8b33e",
      "3b3cdc94-3806-4665-86e1-ff0c542d9f4c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518381028,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5a976933-0432-476e-9bac-40a234e1d044",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518381028,
    "parent_id": "cd39ba46-bf9a-48ed-82fa-26244685c82f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pitfall - Using to test a boolean"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381012,
        "id": "409dfc63-ad03-4ced-bad9-c01b1234eadd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381012,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes a new Java programmer will write code like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes a new Java programmer will write code like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381019,
        "id": "59da9a15-2231-4ff6-ac0a-a2a626258b83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381019,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void check(boolean ok) {\n    if (ok == true) {           // Note 'ok == true'\n        System.out.println(\"It is OK\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void check(boolean ok) {\n    if (ok == true) {           // Note 'ok == true'\n        System.out.println(\"It is OK\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381020,
        "id": "8a3db3b1-3f72-4ca5-adda-77e6716fbf13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381020,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An experienced programmer would spot that as being clumsy and want to rewrite it as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An experienced programmer would spot that as being clumsy and want to rewrite it as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381020,
        "id": "9c9b08b1-0887-4d91-911c-1f78a7603998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381020,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void check(boolean ok) {\n    if (ok) {\n       System.out.println(\"It is OK\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void check(boolean ok) {\n    if (ok) {\n       System.out.println(\"It is OK\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381021,
        "id": "d98d9714-6c23-4708-97dd-d226dfc91bf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381021,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, there is more wrong with "
            ],
            [
              "ok == true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " than simple clumsiness. Consider this variation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, there is more wrong with "
          },
          {
            "Text": "ok == true",
            "AttrFlags": 2
          },
          {
            "Text": " than simple clumsiness. Consider this variation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381021,
        "id": "53f44f31-2fd4-4664-bcbd-b699417447de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381021,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void check(boolean ok) {\n    if (ok = true) {           // Oooops!\n        System.out.println(\"It is OK\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void check(boolean ok) {\n    if (ok = true) {           // Oooops!\n        System.out.println(\"It is OK\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381021,
        "id": "07af85a5-6c4f-492a-8de7-9314fd622dbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381021,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here the programmer has mistyped "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " … and now the code has a subtle bug. The expression "
            ],
            [
              "x = true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " unconditionally assigns "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and then evaluates to "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, the "
            ],
            [
              "check",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method will now print “It is OK” no matter what the parameter was."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here the programmer has mistyped "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " as "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": " … and now the code has a subtle bug. The expression "
          },
          {
            "Text": "x = true",
            "AttrFlags": 2
          },
          {
            "Text": " unconditionally assigns "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " and then evaluates to "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, the "
          },
          {
            "Text": "check",
            "AttrFlags": 2
          },
          {
            "Text": " method will now print “It is OK” no matter what the parameter was."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381022,
        "id": "0dc2635d-c679-4eb2-ba79-325acb42915e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381022,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The lesson here is to get out of the habit of using "
            ],
            [
              "== false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "== true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In addition to being verbose, they make your coding more error prone."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The lesson here is to get out of the habit of using "
          },
          {
            "Text": "== false",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "== true",
            "AttrFlags": 2
          },
          {
            "Text": ". In addition to being verbose, they make your coding more error prone."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381022,
        "id": "a76045c1-332d-4953-aef3-72aa38a8b33e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381022,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518381028,
        "id": "3b3cdc94-3806-4665-86e1-ff0c542d9f4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518381028,
        "parent_id": "5a976933-0432-476e-9bac-40a234e1d044",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: A possible alternative to "
            ],
            [
              "ok == true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that avoids the pitfall is to use "
            ],
            [
              "Yoda conditions",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Yoda_conditions"
                ]
              ]
            ],
            [
              "; i.e. put the literal on the left side of the relational operator, as in "
            ],
            [
              "true == ok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This works, but most programmers would probably agree that Yoda conditions look odd. Certainly "
            ],
            [
              "ok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or "
            ],
            [
              "!ok",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is more concise and more natural."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: A possible alternative to "
          },
          {
            "Text": "ok == true",
            "AttrFlags": 2
          },
          {
            "Text": " that avoids the pitfall is to use "
          },
          {
            "Text": "Yoda conditions",
            "Link": "https://en.wikipedia.org/wiki/Yoda_conditions"
          },
          {
            "Text": "; i.e. put the literal on the left side of the relational operator, as in "
          },
          {
            "Text": "true == ok",
            "AttrFlags": 2
          },
          {
            "Text": ". This works, but most programmers would probably agree that Yoda conditions look odd. Certainly "
          },
          {
            "Text": "ok",
            "AttrFlags": 2
          },
          {
            "Text": " (or "
          },
          {
            "Text": "!ok",
            "AttrFlags": 2
          },
          {
            "Text": ") is more concise and more natural."
          }
        ]
      }
    ],
    "title": "Pitfall - Using to test a boolean",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}