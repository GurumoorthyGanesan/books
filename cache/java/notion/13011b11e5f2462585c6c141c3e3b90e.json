{
  "ID": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
  "Root": {
    "alive": true,
    "content": [
      "d0b7b8f8-c0ac-4da4-8332-241f5f401c8a",
      "645de3a4-646c-487f-a049-2f9e6ad9ad30",
      "93db94a6-999d-4534-b3dd-1a768cde3adc",
      "44ff25ff-562b-4919-b45f-acdfc42f6863",
      "a2d27978-94f2-4668-89a2-571923cda898",
      "32edf02a-596f-4979-bf26-acb408e4c5d1",
      "2c257919-da92-442c-aba0-c4c385acd04e",
      "a3f5a537-2e91-4c62-8900-4c64a4a2dfdf",
      "7d1a3ea8-2d85-4ac7-bfe2-5e7d85b6c7c2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460156173,
    "id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460156173,
    "parent_id": "b352327f-4045-48dc-891e-ceda03965ca0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "120 Using lambda expressions predicates to get a certain values from a list"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156169,
        "id": "d0b7b8f8-c0ac-4da4-8332-241f5f401c8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156169,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Starting with Java 8, you can use lambda expressions \u0026 predicates."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Starting with Java 8, you can use lambda expressions \u0026 predicates."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156172,
        "id": "645de3a4-646c-487f-a049-2f9e6ad9ad30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156172,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example: Use a lambda expressions \u0026 a predicate to get a certain value from a list. In this example every person will be printed out with the fact if they are 18 and older or not."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example: Use a lambda expressions \u0026 a predicate to get a certain value from a list. In this example every person will be printed out with the fact if they are 18 and older or not."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156172,
        "id": "93db94a6-999d-4534-b3dd-1a768cde3adc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156172,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Person Class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Person Class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156172,
        "id": "44ff25ff-562b-4919-b45f-acdfc42f6863",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156172,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public int getAge() { return age; }\n    public String getName() { return name; }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public int getAge() { return age; }\n    public String getName() { return name; }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156172,
        "id": "a2d27978-94f2-4668-89a2-571923cda898",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156172,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The built-in interface Predicate from the java.util.function.Predicate packages is a functional interface with a "
            ],
            [
              "boolean test(T t)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The built-in interface Predicate from the java.util.function.Predicate packages is a functional interface with a "
          },
          {
            "Text": "boolean test(T t)",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156172,
        "id": "32edf02a-596f-4979-bf26-acb408e4c5d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156172,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156173,
        "id": "2c257919-da92-442c-aba0-c4c385acd04e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156173,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\n\npublic class LambdaExample {\n    public static void main(String[] args) {\n        List\u003cPerson\u003e personList = new ArrayList\u003cPerson\u003e();\n        personList.add(new Person(\"Jeroen\", 20));\n        personList.add(new Person(\"Jack\", 5));\n        personList.add(new Person(\"Lisa\", 19));\n\n        print(personList, p -\u003e p.getAge() \u003e= 18);\n    }\n\n    private static void print(List\u003cPerson\u003e personList, Predicate\u003cPerson\u003e checker) {\n        for (Person person : personList) {\n            if (checker.test(person)) {\n                System.out.print(person + \" matches your expression.\");\n            } else {\n                System.out.println(person  + \" doesn't match your expression.\");\n            }\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\n\npublic class LambdaExample {\n    public static void main(String[] args) {\n        List\u003cPerson\u003e personList = new ArrayList\u003cPerson\u003e();\n        personList.add(new Person(\"Jeroen\", 20));\n        personList.add(new Person(\"Jack\", 5));\n        personList.add(new Person(\"Lisa\", 19));\n\n        print(personList, p -\u003e p.getAge() \u003e= 18);\n    }\n\n    private static void print(List\u003cPerson\u003e personList, Predicate\u003cPerson\u003e checker) {\n        for (Person person : personList) {\n            if (checker.test(person)) {\n                System.out.print(person + \" matches your expression.\");\n            } else {\n                System.out.println(person  + \" doesn't match your expression.\");\n            }\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156173,
        "id": "a3f5a537-2e91-4c62-8900-4c64a4a2dfdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156173,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "print(personList, p -\u003e p.getAge() \u003e= 18);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method takes a lambda expression (because the Predicate is used a parameter) where you can define the expression that is needed. The checker’s test method checks if this expression is correct or not: "
            ],
            [
              "checker.test(person)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "print(personList, p -\u003e p.getAge() \u003e= 18);",
            "AttrFlags": 2
          },
          {
            "Text": " method takes a lambda expression (because the Predicate is used a parameter) where you can define the expression that is needed. The checker’s test method checks if this expression is correct or not: "
          },
          {
            "Text": "checker.test(person)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460156173,
        "id": "7d1a3ea8-2d85-4ac7-bfe2-5e7d85b6c7c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460156173,
        "parent_id": "13011b11-e5f2-4625-85c6-c141c3e3b90e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can easily change this to something else, for example to "
            ],
            [
              "print(personList, p -\u003e p.getName().startsWith(\"J\"));",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This will check if the person’s name starts with a “J”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can easily change this to something else, for example to "
          },
          {
            "Text": "print(personList, p -\u003e p.getName().startsWith(\"J\"));",
            "AttrFlags": 2
          },
          {
            "Text": ". This will check if the person’s name starts with a “J”."
          }
        ]
      }
    ],
    "title": "120 Using lambda expressions predicates to get a certain values from a list"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}