{
  "ID": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
  "Root": {
    "alive": true,
    "content": [
      "642a944d-faba-4210-a39a-c7fb6ac8a8ad",
      "e22ab3d3-9b3e-41ae-81c7-9dba24590086",
      "ceafe540-730c-49eb-ba25-1b4655a7dfdf",
      "c9880cf3-2a1c-44dd-bef8-68461658f7f3",
      "e7678937-0a03-43e4-858a-4ac95fba95b7",
      "45cccee7-846c-4349-855b-4b1ddcd66da2",
      "85e3e38e-0da2-43d1-b82f-c34d170ec4fd",
      "97e4342c-ec1b-4e4e-8cd6-ae1878445991",
      "f618240d-594f-4025-9658-5a15e3dc7d14",
      "6b14f520-c3eb-479f-9078-12b85c8e10d2",
      "2ab31cde-61a2-4cab-9ec4-174a39e574db",
      "21dd999f-99fa-4a48-b81d-11550f6a1ce8",
      "bd710270-8ba4-4aa6-b2d1-ce79baf0284a",
      "8d80584a-887b-4d02-b8b7-6f6d713c7080",
      "e58dd888-cc06-4040-953b-a21e8424a397",
      "074e028b-c194-4220-a943-ad997b890d87",
      "70ae4911-5d9f-44f4-89b7-0150dbee8237",
      "116da376-930f-4663-a0e7-9f3ede40a3dd",
      "4dbf2f34-f478-4eaf-bd94-f8305b5284bf"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460803092,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551750009841,
    "parent_id": "6c6c87a4-551e-4cdd-b523-66ee2c5d11cb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Bitwise and Logical Operators"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803084,
        "id": "642a944d-faba-4210-a39a-c7fb6ac8a8ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803084,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Java language provides 4 operators that perform bitwise or logical operations on integer or boolean operands."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Java language provides 4 operators that perform bitwise or logical operations on integer or boolean operands."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803089,
        "id": "e22ab3d3-9b3e-41ae-81c7-9dba24590086",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803089,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The complement ("
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator is a unary operator that performs a bitwise or logical inversion of the bits of one operand; see "
            ],
            [
              "JLS 15.15.5.",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.15.5"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The complement ("
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": ") operator is a unary operator that performs a bitwise or logical inversion of the bits of one operand; see "
          },
          {
            "Text": "JLS 15.15.5.",
            "Link": "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.15.5"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803089,
        "id": "ceafe540-730c-49eb-ba25-1b4655a7dfdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803089,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The AND ("
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator is a binary operator that performs a bitwise or logical “and” of two operands; see "
            ],
            [
              "JLS 15.22.2.",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The AND ("
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ") operator is a binary operator that performs a bitwise or logical “and” of two operands; see "
          },
          {
            "Text": "JLS 15.22.2.",
            "Link": "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803090,
        "id": "c9880cf3-2a1c-44dd-bef8-68461658f7f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803090,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The OR ("
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator is a binary operator that performs a bitwise or logical “inclusive or” of two operands; see "
            ],
            [
              "JLS 15.22.2.",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The OR ("
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": ") operator is a binary operator that performs a bitwise or logical “inclusive or” of two operands; see "
          },
          {
            "Text": "JLS 15.22.2.",
            "Link": "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803090,
        "id": "e7678937-0a03-43e4-858a-4ac95fba95b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803090,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The XOR ("
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") operator is a binary operator that performs a bitwise or logical “exclusive or” of two operands; see "
            ],
            [
              "JLS 15.22.2.",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The XOR ("
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": ") operator is a binary operator that performs a bitwise or logical “exclusive or” of two operands; see "
          },
          {
            "Text": "JLS 15.22.2.",
            "Link": "https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803090,
        "id": "45cccee7-846c-4349-855b-4b1ddcd66da2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803090,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The logical operations performed by these operators when the operands are booleans can be summarized as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The logical operations performed by these operators when the operands are booleans can be summarized as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "85e3e38e-0da2-43d1-b82f-c34d170ec4fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A | B | ~A | A \u0026 B | A | B | A ^ B |\n—— | —— | —— | —— | —— | —— |\n0 | 0 | 1 | 0 | 0 | 0 |\n0 | 1 | 1 | 0 | 1 | 1 |\n1 | 0 | 0 | 0 | 1 | 1 |\n1 | 1 | 0 | 1 | 1 | 0 |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A | B | ~A | A \u0026 B | A | B | A ^ B |\n—— | —— | —— | —— | —— | —— |\n0 | 0 | 1 | 0 | 0 | 0 |\n0 | 1 | 1 | 0 | 1 | 1 |\n1 | 0 | 0 | 0 | 1 | 1 |\n1 | 1 | 0 | 1 | 1 | 0 |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "97e4342c-ec1b-4e4e-8cd6-ae1878445991",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that for integer operands, the above table describes what happens for individual bits. The operators actually operate on all 32 or 64 bits of the operand or operands in parallel."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that for integer operands, the above table describes what happens for individual bits. The operators actually operate on all 32 or 64 bits of the operand or operands in parallel."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "f618240d-594f-4025-9658-5a15e3dc7d14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operand types and result types."
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operand types and result types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "6b14f520-c3eb-479f-9078-12b85c8e10d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The usual arithmetic conversions apply when the operands are integers."
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The usual arithmetic conversions apply when the operands are integers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "2ab31cde-61a2-4cab-9ec4-174a39e574db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Common use-cases for the bitwise operators"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Common use-cases for the bitwise operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "21dd999f-99fa-4a48-b81d-11550f6a1ce8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used to reverse a boolean value, or change all the bits in an integer operand."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used to reverse a boolean value, or change all the bits in an integer operand."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "bd710270-8ba4-4aa6-b2d1-ce79baf0284a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used for “masking out” some of the bits in an integer operand. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used for “masking out” some of the bits in an integer operand. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803091,
        "id": "8d80584a-887b-4d02-b8b7-6f6d713c7080",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803091,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int word = 0b00101010;\nint mask = 0b00000011;   // Mask for masking out all but the bottom \n                         // two bits of a word\nint lowBits = word \u0026 mask;            // -\u003e 0b00000010\nint highBits = word \u0026 ~mask;          // -\u003e 0b00101000"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int word = 0b00101010;\nint mask = 0b00000011;   // Mask for masking out all but the bottom \n                         // two bits of a word\nint lowBits = word \u0026 mask;            // -\u003e 0b00000010\nint highBits = word \u0026 ~mask;          // -\u003e 0b00101000",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803092,
        "id": "e58dd888-cc06-4040-953b-a21e8424a397",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803092,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used to combine the truth values of two operands. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used to combine the truth values of two operands. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803092,
        "id": "074e028b-c194-4220-a943-ad997b890d87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803092,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int word2 = 0b01011111; \n// Combine the bottom 2 bits of word1 with the top 30 bits of word2\nint combined = (word \u0026 mask) | (word2 \u0026 ~mask);   // -\u003e 0b01011110"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int word2 = 0b01011111; \n// Combine the bottom 2 bits of word1 with the top 30 bits of word2\nint combined = (word \u0026 mask) | (word2 \u0026 ~mask);   // -\u003e 0b01011110",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803092,
        "id": "70ae4911-5d9f-44f4-89b7-0150dbee8237",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803092,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is used for toggling or “flipping” bits:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " operator is used for toggling or “flipping” bits:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803092,
        "id": "116da376-930f-4663-a0e7-9f3ede40a3dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803092,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int word3 = 0b00101010;\nint word4 = word3 ^ mask;             // -\u003e 0b00101001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int word3 = 0b00101010;\nint word4 = word3 ^ mask;             // -\u003e 0b00101001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460803092,
        "id": "4dbf2f34-f478-4eaf-bd94-f8305b5284bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460803092,
        "parent_id": "602e8dc6-556e-4e48-96a8-e1093b47d5a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more examples of the use of the bitwise operators, see http://stackoverflow.com/documentation/java/1177/bit-manipulation#t=201610101439344327372"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more examples of the use of the bitwise operators, see http://stackoverflow.com/documentation/java/1177/bit-manipulation#t=201610101439344327372"
          }
        ]
      }
    ],
    "title": "The Bitwise and Logical Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}