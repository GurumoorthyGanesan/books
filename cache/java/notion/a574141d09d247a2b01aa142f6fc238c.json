{
  "ID": "a574141d-09d2-47a2-b01a-a142f6fc238c",
  "Root": {
    "alive": true,
    "content": [
      "a65a7e41-442c-4bf1-9494-787d45e93972",
      "6a657ec2-1e96-4dfe-a61f-a6f2a65f3c52",
      "12a50925-97c2-4a44-9cff-219074062cd9",
      "c9e9cf29-f1ec-40ff-9c18-6ebb8b8fc484",
      "bdaef51e-ce31-4472-8544-d2f01aae747f",
      "ca256ffb-4f56-400b-adf0-22c73501796d",
      "866d13ce-44c0-4f9b-aa9d-0ce1ef2b1351",
      "cd732c35-72ba-4d58-8e54-bd65e239a952"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463256158,
    "id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550463256158,
    "parent_id": "4d46b70c-bbcb-46ae-82ed-5387aeebf3e3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Javassist Basic"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256155,
        "id": "a65a7e41-442c-4bf1-9494-787d45e93972",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256155,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Javassist is a bytecode instrumentation library that allows you to modify bytecode injecting Java code that will be converted to bytecode by Javassist and added to the instrumented class/method at runtime."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Javassist is a bytecode instrumentation library that allows you to modify bytecode injecting Java code that will be converted to bytecode by Javassist and added to the instrumented class/method at runtime."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256157,
        "id": "6a657ec2-1e96-4dfe-a61f-a6f2a65f3c52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256157,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lets write the first transformer that actually take an hypothetical class “com.my.to.be.instrumented.MyClass” and add to the instructions of each method a log call."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lets write the first transformer that actually take an hypothetical class “com.my.to.be.instrumented.MyClass” and add to the instructions of each method a log call."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256158,
        "id": "12a50925-97c2-4a44-9cff-219074062cd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256158,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.lang.instrument.ClassFileTransformer;\nimport java.lang.instrument.IllegalClassFormatException;\nimport java.security.ProtectionDomain;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\n \npublic class DynamicTransformer implements ClassFileTransformer {\n \n    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,\n        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n \n        byte[] byteCode = classfileBuffer;\n \n        // into the transformer will arrive every class loaded so we filter \n        // to match only what we need\n        if (className.equals(\"com/my/to/be/instrumented/MyClass\")) {\n \n            try {\n                // retrive default Javassist class pool\n                ClassPool cp = ClassPool.getDefault();\n                // get from the class pool our class with this qualified name\n                CtClass cc = cp.get(\"com.my.to.be.instrumented.MyClass\");\n                // get all the methods of the retrieved class\n                CtMethod[] methods = cc.getDeclaredMethods()\n                for(CtMethod meth : methods) {\n                    // The instrumentation code to be returned and injected\n                    final StringBuffer buffer = new StringBuffer();\n                    String name = meth.getName();\n                    // just print into the buffer a log for example\n                    buffer.append(\"System.out.println(\\\"Method \" + name + \" executed\\\" );\");\n                    meth.insertBefore(buffer.toString())\n                }\n                // create the byteclode of the class\n                byteCode = cc.toBytecode();\n                // remove the CtClass from the ClassPool\n                cc.detach();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n \n        return byteCode;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.lang.instrument.ClassFileTransformer;\nimport java.lang.instrument.IllegalClassFormatException;\nimport java.security.ProtectionDomain;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtMethod;\n \npublic class DynamicTransformer implements ClassFileTransformer {\n \n    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,\n        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n \n        byte[] byteCode = classfileBuffer;\n \n        // into the transformer will arrive every class loaded so we filter \n        // to match only what we need\n        if (className.equals(\"com/my/to/be/instrumented/MyClass\")) {\n \n            try {\n                // retrive default Javassist class pool\n                ClassPool cp = ClassPool.getDefault();\n                // get from the class pool our class with this qualified name\n                CtClass cc = cp.get(\"com.my.to.be.instrumented.MyClass\");\n                // get all the methods of the retrieved class\n                CtMethod[] methods = cc.getDeclaredMethods()\n                for(CtMethod meth : methods) {\n                    // The instrumentation code to be returned and injected\n                    final StringBuffer buffer = new StringBuffer();\n                    String name = meth.getName();\n                    // just print into the buffer a log for example\n                    buffer.append(\"System.out.println(\\\"Method \" + name + \" executed\\\" );\");\n                    meth.insertBefore(buffer.toString())\n                }\n                // create the byteclode of the class\n                byteCode = cc.toBytecode();\n                // remove the CtClass from the ClassPool\n                cc.detach();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n \n        return byteCode;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256158,
        "id": "c9e9cf29-f1ec-40ff-9c18-6ebb8b8fc484",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256158,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now in order to use this transformer (so that our JVM will call the method transform on each class at load time) we need to add this instrumentor this with an agent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now in order to use this transformer (so that our JVM will call the method transform on each class at load time) we need to add this instrumentor this with an agent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256158,
        "id": "bdaef51e-ce31-4472-8544-d2f01aae747f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256158,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.lang.instrument.Instrumentation;\n \npublic class EasyAgent {\n \n    public static void premain(String agentArgs, Instrumentation inst) {\n         \n        // registers the transformer\n        inst.addTransformer(new DynamicTransformer());\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.lang.instrument.Instrumentation;\n \npublic class EasyAgent {\n \n    public static void premain(String agentArgs, Instrumentation inst) {\n         \n        // registers the transformer\n        inst.addTransformer(new DynamicTransformer());\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256158,
        "id": "ca256ffb-4f56-400b-adf0-22c73501796d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256158,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Last step to start our first instrumentor experiment is to actually register this agent class to the JVM machine execution. The easiest way to actually do it is to register it with an option into the shell command:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Last step to start our first instrumentor experiment is to actually register this agent class to the JVM machine execution. The easiest way to actually do it is to register it with an option into the shell command:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256158,
        "id": "866d13ce-44c0-4f9b-aa9d-0ce1ef2b1351",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256158,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "java -javaagent:myAgent.jar MyJavaApplication"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "java -javaagent:myAgent.jar MyJavaApplication",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463256158,
        "id": "cd732c35-72ba-4d58-8e54-bd65e239a952",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463256158,
        "parent_id": "a574141d-09d2-47a2-b01a-a142f6fc238c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As we can see the agent/transformer project is added as a jar to the execution of any application named MyJavaApplication that is supposed to contain a class named “com.my.to.be.instrumented.MyClass” to actually execute our injected code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As we can see the agent/transformer project is added as a jar to the execution of any application named MyJavaApplication that is supposed to contain a class named “com.my.to.be.instrumented.MyClass” to actually execute our injected code."
          }
        ]
      }
    ],
    "title": "050 Javassist Basic"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}