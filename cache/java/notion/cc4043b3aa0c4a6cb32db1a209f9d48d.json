{
  "ID": "cc4043b3-aa0c-4a6c-b32d-b1a209f9d48d",
  "Root": {
    "alive": true,
    "content": [
      "50792196-dce6-4ebd-9daa-7439a57f855a",
      "790bb534-40a2-4bbb-b9ec-6d142ba11ff6",
      "3f875a38-b93a-4676-ba3f-4ab3e7be53d2",
      "5194948e-5893-4d46-af2e-a1e068a89e84"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460493022,
    "id": "cc4043b3-aa0c-4a6c-b32d-b1a209f9d48d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460493022,
    "parent_id": "eaf811df-e51f-4444-9642-8359027b3f7f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "070 Code snippets inside documentation"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460493021,
        "id": "50792196-dce6-4ebd-9daa-7439a57f855a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460493021,
        "parent_id": "cc4043b3-aa0c-4a6c-b32d-b1a209f9d48d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The canonical way of writing code inside documentation is with the "
            ],
            [
              "{@code }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " construct. If you have multiline code wrap inside "
            ],
            [
              "\u003cpre\u003e\u003c/pre\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The canonical way of writing code inside documentation is with the "
          },
          {
            "Text": "{@code }",
            "AttrFlags": 2
          },
          {
            "Text": " construct. If you have multiline code wrap inside "
          },
          {
            "Text": "\u003cpre\u003e\u003c/pre\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460493022,
        "id": "790bb534-40a2-4bbb-b9ec-6d142ba11ff6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460493022,
        "parent_id": "cc4043b3-aa0c-4a6c-b32d-b1a209f9d48d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * The Class TestUtils.\n * \u003cp\u003e\n * This is an {@code inline(\"code example\")}.\n * \u003cp\u003e\n * You should wrap it in pre tags when writing multiline code.\n * \u003cpre\u003e{@code\n *  Example example1 = new FirstLineExample();\n *  example1.butYouCanHaveMoreThanOneLine();\n * }\u003c/pre\u003e\n * \u003cp\u003e\n * Thanks for reading.\n */\nclass TestUtils {"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * The Class TestUtils.\n * \u003cp\u003e\n * This is an {@code inline(\"code example\")}.\n * \u003cp\u003e\n * You should wrap it in pre tags when writing multiline code.\n * \u003cpre\u003e{@code\n *  Example example1 = new FirstLineExample();\n *  example1.butYouCanHaveMoreThanOneLine();\n * }\u003c/pre\u003e\n * \u003cp\u003e\n * Thanks for reading.\n */\nclass TestUtils {",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460493022,
        "id": "3f875a38-b93a-4676-ba3f-4ab3e7be53d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460493022,
        "parent_id": "cc4043b3-aa0c-4a6c-b32d-b1a209f9d48d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes you may need to put some complex code inside the javadoc comment. The "
            ],
            [
              "@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sign is specially problematic. The use of the old "
            ],
            [
              "\u003ccode\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tag alongside the "
            ],
            [
              "{@literal }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " construct solves the problem."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes you may need to put some complex code inside the javadoc comment. The "
          },
          {
            "Text": "@",
            "AttrFlags": 2
          },
          {
            "Text": " sign is specially problematic. The use of the old "
          },
          {
            "Text": "\u003ccode\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " tag alongside the "
          },
          {
            "Text": "{@literal }",
            "AttrFlags": 2
          },
          {
            "Text": " construct solves the problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460493022,
        "id": "5194948e-5893-4d46-af2e-a1e068a89e84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460493022,
        "parent_id": "cc4043b3-aa0c-4a6c-b32d-b1a209f9d48d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "/**\n * Usage:\n * \u003cpre\u003e\u003ccode\u003e\n * class SomethingTest {\n * {@literal @}Rule\n *  public SingleTestRule singleTestRule = new SingleTestRule(\"test1\");\n *\n * {@literal @}Test\n *  public void test1() {\n *      // only this test will be executed\n *  }\n *\n *  ...\n * }\n * \u003c/code\u003e\u003c/pre\u003e\n */\nclass SingleTestRule implements TestRule { }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "/**\n * Usage:\n * \u003cpre\u003e\u003ccode\u003e\n * class SomethingTest {\n * {@literal @}Rule\n *  public SingleTestRule singleTestRule = new SingleTestRule(\"test1\");\n *\n * {@literal @}Test\n *  public void test1() {\n *      // only this test will be executed\n *  }\n *\n *  ...\n * }\n * \u003c/code\u003e\u003c/pre\u003e\n */\nclass SingleTestRule implements TestRule { }",
        "code_language": "Plain Text"
      }
    ],
    "title": "070 Code snippets inside documentation"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}