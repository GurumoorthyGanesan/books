{
  "ID": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
  "Root": {
    "alive": true,
    "content": [
      "9f850de9-1954-4129-bd06-b7c13821aebd",
      "22471cbd-3890-4e8e-9bad-0d64b96997cb",
      "ae553ef8-671a-4c8d-974c-c182b34b5eb1",
      "652ac688-60be-4bbf-9f3e-03c0e9dd0cc8",
      "e973bae1-b646-451a-8eac-4ef90386539c",
      "d28cbf78-8ba2-4db9-ab36-9957972c5453",
      "a09ff5ab-5d1e-42ae-b163-e87742d8ebf7",
      "eed6ad31-e179-436a-a2fd-a11ec4d341b0",
      "41a103ff-39db-4791-acf7-33147d0eab13",
      "f575b15d-fe4a-4d74-945e-742913e58352",
      "6127a9cf-887e-4b68-85cf-50d99da413a3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460543331,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551755953568,
    "parent_id": "c5f4838e-8ea8-4be5-9969-41936c9db840",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Multicasting"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543329,
        "id": "9f850de9-1954-4129-bd06-b7c13821aebd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543329,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multicasting is a type of Datagram Socket. Unlike regular Datagrams, Multicasting doesn’t handle each client individually instead it sends it out to one IP Address and all subscribed clients will get the message."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multicasting is a type of Datagram Socket. Unlike regular Datagrams, Multicasting doesn’t handle each client individually instead it sends it out to one IP Address and all subscribed clients will get the message."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543329,
        "id": "22471cbd-3890-4e8e-9bad-0d64b96997cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543329,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/QW3lT.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/QW3lT.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2FQW3lT.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "ae553ef8-671a-4c8d-974c-c182b34b5eb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example code for a server side:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example code for a server side:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "652ac688-60be-4bbf-9f3e-03c0e9dd0cc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Server {\n    \n    private DatagramSocket serverSocket;\n    \n    private String ip;\n    \n    private int port;\n    \n    public Server(String ip, int port) throws SocketException, IOException{\n        this.ip = ip;\n        this.port = port;\n        // socket used to send\n        serverSocket = new DatagramSocket();\n    }\n    \n    public void send() throws IOException{\n        // make datagram packet\n        byte[] message = (\"Multicasting...\").getBytes();\n        DatagramPacket packet = new DatagramPacket(message, message.length, \n            InetAddress.getByName(ip), port);\n        // send packet\n        serverSocket.send(packet);\n    }\n    \n    public void close(){\n        serverSocket.close();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Server {\n    \n    private DatagramSocket serverSocket;\n    \n    private String ip;\n    \n    private int port;\n    \n    public Server(String ip, int port) throws SocketException, IOException{\n        this.ip = ip;\n        this.port = port;\n        // socket used to send\n        serverSocket = new DatagramSocket();\n    }\n    \n    public void send() throws IOException{\n        // make datagram packet\n        byte[] message = (\"Multicasting...\").getBytes();\n        DatagramPacket packet = new DatagramPacket(message, message.length, \n            InetAddress.getByName(ip), port);\n        // send packet\n        serverSocket.send(packet);\n    }\n    \n    public void close(){\n        serverSocket.close();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "e973bae1-b646-451a-8eac-4ef90386539c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example code for a client side:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example code for a client side:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "d28cbf78-8ba2-4db9-ab36-9957972c5453",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Client {\n    \n    private MulticastSocket socket;\n    \n    public Client(String ip, int port) throws IOException {\n        \n        // important that this is a multicast socket\n        socket = new MulticastSocket(port);\n        \n        // join by ip\n        socket.joinGroup(InetAddress.getByName(ip));\n    }\n    \n    public void printMessage() throws IOException{\n        // make datagram packet to recieve\n        byte[] message = new byte[256];\n        DatagramPacket packet = new DatagramPacket(message, message.length);\n        \n        // recieve the packet\n        socket.receive(packet);\n        System.out.println(new String(packet.getData()));\n    }\n    \n    public void close(){\n        socket.close();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Client {\n    \n    private MulticastSocket socket;\n    \n    public Client(String ip, int port) throws IOException {\n        \n        // important that this is a multicast socket\n        socket = new MulticastSocket(port);\n        \n        // join by ip\n        socket.joinGroup(InetAddress.getByName(ip));\n    }\n    \n    public void printMessage() throws IOException{\n        // make datagram packet to recieve\n        byte[] message = new byte[256];\n        DatagramPacket packet = new DatagramPacket(message, message.length);\n        \n        // recieve the packet\n        socket.receive(packet);\n        System.out.println(new String(packet.getData()));\n    }\n    \n    public void close(){\n        socket.close();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "a09ff5ab-5d1e-42ae-b163-e87742d8ebf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code for running the Server:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Code for running the Server:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "eed6ad31-e179-436a-a2fd-a11ec4d341b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void main(String[] args) {\n    try {\n        final String ip = args[0];\n        final int port = Integer.parseInt(args[1]);\n        Server server = new Server(ip, port);\n        server.send();\n        server.close();\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void main(String[] args) {\n    try {\n        final String ip = args[0];\n        final int port = Integer.parseInt(args[1]);\n        Server server = new Server(ip, port);\n        server.send();\n        server.close();\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "41a103ff-39db-4791-acf7-33147d0eab13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code for running a Client:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Code for running a Client:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543330,
        "id": "f575b15d-fe4a-4d74-945e-742913e58352",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543330,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void main(String[] args) {\n    try {\n        final String ip = args[0];\n        final int port = Integer.parseInt(args[1]);\n        Client client = new Client(ip, port);\n        client.printMessage();\n        client.close();\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void main(String[] args) {\n    try {\n        final String ip = args[0];\n        final int port = Integer.parseInt(args[1]);\n        Client client = new Client(ip, port);\n        client.printMessage();\n        client.close();\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460543331,
        "id": "6127a9cf-887e-4b68-85cf-50d99da413a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460543331,
        "parent_id": "82c128a9-138f-499c-a5da-3a2ec64e20f5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Run the Client First:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " The Client must subscribe to the IP before it can start receiving any packets. If you start the server and call the "
            ],
            [
              "send()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, and then make a client (\u0026 call "
            ],
            [
              "printMessage()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Nothing will happen because the client connected after the message was sent."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Run the Client First:",
            "AttrFlags": 1
          },
          {
            "Text": " The Client must subscribe to the IP before it can start receiving any packets. If you start the server and call the "
          },
          {
            "Text": "send()",
            "AttrFlags": 2
          },
          {
            "Text": " method, and then make a client (\u0026 call "
          },
          {
            "Text": "printMessage()",
            "AttrFlags": 2
          },
          {
            "Text": "). Nothing will happen because the client connected after the message was sent."
          }
        ]
      }
    ],
    "title": "Multicasting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}