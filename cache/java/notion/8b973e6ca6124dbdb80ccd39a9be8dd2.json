{
  "ID": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
  "Root": {
    "alive": true,
    "content": [
      "f7abe596-e353-4995-b945-336a199e71a7",
      "2d12e450-ce9f-45f8-9c88-2ff02215c683",
      "19cdf0a5-d065-4b86-abcd-72979fc62e2c",
      "0e7117bb-17cf-43e7-9bcc-d1a2856178f2",
      "8e2806ec-232d-44a3-b70b-fbc9281fbdbb",
      "b0275870-bed1-4289-a346-5efdb6878af8",
      "8863b225-b2d8-4229-bce8-79c4bfb3f818"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460152098,
    "id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460152098,
    "parent_id": "b352327f-4045-48dc-891e-ceda03965ca0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "080 Using lambda expression with your own functional interface"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152094,
        "id": "f7abe596-e353-4995-b945-336a199e71a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152094,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambdas are meant to provide inline implementation code for single method interfaces and the ability to pass them around as we have been doing with normal variables. We call them Functional Interface."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambdas are meant to provide inline implementation code for single method interfaces and the ability to pass them around as we have been doing with normal variables. We call them Functional Interface."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152097,
        "id": "2d12e450-ce9f-45f8-9c88-2ff02215c683",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152097,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, writing a Runnable in anonymous class and starting a Thread looks like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, writing a Runnable in anonymous class and starting a Thread looks like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152097,
        "id": "19cdf0a5-d065-4b86-abcd-72979fc62e2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152097,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Old way\nnew Thread(\n        new Runnable(){\n            public void run(){\n                System.out.println(\"run logic...\");\n            }\n        }\n).start();\n\n//lambdas, from Java 8\nnew Thread(\n        ()-\u003e System.out.println(\"run logic...\")\n).start();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Old way\nnew Thread(\n        new Runnable(){\n            public void run(){\n                System.out.println(\"run logic...\");\n            }\n        }\n).start();\n\n//lambdas, from Java 8\nnew Thread(\n        ()-\u003e System.out.println(\"run logic...\")\n).start();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152097,
        "id": "0e7117bb-17cf-43e7-9bcc-d1a2856178f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152097,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, in line with above, lets say you have some custom interface:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, in line with above, lets say you have some custom interface:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152098,
        "id": "8e2806ec-232d-44a3-b70b-fbc9281fbdbb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152098,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface TwoArgInterface {\n    int operate(int a, int b);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface TwoArgInterface {\n    int operate(int a, int b);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152098,
        "id": "b0275870-bed1-4289-a346-5efdb6878af8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152098,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How do you use lambda to give implementation of this interface in your code? Same as Runnable example shown above. See the driver program below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How do you use lambda to give implementation of this interface in your code? Same as Runnable example shown above. See the driver program below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460152098,
        "id": "8863b225-b2d8-4229-bce8-79c4bfb3f818",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460152098,
        "parent_id": "8b973e6c-a612-4dbd-b80c-cd39a9be8dd2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CustomLambda {\n    public static void main(String[] args) {\n\n        TwoArgInterface plusOperation = (a, b) -\u003e a + b;\n        TwoArgInterface divideOperation = (a,b)-\u003e{\n            if (b==0) throw new IllegalArgumentException(\"Divisor can not be 0\");\n            return a/b;\n        };\n\n        System.out.println(\"Plus operation of 3 and 5 is: \" + plusOperation.operate(3, 5));\n        System.out.println(\"Divide operation 50 by 25 is: \" + divideOperation.operate(50, 25));\n\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CustomLambda {\n    public static void main(String[] args) {\n\n        TwoArgInterface plusOperation = (a, b) -\u003e a + b;\n        TwoArgInterface divideOperation = (a,b)-\u003e{\n            if (b==0) throw new IllegalArgumentException(\"Divisor can not be 0\");\n            return a/b;\n        };\n\n        System.out.println(\"Plus operation of 3 and 5 is: \" + plusOperation.operate(3, 5));\n        System.out.println(\"Divide operation 50 by 25 is: \" + divideOperation.operate(50, 25));\n\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "080 Using lambda expression with your own functional interface"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}