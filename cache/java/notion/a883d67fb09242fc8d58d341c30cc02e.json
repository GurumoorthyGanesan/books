{
  "ID": "a883d67f-b092-42fc-8d58-d341c30cc02e",
  "Root": {
    "alive": true,
    "content": [
      "1a12424c-2392-4a74-b796-d33d3ff5a7e2",
      "a692e5f8-70ce-409f-85f2-efd61fac07a9",
      "43987184-f1e0-4055-bed9-271505f3a097",
      "933e29c6-7f49-4ce7-aa33-f237d3ac4b95",
      "0872cf9b-57fd-46dc-9d41-f5965ce80ff5",
      "675aba6b-1623-4d11-9cb5-c28347f0dad7",
      "e5a6da0c-d16d-4718-9fe6-2ccd34bbbc36",
      "d422f7ce-c6ef-4c2a-840e-5533c4283fc9",
      "ff75fe60-9bdb-49a1-b544-f756b88e0832",
      "4c6082e7-3e81-49de-b2cd-cf6cfbb6eed1",
      "861ade9a-2820-425c-ab75-af85e78d29d7",
      "a18c848c-1c1d-4497-a740-8f89f21b330e",
      "9d287e13-958d-4f09-944c-a363dde60c94",
      "5afbd9cb-4a27-4eee-a13a-d45f91d25b00",
      "7fb89acc-1f59-4122-8f4c-9df4054d9104",
      "ae4301a1-87c1-422c-a726-7631defb6f8e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463235092,
    "id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550463235092,
    "parent_id": "a72a1c9e-c899-4602-bb27-12024eba3c19",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Why Use Getters and Setters"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235086,
        "id": "1a12424c-2392-4a74-b796-d33d3ff5a7e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235086,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider a basic class containing an object with getters and setters in Java:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider a basic class containing an object with getters and setters in Java:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235088,
        "id": "a692e5f8-70ce-409f-85f2-efd61fac07a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235088,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CountHolder {\n  private int count = 0;\n\n  public int getCount() { return count; }\n  public void setCount(int c) { count = c; }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CountHolder {\n  private int count = 0;\n\n  public int getCount() { return count; }\n  public void setCount(int c) { count = c; }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235089,
        "id": "43987184-f1e0-4055-bed9-271505f3a097",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235089,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can’t access the "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable because it’s private. But we can access the "
            ],
            [
              "getCount()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the "
            ],
            [
              "setCount(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods because they are public. To some, this might raise the question; why introduce the middleman? Why not just simply make they count public?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can’t access the "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " variable because it’s private. But we can access the "
          },
          {
            "Text": "getCount()",
            "AttrFlags": 2
          },
          {
            "Text": " and the "
          },
          {
            "Text": "setCount(int)",
            "AttrFlags": 2
          },
          {
            "Text": " methods because they are public. To some, this might raise the question; why introduce the middleman? Why not just simply make they count public?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235089,
        "id": "933e29c6-7f49-4ce7-aa33-f237d3ac4b95",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235089,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CountHolder {\n  public int count = 0;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CountHolder {\n  public int count = 0;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235089,
        "id": "0872cf9b-57fd-46dc-9d41-f5965ce80ff5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235089,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For all intents and purposes, these two are exactly the same, functionality-wise. The difference between them is the extensibility. Consider what each class says:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For all intents and purposes, these two are exactly the same, functionality-wise. The difference between them is the extensibility. Consider what each class says:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235090,
        "id": "675aba6b-1623-4d11-9cb5-c28347f0dad7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235090,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": “I have a method that will give you an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value, and a method that will set that value to another "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "”."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "First",
            "AttrFlags": 1
          },
          {
            "Text": ": “I have a method that will give you an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " value, and a method that will set that value to another "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235090,
        "id": "e5a6da0c-d16d-4718-9fe6-2ccd34bbbc36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235090,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Second",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": “I have an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that you can set and get as you please.”"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Second",
            "AttrFlags": 1
          },
          {
            "Text": ": “I have an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " that you can set and get as you please.”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235090,
        "id": "d422f7ce-c6ef-4c2a-840e-5533c4283fc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235090,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These might sound similar, but the first is actually much more guarded in its nature; it only lets you interact with its internal nature as "
            ],
            [
              "it",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " dictates. This leaves the ball in its court; it gets to choose how the internal interactions occur. The second has exposed its internal implementation externally, and is now not only prone to external users, but, in the case of an API, "
            ],
            [
              "committed",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to maintaining that implementation (or otherwise releasing a non-backward-compatible API)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These might sound similar, but the first is actually much more guarded in its nature; it only lets you interact with its internal nature as "
          },
          {
            "Text": "it",
            "AttrFlags": 1
          },
          {
            "Text": " dictates. This leaves the ball in its court; it gets to choose how the internal interactions occur. The second has exposed its internal implementation externally, and is now not only prone to external users, but, in the case of an API, "
          },
          {
            "Text": "committed",
            "AttrFlags": 1
          },
          {
            "Text": " to maintaining that implementation (or otherwise releasing a non-backward-compatible API)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235090,
        "id": "ff75fe60-9bdb-49a1-b544-f756b88e0832",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235090,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lets consider if we want to synchronize access to modifying and accessing the count. In the first, this is simple:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lets consider if we want to synchronize access to modifying and accessing the count. In the first, this is simple:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235090,
        "id": "4c6082e7-3e81-49de-b2cd-cf6cfbb6eed1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235090,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CountHolder {\n  private int count = 0;\n\n  public synchronized int getCount() { return count; }\n  public synchronized void setCount(int c) { count = c; }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CountHolder {\n  private int count = 0;\n\n  public synchronized int getCount() { return count; }\n  public synchronized void setCount(int c) { count = c; }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235091,
        "id": "861ade9a-2820-425c-ab75-af85e78d29d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235091,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "but in the second example, this is now nearly impossible without going through and modifying each place where the "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable is referenced. Worse still, if this is an item that you’re providing in a library to be consumed by others, you do "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " have a way of performing that modification, and are forced to make the hard choice mentioned above."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "but in the second example, this is now nearly impossible without going through and modifying each place where the "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " variable is referenced. Worse still, if this is an item that you’re providing in a library to be consumed by others, you do "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " have a way of performing that modification, and are forced to make the hard choice mentioned above."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235091,
        "id": "a18c848c-1c1d-4497-a740-8f89f21b330e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235091,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So it begs the question; are public variables ever a good thing (or, at least, not evil)?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So it begs the question; are public variables ever a good thing (or, at least, not evil)?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235091,
        "id": "9d287e13-958d-4f09-944c-a363dde60c94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235091,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I’m unsure. On one hand, you can see examples of public variables that have stood the test of time (IE: the "
            ],
            [
              "out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable referenced in "
            ],
            [
              "System.out",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). On the other, providing a public variable gives no benefit outside of extremely minimal overhead and potential reduction in wordiness. My guideline here would be that, if you’re planning on making a variable public, you should judge it against these criteria with "
            ],
            [
              "extreme",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " prejudice:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I’m unsure. On one hand, you can see examples of public variables that have stood the test of time (IE: the "
          },
          {
            "Text": "out",
            "AttrFlags": 2
          },
          {
            "Text": " variable referenced in "
          },
          {
            "Text": "System.out",
            "AttrFlags": 2
          },
          {
            "Text": "). On the other, providing a public variable gives no benefit outside of extremely minimal overhead and potential reduction in wordiness. My guideline here would be that, if you’re planning on making a variable public, you should judge it against these criteria with "
          },
          {
            "Text": "extreme",
            "AttrFlags": 1
          },
          {
            "Text": " prejudice:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235092,
        "id": "5afbd9cb-4a27-4eee-a13a-d45f91d25b00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235092,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The variable should have no conceivable reason to "
            ],
            [
              "ever",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " change in its implementation. This is something that’s extremely easy to screw up (and, even if you do get it right, requirements can change), which is why getters/setters are the common approach. If you’re going to have a public variable, this really needs to be thought through, especially if released in a library/framework/API."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The variable should have no conceivable reason to "
          },
          {
            "Text": "ever",
            "AttrFlags": 1
          },
          {
            "Text": " change in its implementation. This is something that’s extremely easy to screw up (and, even if you do get it right, requirements can change), which is why getters/setters are the common approach. If you’re going to have a public variable, this really needs to be thought through, especially if released in a library/framework/API."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235092,
        "id": "7fb89acc-1f59-4122-8f4c-9df4054d9104",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235092,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The variable needs to be referenced frequently enough that the minimal gains from reducing verbosity warrants it. I don’t even think the overhead for using a method versus directly referencing should be considered here. It’s far too negligible for what I’d conservatively estimate to be 99.9% of applications."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The variable needs to be referenced frequently enough that the minimal gains from reducing verbosity warrants it. I don’t even think the overhead for using a method versus directly referencing should be considered here. It’s far too negligible for what I’d conservatively estimate to be 99.9% of applications."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463235092,
        "id": "ae4301a1-87c1-422c-a726-7631defb6f8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463235092,
        "parent_id": "a883d67f-b092-42fc-8d58-d341c30cc02e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There’s probably more than I haven’t considered off the top of my head. If you’re ever in doubt, always use getters/setters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There’s probably more than I haven’t considered off the top of my head. If you’re ever in doubt, always use getters/setters."
          }
        ]
      }
    ],
    "title": "030 Why Use Getters and Setters"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}