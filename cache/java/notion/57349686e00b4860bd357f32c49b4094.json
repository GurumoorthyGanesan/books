{
  "ID": "57349686-e00b-4860-bd35-7f32c49b4094",
  "Root": {
    "alive": true,
    "content": [
      "1951a9a4-af1c-4132-a42c-fdceaff98789",
      "f0657969-542c-4979-b96d-0faa2d5f252a",
      "788d5939-614f-48b8-97ae-63874c012460",
      "b1f97a6d-bd3f-4232-be19-97e2169e498c",
      "79d07d66-6ad6-4646-b25a-4e5dd81c1ee6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460733063,
    "id": "57349686-e00b-4860-bd35-7f32c49b4094",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460733063,
    "parent_id": "d12c85fb-12be-4d36-9a14-84025fa56b60",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Bare metal sound"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460733062,
        "id": "1951a9a4-af1c-4132-a42c-fdceaff98789",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460733062,
        "parent_id": "57349686-e00b-4860-bd35-7f32c49b4094",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also go almost bare-metal when producing sound with java. This code will write raw binary data into the OS audio buffer to generate sound. It’s extremely important to understand the limitations and necessary calculations to generating sound like this. Since playback is basically instantaneous, calculations need to be performed at almost real-time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also go almost bare-metal when producing sound with java. This code will write raw binary data into the OS audio buffer to generate sound. It’s extremely important to understand the limitations and necessary calculations to generating sound like this. Since playback is basically instantaneous, calculations need to be performed at almost real-time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460733062,
        "id": "f0657969-542c-4979-b96d-0faa2d5f252a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460733062,
        "parent_id": "57349686-e00b-4860-bd35-7f32c49b4094",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As such this method is unusable for more complicated sound-sampling. For such purposes using specialized tools is the better approach."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As such this method is unusable for more complicated sound-sampling. For such purposes using specialized tools is the better approach."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460733062,
        "id": "788d5939-614f-48b8-97ae-63874c012460",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460733062,
        "parent_id": "57349686-e00b-4860-bd35-7f32c49b4094",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following method generates and directly outputs a rectangle-wave of a given frequency in a given volume for a given duration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following method generates and directly outputs a rectangle-wave of a given frequency in a given volume for a given duration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460733063,
        "id": "b1f97a6d-bd3f-4232-be19-97e2169e498c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460733063,
        "parent_id": "57349686-e00b-4860-bd35-7f32c49b4094",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void rectangleWave(byte volume, int hertz, int msecs) {\n    final SourceDataLine dataLine;\n    // 24 kHz x 8bit, single-channel, signed little endian AudioFormat\n    AudioFormat af = new AudioFormat(24_000, 8, 1, true, false);\n    try {\n        dataLine = AudioSystem.getSourceDataLine(af);\n        dataLine.open(af, 10_000); // audio buffer size: 10k samples\n    } catch (LineUnavailableException e) {\n        throw new RuntimeException(e);\n    }\n\n    int waveHalf = 24_000 / hertz; // samples for half a period\n    byte[] buffer = new byte[waveHalf * 20];\n    int samples = msecs * (24_000 / 1000); // 24k (samples / sec) / 1000 (ms/sec) * time(ms)\n\n    dataLine.start(); // starts playback\n    int sign = 1;\n\n    for (int i = 0; i \u003c samples; i += buffer.length) {\n        for (int j = 0; j \u003c 20; j++) { // generate 10 waves into buffer\n            sign *= -1; \n            // fill from the jth wave-half to the j+1th wave-half with volume\n            Arrays.fill(buffer, waveHalf * j, waveHalf * (j+1), (byte) (volume * sign));\n        }\n        dataLine.write(buffer, 0, buffer.length); // \n    }\n    dataLine.drain(); // forces buffer drain to hardware\n    dataLine.stop();  // ends playback\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void rectangleWave(byte volume, int hertz, int msecs) {\n    final SourceDataLine dataLine;\n    // 24 kHz x 8bit, single-channel, signed little endian AudioFormat\n    AudioFormat af = new AudioFormat(24_000, 8, 1, true, false);\n    try {\n        dataLine = AudioSystem.getSourceDataLine(af);\n        dataLine.open(af, 10_000); // audio buffer size: 10k samples\n    } catch (LineUnavailableException e) {\n        throw new RuntimeException(e);\n    }\n\n    int waveHalf = 24_000 / hertz; // samples for half a period\n    byte[] buffer = new byte[waveHalf * 20];\n    int samples = msecs * (24_000 / 1000); // 24k (samples / sec) / 1000 (ms/sec) * time(ms)\n\n    dataLine.start(); // starts playback\n    int sign = 1;\n\n    for (int i = 0; i \u003c samples; i += buffer.length) {\n        for (int j = 0; j \u003c 20; j++) { // generate 10 waves into buffer\n            sign *= -1; \n            // fill from the jth wave-half to the j+1th wave-half with volume\n            Arrays.fill(buffer, waveHalf * j, waveHalf * (j+1), (byte) (volume * sign));\n        }\n        dataLine.write(buffer, 0, buffer.length); // \n    }\n    dataLine.drain(); // forces buffer drain to hardware\n    dataLine.stop();  // ends playback\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460733063,
        "id": "79d07d66-6ad6-4646-b25a-4e5dd81c1ee6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460733063,
        "parent_id": "57349686-e00b-4860-bd35-7f32c49b4094",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a more differentiated way to generate different soundwaves sinus calculations and possibly larger sample sizes are necessary. This results in significantly more complex code and is accordingly omitted here."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a more differentiated way to generate different soundwaves sinus calculations and possibly larger sample sizes are necessary. This results in significantly more complex code and is accordingly omitted here."
          }
        ]
      }
    ],
    "title": "040 Bare metal sound"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}