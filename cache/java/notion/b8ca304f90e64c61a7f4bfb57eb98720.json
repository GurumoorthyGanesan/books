{
  "ID": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
  "Root": {
    "alive": true,
    "content": [
      "67b8a600-c702-4983-832c-aa4bc36ddc24",
      "01234b23-aa46-4ff7-be51-b1eaae067e58",
      "e051dc37-f488-4399-b43d-bd70177cdb8f",
      "0c32984e-2101-4df4-8844-cf7fda8d303b",
      "007d0074-c982-4fad-a1e2-e05443cc1520",
      "d4fd1638-0986-4470-8141-cac9c5836046",
      "93de2e64-fb0f-45fc-95a1-28b49f689957",
      "7e9101ab-466d-46de-b156-9b8c5679343a",
      "bb8f39de-a02d-4cb6-93e6-010c1afe8b25",
      "46bbfae5-96f4-4ee9-8e41-c43ae25f187f",
      "11593d67-dad7-49d7-ab49-65a5d1bd6725",
      "1c892145-7cdd-4ba9-9102-3037692ad4d7",
      "be16746d-b0ac-4c68-ab06-d9044acbae0e",
      "40db1135-0893-48d0-b31d-7e52dcc20780",
      "755b23d0-a67b-4e3d-b51a-239577520aed",
      "aa3cd72f-fe20-4457-9920-a57250491e7e",
      "45c76846-ede6-4595-9a39-5854371b597f",
      "df816246-3333-4840-8d82-fc3b2891aae0",
      "70176720-323a-4f3c-936f-cc31a58b0af7",
      "68f7285c-8d2e-4f2f-98ad-08db092fa8a2",
      "3c6e3dd3-b52a-4b4d-80f8-ac7db1eed3cb",
      "b04debd6-1841-4e09-81a4-45c61fc74a5d",
      "fe9b16a3-6bc9-44b1-aa52-02fc958a0cab",
      "6c156427-e4e8-4366-8b1c-21e2536513d8",
      "263568e1-3e6a-49e3-a9b2-a58a4faf5250",
      "3349b88f-de82-40a2-9a54-f1fb9ad7c183",
      "6e7612d2-69a1-4683-b105-1307d599f23f",
      "d9d26d95-820d-4afd-8b0b-c4f1effe79c3",
      "d7aeebba-3019-4865-ac89-488c26020df5",
      "f84f9c2f-7606-4e64-b3a1-f7c93da15c08",
      "3a0384c4-ebb3-4462-a198-a5e757acf3ab",
      "346d4410-382e-4891-9b80-285bf6434941",
      "895ef2ee-cd65-4f62-ad61-3638c61d5777",
      "d127f250-e2a9-4153-a8af-176278def514",
      "78bc3d88-6cd8-45c6-a46c-c8caa2999bc8",
      "1d1468f5-6d7a-4f13-8727-fa1cb9b2654c",
      "31de4986-70dd-437d-bf42-36482ccae207",
      "5d86c91d-f2b6-4546-aa91-3d23258f2ca3",
      "2c8fb9e9-b742-4d4c-b8f7-d330add8f643",
      "8b501fec-d0f5-4878-b5fd-7bfac65b358a",
      "768951f3-817d-43db-8121-68e7835d7647",
      "7ad6c97e-4086-40ba-ad8b-0b101e38e290",
      "a2b1993c-b031-41e8-82a3-ceddc496ae3c",
      "3f9c6b69-0163-43ff-83bf-ed84230fdf44",
      "45951594-a819-4890-9539-01aa96fbc44f",
      "16f04835-78f5-487c-ab96-ec3f26d83066",
      "977c503f-b46c-4da0-94d0-53b9819a9305",
      "2c1da879-9754-4099-abf0-bf9c292a53c1",
      "740b1c8f-0bfd-484c-bc48-2550c8e259ad",
      "59c0c42b-9fbb-4e01-ad6a-7c2bba25f714",
      "e73ecf93-291b-44b0-8471-0df8140e9dee",
      "1904b5b9-0256-4778-9ae0-0cd3e6bfc460",
      "f863545c-b212-49b4-9d2d-333b52097fab",
      "f5222441-1aaf-44d5-976c-785bf66d26de",
      "d513112e-5ffa-4d79-b2b2-fedbac2b7537",
      "668f362c-2d75-4a56-a38c-41d929c13bcd",
      "8936589e-aecc-4409-8e59-aff263529fee",
      "0d3b00bb-9029-49fc-af4f-c6633badc85a",
      "8682bdac-8a96-4f74-9578-3a4806c10e19",
      "c025d7c4-6cd5-411f-a7a2-14134f86c6ac",
      "c941d43d-6fa9-44a5-9369-fa7d375dcca7",
      "d0bd6a1a-e70b-4f18-acb7-0b699e278404",
      "9b17d6c3-0e0d-46ef-b0c1-2924e0945d43",
      "4925171c-7dbe-478c-b029-6946b2188750",
      "1afc8dba-05c7-4932-8e65-5da93fef7d62",
      "3226a4d3-4cbb-447b-9d27-b4a12780dd18"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550520257395,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551749774863,
    "parent_id": "bd3a4b6b-fab1-47c7-81e1-6a0e68ffc84f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "C Comparison"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257377,
        "id": "67b8a600-c702-4983-832c-aa4bc36ddc24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257377,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257381,
        "id": "01234b23-aa46-4ff7-be51-b1eaae067e58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257381,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java and C++ are similar languages. This topic serves as a quick reference guide for Java and C++ Engineers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java and C++ are similar languages. This topic serves as a quick reference guide for Java and C++ Engineers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257381,
        "id": "e051dc37-f488-4399-b43d-bd70177cdb8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257381,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257381,
        "id": "0c32984e-2101-4df4-8844-cf7fda8d303b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257381,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Classes Defined within Other Constructs"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Classes Defined within Other Constructs"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257381,
        "id": "007d0074-c982-4fad-a1e2-e05443cc1520",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257381,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Defined within Another Class"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Defined within Another Class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257381,
        "id": "d4fd1638-0986-4470-8141-cac9c5836046",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257381,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257383,
        "id": "93de2e64-fb0f-45fc-95a1-28b49f689957",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257383,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Nested Class"
            ],
            [
              "[ref]",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/2687544/question-about-c-inner-class"
                ]
              ]
            ],
            [
              " (needs a reference to enclosing class)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Nested Class"
          },
          {
            "Text": "[ref]",
            "Link": "https://stackoverflow.com/questions/2687544/question-about-c-inner-class"
          },
          {
            "Text": " (needs a reference to enclosing class)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257383,
        "id": "7e9101ab-466d-46de-b156-9b8c5679343a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257383,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Outer {\n   class Inner {\n      public:\n         Inner(Outer* o) :outer(o) {}\n\n      private:\n         Outer*  outer;\n   };\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Outer {\n   class Inner {\n      public:\n         Inner(Outer* o) :outer(o) {}\n\n      private:\n         Outer*  outer;\n   };\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257383,
        "id": "bb8f39de-a02d-4cb6-93e6-010c1afe8b25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257383,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "46bbfae5-96f4-4ee9-8e41-c43ae25f187f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[non-static] Nested Class (aka Inner Class or Member Class)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[non-static] Nested Class (aka Inner Class or Member Class)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "11593d67-dad7-49d7-ab49-65a5d1bd6725",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class OuterClass {\n    ...\n    class InnerClass {\n        ...\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class OuterClass {\n    ...\n    class InnerClass {\n        ...\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "1c892145-7cdd-4ba9-9102-3037692ad4d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Statically Defined within Another Class"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Statically Defined within Another Class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "be16746d-b0ac-4c68-ab06-d9044acbae0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "40db1135-0893-48d0-b31d-7e52dcc20780",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static Nested Class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static Nested Class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "755b23d0-a67b-4e3d-b51a-239577520aed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Outer {\n   class Inner {\n      ...\n   };\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Outer {\n   class Inner {\n      ...\n   };\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257384,
        "id": "aa3cd72f-fe20-4457-9920-a57250491e7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257384,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257385,
        "id": "45c76846-ede6-4595-9a39-5854371b597f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257385,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static Nested Class (aka Static Member Class)"
            ],
            [
              "[ref]",
              [
                [
                  "a",
                  "https://www.javatpoint.com/static-nested-class"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static Nested Class (aka Static Member Class)"
          },
          {
            "Text": "[ref]",
            "Link": "https://www.javatpoint.com/static-nested-class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257385,
        "id": "df816246-3333-4840-8d82-fc3b2891aae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257385,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class OuterClass {\n    ...\n    static class StaticNestedClass {\n        ...\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class OuterClass {\n    ...\n    static class StaticNestedClass {\n        ...\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257385,
        "id": "70176720-323a-4f3c-936f-cc31a58b0af7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257385,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Defined within a Method"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Defined within a Method"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257385,
        "id": "68f7285c-8d2e-4f2f-98ad-08db092fa8a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257385,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(e.g. event handling)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(e.g. event handling)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257385,
        "id": "3c6e3dd3-b52a-4b4d-80f8-ac7db1eed3cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257385,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257385,
        "id": "b04debd6-1841-4e09-81a4-45c61fc74a5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257385,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Local Class"
            ],
            [
              "[ref]",
              [
                [
                  "a",
                  "http://www.geeksforgeeks.org/local-class-in-c/"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Local Class"
          },
          {
            "Text": "[ref]",
            "Link": "http://www.geeksforgeeks.org/local-class-in-c/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257386,
        "id": "fe9b16a3-6bc9-44b1-aa52-02fc958a0cab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257386,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void fun() {\n   class Test {\n      /* members of Test class */\n   };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void fun() {\n   class Test {\n      /* members of Test class */\n   };\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257386,
        "id": "6c156427-e4e8-4366-8b1c-21e2536513d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257386,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See also "
            ],
            [
              "Lambda expressions",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/language/lambda"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See also "
          },
          {
            "Text": "Lambda expressions",
            "Link": "http://en.cppreference.com/w/cpp/language/lambda"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257386,
        "id": "263568e1-3e6a-49e3-a9b2-a58a4faf5250",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257386,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257387,
        "id": "3349b88f-de82-40a2-9a54-f1fb9ad7c183",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257387,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Local Class"
            ],
            [
              "[ref]",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/1183453/whats-the-use-of-a-method-local-inner-class"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Local Class"
          },
          {
            "Text": "[ref]",
            "Link": "https://stackoverflow.com/questions/1183453/whats-the-use-of-a-method-local-inner-class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257387,
        "id": "6e7612d2-69a1-4683-b105-1307d599f23f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257387,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Test {\n    void f() {\n        new Thread(new Runnable() {\n            public void run() {\n                doSomethingBackgroundish();\n            }\n        }).start();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Test {\n    void f() {\n        new Thread(new Runnable() {\n            public void run() {\n                doSomethingBackgroundish();\n            }\n        }).start();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257387,
        "id": "d9d26d95-820d-4afd-8b0b-c4f1effe79c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257387,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overriding vs Overloading"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overriding vs Overloading"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257387,
        "id": "d7aeebba-3019-4865-ac89-488c26020df5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257387,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following Overriding vs Overloading points apply to both C++ and Java:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following Overriding vs Overloading points apply to both C++ and Java:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257388,
        "id": "f84f9c2f-7606-4e64-b3a1-f7c93da15c08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257388,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An overridden method has the same name and arguments as its base method."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "An overridden method has the same name and arguments as its base method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257388,
        "id": "3a0384c4-ebb3-4462-a198-a5e757acf3ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257388,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An overloaded method has the same name but different arguments and does not rely on inheritance."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "An overloaded method has the same name but different arguments and does not rely on inheritance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257389,
        "id": "346d4410-382e-4891-9b80-285bf6434941",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257389,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two methods with the same name and arguments but different return type are illegal. See related Stackoverflow questions about “overloading with different return type in Java” - "
            ],
            [
              "Question 1",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/2439782/overload-with-different-return-type-in-java"
                ]
              ]
            ],
            [
              "; "
            ],
            [
              "Question 2",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/5561436/can-two-java-methods-have-same-name-with-different-return-types"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two methods with the same name and arguments but different return type are illegal. See related Stackoverflow questions about “overloading with different return type in Java” - "
          },
          {
            "Text": "Question 1",
            "Link": "https://stackoverflow.com/questions/2439782/overload-with-different-return-type-in-java"
          },
          {
            "Text": "; "
          },
          {
            "Text": "Question 2",
            "Link": "https://stackoverflow.com/questions/5561436/can-two-java-methods-have-same-name-with-different-return-types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257389,
        "id": "895ef2ee-cd65-4f62-ad61-3638c61d5777",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257389,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Polymorphism"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Polymorphism"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257389,
        "id": "d127f250-e2a9-4153-a8af-176278def514",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257389,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Polymorphism is the ability for objects of different classes related by inheritance to respond differently to the same method call. Here’s an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Polymorphism is the ability for objects of different classes related by inheritance to respond differently to the same method call. Here’s an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257390,
        "id": "78bc3d88-6cd8-45c6-a46c-c8caa2999bc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257390,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "base class Shape with area as an abstract method"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "base class Shape with area as an abstract method"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257390,
        "id": "1d1468f5-6d7a-4f13-8727-fa1cb9b2654c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257390,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "two derived classes, Square and Circle, implement area methods"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "two derived classes, Square and Circle, implement area methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257390,
        "id": "31de4986-70dd-437d-bf42-36482ccae207",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257390,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shape reference points to Square and area is invoked"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shape reference points to Square and area is invoked"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257390,
        "id": "5d86c91d-f2b6-4546-aa91-3d23258f2ca3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257390,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, polymorphism is enabled by virtual methods. In Java, methods are virtual by default."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, polymorphism is enabled by virtual methods. In Java, methods are virtual by default."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257390,
        "id": "2c8fb9e9-b742-4d4c-b8f7-d330add8f643",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257390,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Order of Construction/Destruction"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Order of Construction/Destruction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257390,
        "id": "8b501fec-d0f5-4878-b5fd-7bfac65b358a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257390,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Order of Construction/Destruction"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Order of Construction/Destruction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "768951f3-817d-43db-8121-68e7835d7647",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Object Cleanup"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Object Cleanup"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "7ad6c97e-4086-40ba-ad8b-0b101e38e290",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In C++, it’s a good idea to declare a destructor as virtual to ensure that the subclass’ destructor will be called if the base-class pointer is deleted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In C++, it’s a good idea to declare a destructor as virtual to ensure that the subclass’ destructor will be called if the base-class pointer is deleted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "a2b1993c-b031-41e8-82a3-ceddc496ae3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java, a finalize method is similar a destructor in C++; however, finalizers are unpredictable (they rely on GC). Best practice - use a “close” method to explicitly cleanup."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java, a finalize method is similar a destructor in C++; however, finalizers are unpredictable (they rely on GC). Best practice - use a “close” method to explicitly cleanup."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "3f9c6b69-0163-43ff-83bf-ed84230fdf44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "protected void close() {\n    try {\n       // do subclass cleanup\n    }\n    finally {\n       isClosed = true;\n       super.close();\n    }\n}\n\nprotected void finalize() {\n    try {\n       if(!isClosed) close();\n    }\n    finally {\n       super.finalize();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "protected void close() {\n    try {\n       // do subclass cleanup\n    }\n    finally {\n       isClosed = true;\n       super.close();\n    }\n}\n\nprotected void finalize() {\n    try {\n       if(!isClosed) close();\n    }\n    finally {\n       super.finalize();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "45951594-a819-4890-9539-01aa96fbc44f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract Methods \u0026 Classes"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract Methods \u0026 Classes"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "16f04835-78f5-487c-ab96-ec3f26d83066",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Concept | C++ | Java |\n—— | —— | —— |"
            ],
            [
              "Abstract Method",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "declared without an implementation | pure virtual methodvirtual void eat(void) = 0; | abstract methodabstract void draw(); |"
            ],
            [
              "Abstract Class",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "cannot be instantiated | cannot be instantiated; has at least 1 pure virtual methodclass AB {public: virtual void f() = 0;}; | cannot be instantiated; can have non-abstract methodsabstract class GraphicObject {} |"
            ],
            [
              "Interface",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "no instance fields | no “interface” keyword, but can mimic a Java interface with facilities of an abstract class | very similar to abstract class, but 1) supports multiple inheritance; 2) no instance fieldsinterface TestInterface {} |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Concept | C++ | Java |\n—— | —— | —— |"
          },
          {
            "Text": "Abstract Method",
            "AttrFlags": 1
          },
          {
            "Text": "declared without an implementation | pure virtual methodvirtual void eat(void) = 0; | abstract methodabstract void draw(); |"
          },
          {
            "Text": "Abstract Class",
            "AttrFlags": 1
          },
          {
            "Text": "cannot be instantiated | cannot be instantiated; has at least 1 pure virtual methodclass AB {public: virtual void f() = 0;}; | cannot be instantiated; can have non-abstract methodsabstract class GraphicObject {} |"
          },
          {
            "Text": "Interface",
            "AttrFlags": 1
          },
          {
            "Text": "no instance fields | no “interface” keyword, but can mimic a Java interface with facilities of an abstract class | very similar to abstract class, but 1) supports multiple inheritance; 2) no instance fieldsinterface TestInterface {} |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257391,
        "id": "977c503f-b46c-4da0-94d0-53b9819a9305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257391,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Accessibility Modifiers"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Accessibility Modifiers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257392,
        "id": "2c1da879-9754-4099-abf0-bf9c292a53c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257392,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Modifier | C++ | Java |\n—— | —— | —— |"
            ],
            [
              "Public",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " - accessible by all | "
            ],
            [
              "no special notes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "no special notes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "Protected",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " - accessible by subclasses | also accessible by friends | also accessible within same package |"
            ],
            [
              "Private",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " - accessible by members | also accessible by friends | "
            ],
            [
              "no special notes",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "default",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | class default is private; struct default is public | accessible by all classes within the same package |"
            ],
            [
              "other",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " | Friend - a way to grant access to private \u0026 protected members without inheritance (see below) | |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Modifier | C++ | Java |\n—— | —— | —— |"
          },
          {
            "Text": "Public",
            "AttrFlags": 1
          },
          {
            "Text": " - accessible by all | "
          },
          {
            "Text": "no special notes",
            "AttrFlags": 4
          },
          {
            "Text": " | "
          },
          {
            "Text": "no special notes",
            "AttrFlags": 4
          },
          {
            "Text": " |"
          },
          {
            "Text": "Protected",
            "AttrFlags": 1
          },
          {
            "Text": " - accessible by subclasses | also accessible by friends | also accessible within same package |"
          },
          {
            "Text": "Private",
            "AttrFlags": 1
          },
          {
            "Text": " - accessible by members | also accessible by friends | "
          },
          {
            "Text": "no special notes",
            "AttrFlags": 4
          },
          {
            "Text": " |"
          },
          {
            "Text": "default",
            "AttrFlags": 4
          },
          {
            "Text": " | class default is private; struct default is public | accessible by all classes within the same package |"
          },
          {
            "Text": "other",
            "AttrFlags": 4
          },
          {
            "Text": " | Friend - a way to grant access to private \u0026 protected members without inheritance (see below) | |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257392,
        "id": "740b1c8f-0bfd-484c-bc48-2550c8e259ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257392,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ Friend Example"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++ Friend Example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257392,
        "id": "59c0c42b-9fbb-4e01-ad6a-7c2bba25f714",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257392,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Node {\n  private:\n    int key;  Node *next;\n    // LinkedList::search() can access \"key\" \u0026 \"next\"\n    friend int LinkedList::search();\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Node {\n  private:\n    int key;  Node *next;\n    // LinkedList::search() can access \"key\" \u0026 \"next\"\n    friend int LinkedList::search();\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257392,
        "id": "e73ecf93-291b-44b0-8471-0df8140e9dee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257392,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Dreaded Diamond Problem"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Dreaded Diamond Problem"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257392,
        "id": "1904b5b9-0256-4778-9ae0-0cd3e6bfc460",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257392,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The diamond problem is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C. If there is a method in A that B and C have overridden, and D does not override it, then which version of the method does D inherit: that of B, or that of C? (from Wikipedia)"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The diamond problem is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C. If there is a method in A that B and C have overridden, and D does not override it, then which version of the method does D inherit: that of B, or that of C? (from Wikipedia)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "f863545c-b212-49b4-9d2d-333b52097fab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/a029cf8c-d459-4a6f-a45e-f3cf3d819481/e56287bf880e76ba06020f976bf7d73b41a70fc7.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/a029cf8c-d459-4a6f-a45e-f3cf3d819481/e56287bf880e76ba06020f976bf7d73b41a70fc7.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2Fa029cf8c-d459-4a6f-a45e-f3cf3d819481%2Fe56287bf880e76ba06020f976bf7d73b41a70fc7.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "f5222441-1aaf-44d5-976c-785bf66d26de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Dreaded Diamond Problem"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Dreaded Diamond Problem"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "d513112e-5ffa-4d79-b2b2-fedbac2b7537",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While C++ has always been susceptible to the diamond problem, Java was susceptible until Java 8. Originally, Java didn’t support multiple inheritance, but with the advent of default interface methods, Java classes can not inherit “implementation” from more than one class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While C++ has always been susceptible to the diamond problem, Java was susceptible until Java 8. Originally, Java didn’t support multiple inheritance, but with the advent of default interface methods, Java classes can not inherit “implementation” from more than one class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "668f362c-2d75-4a56-a38c-41d929c13bcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "java.lang.Object Class"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "java.lang.Object Class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "8936589e-aecc-4409-8e59-aff263529fee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java all classes inherit, either implicitly or explicitly, from the Object class. Any Java reference can be cast to the Object type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java all classes inherit, either implicitly or explicitly, from the Object class. Any Java reference can be cast to the Object type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "0d3b00bb-9029-49fc-af4f-c6633badc85a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ doesn’t have a comparable “Object” class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++ doesn’t have a comparable “Object” class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257393,
        "id": "8682bdac-8a96-4f74-9578-3a4806c10e19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257393,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java Collections \u0026 C++ Containers"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java Collections \u0026 C++ Containers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257394,
        "id": "c025d7c4-6cd5-411f-a7a2-14134f86c6ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257394,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java Collections are symonymous with C++ Containers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java Collections are symonymous with C++ Containers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257394,
        "id": "c941d43d-6fa9-44a5-9369-fa7d375dcca7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257394,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java Collections Flowchart"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java Collections Flowchart"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257394,
        "id": "d0bd6a1a-e70b-4f18-acb7-0b699e278404",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257394,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "C++ Containers Flowchart"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "C++ Containers Flowchart"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257394,
        "id": "9b17d6c3-0e0d-46ef-b0c1-2924e0945d43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257394,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Integer Types"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Integer Types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257394,
        "id": "4925171c-7dbe-478c-b029-6946b2188750",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257394,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bits | Min | Max | C++ Type(on LLP64 or LP64) | Java Type |\n—— | —— | —— | —— | —— |\n8 | -2(8-1) = -128 | 2(8-1)-1 = 127 | char | byte |\n8 | 0 | 2(8)-1 = 255 | unsigned char | – |\n16 | -2(16-1) = -32,768 | 2(16-1)-1 = 32,767 | short | short |\n16 | 0 (\\u0000) | 2(16)-1 = 65,535 (\\uFFFF) | unsigned short | char (unsigned) |\n32 | -2(32-1) = -2.147 billion | 2(32-1)-1 = 2.147 billion | int | int |\n32 | 0 | 2(32)-1 = 4.295 billion | unsigned int | – |\n64 | -2(64-1) | 2(16-1)-1 | long* | long long | long |\n64 | 0 | 2(16)-1 | unsigned long*unsigned long long | – |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bits | Min | Max | C++ Type(on LLP64 or LP64) | Java Type |\n—— | —— | —— | —— | —— |\n8 | -2(8-1) = -128 | 2(8-1)-1 = 127 | char | byte |\n8 | 0 | 2(8)-1 = 255 | unsigned char | – |\n16 | -2(16-1) = -32,768 | 2(16-1)-1 = 32,767 | short | short |\n16 | 0 (\\u0000) | 2(16)-1 = 65,535 (\\uFFFF) | unsigned short | char (unsigned) |\n32 | -2(32-1) = -2.147 billion | 2(32-1)-1 = 2.147 billion | int | int |\n32 | 0 | 2(32)-1 = 4.295 billion | unsigned int | – |\n64 | -2(64-1) | 2(16-1)-1 | long* | long long | long |\n64 | 0 | 2(16)-1 | unsigned long*unsigned long long | – |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257394,
        "id": "1afc8dba-05c7-4932-8e65-5da93fef7d62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257394,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Win64 API is only 32 bit"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " Win64 API is only 32 bit"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520257395,
        "id": "3226a4d3-4cbb-447b-9d27-b4a12780dd18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520257395,
        "parent_id": "b8ca304f-90e6-4c61-a7f4-bfb57eb98720",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lots more C++ types",
              [
                [
                  "a",
                  "http://en.cppreference.com/w/cpp/language/types"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lots more C++ types",
            "Link": "http://en.cppreference.com/w/cpp/language/types"
          }
        ]
      }
    ],
    "title": "C Comparison",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}