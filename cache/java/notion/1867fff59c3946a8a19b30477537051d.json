{
  "ID": "1867fff5-9c39-46a8-a19b-30477537051d",
  "Root": {
    "alive": true,
    "content": [
      "46a405c8-f309-4278-bcad-b5662936aa01",
      "f6d22847-6518-4a84-a001-8f3e5d1a7d44",
      "9cc0d7ea-e25c-4aa3-9372-36455c3a4368",
      "b39695b7-c817-4f89-bde3-eeb6a22ed644",
      "33ae86a9-9a4e-47a9-89f6-a64e8c01dee0",
      "abe12ec9-a774-4d48-99db-3433ab6bb5ad",
      "02aa3516-bf0f-4308-bb55-b2ab72c6829a",
      "58451751-a900-4788-88b3-40de113c7b82",
      "78455911-66b6-4142-b99f-57d9a3a9b6d7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460437275,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1867fff5-9c39-46a8-a19b-30477537051d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551745135387,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Visualizing readwrite barriers while using synchronized volatile"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437270,
        "id": "46a405c8-f309-4278-bcad-b5662936aa01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437270,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As we know that we should use "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword to make execution of a method or block exclusive. But few of us may not be aware of one more important aspect of using "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword: "
            ],
            [
              "apart from making a unit of code atomic, it also provides read / write barrier",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". What is this read / write barrier? Let’s discuss this using an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As we know that we should use "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " keyword to make execution of a method or block exclusive. But few of us may not be aware of one more important aspect of using "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " keyword: "
          },
          {
            "Text": "apart from making a unit of code atomic, it also provides read / write barrier",
            "AttrFlags": 4
          },
          {
            "Text": ". What is this read / write barrier? Let’s discuss this using an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437273,
        "id": "f6d22847-6518-4a84-a001-8f3e5d1a7d44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437273,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Counter {\n\n  private Integer count = 10;\n\n  public synchronized void incrementCount() {\n    count++;\n  }\n\n  public Integer getCount() {\n    return count;\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Counter {\n\n  private Integer count = 10;\n\n  public synchronized void incrementCount() {\n    count++;\n  }\n\n  public Integer getCount() {\n    return count;\n  }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437273,
        "id": "9cc0d7ea-e25c-4aa3-9372-36455c3a4368",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437273,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s suppose a thread "
            ],
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " calls "
            ],
            [
              "incrementCount()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " first then another thread "
            ],
            [
              "B",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " calls "
            ],
            [
              "getCount()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In this scenario there is no guarantee that B will see updated value of "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It may still see "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as "
            ],
            [
              "10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", even it is also possible that it never sees updated value of "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ever."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s suppose a thread "
          },
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": " calls "
          },
          {
            "Text": "incrementCount()",
            "AttrFlags": 2
          },
          {
            "Text": " first then another thread "
          },
          {
            "Text": "B",
            "AttrFlags": 4
          },
          {
            "Text": " calls "
          },
          {
            "Text": "getCount()",
            "AttrFlags": 2
          },
          {
            "Text": ". In this scenario there is no guarantee that B will see updated value of "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": ". It may still see "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " as "
          },
          {
            "Text": "10",
            "AttrFlags": 2
          },
          {
            "Text": ", even it is also possible that it never sees updated value of "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " ever."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437274,
        "id": "b39695b7-c817-4f89-bde3-eeb6a22ed644",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437274,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To understand this behavior we need to understand how Java memory model integrates with hardware architecture. In Java, each thread has it’s own thread stack. This stack contains: method call stack and local variable created in that thread. In a multi core system, it is quite possible that two threads are running concurrently in separate cores. In such scenario it is possible that part of a thread’s stack lies inside register / cache of a core. If inside a thread, an object is accessed using "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") keyword, after "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block that thread syncs it’s local copy of that variable with the main memory. This creates a read / write barrier and makes sure that the thread is seeing the latest value of that object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To understand this behavior we need to understand how Java memory model integrates with hardware architecture. In Java, each thread has it’s own thread stack. This stack contains: method call stack and local variable created in that thread. In a multi core system, it is quite possible that two threads are running concurrently in separate cores. In such scenario it is possible that part of a thread’s stack lies inside register / cache of a core. If inside a thread, an object is accessed using "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " (or "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": ") keyword, after "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " block that thread syncs it’s local copy of that variable with the main memory. This creates a read / write barrier and makes sure that the thread is seeing the latest value of that object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437274,
        "id": "33ae86a9-9a4e-47a9-89f6-a64e8c01dee0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437274,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But in our case, since thread B has not used synchronized access to "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it might be refering value of "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " stored in register and may never see updates from thread A. To make sure that B sees latest value of count we need to make "
            ],
            [
              "getCount()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " synchronized as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But in our case, since thread B has not used synchronized access to "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": ", it might be refering value of "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " stored in register and may never see updates from thread A. To make sure that B sees latest value of count we need to make "
          },
          {
            "Text": "getCount()",
            "AttrFlags": 2
          },
          {
            "Text": " synchronized as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437274,
        "id": "abe12ec9-a774-4d48-99db-3433ab6bb5ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437274,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public synchronized Integer getCount() {\n  return count;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public synchronized Integer getCount() {\n  return count;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437274,
        "id": "02aa3516-bf0f-4308-bb55-b2ab72c6829a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437274,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now when thread A is done with updating "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it unlocks "
            ],
            [
              "Counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance, at the same time creates write barrier and flushes all changes done inside that block to the main memory. Similarly when thread B acquires lock on the same instance of "
            ],
            [
              "Counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it enters into read barrier and reads value of "
            ],
            [
              "count",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from main memory and sees all updates."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now when thread A is done with updating "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " it unlocks "
          },
          {
            "Text": "Counter",
            "AttrFlags": 2
          },
          {
            "Text": " instance, at the same time creates write barrier and flushes all changes done inside that block to the main memory. Similarly when thread B acquires lock on the same instance of "
          },
          {
            "Text": "Counter",
            "AttrFlags": 2
          },
          {
            "Text": ", it enters into read barrier and reads value of "
          },
          {
            "Text": "count",
            "AttrFlags": 2
          },
          {
            "Text": " from main memory and sees all updates."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437275,
        "id": "58451751-a900-4788-88b3-40de113c7b82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437275,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/tnFLB.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/tnFLB.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2FtnFLB.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460437275,
        "id": "78455911-66b6-4142-b99f-57d9a3a9b6d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460437275,
        "parent_id": "1867fff5-9c39-46a8-a19b-30477537051d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Same visibility effect goes for "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " read / writes as well. All variables updated prior to write to "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be flushed to main memory and all reads after "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable read will be from main memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Same visibility effect goes for "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " read / writes as well. All variables updated prior to write to "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " will be flushed to main memory and all reads after "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " variable read will be from main memory."
          }
        ]
      }
    ],
    "title": "Visualizing readwrite barriers while using synchronized volatile",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}