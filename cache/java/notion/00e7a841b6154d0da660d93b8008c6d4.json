{
  "ID": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
  "Root": {
    "alive": true,
    "content": [
      "2d59b7e3-fef7-4122-953e-b556d8563b49",
      "c22d8e1d-948f-44e7-9eca-eca914bdf157",
      "400e9e3f-49bf-466f-ae4e-0edeee415855",
      "356b3f9d-1649-4f22-82d5-f5137133d8fb",
      "515aded9-447a-4d3f-b507-dd13750f6138",
      "1ee68193-03ac-45ec-9da0-8fa1ed900918",
      "fdc335dc-e47d-4b7d-9d3f-39bedf940d38",
      "ac0fc72b-b0f5-4ac9-a95e-87646c810571",
      "c3d2072a-1184-4b13-9730-93b2f262e0b9",
      "79d617ac-e491-452a-914d-f90c26d3163b",
      "f275e3d7-8231-44f0-82c2-b29cb9d98ca9",
      "a1bbfee6-3f6b-4e6e-9a79-61f18115ba2e",
      "874b3965-3137-409a-8675-d78b923dc15a",
      "7f471939-a2d7-47e7-8499-d3b6943f44e2",
      "e3dbc6d4-7e78-4e43-9ea7-27408ca05c45",
      "8cc0d924-8f60-443b-9b02-4c5d7e337cfb",
      "9314af0e-9c17-4d13-8a64-a7ccebfbbd96",
      "1972602c-f3fb-40ae-b698-f0d8c9d6dad5",
      "38fd69f1-17e9-4bd0-9793-cf6b2dae993c",
      "d5fa9839-8afc-4206-a44d-fc637192ae4c",
      "50edc904-fde5-41ce-beaf-615ceb6250bb",
      "80f2f383-8702-405c-a76e-133f83e75fb8",
      "e4ce78a5-2e87-458a-a2f1-1e53985b50f7",
      "496843e3-5bf5-496a-a6a1-ede9b260fa38",
      "1330d17a-cf1d-4b41-9d26-6a00e449c941",
      "b3f487f0-7c48-4731-b24f-9403270ef896",
      "41d6ac27-3af6-4f49-939a-877030336193",
      "5fbc7e72-ee5e-4bf2-8ce5-daafa93282ea",
      "f5f7da7b-2487-4e8e-ab56-657f78523d3a",
      "d2783165-9d5a-4ca3-aaf8-c05e56fad27c",
      "f293bfd3-2f12-4b02-955d-c97abcfbddbf",
      "dcd1941d-57b6-41f0-9241-5f909524f2f6",
      "faf6b26f-cf77-4bee-acee-358d09b4c347",
      "78bc3dbc-4a26-4065-bd35-becb7b1cc802",
      "806e57e2-52f0-4315-a456-9cda6102b667",
      "94142e65-8194-42ca-bc47-3c38828c9afb",
      "b1e4529e-292d-4c10-96b9-85951de5c91e",
      "a5096338-d79f-4af3-a65c-e4d4e5d91994",
      "f9d8a507-bca4-4c24-be9f-0e6b2464e989",
      "3bb4dbf1-3b4f-4312-b780-037f14039ab2",
      "ccdccb21-eb4f-4cb2-beba-96356a6c52bb",
      "da3411e7-1fa4-40d4-914f-745fd7e25e4c",
      "84a4280f-dcc6-4b94-8ef5-a92d9aab0932",
      "c2b2bd71-43d1-4f02-947d-75176e63e946",
      "5416002e-4063-4dea-a664-d88ab1ea9454",
      "92552dc4-8402-4e3a-8c56-29e672d9622f",
      "7dd65f72-0b46-419b-b606-641ee4cd13fd",
      "3643121a-de62-4a52-8954-f2f777a82e11",
      "973dca36-db73-450a-8771-8f35a859750e",
      "0a2b05bb-5061-4a2a-9b7f-0eaca55c7a82",
      "9926b794-b670-4368-9cd2-f81dae04e373"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460145202,
    "id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460145202,
    "parent_id": "b352327f-4045-48dc-891e-ceda03965ca0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Introduction to Java lambdas"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145190,
        "id": "2d59b7e3-fef7-4122-953e-b556d8563b49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145190,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functional Interfaces"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functional Interfaces"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145195,
        "id": "c22d8e1d-948f-44e7-9eca-eca914bdf157",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145195,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambdas can only operate on a functional interface, which is an interface with just one abstract method. Functional interfaces can have any number of "
            ],
            [
              "default",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/113/default-methods"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods. (For this reason, they are sometimes referred to as Single Abstract Method Interfaces, or SAM Interfaces)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambdas can only operate on a functional interface, which is an interface with just one abstract method. Functional interfaces can have any number of "
          },
          {
            "Text": "default",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/java/113/default-methods"
          },
          {
            "Text": " or "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " methods. (For this reason, they are sometimes referred to as Single Abstract Method Interfaces, or SAM Interfaces)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145195,
        "id": "400e9e3f-49bf-466f-ae4e-0edeee415855",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145195,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Foo1 {\n    void bar();\n}\n\ninterface Foo2 {\n    int bar(boolean baz);\n}\n\ninterface Foo3 {\n    String bar(Object baz, int mink);\n}\n\ninterface Foo4 {\n    default String bar() { // default so not counted\n        return \"baz\";\n    }\n    void quux();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Foo1 {\n    void bar();\n}\n\ninterface Foo2 {\n    int bar(boolean baz);\n}\n\ninterface Foo3 {\n    String bar(Object baz, int mink);\n}\n\ninterface Foo4 {\n    default String bar() { // default so not counted\n        return \"baz\";\n    }\n    void quux();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145195,
        "id": "356b3f9d-1649-4f22-82d5-f5137133d8fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145195,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When declaring a functional interface the "
            ],
            [
              "@FunctionalInterface",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html"
                ]
              ]
            ],
            [
              " annotation can be added. This has no special effect, but a compiler error will be generated if this annotation is applied to an interface which is not functional, thus acting as a reminder that the interface should not be changed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When declaring a functional interface the "
          },
          {
            "Text": "@FunctionalInterface",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html"
          },
          {
            "Text": " annotation can be added. This has no special effect, but a compiler error will be generated if this annotation is applied to an interface which is not functional, thus acting as a reminder that the interface should not be changed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145195,
        "id": "515aded9-447a-4d3f-b507-dd13750f6138",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145195,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@FunctionalInterface\ninterface Foo5 {\n    void bar();\n}\n\n@FunctionalInterface\ninterface BlankFoo1 extends Foo3 { // inherits abstract method from Foo3\n}\n\n@FunctionalInterface\ninterface Foo6 {\n    void bar();\n    boolean equals(Object obj); // overrides one of Object's method so not counted\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@FunctionalInterface\ninterface Foo5 {\n    void bar();\n}\n\n@FunctionalInterface\ninterface BlankFoo1 extends Foo3 { // inherits abstract method from Foo3\n}\n\n@FunctionalInterface\ninterface Foo6 {\n    void bar();\n    boolean equals(Object obj); // overrides one of Object's method so not counted\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "1ee68193-03ac-45ec-9da0-8fa1ed900918",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversely, this is "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a functional interface, as it has more than "
            ],
            [
              "one abstract",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversely, this is "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " a functional interface, as it has more than "
          },
          {
            "Text": "one abstract",
            "AttrFlags": 1
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "fdc335dc-e47d-4b7d-9d3f-39bedf940d38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface BadFoo {\n    void bar();\n    void quux(); // \u003c-- Second method prevents lambda: which one should \n                 // be considered as lambda?\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface BadFoo {\n    void bar();\n    void quux(); // \u003c-- Second method prevents lambda: which one should \n                 // be considered as lambda?\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "ac0fc72b-b0f5-4ac9-a95e-87646c810571",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is "
            ],
            [
              "also not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a functional interface, as it does not have any methods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is "
          },
          {
            "Text": "also not",
            "AttrFlags": 1
          },
          {
            "Text": " a functional interface, as it does not have any methods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "c3d2072a-1184-4b13-9730-93b2f262e0b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface BlankFoo2 { }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface BlankFoo2 { }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "79d617ac-e491-452a-914d-f90c26d3163b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Take note of the following. Suppose you have"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Take note of the following. Suppose you have"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "f275e3d7-8231-44f0-82c2-b29cb9d98ca9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "interface Parent { public int parentMethod(); }",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "interface Parent { public int parentMethod(); }",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "a1bbfee6-3f6b-4e6e-9a79-61f18115ba2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145196,
        "id": "874b3965-3137-409a-8675-d78b923dc15a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145196,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "interface Child extends Parent { public int ChildMethod(); }",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "interface Child extends Parent { public int ChildMethod(); }",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145197,
        "id": "7f471939-a2d7-47e7-8499-d3b6943f44e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145197,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then "
            ],
            [
              "Child",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "cannot",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " be a functional interface since it has two specified methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then "
          },
          {
            "Text": "Child",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "cannot",
            "AttrFlags": 1
          },
          {
            "Text": " be a functional interface since it has two specified methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145197,
        "id": "e3dbc6d4-7e78-4e43-9ea7-27408ca05c45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145197,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java 8 also provides a number of generic templated functional interfaces in the package "
            ],
            [
              "java.util.function",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html"
                ]
              ]
            ],
            [
              ". For example, the built-in interface "
            ],
            [
              "Predicate\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " wraps a single method which inputs a value of type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and returns a "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java 8 also provides a number of generic templated functional interfaces in the package "
          },
          {
            "Text": "java.util.function",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html"
          },
          {
            "Text": ". For example, the built-in interface "
          },
          {
            "Text": "Predicate\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " wraps a single method which inputs a value of type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " and returns a "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145197,
        "id": "8cc0d924-8f60-443b-9b02-4c5d7e337cfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145197,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145197,
        "id": "9314af0e-9c17-4d13-8a64-a7ccebfbbd96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145197,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda Expressions"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda Expressions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145197,
        "id": "1972602c-f3fb-40ae-b698-f0d8c9d6dad5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145197,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The basic structure of a Lambda expression is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The basic structure of a Lambda expression is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "38fd69f1-17e9-4bd0-9793-cf6b2dae993c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/RRcfc.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/RRcfc.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2FRRcfc.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "d5fa9839-8afc-4206-a44d-fc637192ae4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "fi",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will then hold a singleton instance of a class, similar to an anonymous class, which implements "
            ],
            [
              "FunctionalInterface",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and where the one method’s definition is "
            ],
            [
              "{ System.out.println(\"Hello\"); }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In other words, the above is mostly equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "fi",
            "AttrFlags": 2
          },
          {
            "Text": " will then hold a singleton instance of a class, similar to an anonymous class, which implements "
          },
          {
            "Text": "FunctionalInterface",
            "AttrFlags": 2
          },
          {
            "Text": " and where the one method’s definition is "
          },
          {
            "Text": "{ System.out.println(\"Hello\"); }",
            "AttrFlags": 2
          },
          {
            "Text": ". In other words, the above is mostly equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "50edc904-fde5-41ce-beaf-615ceb6250bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "FunctionalInterface fi = new FunctionalInterface() {\n    @Override\n    public void theOneMethod() {\n        System.out.println(\"Hello\");\n    }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "FunctionalInterface fi = new FunctionalInterface() {\n    @Override\n    public void theOneMethod() {\n        System.out.println(\"Hello\");\n    }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "80f2f383-8702-405c-a76e-133f83e75fb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The lambda is only “mostly equivalent” to the anonymous class because in a lambda, the meaning of expressions like "
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "super",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "toString()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference the class within which the assignment takes place, not the newly created object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The lambda is only “mostly equivalent” to the anonymous class because in a lambda, the meaning of expressions like "
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "super",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "toString()",
            "AttrFlags": 2
          },
          {
            "Text": " reference the class within which the assignment takes place, not the newly created object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "e4ce78a5-2e87-458a-a2f1-1e53985b50f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You cannot specify the name of the method when using a lambda—but you shouldn’t need to, because a functional interface must have only one abstract method, so Java overrides that one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You cannot specify the name of the method when using a lambda—but you shouldn’t need to, because a functional interface must have only one abstract method, so Java overrides that one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "496843e3-5bf5-496a-a6a1-ede9b260fa38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In cases where the type of the lambda is not certain, (e.g. overloaded methods) you can add a cast to the lambda to tell the compiler what its type should be, like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In cases where the type of the lambda is not certain, (e.g. overloaded methods) you can add a cast to the lambda to tell the compiler what its type should be, like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145198,
        "id": "1330d17a-cf1d-4b41-9d26-6a00e449c941",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145198,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Object fooHolder = (Foo1) () -\u003e System.out.println(\"Hello\");\nSystem.out.println(fooHolder instanceof Foo1); // returns true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Object fooHolder = (Foo1) () -\u003e System.out.println(\"Hello\");\nSystem.out.println(fooHolder instanceof Foo1); // returns true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "b3f487f0-7c48-4731-b24f-9403270ef896",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the functional interface’s single method takes parameters, the local formal names of these should appear between the brackets of the lambda. There is no need to declare the type of the parameter or return as these are taken from the interface (although it is not an error to declare the parameter types if you want to). Thus, these two examples are equivalent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the functional interface’s single method takes parameters, the local formal names of these should appear between the brackets of the lambda. There is no need to declare the type of the parameter or return as these are taken from the interface (although it is not an error to declare the parameter types if you want to). Thus, these two examples are equivalent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "41d6ac27-3af6-4f49-939a-877030336193",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Foo2 longFoo = new Foo2() {\n    @Override\n    public int bar(boolean baz) {\n        return baz ? 1 : 0;\n    }\n};\nFoo2 shortFoo = (x) -\u003e { return x ? 1 : 0; };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Foo2 longFoo = new Foo2() {\n    @Override\n    public int bar(boolean baz) {\n        return baz ? 1 : 0;\n    }\n};\nFoo2 shortFoo = (x) -\u003e { return x ? 1 : 0; };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "5fbc7e72-ee5e-4bf2-8ce5-daafa93282ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The parentheses around the argument can be omitted if the function only has one argument:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The parentheses around the argument can be omitted if the function only has one argument:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "f5f7da7b-2487-4e8e-ab56-657f78523d3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Foo2 np = x -\u003e { return x ? 1 : 0; }; // okay\nFoo3 np2 = x, y -\u003e x.toString() + y // not okay"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Foo2 np = x -\u003e { return x ? 1 : 0; }; // okay\nFoo3 np2 = x, y -\u003e x.toString() + y // not okay",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "d2783165-9d5a-4ca3-aaf8-c05e56fad27c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "f293bfd3-2f12-4b02-955d-c97abcfbddbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implicit Returns"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implicit Returns"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "dcd1941d-57b6-41f0-9241-5f909524f2f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the code placed inside a lambda is a Java "
            ],
            [
              "expression",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " rather than a "
            ],
            [
              "statement",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", it is treated as a method which returns the value of the expression. Thus, the following two are equivalent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the code placed inside a lambda is a Java "
          },
          {
            "Text": "expression",
            "AttrFlags": 4
          },
          {
            "Text": " rather than a "
          },
          {
            "Text": "statement",
            "AttrFlags": 4
          },
          {
            "Text": ", it is treated as a method which returns the value of the expression. Thus, the following two are equivalent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "faf6b26f-cf77-4bee-acee-358d09b4c347",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IntUnaryOperator addOneShort = (x) -\u003e (x + 1);\nIntUnaryOperator addOneLong = (x) -\u003e { return (x + 1); };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IntUnaryOperator addOneShort = (x) -\u003e (x + 1);\nIntUnaryOperator addOneLong = (x) -\u003e { return (x + 1); };",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "78bc3dbc-4a26-4065-bd35-becb7b1cc802",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "806e57e2-52f0-4315-a456-9cda6102b667",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Accessing Local Variables (value closures)"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Accessing Local Variables (value closures)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "94142e65-8194-42ca-bc47-3c38828c9afb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since lambdas are syntactic shorthand for anonymous classes, they follow the same rules for accessing local variables in the enclosing scope; the variables must be treated as "
            ],
            [
              "final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and not modified inside the lambda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since lambdas are syntactic shorthand for anonymous classes, they follow the same rules for accessing local variables in the enclosing scope; the variables must be treated as "
          },
          {
            "Text": "final",
            "AttrFlags": 2
          },
          {
            "Text": " and not modified inside the lambda."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145199,
        "id": "b1e4529e-292d-4c10-96b9-85951de5c91e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145199,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IntUnaryOperator makeAdder(int amount) {\n    return (x) -\u003e (x + amount); // Legal even though amount will go out of scope\n                                // because amount is not modified\n}\n\nIntUnaryOperator makeAccumulator(int value) {\n    return (x) -\u003e { value += x; return value; }; // Will not compile\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IntUnaryOperator makeAdder(int amount) {\n    return (x) -\u003e (x + amount); // Legal even though amount will go out of scope\n                                // because amount is not modified\n}\n\nIntUnaryOperator makeAccumulator(int value) {\n    return (x) -\u003e { value += x; return value; }; // Will not compile\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "a5096338-d79f-4af3-a65c-e4d4e5d91994",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If it is necessary to wrap a changing variable in this way, a regular object that keeps a copy of the variable should be used. Read more in http://stackoverflow.com/documentation/java/91/lambda-expressions/14441/java-closures-with-lambda-expressions"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If it is necessary to wrap a changing variable in this way, a regular object that keeps a copy of the variable should be used. Read more in http://stackoverflow.com/documentation/java/91/lambda-expressions/14441/java-closures-with-lambda-expressions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "f9d8a507-bca4-4c24-be9f-0e6b2464e989",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "3bb4dbf1-3b4f-4312-b780-037f14039ab2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Accepting Lambdas"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Accepting Lambdas"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "ccdccb21-eb4f-4cb2-beba-96356a6c52bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because a lambda is an implementation of an interface, nothing special needs to be done to make a method accept a lambda: any function which takes a functional interface can also accept a lambda."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because a lambda is an implementation of an interface, nothing special needs to be done to make a method accept a lambda: any function which takes a functional interface can also accept a lambda."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "da3411e7-1fa4-40d4-914f-745fd7e25e4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void passMeALambda(Foo1 f) {\n    f.bar();\n}\npassMeALambda(() -\u003e System.out.println(\"Lambda called\"));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void passMeALambda(Foo1 f) {\n    f.bar();\n}\npassMeALambda(() -\u003e System.out.println(\"Lambda called\"));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "84a4280f-dcc6-4b94-8ef5-a92d9aab0932",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Type of a Lambda Expression"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Type of a Lambda Expression"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145200,
        "id": "c2b2bd71-43d1-4f02-947d-75176e63e946",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145200,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda expression, by itself, does not have a specific type. While it is true that the types and number of parameters, along with the type of a return value can convey some type information, such information will only constrain what types it can be assigned to. The lambda receives a type when it is assigned to a functional interface type in one of the following ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda expression, by itself, does not have a specific type. While it is true that the types and number of parameters, along with the type of a return value can convey some type information, such information will only constrain what types it can be assigned to. The lambda receives a type when it is assigned to a functional interface type in one of the following ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145201,
        "id": "5416002e-4063-4dea-a664-d88ab1ea9454",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145201,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Direct assignment to a functional type, e.g. "
            ],
            [
              "myPredicate = s -\u003e s.isEmpty()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Direct assignment to a functional type, e.g. "
          },
          {
            "Text": "myPredicate = s -\u003e s.isEmpty()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145201,
        "id": "92552dc4-8402-4e3a-8c56-29e672d9622f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145201,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passing it as a parameter that has a functional type, e.g. "
            ],
            [
              "stream.filter(s -\u003e s.isEmpty())",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Passing it as a parameter that has a functional type, e.g. "
          },
          {
            "Text": "stream.filter(s -\u003e s.isEmpty())",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145201,
        "id": "7dd65f72-0b46-419b-b606-641ee4cd13fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145201,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Returning it from a function that returns a functional type, e.g. "
            ],
            [
              "return s -\u003e s.isEmpty()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Returning it from a function that returns a functional type, e.g. "
          },
          {
            "Text": "return s -\u003e s.isEmpty()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145201,
        "id": "3643121a-de62-4a52-8954-f2f777a82e11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145201,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Casting it to a functional type, e.g. "
            ],
            [
              "(Predicate\u003cString\u003e) s -\u003e s.isEmpty()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Casting it to a functional type, e.g. "
          },
          {
            "Text": "(Predicate\u003cString\u003e) s -\u003e s.isEmpty()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145201,
        "id": "973dca36-db73-450a-8771-8f35a859750e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145201,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Until any such assignment to a functional type is made, the lambda does not have a definite type. To illustrate, consider the lambda expression "
            ],
            [
              "o -\u003e o.isEmpty()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The same lambda expression can be assigned to many different functional types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Until any such assignment to a functional type is made, the lambda does not have a definite type. To illustrate, consider the lambda expression "
          },
          {
            "Text": "o -\u003e o.isEmpty()",
            "AttrFlags": 2
          },
          {
            "Text": ". The same lambda expression can be assigned to many different functional types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145202,
        "id": "0a2b05bb-5061-4a2a-9b7f-0eaca55c7a82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145202,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Predicate\u003cString\u003e javaStringPred = o -\u003e o.isEmpty();\nFunction\u003cString, Boolean\u003e javaFunc = o -\u003e o.isEmpty();\nPredicate\u003cList\u003e javaListPred = o -\u003e o.isEmpty();\nConsumer\u003cString\u003e javaStringConsumer = o -\u003e o.isEmpty(); // return value is ignored!\ncom.google.common.base.Predicate\u003cString\u003e guavaPredicate = o -\u003e o.isEmpty();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Predicate\u003cString\u003e javaStringPred = o -\u003e o.isEmpty();\nFunction\u003cString, Boolean\u003e javaFunc = o -\u003e o.isEmpty();\nPredicate\u003cList\u003e javaListPred = o -\u003e o.isEmpty();\nConsumer\u003cString\u003e javaStringConsumer = o -\u003e o.isEmpty(); // return value is ignored!\ncom.google.common.base.Predicate\u003cString\u003e guavaPredicate = o -\u003e o.isEmpty();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460145202,
        "id": "9926b794-b670-4368-9cd2-f81dae04e373",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460145202,
        "parent_id": "00e7a841-b615-4d0d-a660-d93b8008c6d4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now that they are assigned, the examples shown are of completely different types even though the lambda expressions looked the same, and they cannot be assigned to each other."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now that they are assigned, the examples shown are of completely different types even though the lambda expressions looked the same, and they cannot be assigned to each other."
          }
        ]
      }
    ],
    "title": "010 Introduction to Java lambdas"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}