{
  "ID": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
  "Root": {
    "alive": true,
    "content": [
      "a3b10ba4-4108-4ff8-b9c1-48aefffbedd5",
      "a84de673-9c15-4537-aa55-5bb731f6140e",
      "50f454e3-b775-4e04-9f4d-206e825aba33",
      "d5c654b2-3995-4fe5-adfc-25e5279d639d",
      "2301416e-c364-4a19-a92c-1d5660f60020",
      "b0794701-c885-4757-a5e6-f303eb66779b",
      "78fc54f5-7a46-47ee-91c5-375f595b67c9",
      "bec5d8e6-a735-443c-900c-6722ce47bca2",
      "6cc9a013-3504-4ffb-94c3-3e2701cdb687",
      "c93ac841-de7d-4648-9ce9-3642efb000ff",
      "7ee6cbd1-32fc-4f0a-8d6b-4c3de48c23b3",
      "7599d738-de62-41df-8110-ccac22e1ea74",
      "418c7681-87ce-467f-bd11-2cea83168018",
      "8df0e90c-f8f8-4b1b-91e5-b570238b4ad8",
      "edc7e92f-daa7-4dda-bec8-a42ec0cb9c14"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460160224,
    "id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460160224,
    "parent_id": "eaad0c1d-9ecf-4d2a-b640-d2df4debfaf8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Deciding between T super T and extends T"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160219,
        "id": "a3b10ba4-4108-4ff8-b9c1-48aefffbedd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160219,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The syntax for Java generics bounded wildcards, representing the unknown type by "
            ],
            [
              "?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The syntax for Java generics bounded wildcards, representing the unknown type by "
          },
          {
            "Text": "?",
            "AttrFlags": 2
          },
          {
            "Text": " is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160222,
        "id": "a84de673-9c15-4537-aa55-5bb731f6140e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160222,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "? extends T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " represents an upper bounded wildcard. The unknown type represents a type that must be a subtype of T, or type T itself."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "? extends T",
            "AttrFlags": 2
          },
          {
            "Text": " represents an upper bounded wildcard. The unknown type represents a type that must be a subtype of T, or type T itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160222,
        "id": "50f454e3-b775-4e04-9f4d-206e825aba33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160222,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "? super T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " represents a lower bounded wildcard. The unknown type represents a type that must be a supertype of T, or type T itself."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "? super T",
            "AttrFlags": 2
          },
          {
            "Text": " represents a lower bounded wildcard. The unknown type represents a type that must be a supertype of T, or type T itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160222,
        "id": "d5c654b2-3995-4fe5-adfc-25e5279d639d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160222,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As a rule of thumb, you should use"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As a rule of thumb, you should use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "2301416e-c364-4a19-a92c-1d5660f60020",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "? extends T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you only need “read” access (“input”)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "? extends T",
            "AttrFlags": 2
          },
          {
            "Text": " if you only need “read” access (“input”)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "b0794701-c885-4757-a5e6-f303eb66779b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "? super T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you need “write” access (“output”)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "? super T",
            "AttrFlags": 2
          },
          {
            "Text": " if you need “write” access (“output”)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "78fc54f5-7a46-47ee-91c5-375f595b67c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you need both (“modify”)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " if you need both (“modify”)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "bec5d8e6-a735-443c-900c-6722ce47bca2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "extends",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "super",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is usually "
            ],
            [
              "better",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " because it makes your code more flexible (as in: allowing the use of subtypes and supertypes), as you will see below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "extends",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "super",
            "AttrFlags": 2
          },
          {
            "Text": " is usually "
          },
          {
            "Text": "better",
            "AttrFlags": 4
          },
          {
            "Text": " because it makes your code more flexible (as in: allowing the use of subtypes and supertypes), as you will see below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "6cc9a013-3504-4ffb-94c3-3e2701cdb687",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Shoe {}\nclass IPhone {}\ninterface Fruit {}\nclass Apple implements Fruit {}\nclass Banana implements Fruit {}\nclass GrannySmith extends Apple {}\n\n   public class FruitHelper {\n\n        public void eatAll(Collection\u003c? extends Fruit\u003e fruits) {}\n\n        public void addApple(Collection\u003c? super Apple\u003e apples) {}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Shoe {}\nclass IPhone {}\ninterface Fruit {}\nclass Apple implements Fruit {}\nclass Banana implements Fruit {}\nclass GrannySmith extends Apple {}\n\n   public class FruitHelper {\n\n        public void eatAll(Collection\u003c? extends Fruit\u003e fruits) {}\n\n        public void addApple(Collection\u003c? super Apple\u003e apples) {}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "c93ac841-de7d-4648-9ce9-3642efb000ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The compiler will now be able to detect certain bad usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The compiler will now be able to detect certain bad usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160223,
        "id": "7ee6cbd1-32fc-4f0a-8d6b-4c3de48c23b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160223,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class GenericsTest {\n     public static void main(String[] args){\n FruitHelper fruitHelper = new FruitHelper() ;\n   List\u003cFruit\u003e fruits = new ArrayList\u003cFruit\u003e();\n   fruits.add(new Apple()); // Allowed, as Apple is a Fruit\n   fruits.add(new Banana()); // Allowed, as Banana is a Fruit\n   fruitHelper.addApple(fruits); // Allowed, as \"Fruit super Apple\"\n   fruitHelper.eatAll(fruits); // Allowed\n\n   Collection\u003cBanana\u003e bananas = new ArrayList\u003c\u003e();\n   bananas.add(new Banana()); // Allowed\n   //fruitHelper.addApple(bananas); // Compile error: may only contain Bananas!\n   fruitHelper.eatAll(bananas); // Allowed, as all Bananas are Fruits\n\n   Collection\u003cApple\u003e apples = new ArrayList\u003c\u003e();\n   fruitHelper.addApple(apples); // Allowed\n   apples.add(new GrannySmith()); // Allowed, as this is an Apple\n   fruitHelper.eatAll(apples); // Allowed, as all Apples are Fruits.\n   \n   Collection\u003cGrannySmith\u003e grannySmithApples = new ArrayList\u003c\u003e();\n   fruitHelper.addApple(grannySmithApples); //Compile error: Not allowed.\n                                  // GrannySmith is not a supertype of Apple\n   apples.add(new GrannySmith()); //Still allowed, GrannySmith is an Apple\n   fruitHelper.eatAll(grannySmithApples);//Still allowed, GrannySmith is a Fruit\n\n   Collection\u003cObject\u003e objects = new ArrayList\u003c\u003e();\n   fruitHelper.addApple(objects); // Allowed, as Object super Apple\n   objects.add(new Shoe()); // Not a fruit\n   objects.add(new IPhone()); // Not a fruit\n   //fruitHelper.eatAll(objects); // Compile error: may contain a Shoe, too!\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class GenericsTest {\n     public static void main(String[] args){\n FruitHelper fruitHelper = new FruitHelper() ;\n   List\u003cFruit\u003e fruits = new ArrayList\u003cFruit\u003e();\n   fruits.add(new Apple()); // Allowed, as Apple is a Fruit\n   fruits.add(new Banana()); // Allowed, as Banana is a Fruit\n   fruitHelper.addApple(fruits); // Allowed, as \"Fruit super Apple\"\n   fruitHelper.eatAll(fruits); // Allowed\n\n   Collection\u003cBanana\u003e bananas = new ArrayList\u003c\u003e();\n   bananas.add(new Banana()); // Allowed\n   //fruitHelper.addApple(bananas); // Compile error: may only contain Bananas!\n   fruitHelper.eatAll(bananas); // Allowed, as all Bananas are Fruits\n\n   Collection\u003cApple\u003e apples = new ArrayList\u003c\u003e();\n   fruitHelper.addApple(apples); // Allowed\n   apples.add(new GrannySmith()); // Allowed, as this is an Apple\n   fruitHelper.eatAll(apples); // Allowed, as all Apples are Fruits.\n   \n   Collection\u003cGrannySmith\u003e grannySmithApples = new ArrayList\u003c\u003e();\n   fruitHelper.addApple(grannySmithApples); //Compile error: Not allowed.\n                                  // GrannySmith is not a supertype of Apple\n   apples.add(new GrannySmith()); //Still allowed, GrannySmith is an Apple\n   fruitHelper.eatAll(grannySmithApples);//Still allowed, GrannySmith is a Fruit\n\n   Collection\u003cObject\u003e objects = new ArrayList\u003c\u003e();\n   fruitHelper.addApple(objects); // Allowed, as Object super Apple\n   objects.add(new Shoe()); // Not a fruit\n   objects.add(new IPhone()); // Not a fruit\n   //fruitHelper.eatAll(objects); // Compile error: may contain a Shoe, too!\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160224,
        "id": "7599d738-de62-41df-8110-ccac22e1ea74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160224,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Choosing the right "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "? super T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "? extends T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "necessary",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to allow the use with subtypes. The compiler can then ensure type safety; you should not need to cast (which is not type safe, and may cause programming errors) if you use them properly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Choosing the right "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "? super T",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "? extends T",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "necessary",
            "AttrFlags": 4
          },
          {
            "Text": " to allow the use with subtypes. The compiler can then ensure type safety; you should not need to cast (which is not type safe, and may cause programming errors) if you use them properly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160224,
        "id": "418c7681-87ce-467f-bd11-2cea83168018",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160224,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If it is not easy to understand, please remember "
            ],
            [
              "PECS",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " rule:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If it is not easy to understand, please remember "
          },
          {
            "Text": "PECS",
            "AttrFlags": 1
          },
          {
            "Text": " rule:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160224,
        "id": "8df0e90c-f8f8-4b1b-91e5-b570238b4ad8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160224,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Producer uses “Extends” and Consumer uses “Super”."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Producer uses “Extends” and Consumer uses “Super”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460160224,
        "id": "edc7e92f-daa7-4dda-bec8-a42ec0cb9c14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460160224,
        "parent_id": "8b2ace79-9f21-4a8a-8e5b-e874ecddcc16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Producer has only write access, and Consumer has only read access)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Producer has only write access, and Consumer has only read access)"
          }
        ]
      }
    ],
    "title": "020 Deciding between T super T and extends T"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}