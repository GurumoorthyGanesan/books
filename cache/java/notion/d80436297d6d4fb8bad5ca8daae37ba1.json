{
  "ID": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
  "Root": {
    "alive": true,
    "content": [
      "0d435cb2-92d5-4c73-89ed-68167b192a30",
      "90113dcb-1c75-4e90-bdfe-2853be03e7b2",
      "20741578-c4d4-46d8-b159-83f8ea2db03d",
      "3743f41b-9cd5-494d-ae50-dfb203e4cbb2",
      "3d7e54e6-7d6b-4d43-b1b6-c69c2800db7e",
      "3b944cfc-cab3-498c-93d8-4c7ffa276ace",
      "c7c5fab3-0624-4825-965f-ead29623aaac"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550520144467,
    "id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550520144467,
    "parent_id": "ec463bd5-2b01-4a17-8b92-2b804ab978d4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Rules to define immutable classes"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144462,
        "id": "0d435cb2-92d5-4c73-89ed-68167b192a30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144462,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following rules define a simple strategy for creating immutable objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following rules define a simple strategy for creating immutable objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144466,
        "id": "90113dcb-1c75-4e90-bdfe-2853be03e7b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144466,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t provide “setter” methods - methods that modify fields or objects referred to by fields."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t provide “setter” methods - methods that modify fields or objects referred to by fields."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144466,
        "id": "20741578-c4d4-46d8-b159-83f8ea2db03d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144466,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Make all fields final and private."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Make all fields final and private."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144466,
        "id": "3743f41b-9cd5-494d-ae50-dfb203e4cbb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144466,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t allow subclasses to override methods. The simplest way to do this is to declare the class as final. A more sophisticated approach is to make the constructor private and construct instances in factory methods."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t allow subclasses to override methods. The simplest way to do this is to declare the class as final. A more sophisticated approach is to make the constructor private and construct instances in factory methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144466,
        "id": "3d7e54e6-7d6b-4d43-b1b6-c69c2800db7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144466,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the instance fields include references to mutable objects, don’t allow those objects to be changed:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the instance fields include references to mutable objects, don’t allow those objects to be changed:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144467,
        "id": "3b944cfc-cab3-498c-93d8-4c7ffa276ace",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144467,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t provide methods that modify the mutable objects."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t provide methods that modify the mutable objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550520144467,
        "id": "c7c5fab3-0624-4825-965f-ead29623aaac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550520144467,
        "parent_id": "d8043629-7d6d-4fb8-bad5-ca8daae37ba1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t share references to the mutable objects. Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t share references to the mutable objects. Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods."
          }
        ]
      }
    ],
    "title": "030 Rules to define immutable classes"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}