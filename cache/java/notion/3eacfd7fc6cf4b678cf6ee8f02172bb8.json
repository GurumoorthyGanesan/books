{
  "ID": "3eacfd7f-c6cf-4b67-8cf6-ee8f02172bb8",
  "Root": {
    "alive": true,
    "content": [
      "14be2862-3aaa-450b-b8e6-2acb9bac4cb5",
      "548ad1c9-0fcd-48bc-afe5-0cd502e6d94d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463174023,
    "id": "3eacfd7f-c6cf-4b67-8cf6-ee8f02172bb8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550463174023,
    "parent_id": "0927bf61-8573-4b84-9fe1-cb6528be7f67",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Amount of time between two LocalTime"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463174020,
        "id": "14be2862-3aaa-450b-b8e6-2acb9bac4cb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463174020,
        "parent_id": "3eacfd7f-c6cf-4b67-8cf6-ee8f02172bb8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two equivalent ways to calculate the amount of time unit between two "
            ],
            [
              "LocalTime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": (1) through "
            ],
            [
              "until(Temporal, TemporalUnit)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method and through (2) "
            ],
            [
              "TemporalUnit.between(Temporal, Temporal)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two equivalent ways to calculate the amount of time unit between two "
          },
          {
            "Text": "LocalTime",
            "AttrFlags": 2
          },
          {
            "Text": ": (1) through "
          },
          {
            "Text": "until(Temporal, TemporalUnit)",
            "AttrFlags": 2
          },
          {
            "Text": " method and through (2) "
          },
          {
            "Text": "TemporalUnit.between(Temporal, Temporal)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463174023,
        "id": "548ad1c9-0fcd-48bc-afe5-0cd502e6d94d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463174023,
        "parent_id": "3eacfd7f-c6cf-4b67-8cf6-ee8f02172bb8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class AmountOfTime {\n\n    public static void main(String[] args) {\n\n        LocalTime start = LocalTime.of(1, 0, 0); // hour, minute, second\n        LocalTime end = LocalTime.of(2, 10, 20); // hour, minute, second\n        \n        long halfDays1 = start.until(end, ChronoUnit.HALF_DAYS); // 0\n        long halfDays2 = ChronoUnit.HALF_DAYS.between(start, end); // 0\n        \n        long hours1 = start.until(end, ChronoUnit.HOURS); // 1\n        long hours2 = ChronoUnit.HOURS.between(start, end); // 1\n        \n        long minutes1 = start.until(end, ChronoUnit.MINUTES); // 70\n        long minutes2 = ChronoUnit.MINUTES.between(start, end); // 70\n        \n        long seconds1 = start.until(end, ChronoUnit.SECONDS); // 4220\n        long seconds2 = ChronoUnit.SECONDS.between(start, end); // 4220\n        \n        long millisecs1 = start.until(end, ChronoUnit.MILLIS); // 4220000\n        long millisecs2 = ChronoUnit.MILLIS.between(start, end); // 4220000\n\n        long microsecs1 = start.until(end, ChronoUnit.MICROS); // 4220000000\n        long microsecs2 = ChronoUnit.MICROS.between(start, end); // 4220000000\n\n        long nanosecs1 = start.until(end, ChronoUnit.NANOS); // 4220000000000\n        long nanosecs2 = ChronoUnit.NANOS.between(start, end); // 4220000000000\n        \n        // Using others ChronoUnit will be thrown UnsupportedTemporalTypeException.\n        // The following methods are examples thereof.\n        long days1 = start.until(end, ChronoUnit.DAYS); \n        long days2 = ChronoUnit.DAYS.between(start, end); \n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class AmountOfTime {\n\n    public static void main(String[] args) {\n\n        LocalTime start = LocalTime.of(1, 0, 0); // hour, minute, second\n        LocalTime end = LocalTime.of(2, 10, 20); // hour, minute, second\n        \n        long halfDays1 = start.until(end, ChronoUnit.HALF_DAYS); // 0\n        long halfDays2 = ChronoUnit.HALF_DAYS.between(start, end); // 0\n        \n        long hours1 = start.until(end, ChronoUnit.HOURS); // 1\n        long hours2 = ChronoUnit.HOURS.between(start, end); // 1\n        \n        long minutes1 = start.until(end, ChronoUnit.MINUTES); // 70\n        long minutes2 = ChronoUnit.MINUTES.between(start, end); // 70\n        \n        long seconds1 = start.until(end, ChronoUnit.SECONDS); // 4220\n        long seconds2 = ChronoUnit.SECONDS.between(start, end); // 4220\n        \n        long millisecs1 = start.until(end, ChronoUnit.MILLIS); // 4220000\n        long millisecs2 = ChronoUnit.MILLIS.between(start, end); // 4220000\n\n        long microsecs1 = start.until(end, ChronoUnit.MICROS); // 4220000000\n        long microsecs2 = ChronoUnit.MICROS.between(start, end); // 4220000000\n\n        long nanosecs1 = start.until(end, ChronoUnit.NANOS); // 4220000000000\n        long nanosecs2 = ChronoUnit.NANOS.between(start, end); // 4220000000000\n        \n        // Using others ChronoUnit will be thrown UnsupportedTemporalTypeException.\n        // The following methods are examples thereof.\n        long days1 = start.until(end, ChronoUnit.DAYS); \n        long days2 = ChronoUnit.DAYS.between(start, end); \n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Amount of time between two LocalTime"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}