{
  "ID": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
  "Root": {
    "alive": true,
    "content": [
      "9278a5fa-aa3d-448a-82ac-121ae04cde36",
      "505b2ccf-f695-4c98-b9eb-241987d1cd4f",
      "1257efa8-b72d-4578-9831-e77ce37dbb45",
      "3669a71b-1367-46b5-b97f-3db0cbf43801",
      "1e89f943-965f-4abb-ac42-f806e09dc065",
      "b5446472-8d75-4549-a13f-50a34b4cc76d",
      "c7f6865a-a4d4-409a-bd38-e90f3603b6fa",
      "f72b80f8-1d60-4d8f-b498-5a4393151f19",
      "27a45819-7b4d-481a-98e7-7ac752842c2f",
      "414f6cb5-3241-4c2b-bad4-991fb08ec303",
      "667e4dcd-651f-4c31-b0be-a6e71d4af9fd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518806428,
    "id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518806428,
    "parent_id": "447fd392-7082-4e22-a270-9cd70f7b8c2d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 How to avoid needing to understand the Memory Model"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806422,
        "id": "9278a5fa-aa3d-448a-82ac-121ae04cde36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806422,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Memory Model is difficult to understand, and difficult to apply. It is useful if you need to reason about the correctness of multi-threaded code, but you do not want to have to do this reasoning for every multi-threaded application that you write."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Memory Model is difficult to understand, and difficult to apply. It is useful if you need to reason about the correctness of multi-threaded code, but you do not want to have to do this reasoning for every multi-threaded application that you write."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806425,
        "id": "505b2ccf-f695-4c98-b9eb-241987d1cd4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806425,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you adopt the following principals when writing concurrent code in Java, you can "
            ],
            [
              "largely",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " avoid the need to resort to "
            ],
            [
              "happens-before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " reasoning."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you adopt the following principals when writing concurrent code in Java, you can "
          },
          {
            "Text": "largely",
            "AttrFlags": 4
          },
          {
            "Text": " avoid the need to resort to "
          },
          {
            "Text": "happens-before",
            "AttrFlags": 4
          },
          {
            "Text": " reasoning."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806426,
        "id": "1257efa8-b72d-4578-9831-e77ce37dbb45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806426,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use immutable data structures where possible. A properly implemented immutable class will be thread-safe, and will not introduce thread-safety issues when you use it with other classes."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use immutable data structures where possible. A properly implemented immutable class will be thread-safe, and will not introduce thread-safety issues when you use it with other classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806426,
        "id": "3669a71b-1367-46b5-b97f-3db0cbf43801",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806426,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Understand and avoid “unsafe publication”."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Understand and avoid “unsafe publication”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806427,
        "id": "1e89f943-965f-4abb-ac42-f806e09dc065",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806427,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use primitive mutexes or "
            ],
            [
              "Lock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects to synchronize access to state in mutable objects that need to be thread-safe1."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use primitive mutexes or "
          },
          {
            "Text": "Lock",
            "AttrFlags": 2
          },
          {
            "Text": " objects to synchronize access to state in mutable objects that need to be thread-safe1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806427,
        "id": "b5446472-8d75-4549-a13f-50a34b4cc76d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806427,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "Executor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " / "
            ],
            [
              "ExecutorService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or the fork join framework rather than attempting to create manage threads directly."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "Executor",
            "AttrFlags": 2
          },
          {
            "Text": " / "
          },
          {
            "Text": "ExecutorService",
            "AttrFlags": 2
          },
          {
            "Text": " or the fork join framework rather than attempting to create manage threads directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806427,
        "id": "c7f6865a-a4d4-409a-bd38-e90f3603b6fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806427,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use the `java.util.concurrent classes that provide advanced locks, semaphores, latches and barriers, instead of using wait/notify/notifyAll directly."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use the `java.util.concurrent classes that provide advanced locks, semaphores, latches and barriers, instead of using wait/notify/notifyAll directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806427,
        "id": "f72b80f8-1d60-4d8f-b498-5a4393151f19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806427,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use the "
            ],
            [
              "java.util.concurrent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " versions of maps, sets, lists, queues and deques rather than external synchonization of non-concurrent collections."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use the "
          },
          {
            "Text": "java.util.concurrent",
            "AttrFlags": 2
          },
          {
            "Text": " versions of maps, sets, lists, queues and deques rather than external synchonization of non-concurrent collections."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806427,
        "id": "27a45819-7b4d-481a-98e7-7ac752842c2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806427,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The general principle is to try to use Java’s built-in concurrency libraries rather than “rolling your own” concurrency. You can rely on them working, if you use them properly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The general principle is to try to use Java’s built-in concurrency libraries rather than “rolling your own” concurrency. You can rely on them working, if you use them properly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806428,
        "id": "414f6cb5-3241-4c2b-bad4-991fb08ec303",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806428,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518806428,
        "id": "667e4dcd-651f-4c31-b0be-a6e71d4af9fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518806428,
        "parent_id": "6a00eca9-a642-43bf-9d0f-50b8387a89d2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 - Not all objects need to be thread safe. For example, if an object or objects is "
            ],
            [
              "thread-confined",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (i.e. it is only accessible to one thread), then its thread-safety is not relevant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 - Not all objects need to be thread safe. For example, if an object or objects is "
          },
          {
            "Text": "thread-confined",
            "AttrFlags": 4
          },
          {
            "Text": " (i.e. it is only accessible to one thread), then its thread-safety is not relevant."
          }
        ]
      }
    ],
    "title": "040 How to avoid needing to understand the Memory Model"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}