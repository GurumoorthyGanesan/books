{
  "ID": "8bef1b9f-bd8f-468e-a193-63b9918753de",
  "Root": {
    "alive": true,
    "content": [
      "a3be20c1-db7b-46f8-b886-64ad9467555a",
      "55c5ca4f-2e6b-4ca3-973f-bcd0e5fab5dc",
      "e1406a2a-8e43-41a9-bbfa-e89ed815b24c",
      "5e5f9d77-4248-40a3-a65c-20931131e519",
      "1bdc6c19-fa55-4f8f-96c9-2b6bd1405167",
      "f48faee9-217a-4942-8b88-17c4ba795ed2",
      "63aa6991-10d0-4319-bc0d-576e473281d0",
      "5d6a7d4a-f066-40de-b916-3067fdeef6a1",
      "0b98bcc4-968d-4f64-8933-756d70c29d79",
      "21f1c881-0bc4-4b82-b0a9-e4d7bb9379be",
      "c0dcefc4-fbff-4667-8aaf-70a7fce92e1c",
      "103d5116-b654-4522-8517-3bf23fba2af9",
      "0d7f0dff-87c9-4077-bf68-ff219d7ef659",
      "12f4f73d-5932-4588-b6ad-907b77098192",
      "185e9e00-dbf1-473a-887c-bb82209fcf9f",
      "1afdb823-1963-4a92-abd2-22bcc7ff1d18",
      "5061db91-3869-4c61-9eba-d8ffb5eb280c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519527443,
    "id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519527443,
    "parent_id": "1f0e916b-e994-4a2f-91b1-8a6715f5100b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Decimal Integer literals"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527436,
        "id": "a3be20c1-db7b-46f8-b886-64ad9467555a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527436,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Integer literals provide values that can be used where you need a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance. (This example focuses on the simple decimal forms. Other examples explain how to literals in octal, hexadecimal and binary, and the use of underscores to improve readability.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Integer literals provide values that can be used where you need a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " instance. (This example focuses on the simple decimal forms. Other examples explain how to literals in octal, hexadecimal and binary, and the use of underscores to improve readability.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527438,
        "id": "55c5ca4f-2e6b-4ca3-973f-bcd0e5fab5dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527438,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ordinary integer literals"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ordinary integer literals"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527439,
        "id": "e1406a2a-8e43-41a9-bbfa-e89ed815b24c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527439,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simplest and most common form of integer literal is a decimal integer literal. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simplest and most common form of integer literal is a decimal integer literal. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527439,
        "id": "5e5f9d77-4248-40a3-a65c-20931131e519",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527439,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "0       // The decimal number zero       (type 'int')\n1       // The decimal number one        (type 'int')\n42      // The decimal number forty two  (type 'int')"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "0       // The decimal number zero       (type 'int')\n1       // The decimal number one        (type 'int')\n42      // The decimal number forty two  (type 'int')",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527439,
        "id": "1bdc6c19-fa55-4f8f-96c9-2b6bd1405167",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527439,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You need to be careful with leading zeros. A leading zero causes an integer literal to be interpreted as "
            ],
            [
              "octal",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " not decimal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You need to be careful with leading zeros. A leading zero causes an integer literal to be interpreted as "
          },
          {
            "Text": "octal",
            "AttrFlags": 4
          },
          {
            "Text": " not decimal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527439,
        "id": "f48faee9-217a-4942-8b88-17c4ba795ed2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527439,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "077    // This literal actually means 7 x 8 + 7 ... or 63 decimal!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "077    // This literal actually means 7 x 8 + 7 ... or 63 decimal!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527439,
        "id": "63aa6991-10d0-4319-bc0d-576e473281d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527439,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Integer literals are unsigned. If you see something like "
            ],
            [
              "-10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "+10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", these are actually "
            ],
            [
              "expressions",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " using the unary "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and unary "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Integer literals are unsigned. If you see something like "
          },
          {
            "Text": "-10",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "+10",
            "AttrFlags": 2
          },
          {
            "Text": ", these are actually "
          },
          {
            "Text": "expressions",
            "AttrFlags": 4
          },
          {
            "Text": " using the unary "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " and unary "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527440,
        "id": "5d6a7d4a-f066-40de-b916-3067fdeef6a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527440,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The range of integer literals of this form have an intrinsic type of "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and must fall in the range zero to 231 or 2,147,483,648."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The range of integer literals of this form have an intrinsic type of "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", and must fall in the range zero to 231 or 2,147,483,648."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527440,
        "id": "0b98bcc4-968d-4f64-8933-756d70c29d79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527440,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that 231 is "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " greater than "
            ],
            [
              "Integer.MAX_VALUE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Literals from 0 through to "
            ],
            [
              "2147483647",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used anywhere, but it is a compilation error to use "
            ],
            [
              "2147483648",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without a preceding unary "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator. (In other words, it is reserved for expressing the value of "
            ],
            [
              "Integer.MIN_VALUE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that 231 is "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " greater than "
          },
          {
            "Text": "Integer.MAX_VALUE",
            "AttrFlags": 2
          },
          {
            "Text": ". Literals from 0 through to "
          },
          {
            "Text": "2147483647",
            "AttrFlags": 2
          },
          {
            "Text": " can be used anywhere, but it is a compilation error to use "
          },
          {
            "Text": "2147483648",
            "AttrFlags": 2
          },
          {
            "Text": " without a preceding unary "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " operator. (In other words, it is reserved for expressing the value of "
          },
          {
            "Text": "Integer.MIN_VALUE",
            "AttrFlags": 2
          },
          {
            "Text": ".)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527440,
        "id": "21f1c881-0bc4-4b82-b0a9-e4d7bb9379be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527440,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int max = 2147483647;     // OK\nint min = -2147483648;    // OK\nint tooBig = 2147483648;  // ERROR"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int max = 2147483647;     // OK\nint min = -2147483648;    // OK\nint tooBig = 2147483648;  // ERROR",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527440,
        "id": "c0dcefc4-fbff-4667-8aaf-70a7fce92e1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527440,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Long integer literals"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Long integer literals"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527441,
        "id": "103d5116-b654-4522-8517-3bf23fba2af9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527441,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Literals of type "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are expressed by adding an "
            ],
            [
              "L",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " suffix. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Literals of type "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " are expressed by adding an "
          },
          {
            "Text": "L",
            "AttrFlags": 2
          },
          {
            "Text": " suffix. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527441,
        "id": "0d7f0dff-87c9-4077-bf68-ff219d7ef659",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527441,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "0L          // The decimal number zero       (type 'long')\n1L          // The decimal number one        (type 'long')\n2147483648L // The value of Integer.MAX_VALUE + 1\n\nlong big = 2147483648;    // ERROR\nlong big2 = 2147483648L;  // OK"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "0L          // The decimal number zero       (type 'long')\n1L          // The decimal number one        (type 'long')\n2147483648L // The value of Integer.MAX_VALUE + 1\n\nlong big = 2147483648;    // ERROR\nlong big2 = 2147483648L;  // OK",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527441,
        "id": "12f4f73d-5932-4588-b6ad-907b77098192",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527441,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the distinction between "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " literals is significant in other places. For example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the distinction between "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " literals is significant in other places. For example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527441,
        "id": "185e9e00-dbf1-473a-887c-bb82209fcf9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527441,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 2147483647;\nlong l = i + 1;           // Produces a negative value because the operation is\n                          // performed using 32 bit arithmetic, and the \n                          // addition overflows\nlong l2 = i + 1L;         // Produces the (intuitively) correct value."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 2147483647;\nlong l = i + 1;           // Produces a negative value because the operation is\n                          // performed using 32 bit arithmetic, and the \n                          // addition overflows\nlong l2 = i + 1L;         // Produces the (intuitively) correct value.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527441,
        "id": "1afdb823-1963-4a92-abd2-22bcc7ff1d18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527441,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519527443,
        "id": "5061db91-3869-4c61-9eba-d8ffb5eb280c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519527443,
        "parent_id": "8bef1b9f-bd8f-468e-a193-63b9918753de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reference: "
            ],
            [
              "JLS 3.10.1 - Integer Literals",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reference: "
          },
          {
            "Text": "JLS 3.10.1 - Integer Literals",
            "Link": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1"
          }
        ]
      }
    ],
    "title": "050 Decimal Integer literals"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}