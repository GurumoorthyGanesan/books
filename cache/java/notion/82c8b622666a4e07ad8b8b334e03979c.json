{
  "ID": "82c8b622-666a-4e07-ad8b-8b334e03979c",
  "Root": {
    "alive": true,
    "content": [
      "2b474aeb-9e96-4f45-9bd2-8fc3f0632d3a",
      "26d8aab1-9ab9-4259-87ed-d1349346122d",
      "fa8d5907-9555-4d5f-b710-28a7ef75659c",
      "a6092051-e949-4ef6-9360-dc715635646f",
      "fbbe4aae-7e9d-4aaa-93da-fe33ae8fafe0",
      "5ee521c3-b92f-4ce4-9c69-8f334b164384",
      "710f9e59-0d8c-4029-bf87-2c12eae17a03",
      "d3816357-f7a4-4155-b39c-0c5d845fb9a1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463217130,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551746474582,
    "parent_id": "9450e3e1-ee88-4dd5-982c-03d03bddc553",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Access Modifiers for Inner Classes"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217128,
        "id": "2b474aeb-9e96-4f45-9bd2-8fc3f0632d3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217128,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A full explanation of Access Modifiers in Java can be found here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/134/visibility-controlling-access-to-members-of-a-class"
                ]
              ]
            ],
            [
              ". But how do they interact with Inner classes?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A full explanation of Access Modifiers in Java can be found here",
            "Link": "http://stackoverflow.com/documentation/java/134/visibility-controlling-access-to-members-of-a-class"
          },
          {
            "Text": ". But how do they interact with Inner classes?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217129,
        "id": "26d8aab1-9ab9-4259-87ed-d1349346122d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217129,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "public",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as usual, gives unrestricted access to any scope able to access the type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "public",
            "AttrFlags": 2
          },
          {
            "Text": ", as usual, gives unrestricted access to any scope able to access the type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217129,
        "id": "fa8d5907-9555-4d5f-b710-28a7ef75659c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217129,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class OuterClass {\n\n    public class InnerClass {\n\n        public int x = 5;\n\n    }\n\n    public InnerClass createInner() {\n        return new InnerClass();\n    }\n}\n\npublic class SomeOtherClass {\n\n    public static void main(String[] args) {\n        int x = new OuterClass().createInner().x; //Direct field access is legal\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class OuterClass {\n\n    public class InnerClass {\n\n        public int x = 5;\n\n    }\n\n    public InnerClass createInner() {\n        return new InnerClass();\n    }\n}\n\npublic class SomeOtherClass {\n\n    public static void main(String[] args) {\n        int x = new OuterClass().createInner().x; //Direct field access is legal\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217129,
        "id": "a6092051-e949-4ef6-9360-dc715635646f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217129,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "both "
            ],
            [
              "protected",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the default modifier (of nothing) behave as expected as well, the same as they do for non-nested classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "both "
          },
          {
            "Text": "protected",
            "AttrFlags": 2
          },
          {
            "Text": " and the default modifier (of nothing) behave as expected as well, the same as they do for non-nested classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217129,
        "id": "fbbe4aae-7e9d-4aaa-93da-fe33ae8fafe0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217129,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "private",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", interestingly enough, does not restrict to the class it belongs to. Rather, it restricts to the compilation unit - the .java file. This means that Outer classes have full access to Inner class fields and methods, even if they are marked "
            ],
            [
              "private",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "private",
            "AttrFlags": 2
          },
          {
            "Text": ", interestingly enough, does not restrict to the class it belongs to. Rather, it restricts to the compilation unit - the .java file. This means that Outer classes have full access to Inner class fields and methods, even if they are marked "
          },
          {
            "Text": "private",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217130,
        "id": "5ee521c3-b92f-4ce4-9c69-8f334b164384",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217130,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class OuterClass {\n\n    public class InnerClass {\n\n        private int x;\n        private void anInnerMethod() {}\n    }\n\n    public InnerClass aMethod() {\n        InnerClass a = new InnerClass();\n        a.x = 5; //Legal\n        a.anInnerMethod(); //Legal\n        return a;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class OuterClass {\n\n    public class InnerClass {\n\n        private int x;\n        private void anInnerMethod() {}\n    }\n\n    public InnerClass aMethod() {\n        InnerClass a = new InnerClass();\n        a.x = 5; //Legal\n        a.anInnerMethod(); //Legal\n        return a;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217130,
        "id": "710f9e59-0d8c-4029-bf87-2c12eae17a03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217130,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Inner Class itself can have a visibility other than "
            ],
            [
              "public",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". By marking it "
            ],
            [
              "private",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or another restricted access modifier, other (external) classes will not be allowed to import and assign the type. They can still get references to objects of that type, however."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Inner Class itself can have a visibility other than "
          },
          {
            "Text": "public",
            "AttrFlags": 2
          },
          {
            "Text": ". By marking it "
          },
          {
            "Text": "private",
            "AttrFlags": 2
          },
          {
            "Text": " or another restricted access modifier, other (external) classes will not be allowed to import and assign the type. They can still get references to objects of that type, however."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463217130,
        "id": "d3816357-f7a4-4155-b39c-0c5d845fb9a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463217130,
        "parent_id": "82c8b622-666a-4e07-ad8b-8b334e03979c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class OuterClass {\n\n    private class InnerClass{}\n\n    public InnerClass makeInnerClass() {\n        return new InnerClass();\n    }\n}\n\npublic class AnotherClass {\n\n    public static void main(String[] args) {\n        OuterClass o = new OuterClass();\n     \n        InnerClass x = o.makeInnerClass(); //Illegal, can't find type\n        OuterClass.InnerClass x = o.makeInnerClass(); //Illegal, InnerClass has visibility private\n        Object x = o.makeInnerClass(); //Legal\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class OuterClass {\n\n    private class InnerClass{}\n\n    public InnerClass makeInnerClass() {\n        return new InnerClass();\n    }\n}\n\npublic class AnotherClass {\n\n    public static void main(String[] args) {\n        OuterClass o = new OuterClass();\n     \n        InnerClass x = o.makeInnerClass(); //Illegal, can't find type\n        OuterClass.InnerClass x = o.makeInnerClass(); //Illegal, InnerClass has visibility private\n        Object x = o.makeInnerClass(); //Legal\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Access Modifiers for Inner Classes",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}