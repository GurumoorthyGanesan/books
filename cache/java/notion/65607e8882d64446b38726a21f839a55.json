{
  "ID": "65607e88-82d6-4446-b387-26a21f839a55",
  "Root": {
    "alive": true,
    "content": [
      "0a0f2f3b-5edb-410d-a79a-71ff4045a94e",
      "114fd81e-8996-4af0-898c-ce338426c893",
      "a3b84ed8-1b42-4ea8-84c3-38580c3d9d5e",
      "d16be3df-0007-4288-979c-f7e53e449b14",
      "bd8ec42a-ffb7-4410-bc06-3c9bae44cd6e",
      "84a81b2e-c917-4f0d-8462-cadb7e57554d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460162004,
    "id": "65607e88-82d6-4446-b387-26a21f839a55",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460162004,
    "parent_id": "eaad0c1d-9ecf-4d2a-b640-d2df4debfaf8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Declaring a Generic Method"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460162002,
        "id": "0a0f2f3b-5edb-410d-a79a-71ff4045a94e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460162002,
        "parent_id": "65607e88-82d6-4446-b387-26a21f839a55",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Methods can also have "
            ],
            [
              "generic",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/tutorial/java/generics/"
                ]
              ]
            ],
            [
              " type parameters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Methods can also have "
          },
          {
            "Text": "generic",
            "Link": "https://docs.oracle.com/javase/tutorial/java/generics/"
          },
          {
            "Text": " type parameters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460162002,
        "id": "114fd81e-8996-4af0-898c-ce338426c893",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460162002,
        "parent_id": "65607e88-82d6-4446-b387-26a21f839a55",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Example {\n\n    // The type parameter T is scoped to the method\n    // and is independent of type parameters of other methods.\n    public \u003cT\u003e List\u003cT\u003e makeList(T t1, T t2) {\n        List\u003cT\u003e result = new ArrayList\u003cT\u003e();\n        result.add(t1);\n        result.add(t2);\n        return result;\n    }\n\n    public void usage() {\n        List\u003cString\u003e listString = makeList(\"Jeff\", \"Atwood\");\n        List\u003cInteger\u003e listInteger = makeList(1, 2);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Example {\n\n    // The type parameter T is scoped to the method\n    // and is independent of type parameters of other methods.\n    public \u003cT\u003e List\u003cT\u003e makeList(T t1, T t2) {\n        List\u003cT\u003e result = new ArrayList\u003cT\u003e();\n        result.add(t1);\n        result.add(t2);\n        return result;\n    }\n\n    public void usage() {\n        List\u003cString\u003e listString = makeList(\"Jeff\", \"Atwood\");\n        List\u003cInteger\u003e listInteger = makeList(1, 2);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460162003,
        "id": "a3b84ed8-1b42-4ea8-84c3-38580c3d9d5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460162003,
        "parent_id": "65607e88-82d6-4446-b387-26a21f839a55",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice that we don’t have to pass an actual type argument to a generic method. The compiler infers the type argument for us, based on the target type (e.g. the variable we assign the result to), or on the types of the actual arguments. It will generally infer the most specific type argument that will make the call type-correct."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice that we don’t have to pass an actual type argument to a generic method. The compiler infers the type argument for us, based on the target type (e.g. the variable we assign the result to), or on the types of the actual arguments. It will generally infer the most specific type argument that will make the call type-correct."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460162003,
        "id": "d16be3df-0007-4288-979c-f7e53e449b14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460162003,
        "parent_id": "65607e88-82d6-4446-b387-26a21f839a55",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes, albeit rarely, it can be necessary to override this type inference with explicit type arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes, albeit rarely, it can be necessary to override this type inference with explicit type arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460162003,
        "id": "bd8ec42a-ffb7-4410-bc06-3c9bae44cd6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460162003,
        "parent_id": "65607e88-82d6-4446-b387-26a21f839a55",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "void usage() {\n    consumeObjects(this.\u003cObject\u003emakeList(\"Jeff\", \"Atwood\").stream());\n}\n\nvoid consumeObjects(Stream\u003cObject\u003e stream) { ... }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "void usage() {\n    consumeObjects(this.\u003cObject\u003emakeList(\"Jeff\", \"Atwood\").stream());\n}\n\nvoid consumeObjects(Stream\u003cObject\u003e stream) { ... }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460162003,
        "id": "84a81b2e-c917-4f0d-8462-cadb7e57554d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460162003,
        "parent_id": "65607e88-82d6-4446-b387-26a21f839a55",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s necessary in this example because the compiler can’t “look ahead” to see that "
            ],
            [
              "Object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is desired for "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after calling "
            ],
            [
              "stream()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and it would otherwise infer "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " based on the "
            ],
            [
              "makeList",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " arguments. Note that the Java language doesn’t support omitting the class or object on which the method is called ("
            ],
            [
              "this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the above example) when type arguments are explicitly provided."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s necessary in this example because the compiler can’t “look ahead” to see that "
          },
          {
            "Text": "Object",
            "AttrFlags": 2
          },
          {
            "Text": " is desired for "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " after calling "
          },
          {
            "Text": "stream()",
            "AttrFlags": 2
          },
          {
            "Text": " and it would otherwise infer "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " based on the "
          },
          {
            "Text": "makeList",
            "AttrFlags": 2
          },
          {
            "Text": " arguments. Note that the Java language doesn’t support omitting the class or object on which the method is called ("
          },
          {
            "Text": "this",
            "AttrFlags": 2
          },
          {
            "Text": " in the above example) when type arguments are explicitly provided."
          }
        ]
      }
    ],
    "title": "040 Declaring a Generic Method"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}