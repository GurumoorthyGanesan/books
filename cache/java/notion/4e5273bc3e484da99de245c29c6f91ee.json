{
  "ID": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
  "Root": {
    "alive": true,
    "content": [
      "d5c39db9-4f1b-4cf7-b7b0-1acd806cf2a1",
      "37d6d98b-af32-423c-9f83-6121ff570c5e",
      "ca093eec-ee1f-4ffb-b26d-3de3ac650c7a",
      "dae93dfe-a9c0-4d08-bde7-efa004b0252f",
      "6d25079a-baa0-4488-bcc0-6f5c738c1480",
      "87c94793-159d-40f9-9229-0d3cafbfca9a",
      "03606912-d9de-474f-bc01-7e2800aa9f9a",
      "2699f1d1-058d-4d84-9f71-3c45d55db407",
      "366b2803-a0a1-4c00-947b-786f2f9724bf",
      "859ec48e-d981-4d7b-add3-5eb5f80e3bce",
      "1b2cd00a-a21e-46f9-ac93-d0f518ff688b",
      "8e3bcb0b-4842-4b8e-9a1b-9e68dd6368dc",
      "2e25b8ed-da7e-4d98-8441-ba050ae40aab",
      "b04f6731-5fa4-4cc2-9f9c-1d7244215964",
      "6790fee0-f5fc-43bb-aa24-2a486ce38ee9",
      "0e73fc23-558f-46d4-b21c-9afb7ee7fb20",
      "37c6fb91-f59f-42eb-9644-72c03fc8f1a7",
      "b5e18740-3d19-44a7-9c66-1e4e52e4b9a5",
      "f26879bb-172d-4aaa-b9e9-6800eb231d2e",
      "be64ffff-8256-4577-b18f-2d888a2b3cf2",
      "d4f2c7bf-0d52-467b-b2fc-e0bb50230e15"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460221997,
    "id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460221997,
    "parent_id": "98fc7929-b076-4b4c-8088-3851bfc3fdbf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "070 String concatenation and StringBuilders"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221990,
        "id": "d5c39db9-4f1b-4cf7-b7b0-1acd806cf2a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221990,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String concatenation can be performed using the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "String concatenation can be performed using the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operator. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221993,
        "id": "37d6d98b-af32-423c-9f83-6121ff570c5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221993,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String s1 = \"a\";\nString s2 = \"b\";\nString s3 = \"c\";\nString s = s1 + s2 + s3; // abc"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String s1 = \"a\";\nString s2 = \"b\";\nString s3 = \"c\";\nString s = s1 + s2 + s3; // abc",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221994,
        "id": "ca093eec-ee1f-4ffb-b26d-3de3ac650c7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221994,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Normally a compiler implementation will perform the above concatenation using methods involving a "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html"
                ]
              ]
            ],
            [
              " under the hood. When compiled, the code would look similar to the below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Normally a compiler implementation will perform the above concatenation using methods involving a "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html"
          },
          {
            "Text": " under the hood. When compiled, the code would look similar to the below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221994,
        "id": "dae93dfe-a9c0-4d08-bde7-efa004b0252f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221994,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "StringBuilder sb = new StringBuilder(\"a\");\nString s = sb.append(\"b\").append(\"c\").toString();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "StringBuilder sb = new StringBuilder(\"a\");\nString s = sb.append(\"b\").append(\"c\").toString();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221994,
        "id": "6d25079a-baa0-4488-bcc0-6f5c738c1480",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221994,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has several overloaded methods for appending different types, for example, to append an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For example, an implementation can convert:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": " has several overloaded methods for appending different types, for example, to append an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " instead of a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ". For example, an implementation can convert:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "87c94793-159d-40f9-9229-0d3cafbfca9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String s1 = \"a\";\nString s2 = \"b\";    \nString s = s1 + s2 + 2; // ab2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String s1 = \"a\";\nString s2 = \"b\";    \nString s = s1 + s2 + 2; // ab2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "03606912-d9de-474f-bc01-7e2800aa9f9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "to the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "to the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "2699f1d1-058d-4d84-9f71-3c45d55db407",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "StringBuilder sb = new StringBuilder(\"a\");\nString s = sb.append(\"b\").append(2).toString();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "StringBuilder sb = new StringBuilder(\"a\");\nString s = sb.append(\"b\").append(2).toString();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "366b2803-a0a1-4c00-947b-786f2f9724bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above examples illustrate a simple concatenation operation that is effectively done in a single place in the code. The concatenation involves a single instance of the "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In some cases, a concatenation is carried out in a cumulative way such as in a loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above examples illustrate a simple concatenation operation that is effectively done in a single place in the code. The concatenation involves a single instance of the "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": ". In some cases, a concatenation is carried out in a cumulative way such as in a loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "859ec48e-d981-4d7b-add3-5eb5f80e3bce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String result = \"\";\nfor(int i = 0; i \u003c array.length; i++) {\n    result += extractElement(array[i]);\n}\nreturn result;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String result = \"\";\nfor(int i = 0; i \u003c array.length; i++) {\n    result += extractElement(array[i]);\n}\nreturn result;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "1b2cd00a-a21e-46f9-ac93-d0f518ff688b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In such cases, the compiler optimization is usually not applied, and each iteration will create a new "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object. This can be optimized by explicitly transforming the code to use a single "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In such cases, the compiler optimization is usually not applied, and each iteration will create a new "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": " object. This can be optimized by explicitly transforming the code to use a single "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "8e3bcb0b-4842-4b8e-9a1b-9e68dd6368dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "StringBuilder result = new StringBuilder();\nfor(int i = 0; i \u003c array.length; i++) {\n    result.append(extractElement(array[i]));\n}\nreturn result.toString();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "StringBuilder result = new StringBuilder();\nfor(int i = 0; i \u003c array.length; i++) {\n    result.append(extractElement(array[i]));\n}\nreturn result.toString();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "2e25b8ed-da7e-4d98-8441-ba050ae40aab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be initialized with an empty space of only 16 characters. If you know in advance that you will be building larger strings, it can be beneficial to initialize it with sufficient size in advance, so that the internal buffer does not need to be resized:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": " will be initialized with an empty space of only 16 characters. If you know in advance that you will be building larger strings, it can be beneficial to initialize it with sufficient size in advance, so that the internal buffer does not need to be resized:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221995,
        "id": "b04f6731-5fa4-4cc2-9f9c-1d7244215964",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221995,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "StringBuilder buf = new StringBuilder(30); // Default is 16 characters\nbuf.append(\"0123456789\");\nbuf.append(\"0123456789\"); // Would cause a reallocation of the internal buffer otherwise\nString result = buf.toString(); // Produces a 20-chars copy of the string"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "StringBuilder buf = new StringBuilder(30); // Default is 16 characters\nbuf.append(\"0123456789\");\nbuf.append(\"0123456789\"); // Would cause a reallocation of the internal buffer otherwise\nString result = buf.toString(); // Produces a 20-chars copy of the string",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221996,
        "id": "6790fee0-f5fc-43bb-aa24-2a486ce38ee9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221996,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you are producing many strings, it is advisable to reuse "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you are producing many strings, it is advisable to reuse "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": "s:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221996,
        "id": "0e73fc23-558f-46d4-b21c-9afb7ee7fb20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221996,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "StringBuilder buf = new StringBuilder(100);\nfor (int i = 0; i \u003c 100; i++) {\n    buf.setLength(0); // Empty buffer\n    buf.append(\"This is line \").append(i).append('\\n');\n    outputfile.write(buf.toString());\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "StringBuilder buf = new StringBuilder(100);\nfor (int i = 0; i \u003c 100; i++) {\n    buf.setLength(0); // Empty buffer\n    buf.append(\"This is line \").append(i).append('\\n');\n    outputfile.write(buf.toString());\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221996,
        "id": "37c6fb91-f59f-42eb-9644-72c03fc8f1a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221996,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If (and only if) multiple threads are writing to the "
            ],
            [
              "same",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " buffer, use "
            ],
            [
              "StringBuffer",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html"
                ]
              ]
            ],
            [
              ", which is a "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version of "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But because usually only a single thread writes to a buffer, it is usually faster to use "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without synchronization."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If (and only if) multiple threads are writing to the "
          },
          {
            "Text": "same",
            "AttrFlags": 4
          },
          {
            "Text": " buffer, use "
          },
          {
            "Text": "StringBuffer",
            "Link": "https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html"
          },
          {
            "Text": ", which is a "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " version of "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": ". But because usually only a single thread writes to a buffer, it is usually faster to use "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": " without synchronization."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221996,
        "id": "b5e18740-3d19-44a7-9c66-1e4e52e4b9a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221996,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using concat() method:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using concat() method:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221996,
        "id": "f26879bb-172d-4aaa-b9e9-6800eb231d2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221996,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String string1 = \"Hello \";\nString string2 = \"world\";\nString string3 = string1.concat(string2);  // \"Hello world\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String string1 = \"Hello \";\nString string2 = \"world\";\nString string3 = string1.concat(string2);  // \"Hello world\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221997,
        "id": "be64ffff-8256-4577-b18f-2d888a2b3cf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221997,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460221997,
        "id": "d4f2c7bf-0d52-467b-b2fc-e0bb50230e15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460221997,
        "parent_id": "4e5273bc-3e48-4da9-9de2-45c29c6f91ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\"My name is \".concat(\"Buyya\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\"My name is \".concat(\"Buyya\");",
        "code_language": "Plain Text"
      }
    ],
    "title": "070 String concatenation and StringBuilders"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}