{
  "ID": "562395d4-cc95-4017-a9c2-c2c8831c46da",
  "Root": {
    "alive": true,
    "content": [
      "2aac310a-eecb-4cd4-850f-0a6c7c06a866",
      "904dec02-8534-4588-94c2-15b00b6be5d8",
      "a01ff73f-8db4-45d1-849f-e0482afeac87",
      "0db15ddc-bcfc-4c30-98d4-759b0b14b0ee",
      "1eec44d2-0868-45f6-b357-e223d44bdb4e",
      "b6471902-cde0-4d30-a693-8eb98ca86776",
      "1456017e-e7b3-4cee-b1e3-7ef3bf65f476",
      "f316b797-c52c-4425-bcb3-9acf11f8744f",
      "5ff05167-c379-44c9-af58-7f95c1e3a540"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460534062,
    "id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460534062,
    "parent_id": "596cd51e-237c-46bd-a4df-28e4d338582d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Converting Primitives"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534056,
        "id": "2aac310a-eecb-4cd4-850f-0a6c7c06a866",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534056,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java, we can convert between integer values and floating-point values. Also, since every character corresponds to a number in the Unicode encoding, "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types can be converted to and from the integer and floating-point types. "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the only primitive datatype that cannot be converted to or from any other primitive datatype."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java, we can convert between integer values and floating-point values. Also, since every character corresponds to a number in the Unicode encoding, "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " types can be converted to and from the integer and floating-point types. "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": " is the only primitive datatype that cannot be converted to or from any other primitive datatype."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534060,
        "id": "904dec02-8534-4588-94c2-15b00b6be5d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534060,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two types of conversions: "
            ],
            [
              "widening conversion",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "narrowing conversion",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two types of conversions: "
          },
          {
            "Text": "widening conversion",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "narrowing conversion",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "a01ff73f-8db4-45d1-849f-e0482afeac87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "widening conversion",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is when a value of one datatype is converted to a value of another datatype that occupies more bits than the former. There is no issue of data loss in this case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "widening conversion",
            "AttrFlags": 4
          },
          {
            "Text": " is when a value of one datatype is converted to a value of another datatype that occupies more bits than the former. There is no issue of data loss in this case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "0db15ddc-bcfc-4c30-98d4-759b0b14b0ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Correspondingly, A "
            ],
            [
              "narrowing conversion",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is when a value of one datatype is converted to a value of another datatype that occupies fewer bits than the former. Data loss can occur in this case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Correspondingly, A "
          },
          {
            "Text": "narrowing conversion",
            "AttrFlags": 4
          },
          {
            "Text": " is when a value of one datatype is converted to a value of another datatype that occupies fewer bits than the former. Data loss can occur in this case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "1eec44d2-0868-45f6-b357-e223d44bdb4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java performs "
            ],
            [
              "widening conversions",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " automatically. But if you want to perform a "
            ],
            [
              "narrowing conversion",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (if you are sure that no data loss will occur), then you can force Java to perform the conversion using a language construct known as a "
            ],
            [
              "cast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java performs "
          },
          {
            "Text": "widening conversions",
            "AttrFlags": 4
          },
          {
            "Text": " automatically. But if you want to perform a "
          },
          {
            "Text": "narrowing conversion",
            "AttrFlags": 4
          },
          {
            "Text": " (if you are sure that no data loss will occur), then you can force Java to perform the conversion using a language construct known as a "
          },
          {
            "Text": "cast",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "b6471902-cde0-4d30-a693-8eb98ca86776",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Widening Conversion:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Widening Conversion:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "1456017e-e7b3-4cee-b1e3-7ef3bf65f476",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 1;    \ndouble d = a;    // valid conversion to double, no cast needed (widening)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 1;    \ndouble d = a;    // valid conversion to double, no cast needed (widening)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "f316b797-c52c-4425-bcb3-9acf11f8744f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Narrowing Conversion:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Narrowing Conversion:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460534061,
        "id": "5ff05167-c379-44c9-af58-7f95c1e3a540",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460534061,
        "parent_id": "562395d4-cc95-4017-a9c2-c2c8831c46da",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double d = 18.96\nint b = d;       // invalid conversion to int, will throw a compile-time error\nint b = (int) d; // valid conversion to int, but result is truncated (gets rounded down)\n                 // This is type-casting\n                 // Now, b = 18"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double d = 18.96\nint b = d;       // invalid conversion to int, will throw a compile-time error\nint b = (int) d; // valid conversion to int, but result is truncated (gets rounded down)\n                 // This is type-casting\n                 // Now, b = 18",
        "code_language": "Plain Text"
      }
    ],
    "title": "060 Converting Primitives"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}