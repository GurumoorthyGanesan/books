{
  "ID": "343729ed-cd51-4c57-a242-11d7c49156c3",
  "Root": {
    "alive": true,
    "content": [
      "94807498-c668-4dbe-97ac-152b9a7aae60",
      "d32fcbc6-2c7b-4a9e-8d28-69299d2e9099",
      "1c139ff3-2d93-4b6a-9deb-209f244576c7",
      "57a9b03b-fccd-4282-b1b8-fe385e5cd46e",
      "72d7ec36-13d5-469c-b3ba-1d6f0f15b33b",
      "d46d4ef5-907e-441f-ba14-3a23887a8cee",
      "717c657b-6b2e-430c-80e5-2454fa8db79a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460431123,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "343729ed-cd51-4c57-a242-11d7c49156c3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551747625681,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating basic deadlocked system"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431120,
        "id": "94807498-c668-4dbe-97ac-152b9a7aae60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431120,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A deadlock occurs when two competing actions wait for the other to finish, and thus neither ever does. In java there is one lock associated with each object. To avoid concurrent modification done by multiple threads on single object we can use "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, but everything comes at a cost. Using "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword wrongly can lead to stuck systems called as deadlocked system."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A deadlock occurs when two competing actions wait for the other to finish, and thus neither ever does. In java there is one lock associated with each object. To avoid concurrent modification done by multiple threads on single object we can use "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, but everything comes at a cost. Using "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " keyword wrongly can lead to stuck systems called as deadlocked system."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431123,
        "id": "d32fcbc6-2c7b-4a9e-8d28-69299d2e9099",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431123,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider there are 2 threads working on 1 instance, Lets call threads as First and Second, and lets say we have 2 resources R1 and R2. First acquires R1 and also needs R2 for its completion while Second acquires R2 and needs R1 for completion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider there are 2 threads working on 1 instance, Lets call threads as First and Second, and lets say we have 2 resources R1 and R2. First acquires R1 and also needs R2 for its completion while Second acquires R2 and needs R1 for completion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431123,
        "id": "1c139ff3-2d93-4b6a-9deb-209f244576c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431123,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "so say at time t=0,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "so say at time t=0,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431123,
        "id": "57a9b03b-fccd-4282-b1b8-fe385e5cd46e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431123,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First has R1 and Second has R2. now First is waiting for R2 while Second is waiting for R1. this wait is indefinite and this leads to deadlock."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First has R1 and Second has R2. now First is waiting for R2 while Second is waiting for R1. this wait is indefinite and this leads to deadlock."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431123,
        "id": "72d7ec36-13d5-469c-b3ba-1d6f0f15b33b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431123,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Example2 {\n    \n    public static void main(String[] args) throws InterruptedException {\n        final DeadLock dl = new DeadLock();\n        Thread t1 = new Thread(new Runnable() {\n    \n            @Override\n            public void run() {\n                // TODO Auto-generated method stub\n                dl.methodA();\n            }\n        });\n   \n        Thread t2 = new Thread(new Runnable() {\n    \n            @Override\n            public void run() {\n                // TODO Auto-generated method stub\n                try {\n                    dl.method2();\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n        });\n        t1.setName(\"First\");\n        t2.setName(\"Second\");\n        t1.start();\n        t2.start();\n    }\n}\n\nclass DeadLock {\n    \n    Object mLock1 = new Object();\n    Object mLock2 = new Object();\n    \n\n    public void methodA() {\n        System.out.println(\"methodA wait for mLock1  \" + Thread.currentThread().getName());\n        synchronized (mLock1) {\n            System.out.println(\"methodA mLock1 acquired   \" + Thread.currentThread().getName());\n            try {\n                Thread.sleep(100);\n                method2();\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n    }\n    public void method2() throws InterruptedException {\n        System.out.println(\"method2 wait for mLock2  \" + Thread.currentThread().getName());\n        synchronized (mLock2) {\n            System.out.println(\"method2  mLock2 acquired   \" + Thread.currentThread().getName());\n            Thread.sleep(100);\n            method3();\n        }\n    }\n    public void method3() throws InterruptedException {\n        System.out.println(\"method3  mLock1  \"+ Thread.currentThread().getName());\n        synchronized (mLock1) {\n            System.out.println(\"method3   mLock1 acquired  \" + Thread.currentThread().getName());\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Example2 {\n    \n    public static void main(String[] args) throws InterruptedException {\n        final DeadLock dl = new DeadLock();\n        Thread t1 = new Thread(new Runnable() {\n    \n            @Override\n            public void run() {\n                // TODO Auto-generated method stub\n                dl.methodA();\n            }\n        });\n   \n        Thread t2 = new Thread(new Runnable() {\n    \n            @Override\n            public void run() {\n                // TODO Auto-generated method stub\n                try {\n                    dl.method2();\n                } catch (InterruptedException e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n        });\n        t1.setName(\"First\");\n        t2.setName(\"Second\");\n        t1.start();\n        t2.start();\n    }\n}\n\nclass DeadLock {\n    \n    Object mLock1 = new Object();\n    Object mLock2 = new Object();\n    \n\n    public void methodA() {\n        System.out.println(\"methodA wait for mLock1  \" + Thread.currentThread().getName());\n        synchronized (mLock1) {\n            System.out.println(\"methodA mLock1 acquired   \" + Thread.currentThread().getName());\n            try {\n                Thread.sleep(100);\n                method2();\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n    }\n    public void method2() throws InterruptedException {\n        System.out.println(\"method2 wait for mLock2  \" + Thread.currentThread().getName());\n        synchronized (mLock2) {\n            System.out.println(\"method2  mLock2 acquired   \" + Thread.currentThread().getName());\n            Thread.sleep(100);\n            method3();\n        }\n    }\n    public void method3() throws InterruptedException {\n        System.out.println(\"method3  mLock1  \"+ Thread.currentThread().getName());\n        synchronized (mLock1) {\n            System.out.println(\"method3   mLock1 acquired  \" + Thread.currentThread().getName());\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431123,
        "id": "d46d4ef5-907e-441f-ba14-3a23887a8cee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431123,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output of this program:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output of this program:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460431123,
        "id": "717c657b-6b2e-430c-80e5-2454fa8db79a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460431123,
        "parent_id": "343729ed-cd51-4c57-a242-11d7c49156c3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "methodA wait for mLock1  First\nmethod2 wait for mLock2  Second\nmethod2  mLock2 acquired   Second\nmethodA mLock1 acquired   First\nmethod3  mLock1  Second\nmethod2 wait for mLock2  First"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "methodA wait for mLock1  First\nmethod2 wait for mLock2  Second\nmethod2  mLock2 acquired   Second\nmethodA mLock1 acquired   First\nmethod3  mLock1  Second\nmethod2 wait for mLock2  First",
        "code_language": "Plain Text"
      }
    ],
    "title": "Creating basic deadlocked system",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}