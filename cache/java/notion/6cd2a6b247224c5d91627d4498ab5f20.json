{
  "ID": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
  "Root": {
    "alive": true,
    "content": [
      "8fdde464-56df-4a07-83c5-99737f76eee0",
      "05415add-0761-40b1-9df8-6d1c7c77f4bb",
      "6388656d-f51e-4892-a2ee-cc1f77fcd660",
      "923447bd-554f-42d0-8dd9-ab38e9063211",
      "29b08d1c-daa0-495f-9d1a-f3649abfc9aa"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460791179,
    "id": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460791179,
    "parent_id": "168082aa-5571-487a-900c-cbc49e8a374b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Creating your own Iterable."
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460791176,
        "id": "8fdde464-56df-4a07-83c5-99737f76eee0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460791176,
        "parent_id": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create your own Iterable as with any interface you just implement the abstract methods in the interface. For "
            ],
            [
              "Iterable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " there is only one which is called "
            ],
            [
              "iterator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But its return type "
            ],
            [
              "Iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is itself an interface with three abstract methods. You can return an iterator associated with some collection or create your own custom implementation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create your own Iterable as with any interface you just implement the abstract methods in the interface. For "
          },
          {
            "Text": "Iterable",
            "AttrFlags": 2
          },
          {
            "Text": " there is only one which is called "
          },
          {
            "Text": "iterator()",
            "AttrFlags": 2
          },
          {
            "Text": ". But its return type "
          },
          {
            "Text": "Iterator",
            "AttrFlags": 2
          },
          {
            "Text": " is itself an interface with three abstract methods. You can return an iterator associated with some collection or create your own custom implementation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460791179,
        "id": "05415add-0761-40b1-9df8-6d1c7c77f4bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460791179,
        "parent_id": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static class Alphabet implements Iterable\u003cCharacter\u003e {\n\n    @Override\n    public Iterator\u003cCharacter\u003e iterator() {\n        return new Iterator\u003cCharacter\u003e() {\n            char letter = 'a';\n\n            @Override\n            public boolean hasNext() {\n                return letter \u003c= 'z';\n            }\n\n            @Override\n            public Character next() {\n                return letter++;\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"Doesn't make sense to remove a letter\");\n            }\n        };\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static class Alphabet implements Iterable\u003cCharacter\u003e {\n\n    @Override\n    public Iterator\u003cCharacter\u003e iterator() {\n        return new Iterator\u003cCharacter\u003e() {\n            char letter = 'a';\n\n            @Override\n            public boolean hasNext() {\n                return letter \u003c= 'z';\n            }\n\n            @Override\n            public Character next() {\n                return letter++;\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"Doesn't make sense to remove a letter\");\n            }\n        };\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460791179,
        "id": "6388656d-f51e-4892-a2ee-cc1f77fcd660",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460791179,
        "parent_id": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460791179,
        "id": "923447bd-554f-42d0-8dd9-ab38e9063211",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460791179,
        "parent_id": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void main(String[] args) {\n    for(char c : new Alphabet()) {\n        System.out.println(\"c = \" + c);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void main(String[] args) {\n    for(char c : new Alphabet()) {\n        System.out.println(\"c = \" + c);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460791179,
        "id": "29b08d1c-daa0-495f-9d1a-f3649abfc9aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460791179,
        "parent_id": "6cd2a6b2-4722-4c5d-9162-7d4498ab5f20",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The new "
            ],
            [
              "Iterator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should come with a state pointing to the first item, each call to next updates its state to point to the next one. The "
            ],
            [
              "hasNext()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " checks to see if the iterator is at the end. If the iterator were connected to a modifiable collection then the iterator’s optional "
            ],
            [
              "remove()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method might be implemented to remove the item currently pointed to from the underlying collection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The new "
          },
          {
            "Text": "Iterator",
            "AttrFlags": 2
          },
          {
            "Text": " should come with a state pointing to the first item, each call to next updates its state to point to the next one. The "
          },
          {
            "Text": "hasNext()",
            "AttrFlags": 2
          },
          {
            "Text": " checks to see if the iterator is at the end. If the iterator were connected to a modifiable collection then the iterator’s optional "
          },
          {
            "Text": "remove()",
            "AttrFlags": 2
          },
          {
            "Text": " method might be implemented to remove the item currently pointed to from the underlying collection."
          }
        ]
      }
    ],
    "title": "010 Creating your own Iterable."
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}