{
  "ID": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
  "Root": {
    "alive": true,
    "content": [
      "532f664c-7dc1-43d8-bf3d-d87a01f62d2a",
      "998fbab5-b759-487c-bf2c-04908c552ee1",
      "b9df2142-383c-4235-b05e-566ebf8aaf7d",
      "6cc96203-d979-4017-afcc-574deeea591a",
      "2fc73659-0903-40c7-93e2-c6d9aebd1b1a",
      "d0f20957-6a31-4085-8f12-3427e3842862",
      "c03cfd92-e814-4a60-8fbe-58535581931d",
      "0cf3e4bf-5e0f-4120-a425-be59c928cc73",
      "81106814-15c4-4a39-9983-879bd4c5f2bb",
      "710ede8c-5473-45af-a44f-0b7dda84583e",
      "88157630-f49d-47eb-8b0b-54fffc173581",
      "5805f682-a4a9-4f48-8374-3848a0273531",
      "1f586a7d-60d5-4c2f-ad2f-46eb00da865a",
      "d16b92e9-1200-4f54-8556-d897128965fb",
      "1401b321-1e09-4456-a779-f8c96c03e290",
      "37425fce-3f16-49ee-b223-8d3cd5f02715",
      "a42c2f8d-96b8-4a5e-bc11-6599df5f576f",
      "e0380078-08f7-4bfd-a5b2-b9252ef78c42",
      "5d731253-db3b-4ffe-9c3e-3f18c2337afa",
      "42395bea-4e83-46c2-a1d3-41c2bd71f5d9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463259859,
    "id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550463259859,
    "parent_id": "99f725fb-1166-4771-8bc9-95eaef31fd78",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "000 XML Parsing using the JAXP APIs"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259848,
        "id": "532f664c-7dc1-43d8-bf3d-d87a01f62d2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259848,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Versions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Versions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259851,
        "id": "998fbab5-b759-487c-bf2c-04908c552ee1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259851,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "[{“Name”:“Java SE 1.4”,“GroupName”:null},{“Name”:“Java SE 5”,“GroupName”:null},{“Name”:“Java SE 6”,“GroupName”:null},{“Name”:“Java SE 7”,“GroupName”:null},{“Name”:“Java SE 8”,“GroupName”:null},{“Name”:“Java SE 9 (Early Access)”,“GroupName”:null}]"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "[{“Name”:“Java SE 1.4”,“GroupName”:null},{“Name”:“Java SE 5”,“GroupName”:null},{“Name”:“Java SE 6”,“GroupName”:null},{“Name”:“Java SE 7”,“GroupName”:null},{“Name”:“Java SE 8”,“GroupName”:null},{“Name”:“Java SE 9 (Early Access)”,“GroupName”:null}]"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259851,
        "id": "b9df2142-383c-4235-b05e-566ebf8aaf7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259851,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259851,
        "id": "6cc96203-d979-4017-afcc-574deeea591a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259851,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "XML Parsing is the interpretation of XML documents in order to manipulate their content using sensible constructs, be they “nodes”, “attributes”, “documents”, “namespaces”, or events related to these constructs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "XML Parsing is the interpretation of XML documents in order to manipulate their content using sensible constructs, be they “nodes”, “attributes”, “documents”, “namespaces”, or events related to these constructs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259853,
        "id": "2fc73659-0903-40c7-93e2-c6d9aebd1b1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259853,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java has a native API for XML document handling, called "
            ],
            [
              "JAXP, or Java API for XML Processing",
              [
                [
                  "a",
                  "https://jaxp.java.net/"
                ]
              ]
            ],
            [
              ". JAXP and a reference implementation has been bundled with every Java release since Java 1.4 (JAXP v1.1) and has evolved since. Java 8 shipped with JAXP version 1.6."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java has a native API for XML document handling, called "
          },
          {
            "Text": "JAXP, or Java API for XML Processing",
            "Link": "https://jaxp.java.net/"
          },
          {
            "Text": ". JAXP and a reference implementation has been bundled with every Java release since Java 1.4 (JAXP v1.1) and has evolved since. Java 8 shipped with JAXP version 1.6."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259853,
        "id": "d0f20957-6a31-4085-8f12-3427e3842862",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259853,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The API provides different ways of interacting with XML documents, which are :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The API provides different ways of interacting with XML documents, which are :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259853,
        "id": "c03cfd92-e814-4a60-8fbe-58535581931d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259853,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The DOM interface (Document Object Model)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The DOM interface (Document Object Model)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259854,
        "id": "0cf3e4bf-5e0f-4120-a425-be59c928cc73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259854,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The SAX interface (Simple API for XML)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The SAX interface (Simple API for XML)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259854,
        "id": "81106814-15c4-4a39-9983-879bd4c5f2bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259854,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The StAX interface (Streaming API for XML)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The StAX interface (Streaming API for XML)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259854,
        "id": "710ede8c-5473-45af-a44f-0b7dda84583e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259854,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Principles of the DOM interface"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Principles of the DOM interface"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259854,
        "id": "88157630-f49d-47eb-8b0b-54fffc173581",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259854,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The DOM interface aims to provide a "
            ],
            [
              "W3C DOM",
              [
                [
                  "a",
                  "https://www.w3.org/DOM/"
                ]
              ]
            ],
            [
              " compliant way of interpreting XML. Various versions of JAXP have supported various DOM Levels of specification (up to level 3)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The DOM interface aims to provide a "
          },
          {
            "Text": "W3C DOM",
            "Link": "https://www.w3.org/DOM/"
          },
          {
            "Text": " compliant way of interpreting XML. Various versions of JAXP have supported various DOM Levels of specification (up to level 3)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259855,
        "id": "5805f682-a4a9-4f48-8374-3848a0273531",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259855,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Under the Document Object Model interface, an XML document is represented as a tree, starting with the “Document Element”. The base type of the API is the "
            ],
            [
              "Node",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Node.html"
                ]
              ]
            ],
            [
              " type, it allows to navigate from a "
            ],
            [
              "Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to its parent, its children, or its siblings (although, not all "
            ],
            [
              "Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s can have children, for example, "
            ],
            [
              "Text",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " nodes are final in the tree, and never have childre). XML tags are represented as "
            ],
            [
              "Element",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, which notably extend the "
            ],
            [
              "Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with attribute-related methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Under the Document Object Model interface, an XML document is represented as a tree, starting with the “Document Element”. The base type of the API is the "
          },
          {
            "Text": "Node",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/org/w3c/dom/Node.html"
          },
          {
            "Text": " type, it allows to navigate from a "
          },
          {
            "Text": "Node",
            "AttrFlags": 2
          },
          {
            "Text": " to its parent, its children, or its siblings (although, not all "
          },
          {
            "Text": "Node",
            "AttrFlags": 2
          },
          {
            "Text": "s can have children, for example, "
          },
          {
            "Text": "Text",
            "AttrFlags": 2
          },
          {
            "Text": " nodes are final in the tree, and never have childre). XML tags are represented as "
          },
          {
            "Text": "Element",
            "AttrFlags": 2
          },
          {
            "Text": "s, which notably extend the "
          },
          {
            "Text": "Node",
            "AttrFlags": 2
          },
          {
            "Text": " with attribute-related methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259855,
        "id": "1f586a7d-60d5-4c2f-ad2f-46eb00da865a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259855,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The DOM interface is very usefull since it allows a “one line” parsing of XML documents as trees, and allows easy modification of the constructed tree (node addition, suppression, copying, …), and finally its serialization (back to disk) post modifications. This comes at a price, though : the tree resides in memory, therefore, DOM trees are not always practical for huge XML documents. Furthermore, the construction of the tree is not always the fastest way of dealing with XML content, especially if one is not interested in all parts of the XML document."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The DOM interface is very usefull since it allows a “one line” parsing of XML documents as trees, and allows easy modification of the constructed tree (node addition, suppression, copying, …), and finally its serialization (back to disk) post modifications. This comes at a price, though : the tree resides in memory, therefore, DOM trees are not always practical for huge XML documents. Furthermore, the construction of the tree is not always the fastest way of dealing with XML content, especially if one is not interested in all parts of the XML document."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259855,
        "id": "d16b92e9-1200-4f54-8556-d897128965fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259855,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Principles of the SAX interface"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Principles of the SAX interface"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259855,
        "id": "1401b321-1e09-4456-a779-f8c96c03e290",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259855,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The SAX API is an event-oriented API to deal with XML documents. Under this model, the components of an XML documents are interpreted as events (e.g. “a tag has been opened”, “a tag has been closed”, “a text node has been encountered”, “a comment has been encountered”)…"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The SAX API is an event-oriented API to deal with XML documents. Under this model, the components of an XML documents are interpreted as events (e.g. “a tag has been opened”, “a tag has been closed”, “a text node has been encountered”, “a comment has been encountered”)…"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259856,
        "id": "37425fce-3f16-49ee-b223-8d3cd5f02715",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259856,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The SAX API uses a “push parsing” approach, where a SAX "
            ],
            [
              "Parser",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/7/docs/api/javax/xml/parsers/SAXParser.html"
                ]
              ]
            ],
            [
              " is responsible for interpreting the XML document, and invokes methods on a delegate (a "
            ],
            [
              "ContentHandler",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/7/docs/api/org/xml/sax/ContentHandler.html"
                ]
              ]
            ],
            [
              ") to deal with whatever event is found in the XML document. Usually, one never writes a parser, but one provides a handler to gather all needed informations from the XML document."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The SAX API uses a “push parsing” approach, where a SAX "
          },
          {
            "Text": "Parser",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/7/docs/api/javax/xml/parsers/SAXParser.html"
          },
          {
            "Text": " is responsible for interpreting the XML document, and invokes methods on a delegate (a "
          },
          {
            "Text": "ContentHandler",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/7/docs/api/org/xml/sax/ContentHandler.html"
          },
          {
            "Text": ") to deal with whatever event is found in the XML document. Usually, one never writes a parser, but one provides a handler to gather all needed informations from the XML document."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259856,
        "id": "a42c2f8d-96b8-4a5e-bc11-6599df5f576f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259856,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The SAX interface overcomes the DOM interface’s limitations by keeping only the minimum necessary data at the parser level (e.g. namespaces contexts, validation state), therefore, only informations that are kept by the "
            ],
            [
              "ContentHandler",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " - for which you, the developer, is responsible - are held into memory. The tradeoff is that there is no way of “going back in time/the XML document” with such an approach : while DOM allows a "
            ],
            [
              "Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to go back to its parent, there is no such possibility in SAX."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The SAX interface overcomes the DOM interface’s limitations by keeping only the minimum necessary data at the parser level (e.g. namespaces contexts, validation state), therefore, only informations that are kept by the "
          },
          {
            "Text": "ContentHandler",
            "AttrFlags": 2
          },
          {
            "Text": " - for which you, the developer, is responsible - are held into memory. The tradeoff is that there is no way of “going back in time/the XML document” with such an approach : while DOM allows a "
          },
          {
            "Text": "Node",
            "AttrFlags": 2
          },
          {
            "Text": " to go back to its parent, there is no such possibility in SAX."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259856,
        "id": "e0380078-08f7-4bfd-a5b2-b9252ef78c42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259856,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Principles of the StAX interface"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Principles of the StAX interface"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259857,
        "id": "5d731253-db3b-4ffe-9c3e-3f18c2337afa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259857,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The StAX API takes a similar approach to processing XML as the SAX API (that is, event driven), the only very significative difference being that StAX is a pull parser (where SAX was a push parser). In SAX, the "
            ],
            [
              "Parser",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is in control, and uses callbacks on the "
            ],
            [
              "ContentHandler",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In Stax, you call the parser, and control when/if you want to obtain the next XML “event”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The StAX API takes a similar approach to processing XML as the SAX API (that is, event driven), the only very significative difference being that StAX is a pull parser (where SAX was a push parser). In SAX, the "
          },
          {
            "Text": "Parser",
            "AttrFlags": 2
          },
          {
            "Text": " is in control, and uses callbacks on the "
          },
          {
            "Text": "ContentHandler",
            "AttrFlags": 2
          },
          {
            "Text": ". In Stax, you call the parser, and control when/if you want to obtain the next XML “event”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463259858,
        "id": "42395bea-4e83-46c2-a1d3-41c2bd71f5d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463259858,
        "parent_id": "ab376dfd-a3aa-44ba-8d7b-6d71187ba08b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The API starts with "
            ],
            [
              "XMLStreamReader",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamReader.html"
                ]
              ]
            ],
            [
              " (or "
            ],
            [
              "XMLEventReader",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamReader.html"
                ]
              ]
            ],
            [
              "), which are the gateways through which the developer can ask "
            ],
            [
              "nextEvent()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", in an iterator-style way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The API starts with "
          },
          {
            "Text": "XMLStreamReader",
            "Link": "https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamReader.html"
          },
          {
            "Text": " (or "
          },
          {
            "Text": "XMLEventReader",
            "Link": "https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamReader.html"
          },
          {
            "Text": "), which are the gateways through which the developer can ask "
          },
          {
            "Text": "nextEvent()",
            "AttrFlags": 2
          },
          {
            "Text": ", in an iterator-style way."
          }
        ]
      }
    ],
    "title": "000 XML Parsing using the JAXP APIs"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}