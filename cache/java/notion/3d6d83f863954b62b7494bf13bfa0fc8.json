{
  "ID": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
  "Root": {
    "alive": true,
    "content": [
      "991e9e19-f058-4478-bb7a-d2090d96807b",
      "40d09037-f124-463f-9130-6514aefabc6f",
      "5c32fadc-f744-4f24-b72a-5ac51d73856b",
      "8b1b5418-598e-486c-947b-74ed13d9a573",
      "c3d63cf1-459a-4e76-9263-3bb0a117f123",
      "cb361ad3-0846-464a-b947-4e23d4fcfc10",
      "d3b8068a-6b00-4c0b-a868-acc31d39d77d",
      "1dfabf07-cec2-4ae6-ba36-2d893ac115d5",
      "f6a7c7cb-1a33-430e-92e4-ed3ba8238220",
      "267b50f5-b9ec-4ec7-b61d-26d9729aa14e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460168373,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551762024339,
    "parent_id": "eaad0c1d-9ecf-4d2a-b640-d2df4debfaf8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Referring to the declared generic type within its own declaration"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168357,
        "id": "991e9e19-f058-4478-bb7a-d2090d96807b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168357,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How do you go about using an instance of a (possibly further) inherited generic type within a method declaration in the generic type itself being declared? This is one of the problems you will face when you dig a bit deeper into generics, but still a fairly common one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How do you go about using an instance of a (possibly further) inherited generic type within a method declaration in the generic type itself being declared? This is one of the problems you will face when you dig a bit deeper into generics, but still a fairly common one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168360,
        "id": "40d09037-f124-463f-9130-6514aefabc6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168360,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assume we have a "
            ],
            [
              "DataSeries\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type (interface here), which defines a generic data series containing values of type "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is cumbersome to work with this type directly when we want to perform a lot of operations with e.g. double values, so we define "
            ],
            [
              "DoubleSeries extends DataSeries\u003cDouble\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Now assume, the original "
            ],
            [
              "DataSeries\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type has a method "
            ],
            [
              "add(values)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which adds another series of the same length and returns a new one. How do we enforce the type of "
            ],
            [
              "values",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the type of the return to be "
            ],
            [
              "DoubleSeries",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rather than "
            ],
            [
              "DataSeries\u003cDouble\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in our derived class?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assume we have a "
          },
          {
            "Text": "DataSeries\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " type (interface here), which defines a generic data series containing values of type "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ". It is cumbersome to work with this type directly when we want to perform a lot of operations with e.g. double values, so we define "
          },
          {
            "Text": "DoubleSeries extends DataSeries\u003cDouble\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". Now assume, the original "
          },
          {
            "Text": "DataSeries\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " type has a method "
          },
          {
            "Text": "add(values)",
            "AttrFlags": 2
          },
          {
            "Text": " which adds another series of the same length and returns a new one. How do we enforce the type of "
          },
          {
            "Text": "values",
            "AttrFlags": 2
          },
          {
            "Text": " and the type of the return to be "
          },
          {
            "Text": "DoubleSeries",
            "AttrFlags": 2
          },
          {
            "Text": " rather than "
          },
          {
            "Text": "DataSeries\u003cDouble\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " in our derived class?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168360,
        "id": "5c32fadc-f744-4f24-b72a-5ac51d73856b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168360,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem can be solved by adding a generic type parameter referring back to and extending the type being declared (applied to an interface here, but the same stands for classes):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem can be solved by adding a generic type parameter referring back to and extending the type being declared (applied to an interface here, but the same stands for classes):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168360,
        "id": "8b1b5418-598e-486c-947b-74ed13d9a573",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168360,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface DataSeries\u003cT, DS extends DataSeries\u003cT, DS\u003e\u003e {\n    DS add(DS values);\n    List\u003cT\u003e data();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface DataSeries\u003cT, DS extends DataSeries\u003cT, DS\u003e\u003e {\n    DS add(DS values);\n    List\u003cT\u003e data();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168360,
        "id": "c3d63cf1-459a-4e76-9263-3bb0a117f123",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168360,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " represents the data type the series holds, e.g. "
            ],
            [
              "Double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "DS",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the series itself. An inherited type (or types) can now be easily implemented by substituting the above mentioned parameter by a corresponding derived type, thus, yielding a concrete "
            ],
            [
              "Double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-based definition of the form:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " represents the data type the series holds, e.g. "
          },
          {
            "Text": "Double",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "DS",
            "AttrFlags": 2
          },
          {
            "Text": " the series itself. An inherited type (or types) can now be easily implemented by substituting the above mentioned parameter by a corresponding derived type, thus, yielding a concrete "
          },
          {
            "Text": "Double",
            "AttrFlags": 2
          },
          {
            "Text": "-based definition of the form:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168360,
        "id": "cb361ad3-0846-464a-b947-4e23d4fcfc10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168360,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface DoubleSeries extends DataSeries\u003cDouble, DoubleSeries\u003e {\n    static DoubleSeries instance(Collection\u003cDouble\u003e data) {\n        return new DoubleSeriesImpl(data);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface DoubleSeries extends DataSeries\u003cDouble, DoubleSeries\u003e {\n    static DoubleSeries instance(Collection\u003cDouble\u003e data) {\n        return new DoubleSeriesImpl(data);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168361,
        "id": "d3b8068a-6b00-4c0b-a868-acc31d39d77d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168361,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At this moment even an IDE will implement the above interface with correct types in place, which, after a bit of content filling may look like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At this moment even an IDE will implement the above interface with correct types in place, which, after a bit of content filling may look like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168361,
        "id": "1dfabf07-cec2-4ae6-ba36-2d893ac115d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168361,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class DoubleSeriesImpl implements DoubleSeries {\n    private final List\u003cDouble\u003e data;\n\n    DoubleSeriesImpl(Collection\u003cDouble\u003e data) {\n        this.data = new ArrayList\u003c\u003e(data);\n    }\n\n    @Override\n    public DoubleSeries add(DoubleSeries values) {\n        List\u003cDouble\u003e incoming = values != null ? values.data() : null;\n        if (incoming == null || incoming.size() != data.size()) {\n            throw new IllegalArgumentException(\"bad series\");\n        }\n        List\u003cDouble\u003e newdata = new ArrayList\u003c\u003e(data.size());\n        for (int i = 0; i \u003c data.size(); i++) {\n            newdata.add(this.data.get(i) + incoming.get(i)); // beware autoboxing\n        }\n        return DoubleSeries.instance(newdata);\n    }\n\n    @Override\n    public List\u003cDouble\u003e data() {\n        return Collections.unmodifiableList(data);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class DoubleSeriesImpl implements DoubleSeries {\n    private final List\u003cDouble\u003e data;\n\n    DoubleSeriesImpl(Collection\u003cDouble\u003e data) {\n        this.data = new ArrayList\u003c\u003e(data);\n    }\n\n    @Override\n    public DoubleSeries add(DoubleSeries values) {\n        List\u003cDouble\u003e incoming = values != null ? values.data() : null;\n        if (incoming == null || incoming.size() != data.size()) {\n            throw new IllegalArgumentException(\"bad series\");\n        }\n        List\u003cDouble\u003e newdata = new ArrayList\u003c\u003e(data.size());\n        for (int i = 0; i \u003c data.size(); i++) {\n            newdata.add(this.data.get(i) + incoming.get(i)); // beware autoboxing\n        }\n        return DoubleSeries.instance(newdata);\n    }\n\n    @Override\n    public List\u003cDouble\u003e data() {\n        return Collections.unmodifiableList(data);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168373,
        "id": "f6a7c7cb-1a33-430e-92e4-ed3ba8238220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168373,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see the "
            ],
            [
              "add",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method is declared as "
            ],
            [
              "DoubleSeries add(DoubleSeries values)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the compiler is happy."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see the "
          },
          {
            "Text": "add",
            "AttrFlags": 2
          },
          {
            "Text": " method is declared as "
          },
          {
            "Text": "DoubleSeries add(DoubleSeries values)",
            "AttrFlags": 2
          },
          {
            "Text": " and the compiler is happy."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460168373,
        "id": "267b50f5-b9ec-4ec7-b61d-26d9729aa14e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460168373,
        "parent_id": "3d6d83f8-6395-4b62-b749-4bf13bfa0fc8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The pattern can be further nested if required."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The pattern can be further nested if required."
          }
        ]
      }
    ],
    "title": "Referring to the declared generic type within its own declaration",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}