{
  "ID": "cf6777d3-4f13-4dc7-b023-19a9b3beee2c",
  "Root": {
    "alive": true,
    "content": [
      "3326b24f-381e-463b-9b37-2950a8fb76eb",
      "5d97a9db-ba61-4151-8b7a-983486f4c11a",
      "479b73b1-a0e3-4963-8145-368e50d7b245"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461215141,
    "id": "cf6777d3-4f13-4dc7-b023-19a9b3beee2c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461215141,
    "parent_id": "69b2872f-ba89-4451-889b-c3256180e829",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Non-numeric primitive casting"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461215137,
        "id": "3326b24f-381e-463b-9b37-2950a8fb76eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461215137,
        "parent_id": "cf6777d3-4f13-4dc7-b023-19a9b3beee2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type cannot be cast to/from any other primitive type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": " type cannot be cast to/from any other primitive type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461215140,
        "id": "5d97a9db-ba61-4151-8b7a-983486f4c11a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461215140,
        "parent_id": "cf6777d3-4f13-4dc7-b023-19a9b3beee2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be cast to/from any numeric type by using the code-point mappings specified by Unicode. A "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is represented in memory as an unsigned 16-bit integer value (2 bytes), so casting to "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (1 byte) will drop 8 of those bits (this is safe for ASCII characters). The utility methods of the "
            ],
            [
              "Character",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class use "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (4 bytes) to transfer to/from code-point values, but a "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (2 bytes) would also suffice for storing a Unicode code-point."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " can be cast to/from any numeric type by using the code-point mappings specified by Unicode. A "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " is represented in memory as an unsigned 16-bit integer value (2 bytes), so casting to "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": " (1 byte) will drop 8 of those bits (this is safe for ASCII characters). The utility methods of the "
          },
          {
            "Text": "Character",
            "AttrFlags": 2
          },
          {
            "Text": " class use "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " (4 bytes) to transfer to/from code-point values, but a "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " (2 bytes) would also suffice for storing a Unicode code-point."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461215141,
        "id": "479b73b1-a0e3-4963-8145-368e50d7b245",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461215141,
        "parent_id": "cf6777d3-4f13-4dc7-b023-19a9b3beee2c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int badInt   = (int)  true; // Compiler error: incompatible types\n\nchar char1   = (char)   65; // A\nbyte byte1   = (byte)  'A'; // 65\nshort short1 = (short) 'A'; // 65\nint int1     = (int)   'A'; // 65\n\nchar char2   = (char) 8253; // ‽\nbyte byte2   = (byte)  '‽'; // 61 (truncated code-point into the ASCII range)\nshort short2 = (short) '‽'; // 8253\nint int2     = (int)   '‽'; // 8253"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int badInt   = (int)  true; // Compiler error: incompatible types\n\nchar char1   = (char)   65; // A\nbyte byte1   = (byte)  'A'; // 65\nshort short1 = (short) 'A'; // 65\nint int1     = (int)   'A'; // 65\n\nchar char2   = (char) 8253; // ‽\nbyte byte2   = (byte)  '‽'; // 61 (truncated code-point into the ASCII range)\nshort short2 = (short) '‽'; // 8253\nint int2     = (int)   '‽'; // 8253",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 Non-numeric primitive casting"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}