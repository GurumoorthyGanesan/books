{
  "ID": "4046bbca-25b2-486b-aca0-caba67da12f6",
  "Root": {
    "alive": true,
    "content": [
      "2094c18e-886c-4e64-92b5-91c0af10fd9a",
      "52c01d41-55d7-4340-9bfc-106fa481c420",
      "4cc7b195-105a-4d30-8be1-3fc51e642724",
      "54315b9e-f669-4238-8414-37f29320194e",
      "58ac24bb-438e-48a1-aaf8-f42526111b18",
      "308bf06e-614d-444d-942a-8db98e6d4a4b",
      "753fcbac-5631-4dfa-958a-d2776c7ad088",
      "6960990b-2a58-43f7-87eb-d487c16c681a",
      "7720958e-fe3a-4ba6-ae0c-f8fad21c0f41"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550517980530,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4046bbca-25b2-486b-aca0-caba67da12f6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551742093805,
    "parent_id": "bcceb6e0-56a9-4024-9f5a-d6dce4afd5b5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "ForkJoin Tasks in Java"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980522,
        "id": "2094c18e-886c-4e64-92b5-91c0af10fd9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980522,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The fork/join framework in Java is ideal for a problem that can be divided into smaller pieces and solved in parallel. The fundamental steps of a fork/join problem are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The fork/join framework in Java is ideal for a problem that can be divided into smaller pieces and solved in parallel. The fundamental steps of a fork/join problem are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980525,
        "id": "52c01d41-55d7-4340-9bfc-106fa481c420",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980525,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Divide the problem into multiple pieces"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Divide the problem into multiple pieces"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980525,
        "id": "4cc7b195-105a-4d30-8be1-3fc51e642724",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980525,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Solve each of the pieces in parallel to each other"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Solve each of the pieces in parallel to each other"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980526,
        "id": "54315b9e-f669-4238-8414-37f29320194e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980526,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Combine each of the sub-solutions into one overall solution"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Combine each of the sub-solutions into one overall solution"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980528,
        "id": "58ac24bb-438e-48a1-aaf8-f42526111b18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980528,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "ForkJoinTask",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html"
                ]
              ]
            ],
            [
              " is the interface that defines such a problem. It is generally expected that you will subclass one of its abstract implementations (usually the "
            ],
            [
              "RecursiveTask",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html"
                ]
              ]
            ],
            [
              ") rather than implement the interface directly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "ForkJoinTask",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html"
          },
          {
            "Text": " is the interface that defines such a problem. It is generally expected that you will subclass one of its abstract implementations (usually the "
          },
          {
            "Text": "RecursiveTask",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html"
          },
          {
            "Text": ") rather than implement the interface directly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980528,
        "id": "308bf06e-614d-444d-942a-8db98e6d4a4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980528,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, we are going to sum a collection of integers, dividing until we get to batch sizes of no more than ten."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, we are going to sum a collection of integers, dividing until we get to batch sizes of no more than ten."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980529,
        "id": "753fcbac-5631-4dfa-958a-d2776c7ad088",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980529,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.List;\nimport java.util.concurrent.RecursiveTask;\n\npublic class SummingTask extends RecursiveTask\u003cInteger\u003e {\n    private static final int MAX_BATCH_SIZE = 10;\n\n    private final List\u003cInteger\u003e numbers;\n    private final int minInclusive, maxExclusive;\n\n    public SummingTask(List\u003cInteger\u003e numbers) {\n        this(numbers, 0, numbers.size());\n    }\n\n    // This constructor is only used internally as part of the dividing process\n    private SummingTask(List\u003cInteger\u003e numbers, int minInclusive, int maxExclusive) {\n        this.numbers = numbers;\n        this.minInclusive = minInclusive;\n        this.maxExclusive = maxExclusive;\n    }\n\n    @Override\n    public Integer compute() {\n        if (maxExclusive - minInclusive \u003e MAX_BATCH_SIZE) {\n            // This is too big for a single batch, so we shall divide into two tasks\n            int mid = (minInclusive + maxExclusive) / 2;\n            SummingTask leftTask = new SummingTask(numbers, minInclusive, mid);\n            SummingTask rightTask = new SummingTask(numbers, mid, maxExclusive);\n\n            // Submit the left hand task as a new task to the same ForkJoinPool\n            leftTask.fork();\n\n            // Run the right hand task on the same thread and get the result\n            int rightResult = rightTask.compute();\n\n            // Wait for the left hand task to complete and get its result\n            int leftResult = leftTask.join();\n\n            // And combine the result\n            return leftResult + rightResult;\n        } else {\n            // This is fine for a single batch, so we will run it here and now\n            int sum = 0;\n            for (int i = minInclusive; i \u003c maxExclusive; i++) {\n                sum += numbers.get(i);\n            }\n            return sum;\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.List;\nimport java.util.concurrent.RecursiveTask;\n\npublic class SummingTask extends RecursiveTask\u003cInteger\u003e {\n    private static final int MAX_BATCH_SIZE = 10;\n\n    private final List\u003cInteger\u003e numbers;\n    private final int minInclusive, maxExclusive;\n\n    public SummingTask(List\u003cInteger\u003e numbers) {\n        this(numbers, 0, numbers.size());\n    }\n\n    // This constructor is only used internally as part of the dividing process\n    private SummingTask(List\u003cInteger\u003e numbers, int minInclusive, int maxExclusive) {\n        this.numbers = numbers;\n        this.minInclusive = minInclusive;\n        this.maxExclusive = maxExclusive;\n    }\n\n    @Override\n    public Integer compute() {\n        if (maxExclusive - minInclusive \u003e MAX_BATCH_SIZE) {\n            // This is too big for a single batch, so we shall divide into two tasks\n            int mid = (minInclusive + maxExclusive) / 2;\n            SummingTask leftTask = new SummingTask(numbers, minInclusive, mid);\n            SummingTask rightTask = new SummingTask(numbers, mid, maxExclusive);\n\n            // Submit the left hand task as a new task to the same ForkJoinPool\n            leftTask.fork();\n\n            // Run the right hand task on the same thread and get the result\n            int rightResult = rightTask.compute();\n\n            // Wait for the left hand task to complete and get its result\n            int leftResult = leftTask.join();\n\n            // And combine the result\n            return leftResult + rightResult;\n        } else {\n            // This is fine for a single batch, so we will run it here and now\n            int sum = 0;\n            for (int i = minInclusive; i \u003c maxExclusive; i++) {\n                sum += numbers.get(i);\n            }\n            return sum;\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980529,
        "id": "6960990b-2a58-43f7-87eb-d487c16c681a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980529,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An instance of this task can now be passed to an instance of "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An instance of this task can now be passed to an instance of "
          },
          {
            "Text": "ForkJoinPool",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517980529,
        "id": "7720958e-fe3a-4ba6-ae0c-f8fad21c0f41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517980529,
        "parent_id": "4046bbca-25b2-486b-aca0-caba67da12f6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Because I am not specifying the number of threads\n// it will create a thread for each available processor\nForkJoinPool pool = new ForkJoinPool();\n\n// Submit the task to the pool, and get what is effectively the Future\nForkJoinTask\u003cInteger\u003e task = pool.submit(new SummingTask(numbers));\n\n// Wait for the result\nint result = task.join();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Because I am not specifying the number of threads\n// it will create a thread for each available processor\nForkJoinPool pool = new ForkJoinPool();\n\n// Submit the task to the pool, and get what is effectively the Future\nForkJoinTask\u003cInteger\u003e task = pool.submit(new SummingTask(numbers));\n\n// Wait for the result\nint result = task.join();",
        "code_language": "Plain Text"
      }
    ],
    "title": "ForkJoin Tasks in Java",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}