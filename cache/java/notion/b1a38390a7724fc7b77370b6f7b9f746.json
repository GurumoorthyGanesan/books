{
  "ID": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
  "Root": {
    "alive": true,
    "content": [
      "68a0a4a5-7822-4378-b3be-7ecc5a4b58e0",
      "8a13b6a0-527c-446b-86ab-bee477303350",
      "1dc3d9ab-abab-4261-8dcc-74ba8663a9ef",
      "4b602073-719b-4330-984d-95f4a634ce84",
      "300c7755-89ea-4263-8367-3c5a8e1e4857",
      "23bb3aa6-9015-47dc-ba6f-ff27022e9381",
      "9a6d3c87-852b-4af8-8823-c2b8b6cce7b9",
      "79425c19-dd6d-4cf0-b980-890207e9ea9c",
      "3c57ecca-7c8c-45d9-9d67-8a7edbf30c5c",
      "11472b92-30b8-4e3b-bd79-c9748eb337c4",
      "6815f204-0609-4b6b-9673-c031992a3bba",
      "43e6cbbf-754d-4198-b27d-c69828820c24",
      "a159ed35-baa7-4411-ac43-15919b3b508e",
      "7dda3055-d25d-4971-a961-7a0ccbb2d428",
      "78b53066-5401-4d17-8225-a19c8fd9b4a0",
      "a8b0b010-56b2-4abb-b079-663ebbb58f7e",
      "80766e4d-ceba-4a66-bca5-a1239987851b",
      "12367d19-01d0-4479-9c05-82e5da06417f",
      "25586384-ebf0-438d-a5e4-74ee4d27f7c5",
      "bfcef5cf-8c94-4bdc-8d76-92a4070abfbc",
      "77e852c2-07ae-464f-bdce-8e265d70ed90",
      "10ef9aa6-5d39-4a13-baa2-2e9592228719",
      "1e70b6f5-ae90-4152-a368-144a3acefd89",
      "f8ce6ae3-d14c-4a50-b22f-627b4e03268f",
      "8adea107-8233-4b7a-ac25-768a3224252c",
      "4606ca74-173e-4e4e-a332-935e3d9026c6",
      "79845b4e-bad3-473c-b9b9-0e178f935ed8",
      "41df3314-e343-4241-b176-3f91ae4037d5",
      "7036da2d-59e9-4867-85ac-a85d97988419",
      "b7a9c220-ed5f-4ff2-a94b-801af59cf4e2",
      "be77db43-c3da-4b81-acb3-9c9dfc3ce417",
      "eb098be2-4ab2-472e-bd99-2dd159287305",
      "0c20b1b8-99dd-434e-b95c-85f18cbc6ae6",
      "746cdc7e-ca3b-4ca9-b815-074940529431"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518803471,
    "id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518803471,
    "parent_id": "447fd392-7082-4e22-a270-9cd70f7b8c2d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Motivation for the Memory Model"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803462,
        "id": "68a0a4a5-7822-4378-b3be-7ecc5a4b58e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803462,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803463,
        "id": "8a13b6a0-527c-446b-86ab-bee477303350",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803463,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Example {\n    public int a, b, c, d;\n    \n    public void doIt() {\n       a = b + 1;\n       c = d + 1;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Example {\n    public int a, b, c, d;\n    \n    public void doIt() {\n       a = b + 1;\n       c = d + 1;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803463,
        "id": "1dc3d9ab-abab-4261-8dcc-74ba8663a9ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803463,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If this class is used is a single-threaded application, then the observable behavior will be exactly as you would expect. For instance:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If this class is used is a single-threaded application, then the observable behavior will be exactly as you would expect. For instance:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803463,
        "id": "4b602073-719b-4330-984d-95f4a634ce84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803463,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class SingleThreaded {\n    public static void main(String[] args) {\n        Example eg = new Example();\n        System.out.println(eg.a + \", \" + eg.c);\n        eg.doIt();\n        System.out.println(eg.a + \", \" + eg.c);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class SingleThreaded {\n    public static void main(String[] args) {\n        Example eg = new Example();\n        System.out.println(eg.a + \", \" + eg.c);\n        eg.doIt();\n        System.out.println(eg.a + \", \" + eg.c);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803463,
        "id": "300c7755-89ea-4263-8367-3c5a8e1e4857",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803463,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "will output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "will output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803463,
        "id": "23bb3aa6-9015-47dc-ba6f-ff27022e9381",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803463,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "0, 0\n1, 1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "0, 0\n1, 1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803464,
        "id": "9a6d3c87-852b-4af8-8823-c2b8b6cce7b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803464,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As far as the “main” thread can tell",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", the statements in the "
            ],
            [
              "main()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method and the "
            ],
            [
              "doIt()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method will be executed in the order that they are written in the source code. This is a clear requirement of the Java Language Specification (JLS)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As far as the “main” thread can tell",
            "AttrFlags": 4
          },
          {
            "Text": ", the statements in the "
          },
          {
            "Text": "main()",
            "AttrFlags": 2
          },
          {
            "Text": " method and the "
          },
          {
            "Text": "doIt()",
            "AttrFlags": 2
          },
          {
            "Text": " method will be executed in the order that they are written in the source code. This is a clear requirement of the Java Language Specification (JLS)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803464,
        "id": "79425c19-dd6d-4cf0-b980-890207e9ea9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803464,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now consider the same class used in a multi-threaded application."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now consider the same class used in a multi-threaded application."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803464,
        "id": "3c57ecca-7c8c-45d9-9d67-8a7edbf30c5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803464,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MultiThreaded {\n    public static void main(String[] args) {\n        final Example eg = new Example();\n        new Thread(new Runnable() {\n            public void run() {\n                while (true) {\n                    eg.doIt();\n                }\n            }\n        }).start();\n        while (true) {\n            System.out.println(eg.a + \", \" + eg.c);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MultiThreaded {\n    public static void main(String[] args) {\n        final Example eg = new Example();\n        new Thread(new Runnable() {\n            public void run() {\n                while (true) {\n                    eg.doIt();\n                }\n            }\n        }).start();\n        while (true) {\n            System.out.println(eg.a + \", \" + eg.c);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803464,
        "id": "11472b92-30b8-4e3b-bd79-c9748eb337c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803464,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What will this print?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What will this print?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803464,
        "id": "6815f204-0609-4b6b-9673-c031992a3bba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803464,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In fact, according to the JLS it is not possible to predict that this will print:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In fact, according to the JLS it is not possible to predict that this will print:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803465,
        "id": "43e6cbbf-754d-4198-b27d-c69828820c24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803465,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You will probably see a few lines of "
            ],
            [
              "0, 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to start with."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You will probably see a few lines of "
          },
          {
            "Text": "0, 0",
            "AttrFlags": 2
          },
          {
            "Text": " to start with."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803465,
        "id": "a159ed35-baa7-4411-ac43-15919b3b508e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803465,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then you probably see lines like "
            ],
            [
              "N, N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "N, N + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then you probably see lines like "
          },
          {
            "Text": "N, N",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "N, N + 1",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803466,
        "id": "7dda3055-d25d-4971-a961-7a0ccbb2d428",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803466,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You might see lines like "
            ],
            [
              "N + 1, N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "You might see lines like "
          },
          {
            "Text": "N + 1, N",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803466,
        "id": "78b53066-5401-4d17-8225-a19c8fd9b4a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803466,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In theory, you might even see that the "
            ],
            [
              "0, 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " lines continue forever1."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In theory, you might even see that the "
          },
          {
            "Text": "0, 0",
            "AttrFlags": 2
          },
          {
            "Text": " lines continue forever1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803467,
        "id": "a8b0b010-56b2-4abb-b079-663ebbb58f7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803467,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 - In practice the presence of the "
            ],
            [
              "println",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements is liable to cause some serendipitous synchronization and memory cache flushing. That is likely to hide some of the effects that would cause the above behavior."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 - In practice the presence of the "
          },
          {
            "Text": "println",
            "AttrFlags": 2
          },
          {
            "Text": " statements is liable to cause some serendipitous synchronization and memory cache flushing. That is likely to hide some of the effects that would cause the above behavior."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803467,
        "id": "80766e4d-ceba-4a66-bca5-a1239987851b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803467,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So how can we explain these?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So how can we explain these?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803467,
        "id": "12367d19-01d0-4479-9c05-82e5da06417f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803467,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reordering of assignments"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reordering of assignments"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803467,
        "id": "25586384-ebf0-438d-a5e4-74ee4d27f7c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803467,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One possible explanation for unexpected results is that the JIT compiler has changed the order of the assignments in the "
            ],
            [
              "doIt()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method. The JLS requires that statements "
            ],
            [
              "appear to",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " execute in order "
            ],
            [
              "from the perspective of the current",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " thread. In this case, nothing in the code of the "
            ],
            [
              "doIt()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method can observe the effect of a (hypothetical) reordering of those two statement. This means that the JIT compiler would be permitted to do that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One possible explanation for unexpected results is that the JIT compiler has changed the order of the assignments in the "
          },
          {
            "Text": "doIt()",
            "AttrFlags": 2
          },
          {
            "Text": " method. The JLS requires that statements "
          },
          {
            "Text": "appear to",
            "AttrFlags": 4
          },
          {
            "Text": " execute in order "
          },
          {
            "Text": "from the perspective of the current",
            "AttrFlags": 4
          },
          {
            "Text": " thread. In this case, nothing in the code of the "
          },
          {
            "Text": "doIt()",
            "AttrFlags": 2
          },
          {
            "Text": " method can observe the effect of a (hypothetical) reordering of those two statement. This means that the JIT compiler would be permitted to do that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803468,
        "id": "bfcef5cf-8c94-4bdc-8d76-92a4070abfbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803468,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why would it do that?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why would it do that?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803468,
        "id": "77e852c2-07ae-464f-bdce-8e265d70ed90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803468,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On typical modern hardware, machine instructions are executed using a instruction pipeline which allows a sequence of instructions to be in different stages. Some phases of instruction execution take longer than others, and memory operations tend to take a longer time. A smart compiler can optimize the instruction throughput of the pipeline by ordering the instructions to maximize the amount of overlap. This may lead to executing parts of statements out of order. The JLS permits this provided that not affect the result of the computation "
            ],
            [
              "from the perspective of the current thread",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On typical modern hardware, machine instructions are executed using a instruction pipeline which allows a sequence of instructions to be in different stages. Some phases of instruction execution take longer than others, and memory operations tend to take a longer time. A smart compiler can optimize the instruction throughput of the pipeline by ordering the instructions to maximize the amount of overlap. This may lead to executing parts of statements out of order. The JLS permits this provided that not affect the result of the computation "
          },
          {
            "Text": "from the perspective of the current thread",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803468,
        "id": "10ef9aa6-5d39-4a13-baa2-2e9592228719",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803468,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Effects of memory caches"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Effects of memory caches"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803468,
        "id": "1e70b6f5-ae90-4152-a368-144a3acefd89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803468,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A second possible explanation is effect of memory caching. In a classical computer architecture, each processor has a small set of registers, and a larger amount of memory. Access to registers is much faster than access to main memory. In modern architectures, there are memory caches that are slower than registers, but faster than main memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A second possible explanation is effect of memory caching. In a classical computer architecture, each processor has a small set of registers, and a larger amount of memory. Access to registers is much faster than access to main memory. In modern architectures, there are memory caches that are slower than registers, but faster than main memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803468,
        "id": "f8ce6ae3-d14c-4a50-b22f-627b4e03268f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803468,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A compiler will exploit this by trying to keep copies of variables in registers, or in the memory caches. If a variable does not "
            ],
            [
              "need",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to be flushed to main memory, or does not "
            ],
            [
              "need",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to be read from memory, there are significant performance benefits in not doing this. In cases where the JLS does not require memory operations to be visible to another thread, the Java JIT compiler is likely to not add the “read barrier” and “write barrier” instructions that will force main memory reads and writes. Once again, the performance benefits of doing this are significant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A compiler will exploit this by trying to keep copies of variables in registers, or in the memory caches. If a variable does not "
          },
          {
            "Text": "need",
            "AttrFlags": 4
          },
          {
            "Text": " to be flushed to main memory, or does not "
          },
          {
            "Text": "need",
            "AttrFlags": 4
          },
          {
            "Text": " to be read from memory, there are significant performance benefits in not doing this. In cases where the JLS does not require memory operations to be visible to another thread, the Java JIT compiler is likely to not add the “read barrier” and “write barrier” instructions that will force main memory reads and writes. Once again, the performance benefits of doing this are significant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803468,
        "id": "8adea107-8233-4b7a-ac25-768a3224252c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803468,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Proper synchronization"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Proper synchronization"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803469,
        "id": "4606ca74-173e-4e4e-a332-935e3d9026c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803469,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So far, we have seen that the JLS allows the JIT compiler to generate code that makes single-threaded code faster by reordering or avoiding memory operations. But what happens when other threads can observe the state of the (shared) variables in main memory?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So far, we have seen that the JLS allows the JIT compiler to generate code that makes single-threaded code faster by reordering or avoiding memory operations. But what happens when other threads can observe the state of the (shared) variables in main memory?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803469,
        "id": "79845b4e-bad3-473c-b9b9-0e178f935ed8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803469,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The answer is, that the other threads are liable to observe variable states which would appear to be impossible … based on the code order of the Java statements. The solution to this is to use appropriate synchronization. The three main approaches are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The answer is, that the other threads are liable to observe variable states which would appear to be impossible … based on the code order of the Java statements. The solution to this is to use appropriate synchronization. The three main approaches are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803469,
        "id": "41df3314-e343-4241-b176-3f91ae4037d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803469,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using primitive mutexes and the "
            ],
            [
              "synchronized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructs."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using primitive mutexes and the "
          },
          {
            "Text": "synchronized",
            "AttrFlags": 2
          },
          {
            "Text": " constructs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803470,
        "id": "7036da2d-59e9-4867-85ac-a85d97988419",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803470,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variables."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "volatile",
            "AttrFlags": 2
          },
          {
            "Text": " variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803470,
        "id": "b7a9c220-ed5f-4ff2-a94b-801af59cf4e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803470,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using higher level concurrency support; e.g. classes in the "
            ],
            [
              "java.util.concurrent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " packages."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using higher level concurrency support; e.g. classes in the "
          },
          {
            "Text": "java.util.concurrent",
            "AttrFlags": 2
          },
          {
            "Text": " packages."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803470,
        "id": "be77db43-c3da-4b81-acb3-9c9dfc3ce417",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803470,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But even with this, it is important to understand where synchronization is needed, and what effects that you can rely on. This is where the Java Memory Model comes in."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But even with this, it is important to understand where synchronization is needed, and what effects that you can rely on. This is where the Java Memory Model comes in."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803470,
        "id": "eb098be2-4ab2-472e-bd99-2dd159287305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803470,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Memory Model"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Memory Model"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803470,
        "id": "0c20b1b8-99dd-434e-b95c-85f18cbc6ae6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803470,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Java Memory Model is the section of the JLS that specifies the conditions under which one thread is guaranteed to see the effects of memory writes made by another thread. The Memory Model is specified with a fair degree of "
            ],
            [
              "formal rigor",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", and (as a result) requires detailed and careful reading to understand. But the basic principle is that certain constructs create a “happens-before” relation between write of a variable by one thread, and a subsequent read of the same variable by another thread. If the “happens before” relation exists, the JIT compiler is "
            ],
            [
              "obliged",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to generate code that will ensure that the read operation sees the value written by the write."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Java Memory Model is the section of the JLS that specifies the conditions under which one thread is guaranteed to see the effects of memory writes made by another thread. The Memory Model is specified with a fair degree of "
          },
          {
            "Text": "formal rigor",
            "AttrFlags": 4
          },
          {
            "Text": ", and (as a result) requires detailed and careful reading to understand. But the basic principle is that certain constructs create a “happens-before” relation between write of a variable by one thread, and a subsequent read of the same variable by another thread. If the “happens before” relation exists, the JIT compiler is "
          },
          {
            "Text": "obliged",
            "AttrFlags": 4
          },
          {
            "Text": " to generate code that will ensure that the read operation sees the value written by the write."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518803471,
        "id": "746cdc7e-ca3b-4ca9-b815-074940529431",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518803471,
        "parent_id": "b1a38390-a772-4fc7-b773-70b6f7b9f746",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Armed with this, it is possible to reason about memory coherency in a Java program, and decide whether this will be predictable and consistent for "
            ],
            [
              "all",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " execution platforms."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Armed with this, it is possible to reason about memory coherency in a Java program, and decide whether this will be predictable and consistent for "
          },
          {
            "Text": "all",
            "AttrFlags": 4
          },
          {
            "Text": " execution platforms."
          }
        ]
      }
    ],
    "title": "010 Motivation for the Memory Model"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}