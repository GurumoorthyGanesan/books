{
  "ID": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
  "Root": {
    "alive": true,
    "content": [
      "dc5ed374-ce3a-49ad-a0a4-a097623eb20c",
      "45e2f9b8-1cb4-48a0-a9dd-a03936c71a8a",
      "fc136a1c-74bc-4d59-98e4-ad42d9d5164a",
      "c3ff5804-9fda-4095-a483-d274a0d5ac42",
      "b760cced-5688-4386-baa2-24c3a2219147",
      "f046cec0-fb51-4fdb-84f9-adf1b489df03",
      "cf5d1444-88ab-4ad6-8bc9-193806d768a9",
      "85f488fe-2aa3-4030-a69a-ab217787f081"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519579487,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551741498387,
    "parent_id": "6dd46157-67bc-42db-a307-1e68e8cc3008",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Defining Asynchronous Tasks Inline using Lambdas"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579482,
        "id": "dc5ed374-ce3a-49ad-a0a4-a097623eb20c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579482,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While good software design often maximizes code reusability, sometimes it can be useful to define asynchronous tasks inline in your code via Lambda expressions to maximize code readability."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While good software design often maximizes code reusability, sometimes it can be useful to define asynchronous tasks inline in your code via Lambda expressions to maximize code readability."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579485,
        "id": "45e2f9b8-1cb4-48a0-a9dd-a03936c71a8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579485,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, we will create a single class which contains a main() method. Inside this method, we will use Lambda expressions to create and execute instances of Callable and Runnable\u003cT\u003e."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, we will create a single class which contains a main() method. Inside this method, we will use Lambda expressions to create and execute instances of Callable and Runnable\u003cT\u003e."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579486,
        "id": "fc136a1c-74bc-4d59-98e4-ad42d9d5164a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579486,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AsyncExample3.java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "AsyncExample3.java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579486,
        "id": "c3ff5804-9fda-4095-a483-d274a0d5ac42",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579486,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import lombok.extern.java.Log;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\n\n@Log\npublic class AsyncExample3 {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        List\u003cFuture\u003cInteger\u003e\u003e futures = new ArrayList\u003c\u003e();\n        for(int i = 0; i \u003c 5; i++){\n            final int index = i;\n            executorService.execute(() -\u003e {\n                int timeout = getTimeout();\n                log.info(String.format(\"Runnable %d has been submitted and will sleep for %d seconds\", index, timeout));\n                try {\n                    TimeUnit.SECONDS.sleep(timeout);\n                } catch (InterruptedException e) {\n                    log.warning(e.getMessage());\n                }\n                log.info(String.format(\"Runnable %d has finished sleeping\", index));\n            });\n            Future\u003cInteger\u003e submittedFuture = executorService.submit(() -\u003e {\n                int timeout = getTimeout();\n                log.info(String.format(\"Callable %d will begin sleeping\", index));\n                try {\n                    TimeUnit.SECONDS.sleep(timeout);\n                } catch (InterruptedException e) {\n                    log.warning(e.getMessage());\n                }\n                log.info(String.format(\"Callable %d is done sleeping\", index));\n                return timeout;\n            });\n            futures.add(submittedFuture);\n        }\n        executorService.shutdown();\n        while(!futures.isEmpty()){\n            for(int j = 0; j \u003c futures.size(); j++){\n                Future\u003cInteger\u003e f = futures.get(j);\n                if(f.isDone()){\n                    try {\n                        int timeout = f.get();\n                        log.info(String.format(\"A task just completed after sleeping for %d seconds\", timeout));\n                        futures.remove(f);\n                    } catch (InterruptedException | ExecutionException e) {\n                        log.warning(e.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    public static int getTimeout(){\n        return ThreadLocalRandom.current().nextInt(1, 20);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import lombok.extern.java.Log;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\n\n@Log\npublic class AsyncExample3 {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        List\u003cFuture\u003cInteger\u003e\u003e futures = new ArrayList\u003c\u003e();\n        for(int i = 0; i \u003c 5; i++){\n            final int index = i;\n            executorService.execute(() -\u003e {\n                int timeout = getTimeout();\n                log.info(String.format(\"Runnable %d has been submitted and will sleep for %d seconds\", index, timeout));\n                try {\n                    TimeUnit.SECONDS.sleep(timeout);\n                } catch (InterruptedException e) {\n                    log.warning(e.getMessage());\n                }\n                log.info(String.format(\"Runnable %d has finished sleeping\", index));\n            });\n            Future\u003cInteger\u003e submittedFuture = executorService.submit(() -\u003e {\n                int timeout = getTimeout();\n                log.info(String.format(\"Callable %d will begin sleeping\", index));\n                try {\n                    TimeUnit.SECONDS.sleep(timeout);\n                } catch (InterruptedException e) {\n                    log.warning(e.getMessage());\n                }\n                log.info(String.format(\"Callable %d is done sleeping\", index));\n                return timeout;\n            });\n            futures.add(submittedFuture);\n        }\n        executorService.shutdown();\n        while(!futures.isEmpty()){\n            for(int j = 0; j \u003c futures.size(); j++){\n                Future\u003cInteger\u003e f = futures.get(j);\n                if(f.isDone()){\n                    try {\n                        int timeout = f.get();\n                        log.info(String.format(\"A task just completed after sleeping for %d seconds\", timeout));\n                        futures.remove(f);\n                    } catch (InterruptedException | ExecutionException e) {\n                        log.warning(e.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    public static int getTimeout(){\n        return ThreadLocalRandom.current().nextInt(1, 20);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579486,
        "id": "b760cced-5688-4386-baa2-24c3a2219147",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579486,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Observations of Note:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Observations of Note:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579486,
        "id": "f046cec0-fb51-4fdb-84f9-adf1b489df03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579486,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several things to note in the output above,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several things to note in the output above,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579487,
        "id": "cf5d1444-88ab-4ad6-8bc9-193806d768a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579487,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda expressions have access to variables and methods which are available to the scope in which they are defined, but all variables must be final (or effectively final) for use inside a lambda expression."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda expressions have access to variables and methods which are available to the scope in which they are defined, but all variables must be final (or effectively final) for use inside a lambda expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579487,
        "id": "85f488fe-2aa3-4030-a69a-ab217787f081",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579487,
        "parent_id": "e7575ac0-c6ac-411f-8cf7-97d556700c8b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We do not have to specify whether our Lambda expression is a Callable or a Runnable\u003cT\u003e explicitly, the return type is inferred automatically by the return type."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "We do not have to specify whether our Lambda expression is a Callable or a Runnable\u003cT\u003e explicitly, the return type is inferred automatically by the return type."
          }
        ]
      }
    ],
    "title": "Defining Asynchronous Tasks Inline using Lambdas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}