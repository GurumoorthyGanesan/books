{
  "ID": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
  "Root": {
    "alive": true,
    "content": [
      "af53a8de-df89-4948-bf2c-c786ed0ef71d",
      "1d87e0b2-1928-4474-9230-ce47e803d302",
      "cb9d775c-e484-49cd-824d-feeb03e7284a",
      "d63bb87d-a7fd-4b88-90cd-39409e47e4fe",
      "19f5bca8-0b3c-41b3-857b-3c93b30f7677",
      "69423773-f312-40bd-8f90-02e529e00926",
      "6da2fbe3-6e99-4c91-8fde-a5f8d5f589bf",
      "b180dfcf-3200-43da-85a9-345c86da97a8",
      "18a92998-893b-4a4a-9bbd-5ff2436d4301"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460537093,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551760084350,
    "parent_id": "596cd51e-237c-46bd-a4df-28e4d338582d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The double primitive"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537092,
        "id": "af53a8de-df89-4948-bf2c-c786ed0ef71d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537092,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a double-precision 64-bit IEEE 754 floating point number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " is a double-precision 64-bit IEEE 754 floating point number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537092,
        "id": "1d87e0b2-1928-4474-9230-ce47e803d302",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537092,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double example = -7162.37;\ndouble myDouble = 974.21;\ndouble anotherDouble = 658.7;\n\ndouble addedDoubles = myDouble + anotherDouble; // 315.51\ndouble subtractedDoubles = myDouble - anotherDouble; // 1632.91\n\ndouble scientificNotationDouble = 1.2e-3;    // 0.0012"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double example = -7162.37;\ndouble myDouble = 974.21;\ndouble anotherDouble = 658.7;\n\ndouble addedDoubles = myDouble + anotherDouble; // 315.51\ndouble subtractedDoubles = myDouble - anotherDouble; // 1632.91\n\ndouble scientificNotationDouble = 1.2e-3;    // 0.0012",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537092,
        "id": "cb9d775c-e484-49cd-824d-feeb03e7284a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537092,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because of the way floating point numbers are stored, many numbers don’t have an exact representation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because of the way floating point numbers are stored, many numbers don’t have an exact representation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537092,
        "id": "d63bb87d-a7fd-4b88-90cd-39409e47e4fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537092,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double notExact = 1.32 - 0.42; // result should be 0.9\nSystem.out.println(notExact); // 0.9000000000000001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double notExact = 1.32 - 0.42; // result should be 0.9\nSystem.out.println(notExact); // 0.9000000000000001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537093,
        "id": "19f5bca8-0b3c-41b3-857b-3c93b30f7677",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537093,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While using "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is fine for most applications, neither "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " nor "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be used to store precise numbers such as currency. Instead, the "
            ],
            [
              "BigDecimal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class should be used"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While using "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " is fine for most applications, neither "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " nor "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " should be used to store precise numbers such as currency. Instead, the "
          },
          {
            "Text": "BigDecimal",
            "AttrFlags": 2
          },
          {
            "Text": " class should be used"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537093,
        "id": "69423773-f312-40bd-8f90-02e529e00926",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537093,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The default value of a "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "0.0d",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The default value of a "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "0.0d",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537093,
        "id": "6da2fbe3-6e99-4c91-8fde-a5f8d5f589bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537093,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public double defaultDouble;    // defaultDouble == 0.0"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public double defaultDouble;    // defaultDouble == 0.0",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537093,
        "id": "b180dfcf-3200-43da-85a9-345c86da97a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537093,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Double.POSITIVE_INFINITY",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Double.NEGATIVE_INFINITY",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Double.NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values. "
            ],
            [
              "NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " stands for results of operations that cannot be determined, such as dividing 2 infinite values. Furthermore "
            ],
            [
              "0d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "-0d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are different, but "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " yields true:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "Double.POSITIVE_INFINITY",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Double.NEGATIVE_INFINITY",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Double.NaN",
            "AttrFlags": 2
          },
          {
            "Text": " are "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " values. "
          },
          {
            "Text": "NaN",
            "AttrFlags": 2
          },
          {
            "Text": " stands for results of operations that cannot be determined, such as dividing 2 infinite values. Furthermore "
          },
          {
            "Text": "0d",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "-0d",
            "AttrFlags": 2
          },
          {
            "Text": " are different, but "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " yields true:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460537093,
        "id": "18a92998-893b-4a4a-9bbd-5ff2436d4301",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460537093,
        "parent_id": "fde3c2a2-15fb-4ce8-8287-785eb9d7bfc7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double d1 = 0d;\ndouble d2 = -0d;\nSystem.out.println(d1 == d2); // true\nSystem.out.println(1d / d1); // Infinity\nSystem.out.println(1d / d2); // -Infinity\nSystem.out.println(Double.POSITIVE_INFINITY / Double.POSITIVE_INFINITY); // NaN"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double d1 = 0d;\ndouble d2 = -0d;\nSystem.out.println(d1 == d2); // true\nSystem.out.println(1d / d1); // Infinity\nSystem.out.println(1d / d2); // -Infinity\nSystem.out.println(Double.POSITIVE_INFINITY / Double.POSITIVE_INFINITY); // NaN",
        "code_language": "Plain Text"
      }
    ],
    "title": "The double primitive",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}