{
  "ID": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
  "Root": {
    "alive": true,
    "content": [
      "3bb14351-a853-4245-9533-54955bb764aa",
      "87c25de7-d547-42a4-9a27-2a5f51341141",
      "2f16d186-9538-4f48-a14d-70c1e79878bd",
      "15c9832f-efa9-4ffc-8cb0-4e1f8205b81a",
      "e466de01-d554-4e86-ad3b-1a7baf12ac5e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460726072,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460726072,
    "parent_id": "7f371e05-b7ff-48ea-9972-81e7db63652e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Getting Annotation values at run-time"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460726071,
        "id": "3bb14351-a853-4245-9533-54955bb764aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460726071,
        "parent_id": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can fetch the current properties of the Annotation by using "
            ],
            [
              "Reflection",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/629/reflection#t=201607211900283806605"
                ]
              ]
            ],
            [
              " to fetch the Method or Field or Class which has an Annotation applied to it, and then fetching the desired properties."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can fetch the current properties of the Annotation by using "
          },
          {
            "Text": "Reflection",
            "Link": "http://stackoverflow.com/documentation/java/629/reflection#t=201607211900283806605"
          },
          {
            "Text": " to fetch the Method or Field or Class which has an Annotation applied to it, and then fetching the desired properties."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460726072,
        "id": "87c25de7-d547-42a4-9a27-2a5f51341141",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460726072,
        "parent_id": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@Retention(RetentionPolicy.RUNTIME)\n@interface MyAnnotation {\n    String key() default \"foo\";\n    String value() default \"bar\";\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@Retention(RetentionPolicy.RUNTIME)\n@interface MyAnnotation {\n    String key() default \"foo\";\n    String value() default \"bar\";\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460726072,
        "id": "2f16d186-9538-4f48-a14d-70c1e79878bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460726072,
        "parent_id": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class AnnotationExample {\n    // Put the Annotation on the method, but leave the defaults\n    @MyAnnotation\n    public void testDefaults() throws Exception {\n        // Using reflection, get the public method \"testDefaults\", which is this method with no args\n        Method method = AnnotationExample.class.getMethod(\"testDefaults\", null);\n\n        // Fetch the Annotation that is of type MyAnnotation from the Method\n        MyAnnotation annotation = (MyAnnotation)method.getAnnotation(MyAnnotation.class);\n\n        // Print out the settings of the Annotation\n        print(annotation);\n    }\n\n    //Put the Annotation on the method, but override the settings\n    @MyAnnotation(key=\"baz\", value=\"buzz\")\n    public void testValues() throws Exception {\n        // Using reflection, get the public method \"testValues\", which is this method with no args\n        Method method = AnnotationExample.class.getMethod(\"testValues\", null);\n\n        // Fetch the Annotation that is of type MyAnnotation from the Method\n        MyAnnotation annotation = (MyAnnotation)method.getAnnotation(MyAnnotation.class);\n\n        // Print out the settings of the Annotation\n        print(annotation);\n    }\n\n    public void print(MyAnnotation annotation) {\n        // Fetch the MyAnnotation 'key' \u0026 'value' properties, and print them out \n        System.out.println(annotation.key() + \" = \" + annotation.value());\n    }\n\n    public static void main(String[] args) {\n        AnnotationExample example = new AnnotationExample();\n        try {\n            example.testDefaults();\n            example.testValues();\n        } catch( Exception e ) {\n            // Shouldn't throw any Exceptions\n            System.err.println(\"Exception [\" + e.getClass().getName() + \"] - \" + e.getMessage());\n            e.printStackTrace(System.err);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class AnnotationExample {\n    // Put the Annotation on the method, but leave the defaults\n    @MyAnnotation\n    public void testDefaults() throws Exception {\n        // Using reflection, get the public method \"testDefaults\", which is this method with no args\n        Method method = AnnotationExample.class.getMethod(\"testDefaults\", null);\n\n        // Fetch the Annotation that is of type MyAnnotation from the Method\n        MyAnnotation annotation = (MyAnnotation)method.getAnnotation(MyAnnotation.class);\n\n        // Print out the settings of the Annotation\n        print(annotation);\n    }\n\n    //Put the Annotation on the method, but override the settings\n    @MyAnnotation(key=\"baz\", value=\"buzz\")\n    public void testValues() throws Exception {\n        // Using reflection, get the public method \"testValues\", which is this method with no args\n        Method method = AnnotationExample.class.getMethod(\"testValues\", null);\n\n        // Fetch the Annotation that is of type MyAnnotation from the Method\n        MyAnnotation annotation = (MyAnnotation)method.getAnnotation(MyAnnotation.class);\n\n        // Print out the settings of the Annotation\n        print(annotation);\n    }\n\n    public void print(MyAnnotation annotation) {\n        // Fetch the MyAnnotation 'key' \u0026 'value' properties, and print them out \n        System.out.println(annotation.key() + \" = \" + annotation.value());\n    }\n\n    public static void main(String[] args) {\n        AnnotationExample example = new AnnotationExample();\n        try {\n            example.testDefaults();\n            example.testValues();\n        } catch( Exception e ) {\n            // Shouldn't throw any Exceptions\n            System.err.println(\"Exception [\" + e.getClass().getName() + \"] - \" + e.getMessage());\n            e.printStackTrace(System.err);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460726072,
        "id": "15c9832f-efa9-4ffc-8cb0-4e1f8205b81a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460726072,
        "parent_id": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The output will be"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The output will be"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460726072,
        "id": "e466de01-d554-4e86-ad3b-1a7baf12ac5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460726072,
        "parent_id": "f61c0327-14a3-43ae-a014-fc7b4f3660a8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "foo = bar\nbaz = buzz"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "foo = bar\nbaz = buzz",
        "code_language": "Plain Text"
      }
    ],
    "title": "Getting Annotation values at run-time",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}