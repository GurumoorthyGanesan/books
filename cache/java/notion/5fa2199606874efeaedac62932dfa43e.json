{
  "ID": "5fa21996-0687-4efe-aeda-c62932dfa43e",
  "Root": {
    "alive": true,
    "content": [
      "c0df74ba-9d21-4186-9420-9d4dc2b9f17c",
      "11ac06ae-6412-4168-aaa1-5e514516a5bb",
      "2d2222bb-6439-4993-b65c-8d8e83425e03",
      "1361e5a9-e7ff-41b9-839e-f1bf16775b0d",
      "f7249ec8-801f-4a32-a320-478582d64d5b",
      "f6f4a204-f6c7-4bf6-b1a7-3911569b2a52",
      "0f5c06ac-f67d-4e23-b3f4-048532f3968d",
      "c7b93875-4ac1-4553-aa52-b86d7ab09580",
      "9002167f-303e-426d-9180-968928ba9cc9",
      "38369114-3b3c-42e2-8cc1-56a98fe86664",
      "0d389544-6429-4682-9285-80bc2721d417",
      "6cea27d7-d685-41bb-861c-bca5436c7360",
      "bd5cfd71-22e0-42f3-9fdd-c73966308c0e",
      "152d8daf-f621-4455-ba4e-b81e47eb464b",
      "c729c803-e6aa-4cab-9abc-4d3e26808f54",
      "fe030997-f2cf-41c3-a8d0-4ce918745b81",
      "a26d7c99-6f3d-4df6-9444-242d54dd8d72",
      "897f0c40-8797-4406-aa5a-ff8bb6d49033",
      "7658ea59-f9f1-4982-a62b-841a8534c776",
      "a43b2b78-38b1-4031-93e4-d20e6b91f04e",
      "d1dcc07c-4332-4dfd-8863-b85a23e97c7c",
      "43bf34e3-ecf1-476c-9355-aeb369f74fcb",
      "aaecc966-daa7-47d9-857a-050bc25894ba",
      "bf420d9a-50a0-445e-8594-acf5af22052d",
      "fe100b03-b136-4eb3-843e-37566667cf7f",
      "0b49e8a6-6d6f-4368-8360-f93ccb0d85ad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460508155,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551768081285,
    "parent_id": "452a4215-c66d-493c-80d3-4980568bf1fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "equals method"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508148,
        "id": "c0df74ba-9d21-4186-9420-9d4dc2b9f17c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508148,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "TL;DR",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "TL;DR",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508151,
        "id": "11ac06ae-6412-4168-aaa1-5e514516a5bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508151,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tests for reference equality (whether they are the "
            ],
            [
              "same object",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " tests for reference equality (whether they are the "
          },
          {
            "Text": "same object",
            "AttrFlags": 5
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508151,
        "id": "2d2222bb-6439-4993-b65c-8d8e83425e03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508151,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              ".equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tests for value equality (whether they are "
            ],
            [
              "logically “equal”",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": ".equals()",
            "AttrFlags": 2
          },
          {
            "Text": " tests for value equality (whether they are "
          },
          {
            "Text": "logically “equal”",
            "AttrFlags": 5
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508151,
        "id": "1361e5a9-e7ff-41b9-839e-f1bf16775b0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508151,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508151,
        "id": "f7249ec8-801f-4a32-a320-478582d64d5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508151,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a method used to compare two objects for equality. The default implementation of the "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method in the "
            ],
            [
              "Object",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class returns "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if and only if both references are pointing to the same instance. It therefore behaves the same as comparison by "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " is a method used to compare two objects for equality. The default implementation of the "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " method in the "
          },
          {
            "Text": "Object",
            "AttrFlags": 2
          },
          {
            "Text": " class returns "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " if and only if both references are pointing to the same instance. It therefore behaves the same as comparison by "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508152,
        "id": "f6f4a204-f6c7-4bf6-b1a7-3911569b2a52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508152,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Foo {\n    int field1, field2;\n    String field3;\n\n    public Foo(int i, int j, String k) {\n        field1 = i;\n        field2 = j;\n        field3 = k;\n    }\n\n    public static void main(String[] args) {\n        Foo foo1 = new Foo(0, 0, \"bar\");\n        Foo foo2 = new Foo(0, 0, \"bar\");\n\n        System.out.println(foo1.equals(foo2)); // prints false\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Foo {\n    int field1, field2;\n    String field3;\n\n    public Foo(int i, int j, String k) {\n        field1 = i;\n        field2 = j;\n        field3 = k;\n    }\n\n    public static void main(String[] args) {\n        Foo foo1 = new Foo(0, 0, \"bar\");\n        Foo foo2 = new Foo(0, 0, \"bar\");\n\n        System.out.println(foo1.equals(foo2)); // prints false\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508152,
        "id": "0f5c06ac-f67d-4e23-b3f4-048532f3968d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508152,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though "
            ],
            [
              "foo1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "foo2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are created with the same fields, they are pointing to two different objects in memory. The default "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation therefore evaluates to "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though "
          },
          {
            "Text": "foo1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "foo2",
            "AttrFlags": 2
          },
          {
            "Text": " are created with the same fields, they are pointing to two different objects in memory. The default "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " implementation therefore evaluates to "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508152,
        "id": "c7b93875-4ac1-4553-aa52-b86d7ab09580",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508152,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To compare the contents of an object for equality, "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has to be overridden."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To compare the contents of an object for equality, "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " has to be overridden."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508152,
        "id": "9002167f-303e-426d-9180-968928ba9cc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508152,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Foo {\n    int field1, field2;\n    String field3;\n\n    public Foo(int i, int j, String k) {\n        field1 = i;\n        field2 = j;\n        field3 = k;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n\n        Foo f = (Foo) obj;\n        return field1 == f.field1 \u0026\u0026\n               field2 == f.field2 \u0026\u0026\n               (field3 == null ? f.field3 == null : field3.equals(f.field3));\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 1;\n        hash = 31 * hash + this.field1;\n        hash = 31 * hash + this.field2;\n        hash = 31 * hash + (field3 == null ? 0 : field3.hashCode());\n        return hash;\n    }\n\n    public static void main(String[] args) {\n        Foo foo1 = new Foo(0, 0, \"bar\");\n        Foo foo2 = new Foo(0, 0, \"bar\");\n\n        System.out.println(foo1.equals(foo2)); // prints true\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Foo {\n    int field1, field2;\n    String field3;\n\n    public Foo(int i, int j, String k) {\n        field1 = i;\n        field2 = j;\n        field3 = k;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n\n        Foo f = (Foo) obj;\n        return field1 == f.field1 \u0026\u0026\n               field2 == f.field2 \u0026\u0026\n               (field3 == null ? f.field3 == null : field3.equals(f.field3));\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 1;\n        hash = 31 * hash + this.field1;\n        hash = 31 * hash + this.field2;\n        hash = 31 * hash + (field3 == null ? 0 : field3.hashCode());\n        return hash;\n    }\n\n    public static void main(String[] args) {\n        Foo foo1 = new Foo(0, 0, \"bar\");\n        Foo foo2 = new Foo(0, 0, \"bar\");\n\n        System.out.println(foo1.equals(foo2)); // prints true\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508152,
        "id": "38369114-3b3c-42e2-8cc1-56a98fe86664",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508152,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here the overridden "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method decides that the objects are equal if their fields are the same."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here the overridden "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " method decides that the objects are equal if their fields are the same."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508153,
        "id": "0d389544-6429-4682-9285-80bc2721d417",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508153,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice that the "
            ],
            [
              "hashCode()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method was also overwritten. The contract for that method states that when two objects are equal, their hash values must also be the same. That’s why one must almost always override "
            ],
            [
              "hashCode()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " together."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice that the "
          },
          {
            "Text": "hashCode()",
            "AttrFlags": 2
          },
          {
            "Text": " method was also overwritten. The contract for that method states that when two objects are equal, their hash values must also be the same. That’s why one must almost always override "
          },
          {
            "Text": "hashCode()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " together."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508153,
        "id": "6cea27d7-d685-41bb-861c-bca5436c7360",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508153,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pay special attention to the argument type of the "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method. It is "
            ],
            [
              "Object obj",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", not "
            ],
            [
              "Foo obj",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If you put the latter in your method, that is not an override of the "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pay special attention to the argument type of the "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " method. It is "
          },
          {
            "Text": "Object obj",
            "AttrFlags": 2
          },
          {
            "Text": ", not "
          },
          {
            "Text": "Foo obj",
            "AttrFlags": 2
          },
          {
            "Text": ". If you put the latter in your method, that is not an override of the "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508153,
        "id": "bd5cfd71-22e0-42f3-9fdd-c73966308c0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508153,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When writing your own class, you will have to write similar logic when overriding "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "hashCode()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Most IDEs can automatically generate this for you."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When writing your own class, you will have to write similar logic when overriding "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "hashCode()",
            "AttrFlags": 2
          },
          {
            "Text": ". Most IDEs can automatically generate this for you."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508153,
        "id": "152d8daf-f621-4455-ba4e-b81e47eb464b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508153,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example of an "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation can be found in the "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class, which is part of the core Java API. Rather than comparing pointers, the "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class compares the content of the "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example of an "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " implementation can be found in the "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " class, which is part of the core Java API. Rather than comparing pointers, the "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " class compares the content of the "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "c729c803-e6aa-4cab-9abc-4d3e26808f54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java 1.7 introduced the "
            ],
            [
              "java.util.Objects",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class which provides a convenience method, "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that compares two potentially "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " references, so it can be used to simplify implementations of the "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java 1.7 introduced the "
          },
          {
            "Text": "java.util.Objects",
            "AttrFlags": 2
          },
          {
            "Text": " class which provides a convenience method, "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": ", that compares two potentially "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " references, so it can be used to simplify implementations of the "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "fe030997-f2cf-41c3-a8d0-4ce918745b81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@Override\npublic boolean equals(Object obj) {\n    if (this == obj) {\n        return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n        return false;\n    }\n\n    Foo f = (Foo) obj;\n    return field1 == f.field1 \u0026\u0026 field2 == f.field2 \u0026\u0026 Objects.equals(field3, f.field3);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@Override\npublic boolean equals(Object obj) {\n    if (this == obj) {\n        return true;\n    }\n    if (obj == null || getClass() != obj.getClass()) {\n        return false;\n    }\n\n    Foo f = (Foo) obj;\n    return field1 == f.field1 \u0026\u0026 field2 == f.field2 \u0026\u0026 Objects.equals(field3, f.field3);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "a26d7c99-6f3d-4df6-9444-242d54dd8d72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class Comparison"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class Comparison"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "897f0c40-8797-4406-aa5a-ff8bb6d49033",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since the equals method can run against any object, one of the first things the method often does (after checking for "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is to check if the class of the object being compared matches the current class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since the equals method can run against any object, one of the first things the method often does (after checking for "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ") is to check if the class of the object being compared matches the current class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "7658ea59-f9f1-4982-a62b-841a8534c776",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@Override\npublic boolean equals(Object obj) {\n    //...check for null\n    if (getClass() != obj.getClass()) {\n        return false;\n    }\n    //...compare fields\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@Override\npublic boolean equals(Object obj) {\n    //...check for null\n    if (getClass() != obj.getClass()) {\n        return false;\n    }\n    //...compare fields\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "a43b2b78-38b1-4031-93e4-d20e6b91f04e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is typically done as above by comparing the class objects. However, that can fail in a few special cases which may not be obvious. For example, some frameworks generate dynamic proxies of classes and these dynamic proxies are actually a different class. Here is an example using JPA."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is typically done as above by comparing the class objects. However, that can fail in a few special cases which may not be obvious. For example, some frameworks generate dynamic proxies of classes and these dynamic proxies are actually a different class. Here is an example using JPA."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "d1dcc07c-4332-4dfd-8863-b85a23e97c7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Foo detachedInstance = ...\nFoo mergedInstance = entityManager.merge(detachedInstance);\nif (mergedInstance.equals(detachedInstance)) {\n    //Can never get here if equality is tested with getClass()\n    //as mergedInstance is a proxy (subclass) of Foo\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Foo detachedInstance = ...\nFoo mergedInstance = entityManager.merge(detachedInstance);\nif (mergedInstance.equals(detachedInstance)) {\n    //Can never get here if equality is tested with getClass()\n    //as mergedInstance is a proxy (subclass) of Foo\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508154,
        "id": "43bf34e3-ecf1-476c-9355-aeb369f74fcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508154,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One mechanism to work around that limitation is to compare classes using "
            ],
            [
              "instanceof",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One mechanism to work around that limitation is to compare classes using "
          },
          {
            "Text": "instanceof",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508155,
        "id": "aaecc966-daa7-47d9-857a-050bc25894ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508155,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "@Override\npublic final boolean equals(Object obj) {\n    if (!(obj instanceof Foo)) {\n        return false;\n    }\n    //...compare fields\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "@Override\npublic final boolean equals(Object obj) {\n    if (!(obj instanceof Foo)) {\n        return false;\n    }\n    //...compare fields\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508155,
        "id": "bf420d9a-50a0-445e-8594-acf5af22052d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508155,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, there are a few pitfalls that must be avoided when using "
            ],
            [
              "instanceof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since Foo could potentially have other subclasses and those subclasses might override "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you could get into a case where a "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equal to a "
            ],
            [
              "FooSubclass",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but the "
            ],
            [
              "FooSubclass",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not equal to "
            ],
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, there are a few pitfalls that must be avoided when using "
          },
          {
            "Text": "instanceof",
            "AttrFlags": 2
          },
          {
            "Text": ". Since Foo could potentially have other subclasses and those subclasses might override "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " you could get into a case where a "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " is equal to a "
          },
          {
            "Text": "FooSubclass",
            "AttrFlags": 2
          },
          {
            "Text": " but the "
          },
          {
            "Text": "FooSubclass",
            "AttrFlags": 2
          },
          {
            "Text": " is not equal to "
          },
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508155,
        "id": "fe100b03-b136-4eb3-843e-37566667cf7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508155,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Foo foo = new Foo(7);\nFooSubclass fooSubclass = new FooSubclass(7, false);\nfoo.equals(fooSubclass) //true\nfooSubclass.equals(foo) //false"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Foo foo = new Foo(7);\nFooSubclass fooSubclass = new FooSubclass(7, false);\nfoo.equals(fooSubclass) //true\nfooSubclass.equals(foo) //false",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460508155,
        "id": "0b49e8a6-6d6f-4368-8360-f93ccb0d85ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460508155,
        "parent_id": "5fa21996-0687-4efe-aeda-c62932dfa43e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This violates the properties of symmetry and transitivity and thus is an invalid implementation of the "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method. As a result, when using "
            ],
            [
              "instanceof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", a good practice is to make the "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method "
            ],
            [
              "final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (as in the above example). This will ensure that no subclass overrides "
            ],
            [
              "equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and violates key assumptions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This violates the properties of symmetry and transitivity and thus is an invalid implementation of the "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " method. As a result, when using "
          },
          {
            "Text": "instanceof",
            "AttrFlags": 2
          },
          {
            "Text": ", a good practice is to make the "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " method "
          },
          {
            "Text": "final",
            "AttrFlags": 2
          },
          {
            "Text": " (as in the above example). This will ensure that no subclass overrides "
          },
          {
            "Text": "equals()",
            "AttrFlags": 2
          },
          {
            "Text": " and violates key assumptions."
          }
        ]
      }
    ],
    "title": "equals method",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}