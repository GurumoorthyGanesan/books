{
  "ID": "113017d4-6dac-4e1a-9746-c138ab29e977",
  "Root": {
    "alive": true,
    "content": [
      "43531b8e-8223-4f5e-9e88-dae90b0fdb2d",
      "d0bfacec-0984-4b4c-b6ea-fb30ec39182b",
      "5c9bdbd5-a30a-439b-b966-2cee94c7b2db",
      "1eb49d96-d4a8-420f-a89c-66bf37271007",
      "dfe63eeb-476f-4c4a-a7e5-5efbd9be88a8",
      "3b6dc96b-ddb7-4125-a8cb-819c38432055",
      "f9d1c600-c5e6-41a7-b83e-e02236aec56f",
      "6600043e-aae6-4824-8515-b1e044f04ab6",
      "0cd8cc18-6340-4422-b45f-65d019b2f110",
      "18ec1f7e-0ba8-4e2f-b0fa-9410de3981c5",
      "11640843-ec5d-4617-a923-8352aa32a5d8",
      "ecc54f99-acbd-415a-80f7-e3e187844e96",
      "445868b0-8d52-46bc-ab54-4e086cd15615",
      "8a60941b-7854-440a-9a7a-b103f86a70ab"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460208016,
    "id": "113017d4-6dac-4e1a-9746-c138ab29e977",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460208016,
    "parent_id": "fda67066-f20c-4f73-a7e9-440104e1f868",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Merging combine and composing Maps"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208012,
        "id": "43531b8e-8223-4f5e-9e88-dae90b0fdb2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208012,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "putAll",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to put every member of one map into another. Keys already present in the map will have their corresponding values overwritten."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "putAll",
            "AttrFlags": 2
          },
          {
            "Text": " to put every member of one map into another. Keys already present in the map will have their corresponding values overwritten."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208012,
        "id": "d0bfacec-0984-4b4c-b6ea-fb30ec39182b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208012,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Map\u003cString, Integer\u003e numbers = new HashMap\u003c\u003e();\nnumbers.put(\"One\", 1)\nnumbers.put(\"Three\", 3)\nMap\u003cString, Integer\u003e other_numbers = new HashMap\u003c\u003e();\nother_numbers.put(\"Two\", 2)\nother_numbers.put(\"Three\", 4)\n\nnumbers.putAll(other_numbers)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Map\u003cString, Integer\u003e numbers = new HashMap\u003c\u003e();\nnumbers.put(\"One\", 1)\nnumbers.put(\"Three\", 3)\nMap\u003cString, Integer\u003e other_numbers = new HashMap\u003c\u003e();\nother_numbers.put(\"Two\", 2)\nother_numbers.put(\"Three\", 4)\n\nnumbers.putAll(other_numbers)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208012,
        "id": "5c9bdbd5-a30a-439b-b966-2cee94c7b2db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208012,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This yields the following mapping in "
            ],
            [
              "numbers",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This yields the following mapping in "
          },
          {
            "Text": "numbers",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208013,
        "id": "1eb49d96-d4a8-420f-a89c-66bf37271007",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208013,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\"One\" -\u003e 1\n\"Two\" -\u003e 2\n\"Three\" -\u003e 4 //old value 3 was overwritten by new value 4"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\"One\" -\u003e 1\n\"Two\" -\u003e 2\n\"Three\" -\u003e 4 //old value 3 was overwritten by new value 4",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208013,
        "id": "dfe63eeb-476f-4c4a-a7e5-5efbd9be88a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208013,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "3b6dc96b-ddb7-4125-a8cb-819c38432055",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to combine values instead of overwriting them, you can use "
            ],
            [
              "Map.merge",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/api/java/util/Map.html#merge-K-V-java.util.function.BiFunction-"
                ]
              ]
            ],
            [
              ", added in Java 8, which uses a user-provided "
            ],
            [
              "BiFunction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to merge values for duplicate keys. "
            ],
            [
              "merge",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operates on individual keys and values, so you’ll need to use a loop or "
            ],
            [
              "Map.forEach",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Here we concatenate strings for duplicate keys:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to combine values instead of overwriting them, you can use "
          },
          {
            "Text": "Map.merge",
            "AttrFlags": 2,
            "Link": "http://docs.oracle.com/javase/8/docs/api/java/util/Map.html#merge-K-V-java.util.function.BiFunction-"
          },
          {
            "Text": ", added in Java 8, which uses a user-provided "
          },
          {
            "Text": "BiFunction",
            "AttrFlags": 2
          },
          {
            "Text": " to merge values for duplicate keys. "
          },
          {
            "Text": "merge",
            "AttrFlags": 2
          },
          {
            "Text": " operates on individual keys and values, so you’ll need to use a loop or "
          },
          {
            "Text": "Map.forEach",
            "AttrFlags": 2
          },
          {
            "Text": ". Here we concatenate strings for duplicate keys:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "f9d1c600-c5e6-41a7-b83e-e02236aec56f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (Map.Entry\u003cString, Integer\u003e e : other_numbers.entrySet())\n    numbers.merge(e.getKey(), e.getValue(), Integer::sum);\n//or instead of the above loop\nother_numbers.forEach((k, v) -\u003e numbers.merge(k, v, Integer::sum));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (Map.Entry\u003cString, Integer\u003e e : other_numbers.entrySet())\n    numbers.merge(e.getKey(), e.getValue(), Integer::sum);\n//or instead of the above loop\nother_numbers.forEach((k, v) -\u003e numbers.merge(k, v, Integer::sum));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "6600043e-aae6-4824-8515-b1e044f04ab6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to enforce the constraint there are no duplicate keys, you can use a merge function that throws an "
            ],
            [
              "AssertionError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to enforce the constraint there are no duplicate keys, you can use a merge function that throws an "
          },
          {
            "Text": "AssertionError",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "0cd8cc18-6340-4422-b45f-65d019b2f110",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "mapA.forEach((k, v) -\u003e\n    mapB.merge(k, v, (v1, v2) -\u003e\n        {throw new AssertionError(\"duplicate values for key: \"+k);}));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "mapA.forEach((k, v) -\u003e\n    mapB.merge(k, v, (v1, v2) -\u003e\n        {throw new AssertionError(\"duplicate values for key: \"+k);}));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "18ec1f7e-0ba8-4e2f-b0fa-9410de3981c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Composing Map\u003cX,Y\u003e and Map\u003cY,Z\u003e to get Map\u003cX,Z\u003e"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Composing Map\u003cX,Y\u003e and Map\u003cY,Z\u003e to get Map\u003cX,Z\u003e"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "11640843-ec5d-4617-a923-8352aa32a5d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to compose two mappings, you can do it as follows"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to compose two mappings, you can do it as follows"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "ecc54f99-acbd-415a-80f7-e3e187844e96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Map\u003cString, Integer\u003e map1 = new HashMap\u003cString, Integer\u003e();\nmap1.put(\"key1\", 1);\nmap1.put(\"key2\", 2);\nmap1.put(\"key3\", 3);\n\nMap\u003cInteger, Double\u003e map2 = new HashMap\u003cInteger, Double\u003e();\nmap2.put(1, 1.0);\nmap2.put(2, 2.0);\nmap2.put(3, 3.0);\n\nMap\u003cString, Double\u003e map3 = new new HashMap\u003cString, Double\u003e();\nmap1.forEach((key,value)-\u003emap3.put(key,map2.get(value)));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Map\u003cString, Integer\u003e map1 = new HashMap\u003cString, Integer\u003e();\nmap1.put(\"key1\", 1);\nmap1.put(\"key2\", 2);\nmap1.put(\"key3\", 3);\n\nMap\u003cInteger, Double\u003e map2 = new HashMap\u003cInteger, Double\u003e();\nmap2.put(1, 1.0);\nmap2.put(2, 2.0);\nmap2.put(3, 3.0);\n\nMap\u003cString, Double\u003e map3 = new new HashMap\u003cString, Double\u003e();\nmap1.forEach((key,value)-\u003emap3.put(key,map2.get(value)));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208015,
        "id": "445868b0-8d52-46bc-ab54-4e086cd15615",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208015,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This yields the following mapping"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This yields the following mapping"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460208016,
        "id": "8a60941b-7854-440a-9a7a-b103f86a70ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460208016,
        "parent_id": "113017d4-6dac-4e1a-9746-c138ab29e977",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\"key1\" -\u003e 1.0\n    \"key2\" -\u003e 2.0\n    \"key3\" -\u003e 3.0"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\"key1\" -\u003e 1.0\n    \"key2\" -\u003e 2.0\n    \"key3\" -\u003e 3.0",
        "code_language": "Plain Text"
      }
    ],
    "title": "050 Merging combine and composing Maps"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}