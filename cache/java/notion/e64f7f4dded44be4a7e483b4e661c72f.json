{
  "ID": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
  "Root": {
    "alive": true,
    "content": [
      "2288fb92-ce9a-4b23-b3a9-5c793c82ea75",
      "bf0a97e2-ca9a-48f7-8ed0-71995a90216a",
      "20a0a7ee-e5da-42a5-a7c6-956d2a8cf298",
      "44e31819-b3a3-49ac-9f07-0c9f4ca24c9d",
      "c7690264-1b96-4db7-9a34-b052934f8550",
      "4bc69e7b-b159-4705-b580-8694fc80e914",
      "3bd664ad-b7c8-46e5-9f1c-b48a4f8bb99a",
      "b39fa750-d69a-4109-a38f-65d584e6be03",
      "82878f39-24e9-4692-9972-45a9bfa5f0c2",
      "7019b30a-53ee-4b0b-ad25-49826e0da555",
      "a6ae2c9c-4bc5-4527-b0df-0c3b2eaf172a",
      "f37ffb70-1f2f-4548-8401-4ffa464744b9",
      "e5f7fd6e-eece-4737-8a20-52cfc1668aad",
      "f207a35b-30cb-488b-83e9-5a35add37b74",
      "299b09a7-ca03-4d14-afda-0503a59b1296",
      "9f2dad64-d868-4846-aba8-39b76bf49f53",
      "829903e5-085a-4afc-b376-659d0022f24c",
      "7f8d4a4e-be24-413a-a6c1-e82e62c18855"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460527888,
    "id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460527888,
    "parent_id": "596cd51e-237c-46bd-a4df-28e4d338582d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "000 Primitive Data Types"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527878,
        "id": "2288fb92-ce9a-4b23-b3a9-5c793c82ea75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527878,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527881,
        "id": "bf0a97e2-ca9a-48f7-8ed0-71995a90216a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527881,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The 8 primitive data types "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are the types that store most raw numerical data in Java programs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The 8 primitive data types "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " are the types that store most raw numerical data in Java programs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527881,
        "id": "20a0a7ee-e5da-42a5-a7c6-956d2a8cf298",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527881,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527882,
        "id": "44e31819-b3a3-49ac-9f07-0c9f4ca24c9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527882,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int aInt = 8; // The defining (number) part of this int declaration is called a literal."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int aInt = 8; // The defining (number) part of this int declaration is called a literal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527882,
        "id": "c7690264-1b96-4db7-9a34-b052934f8550",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527882,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int hexInt = 0x1a; // = 26; You can define literals with hex values prefixed with "
            ],
            [
              "0x",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int hexInt = 0x1a; // = 26; You can define literals with hex values prefixed with "
          },
          {
            "Text": "0x",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527883,
        "id": "4bc69e7b-b159-4705-b580-8694fc80e914",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527883,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "int binInt = 0b11010; // = 26; You can also define binary literals; prefixed with "
            ],
            [
              "0b",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "int binInt = 0b11010; // = 26; You can also define binary literals; prefixed with "
          },
          {
            "Text": "0b",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527883,
        "id": "3bd664ad-b7c8-46e5-9f1c-b48a4f8bb99a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527883,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "long goodLong = 10000000000L; // By default, integer literals are of type int. By adding the L at the end of the literal you are telling the compiler that the literal is a long. Without this the compiler would throw an “Integer number too large” error."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "long goodLong = 10000000000L; // By default, integer literals are of type int. By adding the L at the end of the literal you are telling the compiler that the literal is a long. Without this the compiler would throw an “Integer number too large” error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527883,
        "id": "b39fa750-d69a-4109-a38f-65d584e6be03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527883,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "double aDouble = 3.14; // Floating-Point Literals are of type double by default."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "double aDouble = 3.14; // Floating-Point Literals are of type double by default."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527883,
        "id": "82878f39-24e9-4692-9972-45a9bfa5f0c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527883,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "float aFloat = 3.14F; // By default this literal would have been a double (and caused an “Incompatible Types” error), but by adding an F we tell the compiler it is a float."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "float aFloat = 3.14F; // By default this literal would have been a double (and caused an “Incompatible Types” error), but by adding an F we tell the compiler it is a float."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527883,
        "id": "7019b30a-53ee-4b0b-ad25-49826e0da555",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527883,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527884,
        "id": "a6ae2c9c-4bc5-4527-b0df-0c3b2eaf172a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527884,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java has 8 "
            ],
            [
              "primitive data types",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", namely "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". (All other types are "
            ],
            [
              "reference",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " types. This includes all array types, and built-in object types / classes that have special significance in the Java language; e.g. "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Throwable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and its subclasses.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java has 8 "
          },
          {
            "Text": "primitive data types",
            "AttrFlags": 4
          },
          {
            "Text": ", namely "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": ". (All other types are "
          },
          {
            "Text": "reference",
            "AttrFlags": 4
          },
          {
            "Text": " types. This includes all array types, and built-in object types / classes that have special significance in the Java language; e.g. "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Class",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Throwable",
            "AttrFlags": 2
          },
          {
            "Text": " and its subclasses.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527885,
        "id": "f37ffb70-1f2f-4548-8401-4ffa464744b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527885,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of all operations (addition, subtraction, multiplication, etc) on a primitive type is at least an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", thus adding a "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " produces an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as does adding a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or a "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If you want to assign the result of that back to a value of the same type, you must cast it. e.g."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of all operations (addition, subtraction, multiplication, etc) on a primitive type is at least an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", thus adding a "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " to a "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " produces an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", as does adding a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": " to a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", or a "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " to a "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ". If you want to assign the result of that back to a value of the same type, you must cast it. e.g."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527885,
        "id": "e5f7fd6e-eece-4737-8a20-52cfc1668aad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527885,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "byte a = 1;\nbyte b = 2;\nbyte c = (byte) (a + b);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "byte a = 1;\nbyte b = 2;\nbyte c = (byte) (a + b);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527885,
        "id": "f207a35b-30cb-488b-83e9-5a35add37b74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527885,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not casting the operation will result in a compile error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not casting the operation will result in a compile error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527887,
        "id": "299b09a7-ca03-4d14-afda-0503a59b1296",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527887,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is due to the following part of the "
            ],
            [
              "Java Language Spec, §2.11.1",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.11.1"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is due to the following part of the "
          },
          {
            "Text": "Java Language Spec, §2.11.1",
            "Link": "http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.11.1"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527887,
        "id": "9f2dad64-d868-4846-aba8-39b76bf49f53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527887,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A compiler encodes loads of literal values of types byte and short using Java Virtual Machine instructions that sign-extend those values to values of type int at compile-time or run-time. Loads of literal values of types boolean and char are encoded using instructions that zero-extend the literal to a value of type int at compile-time or run-time. [..]. Thus, most operations on values of actual types boolean, byte, char, and short are correctly performed by instructions operating on values of computational type int."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "A compiler encodes loads of literal values of types byte and short using Java Virtual Machine instructions that sign-extend those values to values of type int at compile-time or run-time. Loads of literal values of types boolean and char are encoded using instructions that zero-extend the literal to a value of type int at compile-time or run-time. [..]. Thus, most operations on values of actual types boolean, byte, char, and short are correctly performed by instructions operating on values of computational type int."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527887,
        "id": "829903e5-085a-4afc-b376-659d0022f24c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527887,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reason behind this is also specified in that section:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reason behind this is also specified in that section:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460527887,
        "id": "7f8d4a4e-be24-413a-a6c1-e82e62c18855",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460527887,
        "parent_id": "e64f7f4d-ded4-4be4-a7e4-83b4e661c72f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Given the Java Virtual Machine’s one-byte opcode size, encoding types into opcodes places pressure on the design of its instruction set. If each typed instruction supported all of the Java Virtual Machine’s run-time data types, there would be more instructions than could be represented in a byte. […] Separate instructions can be used to convert between unsupported and supported data types as necessary."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Given the Java Virtual Machine’s one-byte opcode size, encoding types into opcodes places pressure on the design of its instruction set. If each typed instruction supported all of the Java Virtual Machine’s run-time data types, there would be more instructions than could be represented in a byte. […] Separate instructions can be used to convert between unsupported and supported data types as necessary."
          }
        ]
      }
    ],
    "title": "000 Primitive Data Types"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}