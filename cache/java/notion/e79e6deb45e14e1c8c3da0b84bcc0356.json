{
  "ID": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
  "Root": {
    "alive": true,
    "content": [
      "b169a0c4-6830-4e85-acbd-980b2880e1e5",
      "f8392a6a-5d5b-4f00-8897-c48e9e990884",
      "090c501a-b5c2-455a-a9aa-b34b8b1c50bd",
      "34100a35-f7ea-4ef4-b1d2-9ea468b9d4ac",
      "9812e530-7f49-4233-8980-a01724a17bd8",
      "bd40b9ec-5539-4eac-a616-7378accf1b26",
      "ea9a173c-834f-4d1e-85ca-0d205a0f7320",
      "b82bd343-fd01-4f4d-b8df-91f20c09d17a",
      "00069cbd-f6d8-4ec5-9830-41afa5ce881c",
      "57d2a7d4-2667-4c2e-9c27-15b0d46b7845",
      "fef58b4f-74f3-4159-8f92-29ead9c4ea48",
      "6177f575-23e7-421f-b837-1f9952808a10",
      "87bba6d7-0e28-43e7-829b-add88eb83afe",
      "d1a8b4f3-adee-4597-81b9-727c69b5bd06",
      "1809e4c3-1f6b-4f22-b45e-0cd87315bbfd",
      "86ba2ef0-2995-4dc9-a45a-94619580f98e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460150030,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551756069681,
    "parent_id": "b352327f-4045-48dc-891e-ceda03965ca0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Java Closures with lambda expressions."
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150026,
        "id": "b169a0c4-6830-4e85-acbd-980b2880e1e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150026,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A lambda closure is created when a lambda expression references the variables of an enclosing scope (global or local). The rules for doing this are the same as those for inline methods and anonymous classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A lambda closure is created when a lambda expression references the variables of an enclosing scope (global or local). The rules for doing this are the same as those for inline methods and anonymous classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150028,
        "id": "f8392a6a-5d5b-4f00-8897-c48e9e990884",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150028,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Local variables",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " from an enclosing scope that are used within a lambda have to be "
            ],
            [
              "final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". With Java 8 (the earliest version that supports lambdas), they don’t need to be "
            ],
            [
              "declared",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the outside context, but must be treated that way. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Local variables",
            "AttrFlags": 4
          },
          {
            "Text": " from an enclosing scope that are used within a lambda have to be "
          },
          {
            "Text": "final",
            "AttrFlags": 2
          },
          {
            "Text": ". With Java 8 (the earliest version that supports lambdas), they don’t need to be "
          },
          {
            "Text": "declared",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "final",
            "AttrFlags": 2
          },
          {
            "Text": " in the outside context, but must be treated that way. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150028,
        "id": "090c501a-b5c2-455a-a9aa-b34b8b1c50bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150028,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int n = 0; // With Java 8 there is no need to explicit final\nRunnable r = () -\u003e { // Using lambda\n    int i = n;\n    // do something\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int n = 0; // With Java 8 there is no need to explicit final\nRunnable r = () -\u003e { // Using lambda\n    int i = n;\n    // do something\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "34100a35-f7ea-4ef4-b1d2-9ea468b9d4ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is legal as long as the value of the "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable is not changed. If you try to change the variable, inside or outside the lambda, you will get the following compilation error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is legal as long as the value of the "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " variable is not changed. If you try to change the variable, inside or outside the lambda, you will get the following compilation error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "9812e530-7f49-4233-8980-a01724a17bd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“local variables referenced from a lambda expression must be final or effectively final”."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "“local variables referenced from a lambda expression must be final or effectively final”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "bd40b9ec-5539-4eac-a616-7378accf1b26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "ea9a173c-834f-4d1e-85ca-0d205a0f7320",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int n = 0;\nRunnable r = () -\u003e { // Using lambda\n    int i = n;\n    // do something\n};\nn++; // Will generate an error."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int n = 0;\nRunnable r = () -\u003e { // Using lambda\n    int i = n;\n    // do something\n};\nn++; // Will generate an error.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "b82bd343-fd01-4f4d-b8df-91f20c09d17a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If it is necessary to use a changing variable within a lambda, the normal approach is to declare a "
            ],
            [
              "final",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " copy of the variable and use the copy. For example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If it is necessary to use a changing variable within a lambda, the normal approach is to declare a "
          },
          {
            "Text": "final",
            "AttrFlags": 2
          },
          {
            "Text": " copy of the variable and use the copy. For example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "00069cbd-f6d8-4ec5-9830-41afa5ce881c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int n = 0;\nfinal int k = n; // With Java 8 there is no need to explicit final\nRunnable r = () -\u003e { // Using lambda\n    int i = k;\n    // do something\n};\nn++;      // Now will not generate an error\nr.run();  // Will run with i = 0 because k was 0 when the lambda was created"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int n = 0;\nfinal int k = n; // With Java 8 there is no need to explicit final\nRunnable r = () -\u003e { // Using lambda\n    int i = k;\n    // do something\n};\nn++;      // Now will not generate an error\nr.run();  // Will run with i = 0 because k was 0 when the lambda was created",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150029,
        "id": "57d2a7d4-2667-4c2e-9c27-15b0d46b7845",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150029,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Naturally, the body of the lambda does not see the changes to the original variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Naturally, the body of the lambda does not see the changes to the original variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150030,
        "id": "fef58b4f-74f3-4159-8f92-29ead9c4ea48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150030,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that Java does not support true closures. A Java lambda cannot be created in a way that allows it to see changes in the environment in which it was instantiated. If you want to implement a closure that observes or makes changes to its environment, you should simulate it using a regular class. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that Java does not support true closures. A Java lambda cannot be created in a way that allows it to see changes in the environment in which it was instantiated. If you want to implement a closure that observes or makes changes to its environment, you should simulate it using a regular class. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150030,
        "id": "6177f575-23e7-421f-b837-1f9952808a10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150030,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Does not compile ...\npublic IntUnaryOperator createAccumulator() {\n    int value = 0;\n    IntUnaryOperator accumulate = (x) -\u003e { value += x; return value; };\n    return accumulate;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Does not compile ...\npublic IntUnaryOperator createAccumulator() {\n    int value = 0;\n    IntUnaryOperator accumulate = (x) -\u003e { value += x; return value; };\n    return accumulate;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150030,
        "id": "87bba6d7-0e28-43e7-829b-add88eb83afe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150030,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above example will not compile for reasons discussed previously. We can work around the compilation error as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above example will not compile for reasons discussed previously. We can work around the compilation error as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150030,
        "id": "d1a8b4f3-adee-4597-81b9-727c69b5bd06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150030,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Compiles, but is incorrect ...\npublic class AccumulatorGenerator {\n    private int value = 0;\n\n    public IntUnaryOperator createAccumulator() {\n        IntUnaryOperator accumulate = (x) -\u003e { value += x; return value; };\n        return accumulate;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Compiles, but is incorrect ...\npublic class AccumulatorGenerator {\n    private int value = 0;\n\n    public IntUnaryOperator createAccumulator() {\n        IntUnaryOperator accumulate = (x) -\u003e { value += x; return value; };\n        return accumulate;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150030,
        "id": "1809e4c3-1f6b-4f22-b45e-0cd87315bbfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150030,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem is that this breaks the design contract for the "
            ],
            [
              "IntUnaryOperator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface which states that instances should be functional and stateless. If such a closure is passed to built-in functions that accept functional objects, it is liable to cause crashes or erroneous behavior. Closures that encapsulate mutable state should be implemented as regular classes. For example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem is that this breaks the design contract for the "
          },
          {
            "Text": "IntUnaryOperator",
            "AttrFlags": 2
          },
          {
            "Text": " interface which states that instances should be functional and stateless. If such a closure is passed to built-in functions that accept functional objects, it is liable to cause crashes or erroneous behavior. Closures that encapsulate mutable state should be implemented as regular classes. For example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150030,
        "id": "86ba2ef0-2995-4dc9-a45a-94619580f98e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150030,
        "parent_id": "e79e6deb-45e1-4e1c-8c3d-a0b84bcc0356",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Correct ...\npublic class Accumulator {\n   private int value = 0;\n\n   public int accumulate(int x) {\n      value += x;\n      return value;\n   }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Correct ...\npublic class Accumulator {\n   private int value = 0;\n\n   public int accumulate(int x) {\n      value += x;\n      return value;\n   }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Java Closures with lambda expressions.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}