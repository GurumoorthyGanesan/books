{
  "ID": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
  "Root": {
    "alive": true,
    "content": [
      "4323aea7-8f8a-4082-9170-25177d0a33d0",
      "8ed9a1a3-e7f7-4669-add9-7023aa83c2cd",
      "4f41f6d2-5787-45ca-aef9-5669477dbf56",
      "d055ee1f-f556-450d-b2b7-bb64267bc880",
      "a2d11e48-b2cd-470d-a6dc-28c9c0c42385",
      "faf8ce42-54bc-4fae-a150-d935660bc851",
      "0b509e5d-a95f-48b2-968f-5daf1e06895c",
      "e405df6d-5bbc-4a59-9d95-a2b42d83aba3",
      "237c75ed-110e-446b-aeac-7f5f2e4d9ff5",
      "e7539c3c-575d-45e3-8e3c-b4df6c272e30"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461116278,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551763096562,
    "parent_id": "2e3af3b7-fb1a-45ea-9c61-94dcd8ba030d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Custom Serialization"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116274,
        "id": "4323aea7-8f8a-4082-9170-25177d0a33d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116274,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example we want to create a class that will generate and output to console, a random number between a range of two integers which are passed as arguments during the initialization."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example we want to create a class that will generate and output to console, a random number between a range of two integers which are passed as arguments during the initialization."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116276,
        "id": "8ed9a1a3-e7f7-4669-add9-7023aa83c2cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116276,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class SimpleRangeRandom implements Runnable {\nprivate int min;\nprivate int max;\n\nprivate Thread thread;\n\npublic SimpleRangeRandom(int min, int max){\n    this.min = min;\n    this.max = max;\n    thread = new Thread(this);\n    thread.start();\n}\n\n@Override\nprivate void WriteObject(ObjectOutputStreamout) throws IO Exception;\nprivate void ReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException;\npublic void run() {\n    while(true) {\n        Random rand = new Random();\n        System.out.println(\"Thread: \" + thread.getId() + \" Random:\" + rand.nextInt(max - min));\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class SimpleRangeRandom implements Runnable {\nprivate int min;\nprivate int max;\n\nprivate Thread thread;\n\npublic SimpleRangeRandom(int min, int max){\n    this.min = min;\n    this.max = max;\n    thread = new Thread(this);\n    thread.start();\n}\n\n@Override\nprivate void WriteObject(ObjectOutputStreamout) throws IO Exception;\nprivate void ReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException;\npublic void run() {\n    while(true) {\n        Random rand = new Random();\n        System.out.println(\"Thread: \" + thread.getId() + \" Random:\" + rand.nextInt(max - min));\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "4f41f6d2-5787-45ca-aef9-5669477dbf56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now if we want to make this class Serializable there will be some problems. The Thread is one of the certain system-level classes that are not Serializable. So we need to declare the thread as "
            ],
            [
              "transient",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". By doing this we will be able to serialize the objects of this class but we will still have an issue. As you can see in the constructor we set the min and the max values of our randomizer and after this we start the thread which is responsible for generating and printing the random value. Thus when restoring the persisted object by calling the "
            ],
            [
              "readObject()",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " the constructor will not run again as there is no creation of a new object. In that case we need to develop a "
            ],
            [
              "Custom Serialization",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " by providing two methods inside the class. Those methods are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now if we want to make this class Serializable there will be some problems. The Thread is one of the certain system-level classes that are not Serializable. So we need to declare the thread as "
          },
          {
            "Text": "transient",
            "AttrFlags": 1
          },
          {
            "Text": ". By doing this we will be able to serialize the objects of this class but we will still have an issue. As you can see in the constructor we set the min and the max values of our randomizer and after this we start the thread which is responsible for generating and printing the random value. Thus when restoring the persisted object by calling the "
          },
          {
            "Text": "readObject()",
            "AttrFlags": 5
          },
          {
            "Text": " the constructor will not run again as there is no creation of a new object. In that case we need to develop a "
          },
          {
            "Text": "Custom Serialization",
            "AttrFlags": 1
          },
          {
            "Text": " by providing two methods inside the class. Those methods are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "d055ee1f-f556-450d-b2b7-bb64267bc880",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private void writeObject(ObjectOutputStream out) throws IOException;\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private void writeObject(ObjectOutputStream out) throws IOException;\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "a2d11e48-b2cd-470d-a6dc-28c9c0c42385",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus by adding our implementation in the "
            ],
            [
              "readObject()",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " we can initiate and start our thread:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus by adding our implementation in the "
          },
          {
            "Text": "readObject()",
            "AttrFlags": 5
          },
          {
            "Text": " we can initiate and start our thread:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "faf8ce42-54bc-4fae-a150-d935660bc851",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class RangeRandom implements Serializable, Runnable {\n\nprivate int min;\nprivate int max;\n\nprivate transient Thread thread;\n//transient should be any field that either cannot be serialized e.g Thread or any field you do not want serialized\n\npublic RangeRandom(int min, int max){\n    this.min = min;\n    this.max = max;\n    thread = new Thread(this);\n    thread.start();\n}\n\n@Override\npublic void run() {\n    while(true) {\n        Random rand = new Random();\n        System.out.println(\"Thread: \" + thread.getId() + \" Random:\" + rand.nextInt(max - min));\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nprivate void writeObject(ObjectOutputStream oos) throws IOException {\n    oos.defaultWriteObject();\n}\n\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    in.defaultReadObject();\n    thread = new Thread(this);\n    thread.start();\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class RangeRandom implements Serializable, Runnable {\n\nprivate int min;\nprivate int max;\n\nprivate transient Thread thread;\n//transient should be any field that either cannot be serialized e.g Thread or any field you do not want serialized\n\npublic RangeRandom(int min, int max){\n    this.min = min;\n    this.max = max;\n    thread = new Thread(this);\n    thread.start();\n}\n\n@Override\npublic void run() {\n    while(true) {\n        Random rand = new Random();\n        System.out.println(\"Thread: \" + thread.getId() + \" Random:\" + rand.nextInt(max - min));\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nprivate void writeObject(ObjectOutputStream oos) throws IOException {\n    oos.defaultWriteObject();\n}\n\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n    in.defaultReadObject();\n    thread = new Thread(this);\n    thread.start();\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "0b509e5d-a95f-48b2-968f-5daf1e06895c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is the main for our example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is the main for our example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "e405df6d-5bbc-4a59-9d95-a2b42d83aba3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Main {\npublic static void main(String[] args) {\n    System.out.println(\"Hello\");\n    RangeRandom rangeRandom = new RangeRandom(1,10);\n\n    FileOutputStream fos = null;\n    ObjectOutputStream out = null;\n    try\n    {\n        fos = new FileOutputStream(\"test\");\n        out = new ObjectOutputStream(fos);\n        out.writeObject(rangeRandom);\n        out.close();\n    }\n    catch(IOException ex)\n    {\n        ex.printStackTrace();\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Main {\npublic static void main(String[] args) {\n    System.out.println(\"Hello\");\n    RangeRandom rangeRandom = new RangeRandom(1,10);\n\n    FileOutputStream fos = null;\n    ObjectOutputStream out = null;\n    try\n    {\n        fos = new FileOutputStream(\"test\");\n        out = new ObjectOutputStream(fos);\n        out.writeObject(rangeRandom);\n        out.close();\n    }\n    catch(IOException ex)\n    {\n        ex.printStackTrace();\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116277,
        "id": "237c75ed-110e-446b-aeac-7f5f2e4d9ff5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116277,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "RangeRandom rangeRandom2 = null;\n   FileInputStream fis = null;\n   ObjectInputStream in = null;\n   try\n   {\n         fis = new FileInputStream(\"test\");\n         in = new ObjectInputStream(fis);\n       rangeRandom2 = (RangeRandom)in.readObject();\n         in.close();\n       }\n   catch(IOException ex)\n   {\n         ex.printStackTrace();\n       }\n   catch(ClassNotFoundException ex)\n   {\n         ex.printStackTrace();\n       }\n\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "RangeRandom rangeRandom2 = null;\n   FileInputStream fis = null;\n   ObjectInputStream in = null;\n   try\n   {\n         fis = new FileInputStream(\"test\");\n         in = new ObjectInputStream(fis);\n       rangeRandom2 = (RangeRandom)in.readObject();\n         in.close();\n       }\n   catch(IOException ex)\n   {\n         ex.printStackTrace();\n       }\n   catch(ClassNotFoundException ex)\n   {\n         ex.printStackTrace();\n       }\n\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461116278,
        "id": "e7539c3c-575d-45e3-8e3c-b4df6c272e30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461116278,
        "parent_id": "f3cf52c5-e60c-4674-9b87-ba0933d44ccf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you run the main you will see that there are two threads running for each RangeRandom instance and that is because the "
            ],
            [
              "Thread.start()",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " method is now in both the constructor and the "
            ],
            [
              "readObject()",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you run the main you will see that there are two threads running for each RangeRandom instance and that is because the "
          },
          {
            "Text": "Thread.start()",
            "AttrFlags": 5
          },
          {
            "Text": " method is now in both the constructor and the "
          },
          {
            "Text": "readObject()",
            "AttrFlags": 5
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Custom Serialization",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}