{
  "ID": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
  "Root": {
    "alive": true,
    "content": [
      "be02e6e6-0cc9-46cd-9478-3d88e68803da",
      "0f82d318-4b0b-4018-b8e7-c3a997f395f1",
      "0b31b16e-7410-48bd-a2b5-8848f33eb0e7",
      "4823a73f-4d16-49da-ba85-d26aa0df5bd3",
      "9aea7945-30c7-47f3-ba26-583269dca766",
      "4750e29f-dfdf-4cd0-b1ce-2a450300edc4",
      "a2475661-01e3-4c4b-9b19-d3607c1123f7",
      "b1637839-80c1-4ff3-87d9-ce5dcd125139",
      "1804235a-e31d-4110-9372-aaab60378e7b",
      "6ece841f-2658-45ec-a57b-4922ae0ce580",
      "9087e687-278c-4bfe-99d6-c3b5cbb0cc4d",
      "07a8b33c-c4f2-4874-bcaa-c166ba87171a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461145091,
    "id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461145091,
    "parent_id": "6f2fa7ab-2d05-4439-ac96-63b175867e14",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 The basic idea of recursion"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145086,
        "id": "be02e6e6-0cc9-46cd-9478-3d88e68803da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145086,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What is recursion:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What is recursion:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145089,
        "id": "0f82d318-4b0b-4018-b8e7-c3a997f395f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145089,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general, recursion is when a function invokes itself, either directly or indirectly. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general, recursion is when a function invokes itself, either directly or indirectly. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145089,
        "id": "0b31b16e-7410-48bd-a2b5-8848f33eb0e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145089,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// This method calls itself \"infinitely\"\npublic void useless() {\n    useless();  // method calls itself (directly)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// This method calls itself \"infinitely\"\npublic void useless() {\n    useless();  // method calls itself (directly)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145089,
        "id": "4823a73f-4d16-49da-ba85-d26aa0df5bd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145089,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conditions for applying recursion to a problem:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conditions for applying recursion to a problem:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145089,
        "id": "9aea7945-30c7-47f3-ba26-583269dca766",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145089,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two preconditions for using recursive functions to solving a specific problem:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two preconditions for using recursive functions to solving a specific problem:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145090,
        "id": "4750e29f-dfdf-4cd0-b1ce-2a450300edc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145090,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There must be a base condition for the problem, which will be the endpoint for the recursion. When a recursive function reaches the base condition, it makes no further (deeper) recursive calls."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There must be a base condition for the problem, which will be the endpoint for the recursion. When a recursive function reaches the base condition, it makes no further (deeper) recursive calls."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145090,
        "id": "a2475661-01e3-4c4b-9b19-d3607c1123f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145090,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each level of recursion should be attempting a smaller problem. The recursive function thus divides the problem into smaller and smaller parts. Assuming that the problem is finite, this will ensure that the recursion terminates."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each level of recursion should be attempting a smaller problem. The recursive function thus divides the problem into smaller and smaller parts. Assuming that the problem is finite, this will ensure that the recursion terminates."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145090,
        "id": "b1637839-80c1-4ff3-87d9-ce5dcd125139",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145090,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java there is a third precondition: it should not be necessary to recurse too deeply to solve the problem; see http://stackoverflow.com/documentation/java/914/recursion/15048/deep-recursion-is-problematic-in-java"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java there is a third precondition: it should not be necessary to recurse too deeply to solve the problem; see http://stackoverflow.com/documentation/java/914/recursion/15048/deep-recursion-is-problematic-in-java"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145090,
        "id": "1804235a-e31d-4110-9372-aaab60378e7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145090,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145091,
        "id": "6ece841f-2658-45ec-a57b-4922ae0ce580",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145091,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following function calculates factorials using recursion. Notice how the method "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calls itself within the function. Each time it calls itself, it reduces the parameter "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by 1. When "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reaches 1 (the base condition) the function will recurse no deeper."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following function calculates factorials using recursion. Notice how the method "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": " calls itself within the function. Each time it calls itself, it reduces the parameter "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " by 1. When "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " reaches 1 (the base condition) the function will recurse no deeper."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145091,
        "id": "9087e687-278c-4bfe-99d6-c3b5cbb0cc4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145091,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public int factorial(int n) {\n    if (n \u003c= 1) { // the base condition \n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public int factorial(int n) {\n    if (n \u003c= 1) { // the base condition \n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461145091,
        "id": "07a8b33c-c4f2-4874-bcaa-c166ba87171a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461145091,
        "parent_id": "7e2516df-ba4f-409f-959d-e5bdcee78bcb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is not a practical way of computing factorials in Java, since it does not take account of integer overflow, or call stack overflow (i.e. "
            ],
            [
              "StackOverflowError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exceptions) for large values of "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is not a practical way of computing factorials in Java, since it does not take account of integer overflow, or call stack overflow (i.e. "
          },
          {
            "Text": "StackOverflowError",
            "AttrFlags": 2
          },
          {
            "Text": " exceptions) for large values of "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "010 The basic idea of recursion"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}