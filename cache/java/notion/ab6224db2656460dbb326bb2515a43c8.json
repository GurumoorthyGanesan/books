{
  "ID": "ab6224db-2656-460d-bb32-6bb2515a43c8",
  "Root": {
    "alive": true,
    "content": [
      "8363cc93-08f9-491b-953f-d84545121740",
      "88f469b1-c792-4bac-a0bc-4900ffeab4b3",
      "254ae21c-db36-4950-a2e3-32dfc4b839ec",
      "0edbd68b-b62f-4fa8-8b1d-c8f22414901b",
      "83adccb7-edd1-41b3-b736-7aa5b9e844c0",
      "3134348e-adf5-4d3d-8868-e7947a5e1e6f",
      "e8945c49-1046-4c0a-a3cd-c801a4dd74e2",
      "6d98fb47-11dd-4f02-9cfe-c2c21e6977ab",
      "5d67311f-235a-48be-a020-b5da398f33c5",
      "dba104a9-2ceb-497f-82f1-033539bd40fd",
      "c10dc898-e067-4f37-a02d-aec66ecfa658",
      "cc0c6393-a69a-45e9-956e-ed7b1e1b9eca"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461158284,
    "id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461158284,
    "parent_id": "c1a139ac-088d-487a-93c4-a161e63d7a0f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Virtual functions"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158280,
        "id": "8363cc93-08f9-491b-953f-d84545121740",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158280,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Virtual Methods are methods in Java that are non-static and without the keyword Final in front. All methods by default are virtual in Java. Virtual Methods play important roles in Polymorphism because children classes in Java can override their parent classes’ methods if the function being overriden is non-static and has the same method signature."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Virtual Methods are methods in Java that are non-static and without the keyword Final in front. All methods by default are virtual in Java. Virtual Methods play important roles in Polymorphism because children classes in Java can override their parent classes’ methods if the function being overriden is non-static and has the same method signature."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158282,
        "id": "88f469b1-c792-4bac-a0bc-4900ffeab4b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158282,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are, however, some methods that are not virtual. For example, if the method is declared private or with the keyword final, then the method is not Virtual."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are, however, some methods that are not virtual. For example, if the method is declared private or with the keyword final, then the method is not Virtual."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "254ae21c-db36-4950-a2e3-32dfc4b839ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following modified example of inheritance with Virtual Methods from this StackOverflow post http://stackoverflow.com/questions/460446/how-do-virtual-functions-work-in-c-sharp-and-java) :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following modified example of inheritance with Virtual Methods from this StackOverflow post http://stackoverflow.com/questions/460446/how-do-virtual-functions-work-in-c-sharp-and-java) :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "0edbd68b-b62f-4fa8-8b1d-c8f22414901b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class A{\n    public void hello(){\n        System.out.println(\"Hello\");\n    }\n    \n    public void boo(){\n        System.out.println(\"Say boo\");\n\n    }\n}\n\npublic class B extends A{\n     public void hello(){\n        System.out.println(\"No\");\n     }\n    \n    public void boo(){\n        System.out.println(\"Say haha\");\n\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class A{\n    public void hello(){\n        System.out.println(\"Hello\");\n    }\n    \n    public void boo(){\n        System.out.println(\"Say boo\");\n\n    }\n}\n\npublic class B extends A{\n     public void hello(){\n        System.out.println(\"No\");\n     }\n    \n    public void boo(){\n        System.out.println(\"Say haha\");\n\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "83adccb7-edd1-41b3-b736-7aa5b9e844c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we invoke class B and call hello() and boo(), we would get “No” and “Say haha” as the resulting output because B overrides the same methods from A. Even though the example above is almost exactly the same as method overriding, it is important to understand that the methods in class A are all, by default, Virtual."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we invoke class B and call hello() and boo(), we would get “No” and “Say haha” as the resulting output because B overrides the same methods from A. Even though the example above is almost exactly the same as method overriding, it is important to understand that the methods in class A are all, by default, Virtual."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "3134348e-adf5-4d3d-8868-e7947a5e1e6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, we can implement Virtual methods using the abstract keyword. Methods declared with the keyword “abstract” does not have a method definition, meaning the method’s body is not yet implemented. Consider the example from above again, except the boo() method is declared abstract:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, we can implement Virtual methods using the abstract keyword. Methods declared with the keyword “abstract” does not have a method definition, meaning the method’s body is not yet implemented. Consider the example from above again, except the boo() method is declared abstract:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "e8945c49-1046-4c0a-a3cd-c801a4dd74e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class A{\n   public void hello(){\n        System.out.println(\"Hello\");\n    }\n    \n    abstract void boo();\n}\n\npublic class B extends A{\n     public void hello(){\n        System.out.println(\"No\");\n     }\n    \n    public void boo(){\n        System.out.println(\"Say haha\");\n\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class A{\n   public void hello(){\n        System.out.println(\"Hello\");\n    }\n    \n    abstract void boo();\n}\n\npublic class B extends A{\n     public void hello(){\n        System.out.println(\"No\");\n     }\n    \n    public void boo(){\n        System.out.println(\"Say haha\");\n\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "6d98fb47-11dd-4f02-9cfe-c2c21e6977ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we invoke boo() from B, the output will still be “Say haha” since B inherits the abstract method boo() and makes boo () output “Say haha”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we invoke boo() from B, the output will still be “Say haha” since B inherits the abstract method boo() and makes boo () output “Say haha”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158283,
        "id": "5d67311f-235a-48be-a020-b5da398f33c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158283,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sources used and further readings:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sources used and further readings:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158284,
        "id": "dba104a9-2ceb-497f-82f1-033539bd40fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158284,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/questions/460446/how-do-virtual-functions-work-in-c-sharp-and-java"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/questions/460446/how-do-virtual-functions-work-in-c-sharp-and-java"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158284,
        "id": "c10dc898-e067-4f37-a02d-aec66ecfa658",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158284,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Check out this great answer that gives a much more complete information about Virtual functions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Check out this great answer that gives a much more complete information about Virtual functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461158284,
        "id": "cc0c6393-a69a-45e9-956e-ed7b1e1b9eca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461158284,
        "parent_id": "ab6224db-2656-460d-bb32-6bb2515a43c8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/questions/4547453/can-you-write-virtual-functions-methods-in-java"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/questions/4547453/can-you-write-virtual-functions-methods-in-java"
          }
        ]
      }
    ],
    "title": "050 Virtual functions"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}