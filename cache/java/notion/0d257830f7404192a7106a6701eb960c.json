{
  "ID": "0d257830-f740-4192-a710-6a6701eb960c",
  "Root": {
    "alive": true,
    "content": [
      "8245a635-3565-4274-8347-b335ef3406b2",
      "c76cfff6-339d-448c-bde5-b652356cee3c",
      "073c061f-d355-47fb-a1af-0e6a1d329b5b",
      "2d1ca193-8e57-4ef9-a8ff-d0ebe06fa496",
      "3682b4ce-7ad8-4474-a425-70a470e21cbf",
      "9828ef22-63cf-4c7b-97ad-7af92cc5cfe9",
      "988d0a44-d4fa-4ae5-968e-9520420cb5cd",
      "6a886f4a-bcbd-4139-afd1-cd5e1c891d9b",
      "ee1130c4-7a0c-417c-94ec-f0f32347ce5c",
      "17e79251-dfdc-4ad5-bcd5-5428260664da",
      "6ba5c4c8-b9c2-4fdc-860f-34df9215d6b4",
      "29baf921-e7d6-4dd2-92b5-dfa53498219e",
      "ed9e783f-cf91-4a79-9aa7-3a23592e0e82",
      "c73673cc-e5c2-41c4-8223-12560e6c6004",
      "053ea56d-e156-47fd-a6b2-2bcfdce04e81"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460115080,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0d257830-f740-4192-a710-6a6701eb960c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551749698376,
    "parent_id": "3e5f6441-fbb7-4864-8927-1c1c812bd8c7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reduction with Streams"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115063,
        "id": "8245a635-3565-4274-8347-b335ef3406b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115063,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reduction is the process of applying a binary operator to every element of a stream to result in one value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reduction is the process of applying a binary operator to every element of a stream to result in one value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115066,
        "id": "c76cfff6-339d-448c-bde5-b652356cee3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115066,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "sum()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method of an "
            ],
            [
              "IntStream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an example of a reduction; it applies addition to every term of the Stream, resulting in one final value:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "sum()",
            "AttrFlags": 2
          },
          {
            "Text": " method of an "
          },
          {
            "Text": "IntStream",
            "AttrFlags": 2
          },
          {
            "Text": " is an example of a reduction; it applies addition to every term of the Stream, resulting in one final value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115066,
        "id": "073c061f-d355-47fb-a1af-0e6a1d329b5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115066,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/2Krwx.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/2Krwx.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2F2Krwx.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115066,
        "id": "2d1ca193-8e57-4ef9-a8ff-d0ebe06fa496",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115066,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is equivalent to "
            ],
            [
              "(((1+2)+3)+4)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is equivalent to "
          },
          {
            "Text": "(((1+2)+3)+4)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115066,
        "id": "3682b4ce-7ad8-4474-a425-70a470e21cbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115066,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "reduce",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method of a Stream allows one to create a custom reduction. It is possible to use the "
            ],
            [
              "reduce",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to implement the "
            ],
            [
              "sum()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "reduce",
            "AttrFlags": 2
          },
          {
            "Text": " method of a Stream allows one to create a custom reduction. It is possible to use the "
          },
          {
            "Text": "reduce",
            "AttrFlags": 2
          },
          {
            "Text": " method to implement the "
          },
          {
            "Text": "sum()",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115078,
        "id": "9828ef22-63cf-4c7b-97ad-7af92cc5cfe9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115078,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IntStream istr;\n    \n//Initialize istr\n    \nOptionalInt istr.reduce((a,b)-\u003ea+b);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IntStream istr;\n    \n//Initialize istr\n    \nOptionalInt istr.reduce((a,b)-\u003ea+b);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115079,
        "id": "988d0a44-d4fa-4ae5-968e-9520420cb5cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115079,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version is returned so that empty Streams can be handled appropriately."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Optional",
            "AttrFlags": 2
          },
          {
            "Text": " version is returned so that empty Streams can be handled appropriately."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115079,
        "id": "6a886f4a-bcbd-4139-afd1-cd5e1c891d9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115079,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another example of reduction is combining a "
            ],
            [
              "Stream\u003cLinkedList\u003cT\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a single "
            ],
            [
              "LinkedList\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another example of reduction is combining a "
          },
          {
            "Text": "Stream\u003cLinkedList\u003cT\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " into a single "
          },
          {
            "Text": "LinkedList\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115079,
        "id": "ee1130c4-7a0c-417c-94ec-f0f32347ce5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115079,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Stream\u003cLinkedList\u003cT\u003e\u003e listStream;\n    \n//Create a Stream\u003cLinkedList\u003cT\u003e\u003e\n    \nOptional\u003cLinkedList\u003cT\u003e\u003e bigList = listStream.reduce((LinkedList\u003cT\u003e list1, LinkedList\u003cT\u003e list2)-\u003e{\n    LinkedList\u003cT\u003e retList = new LinkedList\u003cT\u003e();\n    retList.addAll(list1);\n    retList.addAll(list2);\n    return retList;\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Stream\u003cLinkedList\u003cT\u003e\u003e listStream;\n    \n//Create a Stream\u003cLinkedList\u003cT\u003e\u003e\n    \nOptional\u003cLinkedList\u003cT\u003e\u003e bigList = listStream.reduce((LinkedList\u003cT\u003e list1, LinkedList\u003cT\u003e list2)-\u003e{\n    LinkedList\u003cT\u003e retList = new LinkedList\u003cT\u003e();\n    retList.addAll(list1);\n    retList.addAll(list2);\n    return retList;\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115079,
        "id": "17e79251-dfdc-4ad5-bcd5-5428260664da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115079,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also provide an "
            ],
            [
              "identity element",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". For example, the identity element for addition is 0, as "
            ],
            [
              "x+0==x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For multiplication, the identity element is 1, as "
            ],
            [
              "x*1==x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In the case above, the identity element is an empty "
            ],
            [
              "LinkedList\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because if you add an empty list to another list, the list that you are “adding” to doesn’t change:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also provide an "
          },
          {
            "Text": "identity element",
            "AttrFlags": 4
          },
          {
            "Text": ". For example, the identity element for addition is 0, as "
          },
          {
            "Text": "x+0==x",
            "AttrFlags": 2
          },
          {
            "Text": ". For multiplication, the identity element is 1, as "
          },
          {
            "Text": "x*1==x",
            "AttrFlags": 2
          },
          {
            "Text": ". In the case above, the identity element is an empty "
          },
          {
            "Text": "LinkedList\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", because if you add an empty list to another list, the list that you are “adding” to doesn’t change:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115079,
        "id": "6ba5c4c8-b9c2-4fdc-860f-34df9215d6b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115079,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Stream\u003cLinkedList\u003cT\u003e\u003e listStream;\n\n//Create a Stream\u003cLinkedList\u003cT\u003e\u003e\n\nLinkedList\u003cT\u003e bigList = listStream.reduce(new LinkedList\u003cT\u003e(), (LinkedList\u003cT\u003e list1, LinkedList\u003cT\u003e list2)-\u003e{\n    LinkedList\u003cT\u003e retList = new LinkedList\u003cT\u003e();\n    retList.addAll(list1);\n    retList.addAll(list2);\n    return retList;\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Stream\u003cLinkedList\u003cT\u003e\u003e listStream;\n\n//Create a Stream\u003cLinkedList\u003cT\u003e\u003e\n\nLinkedList\u003cT\u003e bigList = listStream.reduce(new LinkedList\u003cT\u003e(), (LinkedList\u003cT\u003e list1, LinkedList\u003cT\u003e list2)-\u003e{\n    LinkedList\u003cT\u003e retList = new LinkedList\u003cT\u003e();\n    retList.addAll(list1);\n    retList.addAll(list2);\n    return retList;\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115080,
        "id": "29baf921-e7d6-4dd2-92b5-dfa53498219e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115080,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that when an identity element is provided, the return value is not wrapped in an "
            ],
            [
              "Optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "—if called on an empty stream, "
            ],
            [
              "reduce()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return the identity element."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that when an identity element is provided, the return value is not wrapped in an "
          },
          {
            "Text": "Optional",
            "AttrFlags": 2
          },
          {
            "Text": "—if called on an empty stream, "
          },
          {
            "Text": "reduce()",
            "AttrFlags": 2
          },
          {
            "Text": " will return the identity element."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115080,
        "id": "ed9e783f-cf91-4a79-9aa7-3a23592e0e82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115080,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The binary operator must also be "
            ],
            [
              "associative",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", meaning that "
            ],
            [
              "(a+b)+c==a+(b+c)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is because the elements may be reduced in any order. For example, the above addition reduction could be performed like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The binary operator must also be "
          },
          {
            "Text": "associative",
            "AttrFlags": 4
          },
          {
            "Text": ", meaning that "
          },
          {
            "Text": "(a+b)+c==a+(b+c)",
            "AttrFlags": 2
          },
          {
            "Text": ". This is because the elements may be reduced in any order. For example, the above addition reduction could be performed like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115080,
        "id": "c73673cc-e5c2-41c4-8223-12560e6c6004",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115080,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/sCqVF.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/sCqVF.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2FsCqVF.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460115080,
        "id": "053ea56d-e156-47fd-a6b2-2bcfdce04e81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460115080,
        "parent_id": "0d257830-f740-4192-a710-6a6701eb960c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This reduction is equivalent to writing "
            ],
            [
              "((1+2)+(3+4))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The property of associativity also allows Java to reduce the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in parallel—a portion of the Stream can be reduced by each processor, with a reduction combining the result of each processor at the end."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This reduction is equivalent to writing "
          },
          {
            "Text": "((1+2)+(3+4))",
            "AttrFlags": 2
          },
          {
            "Text": ". The property of associativity also allows Java to reduce the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " in parallel—a portion of the Stream can be reduced by each processor, with a reduction combining the result of each processor at the end."
          }
        ]
      }
    ],
    "title": "Reduction with Streams",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}