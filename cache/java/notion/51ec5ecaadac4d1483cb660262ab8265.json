{
  "ID": "51ec5eca-adac-4d14-83cb-660262ab8265",
  "Root": {
    "alive": true,
    "content": [
      "393b1bac-0d04-4218-9455-62782d57b9bc",
      "a24de202-e09f-4ae7-a817-8410f7104954",
      "5a444762-1407-4168-9736-6924a864eb10",
      "e23c8bad-cedb-42cc-ad93-ddfd5132759a",
      "271dea1c-06c8-419f-83cf-f06a8b2147d8",
      "1071e1cf-f21b-4c3a-a0a8-95735636c0be",
      "ed289d6b-1f24-4aad-8e1f-40e686db349e",
      "5ab011c4-af0f-4496-a910-8b0252d07a84",
      "830f4008-7198-4e83-8643-a690ef10bd2a",
      "ba243ca6-7a64-4232-9e3c-93691d423e83",
      "4bdd1332-75b8-44a4-95f1-443fff89bbd4",
      "f38a70a1-6b59-4abb-a381-918140e5183d",
      "e1b4e5ee-ec16-44f0-8504-cfa659b72fca",
      "208eae1e-508f-41ac-9a98-1b0834201996",
      "3f28f7d6-2afe-4de2-b29c-448f278994c6",
      "2f6501a0-2d79-4c05-b0f8-7faa23c1a7e1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518422646,
    "id": "51ec5eca-adac-4d14-83cb-660262ab8265",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518422646,
    "parent_id": "28d11fe4-92df-4393-8cbb-b9dadc487955",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "070 Pitfall - Over-use of primitive wrapper types is inefficient"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422642,
        "id": "393b1bac-0d04-4218-9455-62782d57b9bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422642,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider these two pieces of code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider these two pieces of code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "a24de202-e09f-4ae7-a817-8410f7104954",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int a = 1000;\nint b = a + 1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int a = 1000;\nint b = a + 1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "5a444762-1407-4168-9736-6924a864eb10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "e23c8bad-cedb-42cc-ad93-ddfd5132759a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Integer a = 1000;\nInteger b = a + 1;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Integer a = 1000;\nInteger b = a + 1;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "271dea1c-06c8-419f-83cf-f06a8b2147d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Question: Which version is more efficient?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Question: Which version is more efficient?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "1071e1cf-f21b-4c3a-a0a8-95735636c0be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Answer: The two versions look almost the identical, but the first version is a lot more efficient than the second one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Answer: The two versions look almost the identical, but the first version is a lot more efficient than the second one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "ed289d6b-1f24-4aad-8e1f-40e686db349e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second version is using a representation for the numbers that uses more space, and is relying on auto-boxing and auto-unboxing behind the scenes. In fact the second version is directly equivalent to the following code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second version is using a representation for the numbers that uses more space, and is relying on auto-boxing and auto-unboxing behind the scenes. In fact the second version is directly equivalent to the following code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422643,
        "id": "5ab011c4-af0f-4496-a910-8b0252d07a84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422643,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Integer a = Integer.valueOf(1000);               // box 1000\nInteger b = Integer.valueOf(a.intValue() + 1);   // unbox 1000, add 1, box 1001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Integer a = Integer.valueOf(1000);               // box 1000\nInteger b = Integer.valueOf(a.intValue() + 1);   // unbox 1000, add 1, box 1001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422644,
        "id": "830f4008-7198-4e83-8643-a690ef10bd2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422644,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparing this to the other version that uses "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", there are clearly three extra method calls when "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used. In the case of "
            ],
            [
              "valueOf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the calls are each going to create and initialize a new "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object. All of this extra boxing and unboxing work is likely to make the second version an order of magnitude slower than the first one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparing this to the other version that uses "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", there are clearly three extra method calls when "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " is used. In the case of "
          },
          {
            "Text": "valueOf",
            "AttrFlags": 2
          },
          {
            "Text": ", the calls are each going to create and initialize a new "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " object. All of this extra boxing and unboxing work is likely to make the second version an order of magnitude slower than the first one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422644,
        "id": "ba243ca6-7a64-4232-9e3c-93691d423e83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422644,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to that, the second version is allocating objects on the heap in each "
            ],
            [
              "valueOf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call. While the space utilization is platform specific, it is likely to be in the region of 16 bytes for each "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object. By contrast, the "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version needs zero extra heap space, assuming that "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are local variables."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to that, the second version is allocating objects on the heap in each "
          },
          {
            "Text": "valueOf",
            "AttrFlags": 2
          },
          {
            "Text": " call. While the space utilization is platform specific, it is likely to be in the region of 16 bytes for each "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " object. By contrast, the "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " version needs zero extra heap space, assuming that "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " are local variables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422644,
        "id": "4bdd1332-75b8-44a4-95f1-443fff89bbd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422644,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422644,
        "id": "f38a70a1-6b59-4abb-a381-918140e5183d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422644,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another big reason why primitives are faster then their boxed equivalent is how their respective array types are laid out in memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another big reason why primitives are faster then their boxed equivalent is how their respective array types are laid out in memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422645,
        "id": "e1b4e5ee-ec16-44f0-8504-cfa659b72fca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422645,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you take "
            ],
            [
              "int[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Integer[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as an example, in the case of an "
            ],
            [
              "int[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "values",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " are contiguously laid out in memory. But in the case of an "
            ],
            [
              "Integer[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it’s not the values that are laid out, but references (pointers) to "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects, which in turn contain the actual "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you take "
          },
          {
            "Text": "int[]",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Integer[]",
            "AttrFlags": 2
          },
          {
            "Text": " as an example, in the case of an "
          },
          {
            "Text": "int[]",
            "AttrFlags": 2
          },
          {
            "Text": " the "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "values",
            "AttrFlags": 4
          },
          {
            "Text": " are contiguously laid out in memory. But in the case of an "
          },
          {
            "Text": "Integer[]",
            "AttrFlags": 2
          },
          {
            "Text": " it’s not the values that are laid out, but references (pointers) to "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " objects, which in turn contain the actual "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422645,
        "id": "208eae1e-508f-41ac-9a98-1b0834201996",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422645,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Besides being an extra level of indirection, this can be a big tank when it comes to cache locality when iterating over the values. In the case of an "
            ],
            [
              "int[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the CPU could fetch all the values in the array, into it’s cache at once, because they are contiguous in memory. But in the case of an "
            ],
            [
              "Integer[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the CPU potentially has to do an additional memory fetch for each element, since the array only contains references to the actual values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Besides being an extra level of indirection, this can be a big tank when it comes to cache locality when iterating over the values. In the case of an "
          },
          {
            "Text": "int[]",
            "AttrFlags": 2
          },
          {
            "Text": " the CPU could fetch all the values in the array, into it’s cache at once, because they are contiguous in memory. But in the case of an "
          },
          {
            "Text": "Integer[]",
            "AttrFlags": 2
          },
          {
            "Text": " the CPU potentially has to do an additional memory fetch for each element, since the array only contains references to the actual values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422645,
        "id": "3f28f7d6-2afe-4de2-b29c-448f278994c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422645,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518422645,
        "id": "2f6501a0-2d79-4c05-b0f8-7faa23c1a7e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518422645,
        "parent_id": "51ec5eca-adac-4d14-83cb-660262ab8265",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In short, using primitive wrapper types is relatively expensive in both CPU and memory resources. Using them unnecessarily is in efficient."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In short, using primitive wrapper types is relatively expensive in both CPU and memory resources. Using them unnecessarily is in efficient."
          }
        ]
      }
    ],
    "title": "070 Pitfall - Over-use of primitive wrapper types is inefficient"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}