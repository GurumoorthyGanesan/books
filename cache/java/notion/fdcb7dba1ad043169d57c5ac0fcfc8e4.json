{
  "ID": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
  "Root": {
    "alive": true,
    "content": [
      "a85e0a6a-99d7-4b24-97b2-0cd87e202718",
      "1a5165fd-a13f-472a-aacb-7927b06fe9c3",
      "71962c1b-1ecb-40a2-8b63-333a289acecb",
      "680f4214-2ba8-453a-97e8-accac6485e09",
      "6a879512-139e-4435-bdfb-111d270cff75",
      "093dbadf-16a2-4244-8574-c384d68cacb9",
      "fd767c14-53df-4ef2-8a81-a26620244d66",
      "ef835939-d62b-4efc-bcf8-5dc48dbb9164",
      "0958cc3b-4e51-429f-b976-c7e116b057b2",
      "fb79d702-cecf-4b3c-822a-779bd6a1d17c",
      "4e0d2c21-68d2-45b3-8240-7cac0fca9350",
      "243dbfd3-f1fc-45c7-8d05-8a86d1fe7622",
      "389b05db-1b6f-4f81-aa00-f45d67aecc4d",
      "90519596-0c5d-4ade-abe2-e0887ea4cd9b",
      "a9d2bbb2-18c4-4017-88b1-fd12f547bbb6",
      "d67837db-7326-40c8-9c93-527e8062581c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519570629,
    "id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519570629,
    "parent_id": "d9409fc4-cc95-48a8-9906-b1dcb34f86f3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Concurrent Collections"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570625,
        "id": "a85e0a6a-99d7-4b24-97b2-0cd87e202718",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570625,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Concurrent collections are a generalization of thread-safe collections, that allow for a broader usage in a concurrent environment."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Concurrent collections are a generalization of thread-safe collections, that allow for a broader usage in a concurrent environment."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570626,
        "id": "1a5165fd-a13f-472a-aacb-7927b06fe9c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570626,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While thread-safe collections have safe element addition or removal from multiple threads, they do not necessarily have safe iteration in the same context (one may not be able to safely iterate through the collection in one thread, while another one modifies it by adding/removing elements)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While thread-safe collections have safe element addition or removal from multiple threads, they do not necessarily have safe iteration in the same context (one may not be able to safely iterate through the collection in one thread, while another one modifies it by adding/removing elements)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570626,
        "id": "71962c1b-1ecb-40a2-8b63-333a289acecb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570626,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is where concurrent collections are used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is where concurrent collections are used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570626,
        "id": "680f4214-2ba8-453a-97e8-accac6485e09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570626,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As iteration is often the base implementation of several bulk methods in collections, like "
            ],
            [
              "addAll",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "removeAll",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or also collection copying (through a constructor, or other means), sorting, … the use case for concurrent collections is actually pretty large."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As iteration is often the base implementation of several bulk methods in collections, like "
          },
          {
            "Text": "addAll",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "removeAll",
            "AttrFlags": 2
          },
          {
            "Text": ", or also collection copying (through a constructor, or other means), sorting, … the use case for concurrent collections is actually pretty large."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570627,
        "id": "6a879512-139e-4435-bdfb-111d270cff75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570627,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, the Java SE 5 "
            ],
            [
              "java.util.concurrent.CopyOnWriteArrayList",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a thread safe and concurrent "
            ],
            [
              "Lis",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "t implementation, its "
            ],
            [
              "javadoc",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html"
                ]
              ]
            ],
            [
              " states :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, the Java SE 5 "
          },
          {
            "Text": "java.util.concurrent.CopyOnWriteArrayList",
            "AttrFlags": 2
          },
          {
            "Text": " is a thread safe and concurrent "
          },
          {
            "Text": "Lis",
            "AttrFlags": 2
          },
          {
            "Text": "t implementation, its "
          },
          {
            "Text": "javadoc",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html"
          },
          {
            "Text": " states :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570627,
        "id": "093dbadf-16a2-4244-8574-c384d68cacb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570627,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The “snapshot” style iterator method uses a reference to the state of the array at the point that the iterator was created. This array never changes during the lifetime of the iterator, so interference is impossible and the iterator is guaranteed not to throw ConcurrentModificationException."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The “snapshot” style iterator method uses a reference to the state of the array at the point that the iterator was created. This array never changes during the lifetime of the iterator, so interference is impossible and the iterator is guaranteed not to throw ConcurrentModificationException."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570627,
        "id": "fd767c14-53df-4ef2-8a81-a26620244d66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570627,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Therefore, the following code is safe :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Therefore, the following code is safe :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570628,
        "id": "ef835939-d62b-4efc-bcf8-5dc48dbb9164",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570628,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class ThreadSafeAndConcurrent {\n\npublic static final List\u003cInteger\u003e LIST = new CopyOnWriteArrayList\u003c\u003e();\n\npublic static void main(String[] args) throws InterruptedException {\n    Thread modifier = new Thread(new ModifierRunnable());\n    Thread iterator = new Thread(new IteratorRunnable());\n    modifier.start();\n    iterator.start();\n    modifier.join();\n    iterator.join();\n}\n\npublic static final class ModifierRunnable implements Runnable {\n    @Override\n    public void run() {\n        try {\n            for (int i = 0; i \u003c 50000; i++) {\n                LIST.add(i);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npublic static final class IteratorRunnable implements Runnable {\n    @Override\n    public void run() {\n        try {\n            for (int i = 0; i \u003c 10000; i++) {\n                long total = 0;\n                for(Integer inList : LIST) {\n                    total += inList;\n                }\n                System.out.println(total);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class ThreadSafeAndConcurrent {\n\npublic static final List\u003cInteger\u003e LIST = new CopyOnWriteArrayList\u003c\u003e();\n\npublic static void main(String[] args) throws InterruptedException {\n    Thread modifier = new Thread(new ModifierRunnable());\n    Thread iterator = new Thread(new IteratorRunnable());\n    modifier.start();\n    iterator.start();\n    modifier.join();\n    iterator.join();\n}\n\npublic static final class ModifierRunnable implements Runnable {\n    @Override\n    public void run() {\n        try {\n            for (int i = 0; i \u003c 50000; i++) {\n                LIST.add(i);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npublic static final class IteratorRunnable implements Runnable {\n    @Override\n    public void run() {\n        try {\n            for (int i = 0; i \u003c 10000; i++) {\n                long total = 0;\n                for(Integer inList : LIST) {\n                    total += inList;\n                }\n                System.out.println(total);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570628,
        "id": "0958cc3b-4e51-429f-b976-c7e116b057b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570628,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another concurrent collection regarding iteration is "
            ],
            [
              "ConcurrentLinkedQueue",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html"
                ]
              ]
            ],
            [
              ", which states :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another concurrent collection regarding iteration is "
          },
          {
            "Text": "ConcurrentLinkedQueue",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html"
          },
          {
            "Text": ", which states :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570628,
        "id": "fb79d702-cecf-4b3c-822a-779bd6a1d17c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570628,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterators are weakly consistent, returning elements reflecting the state of the queue at some point at or since the creation of the iterator. They do not throw java.util.ConcurrentModificationException, and may proceed concurrently with other operations. Elements contained in the queue since the creation of the iterator will be returned exactly once."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterators are weakly consistent, returning elements reflecting the state of the queue at some point at or since the creation of the iterator. They do not throw java.util.ConcurrentModificationException, and may proceed concurrently with other operations. Elements contained in the queue since the creation of the iterator will be returned exactly once."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570628,
        "id": "4e0d2c21-68d2-45b3-8240-7cac0fca9350",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570628,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One should check the javadocs to see if a collection is concurrent, or not. The attributes of the iterator returned by the "
            ],
            [
              "iterator()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method (“fail fast”, “weakly consistent”, …) is the most important attribute to look for."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One should check the javadocs to see if a collection is concurrent, or not. The attributes of the iterator returned by the "
          },
          {
            "Text": "iterator()",
            "AttrFlags": 2
          },
          {
            "Text": " method (“fail fast”, “weakly consistent”, …) is the most important attribute to look for."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570629,
        "id": "243dbfd3-f1fc-45c7-8d05-8a86d1fe7622",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570629,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thread safe but non concurrent examples"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thread safe but non concurrent examples"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570629,
        "id": "389b05db-1b6f-4f81-aa00-f45d67aecc4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570629,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above code, changing the "
            ],
            [
              "LIST",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declaration to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above code, changing the "
          },
          {
            "Text": "LIST",
            "AttrFlags": 2
          },
          {
            "Text": " declaration to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570629,
        "id": "90519596-0c5d-4ade-abe2-e0887ea4cd9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570629,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static final List\u003cInteger\u003e LIST = Collections.synchronizedList(new ArrayList\u003c\u003e());"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static final List\u003cInteger\u003e LIST = Collections.synchronizedList(new ArrayList\u003c\u003e());",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570629,
        "id": "a9d2bbb2-18c4-4017-88b1-fd12f547bbb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570629,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Could (and statistically will on most modern, multi CPU/core architectures) lead to exceptions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Could (and statistically will on most modern, multi CPU/core architectures) lead to exceptions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519570629,
        "id": "d67837db-7326-40c8-9c93-527e8062581c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519570629,
        "parent_id": "fdcb7dba-1ad0-4316-9d57-c5ac0fcfc8e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Synchronized collections from the "
            ],
            [
              "Collections",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " utility methods are thread safe for addition/removal of elements, but not iteration (unless the underlying collection being passed to it already is)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Synchronized collections from the "
          },
          {
            "Text": "Collections",
            "AttrFlags": 2
          },
          {
            "Text": " utility methods are thread safe for addition/removal of elements, but not iteration (unless the underlying collection being passed to it already is)."
          }
        ]
      }
    ],
    "title": "020 Concurrent Collections"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}