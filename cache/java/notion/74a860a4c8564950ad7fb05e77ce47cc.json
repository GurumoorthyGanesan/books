{
  "ID": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
  "Root": {
    "alive": true,
    "content": [
      "d321a5dc-c397-4b8b-a6ed-85a2e08fd24c",
      "2d3858a3-8394-442a-8022-dbca87e3f8c8",
      "c2abdbee-6870-46bb-a027-1ec1f458eaeb",
      "f94fc6fa-f1c6-4de0-b32d-c199dd68284e",
      "d5563a60-f622-475a-968c-fc1ecdf42da5",
      "348f55f6-3cf7-478d-84d8-5091fd0a63b2",
      "f49e31e8-0002-4850-bc9f-7449fbfcd902",
      "572ba2e8-e490-4c77-9c14-f8b6d8cb519d",
      "0c93392d-dd57-4d16-85ab-6a4088601c33"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460229352,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551764046358,
    "parent_id": "d8411ba8-1e49-4c45-95a0-bf6bfc36e334",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Wrapping InputOutput Streams"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229349,
        "id": "d321a5dc-c397-4b8b-a6ed-85a2e08fd24c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229349,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "OutputStream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "InputStream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have many different classes, each of them with a unique functionality. By wrapping a stream around another, you gain the functionality of both streams."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "OutputStream",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "InputStream",
            "AttrFlags": 2
          },
          {
            "Text": " have many different classes, each of them with a unique functionality. By wrapping a stream around another, you gain the functionality of both streams."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229351,
        "id": "2d3858a3-8394-442a-8022-dbca87e3f8c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229351,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can wrap a stream any number of times, just take note of the ordering."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can wrap a stream any number of times, just take note of the ordering."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229351,
        "id": "c2abdbee-6870-46bb-a027-1ec1f458eaeb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229351,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Useful combinations"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Useful combinations"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229352,
        "id": "f94fc6fa-f1c6-4de0-b32d-c199dd68284e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229352,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Writing characters to a file while using a buffer"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Writing characters to a file while using a buffer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229352,
        "id": "d5563a60-f622-475a-968c-fc1ecdf42da5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229352,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "File myFile = new File(\"targetFile.txt\");\nPrintWriter writer = new PrintWriter(new BufferedOutputStream(new FileOutputStream(myFile)));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "File myFile = new File(\"targetFile.txt\");\nPrintWriter writer = new PrintWriter(new BufferedOutputStream(new FileOutputStream(myFile)));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229352,
        "id": "348f55f6-3cf7-478d-84d8-5091fd0a63b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229352,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Compressing and encrypting data before writing to a file while using a buffer"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Compressing and encrypting data before writing to a file while using a buffer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229352,
        "id": "f49e31e8-0002-4850-bc9f-7449fbfcd902",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229352,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Cipher cipher = ... // Initialize cipher\nFile myFile = new File(\"targetFile.enc\");\nBufferedOutputStream outputStream = new BufferedOutputStream(new DeflaterOutputStream(new CipherOutputStream(new FileOutputStream(myFile), cipher)));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Cipher cipher = ... // Initialize cipher\nFile myFile = new File(\"targetFile.enc\");\nBufferedOutputStream outputStream = new BufferedOutputStream(new DeflaterOutputStream(new CipherOutputStream(new FileOutputStream(myFile), cipher)));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229352,
        "id": "572ba2e8-e490-4c77-9c14-f8b6d8cb519d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229352,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "List of Input/Output Stream wrappers"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "List of Input/Output Stream wrappers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460229352,
        "id": "0c93392d-dd57-4d16-85ab-6a4088601c33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460229352,
        "parent_id": "74a860a4-c856-4950-ad7f-b05e77ce47cc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Wrapper | Description |\n—————– | —————– |\nBufferedOutputStream/ BufferedInputStream | While "
            ],
            [
              "OutputStream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " writes data one byte at a time, "
            ],
            [
              "BufferedOutputStream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " writes data in chunks. This reduces the number of system calls, thus improving performance. |\nDeflaterOutputStream/ DeflaterInputStream | Performs data compression. |\nInflaterOutputStream/ InflaterInputStream | Performs data decompression. |\nCipherOutputStream/ CipherInputStream | Encrypts/Decrypts data. |\nDigestOutputStream/ DigestInputStream | Generates Message Digest to verify data integrity. |\nCheckedOutputStream/ CheckedInputStream | Generates a CheckSum. CheckSum is a more trivial version of Message Digest. |\nDataOutputStream/ DataInputStream | Allows writing of primitive data types and Strings. Meant for writing bytes. Platform independent. |\nPrintStream | Allows writing of primitive data types and Strings. Meant for writing bytes. Platform dependent. |\nOutputStreamWriter | Converts a OutputStream into a Writer. An OutputStream deals with bytes while Writers deals with characters |\nPrintWriter | Automatically calls OutputStreamWriter. Allows writing of primitive data types and Strings. Strictly for writing characters and best for writing characters |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Wrapper | Description |\n—————– | —————– |\nBufferedOutputStream/ BufferedInputStream | While "
          },
          {
            "Text": "OutputStream",
            "AttrFlags": 2
          },
          {
            "Text": " writes data one byte at a time, "
          },
          {
            "Text": "BufferedOutputStream",
            "AttrFlags": 2
          },
          {
            "Text": " writes data in chunks. This reduces the number of system calls, thus improving performance. |\nDeflaterOutputStream/ DeflaterInputStream | Performs data compression. |\nInflaterOutputStream/ InflaterInputStream | Performs data decompression. |\nCipherOutputStream/ CipherInputStream | Encrypts/Decrypts data. |\nDigestOutputStream/ DigestInputStream | Generates Message Digest to verify data integrity. |\nCheckedOutputStream/ CheckedInputStream | Generates a CheckSum. CheckSum is a more trivial version of Message Digest. |\nDataOutputStream/ DataInputStream | Allows writing of primitive data types and Strings. Meant for writing bytes. Platform independent. |\nPrintStream | Allows writing of primitive data types and Strings. Meant for writing bytes. Platform dependent. |\nOutputStreamWriter | Converts a OutputStream into a Writer. An OutputStream deals with bytes while Writers deals with characters |\nPrintWriter | Automatically calls OutputStreamWriter. Allows writing of primitive data types and Strings. Strictly for writing characters and best for writing characters |"
          }
        ]
      }
    ],
    "title": "Wrapping InputOutput Streams",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}