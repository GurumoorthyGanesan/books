{
  "ID": "9341e648-6887-4ded-9c16-af3597d921ac",
  "Root": {
    "alive": true,
    "content": [
      "0cfba0da-247d-44df-9e08-981c62f7d667",
      "07b92dee-cac0-4021-952f-6e7908b4bcd3",
      "d8decb6d-67d3-4d43-acb5-3086308ebfcd",
      "da522f0e-6c68-4ee9-b7dd-1fb3d8d78b54",
      "92a126fc-4a43-44cb-ae41-fd730fa1c50a",
      "2680a98d-6079-4b2c-bff6-28d3f93ede2f",
      "72206c01-be65-4ac3-b1fd-08c9b68684e7",
      "dc6f3fbf-2548-4b4a-a7a9-a9c3626d2c17",
      "ff386633-957c-43ae-b0ad-2bccb72d8b67",
      "af5ab587-fdde-4807-8c55-27b6c0e0667c",
      "fed05611-1581-443a-966e-6d4a4a14fea1",
      "d86a4861-5b74-4a89-8957-585ae871972b",
      "9aca12cf-2c8c-4ca5-9a51-783ab28ffbbc",
      "7596a5a3-fbbd-4fb4-bb7e-b59e6baa16ce",
      "8cd9b108-6782-4c6d-a626-60a559f1aabb",
      "8c43422c-8bb6-43dd-96f4-fb8fcf1268ab",
      "bc98f5bf-8bd0-48f8-9b46-ed952e58beb6",
      "a933e31d-cd41-42ea-903b-4f96ea3e0060",
      "6e4ff790-8c34-4cc1-8763-fcbc04a6d3ce",
      "5866ab08-97df-4ff3-b277-0ce098b3383c",
      "d283a33f-0db2-4467-9a61-6c884ddef1d8",
      "65226c39-e848-4981-9c5d-42efd3c4e62d",
      "7782464e-582e-46cc-be59-b75c9f0de363",
      "49c9c999-3440-4f58-855d-90a0b0852810",
      "7f79007b-63b4-4c5f-b4e5-8ebd774907ca",
      "80c036a0-491b-4ec0-b95e-b785ea475f5b",
      "1822da17-bde7-4822-ad4b-573946cb3a80",
      "9ebdc82a-b331-4785-a25c-69e4802fff28",
      "33deb03b-f66b-4a57-8877-965b88bdac33",
      "48634ccc-00f6-47fc-a5f1-5ad11d30b79c",
      "04a22cbe-c58a-4b1b-aba0-b77a0fa09b30",
      "dc78901f-4dec-4bdb-9dc7-c63db2885561",
      "4d63ffa5-db9a-4fd0-bd1f-db2279b12d83",
      "02099c87-2775-47c3-a4ee-4b03e8cb1656",
      "d7b4e2ff-ef63-4766-8671-acfc9d7e03f4",
      "94528c06-7d2b-4682-a99e-2b48ea122d0d",
      "58730f42-013d-4171-8c7f-ab7bb73f5190"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460216062,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9341e648-6887-4ded-9c16-af3597d921ac",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460216062,
    "parent_id": "98fc7929-b076-4b4c-8088-3851bfc3fdbf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Comparing Strings"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216053,
        "id": "0cfba0da-247d-44df-9e08-981c62f7d667",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216053,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to compare Strings for equality, you should use the String object’s "
            ],
            [
              "equals",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "equalsIgnoreCase",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equalsIgnoreCase-java.lang.String-"
                ]
              ]
            ],
            [
              " methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to compare Strings for equality, you should use the String object’s "
          },
          {
            "Text": "equals",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-"
          },
          {
            "Text": " or "
          },
          {
            "Text": "equalsIgnoreCase",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equalsIgnoreCase-java.lang.String-"
          },
          {
            "Text": " methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216054,
        "id": "07b92dee-cac0-4021-952f-6e7908b4bcd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216054,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, the following snippet will determine if the two instances of "
            ],
            [
              "String",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html"
                ]
              ]
            ],
            [
              " are equal on all characters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, the following snippet will determine if the two instances of "
          },
          {
            "Text": "String",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html"
          },
          {
            "Text": " are equal on all characters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216054,
        "id": "d8decb6d-67d3-4d43-acb5-3086308ebfcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216054,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String firstString = \"Test123\";\nString secondString = \"Test\" + 123;\n\nif (firstString.equals(secondString)) {\n   // Both Strings have the same content.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String firstString = \"Test123\";\nString secondString = \"Test\" + 123;\n\nif (firstString.equals(secondString)) {\n   // Both Strings have the same content.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216054,
        "id": "da522f0e-6c68-4ee9-b7dd-1fb3d8d78b54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216054,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live demo",
              [
                [
                  "a",
                  "https://ideone.com/TjaYMR"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live demo",
            "Link": "https://ideone.com/TjaYMR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216054,
        "id": "92a126fc-4a43-44cb-ae41-fd730fa1c50a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216054,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example will compare them, independent of their case:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example will compare them, independent of their case:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216055,
        "id": "2680a98d-6079-4b2c-bff6-28d3f93ede2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216055,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String firstString = \"Test123\";\nString secondString = \"TEST123\";\n\nif (firstString.equalsIgnoreCase(secondString)) {\n    // Both Strings are equal, ignoring the case of the individual characters.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String firstString = \"Test123\";\nString secondString = \"TEST123\";\n\nif (firstString.equalsIgnoreCase(secondString)) {\n    // Both Strings are equal, ignoring the case of the individual characters.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216055,
        "id": "72206c01-be65-4ac3-b1fd-08c9b68684e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216055,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live demo",
              [
                [
                  "a",
                  "https://ideone.com/XxKmM1"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live demo",
            "Link": "https://ideone.com/XxKmM1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216055,
        "id": "dc6f3fbf-2548-4b4a-a7a9-a9c3626d2c17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216055,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "equalsIgnoreCase",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not let you specify a "
            ],
            [
              "Locale",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For instance, if you compare the two words "
            ],
            [
              "\"Taki\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\"TAKI\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in English they are equal; however, in Turkish they are different (in Turkish, the lowercase "
            ],
            [
              "I",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "ı",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). For cases like this, converting both strings to lowercase (or uppercase) with "
            ],
            [
              "Locale",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and then comparing with "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the solution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "equalsIgnoreCase",
            "AttrFlags": 2
          },
          {
            "Text": " does not let you specify a "
          },
          {
            "Text": "Locale",
            "AttrFlags": 2
          },
          {
            "Text": ". For instance, if you compare the two words "
          },
          {
            "Text": "\"Taki\"",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\"TAKI\"",
            "AttrFlags": 2
          },
          {
            "Text": " in English they are equal; however, in Turkish they are different (in Turkish, the lowercase "
          },
          {
            "Text": "I",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "ı",
            "AttrFlags": 2
          },
          {
            "Text": "). For cases like this, converting both strings to lowercase (or uppercase) with "
          },
          {
            "Text": "Locale",
            "AttrFlags": 2
          },
          {
            "Text": " and then comparing with "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " is the solution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216055,
        "id": "ff386633-957c-43ae-b0ad-2bccb72d8b67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216055,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String firstString = \"Taki\";\nString secondString = \"TAKI\";\n\nSystem.out.println(firstString.equalsIgnoreCase(secondString)); //prints true\n\nLocale locale = Locale.forLanguageTag(\"tr-TR\");\n\nSystem.out.println(firstString.toLowerCase(locale).equals(\n                   secondString.toLowerCase(locale))); //prints false"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String firstString = \"Taki\";\nString secondString = \"TAKI\";\n\nSystem.out.println(firstString.equalsIgnoreCase(secondString)); //prints true\n\nLocale locale = Locale.forLanguageTag(\"tr-TR\");\n\nSystem.out.println(firstString.toLowerCase(locale).equals(\n                   secondString.toLowerCase(locale))); //prints false",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "af5ab587-fdde-4807-8c55-27b6c0e0667c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live demo",
              [
                [
                  "a",
                  "https://ideone.com/uWc348"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live demo",
            "Link": "https://ideone.com/uWc348"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "fed05611-1581-443a-966e-6d4a4a14fea1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "d86a4861-5b74-4a89-8957-585ae871972b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Do not use the == operator to compare Strings"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Do not use the == operator to compare Strings"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "9aca12cf-2c8c-4ca5-9a51-783ab28ffbbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unless you can guarantee that all strings have been interned (see below), you "
            ],
            [
              "should not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " use the "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators to compare Strings. These operators actually test references, and since multiple "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects can represent the same String, this is liable to give the wrong answer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unless you can guarantee that all strings have been interned (see below), you "
          },
          {
            "Text": "should not",
            "AttrFlags": 1
          },
          {
            "Text": " use the "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators to compare Strings. These operators actually test references, and since multiple "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects can represent the same String, this is liable to give the wrong answer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "7596a5a3-fbbd-4fb4-bb7e-b59e6baa16ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, use the "
            ],
            [
              "String.equals(Object)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, which will compare the String objects based on their values. For a detailed explanation, please refer to http://stackoverflow.com/documentation/java/4388/java-pitfalls/16290/pitfall-using-to-compare-strings."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, use the "
          },
          {
            "Text": "String.equals(Object)",
            "AttrFlags": 2
          },
          {
            "Text": " method, which will compare the String objects based on their values. For a detailed explanation, please refer to http://stackoverflow.com/documentation/java/4388/java-pitfalls/16290/pitfall-using-to-compare-strings."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "8cd9b108-6782-4c6d-a626-60a559f1aabb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216056,
        "id": "8c43422c-8bb6-43dd-96f4-fb8fcf1268ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216056,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparing Strings in a switch statement"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparing Strings in a switch statement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216057,
        "id": "bc98f5bf-8bd0-48f8-9b46-ed952e58beb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216057,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of Java 1.7, it is possible to compare a String variable to literals in a "
            ],
            [
              "switch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement. Make sure that the String is not null, otherwise it will always throw a "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/1003/nullpointerexception#t=201608020755368222531"
                ]
              ]
            ],
            [
              ". Values are compared using "
            ],
            [
              "String.equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", i.e. case sensitive."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of Java 1.7, it is possible to compare a String variable to literals in a "
          },
          {
            "Text": "switch",
            "AttrFlags": 2
          },
          {
            "Text": " statement. Make sure that the String is not null, otherwise it will always throw a "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/java/1003/nullpointerexception#t=201608020755368222531"
          },
          {
            "Text": ". Values are compared using "
          },
          {
            "Text": "String.equals",
            "AttrFlags": 2
          },
          {
            "Text": ", i.e. case sensitive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216057,
        "id": "a933e31d-cd41-42ea-903b-4f96ea3e0060",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216057,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String stringToSwitch = \"A\";\n\nswitch (stringToSwitch) {\n    case \"a\":\n        System.out.println(\"a\");\n        break;\n    case \"A\":\n        System.out.println(\"A\"); //the code goes here\n        break;\n    case \"B\":\n        System.out.println(\"B\");\n        break;\n    default:\n        break;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String stringToSwitch = \"A\";\n\nswitch (stringToSwitch) {\n    case \"a\":\n        System.out.println(\"a\");\n        break;\n    case \"A\":\n        System.out.println(\"A\"); //the code goes here\n        break;\n    case \"B\":\n        System.out.println(\"B\");\n        break;\n    default:\n        break;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216057,
        "id": "6e4ff790-8c34-4cc1-8763-fcbc04a6d3ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216057,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live demo",
              [
                [
                  "a",
                  "https://ideone.com/fbWBUR"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live demo",
            "Link": "https://ideone.com/fbWBUR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216057,
        "id": "5866ab08-97df-4ff3-b277-0ce098b3383c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216057,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparing Strings with constant values"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparing Strings with constant values"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216057,
        "id": "d283a33f-0db2-4467-9a61-6c884ddef1d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216057,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When comparing a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a constant value, you can put the constant value on the left side of "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to ensure that you won’t get a "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the other String is "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When comparing a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " to a constant value, you can put the constant value on the left side of "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " to ensure that you won’t get a "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2
          },
          {
            "Text": " if the other String is "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216058,
        "id": "65226c39-e848-4981-9c5d-42efd3c4e62d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216058,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\"baz\".equals(foo)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\"baz\".equals(foo)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216058,
        "id": "7782464e-582e-46cc-be59-b75c9f0de363",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216058,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While "
            ],
            [
              "foo.equals(\"baz\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will throw a "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if "
            ],
            [
              "foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\"baz\".equals(foo)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will evaluate to "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While "
          },
          {
            "Text": "foo.equals(\"baz\")",
            "AttrFlags": 2
          },
          {
            "Text": " will throw a "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2
          },
          {
            "Text": " if "
          },
          {
            "Text": "foo",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\"baz\".equals(foo)",
            "AttrFlags": 2
          },
          {
            "Text": " will evaluate to "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216058,
        "id": "49c9c999-3440-4f58-855d-90a0b0852810",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216058,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A more readable alternative is to use "
            ],
            [
              "Objects.equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which does a null check on both parameters: "
            ],
            [
              "Objects.equals(foo, \"baz\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A more readable alternative is to use "
          },
          {
            "Text": "Objects.equals()",
            "AttrFlags": 2
          },
          {
            "Text": ", which does a null check on both parameters: "
          },
          {
            "Text": "Objects.equals(foo, \"baz\")",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216059,
        "id": "7f79007b-63b4-4c5f-b4e5-8ebd774907ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216059,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "("
            ],
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " It is debatable as to whether it is better to avoid "
            ],
            [
              "NullPointerExceptions",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in general, or let them happen and then fix the root cause; see "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/5680/java-pitfalls-nulls-and-nullpointerexception/20151/pitfall-making-good-unexpected-nulls"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/5680/java-pitfalls-nulls-and-nullpointerexception/23490/pitfall-using-yoda-conditions-to-avoid-nullpointerexception"
                ]
              ]
            ],
            [
              ". Certainly, calling the avoidance strategy “best practice” is not justifiable.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "("
          },
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " It is debatable as to whether it is better to avoid "
          },
          {
            "Text": "NullPointerExceptions",
            "AttrFlags": 2
          },
          {
            "Text": " in general, or let them happen and then fix the root cause; see "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/java/5680/java-pitfalls-nulls-and-nullpointerexception/20151/pitfall-making-good-unexpected-nulls"
          },
          {
            "Text": " and "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/java/5680/java-pitfalls-nulls-and-nullpointerexception/23490/pitfall-using-yoda-conditions-to-avoid-nullpointerexception"
          },
          {
            "Text": ". Certainly, calling the avoidance strategy “best practice” is not justifiable.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216059,
        "id": "80c036a0-491b-4ec0-b95e-b785ea475f5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216059,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String orderings"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "String orderings"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216060,
        "id": "1822da17-bde7-4822-ad4b-573946cb3a80",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216060,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class implements "
            ],
            [
              "Comparable\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the "
            ],
            [
              "String.compareTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method (as described at the start of this example). This makes the natural ordering of "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects case-sensitive order. The "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class provide a "
            ],
            [
              "Comparator\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constant called "
            ],
            [
              "CASE_INSENSITIVE_ORDER",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " suitable for case-insensitive sorting."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " class implements "
          },
          {
            "Text": "Comparable\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " with the "
          },
          {
            "Text": "String.compareTo",
            "AttrFlags": 2
          },
          {
            "Text": " method (as described at the start of this example). This makes the natural ordering of "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects case-sensitive order. The "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " class provide a "
          },
          {
            "Text": "Comparator\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " constant called "
          },
          {
            "Text": "CASE_INSENSITIVE_ORDER",
            "AttrFlags": 2
          },
          {
            "Text": " suitable for case-insensitive sorting."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216060,
        "id": "9ebdc82a-b331-4785-a25c-69e4802fff28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216060,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparing with interned Strings"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparing with interned Strings"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216060,
        "id": "33deb03b-f66b-4a57-8877-965b88bdac33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216060,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Java Language Specification ("
            ],
            [
              "JLS 3.10.6",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5"
                ]
              ]
            ],
            [
              ") states the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Java Language Specification ("
          },
          {
            "Text": "JLS 3.10.6",
            "Link": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5"
          },
          {
            "Text": ") states the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216060,
        "id": "48634ccc-00f6-47fc-a5f1-5ad11d30b79c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216060,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“Moreover, a string literal always refers to the same instance of class String. This is because string literals - or, more generally, strings that are the values of constant expressions - are interned so as to share unique instances, using the method String.intern.”"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "“Moreover, a string literal always refers to the same instance of class String. This is because string literals - or, more generally, strings that are the values of constant expressions - are interned so as to share unique instances, using the method String.intern.”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216061,
        "id": "04a22cbe-c58a-4b1b-aba0-b77a0fa09b30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216061,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This means it is safe to compare references to two string "
            ],
            [
              "literals",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " using "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Moreover, the same is true for references to "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects that have been produced using the "
            ],
            [
              "String.intern()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This means it is safe to compare references to two string "
          },
          {
            "Text": "literals",
            "AttrFlags": 4
          },
          {
            "Text": " using "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ". Moreover, the same is true for references to "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects that have been produced using the "
          },
          {
            "Text": "String.intern()",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216061,
        "id": "dc78901f-4dec-4bdb-9dc7-c63db2885561",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216061,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216061,
        "id": "4d63ffa5-db9a-4fd0-bd1f-db2279b12d83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216061,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String strObj = new String(\"Hello!\");\nString str = \"Hello!\";\n\n// The two string references point two strings that are equal\nif (strObj.equals(str)) {\n    System.out.println(\"The strings are equal\");\n}\n\n// The two string references do not point to the same object\nif (strObj != str) {\n    System.out.println(\"The strings are not the same object\");\n}\n\n// If we intern a string that is equal to a given literal, the result is\n// a string that has the same reference as the literal.\nString internedStr = strObj.intern();\n\nif (internedStr == str) {\n    System.out.println(\"The interned string and the literal are the same object\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String strObj = new String(\"Hello!\");\nString str = \"Hello!\";\n\n// The two string references point two strings that are equal\nif (strObj.equals(str)) {\n    System.out.println(\"The strings are equal\");\n}\n\n// The two string references do not point to the same object\nif (strObj != str) {\n    System.out.println(\"The strings are not the same object\");\n}\n\n// If we intern a string that is equal to a given literal, the result is\n// a string that has the same reference as the literal.\nString internedStr = strObj.intern();\n\nif (internedStr == str) {\n    System.out.println(\"The interned string and the literal are the same object\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216061,
        "id": "02099c87-2775-47c3-a4ee-4b03e8cb1656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216061,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Behind the scenes, the interning mechanism maintains a hash table that contains all interned strings that are still "
            ],
            [
              "reachable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". When you call "
            ],
            [
              "intern()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the method looks up the object in the hash table:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Behind the scenes, the interning mechanism maintains a hash table that contains all interned strings that are still "
          },
          {
            "Text": "reachable",
            "AttrFlags": 4
          },
          {
            "Text": ". When you call "
          },
          {
            "Text": "intern()",
            "AttrFlags": 2
          },
          {
            "Text": " on a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ", the method looks up the object in the hash table:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216061,
        "id": "d7b4e2ff-ef63-4766-8671-acfc9d7e03f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216061,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the string is found, then that value is returned as the interned string."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the string is found, then that value is returned as the interned string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216062,
        "id": "94528c06-7d2b-4682-a99e-2b48ea122d0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216062,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, a copy of the string is added to the hash table and that string is returned as the interned string."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, a copy of the string is added to the hash table and that string is returned as the interned string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460216062,
        "id": "58730f42-013d-4171-8c7f-ab7bb73f5190",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460216062,
        "parent_id": "9341e648-6887-4ded-9c16-af3597d921ac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is possible to use interning to allow strings to be compared using "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". However, there are significant problems with doing this; see http://stackoverflow.com/documentation/java/5455/java-pitfalls-performance-issues/23991/pitfall-interning-strings-so-that-you-can-use-is-a-bad-idea#t=201610101338294726756 for details. It is not recommended in most cases."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is possible to use interning to allow strings to be compared using "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ". However, there are significant problems with doing this; see http://stackoverflow.com/documentation/java/5455/java-pitfalls-performance-issues/23991/pitfall-interning-strings-so-that-you-can-use-is-a-bad-idea#t=201610101338294726756 for details. It is not recommended in most cases."
          }
        ]
      }
    ],
    "title": "Comparing Strings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}