{
  "ID": "d552ac03-24f1-4954-998b-22255d3eacce",
  "Root": {
    "alive": true,
    "content": [
      "9e9dfaec-fcfc-47a3-9f85-2499f7d31cab",
      "3e662e70-58b4-447c-ba66-89579a028a4e",
      "1fbb1f4a-ace6-4d43-920b-c5302cc43b76",
      "817e5b5f-5ec3-40a5-8a97-9d39f7d68459",
      "27c674b6-0766-4704-afb4-11ca89e7d103",
      "9940fc75-ab32-4ac4-a3c3-5f54981abb9a",
      "b1cbe3ec-a2de-483e-b583-e319305fecb4",
      "d2cf0fb2-4022-4c75-84f0-ae1b06583d3e",
      "4db8e0e5-d23d-4f8e-9c46-d0738ece374b",
      "c2125046-6890-4309-bc1c-1e130aa72571",
      "1996eb78-410c-4bb1-b817-9a98797e9c08",
      "9e0ad52b-d206-4282-adc4-1c4c5eaf4a47",
      "938853d6-f261-4744-84c9-7e80ae792233",
      "f7d4121a-7a85-489c-9fa4-2d00f5090864",
      "dc8b5ab2-9973-4c43-ad26-a4d1e9b13f1c",
      "6f0fa459-d045-48d7-a0fc-4df670e52ab9",
      "1c65da08-a675-4be1-82c8-91f966d34db0",
      "d1fb6d27-bb94-48d4-818e-c061fe3ed0ed",
      "80cd33e8-8ba0-4c9a-bcb5-19dc07ebdc88",
      "fac2bdf1-71ed-491c-a35d-c8f2b344db72",
      "9b9d2c6d-0e18-414f-90fb-358ec55d97ad",
      "34c5d03a-ebd7-476e-911a-8be985e3bc29",
      "f45e1f81-703c-49bb-a5d8-1be7c9a4b9d2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518418458,
    "id": "d552ac03-24f1-4954-998b-22255d3eacce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518418458,
    "parent_id": "28d11fe4-92df-4393-8cbb-b9dadc487955",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Pitfall - Interning strings so that you can use is a bad idea"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418448,
        "id": "9e9dfaec-fcfc-47a3-9f85-2499f7d31cab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418448,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When some programmers see this advice:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When some programmers see this advice:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418451,
        "id": "3e662e70-58b4-447c-ba66-89579a028a4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418451,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“Testing strings using == is incorrect (unless the strings are interned)”"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "“Testing strings using == is incorrect (unless the strings are interned)”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418452,
        "id": "1fbb1f4a-ace6-4d43-920b-c5302cc43b76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418452,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "their initial reaction is to intern strings so that they can use "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". (After all "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is faster than calling "
            ],
            [
              "String.equals(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", isn’t it.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "their initial reaction is to intern strings so that they can use "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ". (After all "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " is faster than calling "
          },
          {
            "Text": "String.equals(...)",
            "AttrFlags": 2
          },
          {
            "Text": ", isn’t it.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418452,
        "id": "817e5b5f-5ec3-40a5-8a97-9d39f7d68459",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418452,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is the wrong approach, from a number of perspectives:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is the wrong approach, from a number of perspectives:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418452,
        "id": "27c674b6-0766-4704-afb4-11ca89e7d103",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418452,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fragility"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fragility"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418452,
        "id": "9940fc75-ab32-4ac4-a3c3-5f54981abb9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418452,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First of all, you can only safely use "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you know that "
            ],
            [
              "all",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of the "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects you are testing have been interned. The JLS guarantees that String literals in your source code will have been interned. However, none of the standard Java SE APIs guarantee to return interned strings, apart from "
            ],
            [
              "String.intern(String)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself. If you miss just one source of "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects that haven’t been interned, your application will be unreliable. That unreliability will manifest itself as false negatives rather than exceptions which is liable to make it harder to detect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First of all, you can only safely use "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " if you know that "
          },
          {
            "Text": "all",
            "AttrFlags": 4
          },
          {
            "Text": " of the "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects you are testing have been interned. The JLS guarantees that String literals in your source code will have been interned. However, none of the standard Java SE APIs guarantee to return interned strings, apart from "
          },
          {
            "Text": "String.intern(String)",
            "AttrFlags": 2
          },
          {
            "Text": " itself. If you miss just one source of "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects that haven’t been interned, your application will be unreliable. That unreliability will manifest itself as false negatives rather than exceptions which is liable to make it harder to detect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418452,
        "id": "b1cbe3ec-a2de-483e-b583-e319305fecb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418452,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Costs of using ‘intern()’"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Costs of using ‘intern()’"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418453,
        "id": "d2cf0fb2-4022-4c75-84f0-ae1b06583d3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418453,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Under the hood, interning works by maintaining a hash table that contains previously interned "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects. Some kind of weak reference mechanism is used so that the interning hash table does not become a storage leak. While the hash table is implemented in native code (unlike "
            ],
            [
              "HashMap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "HashTable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and so on), the "
            ],
            [
              "intern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calls are still relatively costly in terms of CPU and memory used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Under the hood, interning works by maintaining a hash table that contains previously interned "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects. Some kind of weak reference mechanism is used so that the interning hash table does not become a storage leak. While the hash table is implemented in native code (unlike "
          },
          {
            "Text": "HashMap",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "HashTable",
            "AttrFlags": 2
          },
          {
            "Text": " and so on), the "
          },
          {
            "Text": "intern",
            "AttrFlags": 2
          },
          {
            "Text": " calls are still relatively costly in terms of CPU and memory used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418453,
        "id": "4db8e0e5-d23d-4f8e-9c46-d0738ece374b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418453,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This cost has to be compared with the saving of we are going to get by using "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In fact, we are not going to break even unless each interned string is compared with other strings “a few” times."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This cost has to be compared with the saving of we are going to get by using "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": ". In fact, we are not going to break even unless each interned string is compared with other strings “a few” times."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418453,
        "id": "c2125046-6890-4309-bc1c-1e130aa72571",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418453,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Aside: the few situations where interning is worthwhile tend to be about reducing the memory foot print of an application where the same strings recur many times, "
            ],
            [
              "and",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " those strings have a long lifetime.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Aside: the few situations where interning is worthwhile tend to be about reducing the memory foot print of an application where the same strings recur many times, "
          },
          {
            "Text": "and",
            "AttrFlags": 4
          },
          {
            "Text": " those strings have a long lifetime.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418453,
        "id": "1996eb78-410c-4bb1-b817-9a98797e9c08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418453,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The impact on garbage collection"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The impact on garbage collection"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "9e0ad52b-d206-4282-adc4-1c4c5eaf4a47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to the direct CPU and memory costs described above, interned Strings impact on the garbage collector performance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to the direct CPU and memory costs described above, interned Strings impact on the garbage collector performance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "938853d6-f261-4744-84c9-7e80ae792233",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For versions of Java prior to Java 7, interned strings are held in the “PermGen” space which is collected infrequently. If PermGen needs to be collected, this (typically) triggers a full garbage collection. If the PermGen space fills completely, the JVM crashes, even if there was free space in the regular heap spaces."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For versions of Java prior to Java 7, interned strings are held in the “PermGen” space which is collected infrequently. If PermGen needs to be collected, this (typically) triggers a full garbage collection. If the PermGen space fills completely, the JVM crashes, even if there was free space in the regular heap spaces."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "f7d4121a-7a85-489c-9fa4-2d00f5090864",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java 7, the string pool was moved out of “PermGen” into the normal heap. However, the hash table is still going to be a long-lived data structure, which is going to cause any interned strings to be long-lived. (Even if the interned string objects were allocated in Eden space they would most likely be promoted before they were collected.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java 7, the string pool was moved out of “PermGen” into the normal heap. However, the hash table is still going to be a long-lived data structure, which is going to cause any interned strings to be long-lived. (Even if the interned string objects were allocated in Eden space they would most likely be promoted before they were collected.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "dc8b5ab2-9973-4c43-ad26-a4d1e9b13f1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus in all cases, interning a string is going to prolong its lifetime relative to an ordinary string. That will increase the garbage collection overheads over the lifetime of the JVM."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus in all cases, interning a string is going to prolong its lifetime relative to an ordinary string. That will increase the garbage collection overheads over the lifetime of the JVM."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "6f0fa459-d045-48d7-a0fc-4df670e52ab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second issue is that the hash table needs to use a weak reference mechanism of some kind to prevent string interning leaking memory. But such a mechanism is more work for the garbage collector."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second issue is that the hash table needs to use a weak reference mechanism of some kind to prevent string interning leaking memory. But such a mechanism is more work for the garbage collector."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "1c65da08-a675-4be1-82c8-91f966d34db0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These garbage collection overheads are difficult to quantify, but there is little doubt that they do exist. If you use "
            ],
            [
              "intern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " extensively, they could be significant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These garbage collection overheads are difficult to quantify, but there is little doubt that they do exist. If you use "
          },
          {
            "Text": "intern",
            "AttrFlags": 2
          },
          {
            "Text": " extensively, they could be significant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418454,
        "id": "d1fb6d27-bb94-48d4-818e-c061fe3ed0ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418454,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The string pool hashtable size"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The string pool hashtable size"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418457,
        "id": "80cd33e8-8ba0-4c9a-bcb5-19dc07ebdc88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418457,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "According to "
            ],
            [
              "this source",
              [
                [
                  "a",
                  "http://java-performance.info/string-intern-in-java-6-7-8/"
                ]
              ]
            ],
            [
              ", from Java 6 onwards, the string pool is implemented as fixed sized hash table with chains to deal with strings that hash to the same bucket. In early releases of Java 6, the hash table had a (hard-wired) constant size. A tuning parameter ("
            ],
            [
              "-XX:StringTableSize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") was added as a mid-life update to Java 6. Then in a mid-life update to Java 7, the default size of the pool was changed from "
            ],
            [
              "1009",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "60013",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "According to "
          },
          {
            "Text": "this source",
            "Link": "http://java-performance.info/string-intern-in-java-6-7-8/"
          },
          {
            "Text": ", from Java 6 onwards, the string pool is implemented as fixed sized hash table with chains to deal with strings that hash to the same bucket. In early releases of Java 6, the hash table had a (hard-wired) constant size. A tuning parameter ("
          },
          {
            "Text": "-XX:StringTableSize",
            "AttrFlags": 2
          },
          {
            "Text": ") was added as a mid-life update to Java 6. Then in a mid-life update to Java 7, the default size of the pool was changed from "
          },
          {
            "Text": "1009",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "60013",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418457,
        "id": "fac2bdf1-71ed-491c-a35d-c8f2b344db72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418457,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bottom line is that if you do intend to use "
            ],
            [
              "intern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " intensively in your code, it is "
            ],
            [
              "advisable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to pick a version of Java where the hashtable size is tunable and make sure that you tune the size it appropriately. Otherwise, the performance of "
            ],
            [
              "intern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is liable to degrade as the pool gets larger."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bottom line is that if you do intend to use "
          },
          {
            "Text": "intern",
            "AttrFlags": 2
          },
          {
            "Text": " intensively in your code, it is "
          },
          {
            "Text": "advisable",
            "AttrFlags": 4
          },
          {
            "Text": " to pick a version of Java where the hashtable size is tunable and make sure that you tune the size it appropriately. Otherwise, the performance of "
          },
          {
            "Text": "intern",
            "AttrFlags": 2
          },
          {
            "Text": " is liable to degrade as the pool gets larger."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418457,
        "id": "9b9d2c6d-0e18-414f-90fb-358ec55d97ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418457,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interning as a potential denial of service vector"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interning as a potential denial of service vector"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418457,
        "id": "34c5d03a-ebd7-476e-911a-8be985e3bc29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418457,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The hashcode algorithm for strings is well-known. If you intern strings supplied by malicious users or applications, this could be used as part of a denial of service (DoS) attack. If the malicious agent arranges that all of the strings it provides have the same hash code, this could lead to an unbalanced hash table and "
            ],
            [
              "O(N)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " performance for "
            ],
            [
              "intern",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " … where "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the number of collided strings."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The hashcode algorithm for strings is well-known. If you intern strings supplied by malicious users or applications, this could be used as part of a denial of service (DoS) attack. If the malicious agent arranges that all of the strings it provides have the same hash code, this could lead to an unbalanced hash table and "
          },
          {
            "Text": "O(N)",
            "AttrFlags": 2
          },
          {
            "Text": " performance for "
          },
          {
            "Text": "intern",
            "AttrFlags": 2
          },
          {
            "Text": " … where "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": " is the number of collided strings."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518418458,
        "id": "f45e1f81-703c-49bb-a5d8-1be7c9a4b9d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518418458,
        "parent_id": "d552ac03-24f1-4954-998b-22255d3eacce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(There are simpler / more effective ways to launch a DoS attack against a service. However, this vector could be used if the goal of the DoS attack is to break security, or to evade first-line DoS defences.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(There are simpler / more effective ways to launch a DoS attack against a service. However, this vector could be used if the goal of the DoS attack is to break security, or to evade first-line DoS defences.)"
          }
        ]
      }
    ],
    "title": "040 Pitfall - Interning strings so that you can use is a bad idea"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}