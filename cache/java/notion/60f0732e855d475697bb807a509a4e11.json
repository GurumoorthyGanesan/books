{
  "ID": "60f0732e-855d-4756-97bb-807a509a4e11",
  "Root": {
    "alive": true,
    "content": [
      "b11729a3-9dc7-432e-a303-fe01d57b1296",
      "aefd4a29-8dc2-4b61-ac27-c6846abfccde",
      "6d190242-138a-4cb4-8505-3f5c6fecb4ca",
      "63c5a790-bede-4874-bc75-0d00f4e42ea0",
      "957a5a31-c63e-43b6-b932-29a8b33ab596",
      "5306137c-37f4-4405-b138-0fd7704bc17a",
      "2fe4d004-9a6a-44da-84fd-8481d641e6de",
      "81096de1-e47a-4796-abd8-9eb6a4dd7e17"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461548121,
    "id": "60f0732e-855d-4756-97bb-807a509a4e11",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461548121,
    "parent_id": "0ed5c46b-8e07-44d9-8123-227510c0501a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Creating an immutable version of a type using defensive copying."
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548117,
        "id": "b11729a3-9dc7-432e-a303-fe01d57b1296",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548117,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some basic types and classes in Java are fundamentally mutable. For example, all array types are mutable, and so are classes like "
            ],
            [
              "java.util.Data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This can be awkward in situations where an immutable type is mandated."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some basic types and classes in Java are fundamentally mutable. For example, all array types are mutable, and so are classes like "
          },
          {
            "Text": "java.util.Data",
            "AttrFlags": 2
          },
          {
            "Text": ". This can be awkward in situations where an immutable type is mandated."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548119,
        "id": "aefd4a29-8dc2-4b61-ac27-c6846abfccde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548119,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One way to deal with this is to create an immutable wrapper for the mutable type. Here is a simple wrapper for an array of integers"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One way to deal with this is to create an immutable wrapper for the mutable type. Here is a simple wrapper for an array of integers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548120,
        "id": "6d190242-138a-4cb4-8505-3f5c6fecb4ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548120,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class ImmutableIntArray {\n    private final int[] array;\n    \n    public ImmutableIntArray(int[] array) {\n        this.array = array.clone();\n    }\n\n    public int[] getValue() {\n        return this.clone();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class ImmutableIntArray {\n    private final int[] array;\n    \n    public ImmutableIntArray(int[] array) {\n        this.array = array.clone();\n    }\n\n    public int[] getValue() {\n        return this.clone();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548120,
        "id": "63c5a790-bede-4874-bc75-0d00f4e42ea0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548120,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This class works by using "
            ],
            [
              "defensive copying",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to isolate the mutable state (the "
            ],
            [
              "int[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") from any code that might mutate it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This class works by using "
          },
          {
            "Text": "defensive copying",
            "AttrFlags": 4
          },
          {
            "Text": " to isolate the mutable state (the "
          },
          {
            "Text": "int[]",
            "AttrFlags": 2
          },
          {
            "Text": ") from any code that might mutate it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548120,
        "id": "957a5a31-c63e-43b6-b932-29a8b33ab596",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548120,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The constructor uses "
            ],
            [
              "clone()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to create a distinct copy of the parameter array. If the caller of the constructor subsequent changed the parameter array, it would not affect the state of the "
            ],
            [
              "ImmutableIntArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The constructor uses "
          },
          {
            "Text": "clone()",
            "AttrFlags": 2
          },
          {
            "Text": " to create a distinct copy of the parameter array. If the caller of the constructor subsequent changed the parameter array, it would not affect the state of the "
          },
          {
            "Text": "ImmutableIntArray",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548121,
        "id": "5306137c-37f4-4405-b138-0fd7704bc17a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548121,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "getValue()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method also uses "
            ],
            [
              "clone()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to create the array that is returned. If the caller were to change the result array, it would not affect the state of the "
            ],
            [
              "ImmutableIntArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "getValue()",
            "AttrFlags": 2
          },
          {
            "Text": " method also uses "
          },
          {
            "Text": "clone()",
            "AttrFlags": 2
          },
          {
            "Text": " to create the array that is returned. If the caller were to change the result array, it would not affect the state of the "
          },
          {
            "Text": "ImmutableIntArray",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548121,
        "id": "2fe4d004-9a6a-44da-84fd-8481d641e6de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548121,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We could also add methods to "
            ],
            [
              "ImmutableIntArray",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to perform read-only operations on the wrapped array; e.g. get its length, get the value at a particular index, and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We could also add methods to "
          },
          {
            "Text": "ImmutableIntArray",
            "AttrFlags": 2
          },
          {
            "Text": " to perform read-only operations on the wrapped array; e.g. get its length, get the value at a particular index, and so on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461548121,
        "id": "81096de1-e47a-4796-abd8-9eb6a4dd7e17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461548121,
        "parent_id": "60f0732e-855d-4756-97bb-807a509a4e11",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that an immutable wrapper type implemented this way is not type compatible with the original type. You cannot simply substitute the former for the latter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that an immutable wrapper type implemented this way is not type compatible with the original type. You cannot simply substitute the former for the latter."
          }
        ]
      }
    ],
    "title": "010 Creating an immutable version of a type using defensive copying."
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}