{
  "ID": "a5e82390-8855-4c45-b60a-016f1d8d065f",
  "Root": {
    "alive": true,
    "content": [
      "bac85d73-660f-43d1-8e08-2bc321357092",
      "957534c9-9d2c-45fb-b9b7-239fc0e702e8",
      "6c11863c-e805-43b3-bc31-257309e7dbd8",
      "50851b2a-af2b-42bb-aec9-40224ad79f4a",
      "db3f6647-bef9-42aa-b1cf-df0db0ff8586",
      "e50ed222-7b2b-4a3f-8488-b21fc5e9ea89",
      "8f787b72-00b3-4048-89d8-89f67de40a94",
      "05efcadc-6b37-436f-a397-1a4a3f000d6b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460434088,
    "id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460434088,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "100 Atomic operations"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434082,
        "id": "bac85d73-660f-43d1-8e08-2bc321357092",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434082,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An atomic operation is an operation that is executed “all at once”, without any chance of other threads observing or modifying state during the atomic operation’s execution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An atomic operation is an operation that is executed “all at once”, without any chance of other threads observing or modifying state during the atomic operation’s execution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434085,
        "id": "957534c9-9d2c-45fb-b9b7-239fc0e702e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434085,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lets consider a "
            ],
            [
              "BAD EXAMPLE",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lets consider a "
          },
          {
            "Text": "BAD EXAMPLE",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434085,
        "id": "6c11863c-e805-43b3-bc31-257309e7dbd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434085,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static int t = 0;\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newFixedThreadPool(400); // The high thread count is for demonstration purposes.\n    for (int i = 0; i \u003c 100; i++) {\n        executorService.execute(() -\u003e {\n            t++;\n            System.out.println(MessageFormat.format(\"t: {0}\", t));\n        });\n    }\n    executorService.shutdown();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static int t = 0;\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newFixedThreadPool(400); // The high thread count is for demonstration purposes.\n    for (int i = 0; i \u003c 100; i++) {\n        executorService.execute(() -\u003e {\n            t++;\n            System.out.println(MessageFormat.format(\"t: {0}\", t));\n        });\n    }\n    executorService.shutdown();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434085,
        "id": "50851b2a-af2b-42bb-aec9-40224ad79f4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434085,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, there are two issues. The first issue is that the post increment operator is "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " atomic. It is comprised of multiple operations: get the value, add 1 to the value, set the value. That’s why if we run the example, it is likely that we won’t see "
            ],
            [
              "t: 100",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the output - two threads may concurrently get the value, increment it, and set it: let’s say the value of t is 10, and two threads are incrementing t. Both threads will set the value of t to 11, since the second thread observes the value of t before the first thread had finished incrementing it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, there are two issues. The first issue is that the post increment operator is "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " atomic. It is comprised of multiple operations: get the value, add 1 to the value, set the value. That’s why if we run the example, it is likely that we won’t see "
          },
          {
            "Text": "t: 100",
            "AttrFlags": 2
          },
          {
            "Text": " in the output - two threads may concurrently get the value, increment it, and set it: let’s say the value of t is 10, and two threads are incrementing t. Both threads will set the value of t to 11, since the second thread observes the value of t before the first thread had finished incrementing it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434085,
        "id": "db3f6647-bef9-42aa-b1cf-df0db0ff8586",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434085,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second issue is with how we are observing t. When we are printing the value of t, the value may have already been changed by a different thread after this thread’s increment operation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second issue is with how we are observing t. When we are printing the value of t, the value may have already been changed by a different thread after this thread’s increment operation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434087,
        "id": "e50ed222-7b2b-4a3f-8488-b21fc5e9ea89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434087,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To fix those issues, we’ll use the "
            ],
            [
              "java.util.concurrent.atomic.AtomicInteger",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html"
                ]
              ]
            ],
            [
              ", which has many atomic operations for us to use."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To fix those issues, we’ll use the "
          },
          {
            "Text": "java.util.concurrent.atomic.AtomicInteger",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html"
          },
          {
            "Text": ", which has many atomic operations for us to use."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434087,
        "id": "8f787b72-00b3-4048-89d8-89f67de40a94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434087,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static AtomicInteger t = new AtomicInteger(0);\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newFixedThreadPool(400); // The high thread count is for demonstration purposes.\n    for (int i = 0; i \u003c 100; i++) {\n        executorService.execute(() -\u003e {\n            int currentT = t.incrementAndGet();\n            System.out.println(MessageFormat.format(\"t: {0}\", currentT));\n        });\n    }\n    executorService.shutdown();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static AtomicInteger t = new AtomicInteger(0);\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newFixedThreadPool(400); // The high thread count is for demonstration purposes.\n    for (int i = 0; i \u003c 100; i++) {\n        executorService.execute(() -\u003e {\n            int currentT = t.incrementAndGet();\n            System.out.println(MessageFormat.format(\"t: {0}\", currentT));\n        });\n    }\n    executorService.shutdown();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460434088,
        "id": "05efcadc-6b37-436f-a397-1a4a3f000d6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460434088,
        "parent_id": "a5e82390-8855-4c45-b60a-016f1d8d065f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "incrementAndGet",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method of "
            ],
            [
              "AtomicInteger",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html"
                ]
              ]
            ],
            [
              " atomically increments and returns the new value, thus eliminating the previous race condition. Please note that in this example the lines will still be out of order because we make no effort to sequence the "
            ],
            [
              "println",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calls and that this falls outside the scope of this example, since it would require synchronization and the goal of this example is to show how to use "
            ],
            [
              "AtomicInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to eliminate race conditions concerning state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "incrementAndGet",
            "AttrFlags": 2
          },
          {
            "Text": " method of "
          },
          {
            "Text": "AtomicInteger",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html"
          },
          {
            "Text": " atomically increments and returns the new value, thus eliminating the previous race condition. Please note that in this example the lines will still be out of order because we make no effort to sequence the "
          },
          {
            "Text": "println",
            "AttrFlags": 2
          },
          {
            "Text": " calls and that this falls outside the scope of this example, since it would require synchronization and the goal of this example is to show how to use "
          },
          {
            "Text": "AtomicInteger",
            "AttrFlags": 2
          },
          {
            "Text": " to eliminate race conditions concerning state."
          }
        ]
      }
    ],
    "title": "100 Atomic operations"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}