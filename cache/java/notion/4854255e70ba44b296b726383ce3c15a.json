{
  "ID": "4854255e-70ba-44b2-96b7-26383ce3c15a",
  "Root": {
    "alive": true,
    "content": [
      "ffe23b43-ee8f-4ef3-8190-d878084165d1",
      "083866b4-61ca-49e9-98e5-bf3c04f9b2aa",
      "4d1feb2a-bf1a-4269-a56c-19290700066e",
      "f703c619-81b6-483a-944c-bb5c5bad41a7",
      "462c4fe4-1f74-45a1-a957-ed0ea97e9f53",
      "fda906a0-90de-4b3a-97a2-e9c6b65f885c",
      "a2210cf1-7b90-4c68-893c-0faea990c9d4",
      "12b2678b-279f-48fa-b817-8331604e08d3",
      "b8b39d9b-acb3-44ff-b5f0-8cc3d67c7d0a",
      "b024d6fc-01a9-4612-9332-275bcdcf985b",
      "e3c599ee-06b7-4d03-b50c-743682d5371b",
      "8bd5940a-d856-4f0c-8eb6-05d715e27977"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460096073,
    "id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519340000,
    "parent_id": "aaf522ec-ec58-4c19-b129-bf870a37c471",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "110 Narrowing and Widening of object references"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096067,
        "id": "ffe23b43-ee8f-4ef3-8190-d878084165d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096067,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Casting an instance of a base class to a subclass as in : "
            ],
            [
              "b = (B) a;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called "
            ],
            [
              "narrowing",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (as you are trying to narrow the base class object to a more specific class object) and needs an explicit type-cast."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Casting an instance of a base class to a subclass as in : "
          },
          {
            "Text": "b = (B) a;",
            "AttrFlags": 2
          },
          {
            "Text": " is called "
          },
          {
            "Text": "narrowing",
            "AttrFlags": 4
          },
          {
            "Text": " (as you are trying to narrow the base class object to a more specific class object) and needs an explicit type-cast."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096070,
        "id": "083866b4-61ca-49e9-98e5-bf3c04f9b2aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096070,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Casting an instance of a subclass to a base class as in: "
            ],
            [
              "A a = b;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called "
            ],
            [
              "widening",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and does not need a type-cast."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Casting an instance of a subclass to a base class as in: "
          },
          {
            "Text": "A a = b;",
            "AttrFlags": 2
          },
          {
            "Text": " is called "
          },
          {
            "Text": "widening",
            "AttrFlags": 4
          },
          {
            "Text": " and does not need a type-cast."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096071,
        "id": "4d1feb2a-bf1a-4269-a56c-19290700066e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096071,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To illustrate, consider the following class declarations, and test code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To illustrate, consider the following class declarations, and test code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096071,
        "id": "f703c619-81b6-483a-944c-bb5c5bad41a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096071,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Vehicle {\n}\n\nclass Car extends Vehicle {\n}\n\nclass Truck extends Vehicle {\n}\n\nclass MotorCycle extends Vehicle {\n}\n\nclass Test {\n\n    public static void main(String[] args) {\n    \n        Vehicle vehicle = new Car();\n        Car car = new Car();        \n    \n        vehicle = car; // is valid, no cast needed\n\n        Car c = vehicle // not valid\n        Car c = (Car) vehicle; //valid\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Vehicle {\n}\n\nclass Car extends Vehicle {\n}\n\nclass Truck extends Vehicle {\n}\n\nclass MotorCycle extends Vehicle {\n}\n\nclass Test {\n\n    public static void main(String[] args) {\n    \n        Vehicle vehicle = new Car();\n        Car car = new Car();        \n    \n        vehicle = car; // is valid, no cast needed\n\n        Car c = vehicle // not valid\n        Car c = (Car) vehicle; //valid\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096071,
        "id": "462c4fe4-1f74-45a1-a957-ed0ea97e9f53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096071,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The statement "
            ],
            [
              "Vehicle vehicle = new Car();",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a valid Java statement. Every instance of "
            ],
            [
              "Car",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also a "
            ],
            [
              "Vehicle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, the assignment is legal without the need for an explicit type-cast."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The statement "
          },
          {
            "Text": "Vehicle vehicle = new Car();",
            "AttrFlags": 2
          },
          {
            "Text": " is a valid Java statement. Every instance of "
          },
          {
            "Text": "Car",
            "AttrFlags": 2
          },
          {
            "Text": " is also a "
          },
          {
            "Text": "Vehicle",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, the assignment is legal without the need for an explicit type-cast."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096072,
        "id": "fda906a0-90de-4b3a-97a2-e9c6b65f885c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096072,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the other hand, "
            ],
            [
              "Car c = vehicle;",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not valid. The static type of the "
            ],
            [
              "vehicle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable is "
            ],
            [
              "Vehicle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which means that it could refer to an instance of "
            ],
            [
              "Car",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", Truck"
            ],
            [
              ",",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "MotorCycle"
            ],
            [
              ", or any other current or future subclass of",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Vehicle"
            ],
            [
              ". (Or indeed, an instance of",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Vehicle"
            ],
            [
              "itself, since we did not declare it as an",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "abstract"
            ],
            [
              "class.) The assignment cannot be allowed, since that might lead to",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "car"
            ],
            [
              "referring to a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Truck` instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the other hand, "
          },
          {
            "Text": "Car c = vehicle;",
            "AttrFlags": 2
          },
          {
            "Text": " is not valid. The static type of the "
          },
          {
            "Text": "vehicle",
            "AttrFlags": 2
          },
          {
            "Text": " variable is "
          },
          {
            "Text": "Vehicle",
            "AttrFlags": 2
          },
          {
            "Text": " which means that it could refer to an instance of "
          },
          {
            "Text": "Car",
            "AttrFlags": 2
          },
          {
            "Text": ", Truck"
          },
          {
            "Text": ",",
            "AttrFlags": 2
          },
          {
            "Text": "MotorCycle"
          },
          {
            "Text": ", or any other current or future subclass of",
            "AttrFlags": 2
          },
          {
            "Text": "Vehicle"
          },
          {
            "Text": ". (Or indeed, an instance of",
            "AttrFlags": 2
          },
          {
            "Text": "Vehicle"
          },
          {
            "Text": "itself, since we did not declare it as an",
            "AttrFlags": 2
          },
          {
            "Text": "abstract"
          },
          {
            "Text": "class.) The assignment cannot be allowed, since that might lead to",
            "AttrFlags": 2
          },
          {
            "Text": "car"
          },
          {
            "Text": "referring to a",
            "AttrFlags": 2
          },
          {
            "Text": "Truck` instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096072,
        "id": "a2210cf1-7b90-4c68-893c-0faea990c9d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096072,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To prevent this situation, we need to add an explicit type-cast:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To prevent this situation, we need to add an explicit type-cast:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096072,
        "id": "12b2678b-279f-48fa-b817-8331604e08d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096072,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Car c = (Car) vehicle;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Car c = (Car) vehicle;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096072,
        "id": "b8b39d9b-acb3-44ff-b5f0-8cc3d67c7d0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096072,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The type-cast tells the compiler that we "
            ],
            [
              "expect",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the value of "
            ],
            [
              "vehicle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be a "
            ],
            [
              "Car",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a subclass of "
            ],
            [
              "Car",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If necessary, compiler will insert code to perform a run-time type check. If the check fails, then a "
            ],
            [
              "ClassCastException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be thrown when the code is executed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The type-cast tells the compiler that we "
          },
          {
            "Text": "expect",
            "AttrFlags": 4
          },
          {
            "Text": " the value of "
          },
          {
            "Text": "vehicle",
            "AttrFlags": 2
          },
          {
            "Text": " to be a "
          },
          {
            "Text": "Car",
            "AttrFlags": 2
          },
          {
            "Text": " or a subclass of "
          },
          {
            "Text": "Car",
            "AttrFlags": 2
          },
          {
            "Text": ". If necessary, compiler will insert code to perform a run-time type check. If the check fails, then a "
          },
          {
            "Text": "ClassCastException",
            "AttrFlags": 2
          },
          {
            "Text": " will be thrown when the code is executed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096072,
        "id": "b024d6fc-01a9-4612-9332-275bcdcf985b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096072,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that not all type-casts are valid. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that not all type-casts are valid. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096072,
        "id": "e3c599ee-06b7-4d03-b50c-743682d5371b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096072,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String s = (String) vehicle;  // not valid"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String s = (String) vehicle;  // not valid",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460096073,
        "id": "8bd5940a-d856-4f0c-8eb6-05d715e27977",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460096073,
        "parent_id": "4854255e-70ba-44b2-96b7-26383ce3c15a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Java compiler knows that an instance that is type compatible with "
            ],
            [
              "Vehicle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "cannot ever be",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " type compatible with "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The type-cast could never succeed, and the JLS mandates that this gives in a compilation error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Java compiler knows that an instance that is type compatible with "
          },
          {
            "Text": "Vehicle",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "cannot ever be",
            "AttrFlags": 4
          },
          {
            "Text": " type compatible with "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ". The type-cast could never succeed, and the JLS mandates that this gives in a compilation error."
          }
        ]
      }
    ],
    "title": "110 Narrowing and Widening of object references"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}