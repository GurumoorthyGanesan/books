{
  "ID": "45d24846-654b-48a0-b257-2646b88795b1",
  "Root": {
    "alive": true,
    "content": [
      "5234a411-6738-410f-bec0-ea5b32cf6116",
      "c38a8adf-1022-423a-bec0-d8e7e988d424",
      "d154a1d2-e1ec-427b-9935-1dffdff91bf4",
      "152505a0-fb73-412f-af43-6222abe4bbac",
      "75b95c6a-87c0-43ee-adb5-ed1e9282da6f",
      "2a6a3e8f-0d01-4db0-aac8-17ec100d9d33",
      "41bd5433-7506-4636-8b31-c7324c03f220",
      "cc965a70-a07b-4726-9513-3fbd1a5cb8ef",
      "c53055b0-dc7a-4df6-9a27-e381a25a088f",
      "574381f7-4535-4d5b-82d3-00c877f55103",
      "2e05a174-f867-446c-b5f7-26ca98ff9d01",
      "e73887f4-463b-46b8-88eb-5266ce6224f2",
      "d5613dd8-f861-41ab-98dc-8be59ae403fb",
      "ecfee41d-a6ec-462c-a6f8-4d570261ea3d",
      "400953a0-17fa-45b8-9b79-4b4912c5e987",
      "53ceef76-7d3e-4b42-8871-314d0f562797",
      "10012159-53c0-4be7-a9e8-85351d5a2d1c",
      "a119167a-90a8-4aa3-b967-5c78a5eb51b2",
      "92544cc5-0ace-4d55-bbbb-b8b224b4d68e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460856915,
    "id": "45d24846-654b-48a0-b257-2646b88795b1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460856915,
    "parent_id": "efc357da-0d0e-4f18-820d-fb1e40a75c9e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Evil Java hacks with Reflection"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856907,
        "id": "5234a411-6738-410f-bec0-ea5b32cf6116",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856907,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Reflection API could be used to change values of private and final fields even in the JDK default library. This could be used to manipulate the behaviour of some well known classes as we will see."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Reflection API could be used to change values of private and final fields even in the JDK default library. This could be used to manipulate the behaviour of some well known classes as we will see."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856910,
        "id": "c38a8adf-1022-423a-bec0-d8e7e988d424",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856910,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What is not possible",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What is not possible",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856912,
        "id": "d154a1d2-e1ec-427b-9935-1dffdff91bf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856912,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lets start first with the only limitation means the only field we can’t change with Reflection. That is the Java "
            ],
            [
              "SecurityManager",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is declared in "
            ],
            [
              "java.lang.System",
              [
                [
                  "a",
                  "http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/lang/System.java"
                ]
              ]
            ],
            [
              " as"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lets start first with the only limitation means the only field we can’t change with Reflection. That is the Java "
          },
          {
            "Text": "SecurityManager",
            "AttrFlags": 2
          },
          {
            "Text": ". It is declared in "
          },
          {
            "Text": "java.lang.System",
            "Link": "http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/lang/System.java"
          },
          {
            "Text": " as"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856912,
        "id": "152505a0-fb73-412f-af43-6222abe4bbac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856912,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static volatile SecurityManager security = null;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static volatile SecurityManager security = null;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856912,
        "id": "75b95c6a-87c0-43ee-adb5-ed1e9282da6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856912,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But it won’t be listed in the System class if we run this code"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But it won’t be listed in the System class if we run this code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856912,
        "id": "2a6a3e8f-0d01-4db0-aac8-17ec100d9d33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856912,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(Field f : System.class.getDeclaredFields())\n    System.out.println(f);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(Field f : System.class.getDeclaredFields())\n    System.out.println(f);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856913,
        "id": "41bd5433-7506-4636-8b31-c7324c03f220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856913,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thats because of the "
            ],
            [
              "fieldFilterMap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "sun.reflect.Reflection",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/sun/reflect/Reflection.java"
                ]
              ]
            ],
            [
              " that holds the map itself and the security field in the "
            ],
            [
              "System.class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and protects them against any access with Reflection. So we could not deactivate the "
            ],
            [
              "SecurityManager",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thats because of the "
          },
          {
            "Text": "fieldFilterMap",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "sun.reflect.Reflection",
            "AttrFlags": 2,
            "Link": "http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/sun/reflect/Reflection.java"
          },
          {
            "Text": " that holds the map itself and the security field in the "
          },
          {
            "Text": "System.class",
            "AttrFlags": 2
          },
          {
            "Text": " and protects them against any access with Reflection. So we could not deactivate the "
          },
          {
            "Text": "SecurityManager",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856913,
        "id": "cc965a70-a07b-4726-9513-3fbd1a5cb8ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856913,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Crazy Strings",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Crazy Strings",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856913,
        "id": "c53055b0-dc7a-4df6-9a27-e381a25a088f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856913,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each Java String is represented by the JVM as an instance of the "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class. However, in some situations the JVM saves heap space by using the same instance for Strings that are. This happens for string literals, and also for strings that have been “interned” by calling "
            ],
            [
              "String.intern()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". So if you have "
            ],
            [
              "\"hello\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in your code multiple times it is always the same object instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each Java String is represented by the JVM as an instance of the "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " class. However, in some situations the JVM saves heap space by using the same instance for Strings that are. This happens for string literals, and also for strings that have been “interned” by calling "
          },
          {
            "Text": "String.intern()",
            "AttrFlags": 2
          },
          {
            "Text": ". So if you have "
          },
          {
            "Text": "\"hello\"",
            "AttrFlags": 2
          },
          {
            "Text": " in your code multiple times it is always the same object instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856913,
        "id": "574381f7-4535-4d5b-82d3-00c877f55103",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856913,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Strings are supposed to be immutable, but it is possible to use “evil” reflection to change them. The example below show how we can change the characters in a String by replacing its "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " field."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Strings are supposed to be immutable, but it is possible to use “evil” reflection to change them. The example below show how we can change the characters in a String by replacing its "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " field."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856913,
        "id": "2e05a174-f867-446c-b5f7-26ca98ff9d01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856913,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CrazyStrings {\n    static {\n        try {\n            Field f = String.class.getDeclaredField(\"value\");\n            f.setAccessible(true);\n            f.set(\"hello\", \"you stink!\".toCharArray());\n        } catch (Exception e) {\n        }\n    }\n    public static void main(String args[])  {\n        System.out.println(\"hello\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CrazyStrings {\n    static {\n        try {\n            Field f = String.class.getDeclaredField(\"value\");\n            f.setAccessible(true);\n            f.set(\"hello\", \"you stink!\".toCharArray());\n        } catch (Exception e) {\n        }\n    }\n    public static void main(String args[])  {\n        System.out.println(\"hello\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856913,
        "id": "e73887f4-463b-46b8-88eb-5266ce6224f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856913,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So this code will print “you stink!”"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So this code will print “you stink!”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856914,
        "id": "d5613dd8-f861-41ab-98dc-8be59ae403fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856914,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 = 42",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 = 42",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856914,
        "id": "ecfee41d-a6ec-462c-a6f8-4d570261ea3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856914,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The same idea could be used with the Integer Class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The same idea could be used with the Integer Class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856914,
        "id": "400953a0-17fa-45b8-9b79-4b4912c5e987",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856914,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CrazyMath {\n    static {\n        try {\n            Field value = Integer.class.getDeclaredField(\"value\");    \n            value.setAccessible(true);          \n            value.setInt(Integer.valueOf(1), 42);      \n        } catch (Exception e) {\n        }\n    }\n    public static void main(String args[])  {\n        System.out.println(Integer.valueOf(1));\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CrazyMath {\n    static {\n        try {\n            Field value = Integer.class.getDeclaredField(\"value\");    \n            value.setAccessible(true);          \n            value.setInt(Integer.valueOf(1), 42);      \n        } catch (Exception e) {\n        }\n    }\n    public static void main(String args[])  {\n        System.out.println(Integer.valueOf(1));\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856914,
        "id": "53ceef76-7d3e-4b42-8871-314d0f562797",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856914,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Everything is true",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Everything is true",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856914,
        "id": "10012159-53c0-4be7-a9e8-85351d5a2d1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856914,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And according to "
            ],
            [
              "this stackoverflow post",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection"
                ]
              ]
            ],
            [
              " we can use reflection to do something really evil."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And according to "
          },
          {
            "Text": "this stackoverflow post",
            "Link": "http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection"
          },
          {
            "Text": " we can use reflection to do something really evil."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856914,
        "id": "a119167a-90a8-4aa3-b967-5c78a5eb51b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856914,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Evil {    \n    static {\n        try {\n            Field field = Boolean.class.getField(\"FALSE\");\n            field.setAccessible(true);\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() \u0026 ~Modifier.FINAL);\n            field.set(null, true);\n        } catch (Exception e) {\n        }\n    }\n    public static void main(String args[]){\n        System.out.format(\"Everything is %s\", false);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Evil {    \n    static {\n        try {\n            Field field = Boolean.class.getField(\"FALSE\");\n            field.setAccessible(true);\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() \u0026 ~Modifier.FINAL);\n            field.set(null, true);\n        } catch (Exception e) {\n        }\n    }\n    public static void main(String args[]){\n        System.out.format(\"Everything is %s\", false);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460856915,
        "id": "92544cc5-0ace-4d55-bbbb-b8b224b4d68e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460856915,
        "parent_id": "45d24846-654b-48a0-b257-2646b88795b1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that what we are doing here is going to cause the JVM to behave in inexplicable ways. This is very dangerous."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that what we are doing here is going to cause the JVM to behave in inexplicable ways. This is very dangerous."
          }
        ]
      }
    ],
    "title": "050 Evil Java hacks with Reflection"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}