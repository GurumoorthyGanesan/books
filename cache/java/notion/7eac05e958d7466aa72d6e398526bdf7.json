{
  "ID": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
  "Root": {
    "alive": true,
    "content": [
      "bc2f6e8b-593e-438d-a8d6-9be3eec792e5",
      "b29bc251-1cfd-4de5-8687-d58228da6f5e",
      "72b27f76-cf88-4cfd-ad49-ff2ebb616de7",
      "4f3f026a-50e3-4e7a-b8d4-b093805a84be",
      "bbac21d5-53af-4b18-b173-0cd9f2df3b69",
      "edf59d6b-0164-4a0b-843c-738535653e62",
      "d2888f32-aad0-4592-8580-225dddb42a59",
      "c1462616-5c5c-4f99-997d-cde293809e58",
      "b4b78b7d-78f1-42e7-9225-85e7a7334505",
      "e9336e2e-1da0-40b8-acfb-d2124a793721",
      "33d84981-ed08-4ea1-bd35-367644c12528",
      "22489f08-bf6c-4e0f-af31-256b85363c50"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550517996023,
    "id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550517996023,
    "parent_id": "65b3b4cb-dbb9-4dfb-9c83-9429dfa4e76a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Pitfall memory leaks"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996005,
        "id": "bc2f6e8b-593e-438d-a8d6-9be3eec792e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996005,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java manages memory automatically. You are not required to free memory manually. An object’s memory on the heap may be freed by a garbage collector when the object is no longer "
            ],
            [
              "reachable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by a live thread."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java manages memory automatically. You are not required to free memory manually. An object’s memory on the heap may be freed by a garbage collector when the object is no longer "
          },
          {
            "Text": "reachable",
            "AttrFlags": 4
          },
          {
            "Text": " by a live thread."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996013,
        "id": "b29bc251-1cfd-4de5-8687-d58228da6f5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996013,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, you can prevent memory from being freed, by allowing objects to be reachable that are no longer needed. Whether you call this a memory leak or memory packratting, the result is the same – an unnecessary increase in allocated memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, you can prevent memory from being freed, by allowing objects to be reachable that are no longer needed. Whether you call this a memory leak or memory packratting, the result is the same – an unnecessary increase in allocated memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996014,
        "id": "72b27f76-cf88-4cfd-ad49-ff2ebb616de7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996014,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Memory leaks in Java can happen in various ways, but the most common reason is everlasting object references, because the garbage collector can’t remove objects from the heap while there are still references to them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Memory leaks in Java can happen in various ways, but the most common reason is everlasting object references, because the garbage collector can’t remove objects from the heap while there are still references to them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996014,
        "id": "4f3f026a-50e3-4e7a-b8d4-b093805a84be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996014,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static fields",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static fields",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996020,
        "id": "bbac21d5-53af-4b18-b173-0cd9f2df3b69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996020,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One can create such a reference by defining class with a "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " field containing some collection of objects, and forgetting to set that "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " field to "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after the collection is no longer needed. "
            ],
            [
              "static",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields are considered GC roots and are never collected. Another issue is leaks in non-heap memory when "
            ],
            [
              "JNI",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Java_Native_Interface"
                ]
              ]
            ],
            [
              " is used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One can create such a reference by defining class with a "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " field containing some collection of objects, and forgetting to set that "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " field to "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " after the collection is no longer needed. "
          },
          {
            "Text": "static",
            "AttrFlags": 2
          },
          {
            "Text": " fields are considered GC roots and are never collected. Another issue is leaks in non-heap memory when "
          },
          {
            "Text": "JNI",
            "Link": "https://en.wikipedia.org/wiki/Java_Native_Interface"
          },
          {
            "Text": " is used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996020,
        "id": "edf59d6b-0164-4a0b-843c-738535653e62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996020,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Classloader leak",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Classloader leak",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996021,
        "id": "d2888f32-aad0-4592-8580-225dddb42a59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996021,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By far, though, the most insidious type of memory leak is the "
            ],
            [
              "classloader leak",
              [
                [
                  "a",
                  "https://zeroturnaround.com/rebellabs/rjc201/"
                ]
              ]
            ],
            [
              ". A classloader holds a reference to every class it has loaded, and every class holds a reference to its classloader. Every object holds a reference to its class as well. Therefore, if even a "
            ],
            [
              "single",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " object of a class loaded by a classloader is not garbage, not a single class that that classloader has loaded can be collected. Since each class also refers to its static fields, they cannot be collected either."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By far, though, the most insidious type of memory leak is the "
          },
          {
            "Text": "classloader leak",
            "Link": "https://zeroturnaround.com/rebellabs/rjc201/"
          },
          {
            "Text": ". A classloader holds a reference to every class it has loaded, and every class holds a reference to its classloader. Every object holds a reference to its class as well. Therefore, if even a "
          },
          {
            "Text": "single",
            "AttrFlags": 4
          },
          {
            "Text": " object of a class loaded by a classloader is not garbage, not a single class that that classloader has loaded can be collected. Since each class also refers to its static fields, they cannot be collected either."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996022,
        "id": "c1462616-5c5c-4f99-997d-cde293809e58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996022,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Accumulation leak",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " The accumulation leak example could look like the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Accumulation leak",
            "AttrFlags": 1
          },
          {
            "Text": " The accumulation leak example could look like the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996022,
        "id": "b4b78b7d-78f1-42e7-9225-85e7a7334505",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996022,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\nfinal Deque\u003cBigDecimal\u003e numbers = new LinkedBlockingDeque\u003c\u003e();\nfinal BigDecimal divisor = new BigDecimal(51);\n\nscheduledExecutorService.scheduleAtFixedRate(() -\u003e {\n    BigDecimal number = numbers.peekLast();\n    if (number != null \u0026\u0026 number.remainder(divisor).byteValue() == 0) {\n        System.out.println(\"Number: \" + number);\n        System.out.println(\"Deque size: \" + numbers.size());\n    }\n}, 10, 10, TimeUnit.MILLISECONDS);\n\nscheduledExecutorService.scheduleAtFixedRate(() -\u003e {\n    numbers.add(new BigDecimal(System.currentTimeMillis()));\n}, 10, 10, TimeUnit.MILLISECONDS);\n\ntry {\n    scheduledExecutorService.awaitTermination(1, TimeUnit.DAYS);\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\nfinal Deque\u003cBigDecimal\u003e numbers = new LinkedBlockingDeque\u003c\u003e();\nfinal BigDecimal divisor = new BigDecimal(51);\n\nscheduledExecutorService.scheduleAtFixedRate(() -\u003e {\n    BigDecimal number = numbers.peekLast();\n    if (number != null \u0026\u0026 number.remainder(divisor).byteValue() == 0) {\n        System.out.println(\"Number: \" + number);\n        System.out.println(\"Deque size: \" + numbers.size());\n    }\n}, 10, 10, TimeUnit.MILLISECONDS);\n\nscheduledExecutorService.scheduleAtFixedRate(() -\u003e {\n    numbers.add(new BigDecimal(System.currentTimeMillis()));\n}, 10, 10, TimeUnit.MILLISECONDS);\n\ntry {\n    scheduledExecutorService.awaitTermination(1, TimeUnit.DAYS);\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996022,
        "id": "e9336e2e-1da0-40b8-acfb-d2124a793721",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996022,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example creates two scheduled tasks. The first task takes the last number from a deque called "
            ],
            [
              "numbers",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and, if the number is divisible by 51, it prints the number and the deque’s size. The second task puts numbers into the deque. Both tasks are scheduled at a fixed rate, and they run every 10 ms."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example creates two scheduled tasks. The first task takes the last number from a deque called "
          },
          {
            "Text": "numbers",
            "AttrFlags": 2
          },
          {
            "Text": ", and, if the number is divisible by 51, it prints the number and the deque’s size. The second task puts numbers into the deque. Both tasks are scheduled at a fixed rate, and they run every 10 ms."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996022,
        "id": "33d84981-ed08-4ea1-bd35-367644c12528",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996022,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the code is executed, you’ll see that the size of the deque is permanently increasing. This will eventually cause the deque to be filled with objects that consume all available heap memory."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the code is executed, you’ll see that the size of the deque is permanently increasing. This will eventually cause the deque to be filled with objects that consume all available heap memory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517996023,
        "id": "22489f08-bf6c-4e0f-af31-256b85363c50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517996023,
        "parent_id": "7eac05e9-58d7-466a-a72d-6e398526bdf7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To prevent this while preserving the semantics of this program, we can use a different method for taking numbers from the deque: "
            ],
            [
              "pollLast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Contrary to the method "
            ],
            [
              "peekLast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "pollLast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the element and removes it from the deque while "
            ],
            [
              "peekLast",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only returns the last element."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To prevent this while preserving the semantics of this program, we can use a different method for taking numbers from the deque: "
          },
          {
            "Text": "pollLast",
            "AttrFlags": 2
          },
          {
            "Text": ". Contrary to the method "
          },
          {
            "Text": "peekLast",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "pollLast",
            "AttrFlags": 2
          },
          {
            "Text": " returns the element and removes it from the deque while "
          },
          {
            "Text": "peekLast",
            "AttrFlags": 2
          },
          {
            "Text": " only returns the last element."
          }
        ]
      }
    ],
    "title": "060 Pitfall memory leaks"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}