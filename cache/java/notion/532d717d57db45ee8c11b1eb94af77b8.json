{
  "ID": "532d717d-57db-45ee-8c11-b1eb94af77b8",
  "Root": {
    "alive": true,
    "content": [
      "b8dc5392-c83d-4fc6-898e-c9b34bb0e09f",
      "1aae691a-79c5-4fcf-b9c2-08500b0a1d52",
      "6f4e470e-821b-4481-9a04-62c710f76c7b",
      "058d72f9-f91d-4821-8d3a-e0b30ae0e27b",
      "35de6f3f-8697-412e-bf58-c075282e75ee",
      "a21b6ba5-2821-436b-bf9a-6297154e429c",
      "6f79f49a-3a92-4b21-b9af-665efa499c36",
      "6d2b52cd-b8eb-4d7b-ae6a-1797bb75fe54",
      "971ec452-c2e8-46f9-9281-0350cb0a6594",
      "2515cdb3-951d-47b5-9e39-fe7e1b3dc5f0",
      "c0406e5c-20f8-4335-b052-e44ffd76b067",
      "c97121fd-6e80-4a79-b25b-c2ea01caee38",
      "eb41ef86-86e7-4f15-8bf8-706847bc61e5",
      "b4f070cc-c1cb-4e64-99c9-2ff5f683700f",
      "6954e9b5-290a-4433-8754-ed8feaec6ab9",
      "3b5df0d1-909a-43a1-8b95-181f5f95b6ae",
      "9248db86-8995-4d8f-9a29-8398adf80854"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461146143,
    "id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461146143,
    "parent_id": "6f2fa7ab-2d05-4439-ac96-63b175867e14",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Deep recursion is problematic in Java"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146136,
        "id": "b8dc5392-c83d-4fc6-898e-c9b34bb0e09f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146136,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following naive method for adding two positive numbers using recursion:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following naive method for adding two positive numbers using recursion:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146136,
        "id": "1aae691a-79c5-4fcf-b9c2-08500b0a1d52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146136,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static int add(int a, int b) {\n    if (a == 0) {\n        return b;\n    } else {\n        return add(a - 1, b + 1);  // TAIL CALL\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static int add(int a, int b) {\n    if (a == 0) {\n        return b;\n    } else {\n        return add(a - 1, b + 1);  // TAIL CALL\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146137,
        "id": "6f4e470e-821b-4481-9a04-62c710f76c7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146137,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is algorithmically correct, but it has a major problem. If you call "
            ],
            [
              "add",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a large "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it will crash with a "
            ],
            [
              "StackOverflowError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", on any version of Java up to (at least) Java 9."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is algorithmically correct, but it has a major problem. If you call "
          },
          {
            "Text": "add",
            "AttrFlags": 2
          },
          {
            "Text": " with a large "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ", it will crash with a "
          },
          {
            "Text": "StackOverflowError",
            "AttrFlags": 2
          },
          {
            "Text": ", on any version of Java up to (at least) Java 9."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146139,
        "id": "058d72f9-f91d-4821-8d3a-e0b30ae0e27b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146139,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a typical functional programming language (and many other languages) the compiler optimizes "
            ],
            [
              "tail recursion",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/914/recursion/12829/types-of-recursion#t=201611060141063837492"
                ]
              ]
            ],
            [
              ". The compiler would notice that the call to "
            ],
            [
              "add",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (at the tagged line) is a "
            ],
            [
              "tail call",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Tail_call"
                ]
              ]
            ],
            [
              ", and would effectively rewrite the recursion as a loop. This transformation is called tail-call elimination."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a typical functional programming language (and many other languages) the compiler optimizes "
          },
          {
            "Text": "tail recursion",
            "Link": "http://stackoverflow.com/documentation/java/914/recursion/12829/types-of-recursion#t=201611060141063837492"
          },
          {
            "Text": ". The compiler would notice that the call to "
          },
          {
            "Text": "add",
            "AttrFlags": 2
          },
          {
            "Text": " (at the tagged line) is a "
          },
          {
            "Text": "tail call",
            "Link": "https://en.wikipedia.org/wiki/Tail_call"
          },
          {
            "Text": ", and would effectively rewrite the recursion as a loop. This transformation is called tail-call elimination."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146139,
        "id": "35de6f3f-8697-412e-bf58-c075282e75ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146139,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, current generation Java compilers do not perform tail call elimination. (This is not a simple oversight. There are substantial technical reasons for this; see below.) Instead, each recursive call of "
            ],
            [
              "add",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " causes a new frame to be allocated on the thread’s stack. For example, if you call "
            ],
            [
              "add(1000, 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it will take "
            ],
            [
              "1000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " recursive calls to arrive at the answer "
            ],
            [
              "1001",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, current generation Java compilers do not perform tail call elimination. (This is not a simple oversight. There are substantial technical reasons for this; see below.) Instead, each recursive call of "
          },
          {
            "Text": "add",
            "AttrFlags": 2
          },
          {
            "Text": " causes a new frame to be allocated on the thread’s stack. For example, if you call "
          },
          {
            "Text": "add(1000, 1)",
            "AttrFlags": 2
          },
          {
            "Text": ", it will take "
          },
          {
            "Text": "1000",
            "AttrFlags": 2
          },
          {
            "Text": " recursive calls to arrive at the answer "
          },
          {
            "Text": "1001",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146140,
        "id": "a21b6ba5-2821-436b-bf9a-6297154e429c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146140,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem is that the size of Java thread stack is fixed when the thread is created. (This includes the “main” thread in a single-threaded program.) If too many stack frames are allocated the stack will overflow. The JVM will detect this and throw a "
            ],
            [
              "StackOverflowError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem is that the size of Java thread stack is fixed when the thread is created. (This includes the “main” thread in a single-threaded program.) If too many stack frames are allocated the stack will overflow. The JVM will detect this and throw a "
          },
          {
            "Text": "StackOverflowError",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146140,
        "id": "6f79f49a-3a92-4b21-b9af-665efa499c36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146140,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One approach to dealing with this is to simply use a bigger stack. There are JVM options that control the default size of a stack, and you can also specify the stack size as a "
            ],
            [
              "Thread",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructor parameter. Unfortunately, this only “puts off” the stack overflow. If you need to do a computation that requires an even larger stack, then the "
            ],
            [
              "StackOverflowError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " comes back."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One approach to dealing with this is to simply use a bigger stack. There are JVM options that control the default size of a stack, and you can also specify the stack size as a "
          },
          {
            "Text": "Thread",
            "AttrFlags": 2
          },
          {
            "Text": " constructor parameter. Unfortunately, this only “puts off” the stack overflow. If you need to do a computation that requires an even larger stack, then the "
          },
          {
            "Text": "StackOverflowError",
            "AttrFlags": 2
          },
          {
            "Text": " comes back."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146140,
        "id": "6d2b52cd-b8eb-4d7b-ae6a-1797bb75fe54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146140,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The real solution is to identify recursive algorithms where deep recursion is likely, and "
            ],
            [
              "manually",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " perform the tail-call optimization at the source code level. For example, our "
            ],
            [
              "add",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method can be rewritten as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The real solution is to identify recursive algorithms where deep recursion is likely, and "
          },
          {
            "Text": "manually",
            "AttrFlags": 4
          },
          {
            "Text": " perform the tail-call optimization at the source code level. For example, our "
          },
          {
            "Text": "add",
            "AttrFlags": 2
          },
          {
            "Text": " method can be rewritten as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146140,
        "id": "971ec452-c2e8-46f9-9281-0350cb0a6594",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146140,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static int add(int a, int b) {\n    while (a != 0) {\n       a = a - 1;\n       b = b + 1;\n    }\n    return b;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static int add(int a, int b) {\n    while (a != 0) {\n       a = a - 1;\n       b = b + 1;\n    }\n    return b;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146140,
        "id": "2515cdb3-951d-47b5-9e39-fe7e1b3dc5f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146140,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Obviously, there are better ways to add two integers. The above is simply to illustrate the effect of manual tail-call elimination.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Obviously, there are better ways to add two integers. The above is simply to illustrate the effect of manual tail-call elimination.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146141,
        "id": "c0406e5c-20f8-4335-b052-e44ffd76b067",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146141,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why tail-call elimination is not implemented in Java (yet)"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why tail-call elimination is not implemented in Java (yet)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146141,
        "id": "c97121fd-6e80-4a79-b25b-c2ea01caee38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146141,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are a number of reasons why adding tail call elimination to Java is not easy. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are a number of reasons why adding tail call elimination to Java is not easy. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146141,
        "id": "eb41ef86-86e7-4f15-8bf8-706847bc61e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146141,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some code could rely on "
            ],
            [
              "StackOverflowError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to (for example) place a bound on the size of a computational problem."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some code could rely on "
          },
          {
            "Text": "StackOverflowError",
            "AttrFlags": 2
          },
          {
            "Text": " to (for example) place a bound on the size of a computational problem."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146142,
        "id": "b4f070cc-c1cb-4e64-99c9-2ff5f683700f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146142,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sandbox security managers often rely on analyzing the call stack when deciding whether to allow non-privileged code to perform a privileged action."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sandbox security managers often rely on analyzing the call stack when deciding whether to allow non-privileged code to perform a privileged action."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146142,
        "id": "6954e9b5-290a-4433-8754-ed8feaec6ab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146142,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As John Rose explains in "
            ],
            [
              "“Tail calls in the VM”",
              [
                [
                  "a",
                  "https://blogs.oracle.com/jrose/entry/tail_calls_in_the_vm"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As John Rose explains in "
          },
          {
            "Text": "“Tail calls in the VM”",
            "Link": "https://blogs.oracle.com/jrose/entry/tail_calls_in_the_vm"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146142,
        "id": "3b5df0d1-909a-43a1-8b95-181f5f95b6ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146142,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "“The effects of removing the caller’s stack frame are visible to some APIs, notably access control checks and stack tracing. It is as if the caller’s caller had directly called the callee. Any privileges possessed by the caller are discarded after control is transferred to the callee. However, the linkage and accessibility of the callee method are computed before the transfer of control, and take into account the tail-calling caller.”"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "“The effects of removing the caller’s stack frame are visible to some APIs, notably access control checks and stack tracing. It is as if the caller’s caller had directly called the callee. Any privileges possessed by the caller are discarded after control is transferred to the callee. However, the linkage and accessibility of the callee method are computed before the transfer of control, and take into account the tail-calling caller.”"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461146143,
        "id": "9248db86-8995-4d8f-9a29-8398adf80854",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461146143,
        "parent_id": "532d717d-57db-45ee-8c11-b1eb94af77b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In other words, tail-call elimination could cause an access control method to mistakenly think that a security sensitive API was was being called by trusted code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In other words, tail-call elimination could cause an access control method to mistakenly think that a security sensitive API was was being called by trusted code."
          }
        ]
      }
    ],
    "title": "020 Deep recursion is problematic in Java"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}