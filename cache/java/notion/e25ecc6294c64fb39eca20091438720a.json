{
  "ID": "e25ecc62-94c6-4fb3-9eca-20091438720a",
  "Root": {
    "alive": true,
    "content": [
      "f620cbb0-062c-4d8e-ba42-5039899774ba",
      "9fee1d0a-a240-4cd3-a642-145660398b10",
      "8a832b7a-779a-4767-a0c7-35fe655ad973",
      "894ec468-3fe3-43a4-999c-f724ba3464ce",
      "00e322f6-2404-4571-b326-04abffada9af",
      "5e2cb1c4-2497-4c8b-8d02-727fd1424083",
      "5087dead-9fb5-4058-97bb-4679c530149f",
      "472eb8b6-7455-425d-a0ce-69e14167756f",
      "62c1ce53-2818-4423-bdaf-0c84989ef91c",
      "05a306f8-ce4e-460a-9287-35232cb040b0",
      "27e18e28-5ec5-410a-8c17-2bf8e30f73d2",
      "827c8b18-9332-4ff7-a0be-010b42a6a20f",
      "1ee9883c-3695-4fe0-b9ab-55cab9823b20",
      "662bfe7e-f535-465c-b26c-c7a0594fc0a5",
      "788017ff-497c-408b-b798-b6184bd77401",
      "29be9ce3-83c9-436e-b33c-f45993d68708",
      "849b7712-8228-4a45-a044-65f53c608fce",
      "9fa0fc39-87c1-4beb-846f-1cb0c7be5cd8",
      "7ab74fc0-4880-4402-8e52-7a770f0db23f",
      "0815aef6-666c-4881-a518-c933ff101018",
      "c331933d-ca6e-4c62-a1b7-283315633265",
      "72f033ec-d3db-459d-9c3e-c0875c66c6fc",
      "482aef37-c1b1-48df-8605-71e57286bd49",
      "8cd9862c-d44b-4773-bfab-e2b432f326d8",
      "3c127f75-0f8e-49d6-85fe-8c51c5bd8912",
      "ecdf9c9b-d19f-4988-98b3-3cb9fadb324f",
      "51104d79-f578-4994-b2e0-c1fc401eeccc",
      "0a40348d-4721-4896-8d39-51f35e3abf82",
      "5903ba83-1392-4c6f-ae00-ccb1226fc0b8",
      "e15879f0-89aa-4180-96c2-56d5228409f4",
      "1769c74d-c232-4607-8f6c-000df0ad3a45"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460250163,
    "id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460250163,
    "parent_id": "e58fed62-9361-43a9-9d33-915bbbe28d40",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Explaining what is method overloading and overriding."
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250126,
        "id": "f620cbb0-062c-4d8e-ba42-5039899774ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250126,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method Overriding and Overloading are two forms of polymorphism supported by Java."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method Overriding and Overloading are two forms of polymorphism supported by Java."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250129,
        "id": "9fee1d0a-a240-4cd3-a642-145660398b10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250129,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method Overloading",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method Overloading",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250129,
        "id": "8a832b7a-779a-4767-a0c7-35fe655ad973",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250129,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method overloading (also known as static Polymorphism) is a way you can have two (or more) methods (functions) with same name in a single class. Yes its as simple as that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method overloading (also known as static Polymorphism) is a way you can have two (or more) methods (functions) with same name in a single class. Yes its as simple as that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250129,
        "id": "894ec468-3fe3-43a4-999c-f724ba3464ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250129,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Shape{\n    //It could be a circle or rectangle or square\n    private String type;\n    \n    //To calculate area of rectangle\n    public Double area(Long length, Long breadth){\n        return (Double) length * breadth;\n    }\n    \n     //To calculate area of a circle\n     public Double area(Long radius){\n        return (Double) 3.14 * r * r;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Shape{\n    //It could be a circle or rectangle or square\n    private String type;\n    \n    //To calculate area of rectangle\n    public Double area(Long length, Long breadth){\n        return (Double) length * breadth;\n    }\n    \n     //To calculate area of a circle\n     public Double area(Long radius){\n        return (Double) 3.14 * r * r;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250129,
        "id": "00e322f6-2404-4571-b326-04abffada9af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250129,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This way user can call the same method for area depending on the type of shape it has."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This way user can call the same method for area depending on the type of shape it has."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250129,
        "id": "5e2cb1c4-2497-4c8b-8d02-727fd1424083",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250129,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But the real question now is, how will java compiler will distinguish which method body is to be executed?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But the real question now is, how will java compiler will distinguish which method body is to be executed?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250129,
        "id": "5087dead-9fb5-4058-97bb-4679c530149f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250129,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Well Java have made it clear that even though the "
            ],
            [
              "method names",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "area()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in our case) "
            ],
            [
              "can be same but the arguments method is taking should be different.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Well Java have made it clear that even though the "
          },
          {
            "Text": "method names",
            "AttrFlags": 1
          },
          {
            "Text": " ("
          },
          {
            "Text": "area()",
            "AttrFlags": 2
          },
          {
            "Text": " in our case) "
          },
          {
            "Text": "can be same but the arguments method is taking should be different.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "472eb8b6-7455-425d-a0ce-69e14167756f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Overloaded methods must have different arguments list (quantity and types)."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Overloaded methods must have different arguments list (quantity and types)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "62c1ce53-2818-4423-bdaf-0c84989ef91c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That being said we cannot add another method to calculate area of a square like this : "
            ],
            [
              "public Double area(Long side)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because in this case, it will conflict with area method of circle and will cause "
            ],
            [
              "ambiguity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for java compiler."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That being said we cannot add another method to calculate area of a square like this : "
          },
          {
            "Text": "public Double area(Long side)",
            "AttrFlags": 2
          },
          {
            "Text": " because in this case, it will conflict with area method of circle and will cause "
          },
          {
            "Text": "ambiguity",
            "AttrFlags": 1
          },
          {
            "Text": " for java compiler."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "05a306f8-ce4e-460a-9287-35232cb040b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thank god, there are some relaxations while writing overloaded methods like"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thank god, there are some relaxations while writing overloaded methods like"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "27e18e28-5ec5-410a-8c17-2bf8e30f73d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May have different return types."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "May have different return types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "827c8b18-9332-4ff7-a0be-010b42a6a20f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May have different access modifiers."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "May have different access modifiers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "1ee9883c-3695-4fe0-b9ab-55cab9823b20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "May throw different exceptions."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "May throw different exceptions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "662bfe7e-f535-465c-b26c-c7a0594fc0a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why is this called static polymorphism?",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why is this called static polymorphism?",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "788017ff-497c-408b-b798-b6184bd77401",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Well that’s because which overloaded methods is to be invoked is decided at compile time, based on the actual number of arguments and the compile-time types of the arguments."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Well that’s because which overloaded methods is to be invoked is decided at compile time, based on the actual number of arguments and the compile-time types of the arguments."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "29be9ce3-83c9-436e-b33c-f45993d68708",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of common reasons of using method overloading is the simplicity of code it provides. For example remember String.valueOf() which takes almost any type of argument? What is written behind the scene is probably something like this :-"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of common reasons of using method overloading is the simplicity of code it provides. For example remember String.valueOf() which takes almost any type of argument? What is written behind the scene is probably something like this :-"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250130,
        "id": "849b7712-8228-4a45-a044-65f53c608fce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250130,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "static String valueOf(boolean b) \nstatic String valueOf(char c) \nstatic String valueOf(char[] data) \nstatic String valueOf(char[] data, int offset, int count) \nstatic String valueOf(double d) \nstatic String valueOf(float f) \nstatic String valueOf(int i) \nstatic String valueOf(long l) \nstatic String valueOf(Object obj)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "static String valueOf(boolean b) \nstatic String valueOf(char c) \nstatic String valueOf(char[] data) \nstatic String valueOf(char[] data, int offset, int count) \nstatic String valueOf(double d) \nstatic String valueOf(float f) \nstatic String valueOf(int i) \nstatic String valueOf(long l) \nstatic String valueOf(Object obj)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "9fa0fc39-87c1-4beb-846f-1cb0c7be5cd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method Overriding",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method Overriding",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "7ab74fc0-4880-4402-8e52-7a770f0db23f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Well, method overriding (yes you guess it right, it is also known as dynamic polymorphism) is somewhat more interesting and complex topic."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Well, method overriding (yes you guess it right, it is also known as dynamic polymorphism) is somewhat more interesting and complex topic."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "0815aef6-666c-4881-a518-c933ff101018",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In method overriding we overwrite the method body provided by the parent class. Got it? No? Let’s go through an example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In method overriding we overwrite the method body provided by the parent class. Got it? No? Let’s go through an example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "c331933d-ca6e-4c62-a1b7-283315633265",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public abstract class Shape{\n    \n    public abstract Double area(){\n        return 0.0;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public abstract class Shape{\n    \n    public abstract Double area(){\n        return 0.0;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "72f033ec-d3db-459d-9c3e-c0875c66c6fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So we have a class called Shape and it has method called area which will probably return the area of the shape."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So we have a class called Shape and it has method called area which will probably return the area of the shape."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "482aef37-c1b1-48df-8605-71e57286bd49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say now we have two classes called Circle and Rectangle."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say now we have two classes called Circle and Rectangle."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250131,
        "id": "8cd9862c-d44b-4773-bfab-e2b432f326d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250131,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Circle extends Shape {\n    private Double radius = 5.0;\n\n    // See this annotation @Override, it is telling that this method is from parent\n    // class Shape and is overridden here\n    @Override\n    public Double area(){\n        return 3.14 * radius * radius;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Circle extends Shape {\n    private Double radius = 5.0;\n\n    // See this annotation @Override, it is telling that this method is from parent\n    // class Shape and is overridden here\n    @Override\n    public Double area(){\n        return 3.14 * radius * radius;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250132,
        "id": "3c127f75-0f8e-49d6-85fe-8c51c5bd8912",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250132,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly rectangle class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly rectangle class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250132,
        "id": "ecdf9c9b-d19f-4988-98b3-3cb9fadb324f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250132,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Rectangle extends Shape {\n    private Double length = 5.0;\n    private Double breadth= 10.0;\n\n\n    // See this annotation @Override, it is telling that this method is from parent\n    // class Shape and is overridden here\n    @Override\n    public Double area(){\n        return length * breadth;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Rectangle extends Shape {\n    private Double length = 5.0;\n    private Double breadth= 10.0;\n\n\n    // See this annotation @Override, it is telling that this method is from parent\n    // class Shape and is overridden here\n    @Override\n    public Double area(){\n        return length * breadth;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250132,
        "id": "51104d79-f578-4994-b2e0-c1fc401eeccc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250132,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So, now both of your children classes have updated method body provided by the parent ("
            ],
            [
              "Shape",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") class. Now question is how to see the result? Well lets do it the old "
            ],
            [
              "psvm",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So, now both of your children classes have updated method body provided by the parent ("
          },
          {
            "Text": "Shape",
            "AttrFlags": 2
          },
          {
            "Text": ") class. Now question is how to see the result? Well lets do it the old "
          },
          {
            "Text": "psvm",
            "AttrFlags": 2
          },
          {
            "Text": " way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250132,
        "id": "0a40348d-4721-4896-8d39-51f35e3abf82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250132,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class AreaFinder{\n    \n    public static void main(String[] args){\n\n        //This will create an object of circle class\n        Shape circle = new Circle();\n        //This will create an object of Rectangle class\n        Shape rectangle = new Rectangle();\n        \n        // Drumbeats ......\n        //This should print 78.5\n        System.out.println(\"Shape of circle : \"+circle.area());\n\n        //This should print 50.0\n        System.out.println(\"Shape of rectangle: \"+rectangle.area());            \n        \n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class AreaFinder{\n    \n    public static void main(String[] args){\n\n        //This will create an object of circle class\n        Shape circle = new Circle();\n        //This will create an object of Rectangle class\n        Shape rectangle = new Rectangle();\n        \n        // Drumbeats ......\n        //This should print 78.5\n        System.out.println(\"Shape of circle : \"+circle.area());\n\n        //This should print 50.0\n        System.out.println(\"Shape of rectangle: \"+rectangle.area());            \n        \n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250132,
        "id": "5903ba83-1392-4c6f-ae00-ccb1226fc0b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250132,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Wow! isn’t it great? Two objects of same type calling same methods and returning different values. My friend, that’s the power of dynamic polymorphism."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Wow! isn’t it great? Two objects of same type calling same methods and returning different values. My friend, that’s the power of dynamic polymorphism."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250132,
        "id": "e15879f0-89aa-4180-96c2-56d5228409f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250132,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a chart to better compare the differences between these two:-"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a chart to better compare the differences between these two:-"
          }
        ]
      },
      {
        "alive": true,
        "collection_id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460250163,
        "id": "1769c74d-c232-4607-8f6c-000df0ad3a45",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460250163,
        "parent_id": "e25ecc62-94c6-4fb3-9eca-20091438720a",
        "parent_table": "block",
        "type": "collection_view",
        "version": 1,
        "view_ids": [
          "c69f53b0-258f-4cb3-8b0b-f41f678fa23a"
        ],
        "collection_views": [
          {
            "CollectionView": {
              "id": "c69f53b0-258f-4cb3-8b0b-f41f678fa23a",
              "alive": true,
              "format": {
                "table_properties": [
                  {
                    "width": 0,
                    "visible": true,
                    "property": "title"
                  },
                  {
                    "width": 0,
                    "visible": true,
                    "property": "+.vE"
                  }
                ],
                "table_wrap": false
              },
              "name": "Show All",
              "page_sort": [
                "edddf085-e31c-4d10-b84e-3af96cfc2e7f",
                "a3f558e6-e716-4e48-87cb-241682c54cf9",
                "0efdc0e2-672d-456c-a4b1-ec62c740a78d",
                "a4a0f8f7-b30a-4771-a287-81ba144961c6",
                "284c07ef-2fdd-4fbe-9e99-cc7fcf12da71"
              ],
              "parent_id": "1769c74d-c232-4607-8f6c-000df0ad3a45",
              "parent_table": "block",
              "query": null,
              "type": "table",
              "version": 1
            },
            "Collection": {
              "alive": true,
              "format": null,
              "id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
              "name": null,
              "parent_id": "1769c74d-c232-4607-8f6c-000df0ad3a45",
              "parent_table": "block",
              "schema": {
                "+.vE": {
                  "name": "Method Overriding",
                  "options": null,
                  "type": "text"
                },
                "title": {
                  "name": "Method Overloading",
                  "options": null,
                  "type": "title"
                }
              },
              "version": 1
            },
            "CollectionRows": [
              {
                "alive": true,
                "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "created_time": 1550460250163,
                "id": "edddf085-e31c-4d10-b84e-3af96cfc2e7f",
                "ignore_block_count": true,
                "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "last_edited_time": 1550460250163,
                "parent_id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
                "parent_table": "collection",
                "properties": {
                  "+.vE": [
                    [
                      "Method overriding is used to provide the specific implementation of the method that is already provided by its super class."
                    ]
                  ],
                  "title": [
                    [
                      "Method overloading is used to increase the readability of the program."
                    ]
                  ]
                },
                "type": "page",
                "version": 1
              },
              {
                "alive": true,
                "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "created_time": 1550460250163,
                "id": "a3f558e6-e716-4e48-87cb-241682c54cf9",
                "ignore_block_count": true,
                "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "last_edited_time": 1550460250163,
                "parent_id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
                "parent_table": "collection",
                "properties": {
                  "+.vE": [
                    [
                      "Method overriding occurs in two classes that have IS-A (inheritance) relationship."
                    ]
                  ],
                  "title": [
                    [
                      "Method overloading is performed within class."
                    ]
                  ]
                },
                "type": "page",
                "version": 1
              },
              {
                "alive": true,
                "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "created_time": 1550460250163,
                "id": "0efdc0e2-672d-456c-a4b1-ec62c740a78d",
                "ignore_block_count": true,
                "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "last_edited_time": 1550460250163,
                "parent_id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
                "parent_table": "collection",
                "properties": {
                  "+.vE": [
                    [
                      "In case of method overriding, parameter must be same."
                    ]
                  ],
                  "title": [
                    [
                      "In case of method overloading, parameter must be different."
                    ]
                  ]
                },
                "type": "page",
                "version": 1
              },
              {
                "alive": true,
                "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "created_time": 1550460250163,
                "id": "a4a0f8f7-b30a-4771-a287-81ba144961c6",
                "ignore_block_count": true,
                "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "last_edited_time": 1550460250163,
                "parent_id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
                "parent_table": "collection",
                "properties": {
                  "+.vE": [
                    [
                      "Method overriding is the example of run time polymorphism."
                    ]
                  ],
                  "title": [
                    [
                      "Method overloading is the example of compile time polymorphism."
                    ]
                  ]
                },
                "type": "page",
                "version": 1
              },
              {
                "alive": true,
                "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "created_time": 1550460250163,
                "id": "284c07ef-2fdd-4fbe-9e99-cc7fcf12da71",
                "ignore_block_count": true,
                "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
                "last_edited_time": 1550460250163,
                "parent_id": "77ff7603-4ed1-4b72-aff0-91b607f29ab9",
                "parent_table": "collection",
                "properties": {
                  "+.vE": [
                    [
                      "Return type must be same or covariant in method overriding."
                    ]
                  ],
                  "title": [
                    [
                      "In java, method overloading can’t be performed by changing return type of the method only. Return type can be same or different in method overloading. But you must have to change the parameter."
                    ]
                  ]
                },
                "type": "page",
                "version": 1
              }
            ]
          }
        ]
      }
    ],
    "title": "020 Explaining what is method overloading and overriding."
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}