{
  "ID": "adb64507-64b3-41c2-825c-0dc4e108df49",
  "Root": {
    "alive": true,
    "content": [
      "25505645-58e6-40fb-a6ca-64018b67029a",
      "c5a69684-ad43-473a-852c-ea67f7a4fb8a",
      "c0cb9aaf-9f7e-4d0f-b47c-3661f5ffcd32",
      "0ff66f75-e1f3-4967-a66c-78109ad0fa5a",
      "56533d85-e574-4b4b-b92f-ed2081b3499f",
      "500c500c-52e8-47f0-a29e-f32bb5ae1968",
      "f2f89a1e-3fa6-45d3-9aad-f5d59ff2aae3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519542451,
    "id": "adb64507-64b3-41c2-825c-0dc4e108df49",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519542451,
    "parent_id": "ee7eec3d-59c2-47f2-a6d1-c1a275d8bc22",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 New Java SE 7 programming language features"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542447,
        "id": "25505645-58e6-40fb-a6ca-64018b67029a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542447,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Binary Literals",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/binary-literals.html"
                ]
              ]
            ],
            [
              ": The integral types (byte, short, int, and long) can also be expressed using the binary number system. To specify a binary literal, add the prefix 0b or 0B to the number."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Binary Literals",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/binary-literals.html"
          },
          {
            "Text": ": The integral types (byte, short, int, and long) can also be expressed using the binary number system. To specify a binary literal, add the prefix 0b or 0B to the number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542447,
        "id": "c5a69684-ad43-473a-852c-ea67f7a4fb8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542447,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Strings in switch Statements",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/strings-switch.html"
                ]
              ]
            ],
            [
              ": You can use a String object in the expression of a switch statement"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Strings in switch Statements",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/strings-switch.html"
          },
          {
            "Text": ": You can use a String object in the expression of a switch statement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542448,
        "id": "c0cb9aaf-9f7e-4d0f-b47c-3661f5ffcd32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542448,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The try-with-resources Statement",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/try-with-resources.html"
                ]
              ]
            ],
            [
              ": The try-with-resources statement is a try statement that declares one or more resources. A resource is as an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The try-with-resources Statement",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/try-with-resources.html"
          },
          {
            "Text": ": The try-with-resources statement is a try statement that declares one or more resources. A resource is as an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542449,
        "id": "0ff66f75-e1f3-4967-a66c-78109ad0fa5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542449,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Catching Multiple Exception Types and Rethrowing Exceptions with Improved Type Checking",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/catch-multiple.html"
                ]
              ]
            ],
            [
              ": a single catch block can handle more than one type of exception. This feature can reduce code duplication and lessen the temptation to catch an overly broad exception."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Catching Multiple Exception Types and Rethrowing Exceptions with Improved Type Checking",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/catch-multiple.html"
          },
          {
            "Text": ": a single catch block can handle more than one type of exception. This feature can reduce code duplication and lessen the temptation to catch an overly broad exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542449,
        "id": "56533d85-e574-4b4b-b92f-ed2081b3499f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542449,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Underscores in Numeric Literals",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/underscores-literals.html"
                ]
              ]
            ],
            [
              ": Any number of underscore characters (_) can appear anywhere between digits in a numerical literal. This feature enables you, for example, to separate groups of digits in numeric literals, which can improve the readability of your code."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Underscores in Numeric Literals",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/underscores-literals.html"
          },
          {
            "Text": ": Any number of underscore characters (_) can appear anywhere between digits in a numerical literal. This feature enables you, for example, to separate groups of digits in numeric literals, which can improve the readability of your code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542450,
        "id": "500c500c-52e8-47f0-a29e-f32bb5ae1968",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542450,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Type Inference for Generic Instance Creation",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/type-inference-generic-instance-creation.html"
                ]
              ]
            ],
            [
              ": You can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters (\u003c\u003e) as long as the compiler can infer the type arguments from the context. This pair of angle brackets is informally called the diamond."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Type Inference for Generic Instance Creation",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/type-inference-generic-instance-creation.html"
          },
          {
            "Text": ": You can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters (\u003c\u003e) as long as the compiler can infer the type arguments from the context. This pair of angle brackets is informally called the diamond."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519542451,
        "id": "f2f89a1e-3fa6-45d3-9aad-f5d59ff2aae3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519542451,
        "parent_id": "adb64507-64b3-41c2-825c-0dc4e108df49",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Improved Compiler Warnings and Errors When Using Non-Reifiable Formal Parameters with Varargs Methods",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/technotes/guides/language/non-reifiable-varargs.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Improved Compiler Warnings and Errors When Using Non-Reifiable Formal Parameters with Varargs Methods",
            "Link": "http://docs.oracle.com/javase/8/docs/technotes/guides/language/non-reifiable-varargs.html"
          }
        ]
      }
    ],
    "title": "010 New Java SE 7 programming language features"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}