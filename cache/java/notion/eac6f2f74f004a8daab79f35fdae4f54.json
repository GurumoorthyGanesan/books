{
  "ID": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
  "Root": {
    "alive": true,
    "content": [
      "83437194-bd2c-4e38-ba23-7b2ee17a7970",
      "4553968c-67d7-43c1-b387-a4d14c76f5bf",
      "d3779e46-56d1-4047-b9c5-b9e1d704c137",
      "e33e7166-596a-408c-9c0b-47317a2a4c07",
      "4b495018-3178-4608-bb5f-cb3d12f3a880",
      "55450d7b-0da0-4779-bf50-843490b8eef5",
      "5ee7dcd3-1275-4c0e-a5f5-7ff4abbb4476",
      "e7ad7e53-3909-41d0-ac45-709d0a29508f",
      "b21caa69-4c00-44ae-9df2-1252afb54223",
      "102dc812-0788-4611-abb4-882849e294c8",
      "02a1a3e3-e093-4edf-a5ec-99f27502799f",
      "29d6572b-8445-4e96-9d70-ad5b4c3454b7",
      "fa6eeb26-1ae4-4116-ac13-63ffdda71ce8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460112121,
    "id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460112121,
    "parent_id": "39a676e8-4916-4942-a1ec-5020702b7db9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Handling InterruptedException"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112116,
        "id": "83437194-bd2c-4e38-ba23-7b2ee17a7970",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112116,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "InterruptedException",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/InterruptedException.html"
                ]
              ]
            ],
            [
              " is a confusing beast - it shows up in seemingly innocuous methods like "
            ],
            [
              "Thread.sleep()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep(long)"
                ]
              ]
            ],
            [
              ", but handling it incorrectly leads to hard-to-manage code that behaves poorly in concurrent environments."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "InterruptedException",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/InterruptedException.html"
          },
          {
            "Text": " is a confusing beast - it shows up in seemingly innocuous methods like "
          },
          {
            "Text": "Thread.sleep()",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep(long)"
          },
          {
            "Text": ", but handling it incorrectly leads to hard-to-manage code that behaves poorly in concurrent environments."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112118,
        "id": "4553968c-67d7-43c1-b387-a4d14c76f5bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112118,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At its most basic, if an "
            ],
            [
              "InterruptedException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is caught it means someone, somewhere, called "
            ],
            [
              "Thread.interrupt()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt--"
                ]
              ]
            ],
            [
              " on the thread your code is currently running in. You might be inclined to say “It’s my code! I’ll never interrupt it!” and therefore do something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At its most basic, if an "
          },
          {
            "Text": "InterruptedException",
            "AttrFlags": 2
          },
          {
            "Text": " is caught it means someone, somewhere, called "
          },
          {
            "Text": "Thread.interrupt()",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt--"
          },
          {
            "Text": " on the thread your code is currently running in. You might be inclined to say “It’s my code! I’ll never interrupt it!” and therefore do something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112118,
        "id": "d3779e46-56d1-4047-b9c5-b9e1d704c137",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112118,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Bad. Don't do this.\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  // disregard\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Bad. Don't do this.\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  // disregard\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112118,
        "id": "e33e7166-596a-408c-9c0b-47317a2a4c07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112118,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But this is exactly the wrong way to handle an “impossible” event occurring. If you know your application will never encounter an "
            ],
            [
              "InterruptedException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you should treat such an event as a serious violation of your program’s assumptions and exit as quickly as possible."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But this is exactly the wrong way to handle an “impossible” event occurring. If you know your application will never encounter an "
          },
          {
            "Text": "InterruptedException",
            "AttrFlags": 2
          },
          {
            "Text": " you should treat such an event as a serious violation of your program’s assumptions and exit as quickly as possible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112118,
        "id": "4b495018-3178-4608-bb5f-cb3d12f3a880",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112118,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The proper way to handle an “impossible” interrupt is like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The proper way to handle an “impossible” interrupt is like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112118,
        "id": "55450d7b-0da0-4779-bf50-843490b8eef5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112118,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// When nothing will interrupt your code\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  Thread.currentThread().interrupt();\n  throw new AssertionError(e);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// When nothing will interrupt your code\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  Thread.currentThread().interrupt();\n  throw new AssertionError(e);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112119,
        "id": "5ee7dcd3-1275-4c0e-a5f5-7ff4abbb4476",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112119,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This does two things; it first restores the interrupt status of the thread (as if the "
            ],
            [
              "InterruptedException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " had not been thrown in the first place), and then it throws an "
            ],
            [
              "AssertionError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " indicating the basic invariants of your application have been violated. If you know for certain that you’ll never interrupt the thread this code runs in this is safe since the "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " block should never be reached."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This does two things; it first restores the interrupt status of the thread (as if the "
          },
          {
            "Text": "InterruptedException",
            "AttrFlags": 2
          },
          {
            "Text": " had not been thrown in the first place), and then it throws an "
          },
          {
            "Text": "AssertionError",
            "AttrFlags": 2
          },
          {
            "Text": " indicating the basic invariants of your application have been violated. If you know for certain that you’ll never interrupt the thread this code runs in this is safe since the "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " block should never be reached."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112119,
        "id": "e7ad7e53-3909-41d0-ac45-709d0a29508f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112119,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using Guava’s "
            ],
            [
              "Uninterruptibles",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/util/concurrent/Uninterruptibles.html"
                ]
              ]
            ],
            [
              " class helps simplify this pattern; calling "
            ],
            [
              "Uninterruptibles.sleepUninterruptibly()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/util/concurrent/Uninterruptibles.html#sleepUninterruptibly(long,%20java.util.concurrent.TimeUnit)"
                ]
              ]
            ],
            [
              " disregards the interrupted state of a thread until the sleep duration has expired (at which point it’s restored for later calls to inspect and throw their own "
            ],
            [
              "InterruptedException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). If you know you’ll never interrupt such code this safely avoids needing to wrap your sleep calls in a try-catch block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using Guava’s "
          },
          {
            "Text": "Uninterruptibles",
            "AttrFlags": 2,
            "Link": "https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/util/concurrent/Uninterruptibles.html"
          },
          {
            "Text": " class helps simplify this pattern; calling "
          },
          {
            "Text": "Uninterruptibles.sleepUninterruptibly()",
            "AttrFlags": 2,
            "Link": "https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/util/concurrent/Uninterruptibles.html#sleepUninterruptibly(long,%20java.util.concurrent.TimeUnit)"
          },
          {
            "Text": " disregards the interrupted state of a thread until the sleep duration has expired (at which point it’s restored for later calls to inspect and throw their own "
          },
          {
            "Text": "InterruptedException",
            "AttrFlags": 2
          },
          {
            "Text": "). If you know you’ll never interrupt such code this safely avoids needing to wrap your sleep calls in a try-catch block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112120,
        "id": "b21caa69-4c00-44ae-9df2-1252afb54223",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112120,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More often, however, you cannot guarantee that your thread will never be interrupted. In particular if you’re writing code that will be executed by an "
            ],
            [
              "Executor",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html"
                ]
              ]
            ],
            [
              " or some other thread-management it’s critical that your code responds promptly to interrupts, otherwise your application will stall or even deadlock."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More often, however, you cannot guarantee that your thread will never be interrupted. In particular if you’re writing code that will be executed by an "
          },
          {
            "Text": "Executor",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html"
          },
          {
            "Text": " or some other thread-management it’s critical that your code responds promptly to interrupts, otherwise your application will stall or even deadlock."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112120,
        "id": "102dc812-0788-4611-abb4-882849e294c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112120,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In such cases the best thing to do is generally to allow the "
            ],
            [
              "InterruptedException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to propagate up the call stack, adding a "
            ],
            [
              "throws InterruptedException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to each method in turn. This may seem kludgy but it’s actually a desirable property - your method’s signatures now indicates to callers that it will respond promptly to interrupts."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In such cases the best thing to do is generally to allow the "
          },
          {
            "Text": "InterruptedException",
            "AttrFlags": 2
          },
          {
            "Text": " to propagate up the call stack, adding a "
          },
          {
            "Text": "throws InterruptedException",
            "AttrFlags": 2
          },
          {
            "Text": " to each method in turn. This may seem kludgy but it’s actually a desirable property - your method’s signatures now indicates to callers that it will respond promptly to interrupts."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112120,
        "id": "02a1a3e3-e093-4edf-a5ec-99f27502799f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112120,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Let the caller determine how to handle the interrupt if you're unsure\npublic void myLongRunningMethod() throws InterruptedException {\n  ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Let the caller determine how to handle the interrupt if you're unsure\npublic void myLongRunningMethod() throws InterruptedException {\n  ...\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112120,
        "id": "29d6572b-8445-4e96-9d70-ad5b4c3454b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112120,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In limited cases (e.g. while overriding a method that doesn’t "
            ],
            [
              "throw",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " any checked exceptions) you can reset the interrupted status without raising an exception, expecting whatever code is executed next to handle the interrupt. This delays handling the interruption but doesn’t suppress it entirely."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In limited cases (e.g. while overriding a method that doesn’t "
          },
          {
            "Text": "throw",
            "AttrFlags": 2
          },
          {
            "Text": " any checked exceptions) you can reset the interrupted status without raising an exception, expecting whatever code is executed next to handle the interrupt. This delays handling the interruption but doesn’t suppress it entirely."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460112121,
        "id": "fa6eeb26-1ae4-4116-ac13-63ffdda71ce8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460112121,
        "parent_id": "eac6f2f7-4f00-4a8d-aab7-9f35fdae4f54",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Suppresses the exception but resets the interrupted state letting later code\n// detect the interrupt and handle it properly.\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  Thread.currentThread().interrupt();\n  return ...; // your expectations are still broken at this point - try not to do more work.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Suppresses the exception but resets the interrupted state letting later code\n// detect the interrupt and handle it properly.\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  Thread.currentThread().interrupt();\n  return ...; // your expectations are still broken at this point - try not to do more work.\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "040 Handling InterruptedException"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}