{
  "ID": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
  "Root": {
    "alive": true,
    "content": [
      "3492b432-a2a3-4ddf-a1c0-bed4b2e87b7d",
      "bc29199e-c7f0-458f-af3c-65a9384a97c0",
      "40d1808f-4e5f-443b-868a-836a047dec98",
      "cf7325a4-3168-4ddb-99f0-edd34e6e3d96",
      "3a11c2e7-7a36-4cff-bead-f74cc0bc380d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460091127,
    "id": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519340000,
    "parent_id": "aaf522ec-ec58-4c19-b129-bf870a37c471",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 The Liskov Substitution Principle"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460091123,
        "id": "3492b432-a2a3-4ddf-a1c0-bed4b2e87b7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460091123,
        "parent_id": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Substitutability is a principle in object-oriented programming introduced by Barbara Liskov in a 1987 conference keynote stating that, if class "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a subclass of class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then wherever "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is expected, "
            ],
            [
              "B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used instead:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Substitutability is a principle in object-oriented programming introduced by Barbara Liskov in a 1987 conference keynote stating that, if class "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " is a subclass of class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": ", then wherever "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " is expected, "
          },
          {
            "Text": "B",
            "AttrFlags": 2
          },
          {
            "Text": " can be used instead:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460091126,
        "id": "bc29199e-c7f0-458f-af3c-65a9384a97c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460091126,
        "parent_id": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class A {...}\nclass B extends A {...}\n\npublic void method(A obj) {...}\n\nA a = new B(); // Assignment OK\nmethod(new B()); // Passing as parameter OK"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class A {...}\nclass B extends A {...}\n\npublic void method(A obj) {...}\n\nA a = new B(); // Assignment OK\nmethod(new B()); // Passing as parameter OK",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460091127,
        "id": "40d1808f-4e5f-443b-868a-836a047dec98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460091127,
        "parent_id": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also applies when the type is an interface, where there doesn’t need to any hierarchical relationship between the objects:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also applies when the type is an interface, where there doesn’t need to any hierarchical relationship between the objects:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460091127,
        "id": "cf7325a4-3168-4ddb-99f0-edd34e6e3d96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460091127,
        "parent_id": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Foo {\n    void bar();\n}\n\nclass A implements Foo {\n    void bar() {...}\n}\n\nclass B implements Foo {\n    void bar() {...}\n}\n\nList\u003cFoo\u003e foos = new ArrayList\u003c\u003e();\nfoos.add(new A()); // OK\nfoos.add(new B()); // OK"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Foo {\n    void bar();\n}\n\nclass A implements Foo {\n    void bar() {...}\n}\n\nclass B implements Foo {\n    void bar() {...}\n}\n\nList\u003cFoo\u003e foos = new ArrayList\u003c\u003e();\nfoos.add(new A()); // OK\nfoos.add(new B()); // OK",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460091127,
        "id": "3a11c2e7-7a36-4cff-bead-f74cc0bc380d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460091127,
        "parent_id": "a79fcb7c-7307-429f-ab36-d2021a18f3b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now the list contains objects that are not from the same class hierarchy."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now the list contains objects that are not from the same class hierarchy."
          }
        ]
      }
    ],
    "title": "060 The Liskov Substitution Principle"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}