{
  "ID": "8a3ace0a-00ff-48b1-884e-5113bbf27c6c",
  "Root": {
    "alive": true,
    "content": [
      "ea50dd5d-cd48-4a7b-83ef-50b7acb7ae0b",
      "b22409ee-7908-4810-a2c4-f457593a6fb9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518005083,
    "id": "8a3ace0a-00ff-48b1-884e-5113bbf27c6c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518005083,
    "parent_id": "6dd2e1bb-5fba-432d-9aaf-05e0509441e8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 synchronized"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518005074,
        "id": "ea50dd5d-cd48-4a7b-83ef-50b7acb7ae0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518005074,
        "parent_id": "8a3ace0a-00ff-48b1-884e-5113bbf27c6c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Synchronized modifier is used to control the access of a particular method or a block by multiple threads. Only one thread can enter into a method or a block which is declared as synchronized. synchronized keyword works on intrinsic lock of an object, in case of a synchronized method current objects lock and static method uses class object. Any thread trying to execute a synchronized block must acquire the object lock first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Synchronized modifier is used to control the access of a particular method or a block by multiple threads. Only one thread can enter into a method or a block which is declared as synchronized. synchronized keyword works on intrinsic lock of an object, in case of a synchronized method current objects lock and static method uses class object. Any thread trying to execute a synchronized block must acquire the object lock first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518005082,
        "id": "b22409ee-7908-4810-a2c4-f457593a6fb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518005082,
        "parent_id": "8a3ace0a-00ff-48b1-884e-5113bbf27c6c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Shared\n{\n    int i;\n \n    synchronized void SharedMethod()\n    {\n        Thread t = Thread.currentThread();\n \n        for(int i = 0; i \u003c= 1000; i++)\n        {\n            System.out.println(t.getName()+\" : \"+i);\n        }\n    }\n\n    void SharedMethod2()\n    {\n        synchronized (this)\n        {\n            System.out.println(\"Thais access to currect object is synchronize \"+this);\n        }\n    }\n}\n \npublic class ThreadsInJava\n{\n    public static void main(String[] args)\n    {\n        final Shared s1 = new Shared();\n \n        Thread t1 = new Thread(\"Thread - 1\")\n        {\n            @Override\n            public void run()\n            {\n                s1.SharedMethod();\n            }\n        };\n \n        Thread t2 = new Thread(\"Thread - 2\")\n        {\n            @Override\n            public void run()\n            {\n                s1.SharedMethod();\n            }\n        };\n \n        t1.start();\n \n        t2.start();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Shared\n{\n    int i;\n \n    synchronized void SharedMethod()\n    {\n        Thread t = Thread.currentThread();\n \n        for(int i = 0; i \u003c= 1000; i++)\n        {\n            System.out.println(t.getName()+\" : \"+i);\n        }\n    }\n\n    void SharedMethod2()\n    {\n        synchronized (this)\n        {\n            System.out.println(\"Thais access to currect object is synchronize \"+this);\n        }\n    }\n}\n \npublic class ThreadsInJava\n{\n    public static void main(String[] args)\n    {\n        final Shared s1 = new Shared();\n \n        Thread t1 = new Thread(\"Thread - 1\")\n        {\n            @Override\n            public void run()\n            {\n                s1.SharedMethod();\n            }\n        };\n \n        Thread t2 = new Thread(\"Thread - 2\")\n        {\n            @Override\n            public void run()\n            {\n                s1.SharedMethod();\n            }\n        };\n \n        t1.start();\n \n        t2.start();\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "050 synchronized"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}