{
  "ID": "41c9fca6-278c-4a9f-894b-ac64d055065e",
  "Root": {
    "alive": true,
    "content": [
      "1f41f34e-0016-47ae-bc58-9d6b7179c5f9",
      "f505a38c-1b3c-40eb-89b3-bc9d3947d11b",
      "c7620664-ee2a-48db-971a-8f73962baf86",
      "c1dbde25-1446-41cb-aa27-e4cfe86a65a5",
      "24311b95-9dda-4a9d-b19d-1645f8d2d54b",
      "57130db9-8bf6-4e8e-9449-0a2ed7553adc",
      "51b9f92f-0b3c-4296-8c55-045ba8f57302",
      "b89b6d0f-417d-4d84-be8f-3f4978b835c5",
      "f4b55508-866f-4253-8ac0-e1cb7636f2f0",
      "98c0c184-3d0d-4409-83db-131c8fed6f8d",
      "c7933c8f-7120-415f-ae1e-868169790156",
      "b1fe4718-1e95-423e-919d-89b87fdb9289",
      "5956cd08-f30a-445f-b173-d572e7fd1e0d",
      "ab9fce83-8fbb-4e6f-a4cf-05515dcf502a",
      "cf80aaee-7c04-408f-a97a-b4bf2d5a2184",
      "e8dd5f47-67c3-41dd-af12-044186e629e2",
      "0070c3cf-0d30-4329-8fe7-47f7caab46d2",
      "3677830f-a5e5-454a-b3ee-f313df01d1ea",
      "4c2ba3bc-70fa-4869-bfc4-baeb449c37ea",
      "01d4dd0e-4ea4-4cd1-8d6a-990d0bdd16d7",
      "090771ca-53c9-4c37-8968-04c6e5accbd2",
      "e1c589a6-d6ee-440d-864f-dd8d6a0d6ee3",
      "4c6b64aa-bf53-4caa-a10e-b29a4560e9e9",
      "a9c3ff96-c172-4d6a-be68-79c69e18a73d",
      "7735d7e5-8424-4d64-899d-daa655d27d2b",
      "2044d2cc-0698-4772-832b-ad031b7e02cb",
      "d22587b3-5889-4cd6-a555-524fd8aedae4",
      "eeb45fd4-ad15-411f-adf8-83de575cecd2",
      "24e9e2c0-3718-4c27-a93d-f32cee03d116",
      "e94d3f4f-0a62-4e7c-8c6c-270354fcfde3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519530513,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551749155047,
    "parent_id": "1f0e916b-e994-4a2f-91b1-8a6715f5100b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Floating-point literals"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530502,
        "id": "1f41f34e-0016-47ae-bc58-9d6b7179c5f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530502,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Floating point literals provide values that can be used where you need a "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance. There are three kinds of floating point literal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Floating point literals provide values that can be used where you need a "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " instance. There are three kinds of floating point literal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530504,
        "id": "f505a38c-1b3c-40eb-89b3-bc9d3947d11b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530504,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Simple decimal forms"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Simple decimal forms"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530505,
        "id": "c7620664-ee2a-48db-971a-8f73962baf86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530505,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Scaled decimal forms"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Scaled decimal forms"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530505,
        "id": "c1dbde25-1446-41cb-aa27-e4cfe86a65a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530505,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hexadecimal forms"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hexadecimal forms"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530505,
        "id": "24311b95-9dda-4a9d-b19d-1645f8d2d54b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530505,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(The JLS syntax rules combine the two decimal forms into a single form. We treat them separately for ease of explanation.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(The JLS syntax rules combine the two decimal forms into a single form. We treat them separately for ease of explanation.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530505,
        "id": "57130db9-8bf6-4e8e-9449-0a2ed7553adc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530505,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are distinct literal types for "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " literals, expressed using suffixes. The various forms use letters to express different things. These letters are case insensitive."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are distinct literal types for "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " literals, expressed using suffixes. The various forms use letters to express different things. These letters are case insensitive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530505,
        "id": "51b9f92f-0b3c-4296-8c55-045ba8f57302",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530505,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Simple decimal forms"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Simple decimal forms"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530506,
        "id": "b89b6d0f-417d-4d84-be8f-3f4978b835c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530506,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simplest form of floating point literal consists of one or more decimal digits and a decimal point ("
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and an optional suffix ("
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "F",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). The optional suffix allows you to specify that the literal is a "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "F",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") or "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") value. The default (when no suffix is specified) is "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simplest form of floating point literal consists of one or more decimal digits and a decimal point ("
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": ") and an optional suffix ("
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "F",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": "). The optional suffix allows you to specify that the literal is a "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "F",
            "AttrFlags": 2
          },
          {
            "Text": ") or "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "D",
            "AttrFlags": 2
          },
          {
            "Text": ") value. The default (when no suffix is specified) is "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530506,
        "id": "f4b55508-866f-4253-8ac0-e1cb7636f2f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530506,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530506,
        "id": "98c0c184-3d0d-4409-83db-131c8fed6f8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530506,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "0.0     // this denotes zero\n.0      // this also denotes zero\n0.      // this also denotes zero\n3.14159 // this denotes Pi, accurate to (approximately!) 5 decimal places.\n1.0F    // a `float` literal\n1.0D    // a `double` literal.  (`double` is the default if no suffix is given)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "0.0     // this denotes zero\n.0      // this also denotes zero\n0.      // this also denotes zero\n3.14159 // this denotes Pi, accurate to (approximately!) 5 decimal places.\n1.0F    // a `float` literal\n1.0D    // a `double` literal.  (`double` is the default if no suffix is given)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530506,
        "id": "c7933c8f-7120-415f-ae1e-868169790156",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530506,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In fact, decimal digits followed by a suffix is also a floating point literal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In fact, decimal digits followed by a suffix is also a floating point literal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530506,
        "id": "b1fe4718-1e95-423e-919d-89b87fdb9289",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530506,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1F      // means the same thing as 1.0F"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1F      // means the same thing as 1.0F",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530508,
        "id": "5956cd08-f30a-445f-b173-d572e7fd1e0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530508,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The meaning of a decimal literal is the IEEE floating point number that is "
            ],
            [
              "closest",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to the infinite precision mathematical Real number denoted by the decimal floating point form. This conceptual value is converted to IEEE binary floating point representation using "
            ],
            [
              "round to nearest",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". (The precise semantics of decimal conversion are specified in the javadocs for "
            ],
            [
              "Double.valueOf(String)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Float.valueOf(String)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/api/java/lang/Float.html#valueOf-java.lang.String-"
                ]
              ]
            ],
            [
              ", bearing in mind that there are differences in the number syntaxes.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The meaning of a decimal literal is the IEEE floating point number that is "
          },
          {
            "Text": "closest",
            "AttrFlags": 4
          },
          {
            "Text": " to the infinite precision mathematical Real number denoted by the decimal floating point form. This conceptual value is converted to IEEE binary floating point representation using "
          },
          {
            "Text": "round to nearest",
            "AttrFlags": 4
          },
          {
            "Text": ". (The precise semantics of decimal conversion are specified in the javadocs for "
          },
          {
            "Text": "Double.valueOf(String)",
            "AttrFlags": 2,
            "Link": "http://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-"
          },
          {
            "Text": " and "
          },
          {
            "Text": "Float.valueOf(String)",
            "AttrFlags": 2,
            "Link": "http://docs.oracle.com/javase/8/docs/api/java/lang/Float.html#valueOf-java.lang.String-"
          },
          {
            "Text": ", bearing in mind that there are differences in the number syntaxes.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530508,
        "id": "ab9fce83-8fbb-4e6f-a4cf-05515dcf502a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530508,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Scaled decimal forms"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Scaled decimal forms"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530509,
        "id": "cf80aaee-7c04-408f-a97a-b4bf2d5a2184",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530509,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Scaled decimal forms consist of simple decimal with an exponent part introduced by an "
            ],
            [
              "E",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and followed by a signed integer. The exponent part is a short hand for multiplying the decimal form by a power of ten, as shown in the examples below. There is also an optional suffix to distinguish "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " literals. Here are some examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Scaled decimal forms consist of simple decimal with an exponent part introduced by an "
          },
          {
            "Text": "E",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": ", and followed by a signed integer. The exponent part is a short hand for multiplying the decimal form by a power of ten, as shown in the examples below. There is also an optional suffix to distinguish "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " literals. Here are some examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530509,
        "id": "e8dd5f47-67c3-41dd-af12-044186e629e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530509,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1.0E1    // this means 1.0 x 10^1 ... or 10.0 (double)\n1E-1D    // this means 1.0 x 10^(-1) ... or 0.1 (double)\n1.0e10f  // this means 1.0 x 10^(10) ... or 10000000000.0 (float)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1.0E1    // this means 1.0 x 10^1 ... or 10.0 (double)\n1E-1D    // this means 1.0 x 10^(-1) ... or 0.1 (double)\n1.0e10f  // this means 1.0 x 10^(10) ... or 10000000000.0 (float)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530509,
        "id": "0070c3cf-0d30-4329-8fe7-47f7caab46d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530509,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The size of a literal is limited by the representation ("
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). It is a compilation error if the scale factor results in a value that is too large or too small."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The size of a literal is limited by the representation ("
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": "). It is a compilation error if the scale factor results in a value that is too large or too small."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530509,
        "id": "3677830f-a5e5-454a-b3ee-f313df01d1ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530509,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hexadecimal forms"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hexadecimal forms"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530509,
        "id": "4c2ba3bc-70fa-4869-bfc4-baeb449c37ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530509,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Starting with Java 6, it is possible to express floating point literals in hexadecimal. The hexadecimal form have an analogous syntax to the simple and scaled decimal forms with the following differences:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Starting with Java 6, it is possible to express floating point literals in hexadecimal. The hexadecimal form have an analogous syntax to the simple and scaled decimal forms with the following differences:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530510,
        "id": "01d4dd0e-4ea4-4cd1-8d6a-990d0bdd16d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530510,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Every hexadecimal floating point literal starts with a zero ("
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and then an "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "X",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Every hexadecimal floating point literal starts with a zero ("
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ") and then an "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "X",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530510,
        "id": "090771ca-53c9-4c37-8968-04c6e5accbd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530510,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The digits of the number (but "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the exponent part!) also include the hexadecimal digits "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " through "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and their uppercase equivalents."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The digits of the number (but "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " the exponent part!) also include the hexadecimal digits "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " through "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " and their uppercase equivalents."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530511,
        "id": "e1c589a6-d6ee-440d-864f-dd8d6a0d6ee3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530511,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The exponent is "
            ],
            [
              "mandatory",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", and is introduced by the letter "
            ],
            [
              "p",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (or "
            ],
            [
              "P",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") instead of an "
            ],
            [
              "e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "E",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The exponent represents a scaling factor that is a power of 2 instead of a power of 10."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The exponent is "
          },
          {
            "Text": "mandatory",
            "AttrFlags": 4
          },
          {
            "Text": ", and is introduced by the letter "
          },
          {
            "Text": "p",
            "AttrFlags": 2
          },
          {
            "Text": " (or "
          },
          {
            "Text": "P",
            "AttrFlags": 2
          },
          {
            "Text": ") instead of an "
          },
          {
            "Text": "e",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "E",
            "AttrFlags": 2
          },
          {
            "Text": ". The exponent represents a scaling factor that is a power of 2 instead of a power of 10."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530511,
        "id": "4c6b64aa-bf53-4caa-a10e-b29a4560e9e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530511,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here are some examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here are some examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530512,
        "id": "a9c3ff96-c172-4d6a-be68-79c69e18a73d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530512,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "0x0.0p0f    // this is zero expressed in hexadecimal form (`float`)\n0xff.0p19   // this is 255.0 x 2^19 (`double`)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "0x0.0p0f    // this is zero expressed in hexadecimal form (`float`)\n0xff.0p19   // this is 255.0 x 2^19 (`double`)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530512,
        "id": "7735d7e5-8424-4d64-899d-daa655d27d2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530512,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Advice: since hexadecimal floating-point forms are unfamiliar to most Java programmers, it is advisable to use them sparingly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Advice: since hexadecimal floating-point forms are unfamiliar to most Java programmers, it is advisable to use them sparingly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530512,
        "id": "2044d2cc-0698-4772-832b-ad031b7e02cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530512,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Underscores"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Underscores"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530512,
        "id": "d22587b3-5889-4cd6-a555-524fd8aedae4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530512,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Starting with Java 7, underscores are permitted within the digit strings in all three forms of floating point literal. This applies to the “exponent” parts as well. See "
            ],
            [
              "Using underscores to improve readability",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/8250/literals/12632/using-underscore-to-improve-readability#t=201612261252199151525"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Starting with Java 7, underscores are permitted within the digit strings in all three forms of floating point literal. This applies to the “exponent” parts as well. See "
          },
          {
            "Text": "Using underscores to improve readability",
            "Link": "http://stackoverflow.com/documentation/java/8250/literals/12632/using-underscore-to-improve-readability#t=201612261252199151525"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530512,
        "id": "eeb45fd4-ad15-411f-adf8-83de575cecd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530512,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Special cases"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Special cases"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530513,
        "id": "24e9e2c0-3718-4c27-a93d-f32cee03d116",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530513,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is a compilation error if a floating point literal denotes a number that is too large or too small to represent in the selected representation; i.e. if the number would overflow to +INF or -INF, or underflow to 0.0. However, it is legal for a literal to represent a non-zero denormalized number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is a compilation error if a floating point literal denotes a number that is too large or too small to represent in the selected representation; i.e. if the number would overflow to +INF or -INF, or underflow to 0.0. However, it is legal for a literal to represent a non-zero denormalized number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519530513,
        "id": "e94d3f4f-0a62-4e7c-8c6c-270354fcfde3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519530513,
        "parent_id": "41c9fca6-278c-4a9f-894b-ac64d055065e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The floating point literal syntax does not provide literal representations for IEEE 754 special values such as the INF and NaN values. If you need to express them in source code, the recommended way is to use the constants defined by the "
            ],
            [
              "java.lang.Float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "java.lang.Double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; e.g. "
            ],
            [
              "Float.NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Float.NEGATIVE_INFINITY",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Float.POSITIVE_INFINITY",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The floating point literal syntax does not provide literal representations for IEEE 754 special values such as the INF and NaN values. If you need to express them in source code, the recommended way is to use the constants defined by the "
          },
          {
            "Text": "java.lang.Float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "java.lang.Double",
            "AttrFlags": 2
          },
          {
            "Text": "; e.g. "
          },
          {
            "Text": "Float.NaN",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Float.NEGATIVE_INFINITY",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Float.POSITIVE_INFINITY",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Floating-point literals",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}