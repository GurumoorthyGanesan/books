{
  "ID": "54294b60-fc62-4c02-82f2-51023efebff8",
  "Root": {
    "alive": true,
    "content": [
      "49e083eb-0327-46e2-9562-8477e17f1d10",
      "9a50b9a2-57b8-4fc9-b103-2a1688f99987",
      "8151385b-e6dd-40f5-857e-1f8354f8769a",
      "766590ff-fb2f-4078-81ba-521f8c9d54c4",
      "a119017b-f99e-4ad0-a271-3d4321d0dcf9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461153172,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "54294b60-fc62-4c02-82f2-51023efebff8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551755490556,
    "parent_id": "c1a139ac-088d-487a-93c4-a161e63d7a0f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Polymorphism"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461153169,
        "id": "49e083eb-0327-46e2-9562-8477e17f1d10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461153169,
        "parent_id": "54294b60-fc62-4c02-82f2-51023efebff8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461153169,
        "id": "9a50b9a2-57b8-4fc9-b103-2a1688f99987",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461153169,
        "parent_id": "54294b60-fc62-4c02-82f2-51023efebff8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Polymorphism is one of main OOP(object oriented programming) concepts. Polymorphism word was derived from the greek words “poly” and “morphs”. Poly means “many” and morphs means “forms” (many forms)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Polymorphism is one of main OOP(object oriented programming) concepts. Polymorphism word was derived from the greek words “poly” and “morphs”. Poly means “many” and morphs means “forms” (many forms)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461153170,
        "id": "8151385b-e6dd-40f5-857e-1f8354f8769a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461153170,
        "parent_id": "54294b60-fc62-4c02-82f2-51023efebff8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two ways to perform polymorphism. "
            ],
            [
              "Method Overloading",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Method Overriding",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two ways to perform polymorphism. "
          },
          {
            "Text": "Method Overloading",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "Method Overriding",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461153170,
        "id": "766590ff-fb2f-4078-81ba-521f8c9d54c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461153170,
        "parent_id": "54294b60-fc62-4c02-82f2-51023efebff8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461153172,
        "id": "a119017b-f99e-4ad0-a271-3d4321d0dcf9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461153172,
        "parent_id": "54294b60-fc62-4c02-82f2-51023efebff8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interfaces",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"
                ]
              ]
            ],
            [
              " are another way to achieve polymorphism in Java, apart from class based inheritance. Interfaces define a list of methods which form the API of the program. Classes must "
            ],
            [
              "implement",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " an "
            ],
            [
              "interface",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by overriding all its methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interfaces",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"
          },
          {
            "Text": " are another way to achieve polymorphism in Java, apart from class based inheritance. Interfaces define a list of methods which form the API of the program. Classes must "
          },
          {
            "Text": "implement",
            "AttrFlags": 2
          },
          {
            "Text": " an "
          },
          {
            "Text": "interface",
            "AttrFlags": 2
          },
          {
            "Text": " by overriding all its methods."
          }
        ]
      }
    ],
    "title": "Polymorphism",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}