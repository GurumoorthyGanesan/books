{
  "ID": "27f6639c-ef46-4528-a103-cbb5d76d7004",
  "Root": {
    "alive": true,
    "content": [
      "95988b3a-166a-4bd2-b61e-3cf54b36335b",
      "6534b263-bac5-4358-aac2-0f4222227527",
      "08157eb9-8085-4864-aaab-ec352ede8b19",
      "e089cefd-6742-4feb-bfb8-4ea578340a9f",
      "09d8f00f-ac64-4576-b5d1-1780086790e8",
      "71ef1b44-acdc-4c56-8cac-c7dce4bb990d",
      "09a60cde-4935-4687-85a9-fc15e9e7ea3d",
      "bda96d3a-61a5-4563-92ec-8494f62080ca",
      "4eadd035-d076-4626-b545-696657c808ee",
      "603f2319-343d-48a2-acf5-9235692de276",
      "508bd539-939b-44ea-8440-440db2d82355",
      "85fd0cff-8789-46db-9537-367cb234d81a",
      "b9c89a5b-f7d0-4c51-b34f-d7e9f392fc18",
      "1dbca5a8-2644-4b2b-92ff-f1586cbea68e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460481175,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551753678668,
    "parent_id": "554c1de0-d05d-42a6-83c5-3aa4b3d0fc65",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Memory and Computational Overhead of Autoboxing"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481168,
        "id": "95988b3a-166a-4bd2-b61e-3cf54b36335b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481168,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Autoboxing can come at a substantial memory overhead. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Autoboxing can come at a substantial memory overhead. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481173,
        "id": "6534b263-bac5-4358-aac2-0f4222227527",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481173,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Map\u003cInteger, Integer\u003e square = new HashMap\u003cInteger, Integer\u003e();\nfor(int i = 256; i \u003c 1024; i++) {\n    square.put(i, i * i); // Autoboxing of large integers\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Map\u003cInteger, Integer\u003e square = new HashMap\u003cInteger, Integer\u003e();\nfor(int i = 256; i \u003c 1024; i++) {\n    square.put(i, i * i); // Autoboxing of large integers\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481173,
        "id": "08157eb9-8085-4864-aaab-ec352ede8b19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481173,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "will typically consume substantial amount of memory (about 60kb for 6k of actual data)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "will typically consume substantial amount of memory (about 60kb for 6k of actual data)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481173,
        "id": "e089cefd-6742-4feb-bfb8-4ea578340a9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481173,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Furthermore, boxed integers usually require additional round-trips in the memory, and thus make CPU caches less effective. In above example, the memory accessed is spread out to five different locations that may be in entirely different regions of the memory: 1. the "
            ],
            [
              "HashMap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, 2. the map’s "
            ],
            [
              "Entry[] table",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, 3. the "
            ],
            [
              "Entry",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, 4. the entrys "
            ],
            [
              "key",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object (boxing the primitive key), 5. the entrys "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object (boxing the primitive value)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Furthermore, boxed integers usually require additional round-trips in the memory, and thus make CPU caches less effective. In above example, the memory accessed is spread out to five different locations that may be in entirely different regions of the memory: 1. the "
          },
          {
            "Text": "HashMap",
            "AttrFlags": 2
          },
          {
            "Text": " object, 2. the map’s "
          },
          {
            "Text": "Entry[] table",
            "AttrFlags": 2
          },
          {
            "Text": " object, 3. the "
          },
          {
            "Text": "Entry",
            "AttrFlags": 2
          },
          {
            "Text": " object, 4. the entrys "
          },
          {
            "Text": "key",
            "AttrFlags": 2
          },
          {
            "Text": " object (boxing the primitive key), 5. the entrys "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " object (boxing the primitive value)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481173,
        "id": "09d8f00f-ac64-4576-b5d1-1780086790e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481173,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Example {\n  int primitive; // Stored directly in the class `Example`\n  Integer boxed; // Reference to another memory location\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Example {\n  int primitive; // Stored directly in the class `Example`\n  Integer boxed; // Reference to another memory location\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481174,
        "id": "71ef1b44-acdc-4c56-8cac-c7dce4bb990d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481174,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reading "
            ],
            [
              "boxed",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires two memory accesses, accessing "
            ],
            [
              "primitive",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reading "
          },
          {
            "Text": "boxed",
            "AttrFlags": 2
          },
          {
            "Text": " requires two memory accesses, accessing "
          },
          {
            "Text": "primitive",
            "AttrFlags": 2
          },
          {
            "Text": " only one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481174,
        "id": "09a60cde-4935-4687-85a9-fc15e9e7ea3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481174,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When getting data from this map, the seemingly innocent code"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When getting data from this map, the seemingly innocent code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481174,
        "id": "bda96d3a-61a5-4563-92ec-8494f62080ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481174,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int sumOfSquares = 0;\nfor(int i = 256; i \u003c 1024; i++) {\n    sumOfSquares += square.get(i);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int sumOfSquares = 0;\nfor(int i = 256; i \u003c 1024; i++) {\n    sumOfSquares += square.get(i);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481174,
        "id": "4eadd035-d076-4626-b545-696657c808ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481174,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is equivalent to:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is equivalent to:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481174,
        "id": "603f2319-343d-48a2-acf5-9235692de276",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481174,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int sumOfSquares = 0;\nfor(int i = 256; i \u003c 1024; i++) {\n    sumOfSquares += square.get(Integer.valueOf(i)).intValue();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int sumOfSquares = 0;\nfor(int i = 256; i \u003c 1024; i++) {\n    sumOfSquares += square.get(Integer.valueOf(i)).intValue();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481174,
        "id": "508bd539-939b-44ea-8440-440db2d82355",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481174,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Typically, the above code causes the "
            ],
            [
              "creation and garbage collection",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of an "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object for every "
            ],
            [
              "Map#get(Integer)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operation. (See Note below for more details.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Typically, the above code causes the "
          },
          {
            "Text": "creation and garbage collection",
            "AttrFlags": 4
          },
          {
            "Text": " of an "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " object for every "
          },
          {
            "Text": "Map#get(Integer)",
            "AttrFlags": 2
          },
          {
            "Text": " operation. (See Note below for more details.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481175,
        "id": "85fd0cff-8789-46db-9537-367cb234d81a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481175,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To reduce this overhead, several libraries offer optimized collections for primitive types that do "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " require boxing. In addition to avoiding the boxing overhead, these collection will require about 4x less memory per entry. While Java Hotspot "
            ],
            [
              "may",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be able to optimize the autoboxing by working with objects on the stack instead of the heap, it is not possible to optimize the memory overhead and resulting memory indirection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To reduce this overhead, several libraries offer optimized collections for primitive types that do "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " require boxing. In addition to avoiding the boxing overhead, these collection will require about 4x less memory per entry. While Java Hotspot "
          },
          {
            "Text": "may",
            "AttrFlags": 4
          },
          {
            "Text": " be able to optimize the autoboxing by working with objects on the stack instead of the heap, it is not possible to optimize the memory overhead and resulting memory indirection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481175,
        "id": "b9c89a5b-f7d0-4c51-b34f-d7e9f392fc18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481175,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java 8 streams also have optimized interfaces for primitive data types, such as "
            ],
            [
              "IntStream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that do not require boxing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java 8 streams also have optimized interfaces for primitive data types, such as "
          },
          {
            "Text": "IntStream",
            "AttrFlags": 2
          },
          {
            "Text": " that do not require boxing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460481175,
        "id": "1dbca5a8-2644-4b2b-92ff-f1586cbea68e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460481175,
        "parent_id": "27f6639c-ef46-4528-a103-cbb5d76d7004",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: a typical Java runtime maintains a simple cache of "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and other primitive wrapper object that is used by the "
            ],
            [
              "valueOf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " factory methods, and by autoboxing. For "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the default range of this cache is -128 to +127. Some JVMs provide a JVM command-line option for changing the cache size / range."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: a typical Java runtime maintains a simple cache of "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " and other primitive wrapper object that is used by the "
          },
          {
            "Text": "valueOf",
            "AttrFlags": 2
          },
          {
            "Text": " factory methods, and by autoboxing. For "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": ", the default range of this cache is -128 to +127. Some JVMs provide a JVM command-line option for changing the cache size / range."
          }
        ]
      }
    ],
    "title": "Memory and Computational Overhead of Autoboxing",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}