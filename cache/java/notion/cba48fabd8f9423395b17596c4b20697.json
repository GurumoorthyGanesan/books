{
  "ID": "cba48fab-d8f9-4233-95b1-7596c4b20697",
  "Root": {
    "alive": true,
    "content": [
      "a2d11d0f-438b-4573-8ab2-f0c08cd44a90",
      "2d5d8425-6348-4d1c-8f96-b84a8216c8b3",
      "b19bcfd4-4933-4829-aaa6-fc91c1ca6a5a",
      "0e64ec55-2c48-4dd4-819e-7aa3795422da",
      "3a62ff25-e2fe-462e-9bf0-77084b3ed43d",
      "5c77ca8c-e1a2-4817-bd12-fe09f18708fa",
      "a8e0fb3f-5f77-4a0b-b444-6962f2a0de09",
      "34ef4a8e-d567-4012-afc6-f2edc5d7eac5",
      "6f2c7611-6f95-4956-9c0c-7a0341364f25",
      "ef737ca5-2ca4-4321-8420-4b0e9722ff4b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518706493,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551768697054,
    "parent_id": "012a60f0-6603-428f-90f0-56d12cde3fa4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pitfall - Unnecessary use of Primitive Wrappers can lead to NullPointerExceptions"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706487,
        "id": "a2d11d0f-438b-4573-8ab2-f0c08cd44a90",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706487,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes, programmers who are new Java will use primitive types and wrappers interchangeably. This can lead to problems. Consider this example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes, programmers who are new Java will use primitive types and wrappers interchangeably. This can lead to problems. Consider this example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706490,
        "id": "2d5d8425-6348-4d1c-8f96-b84a8216c8b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706490,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class MyRecord {\n    public int a, b;\n    public Integer c, d;\n}\n\n...\nMyRecord record = new MyRecord();\nrecord.a = 1;               // OK\nrecord.b = record.b + 1;    // OK\nrecord.c = 1;               // OK\nrecord.d = record.d + 1;    // throws a NullPointerException"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class MyRecord {\n    public int a, b;\n    public Integer c, d;\n}\n\n...\nMyRecord record = new MyRecord();\nrecord.a = 1;               // OK\nrecord.b = record.b + 1;    // OK\nrecord.c = 1;               // OK\nrecord.d = record.d + 1;    // throws a NullPointerException",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706490,
        "id": "b19bcfd4-4933-4829-aaa6-fc91c1ca6a5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706490,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our "
            ],
            [
              "MyRecord",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class1 relies on default initialization to initialize the values on its fields. Thus, when we "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a record, the "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields will be set to zero, and the "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields will be set to "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our "
          },
          {
            "Text": "MyRecord",
            "AttrFlags": 2
          },
          {
            "Text": " class1 relies on default initialization to initialize the values on its fields. Thus, when we "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " a record, the "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " fields will be set to zero, and the "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": " fields will be set to "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706491,
        "id": "0e64ec55-2c48-4dd4-819e-7aa3795422da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706491,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we try to use the default initialized fields, we see that the "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields works all of the time, but the "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields work in some cases and not others. Specifically, in the case that fails (with "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), what happens is that the expression on the right-hand side attempts to unbox a "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference, and that is what causes the "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to be thrown."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we try to use the default initialized fields, we see that the "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " fields works all of the time, but the "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " fields work in some cases and not others. Specifically, in the case that fails (with "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": "), what happens is that the expression on the right-hand side attempts to unbox a "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " reference, and that is what causes the "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2
          },
          {
            "Text": " to be thrown."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706491,
        "id": "3a62ff25-e2fe-462e-9bf0-77084b3ed43d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706491,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are a couple of ways to look at this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are a couple of ways to look at this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706492,
        "id": "5c77ca8c-e1a2-4817-bd12-fe09f18708fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706492,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the fields "
            ],
            [
              "c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " need to be primitive wrappers, then either we should not be relying on default initialization, or we should be testing for "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For former is the correct approach "
            ],
            [
              "unless",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " there is a definite meaning for the fields in the "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " state."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the fields "
          },
          {
            "Text": "c",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "d",
            "AttrFlags": 2
          },
          {
            "Text": " need to be primitive wrappers, then either we should not be relying on default initialization, or we should be testing for "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ". For former is the correct approach "
          },
          {
            "Text": "unless",
            "AttrFlags": 4
          },
          {
            "Text": " there is a definite meaning for the fields in the "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706492,
        "id": "a8e0fb3f-5f77-4a0b-b444-6962f2a0de09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706492,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the fields don’t need to be primitive wrappers, then it is a mistake to make them primitive wrappers. In addition to this problem, the primitive wrappers have extra overheads relative to primitive types."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the fields don’t need to be primitive wrappers, then it is a mistake to make them primitive wrappers. In addition to this problem, the primitive wrappers have extra overheads relative to primitive types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706492,
        "id": "34ef4a8e-d567-4012-afc6-f2edc5d7eac5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706492,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The lesson here is to not use primitive wrapper types unless you really need to."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The lesson here is to not use primitive wrapper types unless you really need to."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706493,
        "id": "6f2c7611-6f95-4956-9c0c-7a0341364f25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706493,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518706493,
        "id": "ef737ca5-2ca4-4321-8420-4b0e9722ff4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518706493,
        "parent_id": "cba48fab-d8f9-4233-95b1-7596c4b20697",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 - This class is not an example of good coding practice. For instance, a well-designed class would not have public fields. However, that is not the point of this example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 - This class is not an example of good coding practice. For instance, a well-designed class would not have public fields. However, that is not the point of this example."
          }
        ]
      }
    ],
    "title": "Pitfall - Unnecessary use of Primitive Wrappers can lead to NullPointerExceptions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}