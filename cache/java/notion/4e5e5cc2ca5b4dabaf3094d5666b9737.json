{
  "ID": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
  "Root": {
    "alive": true,
    "content": [
      "59a571f8-5123-4502-a9e6-0714c7823dc9",
      "bc8d1890-c5c3-48b2-b316-91e5b8a57f0f",
      "7fdfed7a-228f-4209-9958-370c9f7aa3b6",
      "af443497-379b-4118-ac3f-5193540c31d6",
      "1055743e-ad66-4155-abab-ba03c341170e",
      "b63329cb-daf1-43c0-ada1-b10ba526d3fc",
      "7156bcb5-7119-401d-a26a-2960061cd96b",
      "057b0e7a-3b55-4afc-a283-41a53488277c",
      "598482d8-6490-4e4a-8dfb-e29a9240bac9",
      "e0365525-f9af-4f20-89bd-bbcb5a5e9721",
      "a5c82a56-35eb-4623-846d-62a49b71e903",
      "603aba2f-3941-48bc-838c-03eec036015f",
      "23a5495a-3c25-4266-a49c-0cc4d42b9d83",
      "f97bb0a5-b976-461f-a2a5-5314ddc592ec",
      "8dc8e39f-43ae-4d49-96ef-1682028393b6",
      "e049888c-47d7-41e1-892a-8e0625df33da",
      "8817f77c-8521-4b81-9270-0697764b2a3d",
      "a6da3133-5f6e-4257-854e-cdfaf2781567",
      "2bcff146-2e45-40d5-9224-cf2e149f5716",
      "09844b30-9308-4b46-b699-1b78673a8f99"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460501100,
    "id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460501100,
    "parent_id": "3bdee82f-cd88-45a7-8656-12de08206f33",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Use cases for different types of concurrency constructs"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501093,
        "id": "59a571f8-5123-4502-a9e6-0714c7823dc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501093,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ExecutorService",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "ExecutorService",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501094,
        "id": "bc8d1890-c5c3-48b2-b316-91e5b8a57f0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501094,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ExecutorService executor = Executors.newFixedThreadPool(50);",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ExecutorService executor = Executors.newFixedThreadPool(50);",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501094,
        "id": "7fdfed7a-228f-4209-9958-370c9f7aa3b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501094,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is simple and easy to use. It hides low level details of "
            ],
            [
              "ThreadPoolExecutor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is simple and easy to use. It hides low level details of "
          },
          {
            "Text": "ThreadPoolExecutor",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501094,
        "id": "af443497-379b-4118-ac3f-5193540c31d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501094,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I prefer this one when number of "
            ],
            [
              "Callable/Runnable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tasks are small in number and piling of tasks in unbounded queue does not increase memory \u0026 degrade the performance of the system. If you have "
            ],
            [
              "CPU/Memory",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constraints, I prefer to use "
            ],
            [
              "ThreadPoolExecutor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with capacity constraints \u0026 "
            ],
            [
              "RejectedExecutionHandler",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to handle rejection of tasks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I prefer this one when number of "
          },
          {
            "Text": "Callable/Runnable",
            "AttrFlags": 2
          },
          {
            "Text": " tasks are small in number and piling of tasks in unbounded queue does not increase memory \u0026 degrade the performance of the system. If you have "
          },
          {
            "Text": "CPU/Memory",
            "AttrFlags": 2
          },
          {
            "Text": " constraints, I prefer to use "
          },
          {
            "Text": "ThreadPoolExecutor",
            "AttrFlags": 2
          },
          {
            "Text": " with capacity constraints \u0026 "
          },
          {
            "Text": "RejectedExecutionHandler",
            "AttrFlags": 2
          },
          {
            "Text": " to handle rejection of tasks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501095,
        "id": "1055743e-ad66-4155-abab-ba03c341170e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501095,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CountDownLatch",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "CountDownLatch",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501095,
        "id": "b63329cb-daf1-43c0-ada1-b10ba526d3fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501095,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CountDownLatch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be initialized with a given count. This count is decremented by calls to the "
            ],
            [
              "countDown()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method. Threads waiting for this count to reach zero can call one of the "
            ],
            [
              "await()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods. Calling "
            ],
            [
              "await()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " blocks the thread until the count reaches zero. "
            ],
            [
              "This class enables a java thread to wait until other set of threads completes their tasks.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "CountDownLatch",
            "AttrFlags": 2
          },
          {
            "Text": " will be initialized with a given count. This count is decremented by calls to the "
          },
          {
            "Text": "countDown()",
            "AttrFlags": 2
          },
          {
            "Text": " method. Threads waiting for this count to reach zero can call one of the "
          },
          {
            "Text": "await()",
            "AttrFlags": 2
          },
          {
            "Text": " methods. Calling "
          },
          {
            "Text": "await()",
            "AttrFlags": 2
          },
          {
            "Text": " blocks the thread until the count reaches zero. "
          },
          {
            "Text": "This class enables a java thread to wait until other set of threads completes their tasks.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501095,
        "id": "7156bcb5-7119-401d-a26a-2960061cd96b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501095,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use cases:",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use cases:",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501096,
        "id": "057b0e7a-3b55-4afc-a283-41a53488277c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501096,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Achieving Maximum Parallelism: Sometimes we want to start a number of threads at the same time to achieve maximum parallelism"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Achieving Maximum Parallelism: Sometimes we want to start a number of threads at the same time to achieve maximum parallelism"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501096,
        "id": "598482d8-6490-4e4a-8dfb-e29a9240bac9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501096,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Wait N threads to completes before start execution"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Wait N threads to completes before start execution"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501096,
        "id": "e0365525-f9af-4f20-89bd-bbcb5a5e9721",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501096,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Deadlock detection."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Deadlock detection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501097,
        "id": "a5c82a56-35eb-4623-846d-62a49b71e903",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501097,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ThreadPoolExecutor",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html"
                ]
              ]
            ],
            [
              " : It provides more control. If application is constrained by number of pending Runnable/Callable tasks, you can use bounded queue by setting the max capacity. Once the queue reaches maximum capacity, you can define RejectionHandler. Java provides four types of "
            ],
            [
              "RejectedExecutionHandler",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "policies",
              [
                [
                  "a",
                  "http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "ThreadPoolExecutor",
            "Link": "http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html"
          },
          {
            "Text": " : It provides more control. If application is constrained by number of pending Runnable/Callable tasks, you can use bounded queue by setting the max capacity. Once the queue reaches maximum capacity, you can define RejectionHandler. Java provides four types of "
          },
          {
            "Text": "RejectedExecutionHandler",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "policies",
            "Link": "http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501097,
        "id": "603aba2f-3941-48bc-838c-03eec036015f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501097,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1. `ThreadPoolExecutor.AbortPolicy`, the handler throws a runtime RejectedExecutionException upon rejection.\n\n2. ThreadPoolExecutor.CallerRunsPolicy`, the thread that invokes execute itself runs the task. This provides a simple feedback control mechanism that will slow down the rate that new tasks are submitted.\n\n3. In `ThreadPoolExecutor.DiscardPolicy`, a task that cannot be executed is simply dropped.\n\n4. `ThreadPoolExecutor.DiscardOldestPolicy`, if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1. `ThreadPoolExecutor.AbortPolicy`, the handler throws a runtime RejectedExecutionException upon rejection.\n\n2. ThreadPoolExecutor.CallerRunsPolicy`, the thread that invokes execute itself runs the task. This provides a simple feedback control mechanism that will slow down the rate that new tasks are submitted.\n\n3. In `ThreadPoolExecutor.DiscardPolicy`, a task that cannot be executed is simply dropped.\n\n4. `ThreadPoolExecutor.DiscardOldestPolicy`, if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501097,
        "id": "23a5495a-3c25-4266-a49c-0cc4d42b9d83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501097,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to simulate "
            ],
            [
              "CountDownLatch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " behaviour, you can use "
            ],
            [
              "invokeAll()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to simulate "
          },
          {
            "Text": "CountDownLatch",
            "AttrFlags": 2
          },
          {
            "Text": " behaviour, you can use "
          },
          {
            "Text": "invokeAll()",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501098,
        "id": "f97bb0a5-b976-461f-a2a5-5314ddc592ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501098,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One more mechanism you did not quote is "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "One more mechanism you did not quote is "
          },
          {
            "Text": "ForkJoinPool",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501098,
        "id": "8dc8e39f-43ae-4d49-96ef-1682028393b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501098,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was added to Java in Java 7. The "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is similar to the Java "
            ],
            [
              "ExecutorService",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but with one difference. The "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " makes it easy for tasks to split their work up into smaller tasks which are then submitted to the "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " too. Task stealing happens in "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when free worker threads steal tasks from busy worker thread queue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "ForkJoinPool",
            "AttrFlags": 2
          },
          {
            "Text": " was added to Java in Java 7. The "
          },
          {
            "Text": "ForkJoinPool",
            "AttrFlags": 2
          },
          {
            "Text": " is similar to the Java "
          },
          {
            "Text": "ExecutorService",
            "AttrFlags": 2
          },
          {
            "Text": " but with one difference. The "
          },
          {
            "Text": "ForkJoinPool",
            "AttrFlags": 2
          },
          {
            "Text": " makes it easy for tasks to split their work up into smaller tasks which are then submitted to the "
          },
          {
            "Text": "ForkJoinPool",
            "AttrFlags": 2
          },
          {
            "Text": " too. Task stealing happens in "
          },
          {
            "Text": "ForkJoinPool",
            "AttrFlags": 2
          },
          {
            "Text": " when free worker threads steal tasks from busy worker thread queue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501099,
        "id": "e049888c-47d7-41e1-892a-8e0625df33da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501099,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java 8 has introduced one more API in "
            ],
            [
              "ExecutorService",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html"
                ]
              ]
            ],
            [
              " to create work stealing pool. You don’t have to create "
            ],
            [
              "RecursiveTask",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "RecursiveAction",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but still can use "
            ],
            [
              "ForkJoinPool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java 8 has introduced one more API in "
          },
          {
            "Text": "ExecutorService",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html"
          },
          {
            "Text": " to create work stealing pool. You don’t have to create "
          },
          {
            "Text": "RecursiveTask",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "RecursiveAction",
            "AttrFlags": 2
          },
          {
            "Text": " but still can use "
          },
          {
            "Text": "ForkJoinPool",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501099,
        "id": "8817f77c-8521-4b81-9270-0697764b2a3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501099,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static ExecutorService newWorkStealingPool()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static ExecutorService newWorkStealingPool()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501099,
        "id": "a6da3133-5f6e-4257-854e-cdfaf2781567",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501099,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creates a work-stealing thread pool using all available processors as its target parallelism level."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creates a work-stealing thread pool using all available processors as its target parallelism level."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501099,
        "id": "2bcff146-2e45-40d5-9224-cf2e149f5716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501099,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default, it will take number of CPU cores as parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default, it will take number of CPU cores as parameter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460501100,
        "id": "09844b30-9308-4b46-b699-1b78673a8f99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460501100,
        "parent_id": "4e5e5cc2-ca5b-4dab-af30-94d5666b9737",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All these four mechanism are complimentary to each other. Depending on level of granularity you want to control, you have to chose right ones."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All these four mechanism are complimentary to each other. Depending on level of granularity you want to control, you have to chose right ones."
          }
        ]
      }
    ],
    "title": "060 Use cases for different types of concurrency constructs"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}