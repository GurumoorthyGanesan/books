{
  "ID": "0668340c-6f03-4afb-b3e2-59f630873eac",
  "Root": {
    "alive": true,
    "content": [
      "98a41389-743a-42e9-b06e-b420bea61172",
      "33e74d1d-259f-4075-9fa1-c21111e6bc20",
      "c9cdcec2-d706-41aa-a64b-7dfb1dc15f32",
      "df32a73b-a35c-4dd3-9b85-7ac4ed00ac88",
      "8af71ce0-0fa6-45d5-bb84-84d25777e716",
      "6ddfae49-3c0e-4736-ab82-92291660411d",
      "43edf81a-f78b-481f-a9a4-3c8230c1a56d",
      "7bb4caa1-f1b0-497a-abc3-a0c2025e118d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460472007,
    "id": "0668340c-6f03-4afb-b3e2-59f630873eac",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460472007,
    "parent_id": "814dd116-37ca-4db6-82af-c82641c48f28",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Matching a backslash"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472005,
        "id": "98a41389-743a-42e9-b06e-b420bea61172",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472005,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to match a backslash in your regular expression, you’ll have to escape it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to match a backslash in your regular expression, you’ll have to escape it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472006,
        "id": "33e74d1d-259f-4075-9fa1-c21111e6bc20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472006,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Backslash is an escape character in regular expressions. You can use ‘\\\\’ to refer to a single backslash in a regular expression."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Backslash is an escape character in regular expressions. You can use ‘\\\\’ to refer to a single backslash in a regular expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472006,
        "id": "c9cdcec2-d706-41aa-a64b-7dfb1dc15f32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472006,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, backslash is "
            ],
            [
              "also",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " an escape character in Java literal strings. To make a regular expression from a string literal, you have to escape each of "
            ],
            [
              "its",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " backslashes. In a string literal ‘\\\\\\\\’ can be used to create a regular expression with ‘\\\\’, which in turn can match ‘\\’."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, backslash is "
          },
          {
            "Text": "also",
            "AttrFlags": 4
          },
          {
            "Text": " an escape character in Java literal strings. To make a regular expression from a string literal, you have to escape each of "
          },
          {
            "Text": "its",
            "AttrFlags": 4
          },
          {
            "Text": " backslashes. In a string literal ‘\\\\\\\\’ can be used to create a regular expression with ‘\\\\’, which in turn can match ‘\\’."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472006,
        "id": "df32a73b-a35c-4dd3-9b85-7ac4ed00ac88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472006,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, consider matching strings like “C:\\dir\\myfile.txt”. A regular expression ([A-Za-z]):\\\\(.*) will match, and provide the drive letter as a capturing group. Note the doubled backslash."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, consider matching strings like “C:\\dir\\myfile.txt”. A regular expression ([A-Za-z]):\\\\(.*) will match, and provide the drive letter as a capturing group. Note the doubled backslash."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472006,
        "id": "8af71ce0-0fa6-45d5-bb84-84d25777e716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472006,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To express that pattern in a Java string literal, each of the backslashes in the regular expression needs to be escaped."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To express that pattern in a Java string literal, each of the backslashes in the regular expression needs to be escaped."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472007,
        "id": "6ddfae49-3c0e-4736-ab82-92291660411d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472007,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String path = \"C:\\\\dir\\\\myfile.txt\";\nSystem.out.println( \"Local path: \" + path ); // \"C:\\dir\\myfile.txt\"\n\nString regex = \"([A-Za-z]):\\\\\\\\.*\"; // Four to match one\nSystem.out.println(\"Regex:      \" + regex ); // \"([A-Za-z]):\\\\(.*)\"\n\nPattern pattern = Pattern.compile( regex );\nMatcher matcher = pattern.matcher( path );\nif ( matcher.matches()) {\n    System.out.println( \"This path is on drive \" + matcher.group( 1 ) + \":.\");\n    // This path is on drive C:.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String path = \"C:\\\\dir\\\\myfile.txt\";\nSystem.out.println( \"Local path: \" + path ); // \"C:\\dir\\myfile.txt\"\n\nString regex = \"([A-Za-z]):\\\\\\\\.*\"; // Four to match one\nSystem.out.println(\"Regex:      \" + regex ); // \"([A-Za-z]):\\\\(.*)\"\n\nPattern pattern = Pattern.compile( regex );\nMatcher matcher = pattern.matcher( path );\nif ( matcher.matches()) {\n    System.out.println( \"This path is on drive \" + matcher.group( 1 ) + \":.\");\n    // This path is on drive C:.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472007,
        "id": "43edf81a-f78b-481f-a9a4-3c8230c1a56d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472007,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to match "
            ],
            [
              "two",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " backslashes, you’ll find yourself using eight in a literal string, to represent four in the regular expression, to match two."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to match "
          },
          {
            "Text": "two",
            "AttrFlags": 4
          },
          {
            "Text": " backslashes, you’ll find yourself using eight in a literal string, to represent four in the regular expression, to match two."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460472007,
        "id": "7bb4caa1-f1b0-497a-abc3-a0c2025e118d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460472007,
        "parent_id": "0668340c-6f03-4afb-b3e2-59f630873eac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String path = \"\\\\\\\\myhost\\\\share\\\\myfile.txt\";\nSystem.out.println( \"UNC path: \" + path ); // \\\\myhost\\share\\myfile.txt\"\n\nString regex = \"\\\\\\\\\\\\\\\\(.+?)\\\\\\\\(.*)\"; // Eight to match two\nSystem.out.println(\"Regex:    \" + regex ); // \\\\\\\\(.+?)\\\\(.*) \n\nPattern pattern = Pattern.compile( regex );\nMatcher matcher = pattern.matcher( path );\n\nif ( matcher.matches()) {\n    System.out.println( \"This path is on host '\" + matcher.group( 1 ) + \"'.\");\n    // This path is on host 'myhost'.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String path = \"\\\\\\\\myhost\\\\share\\\\myfile.txt\";\nSystem.out.println( \"UNC path: \" + path ); // \\\\myhost\\share\\myfile.txt\"\n\nString regex = \"\\\\\\\\\\\\\\\\(.+?)\\\\\\\\(.*)\"; // Eight to match two\nSystem.out.println(\"Regex:    \" + regex ); // \\\\\\\\(.+?)\\\\(.*) \n\nPattern pattern = Pattern.compile( regex );\nMatcher matcher = pattern.matcher( path );\n\nif ( matcher.matches()) {\n    System.out.println( \"This path is on host '\" + matcher.group( 1 ) + \"'.\");\n    // This path is on host 'myhost'.\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "060 Matching a backslash"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}