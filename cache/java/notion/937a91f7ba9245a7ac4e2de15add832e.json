{
  "ID": "937a91f7-ba92-45a7-ac4e-2de15add832e",
  "Root": {
    "alive": true,
    "content": [
      "14187248-71f7-4d68-bf69-86412de0c217",
      "1ec257ae-0bf3-421e-9dc3-578492300466",
      "8b005ec9-7d39-4dd0-ab5f-fab084529e72",
      "5e46c0c3-dc93-4923-a3fd-c1aa86450496",
      "1c4150bf-702a-401a-afed-d150d2525e85",
      "a69a5ca3-d16c-4e7f-bbfb-6224b5a32cbe",
      "2c298f16-f109-429e-a4b1-325ff597e9ab",
      "2339693a-b870-4849-8eb1-3147c9ce274d",
      "ebfde2bc-c966-4bd0-8946-9df77b3d1cc7",
      "a0cf1215-8218-463b-ad15-79de48d3c78c",
      "becbf979-4ed3-40e4-b9dc-101d96e06bee",
      "3a49d364-06f0-45f9-a8ff-c35322632c6f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518477700,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551743179513,
    "parent_id": "bac27a47-c983-46b6-ac55-bf131c4ab1ec",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Pitfall incorrect use of wait notify"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477695,
        "id": "14187248-71f7-4d68-bf69-86412de0c217",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477695,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The methods "
            ],
            [
              "object.wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "object.notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "object.notifyAll()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are meant to be used in a very specific way. (see http://stackoverflow.com/documentation/java/5409/wait-notify#t=20160811161648303307 )"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The methods "
          },
          {
            "Text": "object.wait()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "object.notify()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "object.notifyAll()",
            "AttrFlags": 2
          },
          {
            "Text": " are meant to be used in a very specific way. (see http://stackoverflow.com/documentation/java/5409/wait-notify#t=20160811161648303307 )"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477697,
        "id": "1ec257ae-0bf3-421e-9dc3-578492300466",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477697,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The “Lost Notification” problem"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The “Lost Notification” problem"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477698,
        "id": "8b005ec9-7d39-4dd0-ab5f-fab084529e72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477698,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One common beginner mistake is to unconditionally call "
            ],
            [
              "object.wait()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One common beginner mistake is to unconditionally call "
          },
          {
            "Text": "object.wait()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477698,
        "id": "5e46c0c3-dc93-4923-a3fd-c1aa86450496",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477698,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private final Object lock = new Object();\n\npublic void myConsumer() {\n    synchronized (lock) {\n        lock.wait();     // DON'T DO THIS!!\n    }\n    doSomething();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private final Object lock = new Object();\n\npublic void myConsumer() {\n    synchronized (lock) {\n        lock.wait();     // DON'T DO THIS!!\n    }\n    doSomething();\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477698,
        "id": "1c4150bf-702a-401a-afed-d150d2525e85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477698,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reason this is wrong is that it depends on some other thread to call "
            ],
            [
              "lock.notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "lock.notifyAll()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but nothing guarantees that the other thread did not make that call "
            ],
            [
              "before",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the consumer thread called "
            ],
            [
              "lock.wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reason this is wrong is that it depends on some other thread to call "
          },
          {
            "Text": "lock.notify()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "lock.notifyAll()",
            "AttrFlags": 2
          },
          {
            "Text": ", but nothing guarantees that the other thread did not make that call "
          },
          {
            "Text": "before",
            "AttrFlags": 4
          },
          {
            "Text": " the consumer thread called "
          },
          {
            "Text": "lock.wait()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477699,
        "id": "a69a5ca3-d16c-4e7f-bbfb-6224b5a32cbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477699,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lock.notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "lock.notifyAll()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " do not do anything at all if some other thread is not "
            ],
            [
              "already",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " waiting for the notification. The thread that calls "
            ],
            [
              "myConsumer()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in this example will hang forever if it is too late to catch the notification."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "lock.notify()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "lock.notifyAll()",
            "AttrFlags": 2
          },
          {
            "Text": " do not do anything at all if some other thread is not "
          },
          {
            "Text": "already",
            "AttrFlags": 4
          },
          {
            "Text": " waiting for the notification. The thread that calls "
          },
          {
            "Text": "myConsumer()",
            "AttrFlags": 2
          },
          {
            "Text": " in this example will hang forever if it is too late to catch the notification."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477699,
        "id": "2c298f16-f109-429e-a4b1-325ff597e9ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477699,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The “Illegal Monitor State” bug"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The “Illegal Monitor State” bug"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477699,
        "id": "2339693a-b870-4849-8eb1-3147c9ce274d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477699,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you call "
            ],
            [
              "wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on an object without holding the lock, then the JVM will throw "
            ],
            [
              "IllegalMonitorStateException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you call "
          },
          {
            "Text": "wait()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "notify()",
            "AttrFlags": 2
          },
          {
            "Text": " on an object without holding the lock, then the JVM will throw "
          },
          {
            "Text": "IllegalMonitorStateException",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477699,
        "id": "ebfde2bc-c966-4bd0-8946-9df77b3d1cc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477699,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public void myConsumer() {\n    lock.wait();      // throws exception\n    consume();\n}\n\npublic void myProducer() {\n    produce();\n    lock.notify();    // throws exception\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public void myConsumer() {\n    lock.wait();      // throws exception\n    consume();\n}\n\npublic void myProducer() {\n    produce();\n    lock.notify();    // throws exception\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477700,
        "id": "a0cf1215-8218-463b-ad15-79de48d3c78c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477700,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(The design for "
            ],
            [
              "wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " / "
            ],
            [
              "notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " requires that the lock is held because this is necessary to avoid systemic race conditions. If it was possible to call "
            ],
            [
              "wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " without locking, then it would be impossible to implement the primary use-case for these primitives: waiting for a condition to occur.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(The design for "
          },
          {
            "Text": "wait()",
            "AttrFlags": 2
          },
          {
            "Text": " / "
          },
          {
            "Text": "notify()",
            "AttrFlags": 2
          },
          {
            "Text": " requires that the lock is held because this is necessary to avoid systemic race conditions. If it was possible to call "
          },
          {
            "Text": "wait()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "notify()",
            "AttrFlags": 2
          },
          {
            "Text": " without locking, then it would be impossible to implement the primary use-case for these primitives: waiting for a condition to occur.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477700,
        "id": "becbf979-4ed3-40e4-b9dc-101d96e06bee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477700,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Wait / notify is too low-level"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Wait / notify is too low-level"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518477700,
        "id": "3a49d364-06f0-45f9-a8ff-c35322632c6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518477700,
        "parent_id": "937a91f7-ba92-45a7-ac4e-2de15add832e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "best",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " way to avoid problems with "
            ],
            [
              "wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is to not use them. Most synchronization problems can be solved by using the higher-level synchronization objects (queues, barriers, semaphores, etc.) that are available in the "
            ],
            [
              "java.utils.concurrent",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " package."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "best",
            "AttrFlags": 4
          },
          {
            "Text": " way to avoid problems with "
          },
          {
            "Text": "wait()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "notify()",
            "AttrFlags": 2
          },
          {
            "Text": " is to not use them. Most synchronization problems can be solved by using the higher-level synchronization objects (queues, barriers, semaphores, etc.) that are available in the "
          },
          {
            "Text": "java.utils.concurrent",
            "AttrFlags": 2
          },
          {
            "Text": " package."
          }
        ]
      }
    ],
    "title": "Pitfall incorrect use of wait notify",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}