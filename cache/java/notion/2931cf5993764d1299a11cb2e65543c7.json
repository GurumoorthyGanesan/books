{
  "ID": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
  "Root": {
    "alive": true,
    "content": [
      "b01f5021-b204-4941-9b03-c333edab4262",
      "8b25015a-ff4d-4680-bfc2-e6649b2c4f3f",
      "c9ffc5ae-15a0-4206-a551-49b1490fda8f",
      "cc4e1be8-af48-4f8c-8bc3-c49b512790af",
      "c7d9e7bb-19fc-4ccc-988f-7c061b08e224",
      "46a1dc64-1f5c-4b9b-bea1-9c30c6c5844a",
      "81bb90c7-045d-466c-80c2-6f9c5eff1588",
      "21cec4de-b188-4b06-976e-b0901580e0aa",
      "6edbebe6-75b9-42e6-b976-3e50d4335456",
      "b2436e93-ae58-4145-b894-0e24042ef39e",
      "b0aac18b-8f51-486c-97e8-7ec40a47ed18"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460435795,
    "id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460435795,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "110 Exclusive write Concurrent read access"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435790,
        "id": "b01f5021-b204-4941-9b03-c333edab4262",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435790,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is sometimes required for a process to concurrently write and read the same “data”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is sometimes required for a process to concurrently write and read the same “data”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435793,
        "id": "8b25015a-ff4d-4680-bfc2-e6649b2c4f3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435793,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "ReadWriteLock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface, and its "
            ],
            [
              "ReentrantReadWriteLock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation allows for an access pattern that can be described as follow :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "ReadWriteLock",
            "AttrFlags": 2
          },
          {
            "Text": " interface, and its "
          },
          {
            "Text": "ReentrantReadWriteLock",
            "AttrFlags": 2
          },
          {
            "Text": " implementation allows for an access pattern that can be described as follow :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435794,
        "id": "c9ffc5ae-15a0-4206-a551-49b1490fda8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435794,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There can be any number of concurrent readers of the data. If there is at least one reader access granted, then no writer access is possible."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There can be any number of concurrent readers of the data. If there is at least one reader access granted, then no writer access is possible."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435794,
        "id": "cc4e1be8-af48-4f8c-8bc3-c49b512790af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435794,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There can be at most one single writer to the data. If there is a writer access granted, then no reader can access the data."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "There can be at most one single writer to the data. If there is a writer access granted, then no reader can access the data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435794,
        "id": "c7d9e7bb-19fc-4ccc-988f-7c061b08e224",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435794,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An implementation could look like :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An implementation could look like :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435794,
        "id": "46a1dc64-1f5c-4b9b-bea1-9c30c6c5844a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435794,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\npublic class Sample {\n\n// Our lock. The constructor allows a \"fairness\" setting, which guarantees the chronology of lock attributions.\nprotected static final ReadWriteLock RW_LOCK = new ReentrantReadWriteLock();\n\n// This is a typical data that needs to be protected for concurrent access\nprotected static int data = 0;\n\n/** This will write to the data, in an exclusive access */\npublic static void writeToData() {\n    RW_LOCK.writeLock().lock();\n    try {\n        data++;\n    } finally {\n        RW_LOCK.writeLock().unlock();\n    }\n}\n\npublic static int readData() {\n    RW_LOCK.readLock().lock();\n    try {\n        return data;\n    } finally {\n        RW_LOCK.readLock().unlock();\n    }\n}\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\npublic class Sample {\n\n// Our lock. The constructor allows a \"fairness\" setting, which guarantees the chronology of lock attributions.\nprotected static final ReadWriteLock RW_LOCK = new ReentrantReadWriteLock();\n\n// This is a typical data that needs to be protected for concurrent access\nprotected static int data = 0;\n\n/** This will write to the data, in an exclusive access */\npublic static void writeToData() {\n    RW_LOCK.writeLock().lock();\n    try {\n        data++;\n    } finally {\n        RW_LOCK.writeLock().unlock();\n    }\n}\n\npublic static int readData() {\n    RW_LOCK.readLock().lock();\n    try {\n        return data;\n    } finally {\n        RW_LOCK.readLock().unlock();\n    }\n}\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435794,
        "id": "81bb90c7-045d-466c-80c2-6f9c5eff1588",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435794,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " : This precise use case has a cleaner solution using "
            ],
            [
              "AtomicInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but what is described here is an access pattern, that works regardless of the fact that data here is an integer that as an Atomic variant."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE 1",
            "AttrFlags": 1
          },
          {
            "Text": " : This precise use case has a cleaner solution using "
          },
          {
            "Text": "AtomicInteger",
            "AttrFlags": 2
          },
          {
            "Text": ", but what is described here is an access pattern, that works regardless of the fact that data here is an integer that as an Atomic variant."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435795,
        "id": "21cec4de-b188-4b06-976e-b0901580e0aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435795,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " : The lock on the reading part is really needed, although it might not look so to the casual reader. Indeed, if you do not lock on the reader side, any number of things can go wrong, amongst which :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE 2",
            "AttrFlags": 1
          },
          {
            "Text": " : The lock on the reading part is really needed, although it might not look so to the casual reader. Indeed, if you do not lock on the reader side, any number of things can go wrong, amongst which :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435795,
        "id": "6edbebe6-75b9-42e6-b976-3e50d4335456",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435795,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The writes of primitive values are not guaranteed to be atomic on all JVMs, so the reader could see e.g. only 32bits of a 64bits write if "
            ],
            [
              "data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " were a 64bits long type"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The writes of primitive values are not guaranteed to be atomic on all JVMs, so the reader could see e.g. only 32bits of a 64bits write if "
          },
          {
            "Text": "data",
            "AttrFlags": 2
          },
          {
            "Text": " were a 64bits long type"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435795,
        "id": "b2436e93-ae58-4145-b894-0e24042ef39e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435795,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The visibility of the write from a thread that did not perform it is guaranteed by the JVM only if we establish "
            ],
            [
              "Happen Before relationship",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " between the writes and the reads. This relationship is established when both readers and writers use their respective locks, but not otherwise"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The visibility of the write from a thread that did not perform it is guaranteed by the JVM only if we establish "
          },
          {
            "Text": "Happen Before relationship",
            "AttrFlags": 4
          },
          {
            "Text": " between the writes and the reads. This relationship is established when both readers and writers use their respective locks, but not otherwise"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460435795,
        "id": "b0aac18b-8f51-486c-97e8-7ec40a47ed18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460435795,
        "parent_id": "2931cf59-9376-4d12-99a1-1cb2e65543c7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In case higher performance is required, an under certain types of usage, there is a faster lock type available, called the "
            ],
            [
              "StampedLock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", that amongst other things implements an optimistic lock mode. This lock works very differently from the "
            ],
            [
              "ReadWriteLock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and this sample is not transposable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In case higher performance is required, an under certain types of usage, there is a faster lock type available, called the "
          },
          {
            "Text": "StampedLock",
            "AttrFlags": 2
          },
          {
            "Text": ", that amongst other things implements an optimistic lock mode. This lock works very differently from the "
          },
          {
            "Text": "ReadWriteLock",
            "AttrFlags": 2
          },
          {
            "Text": ", and this sample is not transposable."
          }
        ]
      }
    ],
    "title": "110 Exclusive write Concurrent read access"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}