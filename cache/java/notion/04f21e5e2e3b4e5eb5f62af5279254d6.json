{
  "ID": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
  "Root": {
    "alive": true,
    "content": [
      "c13a3cef-333a-401e-922a-7f3cc85e6670",
      "a57138e3-7132-479a-8327-ff2d41b0f8d9",
      "a95d21ba-f113-45f7-8fc5-8f895909fa61",
      "55d23a33-017e-4e68-afc9-c53960a00ba1",
      "df63c97f-3730-435d-b293-0dc1577ff048",
      "3934ef9c-491e-4a81-a47a-654e1af0048f",
      "7a4b689e-81ee-4143-9b8a-db808b667a93",
      "ec6eb349-358e-4964-848c-d8e8694b568e",
      "81d7d706-5001-4562-9362-24bc27168c54",
      "af5f5d57-c143-4cb6-aa12-6bc08dcb7636",
      "410dbd74-3419-4fc3-9a4f-3034a28dd872"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460418191,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551747812333,
    "parent_id": "dbf1646a-6f86-4971-898a-a9a47703bccc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "For Loops"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418186,
        "id": "c13a3cef-333a-401e-922a-7f3cc85e6670",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418186,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for (int i = 0; i \u003c 100; i++) {\n    System.out.println(i);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for (int i = 0; i \u003c 100; i++) {\n    System.out.println(i);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418189,
        "id": "a57138e3-7132-479a-8327-ff2d41b0f8d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418189,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The three components of the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop (separated by "
            ],
            [
              ";",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") are variable declaration/initialization (here "
            ],
            [
              "int i = 0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), the condition (here "
            ],
            [
              "i \u003c 100",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and the increment statement (here "
            ],
            [
              "i++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). The variable declaration is done once as if placed just inside the "
            ],
            [
              "\\{",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the first run. Then the condition is checked, if it is "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the body of the loop will execute, if it is "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the loop will stop. Assuming the loop continues, the body will execute and finally when the "
            ],
            [
              "\\}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is reached the increment statement will execute just before the condition is checked again."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The three components of the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop (separated by "
          },
          {
            "Text": ";",
            "AttrFlags": 2
          },
          {
            "Text": ") are variable declaration/initialization (here "
          },
          {
            "Text": "int i = 0",
            "AttrFlags": 2
          },
          {
            "Text": "), the condition (here "
          },
          {
            "Text": "i \u003c 100",
            "AttrFlags": 2
          },
          {
            "Text": "), and the increment statement (here "
          },
          {
            "Text": "i++",
            "AttrFlags": 2
          },
          {
            "Text": "). The variable declaration is done once as if placed just inside the "
          },
          {
            "Text": "\\{",
            "AttrFlags": 2
          },
          {
            "Text": " on the first run. Then the condition is checked, if it is "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " the body of the loop will execute, if it is "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " the loop will stop. Assuming the loop continues, the body will execute and finally when the "
          },
          {
            "Text": "\\}",
            "AttrFlags": 2
          },
          {
            "Text": " is reached the increment statement will execute just before the condition is checked again."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "a95d21ba-f113-45f7-8fc5-8f895909fa61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The curly braces are optional (you can one line with a semicolon) if the loop contains just one statement. But, it’s always recommended to use braces to avoid misunderstandings and bugs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The curly braces are optional (you can one line with a semicolon) if the loop contains just one statement. But, it’s always recommended to use braces to avoid misunderstandings and bugs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "55d23a33-017e-4e68-afc9-c53960a00ba1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop components are optional. If your business logic contains one of these parts, you can omit the corresponding component from your "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop components are optional. If your business logic contains one of these parts, you can omit the corresponding component from your "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "df63c97f-3730-435d-b293-0dc1577ff048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = obj.getLastestValue(); // i value is fetched from a method\n    \nfor (; i \u003c 100; i++) { // here initialization is not done\n    System.out.println(i);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = obj.getLastestValue(); // i value is fetched from a method\n    \nfor (; i \u003c 100; i++) { // here initialization is not done\n    System.out.println(i);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "3934ef9c-491e-4a81-a47a-654e1af0048f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "for (;;) { function-body }",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " structure is equal to a "
            ],
            [
              "while (true)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "for (;;) { function-body }",
            "AttrFlags": 2
          },
          {
            "Text": " structure is equal to a "
          },
          {
            "Text": "while (true)",
            "AttrFlags": 2
          },
          {
            "Text": " loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "7a4b689e-81ee-4143-9b8a-db808b667a93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Nested For Loops",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Nested For Loops",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "ec6eb349-358e-4964-848c-d8e8694b568e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any looping statement having another loop statement inside called nested loop. The same way for looping having more inner loop is called ‘nested for loop’."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any looping statement having another loop statement inside called nested loop. The same way for looping having more inner loop is called ‘nested for loop’."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "81d7d706-5001-4562-9362-24bc27168c54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(;;){\n    //Outer Loop Statements\n    for(;;){\n        //Inner Loop Statements\n    }\n    //Outer Loop Statements\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(;;){\n    //Outer Loop Statements\n    for(;;){\n        //Inner Loop Statements\n    }\n    //Outer Loop Statements\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "af5f5d57-c143-4cb6-aa12-6bc08dcb7636",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Nested for loop can be demonstrated to print triangle shaped numbers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Nested for loop can be demonstrated to print triangle shaped numbers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460418190,
        "id": "410dbd74-3419-4fc3-9a4f-3034a28dd872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460418190,
        "parent_id": "04f21e5e-2e3b-4e5e-b5f6-2af5279254d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "for(int i=9;i\u003e0;i--){//Outer Loop\n    System.out.println();\n    for(int k=i;k\u003e0;k--){//Inner Loop -1\n        System.out.print(\" \");\n    }\n    for(int j=i;j\u003c=9;j++){//Inner Loop -2\n        System.out.print(\" \"+j);\n    }\n }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "for(int i=9;i\u003e0;i--){//Outer Loop\n    System.out.println();\n    for(int k=i;k\u003e0;k--){//Inner Loop -1\n        System.out.print(\" \");\n    }\n    for(int j=i;j\u003c=9;j++){//Inner Loop -2\n        System.out.print(\" \"+j);\n    }\n }",
        "code_language": "Plain Text"
      }
    ],
    "title": "For Loops",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}