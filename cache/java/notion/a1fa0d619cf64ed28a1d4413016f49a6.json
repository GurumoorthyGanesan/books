{
  "ID": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
  "Root": {
    "alive": true,
    "content": [
      "e2e8a4b4-eb92-4963-8ffb-d0b6c60129d6",
      "b0e4e9f1-8281-4928-8dfe-cf97dea3334c",
      "ec7ded62-3419-4859-9846-b99205593f58",
      "fb9a72ba-f715-4166-b5a2-65000b39077d",
      "0452fd94-b6b3-496c-b666-30b9d14b1d71",
      "7c33aa3e-3b86-491c-861f-a9933648cfa5",
      "1c8865ed-7a57-441b-afdd-50df31a88a2e",
      "a72cd7ed-23e2-4bf2-8e7d-3d11dae8e919",
      "1ae7eab7-8c9d-41ea-8337-3c62071219f3",
      "60bd9d58-3b42-4548-84d0-a01d46900798",
      "203875d4-0898-4ef9-907d-9eb65f6b6dcf"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461156374,
    "id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461156374,
    "parent_id": "c1a139ac-088d-487a-93c4-a161e63d7a0f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Polymorphism and different types of overriding"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156371,
        "id": "e2e8a4b4-eb92-4963-8ffb-d0b6c60129d6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156371,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From java "
            ],
            [
              "tutorial",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From java "
          },
          {
            "Text": "tutorial",
            "Link": "https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156372,
        "id": "b0e4e9f1-8281-4928-8dfe-cf97dea3334c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156372,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The dictionary definition of polymorphism refers to a principle in biology in which an organism or species can have many different forms or stages. This principle can also be applied to object-oriented programming and languages like the Java language. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The dictionary definition of polymorphism refers to a principle in biology in which an organism or species can have many different forms or stages. This principle can also be applied to object-oriented programming and languages like the Java language. Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156373,
        "id": "ec7ded62-3419-4859-9846-b99205593f58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156373,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Have a look at this example to understand different types of overriding."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Have a look at this example to understand different types of overriding."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156373,
        "id": "fb9a72ba-f715-4166-b5a2-65000b39077d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156373,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Base class provides no implementation and sub-class has to override complete method - (abstract)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Base class provides no implementation and sub-class has to override complete method - (abstract)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156373,
        "id": "0452fd94-b6b3-496c-b666-30b9d14b1d71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156373,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Base class provides default implementation and sub-class can change the behaviour"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Base class provides default implementation and sub-class can change the behaviour"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156374,
        "id": "7c33aa3e-3b86-491c-861f-a9933648cfa5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156374,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sub-class adds extension to base class implementation by calling "
            ],
            [
              "super.methodName()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as first statement"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sub-class adds extension to base class implementation by calling "
          },
          {
            "Text": "super.methodName()",
            "AttrFlags": 2
          },
          {
            "Text": " as first statement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156374,
        "id": "1c8865ed-7a57-441b-afdd-50df31a88a2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156374,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Base class defines structure of the algorithm (Template method) and sub-class will override a part of algorithm"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Base class defines structure of the algorithm (Template method) and sub-class will override a part of algorithm"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156374,
        "id": "a72cd7ed-23e2-4bf2-8e7d-3d11dae8e919",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156374,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "code snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "code snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156374,
        "id": "1ae7eab7-8c9d-41ea-8337-3c62071219f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156374,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.HashMap;\n\nabstract class Game implements Runnable{\n\n    protected boolean runGame = true;\n    protected Player player1 = null;\n    protected Player player2 = null;\n    protected Player currentPlayer = null;\n    \n    public Game(){\n        player1 = new Player(\"Player 1\");\n        player2 = new Player(\"Player 2\");\n        currentPlayer = player1;\n        initializeGame();\n    }\n\n    /* Type 1: Let subclass define own implementation. Base class defines abstract method to force\n        sub-classes to define implementation    \n    */\n    \n    protected abstract void initializeGame();\n    \n    /* Type 2: Sub-class can change the behaviour. If not, base class behaviour is applicable */\n    protected void logTimeBetweenMoves(Player player){\n        System.out.println(\"Base class: Move Duration: player.PlayerActTime - player.MoveShownTime\");\n    }\n    \n    /* Type 3: Base class provides implementation. Sub-class can enhance base class implementation by calling\n        super.methodName() in first line of the child class method and specific implementation later */\n    protected void logGameStatistics(){\n        System.out.println(\"Base class: logGameStatistics:\");\n    }\n    /* Type 4: Template method: Structure of base class can't be changed but sub-class can some part of behaviour */\n    protected void runGame() throws Exception{\n        System.out.println(\"Base class: Defining the flow for Game:\");    \n        while (runGame) {\n            /*\n            1. Set current player\n            2. Get Player Move\n            */\n            validatePlayerMove(currentPlayer);    \n            logTimeBetweenMoves(currentPlayer);\n            Thread.sleep(500);\n            setNextPlayer();\n        }\n        logGameStatistics();\n    }\n    /* sub-part of the template method, which define child class behaviour */\n    protected abstract void validatePlayerMove(Player p);\n    \n    protected void setRunGame(boolean status){\n        this.runGame = status;\n    }\n    public void setCurrentPlayer(Player p){\n        this.currentPlayer = p;\n    }\n    public void setNextPlayer(){\n        if (currentPlayer == player1) {\n            currentPlayer = player2;\n        }else{\n            currentPlayer = player1;\n        }\n    }\n    public void run(){\n        try{\n            runGame();\n        }catch(Exception err){\n            err.printStackTrace();\n        }\n    }\n}\n\nclass Player{\n    String name;\n    Player(String name){\n        this.name = name;\n    }\n    public String getName(){\n        return name;\n    }\n}\n\n/* Concrete Game implementation  */\nclass Chess extends Game{\n    public Chess(){\n        super();\n    }\n    public void initializeGame(){\n        System.out.println(\"Child class: Initialized Chess game\");\n    }\n    protected void validatePlayerMove(Player p){\n        System.out.println(\"Child class: Validate Chess move:\" + p.getName());\n    }\n    protected void logGameStatistics(){\n        super.logGameStatistics();\n        System.out.println(\"Child class: Add Chess specific logGameStatistics:\");\n    }\n}\nclass TicTacToe extends Game{\n    public TicTacToe(){\n        super();\n    }\n    public void initializeGame(){\n        System.out.println(\"Child class: Initialized TicTacToe game\");\n    }\n    protected void validatePlayerMove(Player p){\n        System.out.println(\"Child class: Validate TicTacToe move:\" + p.getName());\n    }\n}\n\npublic class Polymorphism{\n    public static void main(String args[]){\n        try{\n        \n            Game game = new Chess();\n            Thread t1 = new Thread(game);\n            t1.start();\n            Thread.sleep(1000);\n            game.setRunGame(false);\n            Thread.sleep(1000);\n                        \n            game = new TicTacToe();\n            Thread t2 = new Thread(game);\n            t2.start();\n            Thread.sleep(1000);\n            game.setRunGame(false);\n        \n        }catch(Exception err){\n            err.printStackTrace();\n        }        \n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.HashMap;\n\nabstract class Game implements Runnable{\n\n    protected boolean runGame = true;\n    protected Player player1 = null;\n    protected Player player2 = null;\n    protected Player currentPlayer = null;\n    \n    public Game(){\n        player1 = new Player(\"Player 1\");\n        player2 = new Player(\"Player 2\");\n        currentPlayer = player1;\n        initializeGame();\n    }\n\n    /* Type 1: Let subclass define own implementation. Base class defines abstract method to force\n        sub-classes to define implementation    \n    */\n    \n    protected abstract void initializeGame();\n    \n    /* Type 2: Sub-class can change the behaviour. If not, base class behaviour is applicable */\n    protected void logTimeBetweenMoves(Player player){\n        System.out.println(\"Base class: Move Duration: player.PlayerActTime - player.MoveShownTime\");\n    }\n    \n    /* Type 3: Base class provides implementation. Sub-class can enhance base class implementation by calling\n        super.methodName() in first line of the child class method and specific implementation later */\n    protected void logGameStatistics(){\n        System.out.println(\"Base class: logGameStatistics:\");\n    }\n    /* Type 4: Template method: Structure of base class can't be changed but sub-class can some part of behaviour */\n    protected void runGame() throws Exception{\n        System.out.println(\"Base class: Defining the flow for Game:\");    \n        while (runGame) {\n            /*\n            1. Set current player\n            2. Get Player Move\n            */\n            validatePlayerMove(currentPlayer);    \n            logTimeBetweenMoves(currentPlayer);\n            Thread.sleep(500);\n            setNextPlayer();\n        }\n        logGameStatistics();\n    }\n    /* sub-part of the template method, which define child class behaviour */\n    protected abstract void validatePlayerMove(Player p);\n    \n    protected void setRunGame(boolean status){\n        this.runGame = status;\n    }\n    public void setCurrentPlayer(Player p){\n        this.currentPlayer = p;\n    }\n    public void setNextPlayer(){\n        if (currentPlayer == player1) {\n            currentPlayer = player2;\n        }else{\n            currentPlayer = player1;\n        }\n    }\n    public void run(){\n        try{\n            runGame();\n        }catch(Exception err){\n            err.printStackTrace();\n        }\n    }\n}\n\nclass Player{\n    String name;\n    Player(String name){\n        this.name = name;\n    }\n    public String getName(){\n        return name;\n    }\n}\n\n/* Concrete Game implementation  */\nclass Chess extends Game{\n    public Chess(){\n        super();\n    }\n    public void initializeGame(){\n        System.out.println(\"Child class: Initialized Chess game\");\n    }\n    protected void validatePlayerMove(Player p){\n        System.out.println(\"Child class: Validate Chess move:\" + p.getName());\n    }\n    protected void logGameStatistics(){\n        super.logGameStatistics();\n        System.out.println(\"Child class: Add Chess specific logGameStatistics:\");\n    }\n}\nclass TicTacToe extends Game{\n    public TicTacToe(){\n        super();\n    }\n    public void initializeGame(){\n        System.out.println(\"Child class: Initialized TicTacToe game\");\n    }\n    protected void validatePlayerMove(Player p){\n        System.out.println(\"Child class: Validate TicTacToe move:\" + p.getName());\n    }\n}\n\npublic class Polymorphism{\n    public static void main(String args[]){\n        try{\n        \n            Game game = new Chess();\n            Thread t1 = new Thread(game);\n            t1.start();\n            Thread.sleep(1000);\n            game.setRunGame(false);\n            Thread.sleep(1000);\n                        \n            game = new TicTacToe();\n            Thread t2 = new Thread(game);\n            t2.start();\n            Thread.sleep(1000);\n            game.setRunGame(false);\n        \n        }catch(Exception err){\n            err.printStackTrace();\n        }        \n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156374,
        "id": "60bd9d58-3b42-4548-84d0-a01d46900798",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156374,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461156374,
        "id": "203875d4-0898-4ef9-907d-9eb65f6b6dcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461156374,
        "parent_id": "a1fa0d61-9cf6-4ed2-8a1d-4413016f49a6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Child class: Initialized Chess game\nBase class: Defining the flow for Game:\nChild class: Validate Chess move:Player 1\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nChild class: Validate Chess move:Player 2\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nBase class: logGameStatistics:\nChild class: Add Chess specific logGameStatistics:\n\nChild class: Initialized TicTacToe game\nBase class: Defining the flow for Game:\nChild class: Validate TicTacToe move:Player 1\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nChild class: Validate TicTacToe move:Player 2\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nBase class: logGameStatistics:"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Child class: Initialized Chess game\nBase class: Defining the flow for Game:\nChild class: Validate Chess move:Player 1\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nChild class: Validate Chess move:Player 2\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nBase class: logGameStatistics:\nChild class: Add Chess specific logGameStatistics:\n\nChild class: Initialized TicTacToe game\nBase class: Defining the flow for Game:\nChild class: Validate TicTacToe move:Player 1\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nChild class: Validate TicTacToe move:Player 2\nBase class: Move Duration: player.PlayerActTime - player.MoveShownTime\nBase class: logGameStatistics:",
        "code_language": "Plain Text"
      }
    ],
    "title": "030 Polymorphism and different types of overriding"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}