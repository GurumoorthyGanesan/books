{
  "ID": "7126919e-28f7-4f46-97e3-1f060b30f336",
  "Root": {
    "alive": true,
    "content": [
      "6e59a9f7-e84a-4d12-bf60-63bf9e40a385",
      "65c416ac-5ae2-4da5-b294-93536e95c6eb",
      "a8d0c7f7-562d-4b4f-9a0a-1e2796edeebd",
      "e65a6729-85a9-4b14-aa5e-63cbd966f64d",
      "179e50f6-4e71-47af-9911-503bc7ee27c2",
      "59b976a8-d5aa-4ccc-b720-e9e48d46f0b7",
      "56cb440c-d898-4e78-ba94-b30448dfb6f8",
      "2affb755-34dc-4d85-9c3b-6b3cc7debd10",
      "378d822f-6c40-4ddd-9297-96f6ba999306",
      "af22325a-6f3d-4bce-abb6-374755e86778",
      "3660a5a1-b062-4f90-97ee-50599de678e2",
      "9f85afc0-a215-43b9-911b-289b850d42cd",
      "6b766bef-4d11-49d8-b550-bc77ec15e712",
      "3b850cc1-07cf-42c3-8bdc-a7a1b97f07fd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460811112,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7126919e-28f7-4f46-97e3-1f060b30f336",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460811112,
    "parent_id": "6c6c87a4-551e-4cdd-b523-66ee2c5d11cb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Shift Operators and"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811094,
        "id": "6e59a9f7-e84a-4d12-bf60-63bf9e40a385",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811094,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Java language provides three operator for performing bitwise shifting on 32 and 64 bit integer values. These are all binary operators with the first operand being the value to be shifted, and the second operand saying how far to shift."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Java language provides three operator for performing bitwise shifting on 32 and 64 bit integer values. These are all binary operators with the first operand being the value to be shifted, and the second operand saying how far to shift."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811095,
        "id": "65c416ac-5ae2-4da5-b294-93536e95c6eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811095,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "left shift",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator shifts the value given by the first operand "
            ],
            [
              "leftwards",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by the number of bit positions given by the second operand. The empty positions at the right end are filled with zeros."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "left shift",
            "AttrFlags": 4
          },
          {
            "Text": " operator shifts the value given by the first operand "
          },
          {
            "Text": "leftwards",
            "AttrFlags": 4
          },
          {
            "Text": " by the number of bit positions given by the second operand. The empty positions at the right end are filled with zeros."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811095,
        "id": "a8d0c7f7-562d-4b4f-9a0a-1e2796edeebd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811095,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ‘\u003e\u003e’ or "
            ],
            [
              "arithmetic shift",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator shifts the value given by the first operand "
            ],
            [
              "rightwards",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by the number of bit positions given by the second operand. The empty positions at the left end are filled by copying the left-most bit. This process is known as "
            ],
            [
              "sign extension",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ‘\u003e\u003e’ or "
          },
          {
            "Text": "arithmetic shift",
            "AttrFlags": 4
          },
          {
            "Text": " operator shifts the value given by the first operand "
          },
          {
            "Text": "rightwards",
            "AttrFlags": 4
          },
          {
            "Text": " by the number of bit positions given by the second operand. The empty positions at the left end are filled by copying the left-most bit. This process is known as "
          },
          {
            "Text": "sign extension",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811096,
        "id": "e65a6729-85a9-4b14-aa5e-63cbd966f64d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811096,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The ‘\u003e\u003e\u003e’ or "
            ],
            [
              "logical right shift",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator shifts the value given by the first operand "
            ],
            [
              "rightwards",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " by the number of bit positions given by the second operand. The empty positions at the left end are filled with zeros."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The ‘\u003e\u003e\u003e’ or "
          },
          {
            "Text": "logical right shift",
            "AttrFlags": 4
          },
          {
            "Text": " operator shifts the value given by the first operand "
          },
          {
            "Text": "rightwards",
            "AttrFlags": 4
          },
          {
            "Text": " by the number of bit positions given by the second operand. The empty positions at the left end are filled with zeros."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811096,
        "id": "179e50f6-4e71-47af-9911-503bc7ee27c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811096,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811096,
        "id": "59b976a8-d5aa-4ccc-b720-e9e48d46f0b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811096,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These operators require an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value as the first operand, and produce a value with the same type as the first operand. (You will need to use an explicit type cast when assigning the result of a shift to a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable.)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "These operators require an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": " value as the first operand, and produce a value with the same type as the first operand. (You will need to use an explicit type cast when assigning the result of a shift to a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " variable.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811097,
        "id": "56cb440c-d898-4e78-ba94-b30448dfb6f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811097,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you use a shift operator with a first operand that is a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is promoted to an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the operation produces an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you use a shift operator with a first operand that is a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", it is promoted to an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " and the operation produces an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ".)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811099,
        "id": "2affb755-34dc-4d85-9c3b-6b3cc7debd10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811099,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second operand is reduced "
            ],
            [
              "modulo the number of bits of the operation",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to give the amount of the shift. For more about the "
            ],
            [
              "mod mathematical concept",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", see "
            ],
            [
              "Modulus examples",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/176/operators/14283/modulus-examples#t=201607262031550001554"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second operand is reduced "
          },
          {
            "Text": "modulo the number of bits of the operation",
            "AttrFlags": 4
          },
          {
            "Text": " to give the amount of the shift. For more about the "
          },
          {
            "Text": "mod mathematical concept",
            "AttrFlags": 1
          },
          {
            "Text": ", see "
          },
          {
            "Text": "Modulus examples",
            "Link": "http://stackoverflow.com/documentation/java/176/operators/14283/modulus-examples#t=201607262031550001554"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811099,
        "id": "378d822f-6c40-4ddd-9297-96f6ba999306",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811099,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bits that are shifted off the left or right end by the operation are discarded. (Java does not provide a primitive “rotate” operator.)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bits that are shifted off the left or right end by the operation are discarded. (Java does not provide a primitive “rotate” operator.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811099,
        "id": "af22325a-6f3d-4bce-abb6-374755e86778",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811099,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The arithmetic shift operator is equivalent dividing a (two’s complement) number by a power of 2."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The arithmetic shift operator is equivalent dividing a (two’s complement) number by a power of 2."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811099,
        "id": "3660a5a1-b062-4f90-97ee-50599de678e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811099,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The left shift operator is equivalent multiplying a (two’s complement) number by a power of 2."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The left shift operator is equivalent multiplying a (two’s complement) number by a power of 2."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811099,
        "id": "9f85afc0-a215-43b9-911b-289b850d42cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811099,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following table will help you see the effects of the three shift operators. (The numbers have been expressed in binary notation to aid vizualization.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following table will help you see the effects of the three shift operators. (The numbers have been expressed in binary notation to aid vizualization.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811100,
        "id": "6b766bef-4d11-49d8-b550-bc77ec15e712",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811100,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operand1 | Operand2 | "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "\u003e\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | |\n—— | —— | —— | —— | —— | —— |\n0b0000000000001011 | 0 | 0b0000000000001011 | 0b0000000000001011 | 0b0000000000001011 | no change |\n0b0000000000001011 | 1 | 0b0000000000010110 | 0b0000000000000101 | 0b0000000000000101 | |\n0b0000000000001011 | 2 | 0b0000000000101100 | 0b0000000000000010 | 0b0000000000000010 | |\n0b0000000000001011 | 28 | 0b1011000000000000 | 0b0000000000000000 | 0b0000000000000000 | |\n0b0000000000001011 | 31 | 0b1000000000000000 | 0b0000000000000000 | 0b0000000000000000 | |\n0b0000000000001011 | 32 | 0b0000000000001011 | 0b0000000000001011 | 0b0000000000001011 | 32 mod 32 is 0 |\n… | … | … | … | … | |\n0b1000000000001011 | 0 | 0b1000000000001011 | 0b1000000000001011 | 0b1000000000001011 | no change |\n0b1000000000001011 | 1 | 0b0000000000010110 | 0b1100000000000101 | 0b0100000000000101 | note sign extension for ‘\u003e\u003e’.\n0b1000000000001011 | 2 | 0b0000000000101100 | 0b1110000000000010 | 0b00100000000000100 | note sign extension for ‘\u003e\u003e’.\n0b1000000000001011 | 31 | 0b1000000000000000 | 0b1111111111111111 | 0b0000000000000001 | note sign extension for ‘\u003e\u003e’. |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operand1 | Operand2 | "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "\u003e\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " | |\n—— | —— | —— | —— | —— | —— |\n0b0000000000001011 | 0 | 0b0000000000001011 | 0b0000000000001011 | 0b0000000000001011 | no change |\n0b0000000000001011 | 1 | 0b0000000000010110 | 0b0000000000000101 | 0b0000000000000101 | |\n0b0000000000001011 | 2 | 0b0000000000101100 | 0b0000000000000010 | 0b0000000000000010 | |\n0b0000000000001011 | 28 | 0b1011000000000000 | 0b0000000000000000 | 0b0000000000000000 | |\n0b0000000000001011 | 31 | 0b1000000000000000 | 0b0000000000000000 | 0b0000000000000000 | |\n0b0000000000001011 | 32 | 0b0000000000001011 | 0b0000000000001011 | 0b0000000000001011 | 32 mod 32 is 0 |\n… | … | … | … | … | |\n0b1000000000001011 | 0 | 0b1000000000001011 | 0b1000000000001011 | 0b1000000000001011 | no change |\n0b1000000000001011 | 1 | 0b0000000000010110 | 0b1100000000000101 | 0b0100000000000101 | note sign extension for ‘\u003e\u003e’.\n0b1000000000001011 | 2 | 0b0000000000101100 | 0b1110000000000010 | 0b00100000000000100 | note sign extension for ‘\u003e\u003e’.\n0b1000000000001011 | 31 | 0b1000000000000000 | 0b1111111111111111 | 0b0000000000000001 | note sign extension for ‘\u003e\u003e’. |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460811112,
        "id": "3b850cc1-07cf-42c3-8bdc-a7a1b97f07fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460811112,
        "parent_id": "7126919e-28f7-4f46-97e3-1f060b30f336",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There examples of the user of shift operators in http://stackoverflow.com/documentation/java/1177/bit-manipulation#t=201610101439344327372"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There examples of the user of shift operators in http://stackoverflow.com/documentation/java/1177/bit-manipulation#t=201610101439344327372"
          }
        ]
      }
    ],
    "title": "The Shift Operators and",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}