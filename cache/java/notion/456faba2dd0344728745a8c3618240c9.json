{
  "ID": "456faba2-dd03-4472-8745-a8c3618240c9",
  "Root": {
    "alive": true,
    "content": [
      "f8917fb4-71a8-46a9-ba94-a59e96e1029f",
      "ee6eb18e-aadc-486e-a615-6ced443a8785",
      "9e186ee0-87c1-4b16-8807-ed54adcd8119",
      "4c321814-6481-4b87-b982-85eb7b4c6f2d",
      "30e91247-24a3-47f7-bfc4-c42b057e7e05",
      "72d17a62-f335-42ae-8973-f43250d33a63"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460092609,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "456faba2-dd03-4472-8745-a8c3618240c9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551757286026,
    "parent_id": "aaf522ec-ec58-4c19-b129-bf870a37c471",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Static Inheritance"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460092608,
        "id": "f8917fb4-71a8-46a9-ba94-a59e96e1029f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460092608,
        "parent_id": "456faba2-dd03-4472-8745-a8c3618240c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static method can be inherited similar to normal methods, however unlike normal methods it is impossible to create “"
            ],
            [
              "abstract",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/87/inheritance/397/abstract-classes"
                ]
              ]
            ],
            [
              "” methods in order to force static method overriding. Writing a method with the same signature as a static method in a super class appears to be a form of overriding, but really this simply creates a new function hides the other."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static method can be inherited similar to normal methods, however unlike normal methods it is impossible to create “"
          },
          {
            "Text": "abstract",
            "Link": "http://stackoverflow.com/documentation/java/87/inheritance/397/abstract-classes"
          },
          {
            "Text": "” methods in order to force static method overriding. Writing a method with the same signature as a static method in a super class appears to be a form of overriding, but really this simply creates a new function hides the other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460092608,
        "id": "ee6eb18e-aadc-486e-a615-6ced443a8785",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460092608,
        "parent_id": "456faba2-dd03-4472-8745-a8c3618240c9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class BaseClass {\n    \n    public static int num = 5;\n\n    public static void sayHello() {\n        System.out.println(\"Hello\");\n    }\n\n    public static void main(String[] args) {\n        BaseClass.sayHello();\n        System.out.println(\"BaseClass's num: \" + BaseClass.num);\n            \n        SubClass.sayHello();\n        //This will be different than the above statement's output, since it runs\n        //A different method\n        SubClass.sayHello(true);\n        \n        StaticOverride.sayHello();\n        System.out.println(\"StaticOverride's num: \" + StaticOverride.num);\n    }\n}\n\npublic  class SubClass extends BaseClass {\n    \n    //Inherits the sayHello function, but does not override it   \n    public static void sayHello(boolean test) {\n        System.out.println(\"Hey\");\n    }\n}\n\npublic static class StaticOverride extends BaseClass {\n\n    //Hides the num field from BaseClass\n    //You can even change the type, since this doesn't affect the signature\n    public static String num = \"test\";\n        \n    //Cannot use @Override annotation, since this is static\n    //This overrides the sayHello method from BaseClass\n    public static void sayHello() {\n        System.out.println(\"Static says Hi\");\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class BaseClass {\n    \n    public static int num = 5;\n\n    public static void sayHello() {\n        System.out.println(\"Hello\");\n    }\n\n    public static void main(String[] args) {\n        BaseClass.sayHello();\n        System.out.println(\"BaseClass's num: \" + BaseClass.num);\n            \n        SubClass.sayHello();\n        //This will be different than the above statement's output, since it runs\n        //A different method\n        SubClass.sayHello(true);\n        \n        StaticOverride.sayHello();\n        System.out.println(\"StaticOverride's num: \" + StaticOverride.num);\n    }\n}\n\npublic  class SubClass extends BaseClass {\n    \n    //Inherits the sayHello function, but does not override it   \n    public static void sayHello(boolean test) {\n        System.out.println(\"Hey\");\n    }\n}\n\npublic static class StaticOverride extends BaseClass {\n\n    //Hides the num field from BaseClass\n    //You can even change the type, since this doesn't affect the signature\n    public static String num = \"test\";\n        \n    //Cannot use @Override annotation, since this is static\n    //This overrides the sayHello method from BaseClass\n    public static void sayHello() {\n        System.out.println(\"Static says Hi\");\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460092608,
        "id": "9e186ee0-87c1-4b16-8807-ed54adcd8119",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460092608,
        "parent_id": "456faba2-dd03-4472-8745-a8c3618240c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Running any of these classes produces the output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Running any of these classes produces the output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460092608,
        "id": "4c321814-6481-4b87-b982-85eb7b4c6f2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460092608,
        "parent_id": "456faba2-dd03-4472-8745-a8c3618240c9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Hello\nBaseClass's num: 5\nHello\nHey\nStatic says Hi\nStaticOverride's num: test"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Hello\nBaseClass's num: 5\nHello\nHey\nStatic says Hi\nStaticOverride's num: test",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460092609,
        "id": "30e91247-24a3-47f7-bfc4-c42b057e7e05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460092609,
        "parent_id": "456faba2-dd03-4472-8745-a8c3618240c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that unlike normal inheritance, in static inheritance methods are not hidden. You can always call the base "
            ],
            [
              "sayHello",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method by using "
            ],
            [
              "BaseClass.sayHello()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But classes do inherit static methods "
            ],
            [
              "if",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " no methods with the same signature are found in the subclass. If two method’s signatures vary, both methods can be run from the subclass, even if the name is the same."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that unlike normal inheritance, in static inheritance methods are not hidden. You can always call the base "
          },
          {
            "Text": "sayHello",
            "AttrFlags": 2
          },
          {
            "Text": " method by using "
          },
          {
            "Text": "BaseClass.sayHello()",
            "AttrFlags": 2
          },
          {
            "Text": ". But classes do inherit static methods "
          },
          {
            "Text": "if",
            "AttrFlags": 4
          },
          {
            "Text": " no methods with the same signature are found in the subclass. If two method’s signatures vary, both methods can be run from the subclass, even if the name is the same."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460092609,
        "id": "72d17a62-f335-42ae-8973-f43250d33a63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460092609,
        "parent_id": "456faba2-dd03-4472-8745-a8c3618240c9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Static fields hide each other in a similar way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Static fields hide each other in a similar way."
          }
        ]
      }
    ],
    "title": "Static Inheritance",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}