{
  "ID": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
  "Root": {
    "alive": true,
    "content": [
      "7ab4d4fd-637b-4a5e-9d57-6dfedeb3740b",
      "2304181f-2894-4320-9232-e061b50c4870",
      "9b500c7e-b528-442b-9468-014ce9368917",
      "11cd21c7-f5e7-45ab-bb1c-ed3929874f08",
      "09d621d1-0c15-4497-bb60-97d525c15255",
      "31a37d90-796f-44c6-ac0f-6b945647b269",
      "80dbf87d-3487-4619-b438-71ce99d2e808",
      "156a11f0-fa6b-4cf3-880a-43f64d4ee97a",
      "9e06c1d3-ade1-402f-ab22-2219b1e40173",
      "e0431432-c5b4-4bb4-a067-6739a773d0a1",
      "77b5f2fe-730d-4961-9946-95d21d28de8b",
      "8ef9d576-a01e-484a-8b03-6eb168fbe8c9",
      "809e528a-5507-49f6-9206-146b9831baf3",
      "32f84e34-8a79-4964-ba38-b1920cf0645c",
      "2703f402-2d12-4caf-9e0b-285a25cca754",
      "62c5a8b4-c2fd-4cea-8c54-69552a35ebd9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460542240,
    "id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460542240,
    "parent_id": "596cd51e-237c-46bd-a4df-28e4d338582d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "140 Negative value representation"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542238,
        "id": "7ab4d4fd-637b-4a5e-9d57-6dfedeb3740b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542238,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java and most other languages store negative integral numbers in a representation called "
            ],
            [
              "2’s complement",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " notation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java and most other languages store negative integral numbers in a representation called "
          },
          {
            "Text": "2’s complement",
            "AttrFlags": 4
          },
          {
            "Text": " notation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542238,
        "id": "2304181f-2894-4320-9232-e061b50c4870",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542238,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a unique binary representation of a data type using "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bits, values are encoded like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a unique binary representation of a data type using "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " bits, values are encoded like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542238,
        "id": "9b500c7e-b528-442b-9468-014ce9368917",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542238,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The least significant "
            ],
            [
              "n-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bits store a positive integral number "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in integral representation. Most significant value stores a bit vith value "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The value repesented by those bits is"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The least significant "
          },
          {
            "Text": "n-1",
            "AttrFlags": 2
          },
          {
            "Text": " bits store a positive integral number "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " in integral representation. Most significant value stores a bit vith value "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": ". The value repesented by those bits is"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542238,
        "id": "11cd21c7-f5e7-45ab-bb1c-ed3929874f08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542238,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "x - s * 2n-1"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "x - s * 2n-1"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542238,
        "id": "09d621d1-0c15-4497-bb60-97d525c15255",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542238,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "i.e. if the most significant bit is 1, then a value that is just by 1 larger than the number you could represent with the other bits (2n-2 + 2n-3 + … + 21 + 20 = 2n-1 - 1) is subtracted allowing a unique binary representation for each value from - 2n-1 (s = 1; x = 0) to 2n-1 - 1 (s = 0; x = 2n-1 - 1)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "i.e. if the most significant bit is 1, then a value that is just by 1 larger than the number you could represent with the other bits (2n-2 + 2n-3 + … + 21 + 20 = 2n-1 - 1) is subtracted allowing a unique binary representation for each value from - 2n-1 (s = 1; x = 0) to 2n-1 - 1 (s = 0; x = 2n-1 - 1)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "31a37d90-796f-44c6-ac0f-6b945647b269",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This also has the nice side effect, that you can add the binary representations as if they were positive binary numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This also has the nice side effect, that you can add the binary representations as if they were positive binary numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "80dbf87d-3487-4619-b438-71ce99d2e808",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "v1 = x1 - s1 * 2n-1\nv2 = x2 - s2 * 2n-1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "v1 = x1 - s1 * 2n-1\nv2 = x2 - s2 * 2n-1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "156a11f0-fa6b-4cf3-880a-43f64d4ee97a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "s1 | s2 | x1 + x2 overflow | addition result |\n—— | —— | — | — |\n0 | 0 | No | x1 + x2 = v1 + v2 |\n0 | 0 | Yes | too large to be represented with data type (overflow) |\n0 | 1 | No | x1 + x2 - 2n-1 = x1 + x2 - s2 * 2n-1 = v1 + v2 |\n0 | 1 | Yes | (x1 + x2) mod 2n-1 = x1 + x2 - 2n-1 = v1 + v2 |\n1 | 0 | * | see above (swap summands) |\n1 | 1 | No | too small to be represented with data type (x1 + x2 - 2n \u003c -2n-1 ; underflow) |\n1 | 1 | Yes | (x1 + x2) mod 2n-1 - 2n-1 = (x1 + x2 - 2n-1) - 2n-1 = (x1 - s1 * 2n-1) + (x2 - s2 * 2n-1) = v1 + v2 |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "s1 | s2 | x1 + x2 overflow | addition result |\n—— | —— | — | — |\n0 | 0 | No | x1 + x2 = v1 + v2 |\n0 | 0 | Yes | too large to be represented with data type (overflow) |\n0 | 1 | No | x1 + x2 - 2n-1 = x1 + x2 - s2 * 2n-1 = v1 + v2 |\n0 | 1 | Yes | (x1 + x2) mod 2n-1 = x1 + x2 - 2n-1 = v1 + v2 |\n1 | 0 | * | see above (swap summands) |\n1 | 1 | No | too small to be represented with data type (x1 + x2 - 2n \u003c -2n-1 ; underflow) |\n1 | 1 | Yes | (x1 + x2) mod 2n-1 - 2n-1 = (x1 + x2 - 2n-1) - 2n-1 = (x1 - s1 * 2n-1) + (x2 - s2 * 2n-1) = v1 + v2 |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "9e06c1d3-ade1-402f-ab22-2219b1e40173",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this fact makes finding binary representation of the additive inverse (i.e. the negative value) easy:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this fact makes finding binary representation of the additive inverse (i.e. the negative value) easy:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "e0431432-c5b4-4bb4-a067-6739a773d0a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Observe that adding the bitwise complement to the number results in all bits being 1. Now add 1 to make value overflow and you get the neutral element 0 (all bits 0)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Observe that adding the bitwise complement to the number results in all bits being 1. Now add 1 to make value overflow and you get the neutral element 0 (all bits 0)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "77b5f2fe-730d-4961-9946-95d21d28de8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So the negative value of a number "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be calculated using (ignoring possible promotion to "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " here)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So the negative value of a number "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " can be calculated using (ignoring possible promotion to "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " here)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542239,
        "id": "8ef9d576-a01e-484a-8b03-6eb168fbe8c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542239,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(~i) + 1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(~i) + 1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542240,
        "id": "809e528a-5507-49f6-9206-146b9831baf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542240,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542240,
        "id": "32f84e34-8a79-4964-ba38-b1920cf0645c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542240,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " taking the negative value of 0 ("
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:",
            "AttrFlags": 1
          },
          {
            "Text": " taking the negative value of 0 ("
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542240,
        "id": "2703f402-2d12-4caf-9e0b-285a25cca754",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542240,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of negating "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", is "
            ],
            [
              "11111111",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Adding 1 gives a value of "
            ],
            [
              "100000000",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (9 bits). Because a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can only store 8 bits, the leftmost value is truncated, and the result is "
            ],
            [
              "00000000",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of negating "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", is "
          },
          {
            "Text": "11111111",
            "AttrFlags": 2
          },
          {
            "Text": ". Adding 1 gives a value of "
          },
          {
            "Text": "100000000",
            "AttrFlags": 2
          },
          {
            "Text": " (9 bits). Because a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": " can only store 8 bits, the leftmost value is truncated, and the result is "
          },
          {
            "Text": "00000000",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460542240,
        "id": "62c5a8b4-c2fd-4cea-8c54-69552a35ebd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460542240,
        "parent_id": "82f1aaf9-1c63-42fd-8a85-b76b123024df",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Original | Process | Result |\n—— | —— | —— |\n0 (00000000) | Negate | -0 (11111111)\n11111111 | Add 1 to binary | 100000000\n100000000 | Truncate to 8 bits | 00000000 (-0 equals 0)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Original | Process | Result |\n—— | —— | —— |\n0 (00000000) | Negate | -0 (11111111)\n11111111 | Add 1 to binary | 100000000\n100000000 | Truncate to 8 bits | 00000000 (-0 equals 0)"
          }
        ]
      }
    ],
    "title": "140 Negative value representation"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}