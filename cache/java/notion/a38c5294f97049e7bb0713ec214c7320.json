{
  "ID": "a38c5294-f970-49e7-bb07-13ec214c7320",
  "Root": {
    "alive": true,
    "content": [
      "444e420a-3b0b-4f0e-97f1-c438e995db14",
      "5ed8f424-3906-4795-87b9-536fe8762b4d",
      "bd881bf7-8ee0-4798-85e5-4c7425f55d0d",
      "7e5e83f0-3f1c-486f-b6c1-40823d36a8b9",
      "0de1db4e-2ce1-416a-9a8e-18319a9b4266",
      "21ec0ab2-2f28-46b2-abcc-1320866f5869",
      "ab718317-622b-4c4e-a4a2-a8565820eb5a",
      "a2c7e691-f86f-47c6-a203-f80f683ed238",
      "58db643f-049a-42eb-a68c-3e6e008e2bcb",
      "3d0249c1-8301-4806-9bb4-96908c97995b",
      "24aa39e1-eebd-42ed-b09f-204105fa7f62",
      "e632f05e-c21e-4beb-9ab6-c79ba262f60d",
      "0180a024-85ca-4b91-96eb-d0e150c9a5ed",
      "49c543c8-da2f-465e-a38c-b92959d92cb8",
      "51c05cac-48f0-4706-9e04-f7cdd3c30491",
      "904e8614-1669-40c6-a87a-3951cefc05e6",
      "38d1cc8c-94ed-4988-af56-c2e618880211",
      "90ad6578-6b1f-4361-b617-8593278245f4",
      "035d0f14-2900-4d24-9ad7-a470dddc70be",
      "9d8b5762-2c6e-4ba6-b1fa-449aa6ba21cb",
      "2591d22d-6be0-4cc3-8cf0-de1b43af9305",
      "b267d41f-9cbc-4a37-81cd-3a1f7106b686"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550463193083,
    "id": "a38c5294-f970-49e7-bb07-13ec214c7320",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550463193083,
    "parent_id": "6e8be33a-59ae-4ce7-a49e-06a124b207b9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Sorting a List using ComparableT or a ComparatorT"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193079,
        "id": "444e420a-3b0b-4f0e-97f1-c438e995db14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193079,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Say we are working on a class representing a Person by their first and last names. We have created a basic class to do this and implemented proper "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "hashCode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Say we are working on a class representing a Person by their first and last names. We have created a basic class to do this and implemented proper "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "hashCode",
            "AttrFlags": 2
          },
          {
            "Text": " methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193080,
        "id": "5ed8f424-3906-4795-87b9-536fe8762b4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193080,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Person {\n\n    private final String lastName; //invariant - nonnull\n    private final String firstName; //invariant - nonnull\n\n    public Person(String firstName, String lastName){\n        this.firstName = firstName != null ? firstName : \"\";\n        this.lastName = lastName != null ? lastName : \"\";\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public String toString() {\n        return lastName + \", \" + firstName;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (! (o instanceof Person)) return false;\n        Person p = (Person)o;\n        return firstName.equals(p.firstName) \u0026\u0026 lastName.equals(p.lastName);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Person {\n\n    private final String lastName; //invariant - nonnull\n    private final String firstName; //invariant - nonnull\n\n    public Person(String firstName, String lastName){\n        this.firstName = firstName != null ? firstName : \"\";\n        this.lastName = lastName != null ? lastName : \"\";\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public String toString() {\n        return lastName + \", \" + firstName;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (! (o instanceof Person)) return false;\n        Person p = (Person)o;\n        return firstName.equals(p.firstName) \u0026\u0026 lastName.equals(p.lastName);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193080,
        "id": "bd881bf7-8ee0-4798-85e5-4c7425f55d0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193080,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we would like to sort a list of "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects by their name, such as in the following scenario:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we would like to sort a list of "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " objects by their name, such as in the following scenario:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193080,
        "id": "7e5e83f0-3f1c-486f-b6c1-40823d36a8b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193080,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //This currently won't work.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //This currently won't work.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193080,
        "id": "0de1db4e-2ce1-416a-9a8e-18319a9b4266",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193080,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, as marked, the above currently won’t compile. "
            ],
            [
              "Collections.sort(..)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only knows how to sort a list if the elements in that list are comparable, or a custom method of comparison is given."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately, as marked, the above currently won’t compile. "
          },
          {
            "Text": "Collections.sort(..)",
            "AttrFlags": 2
          },
          {
            "Text": " only knows how to sort a list if the elements in that list are comparable, or a custom method of comparison is given."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193080,
        "id": "21ec0ab2-2f28-46b2-abcc-1320866f5869",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193080,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you were asked to sort the following list : "
            ],
            [
              "1,3,5,4,2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you’d have no problem saying the answer is "
            ],
            [
              "1,2,3,4,5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This is because Integers (both in Java and mathematically) have a "
            ],
            [
              "natural ordering",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", a standard, default comparison base ordering. To give our Person class a natural ordering, we implement "
            ],
            [
              "Comparable\u003cPerson\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which requires implementing the method "
            ],
            [
              "compareTo(Person p):",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you were asked to sort the following list : "
          },
          {
            "Text": "1,3,5,4,2",
            "AttrFlags": 2
          },
          {
            "Text": ", you’d have no problem saying the answer is "
          },
          {
            "Text": "1,2,3,4,5",
            "AttrFlags": 2
          },
          {
            "Text": ". This is because Integers (both in Java and mathematically) have a "
          },
          {
            "Text": "natural ordering",
            "AttrFlags": 4
          },
          {
            "Text": ", a standard, default comparison base ordering. To give our Person class a natural ordering, we implement "
          },
          {
            "Text": "Comparable\u003cPerson\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", which requires implementing the method "
          },
          {
            "Text": "compareTo(Person p):",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "ab718317-622b-4c4e-a4a2-a8565820eb5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Person implements Comparable\u003cPerson\u003e {\n\n    private final String lastName; //invariant - nonnull\n    private final String firstName; //invariant - nonnull\n\n    public Person(String firstName, String lastName) {\n        this.firstName = firstName != null ? firstName : \"\";\n        this.lastName = lastName != null ? lastName : \"\";\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public String toString() {\n        return lastName + \", \" + firstName;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (! (o instanceof Person)) return false;\n        Person p = (Person)o;\n        return firstName.equals(p.firstName) \u0026\u0026 lastName.equals(p.lastName);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName);\n    }\n\n    @Override\n    public int compareTo(Person other) {\n        // If this' lastName and other's lastName are not comparably equivalent,\n        // Compare this to other by comparing their last names.\n        // Otherwise, compare this to other by comparing their first names\n        int lastNameCompare = lastName.compareTo(other.lastName);\n        if (lastNameCompare != 0) {\n            return lastNameCompare;\n        } else {\n            return firstName.compareTo(other.firstName);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Person implements Comparable\u003cPerson\u003e {\n\n    private final String lastName; //invariant - nonnull\n    private final String firstName; //invariant - nonnull\n\n    public Person(String firstName, String lastName) {\n        this.firstName = firstName != null ? firstName : \"\";\n        this.lastName = lastName != null ? lastName : \"\";\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public String toString() {\n        return lastName + \", \" + firstName;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (! (o instanceof Person)) return false;\n        Person p = (Person)o;\n        return firstName.equals(p.firstName) \u0026\u0026 lastName.equals(p.lastName);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName);\n    }\n\n    @Override\n    public int compareTo(Person other) {\n        // If this' lastName and other's lastName are not comparably equivalent,\n        // Compare this to other by comparing their last names.\n        // Otherwise, compare this to other by comparing their first names\n        int lastNameCompare = lastName.compareTo(other.lastName);\n        if (lastNameCompare != 0) {\n            return lastNameCompare;\n        } else {\n            return firstName.compareTo(other.firstName);\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "a2c7e691-f86f-47c6-a203-f80f683ed238",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, the main method given will function correctly"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, the main method given will function correctly"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "58db643f-049a-42eb-a68c-3e6e008e2bcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //Now functions correctly"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //Now functions correctly",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "3d0249c1-8301-4806-9bb4-96908c97995b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//people is now sorted by last name, then first name:\n// --\u003e Jill Doe, John Doe, Bob Dole, Alice McDonald, Ronald McDonald\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//people is now sorted by last name, then first name:\n// --\u003e Jill Doe, John Doe, Bob Dole, Alice McDonald, Ronald McDonald\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "24aa39e1-eebd-42ed-b09f-204105fa7f62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If, however, you either do not want or are unable to modify class "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can provide a custom "
            ],
            [
              "Comparator\u003cT\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that handles the comparison of any two "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects. If you were asked to sort the following list: "
            ],
            [
              "circle, square, rectangle, triangle, hexagon",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you could not, but if you were asked to sort that list "
            ],
            [
              "based on the number of corners",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", you could. Just so, providing a comparator instructs Java how to compare two normally not comparable objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If, however, you either do not want or are unable to modify class "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": ", you can provide a custom "
          },
          {
            "Text": "Comparator\u003cT\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " that handles the comparison of any two "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " objects. If you were asked to sort the following list: "
          },
          {
            "Text": "circle, square, rectangle, triangle, hexagon",
            "AttrFlags": 2
          },
          {
            "Text": " you could not, but if you were asked to sort that list "
          },
          {
            "Text": "based on the number of corners",
            "AttrFlags": 4
          },
          {
            "Text": ", you could. Just so, providing a comparator instructs Java how to compare two normally not comparable objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "e632f05e-c21e-4beb-9ab6-c79ba262f60d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class PersonComparator implements Comparator\u003cPerson\u003e {\n\n    public int compare(Person p1, Person p2) {\n        // If p1's lastName and p2's lastName are not comparably equivalent,\n        // Compare p1 to p2 by comparing their last names.\n        // Otherwise, compare p1 to p2 by comparing their first names\n        if (p1.getLastName().compareTo(p2.getLastName()) != 0) {\n            return p1.getLastName().compareTo(p2.getLastName());\n        } else {\n            return p1.getFirstName().compareTo(p2.getFirstName());\n        }\n    }\n}\n\n//Assume the first version of Person (that does not implement Comparable) is used here\npublic static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //Illegal, Person doesn't implement Comparable.\n    Collections.sort(people, new PersonComparator()); //Legal\n\n    //people is now sorted by last name, then first name:\n    // --\u003e Jill Doe, John Doe, Bob Dole, Alice McDonald, Ronald McDonald\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class PersonComparator implements Comparator\u003cPerson\u003e {\n\n    public int compare(Person p1, Person p2) {\n        // If p1's lastName and p2's lastName are not comparably equivalent,\n        // Compare p1 to p2 by comparing their last names.\n        // Otherwise, compare p1 to p2 by comparing their first names\n        if (p1.getLastName().compareTo(p2.getLastName()) != 0) {\n            return p1.getLastName().compareTo(p2.getLastName());\n        } else {\n            return p1.getFirstName().compareTo(p2.getFirstName());\n        }\n    }\n}\n\n//Assume the first version of Person (that does not implement Comparable) is used here\npublic static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //Illegal, Person doesn't implement Comparable.\n    Collections.sort(people, new PersonComparator()); //Legal\n\n    //people is now sorted by last name, then first name:\n    // --\u003e Jill Doe, John Doe, Bob Dole, Alice McDonald, Ronald McDonald\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193081,
        "id": "0180a024-85ca-4b91-96eb-d0e150c9a5ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193081,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparators can also be created/used as an anonymous inner class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparators can also be created/used as an anonymous inner class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "49c543c8-da2f-465e-a38c-b92959d92cb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Assume the first version of Person (that does not implement Comparable) is used here\npublic static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //Illegal, Person doesn't implement Comparable.\n\n    Collections.sort(people, new PersonComparator()); //Legal\n\n    //people is now sorted by last name, then first name:\n    // --\u003e Jill Doe, John Doe, Bob Dole, Alice McDonald, Ronald McDonald\n\n    //Anonymous Class\n    Collections.sort(people, new Comparator\u003cPerson\u003e() { //Legal\n        public int compare(Person p1, Person p2) {\n            //Method code...\n        }\n    });\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Assume the first version of Person (that does not implement Comparable) is used here\npublic static void main(String[] args) {\n    List\u003cPerson\u003e people = Arrays.asList(new Person(\"John\", \"Doe\"),\n                                     new Person(\"Bob\", \"Dole\"),\n                                     new Person(\"Ronald\", \"McDonald\"),\n                                     new Person(\"Alice\", \"McDonald\"),\n                                     new Person(\"Jill\", \"Doe\"));\n    Collections.sort(people); //Illegal, Person doesn't implement Comparable.\n\n    Collections.sort(people, new PersonComparator()); //Legal\n\n    //people is now sorted by last name, then first name:\n    // --\u003e Jill Doe, John Doe, Bob Dole, Alice McDonald, Ronald McDonald\n\n    //Anonymous Class\n    Collections.sort(people, new Comparator\u003cPerson\u003e() { //Legal\n        public int compare(Person p1, Person p2) {\n            //Method code...\n        }\n    });\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "51c05cac-48f0-4706-9e04-f7cdd3c30491",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lambda expression based comparators"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lambda expression based comparators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "904e8614-1669-40c6-a87a-3951cefc05e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of Java 8, comparators can also be expressed as lambda expressions"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of Java 8, comparators can also be expressed as lambda expressions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "38d1cc8c-94ed-4988-af56-c2e618880211",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Lambda\nCollections.sort(people, (p1, p2) -\u003e { //Legal\n    //Method code....\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Lambda\nCollections.sort(people, (p1, p2) -\u003e { //Legal\n    //Method code....\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "90ad6578-6b1f-4361-b617-8593278245f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparator default methods"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparator default methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "035d0f14-2900-4d24-9ad7-a470dddc70be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Furthermore, there are interesting default methods on the Comparator interface for building comparators : the following builds a comparator comparing by "
            ],
            [
              "lastName",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and then "
            ],
            [
              "firstName",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Furthermore, there are interesting default methods on the Comparator interface for building comparators : the following builds a comparator comparing by "
          },
          {
            "Text": "lastName",
            "AttrFlags": 2
          },
          {
            "Text": " and then "
          },
          {
            "Text": "firstName",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "9d8b5762-2c6e-4ba6-b1fa-449aa6ba21cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Collections.sort(people, Comparator.comparing(Person::getLastName)\n                                .thenComparing(Person::getFirstName));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Collections.sort(people, Comparator.comparing(Person::getLastName)\n                                .thenComparing(Person::getFirstName));",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193082,
        "id": "2591d22d-6be0-4cc3-8cf0-de1b43af9305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193082,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inversing the order of a comparator"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inversing the order of a comparator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550463193083,
        "id": "b267d41f-9cbc-4a37-81cd-3a1f7106b686",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550463193083,
        "parent_id": "a38c5294-f970-49e7-bb07-13ec214c7320",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any comparator can also easily be reversed using the "
            ],
            [
              "reversedMethod",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which will change ascending order to descending."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any comparator can also easily be reversed using the "
          },
          {
            "Text": "reversedMethod",
            "AttrFlags": 2
          },
          {
            "Text": " which will change ascending order to descending."
          }
        ]
      }
    ],
    "title": "010 Sorting a List using ComparableT or a ComparatorT"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}