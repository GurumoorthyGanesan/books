{
  "ID": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
  "Root": {
    "alive": true,
    "content": [
      "d27a3f64-03c9-43c2-9273-bc4adeff6c35",
      "da886780-a861-4f18-a026-4623f03c31c0",
      "c286a83c-0bb5-4023-a65c-57bb79de1e5d",
      "f97948c5-8903-4bc5-8323-d42328b92ff3",
      "e79ef5ec-59c0-4011-8bb2-036c1c748a56",
      "799cb3b3-3efa-41ec-aeeb-752ec4d0cd66",
      "366c8011-8158-46f6-9871-913ccd0fbd7a",
      "1b355581-51b8-4f78-a0e8-0f0ba4740094",
      "2db2043c-bf15-45ec-8a85-696443865f1c",
      "bb7148f6-4dd3-4b7f-9eeb-3bafed34ada1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550517991115,
    "id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550517991115,
    "parent_id": "65b3b4cb-dbb9-4dfb-9c83-9429dfa4e76a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Pitfall using to compare primitive wrappers objects such as Integer"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991104,
        "id": "d27a3f64-03c9-43c2-9273-bc4adeff6c35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991104,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(This pitfall applies equally to all primitive wrapper types, but we will illustrate it for "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(This pitfall applies equally to all primitive wrapper types, but we will illustrate it for "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ".)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991112,
        "id": "da886780-a861-4f18-a026-4623f03c31c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991112,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When working with "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects, it is tempting to use "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to compare values, because that is what you would do with "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values. And in some cases this will seem to work:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When working with "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " objects, it is tempting to use "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " to compare values, because that is what you would do with "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " values. And in some cases this will seem to work:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991112,
        "id": "c286a83c-0bb5-4023-a65c-57bb79de1e5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991112,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Integer int1_1 = Integer.valueOf(\"1\");\nInteger int1_2 = Integer.valueOf(1);\n\nSystem.out.println(\"int1_1 == int1_2: \" + (int1_1 == int1_2));          // true\nSystem.out.println(\"int1_1 equals int1_2: \" + int1_1.equals(int1_2));   // true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Integer int1_1 = Integer.valueOf(\"1\");\nInteger int1_2 = Integer.valueOf(1);\n\nSystem.out.println(\"int1_1 == int1_2: \" + (int1_1 == int1_2));          // true\nSystem.out.println(\"int1_1 equals int1_2: \" + int1_1.equals(int1_2));   // true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991113,
        "id": "f97948c5-8903-4bc5-8323-d42328b92ff3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991113,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we created two "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects with the value "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and compare them (In this case we created one from a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and one from an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " literal. There are other alternatives). Also, we observe that the two comparison methods ("
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") both yield "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we created two "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " objects with the value "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and compare them (In this case we created one from a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " and one from an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " literal. There are other alternatives). Also, we observe that the two comparison methods ("
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": ") both yield "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991113,
        "id": "e79ef5ec-59c0-4011-8bb2-036c1c748a56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991113,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This behavior changes when we choose different values:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This behavior changes when we choose different values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991113,
        "id": "799cb3b3-3efa-41ec-aeeb-752ec4d0cd66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991113,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Integer int2_1 = Integer.valueOf(\"1000\");\nInteger int2_2 = Integer.valueOf(1000);\n\nSystem.out.println(\"int2_1 == int2_2: \" + (int2_1 == int2_2));          // false\nSystem.out.println(\"int2_1 equals int2_2: \" + int2_1.equals(int2_2));   // true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Integer int2_1 = Integer.valueOf(\"1000\");\nInteger int2_2 = Integer.valueOf(1000);\n\nSystem.out.println(\"int2_1 == int2_2: \" + (int2_1 == int2_2));          // false\nSystem.out.println(\"int2_1 equals int2_2: \" + int2_1.equals(int2_2));   // true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991113,
        "id": "366c8011-8158-46f6-9871-913ccd0fbd7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991113,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, only the "
            ],
            [
              "equals",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " comparison yields the correct result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, only the "
          },
          {
            "Text": "equals",
            "AttrFlags": 2
          },
          {
            "Text": " comparison yields the correct result."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991114,
        "id": "1b355581-51b8-4f78-a0e8-0f0ba4740094",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991114,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The reason for this difference in behavior is, that the JVM maintains a cache of "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects for the range -128 to 127. (The upper value can be overridden with the system property “java.lang.Integer.IntegerCache.high” or the JVM argument “-XX:AutoBoxCacheMax=size”). For values in this range, the "
            ],
            [
              "Integer.valueOf()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return the cached value rather than creating a new one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The reason for this difference in behavior is, that the JVM maintains a cache of "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " objects for the range -128 to 127. (The upper value can be overridden with the system property “java.lang.Integer.IntegerCache.high” or the JVM argument “-XX:AutoBoxCacheMax=size”). For values in this range, the "
          },
          {
            "Text": "Integer.valueOf()",
            "AttrFlags": 2
          },
          {
            "Text": " will return the cached value rather than creating a new one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991114,
        "id": "2db2043c-bf15-45ec-8a85-696443865f1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991114,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Thus, in the first example the "
            ],
            [
              "Integer.valueOf(1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Integer.valueOf(\"1\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calls returned the same cached "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance. By contrast, in the second example the "
            ],
            [
              "Integer.valueOf(1000)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Integer.valueOf(\"1000\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " both created and returned new "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Thus, in the first example the "
          },
          {
            "Text": "Integer.valueOf(1)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Integer.valueOf(\"1\")",
            "AttrFlags": 2
          },
          {
            "Text": " calls returned the same cached "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " instance. By contrast, in the second example the "
          },
          {
            "Text": "Integer.valueOf(1000)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Integer.valueOf(\"1000\")",
            "AttrFlags": 2
          },
          {
            "Text": " both created and returned new "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550517991115,
        "id": "bb7148f6-4dd3-4b7f-9eeb-3bafed34ada1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550517991115,
        "parent_id": "b69f3c44-bedc-43b7-a64a-0a2f4b226ab9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator for reference types tests for reference equality (i.e. the same object). Therefore, in the first example "
            ],
            [
              "int1_1 == int1_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " because the references are the same. In the second example "
            ],
            [
              "int2_1 == int2_2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is false because the references are different."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " operator for reference types tests for reference equality (i.e. the same object). Therefore, in the first example "
          },
          {
            "Text": "int1_1 == int1_2",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " because the references are the same. In the second example "
          },
          {
            "Text": "int2_1 == int2_2",
            "AttrFlags": 2
          },
          {
            "Text": " is false because the references are different."
          }
        ]
      }
    ],
    "title": "010 Pitfall using to compare primitive wrappers objects such as Integer"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}