{
  "ID": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
  "Root": {
    "alive": true,
    "content": [
      "6f85a291-58eb-40e0-951c-4f9f9375f775",
      "d5ece482-209d-4a33-a54c-c4204a6bea8a",
      "5f43e938-ead3-49b3-8b62-71f2e98c4006",
      "47149ec7-2f8c-43bc-abae-f0b9aee6099d",
      "4985c17f-6c51-4def-b555-56bd1f33e65d",
      "45fe22d8-4202-41f2-b627-0a7f84f89a19",
      "5f065be1-f475-47c1-a117-4dec9d97f863",
      "218b6eb1-10aa-4603-9155-a42f69502f77",
      "bba4e347-ce1b-49a1-9668-6ce2dca5e2ae",
      "116bc19c-e73c-4937-9fd8-7274d3c54d5c",
      "51d830cf-adcc-49af-b2b4-2f9948902de6",
      "0310d9a5-075f-47e2-a17a-c36146e50347",
      "473f74d1-b85c-449d-a94d-de712fa7b1e5",
      "fc011dc6-fd29-4d63-b605-5163f69b7f25",
      "239333e8-81f9-46ab-8d66-5fbd7c7f1328",
      "2a219f03-9b84-49a6-b698-78f480cb1394",
      "9655a2ec-af02-4794-b319-ffe6e77a52eb",
      "bdcae890-dd0d-4351-96f8-16c0dec2d651",
      "f8eee5fc-93e9-4301-a549-9e7a711aa2f2",
      "da7c592b-6821-476c-9638-e4ef0f376f07",
      "550defb9-93ad-4b93-b4c6-f9b47c29a72e",
      "74d8d561-234a-4b4a-bd3c-1857559a59a1",
      "378f5b03-5de1-4ad7-a0ff-62f1fecaa46e",
      "d7e62532-c61b-4ac8-aa81-f7ceb21b88f0",
      "6036cfa1-ba54-4950-af35-698396560594",
      "59dd0629-ae7f-42f7-9d7d-14eca20df65a",
      "ca8a63b1-d3b5-437e-a5f2-1be0be2e2279",
      "fa90c669-bbd0-45be-9d30-f707a67b884a",
      "f162b39a-1ecf-4247-ba78-c4798275b16e",
      "05c5bd43-d723-4060-9bfd-f023974d64e8",
      "41755b89-35e9-4e6c-baf0-946540b499d7",
      "c6bec5cc-9fb3-4f93-8606-95e956c1a9d5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460812291,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551741014169,
    "parent_id": "6c6c87a4-551e-4cdd-b523-66ee2c5d11cb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Equality Operators"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812280,
        "id": "6f85a291-58eb-40e0-951c-4f9f9375f775",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812280,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators are binary operators that evaluate to "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depending on whether the operands are equal. The "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator gives "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the operands are equal and "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " otherwise. The "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator gives "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the operands are equal and "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators are binary operators that evaluate to "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " depending on whether the operands are equal. The "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " operator gives "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " if the operands are equal and "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " otherwise. The "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operator gives "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " if the operands are equal and "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812283,
        "id": "d5ece482-209d-4a33-a54c-c4204a6bea8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812283,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These operators can be used operands with primitive and reference types, but the behavior is significantly different. According to the JLS, there are actually three distinct sets of these operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These operators can be used operands with primitive and reference types, but the behavior is significantly different. According to the JLS, there are actually three distinct sets of these operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812283,
        "id": "5f43e938-ead3-49b3-8b62-71f2e98c4006",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812283,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Boolean "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Boolean "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812283,
        "id": "47149ec7-2f8c-43bc-abae-f0b9aee6099d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812283,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Numeric "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Numeric "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812284,
        "id": "4985c17f-6c51-4def-b555-56bd1f33e65d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812284,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Reference "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Reference "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812284,
        "id": "45fe22d8-4202-41f2-b627-0a7f84f89a19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812284,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, in all cases, the result type of the "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators is "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, in all cases, the result type of the "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators is "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812284,
        "id": "5f065be1-f475-47c1-a117-4dec9d97f863",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812284,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Numeric "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Numeric "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812284,
        "id": "218b6eb1-10aa-4603-9155-a42f69502f77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812284,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When one (or both) of the operands of an "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is a primitive numeric type ("
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int,",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), the operator is a numeric comparison. The second operand must be either a primitive numeric type, or a boxed numeric type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When one (or both) of the operands of an "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operator is a primitive numeric type ("
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int,",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": "), the operator is a numeric comparison. The second operand must be either a primitive numeric type, or a boxed numeric type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812285,
        "id": "bba4e347-ce1b-49a1-9668-6ce2dca5e2ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812285,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The behavior other numeric operators is as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The behavior other numeric operators is as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812285,
        "id": "116bc19c-e73c-4937-9fd8-7274d3c54d5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812285,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one of the operands is a boxed type, it is unboxed."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one of the operands is a boxed type, it is unboxed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812285,
        "id": "51d830cf-adcc-49af-b2b4-2f9948902de6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812285,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If either of the operands now a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is promoted to an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If either of the operands now a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", it is promoted to an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812285,
        "id": "0310d9a5-075f-47e2-a17a-c36146e50347",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812285,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the types of the operands are not the same, then the operand with the “smaller” type is promoted to the “larger” type."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the types of the operands are not the same, then the operand with the “smaller” type is promoted to the “larger” type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812286,
        "id": "473f74d1-b85c-449d-a94d-de712fa7b1e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812286,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The comparison is then carried out as follows:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The comparison is then carried out as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812286,
        "id": "fc011dc6-fd29-4d63-b605-5163f69b7f25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812286,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- If the promoted operands are `int` or `long` then the values are tested to see if they are identical.\n- If the promoted operands are `float` or `double` then:\n  - the two versions of zero (`+0.0` and `-0.0`) are treated as equal\n  - a `NaN` value is treated as not equals to anything, and\n  - other values are equal if their IEEE 754 representations are identical."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- If the promoted operands are `int` or `long` then the values are tested to see if they are identical.\n- If the promoted operands are `float` or `double` then:\n  - the two versions of zero (`+0.0` and `-0.0`) are treated as equal\n  - a `NaN` value is treated as not equals to anything, and\n  - other values are equal if their IEEE 754 representations are identical.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812286,
        "id": "239333e8-81f9-46ab-8d66-5fbd7c7f1328",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812286,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: you need to be careful when using "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to compare floating point values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: you need to be careful when using "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " to compare floating point values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812286,
        "id": "2a219f03-9b84-49a6-b698-78f480cb1394",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812286,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Boolean "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Boolean "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812286,
        "id": "9655a2ec-af02-4794-b319-ffe6e77a52eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812286,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If both operands are "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or one is "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the other is "
            ],
            [
              "Boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", these operators the Boolean "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators. The behavior is as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If both operands are "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": ", or one is "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": " and the other is "
          },
          {
            "Text": "Boolean",
            "AttrFlags": 2
          },
          {
            "Text": ", these operators the Boolean "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators. The behavior is as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812287,
        "id": "bdcae890-dd0d-4351-96f8-16c0dec2d651",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812287,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one of the operands is a "
            ],
            [
              "Boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is unboxed."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one of the operands is a "
          },
          {
            "Text": "Boolean",
            "AttrFlags": 2
          },
          {
            "Text": ", it is unboxed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812287,
        "id": "f8eee5fc-93e9-4301-a549-9e7a711aa2f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812287,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The unboxed operands are tested and the boolean result is calculated according to the following truth table"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The unboxed operands are tested and the boolean result is calculated according to the following truth table"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812287,
        "id": "da7c592b-6821-476c-9638-e4ef0f376f07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812287,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A | B | A == B | A != B |\n—— | —— | —— | —— |\nfalse | false | true | false |\nfalse | true | false | true |\ntrue | false | false | true |\ntrue | true | true | false |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A | B | A == B | A != B |\n—— | —— | —— | —— |\nfalse | false | true | false |\nfalse | true | false | true |\ntrue | false | false | true |\ntrue | true | true | false |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812287,
        "id": "550defb9-93ad-4b93-b4c6-f9b47c29a72e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812287,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two “pitfalls” that make it advisable to use "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " sparingly with truth values:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two “pitfalls” that make it advisable to use "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " sparingly with truth values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812287,
        "id": "74d8d561-234a-4b4a-bd3c-1857559a59a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812287,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you use "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to compare two "
            ],
            [
              "Boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects, then the Reference operators are used. This may give an unexpected result; see http://stackoverflow.com/documentation/java/4388/java-pitfalls/8996/pitfall-using-to-compare-primitive-wrappers-objects-such-as-integer#t=201612061208590356301"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you use "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " to compare two "
          },
          {
            "Text": "Boolean",
            "AttrFlags": 2
          },
          {
            "Text": " objects, then the Reference operators are used. This may give an unexpected result; see http://stackoverflow.com/documentation/java/4388/java-pitfalls/8996/pitfall-using-to-compare-primitive-wrappers-objects-such-as-integer#t=201612061208590356301"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812288,
        "id": "378f5b03-5de1-4ad7-a0ff-62f1fecaa46e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812288,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator can easily be mistyped as "
            ],
            [
              "=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For most operand types, this mistake leads to a compilation error. However, for "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operands the mistake leads to incorrect runtime behavior; see http://stackoverflow.com/documentation/java/5382/java-pitfalls-language-syntax/20112/pitfall-using-to-test-a-boolean#t=201612061213124111596"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " operator can easily be mistyped as "
          },
          {
            "Text": "=",
            "AttrFlags": 2
          },
          {
            "Text": ". For most operand types, this mistake leads to a compilation error. However, for "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Boolean",
            "AttrFlags": 2
          },
          {
            "Text": " operands the mistake leads to incorrect runtime behavior; see http://stackoverflow.com/documentation/java/5382/java-pitfalls-language-syntax/20112/pitfall-using-to-test-a-boolean#t=201612061213124111596"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812288,
        "id": "d7e62532-c61b-4ac8-aa81-f7ceb21b88f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812288,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Reference "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Reference "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812288,
        "id": "6036cfa1-ba54-4950-af35-698396560594",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812288,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If both operands are object references, the "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operators test if the two operands "
            ],
            [
              "refer to the same object",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". This often not what you want. To test if two objects are equal "
            ],
            [
              "by value",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", the "
            ],
            [
              ".equals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method should be used instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If both operands are object references, the "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " operators test if the two operands "
          },
          {
            "Text": "refer to the same object",
            "AttrFlags": 1
          },
          {
            "Text": ". This often not what you want. To test if two objects are equal "
          },
          {
            "Text": "by value",
            "AttrFlags": 4
          },
          {
            "Text": ", the "
          },
          {
            "Text": ".equals()",
            "AttrFlags": 2
          },
          {
            "Text": " method should be used instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812288,
        "id": "59dd0629-ae7f-42f7-9d7d-14eca20df65a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812288,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "String s1 = \"We are equal\";\nString s2 = new String(\"We are equal\");\n\ns1.equals(s2); // true\n\n// WARNING - don't use == or != with String values\ns1 == s2;      // false"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "String s1 = \"We are equal\";\nString s2 = new String(\"We are equal\");\n\ns1.equals(s2); // true\n\n// WARNING - don't use == or != with String values\ns1 == s2;      // false",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812289,
        "id": "ca8a63b1-d3b5-437e-a5f2-1be0be2e2279",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812289,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Warning: using "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to compare "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values is "
            ],
            [
              "incorrect",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " in most cases; see http://stackoverflow.com/documentation/java/4388/java-pitfalls/16290/using-to-compare-strings . A similar problem applies to primitive wrapper types; see http://stackoverflow.com/documentation/java/4388/java-pitfalls/8996/using-to-compare-primitive-wrappers-objects-such-as-integer ."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Warning: using "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " to compare "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " values is "
          },
          {
            "Text": "incorrect",
            "AttrFlags": 1
          },
          {
            "Text": " in most cases; see http://stackoverflow.com/documentation/java/4388/java-pitfalls/16290/using-to-compare-strings . A similar problem applies to primitive wrapper types; see http://stackoverflow.com/documentation/java/4388/java-pitfalls/8996/using-to-compare-primitive-wrappers-objects-such-as-integer ."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812289,
        "id": "fa90c669-bbd0-45be-9d30-f707a67b884a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812289,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "About the NaN edge-cases"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "About the NaN edge-cases"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812291,
        "id": "f162b39a-1ecf-4247-ba78-c4798275b16e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812291,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "JLS 15.21.1",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1"
                ]
              ]
            ],
            [
              " states the following:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "JLS 15.21.1",
            "Link": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1"
          },
          {
            "Text": " states the following:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812291,
        "id": "05c5bd43-d723-4060-9bfd-f023974d64e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812291,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If either operand is NaN, then the result of == is false but the result of != is true. Indeed, the test x != x is true if and only if the value of x is NaN."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "If either operand is NaN, then the result of == is false but the result of != is true. Indeed, the test x != x is true if and only if the value of x is NaN."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812291,
        "id": "41755b89-35e9-4e6c-baf0-946540b499d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812291,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This behavior is (to most programmers) unexpected. If you test if a "
            ],
            [
              "NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value is equal to itself, the answer is “No it isn’t!”. In other words, "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not "
            ],
            [
              "reflexive",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This behavior is (to most programmers) unexpected. If you test if a "
          },
          {
            "Text": "NaN",
            "AttrFlags": 2
          },
          {
            "Text": " value is equal to itself, the answer is “No it isn’t!”. In other words, "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " is not "
          },
          {
            "Text": "reflexive",
            "AttrFlags": 4
          },
          {
            "Text": " for "
          },
          {
            "Text": "NaN",
            "AttrFlags": 2
          },
          {
            "Text": " values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460812291,
        "id": "c6bec5cc-9fb3-4f93-8606-95e956c1a9d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460812291,
        "parent_id": "4c7d0857-26f5-4b4a-bbc6-35f65055b0fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, this is not a Java “oddity”, this behavior is specified in the IEEE 754 floating-point standards, and you will find that it is implemented by most modern programming languages. (For more information, see http://stackoverflow.com/a/1573715/139985 … noting that this is written by someone who was “in the room when the decisions were made”!)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, this is not a Java “oddity”, this behavior is specified in the IEEE 754 floating-point standards, and you will find that it is implemented by most modern programming languages. (For more information, see http://stackoverflow.com/a/1573715/139985 … noting that this is written by someone who was “in the room when the decisions were made”!)"
          }
        ]
      }
    ],
    "title": "The Equality Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}