{
  "ID": "d34870b8-a5a3-4d1f-b5fa-37d070c55c7d",
  "Root": {
    "alive": true,
    "content": [
      "8036a1b6-6fb3-43fd-9a50-fba857482e26",
      "c9517b59-4961-4359-b939-50982a457119",
      "02279060-59f5-455e-b2aa-fcea54c4a2b2",
      "338c2eb7-c395-4d32-bc0b-e3e9664d9e47"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460854303,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d34870b8-a5a3-4d1f-b5fa-37d070c55c7d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551753714096,
    "parent_id": "efc357da-0d0e-4f18-820d-fb1e40a75c9e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dynamic Proxies"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460854300,
        "id": "8036a1b6-6fb3-43fd-9a50-fba857482e26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460854300,
        "parent_id": "d34870b8-a5a3-4d1f-b5fa-37d070c55c7d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dynamic Proxies do not really have much to do with Reflection but they are part of the API. It’s basically a way to create a dynamic implementation of an interface. This could be helpful when creating mockup services. A Dynamic Proxy is an instance of an interface that is created with a so-called invocation handler that intercepts all method calls and allows the handling of their invocation manually."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dynamic Proxies do not really have much to do with Reflection but they are part of the API. It’s basically a way to create a dynamic implementation of an interface. This could be helpful when creating mockup services. A Dynamic Proxy is an instance of an interface that is created with a so-called invocation handler that intercepts all method calls and allows the handling of their invocation manually."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460854303,
        "id": "c9517b59-4961-4359-b939-50982a457119",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460854303,
        "parent_id": "d34870b8-a5a3-4d1f-b5fa-37d070c55c7d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class DynamicProxyTest {\n\n    public interface MyInterface1{\n        public void someMethod1();\n        public int someMethod2(String s);\n    }\n\n    public interface MyInterface2{\n        public void anotherMethod();\n    }\n   \n    public static void main(String args[]) throws Exception {\n        // the dynamic proxy class \n        Class\u003c?\u003e proxyClass = Proxy.getProxyClass(\n                ClassLoader.getSystemClassLoader(),\n                new Class[] {MyInterface1.class, MyInterface2.class});\n        // the dynamic proxy class constructor\n        Constructor\u003c?\u003e proxyConstructor = \n            proxyClass.getConstructor(InvocationHandler.class);\n\n        // the invocation handler\n        InvocationHandler handler = new InvocationHandler(){\n            // this method is invoked for every proxy method call\n            // method is the invoked method, args holds the method parameters\n            // it must return the method result\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { \n                String methodName = method.getName();\n\n                if(methodName.equals(\"someMethod1\")){\n                    System.out.println(\"someMethod1 was invoked!\");\n                    return null;\n                }\n                if(methodName.equals(\"someMethod2\")){\n                    System.out.println(\"someMethod2 was invoked!\");\n                    System.out.println(\"Parameter: \" + args[0]);\n                    return 42;\n                }\n                if(methodName.equals(\"anotherMethod\")){\n                    System.out.println(\"anotherMethod was invoked!\");\n                    return null;\n                }\n                System.out.println(\"Unkown method!\");\n                return null;\n            }\n        };\n\n        // create the dynamic proxy instances\n        MyInterface1 i1 = (MyInterface1) proxyConstructor.newInstance(handler);\n        MyInterface2 i2 = (MyInterface2) proxyConstructor.newInstance(handler);\n\n        // and invoke some methods\n        i1.someMethod1();\n        i1.someMethod2(\"stackoverflow\");\n        i2.anotherMethod();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class DynamicProxyTest {\n\n    public interface MyInterface1{\n        public void someMethod1();\n        public int someMethod2(String s);\n    }\n\n    public interface MyInterface2{\n        public void anotherMethod();\n    }\n   \n    public static void main(String args[]) throws Exception {\n        // the dynamic proxy class \n        Class\u003c?\u003e proxyClass = Proxy.getProxyClass(\n                ClassLoader.getSystemClassLoader(),\n                new Class[] {MyInterface1.class, MyInterface2.class});\n        // the dynamic proxy class constructor\n        Constructor\u003c?\u003e proxyConstructor = \n            proxyClass.getConstructor(InvocationHandler.class);\n\n        // the invocation handler\n        InvocationHandler handler = new InvocationHandler(){\n            // this method is invoked for every proxy method call\n            // method is the invoked method, args holds the method parameters\n            // it must return the method result\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { \n                String methodName = method.getName();\n\n                if(methodName.equals(\"someMethod1\")){\n                    System.out.println(\"someMethod1 was invoked!\");\n                    return null;\n                }\n                if(methodName.equals(\"someMethod2\")){\n                    System.out.println(\"someMethod2 was invoked!\");\n                    System.out.println(\"Parameter: \" + args[0]);\n                    return 42;\n                }\n                if(methodName.equals(\"anotherMethod\")){\n                    System.out.println(\"anotherMethod was invoked!\");\n                    return null;\n                }\n                System.out.println(\"Unkown method!\");\n                return null;\n            }\n        };\n\n        // create the dynamic proxy instances\n        MyInterface1 i1 = (MyInterface1) proxyConstructor.newInstance(handler);\n        MyInterface2 i2 = (MyInterface2) proxyConstructor.newInstance(handler);\n\n        // and invoke some methods\n        i1.someMethod1();\n        i1.someMethod2(\"stackoverflow\");\n        i2.anotherMethod();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460854303,
        "id": "02279060-59f5-455e-b2aa-fcea54c4a2b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460854303,
        "parent_id": "d34870b8-a5a3-4d1f-b5fa-37d070c55c7d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of this code is this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of this code is this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460854303,
        "id": "338c2eb7-c395-4d32-bc0b-e3e9664d9e47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460854303,
        "parent_id": "d34870b8-a5a3-4d1f-b5fa-37d070c55c7d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "someMethod1 was invoked!\nsomeMethod2 was invoked!\nParameter: stackoverflow\nanotherMethod was invoked!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "someMethod1 was invoked!\nsomeMethod2 was invoked!\nParameter: stackoverflow\nanotherMethod was invoked!",
        "code_language": "Plain Text"
      }
    ],
    "title": "Dynamic Proxies",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}