{
  "ID": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
  "Root": {
    "alive": true,
    "content": [
      "7dc9a1e2-e1b4-4774-8849-93be6ac50198",
      "37a82643-e44c-4f7a-b619-849d4aeb3e1c",
      "56b07d99-6a46-4980-8e56-b4a835753e2d",
      "22302239-8420-4ce9-a6b6-5a4b8d72a867",
      "605b947d-4737-4d5b-8d25-bc167b20f880",
      "1e0caba0-b603-49ee-8035-8ea396e4ea9a",
      "2e807cf0-58ff-4ada-b930-fc3e95246411",
      "d7bfdad1-fad0-468c-aad7-7a533dc51ff3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460101078,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460101078,
    "parent_id": "3e5f6441-fbb7-4864-8927-1c1c812bd8c7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Infinite Streams"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101075,
        "id": "7dc9a1e2-e1b4-4774-8849-93be6ac50198",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101075,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is possible to generate a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that does not end. Calling a terminal method on an infinite "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " causes the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to enter an infinite loop. The "
            ],
            [
              "limit",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#limit-long-"
                ]
              ]
            ],
            [
              " method of a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to limit the number of terms of the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that Java processes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is possible to generate a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " that does not end. Calling a terminal method on an infinite "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " causes the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " to enter an infinite loop. The "
          },
          {
            "Text": "limit",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#limit-long-"
          },
          {
            "Text": " method of a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to limit the number of terms of the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " that Java processes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101076,
        "id": "37a82643-e44c-4f7a-b619-849d4aeb3e1c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101076,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example generates a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of all natural numbers, starting with the number 1. Each successive term of the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is one higher than the previous. By calling the limit method of this "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", only the first five terms of the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are considered and printed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example generates a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " of all natural numbers, starting with the number 1. Each successive term of the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " is one higher than the previous. By calling the limit method of this "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": ", only the first five terms of the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " are considered and printed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101076,
        "id": "56b07d99-6a46-4980-8e56-b4a835753e2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101076,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Generate infinite stream - 1, 2, 3, 4, 5, 6, 7, ...\nIntStream naturalNumbers = IntStream.iterate(1, x -\u003e x + 1);\n\n// Print out only the first 5 terms\nnaturalNumbers.limit(5).forEach(System.out::println);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Generate infinite stream - 1, 2, 3, 4, 5, 6, 7, ...\nIntStream naturalNumbers = IntStream.iterate(1, x -\u003e x + 1);\n\n// Print out only the first 5 terms\nnaturalNumbers.limit(5).forEach(System.out::println);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101076,
        "id": "22302239-8420-4ce9-a6b6-5a4b8d72a867",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101076,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101077,
        "id": "605b947d-4737-4d5b-8d25-bc167b20f880",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101077,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 2 3 4 5"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 2 3 4 5"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101077,
        "id": "1e0caba0-b603-49ee-8035-8ea396e4ea9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101077,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101078,
        "id": "2e807cf0-58ff-4ada-b930-fc3e95246411",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101078,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way of generating an infinite stream is using the "
            ],
            [
              "Stream.generate",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#generate-java.util.function.Supplier-"
                ]
              ]
            ],
            [
              " method. This method takes a "
            ],
            [
              "lambda",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/java/91/lambda-expressions"
                ]
              ]
            ],
            [
              " of type "
            ],
            [
              "Supplier",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way of generating an infinite stream is using the "
          },
          {
            "Text": "Stream.generate",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#generate-java.util.function.Supplier-"
          },
          {
            "Text": " method. This method takes a "
          },
          {
            "Text": "lambda",
            "Link": "https://stackoverflow.com/documentation/java/91/lambda-expressions"
          },
          {
            "Text": " of type "
          },
          {
            "Text": "Supplier",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460101078,
        "id": "d7bfdad1-fad0-468c-aad7-7a533dc51ff3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460101078,
        "parent_id": "2eec2b5a-93bf-4842-b926-0e32e595bec1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Generate an infinite stream of random numbers\nStream\u003cDouble\u003e infiniteRandomNumbers = Stream.generate(Math::random);\n\n// Print out only the first 10 random numbers\ninfiniteRandomNumbers.limit(10).forEach(System.out::println);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Generate an infinite stream of random numbers\nStream\u003cDouble\u003e infiniteRandomNumbers = Stream.generate(Math::random);\n\n// Print out only the first 10 random numbers\ninfiniteRandomNumbers.limit(10).forEach(System.out::println);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Infinite Streams",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}