{
  "ID": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
  "Root": {
    "alive": true,
    "content": [
      "b8d77a6a-5416-48f0-8a3c-d1eb8e23af39",
      "96fc9cd4-b501-4c0e-9a88-dd7df06e6570",
      "5187acc5-d524-4622-a673-fb6590fc740e",
      "1af95894-0e18-44a2-8946-ef4be3a21a9e",
      "dc0381da-41bb-4bf8-bbd8-19231db34c66",
      "57176900-8294-423d-bad0-0b764f35047f",
      "eff49113-2b11-40a4-8ae7-08ee4e42cb7d",
      "eaaaad8f-f2e5-4f1e-8563-378d16876c07",
      "2e40a53e-1621-4659-aad3-f95783fdb2bb",
      "67dc2002-67ad-4fd7-a6a5-035d82f03393",
      "fb0f003e-23df-4d17-a035-a6c115725a6b",
      "aca90aad-1ea8-44ae-9515-87030e464d23",
      "591dbe85-e2fc-41a8-b6f0-a14ae4ac7124",
      "823a4d0e-67ad-4cf4-b9ec-1c39c0ba9656"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518773565,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551749272459,
    "parent_id": "3eb768b9-4667-4f25-acbf-097f9c448d1c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Comparing floating point values"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773560,
        "id": "b8d77a6a-5416-48f0-8a3c-d1eb8e23af39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773560,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You should be careful when comparing floating-point values ("
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") using relational operators: "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and so on. These operators give results according to the binary representations of the floating point values. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You should be careful when comparing floating-point values ("
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": ") using relational operators: "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " and so on. These operators give results according to the binary representations of the floating point values. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773561,
        "id": "96fc9cd4-b501-4c0e-9a88-dd7df06e6570",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773561,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CompareTest {\n    public static void main(String[] args) {\n        double oneThird = 1.0 / 3.0;\n        double one = oneThird * 3;\n        System.out.println(one == 1.0);      // prints \"false\"\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CompareTest {\n    public static void main(String[] args) {\n        double oneThird = 1.0 / 3.0;\n        double one = oneThird * 3;\n        System.out.println(one == 1.0);      // prints \"false\"\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773562,
        "id": "5187acc5-d524-4622-a673-fb6590fc740e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773562,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The calculation "
            ],
            [
              "oneThird",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has introduced a tiny rounding error, and when we multiply "
            ],
            [
              "oneThird",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by "
            ],
            [
              "3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we get a result that is slightly different to "
            ],
            [
              "1.0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The calculation "
          },
          {
            "Text": "oneThird",
            "AttrFlags": 2
          },
          {
            "Text": " has introduced a tiny rounding error, and when we multiply "
          },
          {
            "Text": "oneThird",
            "AttrFlags": 2
          },
          {
            "Text": " by "
          },
          {
            "Text": "3",
            "AttrFlags": 2
          },
          {
            "Text": " we get a result that is slightly different to "
          },
          {
            "Text": "1.0",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773563,
        "id": "1af95894-0e18-44a2-8946-ef4be3a21a9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773563,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This problem of inexact representations is more stark when we attempt to mix "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in calculations. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This problem of inexact representations is more stark when we attempt to mix "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " in calculations. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773563,
        "id": "dc0381da-41bb-4bf8-bbd8-19231db34c66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773563,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class CompareTest2 {\n    public static void main(String[] args) {\n        float floatVal = 0.1f;\n        double doubleVal = 0.1;\n        double doubleValCopy = floatVal;\n\n        System.out.println(floatVal);      // 0.1\n        System.out.println(doubleVal);     // 0.1\n        System.out.println(doubleValCopy); // 0.10000000149011612\n        \n        System.out.println(floatVal == doubleVal); // false\n        System.out.println(doubleVal == doubleValCopy); // false\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class CompareTest2 {\n    public static void main(String[] args) {\n        float floatVal = 0.1f;\n        double doubleVal = 0.1;\n        double doubleValCopy = floatVal;\n\n        System.out.println(floatVal);      // 0.1\n        System.out.println(doubleVal);     // 0.1\n        System.out.println(doubleValCopy); // 0.10000000149011612\n        \n        System.out.println(floatVal == doubleVal); // false\n        System.out.println(doubleVal == doubleValCopy); // false\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773563,
        "id": "57176900-8294-423d-bad0-0b764f35047f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773563,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The floating point representations used in Java for the "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types have limited number of digits of precision. For the "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type, the precision is 23 binary digits or about 8 decimal digits. For the "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type, it is 52 bits or about 15 decimal digits. On top of that, some arithmetical operations will introduce rounding errors. Therefore, when a program compares floating point values, it standard practice to define an "
            ],
            [
              "acceptable delta",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for the comparison. If the difference between the two numbers is less than the delta, they are deemed to be equal. For example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The floating point representations used in Java for the "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " types have limited number of digits of precision. For the "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " type, the precision is 23 binary digits or about 8 decimal digits. For the "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " type, it is 52 bits or about 15 decimal digits. On top of that, some arithmetical operations will introduce rounding errors. Therefore, when a program compares floating point values, it standard practice to define an "
          },
          {
            "Text": "acceptable delta",
            "AttrFlags": 1
          },
          {
            "Text": " for the comparison. If the difference between the two numbers is less than the delta, they are deemed to be equal. For example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773563,
        "id": "eff49113-2b11-40a4-8ae7-08ee4e42cb7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773563,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if (Math.abs(v1 - v2) \u003c delta)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if (Math.abs(v1 - v2) \u003c delta)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773563,
        "id": "eaaaad8f-f2e5-4f1e-8563-378d16876c07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773563,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Delta compare example:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Delta compare example:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773563,
        "id": "2e40a53e-1621-4659-aad3-f95783fdb2bb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773563,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class DeltaCompareExample {\n\n    private static boolean deltaCompare(double v1, double v2, double delta) {\n        // return true iff the difference between v1 and v2 is less than delta\n        return Math.abs(v1 - v2) \u003c delta;\n    }\n    \n    public static void main(String[] args) {\n        double[] doubles = {1.0, 1.0001, 1.0000001, 1.000000001, 1.0000000000001};\n        double[] deltas = {0.01, 0.00001, 0.0000001, 0.0000000001, 0};\n\n        // loop through all of deltas initialized above\n        for (int j = 0; j \u003c deltas.length; j++) {\n            double delta = deltas[j];\n            System.out.println(\"delta: \" + delta);\n\n            // loop through all of the doubles initialized above\n            for (int i = 0; i \u003c doubles.length - 1; i++) {\n                double d1 = doubles[i];\n                double d2 = doubles[i + 1];\n                boolean result = deltaCompare(d1, d2, delta);\n\n                System.out.println(\"\" + d1 + \" == \" + d2 + \" ? \" + result);\n                \n            }\n\n            System.out.println();\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class DeltaCompareExample {\n\n    private static boolean deltaCompare(double v1, double v2, double delta) {\n        // return true iff the difference between v1 and v2 is less than delta\n        return Math.abs(v1 - v2) \u003c delta;\n    }\n    \n    public static void main(String[] args) {\n        double[] doubles = {1.0, 1.0001, 1.0000001, 1.000000001, 1.0000000000001};\n        double[] deltas = {0.01, 0.00001, 0.0000001, 0.0000000001, 0};\n\n        // loop through all of deltas initialized above\n        for (int j = 0; j \u003c deltas.length; j++) {\n            double delta = deltas[j];\n            System.out.println(\"delta: \" + delta);\n\n            // loop through all of the doubles initialized above\n            for (int i = 0; i \u003c doubles.length - 1; i++) {\n                double d1 = doubles[i];\n                double d2 = doubles[i + 1];\n                boolean result = deltaCompare(d1, d2, delta);\n\n                System.out.println(\"\" + d1 + \" == \" + d2 + \" ? \" + result);\n                \n            }\n\n            System.out.println();\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773564,
        "id": "67dc2002-67ad-4fd7-a6a5-035d82f03393",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773564,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Result:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Result:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773564,
        "id": "fb0f003e-23df-4d17-a035-a6c115725a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773564,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "delta: 0.01\n1.0 == 1.0001 ? true\n1.0001 == 1.0000001 ? true\n1.0000001 == 1.000000001 ? true\n1.000000001 == 1.0000000000001 ? true\n\ndelta: 1.0E-5\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? true\n1.000000001 == 1.0000000000001 ? true\n\ndelta: 1.0E-7\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? true\n1.000000001 == 1.0000000000001 ? true\n\ndelta: 1.0E-10\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? false\n1.000000001 == 1.0000000000001 ? false\n\ndelta: 0.0\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? false\n1.000000001 == 1.0000000000001 ? false"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "delta: 0.01\n1.0 == 1.0001 ? true\n1.0001 == 1.0000001 ? true\n1.0000001 == 1.000000001 ? true\n1.000000001 == 1.0000000000001 ? true\n\ndelta: 1.0E-5\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? true\n1.000000001 == 1.0000000000001 ? true\n\ndelta: 1.0E-7\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? true\n1.000000001 == 1.0000000000001 ? true\n\ndelta: 1.0E-10\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? false\n1.000000001 == 1.0000000000001 ? false\n\ndelta: 0.0\n1.0 == 1.0001 ? false\n1.0001 == 1.0000001 ? false\n1.0000001 == 1.000000001 ? false\n1.000000001 == 1.0000000000001 ? false",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773565,
        "id": "aca90aad-1ea8-44ae-9515-87030e464d23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773565,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also for comparison of "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " primitive types static "
            ],
            [
              "compare",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method of corresponding boxing type can be used. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also for comparison of "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " primitive types static "
          },
          {
            "Text": "compare",
            "AttrFlags": 2
          },
          {
            "Text": " method of corresponding boxing type can be used. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773565,
        "id": "591dbe85-e2fc-41a8-b6f0-a14ae4ac7124",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773565,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "double a = 1.0;\ndouble b = 1.0001;\n\nSystem.out.println(Double.compare(a, b));//-1\nSystem.out.println(Double.compare(b, a));//1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "double a = 1.0;\ndouble b = 1.0001;\n\nSystem.out.println(Double.compare(a, b));//-1\nSystem.out.println(Double.compare(b, a));//1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518773565,
        "id": "823a4d0e-67ad-4cf4-b9ec-1c39c0ba9656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518773565,
        "parent_id": "1022a60f-e9c0-4024-9f56-d0808bf82af0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, determining what deltas are most appropriate for a comparison can be tricky. A commonly used approach is to pick delta values that are our intuition says are about right. However, if you know scale and (true) accuracy of the input values, and the calculations performed, it may be possible to come up with mathematically sound bounds on the accuracy of the results, and hence for the deltas. (There is a formal branch of Mathematics known as Numerical Analysis that used to be taught to computational scientists that covered this kind of analysis.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, determining what deltas are most appropriate for a comparison can be tricky. A commonly used approach is to pick delta values that are our intuition says are about right. However, if you know scale and (true) accuracy of the input values, and the calculations performed, it may be possible to come up with mathematically sound bounds on the accuracy of the results, and hence for the deltas. (There is a formal branch of Mathematics known as Numerical Analysis that used to be taught to computational scientists that covered this kind of analysis.)"
          }
        ]
      }
    ],
    "title": "Comparing floating point values",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}