{
  "ID": "aac3e3a8-3299-413e-949a-617ec8d22141",
  "Root": {
    "alive": true,
    "content": [
      "1775b381-97ad-47b1-8af0-87bc60cd8a26",
      "7e526dee-858a-40d6-8cee-57358507373b",
      "d758f506-8198-47ad-8a5e-95e1e68ab09d",
      "4f2185dd-c68c-48b1-8e77-d011731ba4d9",
      "5df64667-53b2-4a74-bf0d-b44d236dad41",
      "c96ac536-1c04-4771-8216-f65fb83c22f3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460554117,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "aac3e3a8-3299-413e-949a-617ec8d22141",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551751696425,
    "parent_id": "f602a51a-866e-489c-b102-d755ada1334d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Optional containers for primitive number types"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460554116,
        "id": "1775b381-97ad-47b1-8af0-87bc60cd8a26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460554116,
        "parent_id": "aac3e3a8-3299-413e-949a-617ec8d22141",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "OptionalDouble",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/OptionalDouble.html"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "OptionalInt",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "OptionalLong",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html"
                ]
              ]
            ],
            [
              " work like "
            ],
            [
              "Optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but are specifically designed to wrap primitive types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "OptionalDouble",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/OptionalDouble.html"
          },
          {
            "Text": ", "
          },
          {
            "Text": "OptionalInt",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html"
          },
          {
            "Text": " and "
          },
          {
            "Text": "OptionalLong",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html"
          },
          {
            "Text": " work like "
          },
          {
            "Text": "Optional",
            "AttrFlags": 2
          },
          {
            "Text": ", but are specifically designed to wrap primitive types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460554116,
        "id": "7e526dee-858a-40d6-8cee-57358507373b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460554116,
        "parent_id": "aac3e3a8-3299-413e-949a-617ec8d22141",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "OptionalInt presentInt = OptionalInt.of(value);\nOptionalInt absentInt = OptionalInt.empty();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "OptionalInt presentInt = OptionalInt.of(value);\nOptionalInt absentInt = OptionalInt.empty();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460554117,
        "id": "d758f506-8198-47ad-8a5e-95e1e68ab09d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460554117,
        "parent_id": "aac3e3a8-3299-413e-949a-617ec8d22141",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because numeric types do have a value, there is no special handling for null. Empty containers can be checked with:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because numeric types do have a value, there is no special handling for null. Empty containers can be checked with:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460554117,
        "id": "4f2185dd-c68c-48b1-8e77-d011731ba4d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460554117,
        "parent_id": "aac3e3a8-3299-413e-949a-617ec8d22141",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "presentInt.isPresent(); // Is true.\nabsentInt.isPresent(); // Is false."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "presentInt.isPresent(); // Is true.\nabsentInt.isPresent(); // Is false.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460554117,
        "id": "5df64667-53b2-4a74-bf0d-b44d236dad41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460554117,
        "parent_id": "aac3e3a8-3299-413e-949a-617ec8d22141",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, shorthands exist to aid value management:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, shorthands exist to aid value management:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460554117,
        "id": "c96ac536-1c04-4771-8216-f65fb83c22f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460554117,
        "parent_id": "aac3e3a8-3299-413e-949a-617ec8d22141",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Prints the value since it is provided on creation.\npresentInt.ifPresent(System.out::println);\n\n// Gives the other value as the original Optional is empty.\nint finalValue = absentInt.orElseGet(this::otherValue);\n\n// Will throw a NoSuchElementException.\nint nonexistentValue = absentInt.getAsInt();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Prints the value since it is provided on creation.\npresentInt.ifPresent(System.out::println);\n\n// Gives the other value as the original Optional is empty.\nint finalValue = absentInt.orElseGet(this::otherValue);\n\n// Will throw a NoSuchElementException.\nint nonexistentValue = absentInt.getAsInt();",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using Optional containers for primitive number types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}