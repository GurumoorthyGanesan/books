{
  "ID": "7f168358-47ff-4ef7-b122-865a3600037e",
  "Root": {
    "alive": true,
    "content": [
      "5b5f7b18-4603-4ffd-8abd-2e66dd67b6ad",
      "97117e5a-4e17-4855-a477-b245bf2f0449",
      "308d2ab4-0191-4fa6-bc99-01e9a83ddec2",
      "c79ef966-0f20-420e-a358-74c532d5041c",
      "3551b63e-e90c-41f3-b229-d9dae9099ad3",
      "088a20d6-eb05-4e4c-b26b-4d975b526999",
      "fa03b211-8ff3-448e-b570-5ab2f2b870cb",
      "7aef8ccd-83cc-4186-a8d6-c7cf2ebba5e5",
      "c7e13fc9-7333-4f5b-901f-9471cd80dc6b",
      "f9c911b2-15e8-4d48-8751-fee60575b364",
      "384c55b3-cb04-4527-8995-c175c5b8bedb",
      "f3e2b328-925e-471d-b3c8-6a3a6c25d20c",
      "15eee271-a2ec-4197-9d60-c9820c626a44"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519579145,
    "id": "7f168358-47ff-4ef7-b122-865a3600037e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550519579145,
    "parent_id": "6dd46157-67bc-42db-a307-1e68e8cc3008",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Performing Asynchronous Tasks Where a Return Value Is Needed Using a Callable Class Instance"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579140,
        "id": "5b5f7b18-4603-4ffd-8abd-2e66dd67b6ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579140,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is often necessary to execute a long-running task and use the result of that task once it has completed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is often necessary to execute a long-running task and use the result of that task once it has completed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579142,
        "id": "97117e5a-4e17-4855-a477-b245bf2f0449",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579142,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, we will create two classes: One which implements the Callable\u003cT\u003e interface (where T is the type we wish to return), and one which contains a main() method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, we will create two classes: One which implements the Callable\u003cT\u003e interface (where T is the type we wish to return), and one which contains a main() method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "308d2ab4-0191-4fa6-bc99-01e9a83ddec2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AsyncValueTypeTaskCompleter.java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "AsyncValueTypeTaskCompleter.java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "c79ef966-0f20-420e-a358-74c532d5041c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import lombok.extern.java.Log;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\n\n@Log\npublic class AsyncValueTypeTaskCompleter implements Callable\u003cInteger\u003e {\n    private int taskNumber;\n\n    public AsyncValueTypeTaskCompleter(int taskNumber) {\n        this.taskNumber = taskNumber;\n    }\n\n    @Override\n    public Integer call() throws Exception {\n        int timeout = ThreadLocalRandom.current().nextInt(1, 20);\n        try {\n            log.info(String.format(\"Task %d is sleeping\", taskNumber));\n            TimeUnit.SECONDS.sleep(timeout);\n            log.info(String.format(\"Task %d is done sleeping\", taskNumber));\n\n        } catch (InterruptedException e) {\n            log.warning(e.getMessage());\n        }\n        return timeout;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import lombok.extern.java.Log;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\n\n@Log\npublic class AsyncValueTypeTaskCompleter implements Callable\u003cInteger\u003e {\n    private int taskNumber;\n\n    public AsyncValueTypeTaskCompleter(int taskNumber) {\n        this.taskNumber = taskNumber;\n    }\n\n    @Override\n    public Integer call() throws Exception {\n        int timeout = ThreadLocalRandom.current().nextInt(1, 20);\n        try {\n            log.info(String.format(\"Task %d is sleeping\", taskNumber));\n            TimeUnit.SECONDS.sleep(timeout);\n            log.info(String.format(\"Task %d is done sleeping\", taskNumber));\n\n        } catch (InterruptedException e) {\n            log.warning(e.getMessage());\n        }\n        return timeout;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "3551b63e-e90c-41f3-b229-d9dae9099ad3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "AsyncExample2.java",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "AsyncExample2.java",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "088a20d6-eb05-4e4c-b26b-4d975b526999",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import lombok.extern.java.Log;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\n@Log\npublic class AsyncExample2 {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        List\u003cFuture\u003cInteger\u003e\u003e futures = new ArrayList\u003c\u003e();\n        for (int i = 0; i \u003c 10; i++){\n            Future\u003cInteger\u003e submittedFuture = executorService.submit(new AsyncValueTypeTaskCompleter(i));\n            futures.add(submittedFuture);\n        }\n        executorService.shutdown();\n        while(!futures.isEmpty()){\n            for(int j = 0; j \u003c futures.size(); j++){\n                Future\u003cInteger\u003e f = futures.get(j);\n                if(f.isDone()){\n                    try {\n                        int timeout = f.get();\n                        log.info(String.format(\"A task just completed after sleeping for %d seconds\", timeout));\n                        futures.remove(f);\n                    } catch (InterruptedException | ExecutionException e) {\n                        log.warning(e.getMessage());\n                    }\n                }\n            }\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import lombok.extern.java.Log;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\n@Log\npublic class AsyncExample2 {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        List\u003cFuture\u003cInteger\u003e\u003e futures = new ArrayList\u003c\u003e();\n        for (int i = 0; i \u003c 10; i++){\n            Future\u003cInteger\u003e submittedFuture = executorService.submit(new AsyncValueTypeTaskCompleter(i));\n            futures.add(submittedFuture);\n        }\n        executorService.shutdown();\n        while(!futures.isEmpty()){\n            for(int j = 0; j \u003c futures.size(); j++){\n                Future\u003cInteger\u003e f = futures.get(j);\n                if(f.isDone()){\n                    try {\n                        int timeout = f.get();\n                        log.info(String.format(\"A task just completed after sleeping for %d seconds\", timeout));\n                        futures.remove(f);\n                    } catch (InterruptedException | ExecutionException e) {\n                        log.warning(e.getMessage());\n                    }\n                }\n            }\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "fa03b211-8ff3-448e-b570-5ab2f2b870cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Running AsyncExample2.main() resulted in the following output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Running AsyncExample2.main() resulted in the following output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "7aef8ccd-83cc-4186-a8d6-c7cf2ebba5e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Dec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 7 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 8 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 2 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 1 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 4 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 9 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 0 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 6 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 5 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 3 is sleeping\nDec 28, 2016 3:07:16 PM AsyncValueTypeTaskCompleter call\nINFO: Task 8 is done sleeping\nDec 28, 2016 3:07:16 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 1 seconds\nDec 28, 2016 3:07:17 PM AsyncValueTypeTaskCompleter call\nINFO: Task 2 is done sleeping\nDec 28, 2016 3:07:17 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 2 seconds\nDec 28, 2016 3:07:17 PM AsyncValueTypeTaskCompleter call\nINFO: Task 9 is done sleeping\nDec 28, 2016 3:07:17 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 2 seconds\nDec 28, 2016 3:07:19 PM AsyncValueTypeTaskCompleter call\nINFO: Task 3 is done sleeping\nDec 28, 2016 3:07:19 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 4 seconds\nDec 28, 2016 3:07:20 PM AsyncValueTypeTaskCompleter call\nINFO: Task 0 is done sleeping\nDec 28, 2016 3:07:20 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 5 seconds\nDec 28, 2016 3:07:21 PM AsyncValueTypeTaskCompleter call\nINFO: Task 5 is done sleeping\nDec 28, 2016 3:07:21 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 6 seconds\nDec 28, 2016 3:07:25 PM AsyncValueTypeTaskCompleter call\nINFO: Task 1 is done sleeping\nDec 28, 2016 3:07:25 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 10 seconds\nDec 28, 2016 3:07:27 PM AsyncValueTypeTaskCompleter call\nINFO: Task 6 is done sleeping\nDec 28, 2016 3:07:27 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 12 seconds\nDec 28, 2016 3:07:29 PM AsyncValueTypeTaskCompleter call\nINFO: Task 7 is done sleeping\nDec 28, 2016 3:07:29 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 14 seconds\nDec 28, 2016 3:07:31 PM AsyncValueTypeTaskCompleter call\nINFO: Task 4 is done sleeping\nDec 28, 2016 3:07:31 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 16 seconds"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Dec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 7 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 8 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 2 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 1 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 4 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 9 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 0 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 6 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 5 is sleeping\nDec 28, 2016 3:07:15 PM AsyncValueTypeTaskCompleter call\nINFO: Task 3 is sleeping\nDec 28, 2016 3:07:16 PM AsyncValueTypeTaskCompleter call\nINFO: Task 8 is done sleeping\nDec 28, 2016 3:07:16 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 1 seconds\nDec 28, 2016 3:07:17 PM AsyncValueTypeTaskCompleter call\nINFO: Task 2 is done sleeping\nDec 28, 2016 3:07:17 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 2 seconds\nDec 28, 2016 3:07:17 PM AsyncValueTypeTaskCompleter call\nINFO: Task 9 is done sleeping\nDec 28, 2016 3:07:17 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 2 seconds\nDec 28, 2016 3:07:19 PM AsyncValueTypeTaskCompleter call\nINFO: Task 3 is done sleeping\nDec 28, 2016 3:07:19 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 4 seconds\nDec 28, 2016 3:07:20 PM AsyncValueTypeTaskCompleter call\nINFO: Task 0 is done sleeping\nDec 28, 2016 3:07:20 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 5 seconds\nDec 28, 2016 3:07:21 PM AsyncValueTypeTaskCompleter call\nINFO: Task 5 is done sleeping\nDec 28, 2016 3:07:21 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 6 seconds\nDec 28, 2016 3:07:25 PM AsyncValueTypeTaskCompleter call\nINFO: Task 1 is done sleeping\nDec 28, 2016 3:07:25 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 10 seconds\nDec 28, 2016 3:07:27 PM AsyncValueTypeTaskCompleter call\nINFO: Task 6 is done sleeping\nDec 28, 2016 3:07:27 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 12 seconds\nDec 28, 2016 3:07:29 PM AsyncValueTypeTaskCompleter call\nINFO: Task 7 is done sleeping\nDec 28, 2016 3:07:29 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 14 seconds\nDec 28, 2016 3:07:31 PM AsyncValueTypeTaskCompleter call\nINFO: Task 4 is done sleeping\nDec 28, 2016 3:07:31 PM AsyncExample2 main\nINFO: A task just completed after sleeping for 16 seconds",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579143,
        "id": "c7e13fc9-7333-4f5b-901f-9471cd80dc6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579143,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Observations of Note:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Observations of Note:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579144,
        "id": "f9c911b2-15e8-4d48-8751-fee60575b364",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579144,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are several things to note in the output above,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are several things to note in the output above,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579144,
        "id": "384c55b3-cb04-4527-8995-c175c5b8bedb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579144,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each call to ExecutorService.submit() returned an instance of Future, which was stored in a list for later use"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each call to ExecutorService.submit() returned an instance of Future, which was stored in a list for later use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579144,
        "id": "f3e2b328-925e-471d-b3c8-6a3a6c25d20c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579144,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Future contains a method called isDone() which can be used to check whether our task has been completed before attempting to check it’s return value. Calling the Future.get() method on a Future that is not yet done will block the current thread until the task is complete, potentially negating many benefits gained from performing the task Asynchronously."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Future contains a method called isDone() which can be used to check whether our task has been completed before attempting to check it’s return value. Calling the Future.get() method on a Future that is not yet done will block the current thread until the task is complete, potentially negating many benefits gained from performing the task Asynchronously."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519579145,
        "id": "15eee271-a2ec-4197-9d60-c9820c626a44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519579145,
        "parent_id": "7f168358-47ff-4ef7-b122-865a3600037e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The executorService.shutdown() method was called prior to checking the return values of the Future objects. This is not required, but was done in this way to show that it is possible. The executorService.shutdown() method does not prevent the completion of tasks which have already been submitted to the ExecutorService, but rather prevents new tasks from being added to the Queue."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The executorService.shutdown() method was called prior to checking the return values of the Future objects. This is not required, but was done in this way to show that it is possible. The executorService.shutdown() method does not prevent the completion of tasks which have already been submitted to the ExecutorService, but rather prevents new tasks from being added to the Queue."
          }
        ]
      }
    ],
    "title": "020 Performing Asynchronous Tasks Where a Return Value Is Needed Using a Callable Class Instance"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}