{
  "ID": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
  "Root": {
    "alive": true,
    "content": [
      "76e354b1-f345-4df7-893f-ef8dcb440b4d",
      "4d7ede93-16af-42d4-aae8-471816bdc170",
      "9efff918-0451-42c6-b481-1fef12c2c037",
      "c924a0f0-27d5-4103-bf13-f5d2060daa50",
      "e17203eb-edab-4bb8-a877-02c3afd093e4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460509083,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551768590093,
    "parent_id": "452a4215-c66d-493c-80d3-4980568bf1fa",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "wait and notify methods"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460509080,
        "id": "76e354b1-f345-4df7-893f-ef8dcb440b4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460509080,
        "parent_id": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " work in tandem – when one thread calls "
            ],
            [
              "wait()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on an object, that thread will block until another thread calls "
            ],
            [
              "notify()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "notifyAll()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on that same object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "wait()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "notify()",
            "AttrFlags": 2
          },
          {
            "Text": " work in tandem – when one thread calls "
          },
          {
            "Text": "wait()",
            "AttrFlags": 2
          },
          {
            "Text": " on an object, that thread will block until another thread calls "
          },
          {
            "Text": "notify()",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "notifyAll()",
            "AttrFlags": 2
          },
          {
            "Text": " on that same object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460509082,
        "id": "4d7ede93-16af-42d4-aae8-471816bdc170",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460509082,
        "parent_id": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(See Also: http://stackoverflow.com/documentation/java/5409/wait-notify#t=20160811161648303307 )"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(See Also: http://stackoverflow.com/documentation/java/5409/wait-notify#t=20160811161648303307 )"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460509083,
        "id": "9efff918-0451-42c6-b481-1fef12c2c037",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460509083,
        "parent_id": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "package com.example.examples.object;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class WaitAndNotify {\n\n    public static void main(String[] args) throws InterruptedException {\n        final Object obj = new Object();\n        AtomicBoolean aHasFinishedWaiting = new AtomicBoolean(false);\n    \n        Thread threadA = new Thread(\"Thread A\") {\n            public void run() {\n                System.out.println(\"A1: Could print before or after B1\");\n                System.out.println(\"A2: Thread A is about to start waiting...\");\n                try {\n                    synchronized (obj) { // wait() must be in a synchronized block\n                        // execution of thread A stops until obj.notify() is called\n                        obj.wait();\n                    }\n                    System.out.println(\"A3: Thread A has finished waiting. \"\n                            + \"Guaranteed to happen after B3\");\n                } catch (InterruptedException e) {\n                    System.out.println(\"Thread A was interrupted while waiting\");\n                } finally {\n                    aHasFinishedWaiting.set(true);\n                }\n            }\n        };\n    \n        Thread threadB = new Thread(\"Thread B\") {\n            public void run() {\n                System.out.println(\"B1: Could print before or after A1\");\n\n                System.out.println(\"B2: Thread B is about to wait for 10 seconds\");\n                for (int i = 0; i \u003c 10; i++) {\n                    try {                        \n                        Thread.sleep(1000); // sleep for 1 second \n                    } catch (InterruptedException e) {\n                        System.err.println(\"Thread B was interrupted from waiting\");\n                    }\n                }\n            \n                System.out.println(\"B3: Will ALWAYS print before A3 since \"\n                        + \"A3 can only happen after obj.notify() is called.\");\n            \n                while (!aHasFinishedWaiting.get()) {\n                    synchronized (obj) {\n                        // notify ONE thread which has called obj.wait()\n                        obj.notify();\n                    }\n                }\n            }\n        };\n    \n        threadA.start();\n        threadB.start();\n    \n        threadA.join();\n        threadB.join();\n    \n        System.out.println(\"Finished!\");\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "package com.example.examples.object;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class WaitAndNotify {\n\n    public static void main(String[] args) throws InterruptedException {\n        final Object obj = new Object();\n        AtomicBoolean aHasFinishedWaiting = new AtomicBoolean(false);\n    \n        Thread threadA = new Thread(\"Thread A\") {\n            public void run() {\n                System.out.println(\"A1: Could print before or after B1\");\n                System.out.println(\"A2: Thread A is about to start waiting...\");\n                try {\n                    synchronized (obj) { // wait() must be in a synchronized block\n                        // execution of thread A stops until obj.notify() is called\n                        obj.wait();\n                    }\n                    System.out.println(\"A3: Thread A has finished waiting. \"\n                            + \"Guaranteed to happen after B3\");\n                } catch (InterruptedException e) {\n                    System.out.println(\"Thread A was interrupted while waiting\");\n                } finally {\n                    aHasFinishedWaiting.set(true);\n                }\n            }\n        };\n    \n        Thread threadB = new Thread(\"Thread B\") {\n            public void run() {\n                System.out.println(\"B1: Could print before or after A1\");\n\n                System.out.println(\"B2: Thread B is about to wait for 10 seconds\");\n                for (int i = 0; i \u003c 10; i++) {\n                    try {                        \n                        Thread.sleep(1000); // sleep for 1 second \n                    } catch (InterruptedException e) {\n                        System.err.println(\"Thread B was interrupted from waiting\");\n                    }\n                }\n            \n                System.out.println(\"B3: Will ALWAYS print before A3 since \"\n                        + \"A3 can only happen after obj.notify() is called.\");\n            \n                while (!aHasFinishedWaiting.get()) {\n                    synchronized (obj) {\n                        // notify ONE thread which has called obj.wait()\n                        obj.notify();\n                    }\n                }\n            }\n        };\n    \n        threadA.start();\n        threadB.start();\n    \n        threadA.join();\n        threadB.join();\n    \n        System.out.println(\"Finished!\");\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460509083,
        "id": "c924a0f0-27d5-4103-bf13-f5d2060daa50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460509083,
        "parent_id": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some example output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some example output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460509083,
        "id": "e17203eb-edab-4bb8-a877-02c3afd093e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460509083,
        "parent_id": "1c598e8b-d8bc-48eb-b76c-cfc62117d8b0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "A1: Could print before or after B1\nB1: Could print before or after A1\nA2: Thread A is about to start waiting...\nB2: Thread B is about to wait for 10 seconds\nB3: Will ALWAYS print before A3 since A3 can only happen after obj.notify() is called.\nA3: Thread A has finished waiting. Guaranteed to happen after B3\nFinished!\n\nB1: Could print before or after A1\nB2: Thread B is about to wait for 10 seconds\nA1: Could print before or after B1\nA2: Thread A is about to start waiting...\nB3: Will ALWAYS print before A3 since A3 can only happen after obj.notify() is called.\nA3: Thread A has finished waiting. Guaranteed to happen after B3\nFinished!\n\nA1: Could print before or after B1\nA2: Thread A is about to start waiting...\nB1: Could print before or after A1\nB2: Thread B is about to wait for 10 seconds\nB3: Will ALWAYS print before A3 since A3 can only happen after obj.notify() is called.\nA3: Thread A has finished waiting. Guaranteed to happen after B3\nFinished!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "A1: Could print before or after B1\nB1: Could print before or after A1\nA2: Thread A is about to start waiting...\nB2: Thread B is about to wait for 10 seconds\nB3: Will ALWAYS print before A3 since A3 can only happen after obj.notify() is called.\nA3: Thread A has finished waiting. Guaranteed to happen after B3\nFinished!\n\nB1: Could print before or after A1\nB2: Thread B is about to wait for 10 seconds\nA1: Could print before or after B1\nA2: Thread A is about to start waiting...\nB3: Will ALWAYS print before A3 since A3 can only happen after obj.notify() is called.\nA3: Thread A has finished waiting. Guaranteed to happen after B3\nFinished!\n\nA1: Could print before or after B1\nA2: Thread A is about to start waiting...\nB1: Could print before or after A1\nB2: Thread B is about to wait for 10 seconds\nB3: Will ALWAYS print before A3 since A3 can only happen after obj.notify() is called.\nA3: Thread A has finished waiting. Guaranteed to happen after B3\nFinished!",
        "code_language": "Plain Text"
      }
    ],
    "title": "wait and notify methods",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}