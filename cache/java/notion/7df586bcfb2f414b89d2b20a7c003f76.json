{
  "ID": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
  "Root": {
    "alive": true,
    "content": [
      "c3d1474a-5298-4bfb-9df4-925948590bcc",
      "ad1cd734-c637-4ee5-8b9c-65bbe3896ce4",
      "7623c417-351f-4448-a6b0-9a34f78f5c39",
      "77e9a003-c8a6-4e0b-8d97-ef08b702771c",
      "09f8c4e1-ea15-4d49-95b5-29f21734b160"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461235006,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551757183628,
    "parent_id": "c0b21f8d-4154-4b25-a9c9-44797f096f6b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using BigDecimal instead of float"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461235003,
        "id": "c3d1474a-5298-4bfb-9df4-925948590bcc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461235003,
        "parent_id": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Due to way that the float type is represented in computer memory, results of operations using this type can be inaccurate - some values are stored as approximations. Good examples of this are monetary calculations. If high precision is necessary, other types should be used. e.g. Java 7 provides BigDecimal."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Due to way that the float type is represented in computer memory, results of operations using this type can be inaccurate - some values are stored as approximations. Good examples of this are monetary calculations. If high precision is necessary, other types should be used. e.g. Java 7 provides BigDecimal."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461235006,
        "id": "ad1cd734-c637-4ee5-8b9c-65bbe3896ce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461235006,
        "parent_id": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.math.BigDecimal;\n\npublic class FloatTest {\n\npublic static void main(String[] args) {\n    float accountBalance = 10000.00f;\n    System.out.println(\"Operations using float:\");\n    System.out.println(\"1000 operations for 1.99\");\n    for(int i = 0; i\u003c1000; i++){\n        accountBalance -= 1.99f;\n    }\n    System.out.println(String.format(\"Account balance after float operations: %f\", accountBalance));\n    \n    BigDecimal accountBalanceTwo = new BigDecimal(\"10000.00\");\n    System.out.println(\"Operations using BigDecimal:\");\n    System.out.println(\"1000 operations for 1.99\");\n    BigDecimal operation = new BigDecimal(\"1.99\");\n    for(int i = 0; i\u003c1000; i++){\n        accountBalanceTwo = accountBalanceTwo.subtract(operation);\n    }\n    System.out.println(String.format(\"Account balance after BigDecimal operations: %f\", accountBalanceTwo));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.math.BigDecimal;\n\npublic class FloatTest {\n\npublic static void main(String[] args) {\n    float accountBalance = 10000.00f;\n    System.out.println(\"Operations using float:\");\n    System.out.println(\"1000 operations for 1.99\");\n    for(int i = 0; i\u003c1000; i++){\n        accountBalance -= 1.99f;\n    }\n    System.out.println(String.format(\"Account balance after float operations: %f\", accountBalance));\n    \n    BigDecimal accountBalanceTwo = new BigDecimal(\"10000.00\");\n    System.out.println(\"Operations using BigDecimal:\");\n    System.out.println(\"1000 operations for 1.99\");\n    BigDecimal operation = new BigDecimal(\"1.99\");\n    for(int i = 0; i\u003c1000; i++){\n        accountBalanceTwo = accountBalanceTwo.subtract(operation);\n    }\n    System.out.println(String.format(\"Account balance after BigDecimal operations: %f\", accountBalanceTwo));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461235006,
        "id": "7623c417-351f-4448-a6b0-9a34f78f5c39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461235006,
        "parent_id": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output of this program is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output of this program is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461235006,
        "id": "77e9a003-c8a6-4e0b-8d97-ef08b702771c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461235006,
        "parent_id": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Operations using float:\n1000 operations for 1.99\nAccount balance after float operations: 8009,765625\nOperations using BigDecimal:\n1000 operations for 1.99\nAccount balance after BigDecimal operations: 8010,000000"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Operations using float:\n1000 operations for 1.99\nAccount balance after float operations: 8009,765625\nOperations using BigDecimal:\n1000 operations for 1.99\nAccount balance after BigDecimal operations: 8010,000000",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461235006,
        "id": "09f8c4e1-ea15-4d49-95b5-29f21734b160",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461235006,
        "parent_id": "7df586bc-fb2f-414b-89d2-b20a7c003f76",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For a starting balance of 10000.00, after 1000 operations for 1.99, we expect the balance to be 8010.00. Using the float type gives us an answer around 8009.77, which is unacceptably imprecise in the case of monetary calculations. Using BigDecimal gives us the proper result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For a starting balance of 10000.00, after 1000 operations for 1.99, we expect the balance to be 8010.00. Using the float type gives us an answer around 8009.77, which is unacceptably imprecise in the case of monetary calculations. Using BigDecimal gives us the proper result."
          }
        ]
      }
    ],
    "title": "Using BigDecimal instead of float",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}