{
  "ID": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
  "Root": {
    "alive": true,
    "content": [
      "ae896d12-9af8-435a-8cec-a4feb773d3cc",
      "d561581c-5c9e-47ef-907d-df229fd6e8f0",
      "948af783-2f6c-41de-9251-ad6828f3377a",
      "99ef9f19-7770-482b-8611-2bdba911a169",
      "689014ff-97ba-4e6b-b67d-c338dc49cbab",
      "e186aa81-e77e-4fa9-a4ea-36a9039ed25f",
      "02ead4c6-441b-43d8-8987-7861fd606559"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461183571,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551750364581,
    "parent_id": "f97b5af1-ebfb-4f93-b626-71360d568e49",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Checking setting clearing and toggling individual bits. Using long as bit mask"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183568,
        "id": "ae896d12-9af8-435a-8cec-a4feb773d3cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183568,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assuming we want to modify bit "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of an integer primitive, "
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (byte, short, char, int, or long):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assuming we want to modify bit "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " of an integer primitive, "
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": " (byte, short, char, int, or long):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183570,
        "id": "d561581c-5c9e-47ef-907d-df229fd6e8f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183570,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(i \u0026 1 \u003c\u003c n) != 0 // checks bit 'n'\ni |= 1 \u003c\u003c n;      // sets bit 'n' to 1\ni \u0026= ~(1 \u003c\u003c n);   // sets bit 'n' to 0\ni ^= 1 \u003c\u003c n;      // toggles the value of bit 'n'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(i \u0026 1 \u003c\u003c n) != 0 // checks bit 'n'\ni |= 1 \u003c\u003c n;      // sets bit 'n' to 1\ni \u0026= ~(1 \u003c\u003c n);   // sets bit 'n' to 0\ni ^= 1 \u003c\u003c n;      // toggles the value of bit 'n'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183571,
        "id": "948af783-2f6c-41de-9251-ad6828f3377a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183571,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using long/int/short/byte as a bit mask:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using long/int/short/byte as a bit mask:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183571,
        "id": "99ef9f19-7770-482b-8611-2bdba911a169",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183571,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class BitMaskExample {\n    private static final long FIRST_BIT = 1L \u003c\u003c 0;\n    private static final long SECOND_BIT = 1L \u003c\u003c 1;\n    private static final long THIRD_BIT = 1L \u003c\u003c 2;\n    private static final long FOURTH_BIT = 1L \u003c\u003c 3;\n    private static final long FIFTH_BIT = 1L \u003c\u003c 4;\n    private static final long BIT_55 = 1L \u003c\u003c 54;\n\n    public static void main(String[] args) {\n        checkBitMask(FIRST_BIT | THIRD_BIT | FIFTH_BIT | BIT_55);\n    }\n\n    private static void checkBitMask(long bitmask) {\n        System.out.println(\"FIRST_BIT: \" + ((bitmask \u0026 FIRST_BIT) != 0));\n        System.out.println(\"SECOND_BIT: \" + ((bitmask \u0026 SECOND_BIT) != 0));\n        System.out.println(\"THIRD_BIT: \" + ((bitmask \u0026 THIRD_BIT) != 0));\n        System.out.println(\"FOURTh_BIT: \" + ((bitmask \u0026 FOURTH_BIT) != 0));\n        System.out.println(\"FIFTH_BIT: \" + ((bitmask \u0026 FIFTH_BIT) != 0));\n        System.out.println(\"BIT_55: \" + ((bitmask \u0026 BIT_55) != 0));\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class BitMaskExample {\n    private static final long FIRST_BIT = 1L \u003c\u003c 0;\n    private static final long SECOND_BIT = 1L \u003c\u003c 1;\n    private static final long THIRD_BIT = 1L \u003c\u003c 2;\n    private static final long FOURTH_BIT = 1L \u003c\u003c 3;\n    private static final long FIFTH_BIT = 1L \u003c\u003c 4;\n    private static final long BIT_55 = 1L \u003c\u003c 54;\n\n    public static void main(String[] args) {\n        checkBitMask(FIRST_BIT | THIRD_BIT | FIFTH_BIT | BIT_55);\n    }\n\n    private static void checkBitMask(long bitmask) {\n        System.out.println(\"FIRST_BIT: \" + ((bitmask \u0026 FIRST_BIT) != 0));\n        System.out.println(\"SECOND_BIT: \" + ((bitmask \u0026 SECOND_BIT) != 0));\n        System.out.println(\"THIRD_BIT: \" + ((bitmask \u0026 THIRD_BIT) != 0));\n        System.out.println(\"FOURTh_BIT: \" + ((bitmask \u0026 FOURTH_BIT) != 0));\n        System.out.println(\"FIFTH_BIT: \" + ((bitmask \u0026 FIFTH_BIT) != 0));\n        System.out.println(\"BIT_55: \" + ((bitmask \u0026 BIT_55) != 0));\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183571,
        "id": "689014ff-97ba-4e6b-b67d-c338dc49cbab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183571,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prints"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prints"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183571,
        "id": "e186aa81-e77e-4fa9-a4ea-36a9039ed25f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183571,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "FIRST_BIT: true\nSECOND_BIT: false\nTHIRD_BIT: true\nFOURTh_BIT: false\nFIFTH_BIT: true\nBIT_55: true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "FIRST_BIT: true\nSECOND_BIT: false\nTHIRD_BIT: true\nFOURTh_BIT: false\nFIFTH_BIT: true\nBIT_55: true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461183571,
        "id": "02ead4c6-441b-43d8-8987-7861fd606559",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461183571,
        "parent_id": "9a522bc2-8890-4b62-a79f-576d15f7cd62",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which matches that mask we passed as "
            ],
            [
              "checkBitMask",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " parameter: "
            ],
            [
              "FIRST_BIT | THIRD_BIT | FIFTH_BIT | BIT_55",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which matches that mask we passed as "
          },
          {
            "Text": "checkBitMask",
            "AttrFlags": 2
          },
          {
            "Text": " parameter: "
          },
          {
            "Text": "FIRST_BIT | THIRD_BIT | FIFTH_BIT | BIT_55",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Checking setting clearing and toggling individual bits. Using long as bit mask",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}