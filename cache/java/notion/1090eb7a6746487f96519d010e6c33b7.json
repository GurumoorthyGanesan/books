{
  "ID": "1090eb7a-6746-487f-9651-9d010e6c33b7",
  "Root": {
    "alive": true,
    "content": [
      "e3fcba59-824c-4231-97d3-590c4926fe0d",
      "e198c5e0-8381-4928-a9bb-19b733cebba7",
      "2043c9c5-d2e6-4704-9c28-0e25e9223e34",
      "37b200d1-7f5a-4145-94bf-e0676cbc3c8d",
      "c597376a-9b2e-44cc-920e-cfaf8cb2c077",
      "9331ffce-e300-46ec-a297-9f3a77e3fd35",
      "a47c6895-2983-4c9f-b488-7e9d9072cb4a",
      "624db07e-ea2d-4c0c-bb78-98878ce8ba74",
      "420de7ce-a8b9-4136-b271-265125b6e9fa",
      "7fa2a380-c4cf-476e-9050-b8e7b62f3315",
      "b31d4449-3c52-4af2-a046-a1573194ac4b",
      "7933099d-5b25-4691-b332-0714ef87d587",
      "8b706829-b588-41a4-bca2-3c0fd4a9ab6e",
      "ab8c0cf0-f92a-4bab-b203-35adac8bce1a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460200089,
    "id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460200089,
    "parent_id": "85c1bbdb-fd02-46ef-97a5-fd455d99d394",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "070 Using Interfaces with Generics"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200087,
        "id": "e3fcba59-824c-4231-97d3-590c4926fe0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200087,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say you want to define an interface that allows publishing / consuming data to and from different types of channels (e.g. AMQP, JMS, etc), but you want to be able to switch out the implementation details …"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say you want to define an interface that allows publishing / consuming data to and from different types of channels (e.g. AMQP, JMS, etc), but you want to be able to switch out the implementation details …"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200087,
        "id": "e198c5e0-8381-4928-a9bb-19b733cebba7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200087,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s define a basic IO interface that can be re-used across multiple implementations:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s define a basic IO interface that can be re-used across multiple implementations:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "2043c9c5-d2e6-4704-9c28-0e25e9223e34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public interface IO\u003cIncomingType, OutgoingType\u003e {\n\n    void publish(OutgoingType data);\n    IncomingType consume();\n    IncomingType RPCSubmit(OutgoingType data);\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public interface IO\u003cIncomingType, OutgoingType\u003e {\n\n    void publish(OutgoingType data);\n    IncomingType consume();\n    IncomingType RPCSubmit(OutgoingType data);\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "37b200d1-7f5a-4145-94bf-e0676cbc3c8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now I can instantiate that interface, but since we don’t have default implementations for those methods, it’ll need an implementation when we instantiate it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now I can instantiate that interface, but since we don’t have default implementations for those methods, it’ll need an implementation when we instantiate it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "c597376a-9b2e-44cc-920e-cfaf8cb2c077",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "IO\u003cString, String\u003e mockIO = new IO\u003cString, String\u003e() {\n\n    private String channel = \"somechannel\";\n\n    @Override\n    public void publish(String data) {\n        System.out.println(\"Publishing \" + data + \" to \" + channel);\n    }\n\n    @Override\n    public String consume() {\n        System.out.println(\"Consuming from \" + channel);\n        return \"some useful data\";\n    }\n\n    @Override\n    public String RPCSubmit(String data) {\n        return \"received \" + data + \" just now \";\n    }\n\n};\n\nmockIO.consume(); // prints: Consuming from somechannel\nmockIO.publish(\"TestData\"); // Publishing TestData to somechannel\nSystem.out.println(mockIO.RPCSubmit(\"TestData\")); // received TestData just now"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "IO\u003cString, String\u003e mockIO = new IO\u003cString, String\u003e() {\n\n    private String channel = \"somechannel\";\n\n    @Override\n    public void publish(String data) {\n        System.out.println(\"Publishing \" + data + \" to \" + channel);\n    }\n\n    @Override\n    public String consume() {\n        System.out.println(\"Consuming from \" + channel);\n        return \"some useful data\";\n    }\n\n    @Override\n    public String RPCSubmit(String data) {\n        return \"received \" + data + \" just now \";\n    }\n\n};\n\nmockIO.consume(); // prints: Consuming from somechannel\nmockIO.publish(\"TestData\"); // Publishing TestData to somechannel\nSystem.out.println(mockIO.RPCSubmit(\"TestData\")); // received TestData just now",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "9331ffce-e300-46ec-a297-9f3a77e3fd35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also do something more useful with that interface, let’s say we want to use it to wrap some basic RabbitMQ functions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can also do something more useful with that interface, let’s say we want to use it to wrap some basic RabbitMQ functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "a47c6895-2983-4c9f-b488-7e9d9072cb4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class RabbitMQ implements IO\u003cString, String\u003e {\n\n    private String exchange;\n    private String queue;\n\n    public RabbitMQ(String exchange, String queue){\n        this.exchange = exchange;\n        this.queue = queue;\n    }\n\n    @Override\n    public void publish(String data) {\n        rabbit.basicPublish(exchange, queue, data.getBytes());\n    }\n\n    @Override\n    public String consume() {\n        return rabbit.basicConsume(exchange, queue);\n    }\n\n    @Override\n    public String RPCSubmit(String data) {\n        return rabbit.rpcPublish(exchange, queue, data);\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class RabbitMQ implements IO\u003cString, String\u003e {\n\n    private String exchange;\n    private String queue;\n\n    public RabbitMQ(String exchange, String queue){\n        this.exchange = exchange;\n        this.queue = queue;\n    }\n\n    @Override\n    public void publish(String data) {\n        rabbit.basicPublish(exchange, queue, data.getBytes());\n    }\n\n    @Override\n    public String consume() {\n        return rabbit.basicConsume(exchange, queue);\n    }\n\n    @Override\n    public String RPCSubmit(String data) {\n        return rabbit.rpcPublish(exchange, queue, data);\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "624db07e-ea2d-4c0c-bb78-98878ce8ba74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say I want to use this IO interface now as a way to count visits to my website since my last system restart and then be able to display the total number of visits - you can do something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say I want to use this IO interface now as a way to count visits to my website since my last system restart and then be able to display the total number of visits - you can do something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "420de7ce-a8b9-4136-b271-265125b6e9fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.util.concurrent.atomic.AtomicLong;\n\npublic class VisitCounter implements IO\u003cLong, Integer\u003e {\n\n    private static AtomicLong websiteCounter = new AtomicLong(0);\n    \n    @Override\n    public void publish(Integer count) {\n        websiteCounter.addAndGet(count);\n    }\n\n    @Override\n    public Long consume() {\n        return websiteCounter.get();\n    }\n\n    @Override\n    public Long RPCSubmit(Integer count) {\n        return websiteCounter.addAndGet(count);\n    }\n    \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.util.concurrent.atomic.AtomicLong;\n\npublic class VisitCounter implements IO\u003cLong, Integer\u003e {\n\n    private static AtomicLong websiteCounter = new AtomicLong(0);\n    \n    @Override\n    public void publish(Integer count) {\n        websiteCounter.addAndGet(count);\n    }\n\n    @Override\n    public Long consume() {\n        return websiteCounter.get();\n    }\n\n    @Override\n    public Long RPCSubmit(Integer count) {\n        return websiteCounter.addAndGet(count);\n    }\n    \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "7fa2a380-c4cf-476e-9050-b8e7b62f3315",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now let’s use the VisitCounter:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now let’s use the VisitCounter:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "b31d4449-3c52-4af2-a046-a1573194ac4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "VisitCounter counter = new VisitCounter();\n\n// just had 4 visits, yay\ncounter.publish(4);\n// just had another visit, yay\ncounter.publish(1);\n\n// get data for stats counter\nSystem.out.println(counter.consume()); // prints 5\n\n// show data for stats counter page, but include that as a page view\nSystem.out.println(counter.RPCSubmit(1)); // prints 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "VisitCounter counter = new VisitCounter();\n\n// just had 4 visits, yay\ncounter.publish(4);\n// just had another visit, yay\ncounter.publish(1);\n\n// get data for stats counter\nSystem.out.println(counter.consume()); // prints 5\n\n// show data for stats counter page, but include that as a page view\nSystem.out.println(counter.RPCSubmit(1)); // prints 6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "7933099d-5b25-4691-b332-0714ef87d587",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "8b706829-b588-41a4-bca2-3c0fd4a9ab6e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When implementing multiple interfaces, you can’t implement the same interface twice. That also applies to generic interfaces. Thus, the following code is invalid, and will result in a compile error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When implementing multiple interfaces, you can’t implement the same interface twice. That also applies to generic interfaces. Thus, the following code is invalid, and will result in a compile error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460200088,
        "id": "ab8c0cf0-f92a-4bab-b203-35adac8bce1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460200088,
        "parent_id": "1090eb7a-6746-487f-9651-9d010e6c33b7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "interface Printer\u003cT\u003e {\n    void print(T value);\n}\n\n// Invalid!\nclass SystemPrinter implements Printer\u003cDouble\u003e, Printer\u003cInteger\u003e {\n    @Override public void print(Double d){ System.out.println(\"Decimal: \" + d); }\n    @Override public void print(Integer i){ System.out.println(\"Discrete: \" + i); }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "interface Printer\u003cT\u003e {\n    void print(T value);\n}\n\n// Invalid!\nclass SystemPrinter implements Printer\u003cDouble\u003e, Printer\u003cInteger\u003e {\n    @Override public void print(Double d){ System.out.println(\"Decimal: \" + d); }\n    @Override public void print(Integer i){ System.out.println(\"Discrete: \" + i); }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "070 Using Interfaces with Generics"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}