{
  "ID": "613305fd-dc7d-4b85-86d4-4adff4af6394",
  "Root": {
    "alive": true,
    "content": [
      "0c40e213-88a0-4f72-83b1-34991801bc8c",
      "8817c7c5-4ab0-4892-90ee-b153fced1991",
      "ca5afbd5-d40c-41f0-8e33-1478dde898d5",
      "e58f72d4-ee4d-4504-a44d-d91dbef099f4",
      "62d61d72-8697-42b1-ad0d-b71c37ded949",
      "1067c4ce-a8b8-49ca-ab74-59e09a91494f",
      "9cee7c8e-df56-4b97-b45c-3ac2fb70fb46",
      "047854ba-f679-4d14-9e0b-d36c15203619",
      "34fd6d31-57e5-4d29-abb2-4cb8dca2e0f1",
      "d9ca5567-c220-4227-8568-86dffb03883a",
      "45edc57b-234e-4a1a-816e-0db02d89a8a9",
      "4f560b49-06d6-40c5-894e-58a849c364e0",
      "874e7f2e-209c-4db8-8334-de9519581eda",
      "18aab3dd-ac3e-4de1-b42b-11020d857f6d",
      "65172302-32df-42df-8d64-f670a9fc90b3",
      "04ffe7d6-5c04-4186-af07-81ad91644799",
      "8dfa286c-adfb-4cdb-bf1a-6ed9c4a27ae7",
      "74aa9180-5344-4715-b68a-94e8b37fed19",
      "8d133f52-0284-45f2-b092-626881d7b3f0",
      "85375ba5-6426-45e2-af65-0293f3ef79d4",
      "fb4559d7-1a17-405c-9008-b83de9ae6d7c",
      "9d3d3325-a265-4a0e-ab63-1bc71f751f36",
      "22f795ff-5b55-4505-bec3-e4ed2ec47c1f",
      "6d9359a9-ee30-4a18-ae19-0c9e8c1f15cb",
      "0e420646-ca7f-4869-9181-a538d7e61528",
      "b568fe24-44ef-4845-a913-966593ce263e",
      "ff648216-d22a-4686-8dee-bebc5148e359",
      "e4d9e8a2-595a-4b1c-ad6b-4c0fce3d8c0e",
      "3ece7b6a-1417-44ea-bef4-93667b0ddd2f",
      "94d0b1ca-f3cc-4391-aae2-03441b2e91ab",
      "f8ed729a-0d56-4b41-b833-407e54f3df8e",
      "8b8ea230-30a8-4afc-952f-f8328573800a",
      "7ce3c587-6abf-4c9e-abdd-b048699e8f98",
      "db8c0ac4-451e-4f3d-94fe-f214da857678",
      "625b8576-71a4-4314-bb11-315ca24139be",
      "c2d77b7b-bec2-4925-baae-2464c9dd8370",
      "56acef1a-5ec6-4330-9921-a931b26112f0",
      "d7c794b8-2ba6-4653-8083-c0405cbd022b",
      "b4407724-5787-4b39-a1e4-ae648c60fc6c",
      "d39d1d55-0658-40f3-a021-f84fe6e77f54",
      "ce36f54a-0396-4972-88af-cbee7d0e68bd",
      "fca27825-50cd-4770-8f9f-955a54232749"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460098280,
    "id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460098280,
    "parent_id": "3e5f6441-fbb7-4864-8927-1c1c812bd8c7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Using Streams"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098261,
        "id": "0c40e213-88a0-4f72-83b1-34991801bc8c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098261,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"
                ]
              ]
            ],
            [
              " is a sequence of elements upon which sequential and parallel aggregate operations can be performed. Any given "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can potentially have an unlimited amount of data flowing through it. As a result, data received from a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is processed individually as it arrives, as opposed to performing batch processing on the data altogether. When combined with "
            ],
            [
              "lambda expressions",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/java/91/lambda-expressions"
                ]
              ]
            ],
            [
              " they provide a concise way to perform operations on sequences of data using a functional approach."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"
          },
          {
            "Text": " is a sequence of elements upon which sequential and parallel aggregate operations can be performed. Any given "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " can potentially have an unlimited amount of data flowing through it. As a result, data received from a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " is processed individually as it arrives, as opposed to performing batch processing on the data altogether. When combined with "
          },
          {
            "Text": "lambda expressions",
            "Link": "https://stackoverflow.com/documentation/java/91/lambda-expressions"
          },
          {
            "Text": " they provide a concise way to perform operations on sequences of data using a functional approach."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098262,
        "id": "8817c7c5-4ab0-4892-90ee-b153fced1991",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098262,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "see it work on Ideone",
              [
                [
                  "a",
                  "https://ideone.com/IUWRdv"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:",
            "AttrFlags": 1
          },
          {
            "Text": " ("
          },
          {
            "Text": "see it work on Ideone",
            "Link": "https://ideone.com/IUWRdv"
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "ca5afbd5-d40c-41f0-8e33-1478dde898d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Stream\u003cString\u003e fruitStream = Stream.of(\"apple\", \"banana\", \"pear\", \"kiwi\", \"orange\");\n\nfruitStream.filter(s -\u003e s.contains(\"a\"))\n           .map(String::toUpperCase)\n           .sorted()\n           .forEach(System.out::println);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Stream\u003cString\u003e fruitStream = Stream.of(\"apple\", \"banana\", \"pear\", \"kiwi\", \"orange\");\n\nfruitStream.filter(s -\u003e s.contains(\"a\"))\n           .map(String::toUpperCase)\n           .sorted()\n           .forEach(System.out::println);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "e58f72d4-ee4d-4504-a44d-d91dbef099f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "62d61d72-8697-42b1-ad0d-b71c37ded949",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "APPLE"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "APPLE"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "1067c4ce-a8b8-49ca-ab74-59e09a91494f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "BANANA"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "BANANA"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "9cee7c8e-df56-4b97-b45c-3ac2fb70fb46",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ORANGE"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "ORANGE"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "047854ba-f679-4d14-9e0b-d36c15203619",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PEAR"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PEAR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098263,
        "id": "34fd6d31-57e5-4d29-abb2-4cb8dca2e0f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098263,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operations performed by the above code can be summarized as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operations performed by the above code can be summarized as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098265,
        "id": "d9ca5567-c220-4227-8568-86dffb03883a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098265,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Create a "
            ],
            [
              "Stream\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " containing a sequenced ordered "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"
                ]
              ]
            ],
            [
              " of fruit "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " elements using the static factory method "
            ],
            [
              "Stream.of(values)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#of-T...-"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Create a "
          },
          {
            "Text": "Stream\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " containing a sequenced ordered "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"
          },
          {
            "Text": " of fruit "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " elements using the static factory method "
          },
          {
            "Text": "Stream.of(values)",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#of-T...-"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098266,
        "id": "45edc57b-234e-4a1a-816e-0db02d89a8a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098266,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "filter()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#filter-java.util.function.Predicate-"
                ]
              ]
            ],
            [
              " operation retains only elements that match a given predicate (the elements that when tested by the predicate return true). In this case, it retains the elements containing an "
            ],
            [
              "\"a\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The predicate is given as a "
            ],
            [
              "lambda expression",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/java/91/lambda-expressions"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "filter()",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#filter-java.util.function.Predicate-"
          },
          {
            "Text": " operation retains only elements that match a given predicate (the elements that when tested by the predicate return true). In this case, it retains the elements containing an "
          },
          {
            "Text": "\"a\"",
            "AttrFlags": 2
          },
          {
            "Text": ". The predicate is given as a "
          },
          {
            "Text": "lambda expression",
            "Link": "https://stackoverflow.com/documentation/java/91/lambda-expressions"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098268,
        "id": "4f560b49-06d6-40c5-894e-58a849c364e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098268,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "map()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#map-java.util.function.Function-"
                ]
              ]
            ],
            [
              " operation transforms each element using a given function, called a mapper. In this case, each fruit "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is mapped to its uppercase "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " version using the "
            ],
            [
              "method-reference",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "String::toUppercase",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toUpperCase--"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "map()",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#map-java.util.function.Function-"
          },
          {
            "Text": " operation transforms each element using a given function, called a mapper. In this case, each fruit "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " is mapped to its uppercase "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " version using the "
          },
          {
            "Text": "method-reference",
            "Link": "https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html"
          },
          {
            "Text": " "
          },
          {
            "Text": "String::toUppercase",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toUpperCase--"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098268,
        "id": "874e7f2e-209c-4db8-8334-de9519581eda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098268,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the map() operation will return a stream with a different generic type if the mapping function returns a type different to its input parameter. For example on a Stream\u003cString\u003e calling .map(String::isEmpty) returns a Stream\u003cBoolean\u003e"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the map() operation will return a stream with a different generic type if the mapping function returns a type different to its input parameter. For example on a Stream\u003cString\u003e calling .map(String::isEmpty) returns a Stream\u003cBoolean\u003e"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098269,
        "id": "18aab3dd-ac3e-4de1-b42b-11020d857f6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098269,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "sorted()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted--"
                ]
              ]
            ],
            [
              " operation sorts the elements of the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " according to their natural ordering (lexicographically, in the case of "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "sorted()",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted--"
          },
          {
            "Text": " operation sorts the elements of the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " according to their natural ordering (lexicographically, in the case of "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "65172302-32df-42df-8d64-f670a9fc90b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, the "
            ],
            [
              "forEach(action)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEach-java.util.function.Consumer-"
                ]
              ]
            ],
            [
              " operation performs an action which acts on each element of the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", passing it to a "
            ],
            [
              "Consumer",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-"
                ]
              ]
            ],
            [
              ". In the example, each element is simply being printed to the console. This operation is a terminal operation, thus making it impossible to operate on it again."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, the "
          },
          {
            "Text": "forEach(action)",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEach-java.util.function.Consumer-"
          },
          {
            "Text": " operation performs an action which acts on each element of the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": ", passing it to a "
          },
          {
            "Text": "Consumer",
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-"
          },
          {
            "Text": ". In the example, each element is simply being printed to the console. This operation is a terminal operation, thus making it impossible to operate on it again."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "04ffe7d6-5c04-4186-af07-81ad91644799",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that operations defined on the Stream are performed because of the terminal operation. Without a terminal operation, the stream is not processed. Streams can not be reused. Once a terminal operation is called, the Stream object becomes unusable."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that operations defined on the Stream are performed because of the terminal operation. Without a terminal operation, the stream is not processed. Streams can not be reused. Once a terminal operation is called, the Stream object becomes unusable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "8dfa286c-adfb-4cdb-bf1a-6ed9c4a27ae7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/6p8aM.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/6p8aM.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2F6p8aM.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "74aa9180-5344-4715-b68a-94e8b37fed19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operations (as seen above) are chained together to form what can be seen as a query on the data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operations (as seen above) are chained together to form what can be seen as a query on the data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "8d133f52-0284-45f2-b092-626881d7b3f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "85375ba5-6426-45e2-af65-0293f3ef79d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Closing Streams"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Closing Streams"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098270,
        "id": "fb4559d7-1a17-405c-9008-b83de9ae6d7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098270,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that a Stream generally does not have to be closed. It is only required to close streams that operate on IO channels. Most Stream types don’t operate on resources and therefore don’t require closing."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that a Stream generally does not have to be closed. It is only required to close streams that operate on IO channels. Most Stream types don’t operate on resources and therefore don’t require closing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098271,
        "id": "9d3d3325-a265-4a0e-ab63-1bc71f751f36",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098271,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface extends "
            ],
            [
              "AutoCloseable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html"
                ]
              ]
            ],
            [
              ". Streams can be closed by calling the "
            ],
            [
              "close",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html#close--"
                ]
              ]
            ],
            [
              " method or by using try-with-resource statements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " interface extends "
          },
          {
            "Text": "AutoCloseable",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html"
          },
          {
            "Text": ". Streams can be closed by calling the "
          },
          {
            "Text": "close",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html#close--"
          },
          {
            "Text": " method or by using try-with-resource statements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098271,
        "id": "22f795ff-5b55-4505-bec3-e4ed2ec47c1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098271,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example use case where a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should be closed is when you create a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of lines from a file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example use case where a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " should be closed is when you create a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " of lines from a file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098272,
        "id": "6d9359a9-ee30-4a18-ae19-0c9e8c1f15cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098272,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "try (Stream\u003cString\u003e lines = Files.lines(Paths.get(\"somePath\"))) {\n    lines.forEach(System.out::println);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "try (Stream\u003cString\u003e lines = Files.lines(Paths.get(\"somePath\"))) {\n    lines.forEach(System.out::println);\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098272,
        "id": "0e420646-ca7f-4869-9181-a538d7e61528",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098272,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " interface also declares the "
            ],
            [
              "Stream.onClose()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#onClose-java.lang.Runnable-"
                ]
              ]
            ],
            [
              " method which allows you to register "
            ],
            [
              "Runnable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html"
                ]
              ]
            ],
            [
              " handlers which will be called when the stream is closed. An example use case is where code which produces a stream needs to know when it is consumed to perform some cleanup."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " interface also declares the "
          },
          {
            "Text": "Stream.onClose()",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#onClose-java.lang.Runnable-"
          },
          {
            "Text": " method which allows you to register "
          },
          {
            "Text": "Runnable",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html"
          },
          {
            "Text": " handlers which will be called when the stream is closed. An example use case is where code which produces a stream needs to know when it is consumed to perform some cleanup."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098273,
        "id": "b568fe24-44ef-4845-a913-966593ce263e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098273,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public Stream\u003cString\u003estreamAndDelete(Path path) throws IOException {\n    return Files.lines(path).onClose(() -\u003e someClass.deletePath(path));\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public Stream\u003cString\u003estreamAndDelete(Path path) throws IOException {\n    return Files.lines(path).onClose(() -\u003e someClass.deletePath(path));\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098273,
        "id": "ff648216-d22a-4686-8dee-bebc5148e359",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098273,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The run handler will only execute if the "
            ],
            [
              "close()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method gets called, either explicitly or implicitly by a try-with-resources statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The run handler will only execute if the "
          },
          {
            "Text": "close()",
            "AttrFlags": 2
          },
          {
            "Text": " method gets called, either explicitly or implicitly by a try-with-resources statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098273,
        "id": "e4d9e8a2-595a-4b1c-ad6b-4c0fce3d8c0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098273,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098273,
        "id": "3ece7b6a-1417-44ea-bef4-93667b0ddd2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098273,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Processing Order"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Processing Order"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098274,
        "id": "94d0b1ca-f3cc-4391-aae2-03441b2e91ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098274,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object’s processing can be sequential or "
            ],
            [
              "parallel",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/88/streams/2785/parallel-stream#t=201607281158351104612"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " object’s processing can be sequential or "
          },
          {
            "Text": "parallel",
            "Link": "http://stackoverflow.com/documentation/java/88/streams/2785/parallel-stream#t=201607281158351104612"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098277,
        "id": "f8ed729a-0d56-4b41-b833-407e54f3df8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098277,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a "
            ],
            [
              "sequential",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " mode, the elements are processed in the order of the source of the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If the "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is ordered (such as a "
            ],
            [
              "SortedMap",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html"
                ]
              ]
            ],
            [
              " implementation or a "
            ],
            [
              "List",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
                ]
              ]
            ],
            [
              ") the processing is guaranteed to match the ordering of the source. In other cases, however, care should be taken not to depend on the ordering (see: "
            ],
            [
              "is the Java ",
              [
                [
                  "a",
                  "http://stackoverflow.com/q/1882762/1667004"
                ]
              ]
            ],
            [
              "HashMap",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/q/1882762/1667004"
                ]
              ]
            ],
            [
              " ",
              [
                [
                  "a",
                  "http://stackoverflow.com/q/1882762/1667004"
                ]
              ]
            ],
            [
              "keySet()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/q/1882762/1667004"
                ]
              ]
            ],
            [
              " iteration order consistent?",
              [
                [
                  "a",
                  "http://stackoverflow.com/q/1882762/1667004"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a "
          },
          {
            "Text": "sequential",
            "AttrFlags": 1
          },
          {
            "Text": " mode, the elements are processed in the order of the source of the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": ". If the "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " is ordered (such as a "
          },
          {
            "Text": "SortedMap",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html"
          },
          {
            "Text": " implementation or a "
          },
          {
            "Text": "List",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/java/util/List.html"
          },
          {
            "Text": ") the processing is guaranteed to match the ordering of the source. In other cases, however, care should be taken not to depend on the ordering (see: "
          },
          {
            "Text": "is the Java ",
            "Link": "http://stackoverflow.com/q/1882762/1667004"
          },
          {
            "Text": "HashMap",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/q/1882762/1667004"
          },
          {
            "Text": " ",
            "Link": "http://stackoverflow.com/q/1882762/1667004"
          },
          {
            "Text": "keySet()",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/q/1882762/1667004"
          },
          {
            "Text": " iteration order consistent?",
            "Link": "http://stackoverflow.com/q/1882762/1667004"
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098277,
        "id": "8b8ea230-30a8-4afc-952f-f8328573800a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098277,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098277,
        "id": "7ce3c587-6abf-4c9e-abdd-b048699e8f98",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098277,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "List\u003cInteger\u003e integerList = Arrays.asList(0, 1, 2, 3, 42); \n\n// sequential \nlong howManyOddNumbers = integerList.stream()\n                                    .filter(e -\u003e (e % 2) == 1)\n                                    .count(); \n\nSystem.out.println(howManyOddNumbers); // Output: 2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "List\u003cInteger\u003e integerList = Arrays.asList(0, 1, 2, 3, 42); \n\n// sequential \nlong howManyOddNumbers = integerList.stream()\n                                    .filter(e -\u003e (e % 2) == 1)\n                                    .count(); \n\nSystem.out.println(howManyOddNumbers); // Output: 2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098277,
        "id": "db8c0ac4-451e-4f3d-94fe-f214da857678",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098277,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live on Ideone",
              [
                [
                  "a",
                  "https://ideone.com/FuMz1c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live on Ideone",
            "Link": "https://ideone.com/FuMz1c"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098278,
        "id": "625b8576-71a4-4314-bb11-315ca24139be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098278,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parallel",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " mode allows the use of multiple threads on multiple cores but there is no guarantee of the order in which elements are processed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parallel",
            "AttrFlags": 1
          },
          {
            "Text": " mode allows the use of multiple threads on multiple cores but there is no guarantee of the order in which elements are processed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098278,
        "id": "c2d77b7b-bec2-4925-baae-2464c9dd8370",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098278,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If multiple methods are called on a sequential "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", not every method has to be invoked. For example, if a "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is filtered and the number of elements is reduced to one, a subsequent call to a method such as "
            ],
            [
              "sort",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will not occur. This can increase the performance of a sequential "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " — an optimization that is not possible with a parallel "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If multiple methods are called on a sequential "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": ", not every method has to be invoked. For example, if a "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " is filtered and the number of elements is reduced to one, a subsequent call to a method such as "
          },
          {
            "Text": "sort",
            "AttrFlags": 2
          },
          {
            "Text": " will not occur. This can increase the performance of a sequential "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " — an optimization that is not possible with a parallel "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098278,
        "id": "56acef1a-5ec6-4330-9921-a931b26112f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098278,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098278,
        "id": "d7c794b8-2ba6-4653-8083-c0405cbd022b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098278,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// parallel\nlong howManyOddNumbersParallel = integerList.parallelStream()\n                                            .filter(e -\u003e (e % 2) == 1)\n                                            .count();\n\nSystem.out.println(howManyOddNumbersParallel); // Output: 2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// parallel\nlong howManyOddNumbersParallel = integerList.parallelStream()\n                                            .filter(e -\u003e (e % 2) == 1)\n                                            .count();\n\nSystem.out.println(howManyOddNumbersParallel); // Output: 2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098279,
        "id": "b4407724-5787-4b39-a1e4-ae648c60fc6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098279,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live on Ideone",
              [
                [
                  "a",
                  "https://ideone.com/FuMz1c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live on Ideone",
            "Link": "https://ideone.com/FuMz1c"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098279,
        "id": "d39d1d55-0658-40f3-a021-f84fe6e77f54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098279,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098279,
        "id": "ce36f54a-0396-4972-88af-cbee7d0e68bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098279,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Differences from Containers (or "
            ],
            [
              "Collections",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/java/90/collections"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Differences from Containers (or "
          },
          {
            "Text": "Collections",
            "Link": "https://stackoverflow.com/documentation/java/90/collections"
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460098279,
        "id": "fca27825-50cd-4770-8f9f-955a54232749",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460098279,
        "parent_id": "613305fd-dc7d-4b85-86d4-4adff4af6394",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While some actions can be performed on both Containers and Streams, they ultimately serve different purposes and support different operations. Containers are more focused on how the elements are stored and how those elements can be accessed efficiently. A "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", on the other hand, doesn’t provide direct access and manipulation to its elements; it is more dedicated to the group of objects as a collective entity and performing operations on that entity as a whole. "
            ],
            [
              "Stream",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Collection",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are separate high-level abstractions for these differing purposes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While some actions can be performed on both Containers and Streams, they ultimately serve different purposes and support different operations. Containers are more focused on how the elements are stored and how those elements can be accessed efficiently. A "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": ", on the other hand, doesn’t provide direct access and manipulation to its elements; it is more dedicated to the group of objects as a collective entity and performing operations on that entity as a whole. "
          },
          {
            "Text": "Stream",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Collection",
            "AttrFlags": 2
          },
          {
            "Text": " are separate high-level abstractions for these differing purposes."
          }
        ]
      }
    ],
    "title": "010 Using Streams"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}