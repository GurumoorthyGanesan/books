{
  "ID": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
  "Root": {
    "alive": true,
    "content": [
      "7cf31768-21e5-4761-b932-a007930a487f",
      "749355c5-0b38-4bd2-b1f1-b8f78cd3932a",
      "686ef23f-5499-4931-bd5a-1b5f8880164c",
      "f103fc04-a365-4c27-82e7-30507f3ea0a3",
      "4a94292a-7549-4d60-bd5a-341dc02abb38",
      "a39185c3-d123-43d2-964d-44430f49987f",
      "f06ebf8d-6311-4b28-8c05-cf85024ac4e5",
      "107f40ce-5b8c-44c6-af1f-0a3fd24345a8",
      "56fce36a-2a1b-43d2-8136-0a3ebf340c9e",
      "d065617e-6a66-4c4e-89e5-61dc7e89c5f5",
      "d1d55b16-34df-49e2-931a-28d3f7cff59d",
      "746f26fe-44cd-4586-b1bf-00a651bec9dd",
      "c60cb37b-d80b-4ec9-83bb-309e86d27fd2",
      "32702785-4503-48bc-9894-30d548e930a5",
      "0c46cb1a-de99-45bf-bfe9-6ffa12c43a2b",
      "fcbf3997-9b9c-4e3e-88dd-de517af14662",
      "4d85bd14-c86b-4612-9054-6e2485a07b5b",
      "e95edcd2-a762-4f90-a412-834fb73dc2f7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460539055,
    "id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460539055,
    "parent_id": "c5f4838e-8ea8-4be5-9969-41936c9db840",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Basic Client and Server Communication using a Socket"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539050,
        "id": "7cf31768-21e5-4761-b932-a007930a487f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539050,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Server: Start, and wait for incoming connections"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Server: Start, and wait for incoming connections"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "749355c5-0b38-4bd2-b1f1-b8f78cd3932a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//Open a listening \"ServerSocket\" on port 1234.\nServerSocket serverSocket = new ServerSocket(1234); \n\nwhile (true) {\n    // Wait for a client connection.\n    // Once a client connected, we get a \"Socket\" object\n    // that can be used to send and receive messages to/from the newly \n    // connected client\n    Socket clientSocket = serverSocket.accept();            \n    \n    // Here we'll add the code to handle one specific client.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//Open a listening \"ServerSocket\" on port 1234.\nServerSocket serverSocket = new ServerSocket(1234); \n\nwhile (true) {\n    // Wait for a client connection.\n    // Once a client connected, we get a \"Socket\" object\n    // that can be used to send and receive messages to/from the newly \n    // connected client\n    Socket clientSocket = serverSocket.accept();            \n    \n    // Here we'll add the code to handle one specific client.\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "686ef23f-5499-4931-bd5a-1b5f8880164c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Server: Handling clients"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Server: Handling clients"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "f103fc04-a365-4c27-82e7-30507f3ea0a3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll handle each client in a separate thread so multiple clients could interact with the server at the same time. This technique works fine as long as the number of clients is low (\u003c\u003c 1000 clients, depending on the OS architecture and the expected load of each thread)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll handle each client in a separate thread so multiple clients could interact with the server at the same time. This technique works fine as long as the number of clients is low (\u003c\u003c 1000 clients, depending on the OS architecture and the expected load of each thread)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "4a94292a-7549-4d60-bd5a-341dc02abb38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "new Thread(() -\u003e {\n    // Get the socket's InputStream, to read bytes from the socket\n    InputStream in = clientSocket.getInputStream();\n    // wrap the InputStream in a reader so you can read a String instead of bytes\n    BufferedReader reader = new BufferedReader(\n            new InputStreamReader(in, StandardCharsets.UTF_8));\n    // Read text from the socket and print line by line\n    String line;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n    }).start();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "new Thread(() -\u003e {\n    // Get the socket's InputStream, to read bytes from the socket\n    InputStream in = clientSocket.getInputStream();\n    // wrap the InputStream in a reader so you can read a String instead of bytes\n    BufferedReader reader = new BufferedReader(\n            new InputStreamReader(in, StandardCharsets.UTF_8));\n    // Read text from the socket and print line by line\n    String line;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n    }).start();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "a39185c3-d123-43d2-964d-44430f49987f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Client: Connect to the server and send a message"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Client: Connect to the server and send a message"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "f06ebf8d-6311-4b28-8c05-cf85024ac4e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// 127.0.0.1 is the address of the server (this is the localhost address; i.e.\n// the address of our own machine)\n// 1234 is the port that the server will be listening on\nSocket socket = new Socket(\"127.0.0.1\", 1234);\n\n// Write a string into the socket, and flush the buffer\nOutputStream outStream = socket.getOutputStream();\nPrintWriter writer = new PrintWriter(\n        new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\nwriter.println(\"Hello world!\");\nwriter.flush();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// 127.0.0.1 is the address of the server (this is the localhost address; i.e.\n// the address of our own machine)\n// 1234 is the port that the server will be listening on\nSocket socket = new Socket(\"127.0.0.1\", 1234);\n\n// Write a string into the socket, and flush the buffer\nOutputStream outStream = socket.getOutputStream();\nPrintWriter writer = new PrintWriter(\n        new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\nwriter.println(\"Hello world!\");\nwriter.flush();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539053,
        "id": "107f40ce-5b8c-44c6-af1f-0a3fd24345a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539053,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Closing Sockets and Handling Exceptions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Closing Sockets and Handling Exceptions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539054,
        "id": "56fce36a-2a1b-43d2-8136-0a3ebf340c9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539054,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above examples left out some things to make them easier to read."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above examples left out some things to make them easier to read."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539054,
        "id": "d065617e-6a66-4c4e-89e5-61dc7e89c5f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539054,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Just like files and other external resources, it’s important we tell the OS when we’re done with them. When we’re done with a socket, call "
            ],
            [
              "socket.close()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to properly close it."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Just like files and other external resources, it’s important we tell the OS when we’re done with them. When we’re done with a socket, call "
          },
          {
            "Text": "socket.close()",
            "AttrFlags": 2
          },
          {
            "Text": " to properly close it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539054,
        "id": "d1d55b16-34df-49e2-931a-28d3f7cff59d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539054,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sockets handle I/O (Input/Output) operations that depend on a variety of external factors. For example what if the other side suddenly disconnects? What if there are network error? These things are beyond our control. This is why many socket operations might throw exceptions, especially "
            ],
            [
              "IOException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sockets handle I/O (Input/Output) operations that depend on a variety of external factors. For example what if the other side suddenly disconnects? What if there are network error? These things are beyond our control. This is why many socket operations might throw exceptions, especially "
          },
          {
            "Text": "IOException",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539054,
        "id": "746f26fe-44cd-4586-b1bf-00a651bec9dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539054,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A more complete code for the client would therefore be something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A more complete code for the client would therefore be something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539055,
        "id": "c60cb37b-d80b-4ec9-83bb-309e86d27fd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539055,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// \"try-with-resources\" will close the socket once we leave its scope\n try (Socket socket = new Socket(\"127.0.0.1\", 1234)) {\n     OutputStream outStream = socket.getOutputStream();\n     PrintWriter writer = new PrintWriter(\n             new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\n     writer.println(\"Hello world!\");\n     writer.flush();\n } catch (IOException e) {\n     //Handle the error\n }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// \"try-with-resources\" will close the socket once we leave its scope\n try (Socket socket = new Socket(\"127.0.0.1\", 1234)) {\n     OutputStream outStream = socket.getOutputStream();\n     PrintWriter writer = new PrintWriter(\n             new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\n     writer.println(\"Hello world!\");\n     writer.flush();\n } catch (IOException e) {\n     //Handle the error\n }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539055,
        "id": "32702785-4503-48bc-9894-30d548e930a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539055,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basic Server and Client - complete examples"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basic Server and Client - complete examples"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539055,
        "id": "0c46cb1a-de99-45bf-bfe9-6ffa12c43a2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539055,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Server:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Server:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539055,
        "id": "fcbf3997-9b9c-4e3e-88dd-de517af14662",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539055,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class Server {\n    public static void main(String args[]) {\n        try (ServerSocket serverSocket = new ServerSocket(1234)) {\n            while (true) {\n                // Wait for a client connection.\n                Socket clientSocket = serverSocket.accept();\n                \n                // Create and start a thread to handle the new client\n                new Thread(() -\u003e {\n                    try {\n                        // Get the socket's InputStream, to read bytes \n                        // from the socket\n                        InputStream in = clientSocket.getInputStream();\n                        // wrap the InputStream in a reader so you can \n                        // read a String instead of bytes\n                        BufferedReader reader = new BufferedReader(\n                             new InputStreamReader(in, StandardCharsets.UTF_8));\n                        // Read from the socket and print line by line\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            System.out.println(line);\n                        }\n                    }\n                    catch (IOException e) {\n                        e.printStackTrace();\n                    } finally {\n                        // This finally block ensures the socket is closed.\n                        // A try-with-resources block cannot be used because\n                        // the socket is passed into a thread, so it isn't \n                        // created and closed in the same block\n                        try {\n                            clientSocket.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class Server {\n    public static void main(String args[]) {\n        try (ServerSocket serverSocket = new ServerSocket(1234)) {\n            while (true) {\n                // Wait for a client connection.\n                Socket clientSocket = serverSocket.accept();\n                \n                // Create and start a thread to handle the new client\n                new Thread(() -\u003e {\n                    try {\n                        // Get the socket's InputStream, to read bytes \n                        // from the socket\n                        InputStream in = clientSocket.getInputStream();\n                        // wrap the InputStream in a reader so you can \n                        // read a String instead of bytes\n                        BufferedReader reader = new BufferedReader(\n                             new InputStreamReader(in, StandardCharsets.UTF_8));\n                        // Read from the socket and print line by line\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            System.out.println(line);\n                        }\n                    }\n                    catch (IOException e) {\n                        e.printStackTrace();\n                    } finally {\n                        // This finally block ensures the socket is closed.\n                        // A try-with-resources block cannot be used because\n                        // the socket is passed into a thread, so it isn't \n                        // created and closed in the same block\n                        try {\n                            clientSocket.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539055,
        "id": "4d85bd14-c86b-4612-9054-6e2485a07b5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539055,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Client:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Client:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460539055,
        "id": "e95edcd2-a762-4f90-a412-834fb73dc2f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460539055,
        "parent_id": "a6984647-ede2-48c2-b4bd-dea1590d5baa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class Client {\n    public static void main(String args[]) {\n        try (Socket socket = new Socket(\"127.0.0.1\", 1234)) {\n            // We'll reach this code once we've connected to the server\n            \n            // Write a string into the socket, and flush the buffer\n            OutputStream outStream = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(\n                    new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\n            writer.println(\"Hello world!\");\n            writer.flush();\n        } catch (IOException e) {\n            // Exception should be handled.\n            e.printStackTrace();\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class Client {\n    public static void main(String args[]) {\n        try (Socket socket = new Socket(\"127.0.0.1\", 1234)) {\n            // We'll reach this code once we've connected to the server\n            \n            // Write a string into the socket, and flush the buffer\n            OutputStream outStream = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(\n                    new OutputStreamWriter(outStream, StandardCharsets.UTF_8));\n            writer.println(\"Hello world!\");\n            writer.flush();\n        } catch (IOException e) {\n            // Exception should be handled.\n            e.printStackTrace();\n        }\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Basic Client and Server Communication using a Socket"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}