{
  "ID": "05d18cf9-cce6-438d-a995-232949824868",
  "Root": {
    "alive": true,
    "content": [
      "3fa0a962-29ed-4dba-bcd8-72759f0a0955",
      "7ceda54a-fd65-4a43-9f3c-88b4bc538684",
      "f327c841-2e16-4833-a595-9db6394ac7e4",
      "ffbb9017-4a5c-4009-ac1b-bf6c8e9f4553",
      "3bb582c8-7459-47ff-b85e-298bfb189529"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460441027,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "05d18cf9-cce6-438d-a995-232949824868",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551745154227,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using ThreadLocal"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460441026,
        "id": "3fa0a962-29ed-4dba-bcd8-72759f0a0955",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460441026,
        "parent_id": "05d18cf9-cce6-438d-a995-232949824868",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A useful tool in Java Concurrency is "
            ],
            [
              "ThreadLocal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – this allows you to have a variable that will be unique to a given thread. Thus, if the same code runs in different threads, these executions will not share the value, but instead each thread has its own variable that is "
            ],
            [
              "local to the thread",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A useful tool in Java Concurrency is "
          },
          {
            "Text": "ThreadLocal",
            "AttrFlags": 2
          },
          {
            "Text": " – this allows you to have a variable that will be unique to a given thread. Thus, if the same code runs in different threads, these executions will not share the value, but instead each thread has its own variable that is "
          },
          {
            "Text": "local to the thread",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460441026,
        "id": "7ceda54a-fd65-4a43-9f3c-88b4bc538684",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460441026,
        "parent_id": "05d18cf9-cce6-438d-a995-232949824868",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, this is frequently used to establish the context (such as authorization information) of handling a request in a servlet. You might do something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, this is frequently used to establish the context (such as authorization information) of handling a request in a servlet. You might do something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460441026,
        "id": "f327c841-2e16-4833-a595-9db6394ac7e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460441026,
        "parent_id": "05d18cf9-cce6-438d-a995-232949824868",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "private static final ThreadLocal\u003cMyUserContext\u003e contexts = new ThreadLocal\u003c\u003e();\n\npublic static MyUserContext getContext() {\n    return contexts.get(); // get returns the variable unique to this thread\n}\n\npublic void doGet(...) {\n    MyUserContext context = magicGetContextFromRequest(request); \n    contexts.put(context); // save that context to our thread-local - other threads\n                           // making this call don't overwrite ours\n    try {\n        // business logic\n    } finally {\n        contexts.remove(); // 'ensure' removal of thread-local variable\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "private static final ThreadLocal\u003cMyUserContext\u003e contexts = new ThreadLocal\u003c\u003e();\n\npublic static MyUserContext getContext() {\n    return contexts.get(); // get returns the variable unique to this thread\n}\n\npublic void doGet(...) {\n    MyUserContext context = magicGetContextFromRequest(request); \n    contexts.put(context); // save that context to our thread-local - other threads\n                           // making this call don't overwrite ours\n    try {\n        // business logic\n    } finally {\n        contexts.remove(); // 'ensure' removal of thread-local variable\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460441027,
        "id": "ffbb9017-4a5c-4009-ac1b-bf6c8e9f4553",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460441027,
        "parent_id": "05d18cf9-cce6-438d-a995-232949824868",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, instead of passing "
            ],
            [
              "MyUserContext",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into every single method, you can instead use "
            ],
            [
              "MyServlet.getContext()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where you need it. Now of course, this does introduce a variable that needs to be documented, but it’s thread-safe, which eliminates a lot of the downsides to using such a highly scoped variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, instead of passing "
          },
          {
            "Text": "MyUserContext",
            "AttrFlags": 2
          },
          {
            "Text": " into every single method, you can instead use "
          },
          {
            "Text": "MyServlet.getContext()",
            "AttrFlags": 2
          },
          {
            "Text": " where you need it. Now of course, this does introduce a variable that needs to be documented, but it’s thread-safe, which eliminates a lot of the downsides to using such a highly scoped variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460441027,
        "id": "3bb582c8-7459-47ff-b85e-298bfb189529",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460441027,
        "parent_id": "05d18cf9-cce6-438d-a995-232949824868",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The key advantage here is that every thread has its own thread local variable in that "
            ],
            [
              "contexts",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " container. As long as you use it from a defined entry point (like demanding that each servlet maintains its context, or perhaps by adding a servlet filter) you can rely on this context being there when you need it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The key advantage here is that every thread has its own thread local variable in that "
          },
          {
            "Text": "contexts",
            "AttrFlags": 2
          },
          {
            "Text": " container. As long as you use it from a defined entry point (like demanding that each servlet maintains its context, or perhaps by adding a servlet filter) you can rely on this context being there when you need it."
          }
        ]
      }
    ],
    "title": "Using ThreadLocal",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}