{
  "ID": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
  "Root": {
    "alive": true,
    "content": [
      "fc0e3d0a-254e-48d2-a520-a6678179f574",
      "4d03da2d-4cf4-426f-96e1-03932d3daa64",
      "078f51b0-71b7-4c44-a641-5458fcad8e09",
      "e25ff295-8a14-4662-943c-dd869ce48d0d",
      "25a33205-3980-40f3-b413-857ef44531f0",
      "f690cf12-96c6-44d3-a3af-77c6dde81cc6",
      "c6e30721-72cf-48c5-b52d-d8d2c9f81160",
      "489e6dc5-882f-4c2b-8d1e-146abe282f6f",
      "34ac3dbf-c927-48e3-ab2b-d3db16e5a6cc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460170169,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551751765732,
    "parent_id": "eaad0c1d-9ecf-4d2a-b640-d2df4debfaf8",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Binding generic parameter to more than 1 type"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170165,
        "id": "fc0e3d0a-254e-48d2-a520-a6678179f574",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170165,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generic parameters can also be bound to more than one type using the "
            ],
            [
              "T extends Type1 \u0026 Type2 \u0026 ...",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generic parameters can also be bound to more than one type using the "
          },
          {
            "Text": "T extends Type1 \u0026 Type2 \u0026 ...",
            "AttrFlags": 2
          },
          {
            "Text": " syntax."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170168,
        "id": "4d03da2d-4cf4-426f-96e1-03932d3daa64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170168,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say you want to create a class whose Generic type should implement both "
            ],
            [
              "Flushable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Closeable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can write"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say you want to create a class whose Generic type should implement both "
          },
          {
            "Text": "Flushable",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Closeable",
            "AttrFlags": 2
          },
          {
            "Text": ", you can write"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170168,
        "id": "078f51b0-71b7-4c44-a641-5458fcad8e09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170168,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ExampleClass\u003cT extends Flushable \u0026 Closeable\u003e {\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ExampleClass\u003cT extends Flushable \u0026 Closeable\u003e {\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170168,
        "id": "e25ff295-8a14-4662-943c-dd869ce48d0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170168,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, the "
            ],
            [
              "ExampleClass",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only accepts as generic parameters, types which implement both "
            ],
            [
              "Flushable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "and",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Closeable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, the "
          },
          {
            "Text": "ExampleClass",
            "AttrFlags": 2
          },
          {
            "Text": " only accepts as generic parameters, types which implement both "
          },
          {
            "Text": "Flushable",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "and",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "Closeable",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170168,
        "id": "25a33205-3980-40f3-b413-857ef44531f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170168,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ExampleClass\u003cBufferedWriter\u003e arg1; // Works because BufferedWriter implements both Flushable and Closeable\n\nExampleClass\u003cConsole\u003e arg4; // Does NOT work because Console only implements Flushable\nExampleClass\u003cZipFile\u003e arg5; // Does NOT work because ZipFile only implements Closeable\n\nExampleClass\u003cFlushable\u003e arg2; // Does NOT work because Closeable bound is not satisfied.\nExampleClass\u003cCloseable\u003e arg3; // Does NOT work because Flushable bound is not satisfied."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ExampleClass\u003cBufferedWriter\u003e arg1; // Works because BufferedWriter implements both Flushable and Closeable\n\nExampleClass\u003cConsole\u003e arg4; // Does NOT work because Console only implements Flushable\nExampleClass\u003cZipFile\u003e arg5; // Does NOT work because ZipFile only implements Closeable\n\nExampleClass\u003cFlushable\u003e arg2; // Does NOT work because Closeable bound is not satisfied.\nExampleClass\u003cCloseable\u003e arg3; // Does NOT work because Flushable bound is not satisfied.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170168,
        "id": "f690cf12-96c6-44d3-a3af-77c6dde81cc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170168,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The class methods can choose to infer generic type arguments as either "
            ],
            [
              "Closeable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "Flushable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The class methods can choose to infer generic type arguments as either "
          },
          {
            "Text": "Closeable",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "Flushable",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170169,
        "id": "c6e30721-72cf-48c5-b52d-d8d2c9f81160",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170169,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ExampleClass\u003cT extends Flushable \u0026 Closeable\u003e {\n    /* Assign it to a valid type as you want. */\n    public void test (T param) {\n        Flushable arg1 = param; // Works\n        Closeable arg2 = param; // Works too.\n    }\n\n    /* You can even invoke the methods of any valid type directly. */\n    public void test2 (T param) {\n        param.flush(); // Method of Flushable called on T and works fine.\n        param.close(); // Method of Closeable called on T and works fine too.\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ExampleClass\u003cT extends Flushable \u0026 Closeable\u003e {\n    /* Assign it to a valid type as you want. */\n    public void test (T param) {\n        Flushable arg1 = param; // Works\n        Closeable arg2 = param; // Works too.\n    }\n\n    /* You can even invoke the methods of any valid type directly. */\n    public void test2 (T param) {\n        param.flush(); // Method of Flushable called on T and works fine.\n        param.close(); // Method of Closeable called on T and works fine too.\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170169,
        "id": "489e6dc5-882f-4c2b-8d1e-146abe282f6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170169,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460170169,
        "id": "34ac3dbf-c927-48e3-ab2b-d3db16e5a6cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460170169,
        "parent_id": "c6a4d993-b984-4c64-abd0-9ffb54f302e8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You cannot bind the generic parameter to either of the type using "
            ],
            [
              "OR",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") clause. Only the "
            ],
            [
              "AND",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") clause is supported. Generic type can extends only one class and many interfaces. Class must be placed at the beginning of the list."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You cannot bind the generic parameter to either of the type using "
          },
          {
            "Text": "OR",
            "AttrFlags": 4
          },
          {
            "Text": " ("
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": ") clause. Only the "
          },
          {
            "Text": "AND",
            "AttrFlags": 4
          },
          {
            "Text": " ("
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": ") clause is supported. Generic type can extends only one class and many interfaces. Class must be placed at the beginning of the list."
          }
        ]
      }
    ],
    "title": "Binding generic parameter to more than 1 type",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}