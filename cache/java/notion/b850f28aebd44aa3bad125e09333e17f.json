{
  "ID": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
  "Root": {
    "alive": true,
    "content": [
      "ae8c9ccd-e017-4832-acb0-8993ac94b1c7",
      "4f640f13-0862-4a59-bfab-50742a605d65",
      "bfdf9f60-bf06-415a-aec0-ccf0339bb8f7",
      "3fd6f9d9-4c3b-453e-bbb2-5f4efc4c4d5f",
      "ca39ce73-646d-4d3a-9d23-1c9f5f215fec",
      "a64849ab-4ab5-47e8-9429-ce9f984ac00a",
      "87f3176f-26a3-49e2-bd7d-11187f1d57e8",
      "8f117bc0-54c7-4932-adb6-569dfd504559",
      "3440f3b8-7975-4563-a1eb-2c9ca273cb99",
      "fdc231f4-6b97-4424-a83e-c17db9e359ab",
      "392b4aaa-2422-4d61-aee9-0ead2616c124",
      "a1ea3eb1-8646-4d3e-bfac-6f5b78f8e729",
      "98df91f9-c245-4484-ae83-feb04a93a710"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550519816843,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551753164733,
    "parent_id": "ad42f3e9-4f5e-496a-87cf-1b0e52254116",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple JMH example"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816838,
        "id": "ae8c9ccd-e017-4832-acb0-8993ac94b1c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816838,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the tools for writing proper benchmark tests is "
            ],
            [
              "JMH",
              [
                [
                  "a",
                  "http://openjdk.java.net/projects/code-tools/jmh/"
                ]
              ]
            ],
            [
              ". Let’s say we want to compare performance of searching an element in "
            ],
            [
              "HashSet",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " vs "
            ],
            [
              "TreeSet",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the tools for writing proper benchmark tests is "
          },
          {
            "Text": "JMH",
            "Link": "http://openjdk.java.net/projects/code-tools/jmh/"
          },
          {
            "Text": ". Let’s say we want to compare performance of searching an element in "
          },
          {
            "Text": "HashSet",
            "AttrFlags": 2
          },
          {
            "Text": " vs "
          },
          {
            "Text": "TreeSet",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816840,
        "id": "4f640f13-0862-4a59-bfab-50742a605d65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816840,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The easiest way to get JHM into your project - is to use maven and "
            ],
            [
              "shade",
              [
                [
                  "a",
                  "https://maven.apache.org/plugins/maven-shade-plugin/"
                ]
              ]
            ],
            [
              " plugin. Also you can see "
            ],
            [
              "pom.xml",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from "
            ],
            [
              "JHM examples",
              [
                [
                  "a",
                  "http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-archetypes/jmh-java-benchmark-archetype/src/main/resources/archetype-resources/pom.xml"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The easiest way to get JHM into your project - is to use maven and "
          },
          {
            "Text": "shade",
            "Link": "https://maven.apache.org/plugins/maven-shade-plugin/"
          },
          {
            "Text": " plugin. Also you can see "
          },
          {
            "Text": "pom.xml",
            "AttrFlags": 2
          },
          {
            "Text": " from "
          },
          {
            "Text": "JHM examples",
            "Link": "http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-archetypes/jmh-java-benchmark-archetype/src/main/resources/archetype-resources/pom.xml"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816840,
        "id": "bfdf9f60-bf06-415a-aec0-ccf0339bb8f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816840,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cbuild\u003e\n    \u003cplugins\u003e\n        \u003cplugin\u003e\n            \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n            \u003cartifactId\u003emaven-shade-plugin\u003c/artifactId\u003e\n            \u003cversion\u003e3.0.0\u003c/version\u003e\n            \u003cexecutions\u003e\n                \u003cexecution\u003e\n                    \u003cphase\u003epackage\u003c/phase\u003e\n                    \u003cgoals\u003e\n                        \u003cgoal\u003eshade\u003c/goal\u003e\n                    \u003c/goals\u003e\n                    \u003cconfiguration\u003e\n                        \u003cfinalName\u003e/benchmarks\u003c/finalName\u003e\n                        \u003ctransformers\u003e\n                            \u003ctransformer\n                                    implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"\u003e\n                                \u003cmainClass\u003eorg.openjdk.jmh.Main\u003c/mainClass\u003e\n                            \u003c/transformer\u003e\n                        \u003c/transformers\u003e\n                        \u003cfilters\u003e\n                            \u003cfilter\u003e\n                                \u003cartifact\u003e*:*\u003c/artifact\u003e\n                                \u003cexcludes\u003e\n                                    \u003cexclude\u003eMETA-INF/*.SF\u003c/exclude\u003e\n                                    \u003cexclude\u003eMETA-INF/*.DSA\u003c/exclude\u003e\n                                    \u003cexclude\u003eMETA-INF/*.RSA\u003c/exclude\u003e\n                                \u003c/excludes\u003e\n                            \u003c/filter\u003e\n                        \u003c/filters\u003e\n                    \u003c/configuration\u003e\n                \u003c/execution\u003e\n            \u003c/executions\u003e\n        \u003c/plugin\u003e\n    \u003c/plugins\u003e\n\u003c/build\u003e\n\n\u003cdependencies\u003e\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.openjdk.jmh\u003c/groupId\u003e\n        \u003cartifactId\u003ejmh-core\u003c/artifactId\u003e\n        \u003cversion\u003e1.18\u003c/version\u003e\n    \u003c/dependency\u003e\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.openjdk.jmh\u003c/groupId\u003e\n        \u003cartifactId\u003ejmh-generator-annprocess\u003c/artifactId\u003e\n        \u003cversion\u003e1.18\u003c/version\u003e\n    \u003c/dependency\u003e\n\u003c/dependencies\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cbuild\u003e\n    \u003cplugins\u003e\n        \u003cplugin\u003e\n            \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e\n            \u003cartifactId\u003emaven-shade-plugin\u003c/artifactId\u003e\n            \u003cversion\u003e3.0.0\u003c/version\u003e\n            \u003cexecutions\u003e\n                \u003cexecution\u003e\n                    \u003cphase\u003epackage\u003c/phase\u003e\n                    \u003cgoals\u003e\n                        \u003cgoal\u003eshade\u003c/goal\u003e\n                    \u003c/goals\u003e\n                    \u003cconfiguration\u003e\n                        \u003cfinalName\u003e/benchmarks\u003c/finalName\u003e\n                        \u003ctransformers\u003e\n                            \u003ctransformer\n                                    implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"\u003e\n                                \u003cmainClass\u003eorg.openjdk.jmh.Main\u003c/mainClass\u003e\n                            \u003c/transformer\u003e\n                        \u003c/transformers\u003e\n                        \u003cfilters\u003e\n                            \u003cfilter\u003e\n                                \u003cartifact\u003e*:*\u003c/artifact\u003e\n                                \u003cexcludes\u003e\n                                    \u003cexclude\u003eMETA-INF/*.SF\u003c/exclude\u003e\n                                    \u003cexclude\u003eMETA-INF/*.DSA\u003c/exclude\u003e\n                                    \u003cexclude\u003eMETA-INF/*.RSA\u003c/exclude\u003e\n                                \u003c/excludes\u003e\n                            \u003c/filter\u003e\n                        \u003c/filters\u003e\n                    \u003c/configuration\u003e\n                \u003c/execution\u003e\n            \u003c/executions\u003e\n        \u003c/plugin\u003e\n    \u003c/plugins\u003e\n\u003c/build\u003e\n\n\u003cdependencies\u003e\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.openjdk.jmh\u003c/groupId\u003e\n        \u003cartifactId\u003ejmh-core\u003c/artifactId\u003e\n        \u003cversion\u003e1.18\u003c/version\u003e\n    \u003c/dependency\u003e\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.openjdk.jmh\u003c/groupId\u003e\n        \u003cartifactId\u003ejmh-generator-annprocess\u003c/artifactId\u003e\n        \u003cversion\u003e1.18\u003c/version\u003e\n    \u003c/dependency\u003e\n\u003c/dependencies\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816840,
        "id": "3fd6f9d9-4c3b-453e-bbb2-5f4efc4c4d5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816840,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "After this you need to write benchmark class itself:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "After this you need to write benchmark class itself:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816840,
        "id": "ca39ce73-646d-4d3a-9d23-1c9f5f215fec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816840,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "package benchmark;\n\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport java.util.HashSet;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.TimeUnit;\n\n@State(Scope.Thread)\npublic class CollectionFinderBenchmarkTest {\n    private static final int SET_SIZE = 10000;\n\n    private Set\u003cString\u003e hashSet;\n    private Set\u003cString\u003e treeSet;\n\n    private String stringToFind = \"8888\";\n\n    @Setup\n    public void setupCollections() {\n        hashSet = new HashSet\u003c\u003e(SET_SIZE);\n        treeSet = new TreeSet\u003c\u003e();\n\n        for (int i = 0; i \u003c SET_SIZE; i++) {\n            final String value = String.valueOf(i);\n            hashSet.add(value);\n            treeSet.add(value);\n        }\n\n        stringToFind = String.valueOf(new Random().nextInt(SET_SIZE));\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void testHashSet(Blackhole blackhole) {\n        blackhole.consume(hashSet.contains(stringToFind));\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void testTreeSet(Blackhole blackhole) {\n        blackhole.consume(treeSet.contains(stringToFind));\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "package benchmark;\n\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.infra.Blackhole;\n\nimport java.util.HashSet;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.TimeUnit;\n\n@State(Scope.Thread)\npublic class CollectionFinderBenchmarkTest {\n    private static final int SET_SIZE = 10000;\n\n    private Set\u003cString\u003e hashSet;\n    private Set\u003cString\u003e treeSet;\n\n    private String stringToFind = \"8888\";\n\n    @Setup\n    public void setupCollections() {\n        hashSet = new HashSet\u003c\u003e(SET_SIZE);\n        treeSet = new TreeSet\u003c\u003e();\n\n        for (int i = 0; i \u003c SET_SIZE; i++) {\n            final String value = String.valueOf(i);\n            hashSet.add(value);\n            treeSet.add(value);\n        }\n\n        stringToFind = String.valueOf(new Random().nextInt(SET_SIZE));\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void testHashSet(Blackhole blackhole) {\n        blackhole.consume(hashSet.contains(stringToFind));\n    }\n\n    @Benchmark\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n    public void testTreeSet(Blackhole blackhole) {\n        blackhole.consume(treeSet.contains(stringToFind));\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816840,
        "id": "a64849ab-4ab5-47e8-9429-ce9f984ac00a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816840,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please keep in mind this "
            ],
            [
              "blackhole.consume()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we’ll get back to it later. Also we need main class for running benchmark:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please keep in mind this "
          },
          {
            "Text": "blackhole.consume()",
            "AttrFlags": 2
          },
          {
            "Text": ", we’ll get back to it later. Also we need main class for running benchmark:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816840,
        "id": "87f3176f-26a3-49e2-bd7d-11187f1d57e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816840,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "package benchmark;\n\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\npublic class BenchmarkMain {\n    public static void main(String[] args) throws RunnerException {\n        final Options options = new OptionsBuilder()\n                .include(CollectionFinderBenchmarkTest.class.getSimpleName())\n                .forks(1)\n                .build();\n\n        new Runner(options).run();\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "package benchmark;\n\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\npublic class BenchmarkMain {\n    public static void main(String[] args) throws RunnerException {\n        final Options options = new OptionsBuilder()\n                .include(CollectionFinderBenchmarkTest.class.getSimpleName())\n                .forks(1)\n                .build();\n\n        new Runner(options).run();\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816841,
        "id": "8f117bc0-54c7-4932-adb6-569dfd504559",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816841,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And we’re all set. We just need to run "
            ],
            [
              "mvn package",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (it will create "
            ],
            [
              "benchmarks.jar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in your "
            ],
            [
              "/target",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " folder) and run our benchmark test:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And we’re all set. We just need to run "
          },
          {
            "Text": "mvn package",
            "AttrFlags": 2
          },
          {
            "Text": " (it will create "
          },
          {
            "Text": "benchmarks.jar",
            "AttrFlags": 2
          },
          {
            "Text": " in your "
          },
          {
            "Text": "/target",
            "AttrFlags": 2
          },
          {
            "Text": " folder) and run our benchmark test:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816841,
        "id": "3440f3b8-7975-4563-a1eb-2c9ca273cb99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816841,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "java -cp target/benchmarks.jar benchmark.BenchmarkMain",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "java -cp target/benchmarks.jar benchmark.BenchmarkMain",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816841,
        "id": "fdc231f4-6b97-4424-a83e-c17db9e359ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816841,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And after some warmup and calculation iterations, we will have our results:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And after some warmup and calculation iterations, we will have our results:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816841,
        "id": "392b4aaa-2422-4d61-aee9-0ead2616c124",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816841,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# Run complete. Total time: 00:01:21\n\nBenchmark                                  Mode  Cnt   Score    Error  Units\nCollectionFinderBenchmarkTest.testHashSet  avgt   20   9.940 ±  0.270  ns/op\nCollectionFinderBenchmarkTest.testTreeSet  avgt   20  98.858 ± 13.743  ns/op"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# Run complete. Total time: 00:01:21\n\nBenchmark                                  Mode  Cnt   Score    Error  Units\nCollectionFinderBenchmarkTest.testHashSet  avgt   20   9.940 ±  0.270  ns/op\nCollectionFinderBenchmarkTest.testTreeSet  avgt   20  98.858 ± 13.743  ns/op",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816841,
        "id": "a1ea3eb1-8646-4d3e-bfac-6f5b78f8e729",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816841,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "About that "
            ],
            [
              "blackhole.consume()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If your calculations do not change the state of your application, java will most likely just ignore it. So, in order to avoid it, you can either make your benchmark methods return some value, or use "
            ],
            [
              "Blackhole",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object to consume it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "About that "
          },
          {
            "Text": "blackhole.consume()",
            "AttrFlags": 2
          },
          {
            "Text": ". If your calculations do not change the state of your application, java will most likely just ignore it. So, in order to avoid it, you can either make your benchmark methods return some value, or use "
          },
          {
            "Text": "Blackhole",
            "AttrFlags": 2
          },
          {
            "Text": " object to consume it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550519816843,
        "id": "98df91f9-c245-4484-ae83-feb04a93a710",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550519816843,
        "parent_id": "b850f28a-ebd4-4aa3-bad1-25e09333e17f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can find more information about writing proper benchmarks in "
            ],
            [
              "Aleksey Shipilëv’s blog",
              [
                [
                  "a",
                  "https://shipilev.net/blog/2014/nanotrusting-nanotime/"
                ]
              ]
            ],
            [
              ", in "
            ],
            [
              "Jacob Jenkov’s blog",
              [
                [
                  "a",
                  "http://tutorials.jenkov.com/java-performance/jmh.html"
                ]
              ]
            ],
            [
              " and in java-performance blog: "
            ],
            [
              "1",
              [
                [
                  "a",
                  "http://java-performance.info/jmh/"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "2",
              [
                [
                  "a",
                  "http://java-performance.info/introduction-jmh-profilers/"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can find more information about writing proper benchmarks in "
          },
          {
            "Text": "Aleksey Shipilëv’s blog",
            "Link": "https://shipilev.net/blog/2014/nanotrusting-nanotime/"
          },
          {
            "Text": ", in "
          },
          {
            "Text": "Jacob Jenkov’s blog",
            "Link": "http://tutorials.jenkov.com/java-performance/jmh.html"
          },
          {
            "Text": " and in java-performance blog: "
          },
          {
            "Text": "1",
            "Link": "http://java-performance.info/jmh/"
          },
          {
            "Text": ", "
          },
          {
            "Text": "2",
            "Link": "http://java-performance.info/introduction-jmh-profilers/"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Simple JMH example",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}