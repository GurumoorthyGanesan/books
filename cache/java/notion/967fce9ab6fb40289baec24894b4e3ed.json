{
  "ID": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
  "Root": {
    "alive": true,
    "content": [
      "92450747-c23b-4772-b315-15d50b35f73b",
      "236a0fab-2660-4e2f-ab23-3ed519fb5cdb",
      "bb0a9817-2884-4c23-b13f-e40a80523d1e",
      "c04d6a85-1651-4046-841b-4c39691ed2e1",
      "daf68326-49b6-4254-8d76-4602ac0f7af4",
      "ab0d251a-38a1-45dc-a849-15deb7159bb2",
      "7a246c43-c8a5-42cc-a705-1fe0b1e74d26"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518425443,
    "id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518425443,
    "parent_id": "28d11fe4-92df-4393-8cbb-b9dadc487955",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "100 Pitfall - Calling new StringString is inefficient"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425437,
        "id": "92450747-c23b-4772-b315-15d50b35f73b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425437,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "new String(String)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to duplicate a string is inefficient and almost always unnecessary."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "new String(String)",
            "AttrFlags": 2
          },
          {
            "Text": " to duplicate a string is inefficient and almost always unnecessary."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425441,
        "id": "236a0fab-2660-4e2f-ab23-3ed519fb5cdb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425441,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String objects are immutable, so there is no need to copy them to protect against changes."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "String objects are immutable, so there is no need to copy them to protect against changes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425441,
        "id": "bb0a9817-2884-4c23-b13f-e40a80523d1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425441,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In some older versions of Java, "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects can share backing arrays with other "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects. In those versions, it is possible to leak memory by creating a (small) substring of a (large) string and retaining it. However, from Java 7 onwards, "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " backing arrays are not shared."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "In some older versions of Java, "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects can share backing arrays with other "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects. In those versions, it is possible to leak memory by creating a (small) substring of a (large) string and retaining it. However, from Java 7 onwards, "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " backing arrays are not shared."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425441,
        "id": "c04d6a85-1651-4046-841b-4c39691ed2e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425441,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the absence of any tangible benefit, calling "
            ],
            [
              "new String(String)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is simply wasteful:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the absence of any tangible benefit, calling "
          },
          {
            "Text": "new String(String)",
            "AttrFlags": 2
          },
          {
            "Text": " is simply wasteful:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425442,
        "id": "daf68326-49b6-4254-8d76-4602ac0f7af4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425442,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Making the copy takes CPU time."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Making the copy takes CPU time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425442,
        "id": "ab0d251a-38a1-45dc-a849-15deb7159bb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425442,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The copy uses more memory which increases the application’s memoru footprint and / or increases GC overheads."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The copy uses more memory which increases the application’s memoru footprint and / or increases GC overheads."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518425443,
        "id": "7a246c43-c8a5-42cc-a705-1fe0b1e74d26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518425443,
        "parent_id": "967fce9a-b6fb-4028-9bae-c24894b4e3ed",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operations like "
            ],
            [
              "equals(Object)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "hashCode()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be slower if String objects are copied."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operations like "
          },
          {
            "Text": "equals(Object)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "hashCode()",
            "AttrFlags": 2
          },
          {
            "Text": " can be slower if String objects are copied."
          }
        ]
      }
    ],
    "title": "100 Pitfall - Calling new StringString is inefficient"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}