{
  "ID": "db5c0841-7e30-468e-8c93-19633ef27018",
  "Root": {
    "alive": true,
    "content": [
      "9b3cfc58-97d3-4acf-8b77-809c9aedac89",
      "ec37e645-9375-4e1e-82f9-05f150a73846",
      "9aa0a265-89a3-4b4e-ba82-5e3592623f29",
      "19fdd81c-0c4c-43f5-94bf-5c943da0feb4",
      "d5a40bad-73af-4b2b-9e1c-4e5ba4774049",
      "a6cc6ef7-521c-4089-b288-9d05ba93ad23",
      "bbc708fe-89df-42f3-b5c4-5450501ad812",
      "787f711f-3339-4543-acbd-240538aba3fc",
      "a4552636-a46a-48f9-bbea-0943e22ef556",
      "cfe067bf-1922-4d44-9b2d-83f1826585a7",
      "e191c000-13cf-4095-95dd-abe03a6159ee",
      "e085c1c0-39d2-48dc-b962-0d28bd33d95c",
      "1b218f5f-1ef5-4c66-bcba-dcb9049f26f6",
      "eabc75c7-5870-4811-8ebc-ee0dcf700727",
      "f348fa5e-202b-4c5e-9a06-abe25ad35885",
      "f584fa61-a420-4f2a-8d82-117c6badd58a",
      "564df7f7-7384-46a0-920c-95330b7c5530",
      "eba96885-b6fd-48b1-94f9-706aafb2afec",
      "f22bcaea-5fab-4d5f-845a-2663f2588e62"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518700568,
    "id": "db5c0841-7e30-468e-8c93-19633ef27018",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518700568,
    "parent_id": "012a60f0-6603-428f-90f0-56d12cde3fa4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Pitfall - Making good unexpected nulls"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700561,
        "id": "9b3cfc58-97d3-4acf-8b77-809c9aedac89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700561,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On StackOverflow, we often see code like this in Answers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On StackOverflow, we often see code like this in Answers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700564,
        "id": "ec37e645-9375-4e1e-82f9-05f150a73846",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700564,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public String joinStrings(String a, String b) {\n    if (a == null) {\n        a = \"\";\n    }\n    if (b == null) {\n        b = \"\";\n    }\n    return a + \": \" + b;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public String joinStrings(String a, String b) {\n    if (a == null) {\n        a = \"\";\n    }\n    if (b == null) {\n        b = \"\";\n    }\n    return a + \": \" + b;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700565,
        "id": "9aa0a265-89a3-4b4e-ba82-5e3592623f29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700565,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often, this is accompanied with an assertion that is “best practice” to test for "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like this to avoid "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often, this is accompanied with an assertion that is “best practice” to test for "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " like this to avoid "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700565,
        "id": "19fdd81c-0c4c-43f5-94bf-5c943da0feb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700565,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Is it best practice? In short: No."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Is it best practice? In short: No."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700565,
        "id": "d5a40bad-73af-4b2b-9e1c-4e5ba4774049",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700565,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are some underlying assumptions that need to be questioned before we can say if it is a good idea to do this in our "
            ],
            [
              "joinStrings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are some underlying assumptions that need to be questioned before we can say if it is a good idea to do this in our "
          },
          {
            "Text": "joinStrings",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700565,
        "id": "a6cc6ef7-521c-4089-b288-9d05ba93ad23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700565,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What does it mean for “a” or “b” to be null?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "What does it mean for “a” or “b” to be null?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700566,
        "id": "bbc708fe-89df-42f3-b5c4-5450501ad812",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700566,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value can be zero or more characters, so we already have a way of representing an empty string. Does "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " mean something different to "
            ],
            [
              "\"\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? If no, then it is problematic to have two ways to represent an empty string."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " value can be zero or more characters, so we already have a way of representing an empty string. Does "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " mean something different to "
          },
          {
            "Text": "\"\"",
            "AttrFlags": 2
          },
          {
            "Text": "? If no, then it is problematic to have two ways to represent an empty string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700566,
        "id": "787f711f-3339-4543-acbd-240538aba3fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700566,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Did the null come from an uninitialized variable?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Did the null come from an uninitialized variable?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700566,
        "id": "a4552636-a46a-48f9-bbea-0943e22ef556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700566,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can come from an uninitialized field, or an uninitialized array element. The value could be uninitialized by design, or by accident. If it was by accident then this is a bug."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " can come from an uninitialized field, or an uninitialized array element. The value could be uninitialized by design, or by accident. If it was by accident then this is a bug."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700566,
        "id": "cfe067bf-1922-4d44-9b2d-83f1826585a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700566,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Does the null represent a “don’t know” or “missing value”?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Does the null represent a “don’t know” or “missing value”?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700566,
        "id": "e191c000-13cf-4095-95dd-abe03a6159ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700566,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes a "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can have a genuine meaning; e.g. that the real value of a variable is unknown or unavailable or “optional”. In Java 8, the "
            ],
            [
              "Optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class provides a better way of expressing that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes a "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " can have a genuine meaning; e.g. that the real value of a variable is unknown or unavailable or “optional”. In Java 8, the "
          },
          {
            "Text": "Optional",
            "AttrFlags": 2
          },
          {
            "Text": " class provides a better way of expressing that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700567,
        "id": "e085c1c0-39d2-48dc-b962-0d28bd33d95c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700567,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If this is a bug (or a design error) should we “make good”?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "If this is a bug (or a design error) should we “make good”?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700567,
        "id": "1b218f5f-1ef5-4c66-bcba-dcb9049f26f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700567,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One interpretation of the code is that we are “making good” an unexpected "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by using an empty string in its place. Is the correct strategy? Would it be better to let the "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " happen, and then catch the exception further up the stack and log it as a bug?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One interpretation of the code is that we are “making good” an unexpected "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " by using an empty string in its place. Is the correct strategy? Would it be better to let the "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2
          },
          {
            "Text": " happen, and then catch the exception further up the stack and log it as a bug?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700567,
        "id": "eabc75c7-5870-4811-8ebc-ee0dcf700727",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700567,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem with “making good” is that it is liable to either hide the problem, or make it harder to diagnose."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem with “making good” is that it is liable to either hide the problem, or make it harder to diagnose."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700567,
        "id": "f348fa5e-202b-4c5e-9a06-abe25ad35885",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700567,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Is this efficient / good for code quality?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Is this efficient / good for code quality?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700567,
        "id": "f584fa61-a420-4f2a-8d82-117c6badd58a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700567,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the “make good” approach is used consistently, your code is going to contain a lot of “defensive” null tests. This is going to make it longer and harder to read. Furthermore, all of this testing and “making good” is liable to impact on the performance of your application."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the “make good” approach is used consistently, your code is going to contain a lot of “defensive” null tests. This is going to make it longer and harder to read. Furthermore, all of this testing and “making good” is liable to impact on the performance of your application."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700567,
        "id": "564df7f7-7384-46a0-920c-95330b7c5530",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700567,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In summary"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "In summary"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700568,
        "id": "eba96885-b6fd-48b1-94f9-706aafb2afec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700568,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a meaningful value, then testing for the "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " case is the correct approach. The corollary is that if a "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value is meaningful, then this should be clearly documented in the javadocs of any methods that accept the "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value or return it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " is a meaningful value, then testing for the "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " case is the correct approach. The corollary is that if a "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " value is meaningful, then this should be clearly documented in the javadocs of any methods that accept the "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " value or return it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518700568,
        "id": "f22bcaea-5fab-4d5f-845a-2663f2588e62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518700568,
        "parent_id": "db5c0841-7e30-468e-8c93-19633ef27018",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, it is a better idea to treat an unexpected "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a programming error, and let the "
            ],
            [
              "NullPointerException",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " happen so that the developer gets to know there is a problem in the code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, it is a better idea to treat an unexpected "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " as a programming error, and let the "
          },
          {
            "Text": "NullPointerException",
            "AttrFlags": 2
          },
          {
            "Text": " happen so that the developer gets to know there is a problem in the code."
          }
        ]
      }
    ],
    "title": "010 Pitfall - Making good unexpected nulls"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}