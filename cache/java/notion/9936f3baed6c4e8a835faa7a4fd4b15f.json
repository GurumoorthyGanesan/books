{
  "ID": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
  "Root": {
    "alive": true,
    "content": [
      "7cc8d791-cb51-4949-8a0f-fab23ecd70fb",
      "92e2dc20-7dfe-4bba-88d2-131568dbfd4d",
      "ff173c6f-58f5-4788-8c76-a2829b015171",
      "87a94cb5-75cb-419d-8654-00f5268ea0c2",
      "e547970a-7381-4e7b-9351-0650ff97ff2a",
      "c9bcc972-b8f2-438e-9e85-efcfc7e28fd4",
      "b0b5d75a-a7c1-4c13-8f2e-f26b8a4c0839",
      "26bfd764-0e26-4d16-b6cf-01c8d9dd81fa",
      "3c6d1719-9501-45b4-9140-1756b3220e05",
      "959027a3-9d54-4e5e-979e-ec6d6baf20df",
      "93273a21-bb48-4239-ab3f-06264a16282f",
      "709321b7-c264-40a4-b39a-1ad3ffeda93f",
      "c7815015-be9d-46bf-86b5-016bf13a8a4e",
      "7c155afd-ae41-47fc-95c8-d93309aac0f9",
      "e64f6924-f175-4199-a9c0-eda17d5d3686",
      "34119ab5-be4e-4a7b-bfa6-87387d633ae9",
      "c7b5643e-dfbf-4f5f-9cd7-e2706fedb6bc",
      "bd5103d4-d8c8-4884-ae21-9ff69860b8f9",
      "6bf453cb-406a-4426-be04-738145439b47"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460215453,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551760655547,
    "parent_id": "98fc7929-b076-4b4c-8088-3851bfc3fdbf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Strings"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215442,
        "id": "7cc8d791-cb51-4949-8a0f-fab23ecd70fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215442,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215446,
        "id": "92e2dc20-7dfe-4bba-88d2-131568dbfd4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215446,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Strings ("
            ],
            [
              "java.lang.String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") are pieces of text stored in your program. Strings are "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " a "
            ],
            [
              "primitive data type in Java",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/10430582/primitive-data-types-in-java"
                ]
              ]
            ],
            [
              ", however, they are very common in Java programs."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Strings ("
          },
          {
            "Text": "java.lang.String",
            "AttrFlags": 2
          },
          {
            "Text": ") are pieces of text stored in your program. Strings are "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " a "
          },
          {
            "Text": "primitive data type in Java",
            "Link": "http://stackoverflow.com/questions/10430582/primitive-data-types-in-java"
          },
          {
            "Text": ", however, they are very common in Java programs."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215448,
        "id": "ff173c6f-58f5-4788-8c76-a2829b015171",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215448,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java, Strings are immutable, meaning that they cannot be changed. (Click "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/279507/what-is-meant-by-immutable"
                ]
              ]
            ],
            [
              " for a more thorough explanation of immutability.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java, Strings are immutable, meaning that they cannot be changed. (Click "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/questions/279507/what-is-meant-by-immutable"
          },
          {
            "Text": " for a more thorough explanation of immutability.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215448,
        "id": "87a94cb5-75cb-419d-8654-00f5268ea0c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215448,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215449,
        "id": "e547970a-7381-4e7b-9351-0650ff97ff2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215449,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since Java strings are "
            ],
            [
              "immutable",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Immutable_object"
                ]
              ]
            ],
            [
              ", all methods which manipulate a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will "
            ],
            [
              "return a new ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "String",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " object",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". They do not change the original "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This includes to substring and replacement methods that C and C++ programers would expect to mutate the target "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since Java strings are "
          },
          {
            "Text": "immutable",
            "Link": "https://en.wikipedia.org/wiki/Immutable_object"
          },
          {
            "Text": ", all methods which manipulate a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " will "
          },
          {
            "Text": "return a new ",
            "AttrFlags": 1
          },
          {
            "Text": "String",
            "AttrFlags": 3
          },
          {
            "Text": " object",
            "AttrFlags": 1
          },
          {
            "Text": ". They do not change the original "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ". This includes to substring and replacement methods that C and C++ programers would expect to mutate the target "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215449,
        "id": "c9bcc972-b8f2-438e-9e85-efcfc7e28fd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215449,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215449,
        "id": "b0b5d75a-a7c1-4c13-8f2e-f26b8a4c0839",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215449,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use a "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/StringBuilder.html"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you want to concatenate more than two "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects whose values cannot be determined at compile-time. This technique is more performant than creating new "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects and concatenating them because "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is mutable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use a "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/StringBuilder.html"
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " if you want to concatenate more than two "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects whose values cannot be determined at compile-time. This technique is more performant than creating new "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects and concatenating them because "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": " is mutable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215450,
        "id": "26bfd764-0e26-4d16-b6cf-01c8d9dd81fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215450,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "StringBuffer",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/StringBuffer.html"
                ]
              ]
            ],
            [
              " can also be used to concatenate "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects. However, this class is less performant because it is designed to be thread-safe, and acquires a mutex before each operation. Since you almost never need thread-safety when concatenating strings, it is best to use "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "StringBuffer",
            "AttrFlags": 2,
            "Link": "https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/StringBuffer.html"
          },
          {
            "Text": " can also be used to concatenate "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects. However, this class is less performant because it is designed to be thread-safe, and acquires a mutex before each operation. Since you almost never need thread-safety when concatenating strings, it is best to use "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215450,
        "id": "3c6d1719-9501-45b4-9140-1756b3220e05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215450,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you can express a string concatenation as a single expression, then it is better to use the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator. The Java compiler will convert an expression containing "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " concatenations into an efficient sequence of operations using either "
            ],
            [
              "String.concat(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The advice to use "
            ],
            [
              "StringBuilder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " explicitly only applies when the concatenation involves a multiple expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you can express a string concatenation as a single expression, then it is better to use the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operator. The Java compiler will convert an expression containing "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " concatenations into an efficient sequence of operations using either "
          },
          {
            "Text": "String.concat(...)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": ". The advice to use "
          },
          {
            "Text": "StringBuilder",
            "AttrFlags": 2
          },
          {
            "Text": " explicitly only applies when the concatenation involves a multiple expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215451,
        "id": "959027a3-9d54-4e5e-979e-ec6d6baf20df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215451,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215451,
        "id": "93273a21-bb48-4239-ab3f-06264a16282f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215451,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t store sensitive information in strings. If someone is able to obtain a memory dump of your running application, then they will be able to find all of the existing "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects and read their contents. This includes "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects that are unreachable and are awaiting garbage collection. If this is a concern, you will need to wipe sensitive string data as soon as you are done with it. You cannot do this with "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects since they are immutable. Therefore, it is advisable to use a "
            ],
            [
              "char[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects to hold sensitive character data, and wipe them (e.g. overwrite them with "
            ],
            [
              "'\\000'",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " characters) when you are done."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t store sensitive information in strings. If someone is able to obtain a memory dump of your running application, then they will be able to find all of the existing "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects and read their contents. This includes "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects that are unreachable and are awaiting garbage collection. If this is a concern, you will need to wipe sensitive string data as soon as you are done with it. You cannot do this with "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects since they are immutable. Therefore, it is advisable to use a "
          },
          {
            "Text": "char[]",
            "AttrFlags": 2
          },
          {
            "Text": " objects to hold sensitive character data, and wipe them (e.g. overwrite them with "
          },
          {
            "Text": "'\\000'",
            "AttrFlags": 2
          },
          {
            "Text": " characters) when you are done."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215451,
        "id": "709321b7-c264-40a4-b39a-1ad3ffeda93f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215451,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215452,
        "id": "c7815015-be9d-46bf-86b5-016bf13a8a4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215452,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instances are created on the heap, even instances that correspond to string literals. The special thing about string literals is that the JVM ensures that all literals that are equal (i.e. that consists of the same characters) are represented by a single "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object (this behavior is specified in JLS). This is implemented by JVM class loaders. When a class loader loads a class, it scans for string literals that are used in the class definition, each time it sees one, it checks if there is already a record in the string pool for this literal (using the literal as a key). If there is already an entry for the literal, the reference to a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance stored as the pair for that literal is used. Otherwise, a new "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance is created and a reference to the instance is stored for the literal (used as a key) in the string pool. (Also see "
            ],
            [
              "string interning",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/String_interning"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " instances are created on the heap, even instances that correspond to string literals. The special thing about string literals is that the JVM ensures that all literals that are equal (i.e. that consists of the same characters) are represented by a single "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " object (this behavior is specified in JLS). This is implemented by JVM class loaders. When a class loader loads a class, it scans for string literals that are used in the class definition, each time it sees one, it checks if there is already a record in the string pool for this literal (using the literal as a key). If there is already an entry for the literal, the reference to a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " instance stored as the pair for that literal is used. Otherwise, a new "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " instance is created and a reference to the instance is stored for the literal (used as a key) in the string pool. (Also see "
          },
          {
            "Text": "string interning",
            "Link": "https://en.wikipedia.org/wiki/String_interning"
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215452,
        "id": "7c155afd-ae41-47fc-95c8-d93309aac0f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215452,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The string pool is held in the Java heap, and is subject to normal garbage collection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The string pool is held in the Java heap, and is subject to normal garbage collection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215452,
        "id": "e64f6924-f175-4199-a9c0-eda17d5d3686",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215452,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In releases of Java before Java 7, the string pool was held in a special part of the heap known as “PermGen”. This part was only collected occasionally."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In releases of Java before Java 7, the string pool was held in a special part of the heap known as “PermGen”. This part was only collected occasionally."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215453,
        "id": "34119ab5-be4e-4a7b-bfa6-87387d633ae9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215453,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Java 7, the string pool was moved off from “PermGen”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Java 7, the string pool was moved off from “PermGen”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215453,
        "id": "c7b5643e-dfbf-4f5f-9cd7-e2706fedb6bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215453,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that string literals are implicitly reachable from any method that uses them. This means that the corresponding "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects can only be garbage collected if the code itself is garbage collected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that string literals are implicitly reachable from any method that uses them. This means that the corresponding "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects can only be garbage collected if the code itself is garbage collected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215453,
        "id": "bd5103d4-d8c8-4884-ae21-9ff69860b8f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215453,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460215453,
        "id": "6bf453cb-406a-4426-be04-738145439b47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460215453,
        "parent_id": "9936f3ba-ed6c-4e8a-835f-aa7a4fd4b15f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Up until Java 8, "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects are implemented as a UTF-16 char array (2 bytes per char). There is a proposal in Java 9 to implement "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as a byte array with an encoding flag field to note if the string is encoded as bytes (LATIN-1) or chars (UTF-16)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Up until Java 8, "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " objects are implemented as a UTF-16 char array (2 bytes per char). There is a proposal in Java 9 to implement "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " as a byte array with an encoding flag field to note if the string is encoded as bytes (LATIN-1) or chars (UTF-16)."
          }
        ]
      }
    ],
    "title": "Strings",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}