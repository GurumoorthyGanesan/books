{
  "ID": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
  "Root": {
    "alive": true,
    "content": [
      "6aa6a882-3469-4112-bcd5-99dae2f7032b",
      "2bd0680f-9a4a-4b8c-a617-1c5e69b775a0",
      "67793d43-9ae1-48b1-ad85-2a70a008db33",
      "f197cb7f-ba09-45d3-bd69-ce539b9326eb",
      "6041d292-50ff-41f1-b0f4-a80b701e8f99",
      "a13073bf-b920-42c5-81ac-bda802221228"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460536068,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551757813911,
    "parent_id": "596cd51e-237c-46bd-a4df-28e4d338582d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Memory consumption of primitives vs. boxed primitives"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460536065,
        "id": "6aa6a882-3469-4112-bcd5-99dae2f7032b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460536065,
        "parent_id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Primitive | Boxed Type | Memory Size of primitive / boxed |\n——— | ———– | ––––– |\nboolean | Boolean | 1 byte / 16 bytes |\nbyte | Byte | 1 byte / 16 bytes |\nshort | Short | 2 bytes / 16 bytes |\nchar | Char | 2 bytes / 16 bytes |\nint | Integer | 4 bytes / 16 bytes |\nlong | Long | 8 bytes / 16 bytes |\nfloat | Float | 4 bytes / 16 bytes |\ndouble | Double | 8 bytes / 16 bytes |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Primitive | Boxed Type | Memory Size of primitive / boxed |\n——— | ———– | ––––– |\nboolean | Boolean | 1 byte / 16 bytes |\nbyte | Byte | 1 byte / 16 bytes |\nshort | Short | 2 bytes / 16 bytes |\nchar | Char | 2 bytes / 16 bytes |\nint | Integer | 4 bytes / 16 bytes |\nlong | Long | 8 bytes / 16 bytes |\nfloat | Float | 4 bytes / 16 bytes |\ndouble | Double | 8 bytes / 16 bytes |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460536067,
        "id": "2bd0680f-9a4a-4b8c-a617-1c5e69b775a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460536067,
        "parent_id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Boxed objects always require 8 bytes for type and memory management, and because the size of objects is always a multiple of 8, boxed types "
            ],
            [
              "all require 16 bytes total",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". In "
            ],
            [
              "addition",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", each usage of a boxed object entails storing a reference which accounts for another 4 or 8 bytes, depending on the JVM and JVM options."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Boxed objects always require 8 bytes for type and memory management, and because the size of objects is always a multiple of 8, boxed types "
          },
          {
            "Text": "all require 16 bytes total",
            "AttrFlags": 4
          },
          {
            "Text": ". In "
          },
          {
            "Text": "addition",
            "AttrFlags": 4
          },
          {
            "Text": ", each usage of a boxed object entails storing a reference which accounts for another 4 or 8 bytes, depending on the JVM and JVM options."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460536068,
        "id": "67793d43-9ae1-48b1-ad85-2a70a008db33",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460536068,
        "parent_id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In data-intensive operations, memory consumption can have a major impact on performance. Memory consumption grows even more when using arrays: a "
            ],
            [
              "float[5]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array will require only 32 bytes; whereas a "
            ],
            [
              "Float[5]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " storing 5 distinct non-null values will require 112 bytes total (on 64 bit without compressed pointers, this increases to 152 bytes)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In data-intensive operations, memory consumption can have a major impact on performance. Memory consumption grows even more when using arrays: a "
          },
          {
            "Text": "float[5]",
            "AttrFlags": 2
          },
          {
            "Text": " array will require only 32 bytes; whereas a "
          },
          {
            "Text": "Float[5]",
            "AttrFlags": 2
          },
          {
            "Text": " storing 5 distinct non-null values will require 112 bytes total (on 64 bit without compressed pointers, this increases to 152 bytes)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460536068,
        "id": "f197cb7f-ba09-45d3-bd69-ce539b9326eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460536068,
        "parent_id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Boxed value caches"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Boxed value caches"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460536068,
        "id": "6041d292-50ff-41f1-b0f4-a80b701e8f99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460536068,
        "parent_id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The space overheads of the boxed types can be mitigated to a degree by the boxed value caches. Some of the boxed types implement a cache of instances. For example, by default, the "
            ],
            [
              "Integer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class will cache instances to represent numbers in the range "
            ],
            [
              "-128",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "+127",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This does not, however, reduce the additional cost arising from the additional memory indirection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The space overheads of the boxed types can be mitigated to a degree by the boxed value caches. Some of the boxed types implement a cache of instances. For example, by default, the "
          },
          {
            "Text": "Integer",
            "AttrFlags": 2
          },
          {
            "Text": " class will cache instances to represent numbers in the range "
          },
          {
            "Text": "-128",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "+127",
            "AttrFlags": 2
          },
          {
            "Text": ". This does not, however, reduce the additional cost arising from the additional memory indirection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460536068,
        "id": "a13073bf-b920-42c5-81ac-bda802221228",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460536068,
        "parent_id": "0e6e13a0-7f30-4719-b4fe-22aba360ba26",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you create an instance of a boxed type either by autoboxing or by calling the static "
            ],
            [
              "valueOf(primitive)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, the runtime system will attempt to use a cached value. If your application uses a lot of values in the range that is cached, then this can substantially reduce the memory penalty of using boxed types. Certainly, if you are creating boxed value instances “by hand”, it is better to use "
            ],
            [
              "valueOf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rather than "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". (The "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operation always creates a new instance.) If, however, the majority of your values are "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in the cached range, it can be faster to call "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and save the cache lookup."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you create an instance of a boxed type either by autoboxing or by calling the static "
          },
          {
            "Text": "valueOf(primitive)",
            "AttrFlags": 2
          },
          {
            "Text": " method, the runtime system will attempt to use a cached value. If your application uses a lot of values in the range that is cached, then this can substantially reduce the memory penalty of using boxed types. Certainly, if you are creating boxed value instances “by hand”, it is better to use "
          },
          {
            "Text": "valueOf",
            "AttrFlags": 2
          },
          {
            "Text": " rather than "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": ". (The "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " operation always creates a new instance.) If, however, the majority of your values are "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " in the cached range, it can be faster to call "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " and save the cache lookup."
          }
        ]
      }
    ],
    "title": "Memory consumption of primitives vs. boxed primitives",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}