{
  "ID": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
  "Root": {
    "alive": true,
    "content": [
      "daeb4bd1-d1d0-48a1-adad-e9c9e00c4feb",
      "a0455d5e-86fc-4f41-af8e-734592af7149",
      "713a2036-c6cb-4c41-8d21-9133b84fca06",
      "c759f9e4-b511-45ca-b1cf-f5a945d8b075",
      "5d91c77e-845f-4b00-aebc-6abe2992aa3a",
      "73f6f169-d722-4d2c-a454-549edf32ea3d",
      "076a4248-3ec2-4376-99d9-32d2484b9cdc",
      "7e426b91-ad3e-412f-ad1a-714e08dbbf3f",
      "86620494-0dfb-43d8-af61-bb32b971ae63"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460444021,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460444021,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Thread Interruption Stopping Threads"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444019,
        "id": "daeb4bd1-d1d0-48a1-adad-e9c9e00c4feb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444019,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each Java Thread has an interrupt flag, which is initially false. Interrupting a thread, is essentially nothing more than setting that flag to true. The code running on that thread can check the flag on occasion and act upon it. The code can also ignore it completely. But why would each Thread have such a flag? After all, having a boolean flag on a thread is something we can just organize ourselves, if and when we need it. Well, there are methods that behave in a special way when the thread they’re running on is interrupted. These methods are called blocking methods. These are methods that put the thread in the WAITING or TIMED_WAITING state. When a thread is in this state, interrupting it, will cause an InterruptedException to be thrown on the interrupted thread, rather than the interrupt flag being set to true, and the thread becomes RUNNABLE again. Code that invokes a blocking method is forced to deal with the InterruptedException, since it is a checked exception. So, and hence its name, an interrupt can have the effect of interrupting a WAIT, effectively ending it. Note that not all methods that are somehow waiting (e.g. blocking IO) respond to interruption in that way, as they don’t put the thread in a waiting state. Lastly a thread that has its interrupt flag set, that enters a blocking method (i.e. tries to get into a waiting state), will immediately throw an InterruptedException and the interrupt flag will be cleared."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each Java Thread has an interrupt flag, which is initially false. Interrupting a thread, is essentially nothing more than setting that flag to true. The code running on that thread can check the flag on occasion and act upon it. The code can also ignore it completely. But why would each Thread have such a flag? After all, having a boolean flag on a thread is something we can just organize ourselves, if and when we need it. Well, there are methods that behave in a special way when the thread they’re running on is interrupted. These methods are called blocking methods. These are methods that put the thread in the WAITING or TIMED_WAITING state. When a thread is in this state, interrupting it, will cause an InterruptedException to be thrown on the interrupted thread, rather than the interrupt flag being set to true, and the thread becomes RUNNABLE again. Code that invokes a blocking method is forced to deal with the InterruptedException, since it is a checked exception. So, and hence its name, an interrupt can have the effect of interrupting a WAIT, effectively ending it. Note that not all methods that are somehow waiting (e.g. blocking IO) respond to interruption in that way, as they don’t put the thread in a waiting state. Lastly a thread that has its interrupt flag set, that enters a blocking method (i.e. tries to get into a waiting state), will immediately throw an InterruptedException and the interrupt flag will be cleared."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444020,
        "id": "a0455d5e-86fc-4f41-af8e-734592af7149",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444020,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other than these mechanics, Java does not assign any special semantic meaning to interruption. Code is free to interpret an interrupt any way it likes. But most often interruption is used to signal to a thread it should stop running at its earliest convenience. But, as should be clear from the above, it is up to the code on that thread to react to that interruption appropriately in order to stop running. Stopping a thread is a collaboration. When a thread is interrupted its running code can be several levels deep into the stacktrace. Most code doesn’t call a blocking method, and finishes timely enough to not delay the stopping of the thread unduly. The code that should mostly be concerned with being responsive to interruption, is code that is in a loop handling tasks until there are none left, or until a flag is set signalling it to stop that loop. Loops that handle possibly infinite tasks (i.e. they keep running in principle) should check the interrupt flag in order to exit the loop. For finite loops the semantics may dictate that all tasks must be finished before ending, or it may be appropriate to leave some tasks unhandled. Code that calls blocking methods will be forced to deal with the InterruptedException. If at all semantically possible, it can simply propagate the InterruptedException and declare to throw it. As such it becomes a blocking method itself in regard to its callers. If it cannot propagate the exception, it should at the very least set the interrupted flag, so callers higher up the stack also know the thread was interrupted. In some cases the method needs to continue waiting regardless of the InterruptedException, in which case it must delay setting the interrupted flag until after it is done waiting, this may involve setting a local variable, which is to be checked prior to exiting the method to then interrupt its thread."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other than these mechanics, Java does not assign any special semantic meaning to interruption. Code is free to interpret an interrupt any way it likes. But most often interruption is used to signal to a thread it should stop running at its earliest convenience. But, as should be clear from the above, it is up to the code on that thread to react to that interruption appropriately in order to stop running. Stopping a thread is a collaboration. When a thread is interrupted its running code can be several levels deep into the stacktrace. Most code doesn’t call a blocking method, and finishes timely enough to not delay the stopping of the thread unduly. The code that should mostly be concerned with being responsive to interruption, is code that is in a loop handling tasks until there are none left, or until a flag is set signalling it to stop that loop. Loops that handle possibly infinite tasks (i.e. they keep running in principle) should check the interrupt flag in order to exit the loop. For finite loops the semantics may dictate that all tasks must be finished before ending, or it may be appropriate to leave some tasks unhandled. Code that calls blocking methods will be forced to deal with the InterruptedException. If at all semantically possible, it can simply propagate the InterruptedException and declare to throw it. As such it becomes a blocking method itself in regard to its callers. If it cannot propagate the exception, it should at the very least set the interrupted flag, so callers higher up the stack also know the thread was interrupted. In some cases the method needs to continue waiting regardless of the InterruptedException, in which case it must delay setting the interrupted flag until after it is done waiting, this may involve setting a local variable, which is to be checked prior to exiting the method to then interrupt its thread."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444020,
        "id": "713a2036-c6cb-4c41-8d21-9133b84fca06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444020,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Examples :",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Examples :",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444020,
        "id": "c759f9e4-b511-45ca-b1cf-f5a945d8b075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444020,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of code that stops handling tasks upon interruption",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of code that stops handling tasks upon interruption",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444020,
        "id": "5d91c77e-845f-4b00-aebc-6abe2992aa3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444020,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class TaskHandler implements Runnable {\n    \n    private final BlockingQueue\u003cTask\u003e queue;\n\n    TaskHandler(BlockingQueue\u003cTask\u003e queue) {\n        this.queue = queue;\n    }\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) { // check for interrupt flag, exit loop when interrupted\n            try {\n                Task task = queue.take(); // blocking call, responsive to interruption\n                handle(task);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt(); // cannot throw InterruptedException (due to Runnable interface restriction) so indicating interruption by setting the flag\n            }\n        }\n    }\n    \n    private void handle(Task task) {\n        // actual handling\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class TaskHandler implements Runnable {\n    \n    private final BlockingQueue\u003cTask\u003e queue;\n\n    TaskHandler(BlockingQueue\u003cTask\u003e queue) {\n        this.queue = queue;\n    }\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) { // check for interrupt flag, exit loop when interrupted\n            try {\n                Task task = queue.take(); // blocking call, responsive to interruption\n                handle(task);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt(); // cannot throw InterruptedException (due to Runnable interface restriction) so indicating interruption by setting the flag\n            }\n        }\n    }\n    \n    private void handle(Task task) {\n        // actual handling\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444020,
        "id": "73f6f169-d722-4d2c-a454-549edf32ea3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444020,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of code that delays setting the interrupt flag until completely done :",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of code that delays setting the interrupt flag until completely done :",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444020,
        "id": "076a4248-3ec2-4376-99d9-32d2484b9cdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444020,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MustFinishHandler implements Runnable {\n\n    private final BlockingQueue\u003cTask\u003e queue;\n\n    MustFinishHandler(BlockingQueue\u003cTask\u003e queue) {\n        this.queue = queue;\n    }\n\n    @Override\n    public void run() {\n        boolean shouldInterrupt = false;\n        \n        while (true) {\n            try {\n                Task task = queue.take();\n                if (task.isEndOfTasks()) {\n                    if (shouldInterrupt) {\n                        Thread.currentThread().interrupt();\n                    }\n                    return;\n                }\n                handle(task);\n            } catch (InterruptedException e) {\n                shouldInterrupt = true; // must finish, remember to set interrupt flag when we're done\n            }\n        }\n    }\n\n    private void handle(Task task) {\n        // actual handling\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MustFinishHandler implements Runnable {\n\n    private final BlockingQueue\u003cTask\u003e queue;\n\n    MustFinishHandler(BlockingQueue\u003cTask\u003e queue) {\n        this.queue = queue;\n    }\n\n    @Override\n    public void run() {\n        boolean shouldInterrupt = false;\n        \n        while (true) {\n            try {\n                Task task = queue.take();\n                if (task.isEndOfTasks()) {\n                    if (shouldInterrupt) {\n                        Thread.currentThread().interrupt();\n                    }\n                    return;\n                }\n                handle(task);\n            } catch (InterruptedException e) {\n                shouldInterrupt = true; // must finish, remember to set interrupt flag when we're done\n            }\n        }\n    }\n\n    private void handle(Task task) {\n        // actual handling\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444021,
        "id": "7e426b91-ad3e-412f-ad1a-714e08dbbf3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444021,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of code that has a fixed list of tasks but may quit early when interrupted",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of code that has a fixed list of tasks but may quit early when interrupted",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460444021,
        "id": "86620494-0dfb-43d8-af61-bb32b971ae63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460444021,
        "parent_id": "8c2c6a95-3afe-4b88-ac5e-78844f371c61",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class GetAsFarAsPossible implements Runnable {\n\n    private final List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n\n    @Override\n    public void run() {\n        for (Task task : tasks) {\n            if (Thread.currentThread().isInterrupted()) {\n                return;\n            }\n            handle(task);\n        }\n    }\n\n    private void handle(Task task) {\n        // actual handling\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class GetAsFarAsPossible implements Runnable {\n\n    private final List\u003cTask\u003e tasks = new ArrayList\u003c\u003e();\n\n    @Override\n    public void run() {\n        for (Task task : tasks) {\n            if (Thread.currentThread().isInterrupted()) {\n                return;\n            }\n            handle(task);\n        }\n    }\n\n    private void handle(Task task) {\n        // actual handling\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Thread Interruption Stopping Threads",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}