{
  "ID": "40fa9706-67bc-4b84-b3af-45776cec8f75",
  "Root": {
    "alive": true,
    "content": [
      "46dd1f30-3325-4175-99f0-5b295329daa1",
      "237e6a75-de19-494e-b398-ddf60a59d797",
      "f6289e65-a8f0-4502-a194-d157ebc3f055",
      "67ac5dd6-c5e7-459b-ba0e-911780e48ff9",
      "b822b7a2-9d9b-4d03-b737-3a14f8a1231e",
      "e708e639-0c65-4f31-9c5b-e166a51edac4",
      "b9be3f1f-5216-4685-b6aa-ec21fbe3493c",
      "532c57b3-c839-431b-871b-e0fde398fbf5",
      "21789c73-0c1f-43c7-9119-298dc8d1e89f",
      "7eebf1ca-db48-4dd9-a7d5-3792cf260616",
      "af390249-3d7c-4db0-a7fc-efa9389dafc6",
      "1427df3d-6f38-4409-a636-cfa1ab3dbcc2",
      "96e4df5d-cea8-46f2-aa45-57d6fdcc461c",
      "4089c44d-aea8-4016-90a9-6b2acd01e501",
      "10e84be9-4533-4cba-9911-1cb1c7eea3f4",
      "051b9bb1-cffa-483d-a93f-22c05b07ab91"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460814056,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551741664649,
    "parent_id": "6c6c87a4-551e-4cdd-b523-66ee2c5d11cb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Relational Operators"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814051,
        "id": "46dd1f30-3325-4175-99f0-5b295329daa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814051,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operators "
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are binary operators for comparing numeric types. The meaning of the operators is as you would expect. For example, if "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are declared as any of "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or the corresponding boxed types:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operators "
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": " are binary operators for comparing numeric types. The meaning of the operators is as you would expect. For example, if "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " are declared as any of "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " or the corresponding boxed types:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814053,
        "id": "237e6a75-de19-494e-b398-ddf60a59d797",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814053,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "- `a \u003c b` tests if the value of `a` is less than the value of `b`. \n- `a \u003c= b` tests if the value of `a` is less than or equal to the value of `b`. \n- `a \u003e b` tests if the value of `a` is greater than the value of `b`. \n- `a \u003e= b` tests if the value of `a` is greater than or equal to the value of `b`."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "- `a \u003c b` tests if the value of `a` is less than the value of `b`. \n- `a \u003c= b` tests if the value of `a` is less than or equal to the value of `b`. \n- `a \u003e b` tests if the value of `a` is greater than the value of `b`. \n- `a \u003e= b` tests if the value of `a` is greater than or equal to the value of `b`.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "f6289e65-a8f0-4502-a194-d157ebc3f055",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result type for these operators is "
            ],
            [
              "boolean",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in all cases."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result type for these operators is "
          },
          {
            "Text": "boolean",
            "AttrFlags": 2
          },
          {
            "Text": " in all cases."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "67ac5dd6-c5e7-459b-ba0e-911780e48ff9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Relational operators can be used to compare numbers with different types. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Relational operators can be used to compare numbers with different types. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "b822b7a2-9d9b-4d03-b737-3a14f8a1231e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "int i = 1;\nlong l = 2;\nif (i \u003c l) {\n    System.out.println(\"i is smaller\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int i = 1;\nlong l = 2;\nif (i \u003c l) {\n    System.out.println(\"i is smaller\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "e708e639-0c65-4f31-9c5b-e166a51edac4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Relational operators can be used when either or both numbers are instances of boxed numeric types. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Relational operators can be used when either or both numbers are instances of boxed numeric types. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "b9be3f1f-5216-4685-b6aa-ec21fbe3493c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Integer i = 1;   // 1 is autoboxed to an Integer\nInteger j = 2;   // 2 is autoboxed to an Integer\nif (i \u003c j) {\n    System.out.println(\"i is smaller\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Integer i = 1;   // 1 is autoboxed to an Integer\nInteger j = 2;   // 2 is autoboxed to an Integer\nif (i \u003c j) {\n    System.out.println(\"i is smaller\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "532c57b3-c839-431b-871b-e0fde398fbf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The precise behavior is summarized as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The precise behavior is summarized as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814054,
        "id": "21789c73-0c1f-43c7-9119-298dc8d1e89f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814054,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one of the operands is a boxed type, it is unboxed."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one of the operands is a boxed type, it is unboxed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814055,
        "id": "7eebf1ca-db48-4dd9-a7d5-3792cf260616",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814055,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If either of the operands now a "
            ],
            [
              "byte",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "short",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "char",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is promoted to an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If either of the operands now a "
          },
          {
            "Text": "byte",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "short",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "char",
            "AttrFlags": 2
          },
          {
            "Text": ", it is promoted to an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814055,
        "id": "af390249-3d7c-4db0-a7fc-efa9389dafc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814055,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the types of the operands are not the same, then the operand with the “smaller” type is promoted to the “larger” type."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the types of the operands are not the same, then the operand with the “smaller” type is promoted to the “larger” type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814055,
        "id": "1427df3d-6f38-4409-a636-cfa1ab3dbcc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814055,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The comparison is performed on the resulting "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "long",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " values."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The comparison is performed on the resulting "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "long",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814056,
        "id": "96e4df5d-cea8-46f2-aa45-57d6fdcc461c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814056,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You need to be careful with relational comparisons that involve floating point numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You need to be careful with relational comparisons that involve floating point numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814056,
        "id": "4089c44d-aea8-4016-90a9-6b2acd01e501",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814056,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Expressions that compute floating point numbers often incur rounding errors due to the fact that the computer floating-point representations have limited precision."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Expressions that compute floating point numbers often incur rounding errors due to the fact that the computer floating-point representations have limited precision."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814056,
        "id": "10e84be9-4533-4cba-9911-1cb1c7eea3f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814056,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When comparing an integer type and a floating point type, the conversion of the integer to floating point can also lead to rounding errors."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "When comparing an integer type and a floating point type, the conversion of the integer to floating point can also lead to rounding errors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460814056,
        "id": "051b9bb1-cffa-483d-a93f-22c05b07ab91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460814056,
        "parent_id": "40fa9706-67bc-4b84-b3af-45776cec8f75",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, Java does bit support the use of relational operators with any types other than the ones listed above. For example, you "
            ],
            [
              "cannot",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " use these operators to compare strings, arrays of numbers, and so on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, Java does bit support the use of relational operators with any types other than the ones listed above. For example, you "
          },
          {
            "Text": "cannot",
            "AttrFlags": 4
          },
          {
            "Text": " use these operators to compare strings, arrays of numbers, and so on."
          }
        ]
      }
    ],
    "title": "The Relational Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}