{
  "ID": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
  "Root": {
    "alive": true,
    "content": [
      "453626ed-2499-4d3b-873e-b6696c056c5e",
      "694e9057-4604-46cd-843d-5b9af9762ac8",
      "0b3a234e-9879-4049-97ec-dea4fb625626",
      "c169cc04-4d9d-4ac2-a322-dc5cdc5947ea",
      "7aaf8f80-13bf-4679-9f7c-3fb277b7110f",
      "ddebb60e-f5ab-45ec-9fc6-4d9926209c82",
      "0ba6d45b-b2d1-4539-96ca-39a2be226483",
      "62f6a179-7936-4d3d-87a6-6b841e402dfd",
      "dbbc95c7-0374-4e8c-844a-caeaa308bd8b",
      "c34577a0-6188-4920-a8d8-dd89f3d2cabe",
      "627e603c-42cb-41a9-ae32-a6c5e1cf744a",
      "be54eb0d-60e6-49a0-9ce2-99d8a4a56949",
      "d0485353-5c4a-4617-befb-d34c1f4557d9",
      "6a511fa8-14b2-4e72-86a2-01645001759c",
      "934ced78-b76f-43a4-9926-ab5fcc2748cc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461540117,
    "id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461540117,
    "parent_id": "0bf58cac-010f-4b78-ae8d-b08f7e1fc917",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Memory leaks in Java"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540114,
        "id": "453626ed-2499-4d3b-873e-b6696c056c5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540114,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the "
            ],
            [
              "Garbage collection",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/2804/java-memory-management/9473/garbage-collection#t=201610151259592490802"
                ]
              ]
            ],
            [
              " example, we implied that Java solves the problem of memory leaks. This is not actually true. A Java program can leak memory, though the causes of the leaks are rather different."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the "
          },
          {
            "Text": "Garbage collection",
            "Link": "http://stackoverflow.com/documentation/java/2804/java-memory-management/9473/garbage-collection#t=201610151259592490802"
          },
          {
            "Text": " example, we implied that Java solves the problem of memory leaks. This is not actually true. A Java program can leak memory, though the causes of the leaks are rather different."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540115,
        "id": "694e9057-4604-46cd-843d-5b9af9762ac8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540115,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reachable objects can leak"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reachable objects can leak"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540115,
        "id": "0b3a234e-9879-4049-97ec-dea4fb625626",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540115,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following naive stack implementation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following naive stack implementation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540115,
        "id": "c169cc04-4d9d-4ac2-a322-dc5cdc5947ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540115,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class NaiveStack {\n    private Object[] stack = new Object[100];\n    private int top = 0;\n\n    public void push(Object obj) {\n        if (top \u003e= stack.length) {\n            throw new StackException(\"stack overflow\");\n        }\n        stack[top++] = obj;\n    }\n\n    public Object pop() {\n        if (top \u003c= 0) {\n            throw new StackException(\"stack underflow\");\n        }\n        return stack[--top];\n    }\n\n    public boolean isEmpty() {\n        return top == 0;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class NaiveStack {\n    private Object[] stack = new Object[100];\n    private int top = 0;\n\n    public void push(Object obj) {\n        if (top \u003e= stack.length) {\n            throw new StackException(\"stack overflow\");\n        }\n        stack[top++] = obj;\n    }\n\n    public Object pop() {\n        if (top \u003c= 0) {\n            throw new StackException(\"stack underflow\");\n        }\n        return stack[--top];\n    }\n\n    public boolean isEmpty() {\n        return top == 0;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540116,
        "id": "7aaf8f80-13bf-4679-9f7c-3fb277b7110f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540116,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you "
            ],
            [
              "push",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " an object and then immediately "
            ],
            [
              "pop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it, there will still be a reference to the object in the "
            ],
            [
              "stack",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you "
          },
          {
            "Text": "push",
            "AttrFlags": 2
          },
          {
            "Text": " an object and then immediately "
          },
          {
            "Text": "pop",
            "AttrFlags": 2
          },
          {
            "Text": " it, there will still be a reference to the object in the "
          },
          {
            "Text": "stack",
            "AttrFlags": 2
          },
          {
            "Text": " array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540116,
        "id": "ddebb60e-f5ab-45ec-9fc6-4d9926209c82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540116,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The logic of the stack implementation means that that reference cannot be returned to a client of the API. If an object has been popped then we can prove that it cannot "
            ],
            [
              "“be accessed in any potential continuing computation from any live thread”",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The problem is that a current generation JVM cannot prove this. Current generation JVMs do not consider the logic of the program in determining whether references are reachable. (For a start, it is not practical.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The logic of the stack implementation means that that reference cannot be returned to a client of the API. If an object has been popped then we can prove that it cannot "
          },
          {
            "Text": "“be accessed in any potential continuing computation from any live thread”",
            "AttrFlags": 4
          },
          {
            "Text": ". The problem is that a current generation JVM cannot prove this. Current generation JVMs do not consider the logic of the program in determining whether references are reachable. (For a start, it is not practical.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540116,
        "id": "0ba6d45b-b2d1-4539-96ca-39a2be226483",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540116,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But setting aside the issue of what "
            ],
            [
              "reachability",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " really means, we clearly have a situation here where the "
            ],
            [
              "NaiveStack",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation is “hanging onto” objects that ought to be reclaimed. That is a memory leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But setting aside the issue of what "
          },
          {
            "Text": "reachability",
            "AttrFlags": 4
          },
          {
            "Text": " really means, we clearly have a situation here where the "
          },
          {
            "Text": "NaiveStack",
            "AttrFlags": 2
          },
          {
            "Text": " implementation is “hanging onto” objects that ought to be reclaimed. That is a memory leak."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540116,
        "id": "62f6a179-7936-4d3d-87a6-6b841e402dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540116,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, the solution is straightforward:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, the solution is straightforward:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540116,
        "id": "dbbc95c7-0374-4e8c-844a-caeaa308bd8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540116,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public Object pop() {\n    if (top \u003c= 0) {\n        throw new StackException(\"stack underflow\");\n    }\n    Object popped = stack[--top];\n    stack[top] = null;              // Overwrite popped reference with null.\n    return popped;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public Object pop() {\n    if (top \u003c= 0) {\n        throw new StackException(\"stack underflow\");\n    }\n    Object popped = stack[--top];\n    stack[top] = null;              // Overwrite popped reference with null.\n    return popped;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540117,
        "id": "c34577a0-6188-4920-a8d8-dd89f3d2cabe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540117,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Caches can be memory leaks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Caches can be memory leaks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540117,
        "id": "627e603c-42cb-41a9-ae32-a6c5e1cf744a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540117,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common strategy for improving service performance is to cache results. The idea is that you keep a record of common requests and their results in an in-memory data structure known as a cache. Then, each time a request is made, you lookup the request in the cache. If the lookup succeeds, you return the corresponding saved results."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common strategy for improving service performance is to cache results. The idea is that you keep a record of common requests and their results in an in-memory data structure known as a cache. Then, each time a request is made, you lookup the request in the cache. If the lookup succeeds, you return the corresponding saved results."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540117,
        "id": "be54eb0d-60e6-49a0-9ce2-99d8a4a56949",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540117,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This strategy can be very effective if implemented properly. However, if implemented incorrectly, a cache can be a memory leak. Consider the following example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This strategy can be very effective if implemented properly. However, if implemented incorrectly, a cache can be a memory leak. Consider the following example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540117,
        "id": "d0485353-5c4a-4617-befb-d34c1f4557d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540117,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class RequestHandler {\n    private Map\u003cTask, Result\u003e cache = new HashMap\u003c\u003e();\n\n    public Result doRequest(Task task) {\n        Result result = cache.get(task);\n        if (result == null) {\n            result == doRequestProcessing(task);\n            cache.put(task, result);\n        }\n        return result;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class RequestHandler {\n    private Map\u003cTask, Result\u003e cache = new HashMap\u003c\u003e();\n\n    public Result doRequest(Task task) {\n        Result result = cache.get(task);\n        if (result == null) {\n            result == doRequestProcessing(task);\n            cache.put(task, result);\n        }\n        return result;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540117,
        "id": "6a511fa8-14b2-4e72-86a2-01645001759c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540117,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem with this code is that while any call to "
            ],
            [
              "doRequest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could add a new entry to the cache, there is nothing to remove them. If the service is continually getting different tasks, then the cache will eventually consume all available memory. This is a form of memory leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem with this code is that while any call to "
          },
          {
            "Text": "doRequest",
            "AttrFlags": 2
          },
          {
            "Text": " could add a new entry to the cache, there is nothing to remove them. If the service is continually getting different tasks, then the cache will eventually consume all available memory. This is a form of memory leak."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461540117,
        "id": "934ced78-b76f-43a4-9926-ab5fcc2748cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461540117,
        "parent_id": "ea49963b-3fc6-434e-84a5-61d58c5d8637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One approach to solving this is to use a cache with a maximum size, and throw out old entries when the cache exceeds the maximum. (Throwing out the least recently used entry is a good strategy.) Another approach is to build the cache using "
            ],
            [
              "WeakHashMap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so that the JVM can evict cache entries if the heap starts getting too full."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One approach to solving this is to use a cache with a maximum size, and throw out old entries when the cache exceeds the maximum. (Throwing out the least recently used entry is a good strategy.) Another approach is to build the cache using "
          },
          {
            "Text": "WeakHashMap",
            "AttrFlags": 2
          },
          {
            "Text": " so that the JVM can evict cache entries if the heap starts getting too full."
          }
        ]
      }
    ],
    "title": "030 Memory leaks in Java"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}