{
  "ID": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
  "Root": {
    "alive": true,
    "content": [
      "ea493566-75ad-44c3-9a55-f1793ada22e8",
      "368b02b0-cfc3-4b97-ad9d-0dd0bb4ad94c",
      "4a48483c-a63d-4838-88c3-cbcd0b083472",
      "e24a362d-4cfb-4d83-a2e7-928c979ca820",
      "bbfe5254-8da2-4df8-b06c-b045e45623e8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460150982,
    "id": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460150982,
    "parent_id": "b352327f-4045-48dc-891e-ceda03965ca0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "070 Lambdas and memory utilization"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150979,
        "id": "ea493566-75ad-44c3-9a55-f1793ada22e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150979,
        "parent_id": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since Java lambdas are closures, they can “capture” the values of variables in the enclosing lexical scope. While not all lambdas capture anything – simple lambdas like "
            ],
            [
              "s -\u003e s.length()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " capture nothing and are called "
            ],
            [
              "stateless",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " – capturing lambdas require a temporary object to hold the captured variables. In this code snippet, the lambda "
            ],
            [
              "() -\u003e j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a capturing lambda, and may cause an object to be allocated when it is evaluated:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since Java lambdas are closures, they can “capture” the values of variables in the enclosing lexical scope. While not all lambdas capture anything – simple lambdas like "
          },
          {
            "Text": "s -\u003e s.length()",
            "AttrFlags": 2
          },
          {
            "Text": " capture nothing and are called "
          },
          {
            "Text": "stateless",
            "AttrFlags": 4
          },
          {
            "Text": " – capturing lambdas require a temporary object to hold the captured variables. In this code snippet, the lambda "
          },
          {
            "Text": "() -\u003e j",
            "AttrFlags": 2
          },
          {
            "Text": " is a capturing lambda, and may cause an object to be allocated when it is evaluated:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150981,
        "id": "368b02b0-cfc3-4b97-ad9d-0dd0bb4ad94c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150981,
        "parent_id": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void main(String[] args) throws Exception {\n    for (int i = 0; i \u003c 1000000000; i++) {\n        int j = i;\n        doSomethingWithLambda(() -\u003e j);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void main(String[] args) throws Exception {\n    for (int i = 0; i \u003c 1000000000; i++) {\n        int j = i;\n        doSomethingWithLambda(() -\u003e j);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150981,
        "id": "4a48483c-a63d-4838-88c3-cbcd0b083472",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150981,
        "parent_id": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Although it might not be immediately obvious since the "
            ],
            [
              "new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword doesn’t appear anywhere in the snippet, this code is liable to create 1,000,000,000 separate objects to represent the instances of the "
            ],
            [
              "() -\u003e j",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " lambda expression. However, it should also be noted that future versions of Java1 may be able to optimize this so that "
            ],
            [
              "at runtime",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the lambda instances were reused, or were represented in some other way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Although it might not be immediately obvious since the "
          },
          {
            "Text": "new",
            "AttrFlags": 2
          },
          {
            "Text": " keyword doesn’t appear anywhere in the snippet, this code is liable to create 1,000,000,000 separate objects to represent the instances of the "
          },
          {
            "Text": "() -\u003e j",
            "AttrFlags": 2
          },
          {
            "Text": " lambda expression. However, it should also be noted that future versions of Java1 may be able to optimize this so that "
          },
          {
            "Text": "at runtime",
            "AttrFlags": 4
          },
          {
            "Text": " the lambda instances were reused, or were represented in some other way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150982,
        "id": "e24a362d-4cfb-4d83-a2e7-928c979ca820",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150982,
        "parent_id": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460150982,
        "id": "bbfe5254-8da2-4df8-b06c-b045e45623e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460150982,
        "parent_id": "93041aca-9bb5-44fc-8fe1-ecaddd725540",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 - For instance, Java 9 introduces an optional “link” phase to the Java build sequence which will provide the opportunity for doing global optimizations like this."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 - For instance, Java 9 introduces an optional “link” phase to the Java build sequence which will provide the opportunity for doing global optimizations like this."
          }
        ]
      }
    ],
    "title": "070 Lambdas and memory utilization"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}