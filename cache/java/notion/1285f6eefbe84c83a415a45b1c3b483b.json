{
  "ID": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
  "Root": {
    "alive": true,
    "content": [
      "7f20ca73-1015-478b-ab18-540986238276",
      "f07934e1-685c-4200-bc99-c33876c0a87e",
      "97d5db1e-cc6e-4b16-a9b9-f285dd10c102",
      "ef515854-2fa7-4481-9926-a397adf4e38d",
      "5f7f4e3f-0fe6-4b05-98f5-a958b92b0764",
      "822b21cf-59c3-4f83-95e4-5a2a1cf710c8",
      "21462d8d-412a-4488-96e7-3d833e084ec9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460429145,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551745334939,
    "parent_id": "9b718882-2700-4d99-b7fa-082a618f32ef",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Semaphore"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429143,
        "id": "7f20ca73-1015-478b-ab18-540986238276",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429143,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A Semaphore is a high-level synchronizer that maintains a set of "
            ],
            [
              "permits",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that can be acquired and released by threads. A Semaphore can be imagined as a counter of "
            ],
            [
              "permits",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that will be decremented when a thread acquires, and incremented when a thread releases. If the amount of "
            ],
            [
              "permits",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when a thread attempts to acquire, then the thread will block until a permit is made available (or until the thread is interrupted)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A Semaphore is a high-level synchronizer that maintains a set of "
          },
          {
            "Text": "permits",
            "AttrFlags": 4
          },
          {
            "Text": " that can be acquired and released by threads. A Semaphore can be imagined as a counter of "
          },
          {
            "Text": "permits",
            "AttrFlags": 4
          },
          {
            "Text": " that will be decremented when a thread acquires, and incremented when a thread releases. If the amount of "
          },
          {
            "Text": "permits",
            "AttrFlags": 4
          },
          {
            "Text": " is "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " when a thread attempts to acquire, then the thread will block until a permit is made available (or until the thread is interrupted)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429144,
        "id": "f07934e1-685c-4200-bc99-c33876c0a87e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429144,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A semaphore is initialized as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A semaphore is initialized as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429144,
        "id": "97d5db1e-cc6e-4b16-a9b9-f285dd10c102",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429144,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Semaphore semaphore = new Semaphore(1); // The int value being the number of permits",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Semaphore semaphore = new Semaphore(1); // The int value being the number of permits",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429144,
        "id": "ef515854-2fa7-4481-9926-a397adf4e38d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429144,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Semaphore constructor accepts an additional boolean parameter for fairness. When set false, this class makes no guarantees about the order in which threads acquire permits. When fairness is set true, the semaphore guarantees that threads invoking any of the acquire methods are selected to obtain permits in the order in which their invocation of those methods was processed. It is declared in the following manner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Semaphore constructor accepts an additional boolean parameter for fairness. When set false, this class makes no guarantees about the order in which threads acquire permits. When fairness is set true, the semaphore guarantees that threads invoking any of the acquire methods are selected to obtain permits in the order in which their invocation of those methods was processed. It is declared in the following manner:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429144,
        "id": "5f7f4e3f-0fe6-4b05-98f5-a958b92b0764",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429144,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Semaphore semaphore = new Semaphore(1, true);",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Semaphore semaphore = new Semaphore(1, true);",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429145,
        "id": "822b21cf-59c3-4f83-95e4-5a2a1cf710c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429145,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now let’s look at an example from javadocs, where Semaphore is used to control access to a pool of items. A Semaphore is used in this example to provide blocking functionality in order to ensure that there are always items to be obtained when "
            ],
            [
              "getItem()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now let’s look at an example from javadocs, where Semaphore is used to control access to a pool of items. A Semaphore is used in this example to provide blocking functionality in order to ensure that there are always items to be obtained when "
          },
          {
            "Text": "getItem()",
            "AttrFlags": 2
          },
          {
            "Text": " is called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460429145,
        "id": "21462d8d-412a-4488-96e7-3d833e084ec9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460429145,
        "parent_id": "1285f6ee-fbe8-4c83-a415-a45b1c3b483b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Pool {\n    /*\n     * Note that this DOES NOT bound the amount that may be released!\n     * This is only a starting value for the Semaphore and has no other\n     * significant meaning UNLESS you enforce this inside of the\n     * getNextAvailableItem() and markAsUnused() methods\n     */\n    private static final int MAX_AVAILABLE = 100;\n    private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);\n\n    /**\n     * Obtains the next available item and reduces the permit count by 1. \n     * If there are no items available, block.\n     */\n    public Object getItem() throws InterruptedException {\n        available.acquire();\n        return getNextAvailableItem();\n    }\n\n    /**\n     * Puts the item into the pool and add 1 permit.\n     */\n    public void putItem(Object x) {\n        if (markAsUnused(x))\n            available.release();\n    }\n\n    private Object getNextAvailableItem() {\n        // Implementation\n    }\n\n    private boolean markAsUnused(Object o) {\n        // Implementation\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Pool {\n    /*\n     * Note that this DOES NOT bound the amount that may be released!\n     * This is only a starting value for the Semaphore and has no other\n     * significant meaning UNLESS you enforce this inside of the\n     * getNextAvailableItem() and markAsUnused() methods\n     */\n    private static final int MAX_AVAILABLE = 100;\n    private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);\n\n    /**\n     * Obtains the next available item and reduces the permit count by 1. \n     * If there are no items available, block.\n     */\n    public Object getItem() throws InterruptedException {\n        available.acquire();\n        return getNextAvailableItem();\n    }\n\n    /**\n     * Puts the item into the pool and add 1 permit.\n     */\n    public void putItem(Object x) {\n        if (markAsUnused(x))\n            available.release();\n    }\n\n    private Object getNextAvailableItem() {\n        // Implementation\n    }\n\n    private boolean markAsUnused(Object o) {\n        // Implementation\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Semaphore",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}