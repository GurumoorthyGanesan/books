{
  "ID": "0c63950a-6681-4bd5-92bf-f15342148728",
  "Root": {
    "alive": true,
    "content": [
      "d6f41243-f4c9-4cae-b4fa-8b77f71e3aa1",
      "4d38c6f8-3d6f-433f-9d2a-b06b8a20e5ac",
      "512a3ff9-e296-47df-b631-5cbb25e6a11b",
      "a12bfd76-9c5a-42ce-9d77-a4bab0182d04",
      "74c1559d-5486-458c-b17e-5a5c892ed6b3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518795535,
    "id": "0c63950a-6681-4bd5-92bf-f15342148728",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518795535,
    "parent_id": "08507a75-1faa-4949-96a5-ebc8359aa340",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "030 Uses of Unsafe"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518795530,
        "id": "d6f41243-f4c9-4cae-b4fa-8b77f71e3aa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518795530,
        "parent_id": "0c63950a-6681-4bd5-92bf-f15342148728",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some uses of unsafe is s follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some uses of unsafe is s follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518795534,
        "id": "4d38c6f8-3d6f-433f-9d2a-b06b8a20e5ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518795534,
        "parent_id": "0c63950a-6681-4bd5-92bf-f15342148728",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use | API |\n—— | —— |\nOff heap / direct memory allocation, reallocation and deallocation | "
            ],
            [
              "allocateMemory(bytes)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "reallocateMemory(address, bytes)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "freeMemory(address)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nMemory fences | "
            ],
            [
              "loadFence()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "storeFence()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "fullFence()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nParking current thread | "
            ],
            [
              "park(isAbsolute, time)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "unpark(thread)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nDirect field and or memory access | "
            ],
            [
              "get*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "put*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " family of methods |\nThrowing unchecked exceptions | "
            ],
            [
              "throwException(e)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nCAS and Atomic Operations | "
            ],
            [
              "compareAndSwap*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " family of methods |\nSetting out memory | "
            ],
            [
              "setMemory",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nVolatile or concurrent operations | "
            ],
            [
              "get*Volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "put*Volatile",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "putOrdered*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use | API |\n—— | —— |\nOff heap / direct memory allocation, reallocation and deallocation | "
          },
          {
            "Text": "allocateMemory(bytes)",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "reallocateMemory(address, bytes)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "freeMemory(address)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nMemory fences | "
          },
          {
            "Text": "loadFence()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "storeFence()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "fullFence()",
            "AttrFlags": 2
          },
          {
            "Text": " |\nParking current thread | "
          },
          {
            "Text": "park(isAbsolute, time)",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "unpark(thread)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nDirect field and or memory access | "
          },
          {
            "Text": "get*",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "put*",
            "AttrFlags": 2
          },
          {
            "Text": " family of methods |\nThrowing unchecked exceptions | "
          },
          {
            "Text": "throwException(e)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nCAS and Atomic Operations | "
          },
          {
            "Text": "compareAndSwap*",
            "AttrFlags": 2
          },
          {
            "Text": " family of methods |\nSetting out memory | "
          },
          {
            "Text": "setMemory",
            "AttrFlags": 2
          },
          {
            "Text": " |\nVolatile or concurrent operations | "
          },
          {
            "Text": "get*Volatile",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "put*Volatile",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "putOrdered*",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518795534,
        "id": "512a3ff9-e296-47df-b631-5cbb25e6a11b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518795534,
        "parent_id": "0c63950a-6681-4bd5-92bf-f15342148728",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The get and put family of methods are relative to a given object. If the object is null then it is treated as an absolute address."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The get and put family of methods are relative to a given object. If the object is null then it is treated as an absolute address."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518795534,
        "id": "a12bfd76-9c5a-42ce-9d77-a4bab0182d04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518795534,
        "parent_id": "0c63950a-6681-4bd5-92bf-f15342148728",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Putting a value to a field\nprotected static long fieldOffset = UNSAFE.objectFieldOffset(getClass().getField(\"theField\"));\nUNSAFE.putLong(this, fieldOffset , newValue);\n\n// Puting an absolute value\n UNSAFE.putLong(null, address, newValue);\n UNSAFE.putLong(address, newValue);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Putting a value to a field\nprotected static long fieldOffset = UNSAFE.objectFieldOffset(getClass().getField(\"theField\"));\nUNSAFE.putLong(this, fieldOffset , newValue);\n\n// Puting an absolute value\n UNSAFE.putLong(null, address, newValue);\n UNSAFE.putLong(address, newValue);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518795535,
        "id": "74c1559d-5486-458c-b17e-5a5c892ed6b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518795535,
        "parent_id": "0c63950a-6681-4bd5-92bf-f15342148728",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some methods are only defined for int and longs. You can use these methods on floats and doubles using "
            ],
            [
              "floatToRawIntBits",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "intBitsToFloat,",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "doubleToRawLongBits"
            ],
            [
              ",",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "longBitsToDouble`"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some methods are only defined for int and longs. You can use these methods on floats and doubles using "
          },
          {
            "Text": "floatToRawIntBits",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "intBitsToFloat,",
            "AttrFlags": 2
          },
          {
            "Text": "doubleToRawLongBits"
          },
          {
            "Text": ",",
            "AttrFlags": 2
          },
          {
            "Text": "longBitsToDouble`"
          }
        ]
      }
    ],
    "title": "030 Uses of Unsafe"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}