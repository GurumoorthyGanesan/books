{
  "ID": "0a7b16f6-c85e-4448-9a43-42da168b056c",
  "Root": {
    "alive": true,
    "content": [
      "7307bdec-10d8-466a-982f-387d49eb28f6",
      "3459905e-4de3-4920-93b7-c54251d6ddc5",
      "45c6085f-122e-458f-987c-0f74299e5fb3",
      "a6849719-4c2f-495a-889a-9798b7719b93",
      "a7a28699-b91d-4b10-8874-c67e486ae216",
      "a9e24683-63d0-47f1-9776-f160750e0ddf",
      "bd5b8b59-8314-4765-9ded-b91449261b4f",
      "7ab8893b-e523-4bb7-b1b0-30e15fe3cc47",
      "a429a6bb-3765-4180-8b38-64510e34e7a4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550518763492,
    "id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550518763492,
    "parent_id": "d73cc3a8-7897-4311-9f5f-f3e15e294c43",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Creating Atomic Types"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763489,
        "id": "7307bdec-10d8-466a-982f-387d49eb28f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763489,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For simple multi-threaded code, using "
            ],
            [
              "synchronization",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/121/concurrent-programming-threads/7299/synchronization#t=201610211859175882372"
                ]
              ]
            ],
            [
              " is acceptable. However, using synchronization does have a liveness impact, and as a codebase becomes more complex, the likelihood goes up that you will end up with "
            ],
            [
              "Deadlock",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/tutorial/essential/concurrency/deadlock.html"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Starvation, or Livelock",
              [
                [
                  "a",
                  "https://docs.oracle.com/javase/tutorial/essential/concurrency/starvelive.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For simple multi-threaded code, using "
          },
          {
            "Text": "synchronization",
            "Link": "http://stackoverflow.com/documentation/java/121/concurrent-programming-threads/7299/synchronization#t=201610211859175882372"
          },
          {
            "Text": " is acceptable. However, using synchronization does have a liveness impact, and as a codebase becomes more complex, the likelihood goes up that you will end up with "
          },
          {
            "Text": "Deadlock",
            "Link": "https://docs.oracle.com/javase/tutorial/essential/concurrency/deadlock.html"
          },
          {
            "Text": ", "
          },
          {
            "Text": "Starvation, or Livelock",
            "Link": "https://docs.oracle.com/javase/tutorial/essential/concurrency/starvelive.html"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763490,
        "id": "3459905e-4de3-4920-93b7-c54251d6ddc5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763490,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In cases of more complex concurrency, using Atomic Variables is often a better alternative, as it allows an individual variable to be accessed in a thread-safe manner without the overhead of using synchronized methods or code blocks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In cases of more complex concurrency, using Atomic Variables is often a better alternative, as it allows an individual variable to be accessed in a thread-safe manner without the overhead of using synchronized methods or code blocks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763490,
        "id": "45c6085f-122e-458f-987c-0f74299e5fb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763490,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating an "
            ],
            [
              "AtomicInteger",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating an "
          },
          {
            "Text": "AtomicInteger",
            "AttrFlags": 2
          },
          {
            "Text": " type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763490,
        "id": "a6849719-4c2f-495a-889a-9798b7719b93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763490,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "AtomicInteger aInt = new AtomicInteger() // Create with default value 0\n\nAtomicInteger aInt = new AtomicInteger(1) // Create with initial value 1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "AtomicInteger aInt = new AtomicInteger() // Create with default value 0\n\nAtomicInteger aInt = new AtomicInteger(1) // Create with initial value 1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763490,
        "id": "a7a28699-b91d-4b10-8874-c67e486ae216",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763490,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly for other instance types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly for other instance types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763490,
        "id": "a9e24683-63d0-47f1-9776-f160750e0ddf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763490,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "AtomicIntegerArray aIntArray = new AtomicIntegerArray(10) // Create array of specific length\nAtomicIntegerArray aIntArray = new AtomicIntegerArray(new int[] {1, 2, 3}) // Initialize array with another array"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "AtomicIntegerArray aIntArray = new AtomicIntegerArray(10) // Create array of specific length\nAtomicIntegerArray aIntArray = new AtomicIntegerArray(new int[] {1, 2, 3}) // Initialize array with another array",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763491,
        "id": "bd5b8b59-8314-4765-9ded-b91449261b4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763491,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly for other atomic types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly for other atomic types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763491,
        "id": "7ab8893b-e523-4bb7-b1b0-30e15fe3cc47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763491,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a notable exception that there is no "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " types. These can be simulated through the use of "
            ],
            [
              "Float.floatToIntBits(float)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Float.intBitsToFloat(int)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as well as "
            ],
            [
              "Double.doubleToLongBits(double)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Double.longBitsToDouble(long)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for doubles."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a notable exception that there is no "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "double",
            "AttrFlags": 2
          },
          {
            "Text": " types. These can be simulated through the use of "
          },
          {
            "Text": "Float.floatToIntBits(float)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Float.intBitsToFloat(int)",
            "AttrFlags": 2
          },
          {
            "Text": " for "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " as well as "
          },
          {
            "Text": "Double.doubleToLongBits(double)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Double.longBitsToDouble(long)",
            "AttrFlags": 2
          },
          {
            "Text": " for doubles."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550518763492,
        "id": "a429a6bb-3765-4180-8b38-64510e34e7a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550518763492,
        "parent_id": "0a7b16f6-c85e-4448-9a43-42da168b056c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you are willing to use "
            ],
            [
              "sun.misc.Unsafe",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you can use any primitive variable as atomic by using the atomic operation in "
            ],
            [
              "sun.misc.Unsafe",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". All primitive types should be converted or encoded in int or longs to so use it in this way. For more on this see: "
            ],
            [
              "sun.misc.Unsafe",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/java/6771/sun-misc-unsafe"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you are willing to use "
          },
          {
            "Text": "sun.misc.Unsafe",
            "AttrFlags": 2
          },
          {
            "Text": " you can use any primitive variable as atomic by using the atomic operation in "
          },
          {
            "Text": "sun.misc.Unsafe",
            "AttrFlags": 2
          },
          {
            "Text": ". All primitive types should be converted or encoded in int or longs to so use it in this way. For more on this see: "
          },
          {
            "Text": "sun.misc.Unsafe",
            "Link": "http://stackoverflow.com/documentation/java/6771/sun-misc-unsafe"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "010 Creating Atomic Types"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}