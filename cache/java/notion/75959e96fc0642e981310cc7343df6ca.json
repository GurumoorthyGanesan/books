{
  "ID": "75959e96-fc06-42e9-8131-0cc7343df6ca",
  "Root": {
    "alive": true,
    "content": [
      "ffc61cd9-b650-4555-970b-9decaa0ff2ea",
      "b84a233c-4b57-4b00-b9e2-1beaf76930de",
      "0bdc1a7a-97d4-4d73-8dae-7c12e9df5f10",
      "bc2ea0d9-1630-431d-ad68-37eec275a603",
      "8b4488a0-e788-4ca3-a558-febd424a6697",
      "5705cc6e-7954-4381-b181-e7bdbf5425a7",
      "b00e4a9e-af7c-47e1-9618-771d0f240bb7",
      "54e668ef-5b98-4e8b-9825-82d17098483b",
      "7e25f176-ec68-40e7-8b3d-5b5f154d3317",
      "416f9db9-3320-4e68-b6f7-c840312dbcb7",
      "94b06c4a-f660-4295-a44b-c9cdf6a036a8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550460805068,
    "id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550460805068,
    "parent_id": "6c6c87a4-551e-4cdd-b523-66ee2c5d11cb",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Operator Precedence"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805062,
        "id": "ffc61cd9-b650-4555-970b-9decaa0ff2ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805062,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When an expression contains multiple operators, it can potentially be read in different ways. For example, the mathematical expression "
            ],
            [
              "1 + 2 x 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could be read in two ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When an expression contains multiple operators, it can potentially be read in different ways. For example, the mathematical expression "
          },
          {
            "Text": "1 + 2 x 3",
            "AttrFlags": 2
          },
          {
            "Text": " could be read in two ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805066,
        "id": "b84a233c-4b57-4b00-b9e2-1beaf76930de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805066,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Add "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and multiply the result by "
            ],
            [
              "3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This gives the answer "
            ],
            [
              "9",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If we added parentheses, this would look like "
            ],
            [
              "( 1 + 2 ) x 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Add "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": " and multiply the result by "
          },
          {
            "Text": "3",
            "AttrFlags": 2
          },
          {
            "Text": ". This gives the answer "
          },
          {
            "Text": "9",
            "AttrFlags": 2
          },
          {
            "Text": ". If we added parentheses, this would look like "
          },
          {
            "Text": "( 1 + 2 ) x 3",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805066,
        "id": "0bdc1a7a-97d4-4d73-8dae-7c12e9df5f10",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805066,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Add "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the result of multiplying "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This gives the answer "
            ],
            [
              "7",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If we added parentheses, this would look like "
            ],
            [
              "1 + ( 2 x 3 )",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Add "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " to the result of multiplying "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "3",
            "AttrFlags": 2
          },
          {
            "Text": ". This gives the answer "
          },
          {
            "Text": "7",
            "AttrFlags": 2
          },
          {
            "Text": ". If we added parentheses, this would look like "
          },
          {
            "Text": "1 + ( 2 x 3 )",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805066,
        "id": "bc2ea0d9-1630-431d-ad68-37eec275a603",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805066,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In mathematics, the convention is to read the expression the second way. The general rule is that multiplication and division are done before addition and subtraction. When more advanced mathematical notation is used, either the meaning is either “self-evident” (to a trained mathematician!), or parentheses are added to disambiguate. In either case, the effectiveness of the notation to convey meaning depends on the intelligence and shared knowledge of the mathematicians."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In mathematics, the convention is to read the expression the second way. The general rule is that multiplication and division are done before addition and subtraction. When more advanced mathematical notation is used, either the meaning is either “self-evident” (to a trained mathematician!), or parentheses are added to disambiguate. In either case, the effectiveness of the notation to convey meaning depends on the intelligence and shared knowledge of the mathematicians."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805066,
        "id": "8b4488a0-e788-4ca3-a558-febd424a6697",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805066,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java has the same clear rules on how to read an expression, based on the "
            ],
            [
              "precedence",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of the operators that are used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java has the same clear rules on how to read an expression, based on the "
          },
          {
            "Text": "precedence",
            "AttrFlags": 4
          },
          {
            "Text": " of the operators that are used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805067,
        "id": "5705cc6e-7954-4381-b181-e7bdbf5425a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805067,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general, each operator is ascribed a "
            ],
            [
              "precedence",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " value; see the table below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general, each operator is ascribed a "
          },
          {
            "Text": "precedence",
            "AttrFlags": 4
          },
          {
            "Text": " value; see the table below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805067,
        "id": "b00e4a9e-af7c-47e1-9618-771d0f240bb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805067,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805067,
        "id": "54e668ef-5b98-4e8b-9825-82d17098483b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805067,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1 + 2 * 3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1 + 2 * 3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805067,
        "id": "7e25f176-ec68-40e7-8b3d-5b5f154d3317",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805067,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The precedence of "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is lower than the precedence of "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so the result of the expression is 7, not 9."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The precedence of "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " is lower than the precedence of "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ", so the result of the expression is 7, not 9."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805068,
        "id": "416f9db9-3320-4e68-b6f7-c840312dbcb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805068,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Description | Operators / constructs (primary) | Precedence | Associativity |\n–––––––––– | ——————————— | — | — |\nQualifierParenthesesInstance creationField accessArray accessMethod invocationMethod reference | name"
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "name"
            ],
            [
              "\\(",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr"
            ],
            [
              "\\)``new",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "primary"
            ],
            [
              ".",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "nameprimary"
            ],
            [
              "\\[",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr"
            ],
            [
              "\\]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "primary"
            ],
            [
              "\\(",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr, …"
            ],
            [
              "\\)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "primary"
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "name | 15 | Left to right |\nPost increment | expr"
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", expr"
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 14 | - |\nPre incrementUnaryCast1 | "
            ],
            [
              "++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr, "
            ],
            [
              "--",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr,"
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr, "
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr, "
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr, "
            ],
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr,"
            ],
            [
              "\\(",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "type"
            ],
            [
              "\\)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "expr | 13 | -Right to leftRight to left |\nMultiplicative | * / % | 12 | Left to right |\nAdditive | + - | 11 | Left to right |\nShift | \u003c\u003c \u003e\u003e \u003e\u003e\u003e | 10 | Left to right |\nRelational | \u003c \u003e \u003c= \u003e= "
            ],
            [
              "instanceof",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | 9 | Left to right |\nEquality | == != | 8 | Left to right |\nBitwise AND | \u0026 | 7 | Left to right |\nBitwise exclusive OR | ^ | 6 | Left to right |\nBitwise inclusive OR | | | 5 | Left to right |\nLogical AND | \u0026\u0026 | 4 | Left to right |\nLogical OR | || | 3 | Left to right |\nConditional1 | ? : | 2 | Right to left |\nAssignmentLambda1 | = *= /= %= += -= \u003c\u003c= \u003e\u003e= \u003e\u003e\u003e= \u0026= ^= |=-\u003e | 1 | Right to left |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Description | Operators / constructs (primary) | Precedence | Associativity |\n–––––––––– | ——————————— | — | — |\nQualifierParenthesesInstance creationField accessArray accessMethod invocationMethod reference | name"
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": "name"
          },
          {
            "Text": "\\(",
            "AttrFlags": 2
          },
          {
            "Text": "expr"
          },
          {
            "Text": "\\)``new",
            "AttrFlags": 2
          },
          {
            "Text": "primary"
          },
          {
            "Text": ".",
            "AttrFlags": 2
          },
          {
            "Text": "nameprimary"
          },
          {
            "Text": "\\[",
            "AttrFlags": 2
          },
          {
            "Text": "expr"
          },
          {
            "Text": "\\]",
            "AttrFlags": 2
          },
          {
            "Text": "primary"
          },
          {
            "Text": "\\(",
            "AttrFlags": 2
          },
          {
            "Text": "expr, …"
          },
          {
            "Text": "\\)",
            "AttrFlags": 2
          },
          {
            "Text": "primary"
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": "name | 15 | Left to right |\nPost increment | expr"
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": ", expr"
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": " | 14 | - |\nPre incrementUnaryCast1 | "
          },
          {
            "Text": "++",
            "AttrFlags": 2
          },
          {
            "Text": "expr, "
          },
          {
            "Text": "--",
            "AttrFlags": 2
          },
          {
            "Text": "expr,"
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": "expr, "
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": "expr, "
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": "expr, "
          },
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": "expr,"
          },
          {
            "Text": "\\(",
            "AttrFlags": 2
          },
          {
            "Text": "type"
          },
          {
            "Text": "\\)",
            "AttrFlags": 2
          },
          {
            "Text": "expr | 13 | -Right to leftRight to left |\nMultiplicative | * / % | 12 | Left to right |\nAdditive | + - | 11 | Left to right |\nShift | \u003c\u003c \u003e\u003e \u003e\u003e\u003e | 10 | Left to right |\nRelational | \u003c \u003e \u003c= \u003e= "
          },
          {
            "Text": "instanceof",
            "AttrFlags": 2
          },
          {
            "Text": " | 9 | Left to right |\nEquality | == != | 8 | Left to right |\nBitwise AND | \u0026 | 7 | Left to right |\nBitwise exclusive OR | ^ | 6 | Left to right |\nBitwise inclusive OR | | | 5 | Left to right |\nLogical AND | \u0026\u0026 | 4 | Left to right |\nLogical OR | || | 3 | Left to right |\nConditional1 | ? : | 2 | Right to left |\nAssignmentLambda1 | = *= /= %= += -= \u003c\u003c= \u003e\u003e= \u003e\u003e\u003e= \u0026= ^= |=-\u003e | 1 | Right to left |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550460805068,
        "id": "94b06c4a-f660-4295-a44b-c9cdf6a036a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550460805068,
        "parent_id": "75959e96-fc06-42e9-8131-0cc7343df6ca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "1 Lambda expression precedence is complex, as it can also occur after a cast, or as the third part of the conditional ternary operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "1 Lambda expression precedence is complex, as it can also occur after a cast, or as the third part of the conditional ternary operator."
          }
        ]
      }
    ],
    "title": "050 Operator Precedence"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}