{
  "ID": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
  "Root": {
    "alive": true,
    "content": [
      "0c415e0c-548a-48a0-959b-9e78597351b0",
      "11d60c8e-5ef3-451f-b3c7-47007714d806",
      "67b48f1f-c514-48e3-a447-f7b9517b3c96",
      "c28d7341-0f24-47ad-b3f2-1984773a9a53",
      "7f3aae85-1177-4958-a174-dea2e4971124",
      "89096af8-39ac-4c12-803e-312d8b7dbdc7",
      "0c21a53c-8a08-4b15-8da8-195716ca6333",
      "f9698db4-bb0a-4597-a96a-b1b0b989fabe",
      "2ed7e96f-98ef-41f3-a4a6-e17c9b9543c4",
      "92809b05-40c7-42cc-83a8-0bf3445ee2c8",
      "d02ba0c9-a966-47cb-b8c3-4af91a385a43",
      "b87641cb-d386-4f2a-a0f3-ab1d67290abc",
      "13d24986-9b97-4c65-97a3-bd1279cd013d",
      "9780a460-b06a-49d9-bf74-bad811c4e281",
      "7da1b306-b28b-46bf-865d-a357922612ec",
      "c151a9f2-7704-4998-b8e5-284e4ecef8b9",
      "d784e1d2-febd-44f4-b56d-67c4d3c1ebfb",
      "41e6efb7-4793-4703-97b6-94e222eeff08",
      "0658ede1-27e0-4c73-8e60-057976e7a02f",
      "ced91993-ddab-4636-8679-99bbeda75731",
      "480fe42b-9536-4a70-8a06-35ce1bcb862f",
      "46f6f193-1b10-49df-bd1b-e3e122bcb30a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550461151155,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550461151155,
    "parent_id": "6f2fa7ab-2d05-4439-ac96-63b175867e14",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "StackOverflowError recursion to loop"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151150,
        "id": "0c415e0c-548a-48a0-959b-9e78597351b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151150,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If a recursive call goes “too deep”, this results in a "
            ],
            [
              "StackOverflowError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Java allocates a new frame for every method call on its thread’s stack. However, the space of each thread’s stack is limited. Too many frames on the stack leads to the Stack Overflow (SO)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If a recursive call goes “too deep”, this results in a "
          },
          {
            "Text": "StackOverflowError",
            "AttrFlags": 2
          },
          {
            "Text": ". Java allocates a new frame for every method call on its thread’s stack. However, the space of each thread’s stack is limited. Too many frames on the stack leads to the Stack Overflow (SO)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151152,
        "id": "11d60c8e-5ef3-451f-b3c7-47007714d806",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151152,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151152,
        "id": "67b48f1f-c514-48e3-a447-f7b9517b3c96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151152,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public static void recursion(int depth) {\n    if (depth \u003e 0) {\n        recursion(depth-1);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public static void recursion(int depth) {\n    if (depth \u003e 0) {\n        recursion(depth-1);\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151153,
        "id": "c28d7341-0f24-47ad-b3f2-1984773a9a53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151153,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling this method with large parameters (e.g. "
            ],
            [
              "recursion(50000)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " probably will result in a stack overflow. The exact value depends on the thread stack size, which in turn depends on the thread construction, command-line parameters such as "
            ],
            [
              "-Xss",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", or the default size for the JVM."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling this method with large parameters (e.g. "
          },
          {
            "Text": "recursion(50000)",
            "AttrFlags": 2
          },
          {
            "Text": " probably will result in a stack overflow. The exact value depends on the thread stack size, which in turn depends on the thread construction, command-line parameters such as "
          },
          {
            "Text": "-Xss",
            "AttrFlags": 2
          },
          {
            "Text": ", or the default size for the JVM."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151153,
        "id": "7f3aae85-1177-4958-a174-dea2e4971124",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151153,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Workaround"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Workaround"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151153,
        "id": "89096af8-39ac-4c12-803e-312d8b7dbdc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151153,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A recursion can be converted to a loop by storing the data for each recursive call in a data structure. This data structure can be stored on the heap rather than on the thread stack."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A recursion can be converted to a loop by storing the data for each recursive call in a data structure. This data structure can be stored on the heap rather than on the thread stack."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151153,
        "id": "0c21a53c-8a08-4b15-8da8-195716ca6333",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151153,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In general the data required to restore the state of a method invocation can be stored in a stack and a while loop can be used to “simulate” the recursive calls. Data that may be required include:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In general the data required to restore the state of a method invocation can be stored in a stack and a while loop can be used to “simulate” the recursive calls. Data that may be required include:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "f9698db4-bb0a-4597-a96a-b1b0b989fabe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the object the method was called for (instance methods only)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the object the method was called for (instance methods only)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "2ed7e96f-98ef-41f3-a4a6-e17c9b9543c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the method parameters"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the method parameters"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "92809b05-40c7-42cc-83a8-0bf3445ee2c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "local variables"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "local variables"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "d02ba0c9-a966-47cb-b8c3-4af91a385a43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the current position in the execution or the method"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the current position in the execution or the method"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "b87641cb-d386-4f2a-a0f3-ab1d67290abc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "13d24986-9b97-4c65-97a3-bd1279cd013d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following class allows recursive of a tree structure printing up to a specified depth."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following class allows recursive of a tree structure printing up to a specified depth."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151154,
        "id": "9780a460-b06a-49d9-bf74-bad811c4e281",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151154,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Node {\n\n    public int data;\n    public Node left;\n    public Node right;\n\n    public Node(int data) {\n        this(data, null, null);\n    }\n\n    public Node(int data, Node left, Node right) {\n        this.data = data;\n        this.left = left;\n        this.right = right;\n    }\n\n    public void print(final int maxDepth) {\n        if (maxDepth \u003c= 0) {\n            System.out.print(\"(...)\");\n        } else {\n            System.out.print(\"(\");\n            if (left != null) {\n                left.print(maxDepth-1);\n            }\n            System.out.print(data);\n            if (right != null) {\n                right.print(maxDepth-1);\n            }\n            System.out.print(\")\");\n        }\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Node {\n\n    public int data;\n    public Node left;\n    public Node right;\n\n    public Node(int data) {\n        this(data, null, null);\n    }\n\n    public Node(int data, Node left, Node right) {\n        this.data = data;\n        this.left = left;\n        this.right = right;\n    }\n\n    public void print(final int maxDepth) {\n        if (maxDepth \u003c= 0) {\n            System.out.print(\"(...)\");\n        } else {\n            System.out.print(\"(\");\n            if (left != null) {\n                left.print(maxDepth-1);\n            }\n            System.out.print(data);\n            if (right != null) {\n                right.print(maxDepth-1);\n            }\n            System.out.print(\")\");\n        }\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "7da1b306-b28b-46bf-865d-a357922612ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "e.g."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "e.g."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "c151a9f2-7704-4998-b8e5-284e4ecef8b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Node n = new Node(10, new Node(20, new Node(50), new Node(1)), new Node(30, new Node(42), null));\nn.print(2);\nSystem.out.println();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Node n = new Node(10, new Node(20, new Node(50), new Node(1)), new Node(30, new Node(42), null));\nn.print(2);\nSystem.out.println();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "d784e1d2-febd-44f4-b56d-67c4d3c1ebfb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Prints"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Prints"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "41e6efb7-4793-4703-97b6-94e222eeff08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(((...)20(...))10((...)30))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(((...)20(...))10((...)30))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "0658ede1-27e0-4c73-8e60-057976e7a02f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This could be converted to the following loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This could be converted to the following loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "ced91993-ddab-4636-8679-99bbeda75731",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "public class Frame {\n\n    public final Node node;\n\n    // 0: before printing anything\n    // 1: before printing data\n    // 2: before printing \")\"\n    public int state = 0;\n    public final int maxDepth;\n\n    public Frame(Node node, int maxDepth) {\n        this.node = node;\n        this.maxDepth = maxDepth;\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "public class Frame {\n\n    public final Node node;\n\n    // 0: before printing anything\n    // 1: before printing data\n    // 2: before printing \")\"\n    public int state = 0;\n    public final int maxDepth;\n\n    public Frame(Node node, int maxDepth) {\n        this.node = node;\n        this.maxDepth = maxDepth;\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "480fe42b-9536-4a70-8a06-35ce1bcb862f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "List\u003cFrame\u003e stack = new ArrayList\u003c\u003e();\nstack.add(new Frame(n, 2)); // first frame = initial call\n\nwhile (!stack.isEmpty()) {\n    // get topmost stack element\n    int index = stack.size() - 1;\n    Frame frame = stack.get(index); // get topmost frame\n    if (frame.maxDepth \u003c= 0) {\n        // termial case (too deep)\n        System.out.print(\"(...)\");\n        stack.remove(index); // drop frame\n    } else {\n        switch (frame.state) {\n            case 0:\n                frame.state++;\n\n                // do everything done before the first recursive call\n                System.out.print(\"(\");\n                if (frame.node.left != null) {\n                    // add new frame (recursive call to left and stop)\n                    stack.add(new Frame(frame.node.left, frame.maxDepth - 1));\n                    break;\n                }\n            case 1:\n                frame.state++;\n\n                // do everything done before the second recursive call\n                System.out.print(frame.node.data);\n                if (frame.node.right != null) {\n                    // add new frame (recursive call to right and stop)\n                    stack.add(new Frame(frame.node.right, frame.maxDepth - 1));\n                    break;\n                }\n            case 2:\n                // do everything after the second recursive call \u0026 drop frame\n                System.out.print(\")\");\n                stack.remove(index);\n        }\n    }\n}\nSystem.out.println();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "List\u003cFrame\u003e stack = new ArrayList\u003c\u003e();\nstack.add(new Frame(n, 2)); // first frame = initial call\n\nwhile (!stack.isEmpty()) {\n    // get topmost stack element\n    int index = stack.size() - 1;\n    Frame frame = stack.get(index); // get topmost frame\n    if (frame.maxDepth \u003c= 0) {\n        // termial case (too deep)\n        System.out.print(\"(...)\");\n        stack.remove(index); // drop frame\n    } else {\n        switch (frame.state) {\n            case 0:\n                frame.state++;\n\n                // do everything done before the first recursive call\n                System.out.print(\"(\");\n                if (frame.node.left != null) {\n                    // add new frame (recursive call to left and stop)\n                    stack.add(new Frame(frame.node.left, frame.maxDepth - 1));\n                    break;\n                }\n            case 1:\n                frame.state++;\n\n                // do everything done before the second recursive call\n                System.out.print(frame.node.data);\n                if (frame.node.right != null) {\n                    // add new frame (recursive call to right and stop)\n                    stack.add(new Frame(frame.node.right, frame.maxDepth - 1));\n                    break;\n                }\n            case 2:\n                // do everything after the second recursive call \u0026 drop frame\n                System.out.print(\")\");\n                stack.remove(index);\n        }\n    }\n}\nSystem.out.println();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550461151155,
        "id": "46f6f193-1b10-49df-bd1b-e3e122bcb30a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550461151155,
        "parent_id": "7d7c746b-3511-4d7c-8f42-92c40e1633b8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This is just an example of the general approach. Often you can come up with a much better way to represent a frame and/or store the frame data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 1
          },
          {
            "Text": " This is just an example of the general approach. Often you can come up with a much better way to represent a frame and/or store the frame data."
          }
        ]
      }
    ],
    "title": "StackOverflowError recursion to loop",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}