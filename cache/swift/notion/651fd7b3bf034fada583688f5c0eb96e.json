{
  "ID": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
  "Root": {
    "alive": true,
    "content": [
      "a7041ec8-94a5-4fcc-bf25-003a16a866c7",
      "bce8287e-bcea-448d-8e8d-f3e0a508ce5b",
      "7b173ec7-c242-4695-8ffe-9604fed8071f",
      "675cd09f-38ec-4125-b8ac-e71e57c2f510",
      "2491ed86-40b5-4738-817a-dcac1ab5fb30",
      "71faadc1-981d-49d8-a2c4-a1f86aa87ef6",
      "ebb614f8-8297-4242-b6aa-f1752e2231b8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552104982881,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552104982881,
    "parent_id": "b3a03a81-83e5-4085-b462-4a9e0b487f4a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Implementing Hashable protocol"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982878,
        "id": "a7041ec8-94a5-4fcc-bf25-003a16a866c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982878,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Types used in "
            ],
            [
              "Sets",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Dictionaries(key)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " must conform to "
            ],
            [
              "Hashable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_Hashable_Protocol/index.html"
                ]
              ]
            ],
            [
              " protocol which inherits from "
            ],
            [
              "Equatable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_Equatable_Protocol/index.html"
                ]
              ]
            ],
            [
              " protocol."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Types used in "
          },
          {
            "Text": "Sets",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Dictionaries(key)",
            "AttrFlags": 2
          },
          {
            "Text": " must conform to "
          },
          {
            "Text": "Hashable",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_Hashable_Protocol/index.html"
          },
          {
            "Text": " protocol which inherits from "
          },
          {
            "Text": "Equatable",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_Equatable_Protocol/index.html"
          },
          {
            "Text": " protocol."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982880,
        "id": "bce8287e-bcea-448d-8e8d-f3e0a508ce5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982880,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Custom type conforming to "
            ],
            [
              "Hashable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " protocol must implement"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Custom type conforming to "
          },
          {
            "Text": "Hashable",
            "AttrFlags": 2
          },
          {
            "Text": " protocol must implement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982880,
        "id": "7b173ec7-c242-4695-8ffe-9604fed8071f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982880,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A calculated property "
            ],
            [
              "hashValue",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A calculated property "
          },
          {
            "Text": "hashValue",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982881,
        "id": "675cd09f-38ec-4125-b8ac-e71e57c2f510",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982881,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Define one of the equality operators i.e. "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Define one of the equality operators i.e. "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982881,
        "id": "2491ed86-40b5-4738-817a-dcac1ab5fb30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982881,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Following example implements "
            ],
            [
              "Hashable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " protocol for a custom "
            ],
            [
              "struct",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Following example implements "
          },
          {
            "Text": "Hashable",
            "AttrFlags": 2
          },
          {
            "Text": " protocol for a custom "
          },
          {
            "Text": "struct",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982881,
        "id": "71faadc1-981d-49d8-a2c4-a1f86aa87ef6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982881,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Cell {\n    var row: Int\n    var col: Int\n    \n    init(_ row: Int, _ col: Int) {\n        self.row = row\n        self.col = col\n    }\n}\n\nextension Cell: Hashable {\n    \n    // Satisfy Hashable requirement\n    var hashValue: Int {\n        get {\n            return row.hashValue^col.hashValue\n        }\n    }\n\n    // Satisfy Equatable requirement\n    static func ==(lhs: Cell, rhs: Cell) -\u003e Bool {\n        return lhs.col == rhs.col \u0026\u0026 lhs.row == rhs.row\n    }\n    \n}\n\n// Now we can make Cell as key of dictonary\nvar dict = [Cell : String]()\n\ndict[Cell(0, 0)] = \"0, 0\"\ndict[Cell(1, 0)] = \"1, 0\"\ndict[Cell(0, 1)] = \"0, 1\"\n\n// Also we can create Set of Cells\nvar set = Set\u003cCell\u003e()\n\nset.insert(Cell(0, 0))\nset.insert(Cell(1, 0))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Cell {\n    var row: Int\n    var col: Int\n    \n    init(_ row: Int, _ col: Int) {\n        self.row = row\n        self.col = col\n    }\n}\n\nextension Cell: Hashable {\n    \n    // Satisfy Hashable requirement\n    var hashValue: Int {\n        get {\n            return row.hashValue^col.hashValue\n        }\n    }\n\n    // Satisfy Equatable requirement\n    static func ==(lhs: Cell, rhs: Cell) -\u003e Bool {\n        return lhs.col == rhs.col \u0026\u0026 lhs.row == rhs.row\n    }\n    \n}\n\n// Now we can make Cell as key of dictonary\nvar dict = [Cell : String]()\n\ndict[Cell(0, 0)] = \"0, 0\"\ndict[Cell(1, 0)] = \"1, 0\"\ndict[Cell(0, 1)] = \"0, 1\"\n\n// Also we can create Set of Cells\nvar set = Set\u003cCell\u003e()\n\nset.insert(Cell(0, 0))\nset.insert(Cell(1, 0))",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104982881,
        "id": "ebb614f8-8297-4242-b6aa-f1752e2231b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104982881,
        "parent_id": "651fd7b3-bf03-4fad-a583-688f5c0eb96e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": It is not necessary that different values in custom type have different hash values, collisions are acceptable. If hash values are equal, equality operator will be used to determine real equality."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 1
          },
          {
            "Text": ": It is not necessary that different values in custom type have different hash values, collisions are acceptable. If hash values are equal, equality operator will be used to determine real equality."
          }
        ]
      }
    ],
    "title": "Implementing Hashable protocol",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}