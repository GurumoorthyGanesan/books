{
  "ID": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
  "Root": {
    "alive": true,
    "content": [
      "05e61124-781d-4a7e-85bd-a38415abd5b1",
      "7da5e524-0ae2-4cd8-b490-aeb0f8fd5f18",
      "61952631-72e0-4b9e-9bd4-eb060dd6131b",
      "ff33413a-3949-4423-bac3-015fa804b40e",
      "4010a2ea-a5c2-48b6-9440-eb00ec925c3f",
      "5e8bfc55-e77a-4f9a-af6f-cbc04dfda46c",
      "f95227af-b507-4b80-bb0a-45e768b26a94",
      "f06407a9-fc72-4cdb-b738-9d9ae1d551ce"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105024912,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105440000,
    "parent_id": "ab64a7f2-ccc3-4ffd-98ca-cb7cc7d65a64",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Types of Optionals"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024908,
        "id": "05e61124-781d-4a7e-85bd-a38415abd5b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024908,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optionals are a generic enum type that acts as a wrapper. This wrapper allows a variable to have one of two states: the value of the user-defined type or "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which represents the absence of a value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optionals are a generic enum type that acts as a wrapper. This wrapper allows a variable to have one of two states: the value of the user-defined type or "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": ", which represents the absence of a value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024911,
        "id": "7da5e524-0ae2-4cd8-b490-aeb0f8fd5f18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024911,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This ability is particularly important in Swift because one of the stated design objectives of the language is to work well with Apple’s frameworks. Many (most) of Apple’s frameworks utilize "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " due to its ease of use and significance to programming patterns and API design within Objective-C."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This ability is particularly important in Swift because one of the stated design objectives of the language is to work well with Apple’s frameworks. Many (most) of Apple’s frameworks utilize "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " due to its ease of use and significance to programming patterns and API design within Objective-C."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024911,
        "id": "61952631-72e0-4b9e-9bd4-eb060dd6131b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024911,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Swift, for a variable to have a "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value, it must be an optional. Optionals can be created by appending either a "
            ],
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or a "
            ],
            [
              "?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the variable type. For example, to make an "
            ],
            [
              "Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " optional, you could use"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Swift, for a variable to have a "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " value, it must be an optional. Optionals can be created by appending either a "
          },
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": " or a "
          },
          {
            "Text": "?",
            "AttrFlags": 2
          },
          {
            "Text": " to the variable type. For example, to make an "
          },
          {
            "Text": "Int",
            "AttrFlags": 2
          },
          {
            "Text": " optional, you could use"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024911,
        "id": "ff33413a-3949-4423-bac3-015fa804b40e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024911,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var numberOne: Int! = nil\nvar numberTwo: Int? = nil"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var numberOne: Int! = nil\nvar numberTwo: Int? = nil",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024912,
        "id": "4010a2ea-a5c2-48b6-9440-eb00ec925c3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024912,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " optionals must be explicitly unwrapped, and should be used if you aren’t certain whether or not the variable will have a value when you access it. For example, when turning a string into an "
            ],
            [
              "Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the result is an optional "
            ],
            [
              "Int?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", because nil will be returned if the string is not a valid number"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "?",
            "AttrFlags": 2
          },
          {
            "Text": " optionals must be explicitly unwrapped, and should be used if you aren’t certain whether or not the variable will have a value when you access it. For example, when turning a string into an "
          },
          {
            "Text": "Int",
            "AttrFlags": 2
          },
          {
            "Text": ", the result is an optional "
          },
          {
            "Text": "Int?",
            "AttrFlags": 2
          },
          {
            "Text": ", because nil will be returned if the string is not a valid number"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024912,
        "id": "5e8bfc55-e77a-4f9a-af6f-cbc04dfda46c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024912,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let str1 = \"42\"\nlet num1: Int? = Int(str1) // 42\n\nlet str2 = \"Hello, World!\"\nlet num2: Int? = Int(str2) // nil"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let str1 = \"42\"\nlet num1: Int? = Int(str1) // 42\n\nlet str2 = \"Hello, World!\"\nlet num2: Int? = Int(str2) // nil",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024912,
        "id": "f95227af-b507-4b80-bb0a-45e768b26a94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024912,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " optionals are automatically unwrapped, and should "
            ],
            [
              "only",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be used when you are "
            ],
            [
              "certain",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that the variable will have a value when you access it. For example, a global "
            ],
            [
              "UIButton!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variable that is initialized in "
            ],
            [
              "viewDidLoad()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\!",
            "AttrFlags": 2
          },
          {
            "Text": " optionals are automatically unwrapped, and should "
          },
          {
            "Text": "only",
            "AttrFlags": 4
          },
          {
            "Text": " be used when you are "
          },
          {
            "Text": "certain",
            "AttrFlags": 4
          },
          {
            "Text": " that the variable will have a value when you access it. For example, a global "
          },
          {
            "Text": "UIButton!",
            "AttrFlags": 2
          },
          {
            "Text": " variable that is initialized in "
          },
          {
            "Text": "viewDidLoad()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105024912,
        "id": "f06407a9-fc72-4cdb-b738-9d9ae1d551ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105024912,
        "parent_id": "18bc26d3-ea5b-4c38-ac26-3c27f8134d94",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//myButton will not be accessed until viewDidLoad is called,\n//so a ! optional can be used here\nvar myButton: UIButton!\n\noverride func viewDidLoad(){\n    self.myButton = UIButton(frame: self.view.frame)\n    self.myButton.backgroundColor = UIColor.redColor()\n    self.view.addSubview(self.myButton)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//myButton will not be accessed until viewDidLoad is called,\n//so a ! optional can be used here\nvar myButton: UIButton!\n\noverride func viewDidLoad(){\n    self.myButton = UIButton(frame: self.view.frame)\n    self.myButton.backgroundColor = UIColor.redColor()\n    self.view.addSubview(self.myButton)\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Types of Optionals",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}