{
  "ID": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
  "Root": {
    "alive": true,
    "content": [
      "87f85ee4-1195-4cb6-a093-f16da5296ab4",
      "31fc87ed-db8b-42ff-8637-dbb58d222695",
      "d10da6a4-0db5-4c52-90d2-ed2e89f768b6",
      "e6058aed-c539-4f5c-ace4-729c0da2cea8",
      "d5c46f2c-19d9-49d2-9255-56b429ac096a",
      "c5324a91-66fd-489c-91bf-f09fe5e1826a",
      "85bda0da-918c-4986-8558-9c444d76f542",
      "2d1897dc-f82b-4515-bf79-396e810e35e1",
      "9b79785e-c919-4b04-a0fe-e7c545a98895",
      "9a4ec147-a8cf-4ad1-9e98-c927c373c817",
      "d244c2a2-7ef8-45fe-865e-817db9855271",
      "f5512815-2360-4f2b-9680-d84920470628",
      "95f2ce70-da08-4de5-8ef3-8d3b0d751ecb",
      "0051e0ac-01f8-4c5c-bb4d-360fcb1d5435",
      "ca60a604-6977-4907-acf6-46dd630adf00",
      "b8a4d9b4-fd8c-4f2c-a4c7-448e5a85a448",
      "b47a4fb1-9314-4a34-bf4f-8835961371d8",
      "bcb40c42-3192-4cd9-8368-d81e37889796"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105924963,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105924963,
    "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Sorting"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924959,
        "id": "87f85ee4-1195-4cb6-a093-f16da5296ab4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924959,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bubble Sort",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bubble Sort",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924961,
        "id": "31fc87ed-db8b-42ff-8637-dbb58d222695",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924961,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed. Although the algorithm is simple, it is too slow and impractical for most problems. It has complexity of O(n2) but it is considered slower than insertion sort."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed. Although the algorithm is simple, it is too slow and impractical for most problems. It has complexity of O(n2) but it is considered slower than insertion sort."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924961,
        "id": "d10da6a4-0db5-4c52-90d2-ed2e89f768b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924961,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "extension Array where Element: Comparable {\n\nfunc bubbleSort() -\u003e Array\u003cElement\u003e {\n    \n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n    \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n    \n    for primaryIndex in 0..\u003cself.count {\n        let passes = (output.count - 1) - primaryIndex\n        \n        //\"half-open\" range operator\n        for secondaryIndex in 0..\u003cpasses {\n            let key = output[secondaryIndex]\n            \n            //compare / swap positions\n            if (key \u003e output[secondaryIndex + 1]) {\n                swap(\u0026output[secondaryIndex], \u0026output[secondaryIndex + 1])\n            }\n        }\n    }\n    \n    return output\n}\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "extension Array where Element: Comparable {\n\nfunc bubbleSort() -\u003e Array\u003cElement\u003e {\n    \n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n    \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n    \n    for primaryIndex in 0..\u003cself.count {\n        let passes = (output.count - 1) - primaryIndex\n        \n        //\"half-open\" range operator\n        for secondaryIndex in 0..\u003cpasses {\n            let key = output[secondaryIndex]\n            \n            //compare / swap positions\n            if (key \u003e output[secondaryIndex + 1]) {\n                swap(\u0026output[secondaryIndex], \u0026output[secondaryIndex + 1])\n            }\n        }\n    }\n    \n    return output\n}\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "e6058aed-c539-4f5c-ace4-729c0da2cea8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Insertion sort",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Insertion sort",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "d5c46f2c-19d9-49d2-9255-56b429ac096a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Insertion sort is one of the more basic algorithms in computer science. The insertion sort ranks elements by iterating through a collection and positions elements based on their value. The set is divided into sorted and unsorted halves and repeats until all elements are sorted. Insertion sort has complexity of O(n2). You can put it in an extension, like in an example below, or you can create a method for it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Insertion sort is one of the more basic algorithms in computer science. The insertion sort ranks elements by iterating through a collection and positions elements based on their value. The set is divided into sorted and unsorted halves and repeats until all elements are sorted. Insertion sort has complexity of O(n2). You can put it in an extension, like in an example below, or you can create a method for it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "c5324a91-66fd-489c-91bf-f09fe5e1826a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "extension Array where Element: Comparable {\n\nfunc insertionSort() -\u003e Array\u003cElement\u003e {\n    \n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n    \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n    \n    for primaryindex in 0..\u003coutput.count {\n        \n        let key = output[primaryindex]\n        var secondaryindex = primaryindex\n        \n        while secondaryindex \u003e -1 {\n            if key \u003c output[secondaryindex] {\n                \n                //move to correct position\n                output.remove(at: secondaryindex + 1)\n                output.insert(key, at: secondaryindex)\n            }\n            secondaryindex -= 1\n        }\n    }\n    \n    return output\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "extension Array where Element: Comparable {\n\nfunc insertionSort() -\u003e Array\u003cElement\u003e {\n    \n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n    \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n    \n    for primaryindex in 0..\u003coutput.count {\n        \n        let key = output[primaryindex]\n        var secondaryindex = primaryindex\n        \n        while secondaryindex \u003e -1 {\n            if key \u003c output[secondaryindex] {\n                \n                //move to correct position\n                output.remove(at: secondaryindex + 1)\n                output.insert(key, at: secondaryindex)\n            }\n            secondaryindex -= 1\n        }\n    }\n    \n    return output\n}\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "85bda0da-918c-4986-8558-9c444d76f542",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Selection sort",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Selection sort",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "2d1897dc-f82b-4515-bf79-396e810e35e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Selection sort is noted for its simplicity. It starts with the first element in the array, saving it’s value as a minimum value (or maximum, depending on sorting order). It then itterates through the array, and replaces the min value with any other value lesser then min it finds on the way. That min value is then placed at the leftmost part of the array and the process is repeated, from the next index, until the end of the array. Selection sort has complexity of O(n2) but it is considered slower than it’s counterpart - Selection sort."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Selection sort is noted for its simplicity. It starts with the first element in the array, saving it’s value as a minimum value (or maximum, depending on sorting order). It then itterates through the array, and replaces the min value with any other value lesser then min it finds on the way. That min value is then placed at the leftmost part of the array and the process is repeated, from the next index, until the end of the array. Selection sort has complexity of O(n2) but it is considered slower than it’s counterpart - Selection sort."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "9b79785e-c919-4b04-a0fe-e7c545a98895",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "func selectionSort() -\u003e Array {"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "func selectionSort() -\u003e Array {"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "9a4ec147-a8cf-4ad1-9e98-c927c373c817",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "//check for trivial case\nguard self.count \u003e 1 else {\n    return self\n}\n \n//mutated copy\nvar output: Array\u003cElement\u003e = self\n \nfor primaryindex in 0..\u003coutput.count {\n    var minimum = primaryindex\n    var secondaryindex = primaryindex + 1\n     \n    while secondaryindex \u003c output.count {\n        //store lowest value as minimum\n        if output[minimum] \u003e output[secondaryindex] {\n            minimum = secondaryindex\n        }\n        secondaryindex += 1\n    }\n     \n    //swap minimum value with array iteration\n    if primaryindex != minimum {\n        swap(\u0026output[primaryindex], \u0026output[minimum])\n    }\n}\n \nreturn output \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "//check for trivial case\nguard self.count \u003e 1 else {\n    return self\n}\n \n//mutated copy\nvar output: Array\u003cElement\u003e = self\n \nfor primaryindex in 0..\u003coutput.count {\n    var minimum = primaryindex\n    var secondaryindex = primaryindex + 1\n     \n    while secondaryindex \u003c output.count {\n        //store lowest value as minimum\n        if output[minimum] \u003e output[secondaryindex] {\n            minimum = secondaryindex\n        }\n        secondaryindex += 1\n    }\n     \n    //swap minimum value with array iteration\n    if primaryindex != minimum {\n        swap(\u0026output[primaryindex], \u0026output[minimum])\n    }\n}\n \nreturn output \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924962,
        "id": "d244c2a2-7ef8-45fe-865e-817db9855271",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924962,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Quick Sort - O(n log n) complexity time",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Quick Sort - O(n log n) complexity time",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "f5512815-2360-4f2b-9680-d84920470628",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Quicksort is one of the advanced algorithms. It features a time complexity of O(n log n) and applies a divide \u0026 conquer strategy. This combination results in advanced algorithmic performance. Quicksort first divides a large array into two smaller sub-arrays: the low elements and the high elements. Quicksort can then recursively sort the sub-arrays."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Quicksort is one of the advanced algorithms. It features a time complexity of O(n log n) and applies a divide \u0026 conquer strategy. This combination results in advanced algorithmic performance. Quicksort first divides a large array into two smaller sub-arrays: the low elements and the high elements. Quicksort can then recursively sort the sub-arrays."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "95f2ce70-da08-4de5-8ef3-8d3b0d751ecb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The steps are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The steps are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "0051e0ac-01f8-4c5c-bb4d-360fcb1d5435",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pick an element, called a pivot, from the array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pick an element, called a pivot, from the array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "ca60a604-6977-4907-acf6-46dd630adf00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "b8a4d9b4-fd8c-4f2c-a4c7-448e5a85a448",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "b47a4fb1-9314-4a34-bf4f-8835961371d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "mutating func quickSort() -\u003e Array {"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "mutating func quickSort() -\u003e Array {"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105924963,
        "id": "bcb40c42-3192-4cd9-8368-d81e37889796",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105924963,
        "parent_id": "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func qSort(start startIndex: Int, _ pivot: Int) {\n    \n    if (startIndex \u003c pivot) {\n        let iPivot = qPartition(start: startIndex, pivot)\n        qSort(start: startIndex, iPivot - 1)\n        qSort(start: iPivot + 1, pivot)\n    }\n}\nqSort(start: 0, self.endIndex - 1)\nreturn self\n}\n\nmutating func qPartition(start startIndex: Int, _ pivot: Int) -\u003e Int {\n\nvar wallIndex: Int = startIndex\n\n//compare range with pivot\nfor currentIndex in wallIndex..\u003cpivot {\n    \n    if self[currentIndex] \u003c= self[pivot] {\n        if wallIndex != currentIndex {\n            swap(\u0026self[currentIndex], \u0026self[wallIndex])\n        }\n        \n        //advance wall\n        wallIndex += 1\n    }\n}\n    //move pivot to final position\n    if wallIndex != pivot {\n        swap(\u0026self[wallIndex], \u0026self[pivot])\n    }\n    return wallIndex\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func qSort(start startIndex: Int, _ pivot: Int) {\n    \n    if (startIndex \u003c pivot) {\n        let iPivot = qPartition(start: startIndex, pivot)\n        qSort(start: startIndex, iPivot - 1)\n        qSort(start: iPivot + 1, pivot)\n    }\n}\nqSort(start: 0, self.endIndex - 1)\nreturn self\n}\n\nmutating func qPartition(start startIndex: Int, _ pivot: Int) -\u003e Int {\n\nvar wallIndex: Int = startIndex\n\n//compare range with pivot\nfor currentIndex in wallIndex..\u003cpivot {\n    \n    if self[currentIndex] \u003c= self[pivot] {\n        if wallIndex != currentIndex {\n            swap(\u0026self[currentIndex], \u0026self[wallIndex])\n        }\n        \n        //advance wall\n        wallIndex += 1\n    }\n}\n    //move pivot to final position\n    if wallIndex != pivot {\n        swap(\u0026self[wallIndex], \u0026self[pivot])\n    }\n    return wallIndex\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Sorting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}