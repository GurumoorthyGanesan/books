{
  "ID": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
  "Root": {
    "alive": true,
    "content": [
      "4ff5c1a3-9152-4034-bad6-f739211ea88e",
      "7b19d005-7a02-4a49-9aae-6ab190078fc6",
      "c1df5076-22f9-496e-a7b1-3558c93b4755",
      "bcc030c4-2ec0-46fc-9a3f-a3c007802bb3",
      "be6eb8a6-9719-438b-90d1-e86a5df06a03",
      "a6c81205-bcf6-49a3-bde3-d8ff07b13ff0",
      "0d290667-a67a-47bf-bdbf-fbcf2a6818db",
      "6ebb95a8-c725-46ae-b5c3-01d9bd2a2432",
      "b77b1189-c218-484c-a9d7-74b983816664",
      "1df01be6-a745-40a8-b7d4-080933a1569f",
      "a1a50a9a-17f4-496c-948a-fd97fafc6e65",
      "628cfed8-9d0a-4d44-a370-c80e140c0b7a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105071104,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105071104,
    "parent_id": "9f9ac142-3746-4907-b806-661ae15321d3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Finding the minimum or maximum element of an Array"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071101,
        "id": "4ff5c1a3-9152-4034-bad6-f739211ea88e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071101,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use the "
            ],
            [
              "minElement()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-minelement"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "maxElement()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-maxelement"
                ]
              ]
            ],
            [
              " methods to find the minimum or maximum element in a given sequence. For example, with an array of numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use the "
          },
          {
            "Text": "minElement()",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-minelement"
          },
          {
            "Text": " and "
          },
          {
            "Text": "maxElement()",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v2.2/protocol/SequenceType/#func-generator-element_-comparable-maxelement"
          },
          {
            "Text": " methods to find the minimum or maximum element in a given sequence. For example, with an array of numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071101,
        "id": "7b19d005-7a02-4a49-9aae-6ab190078fc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071101,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let numbers = [2, 6, 1, 25, 13, 7, 9]\n\nlet minimumNumber = numbers.minElement() // Optional(1)\nlet maximumNumber = numbers.maxElement() // Optional(25)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let numbers = [2, 6, 1, 25, 13, 7, 9]\n\nlet minimumNumber = numbers.minElement() // Optional(1)\nlet maximumNumber = numbers.maxElement() // Optional(25)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071102,
        "id": "c1df5076-22f9-496e-a7b1-3558c93b4755",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071102,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of Swift 3, the methods have been renamed to "
            ],
            [
              "min()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v3.0/protocol/Sequence/#func-iterator-element_-comparable-min"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "max()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v3.0/protocol/Sequence/#func-iterator-element_-comparable-max"
                ]
              ]
            ],
            [
              " respectively:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of Swift 3, the methods have been renamed to "
          },
          {
            "Text": "min()",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v3.0/protocol/Sequence/#func-iterator-element_-comparable-min"
          },
          {
            "Text": " and "
          },
          {
            "Text": "max()",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v3.0/protocol/Sequence/#func-iterator-element_-comparable-max"
          },
          {
            "Text": " respectively:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071102,
        "id": "bcc030c4-2ec0-46fc-9a3f-a3c007802bb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071102,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let minimumNumber = numbers.min() // Optional(1)\nlet maximumNumber = numbers.max() // Optional(25)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let minimumNumber = numbers.min() // Optional(1)\nlet maximumNumber = numbers.max() // Optional(25)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071102,
        "id": "be6eb8a6-9719-438b-90d1-e86a5df06a03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071102,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The returned values from these methods are "
            ],
            [
              "Optional",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/247/optionals"
                ]
              ]
            ],
            [
              " to reflect the fact that the array could be empty – if it is, "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be returned."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The returned values from these methods are "
          },
          {
            "Text": "Optional",
            "Link": "http://stackoverflow.com/documentation/swift/247/optionals"
          },
          {
            "Text": " to reflect the fact that the array could be empty – if it is, "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " will be returned."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071102,
        "id": "a6c81205-bcf6-49a3-bde3-d8ff07b13ff0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071102,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: The above methods require the elements to conform to the Comparable protocol."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: The above methods require the elements to conform to the Comparable protocol."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071103,
        "id": "0d290667-a67a-47bf-bdbf-fbcf2a6818db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071103,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finding the minimum or maximum element with a custom ordering"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finding the minimum or maximum element with a custom ordering"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071103,
        "id": "6ebb95a8-c725-46ae-b5c3-01d9bd2a2432",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071103,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may also use the above methods with a custom "
            ],
            [
              "closure",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/262/closures"
                ]
              ]
            ],
            [
              ", defining whether one element should be ordered before another, allowing you to find the minimum or maximum element in an array where the elements aren’t necessarily "
            ],
            [
              "Comparable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may also use the above methods with a custom "
          },
          {
            "Text": "closure",
            "Link": "http://stackoverflow.com/documentation/swift/262/closures"
          },
          {
            "Text": ", defining whether one element should be ordered before another, allowing you to find the minimum or maximum element in an array where the elements aren’t necessarily "
          },
          {
            "Text": "Comparable",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071103,
        "id": "b77b1189-c218-484c-a9d7-74b983816664",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071103,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, with an array of vectors:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, with an array of vectors:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071103,
        "id": "1df01be6-a745-40a8-b7d4-080933a1569f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071103,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Vector2 {\n    let dx : Double\n    let dy : Double\n    \n    var magnitude : Double {return sqrt(dx*dx+dy*dy)}\n}\n\nlet vectors = [Vector2(dx: 3, dy: 2), Vector2(dx: 1, dy: 1), Vector2(dx: 2, dy: 2)]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Vector2 {\n    let dx : Double\n    let dy : Double\n    \n    var magnitude : Double {return sqrt(dx*dx+dy*dy)}\n}\n\nlet vectors = [Vector2(dx: 3, dy: 2), Vector2(dx: 1, dy: 1), Vector2(dx: 2, dy: 2)]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071103,
        "id": "a1a50a9a-17f4-496c-948a-fd97fafc6e65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071103,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Vector2(dx: 1.0, dy: 1.0)\nlet lowestMagnitudeVec2 = vectors.minElement { $0.magnitude \u003c $1.magnitude } \n\n// Vector2(dx: 3.0, dy: 2.0)\nlet highestMagnitudeVec2 = vectors.maxElement { $0.magnitude \u003c $1.magnitude }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Vector2(dx: 1.0, dy: 1.0)\nlet lowestMagnitudeVec2 = vectors.minElement { $0.magnitude \u003c $1.magnitude } \n\n// Vector2(dx: 3.0, dy: 2.0)\nlet highestMagnitudeVec2 = vectors.maxElement { $0.magnitude \u003c $1.magnitude }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105071103,
        "id": "628cfed8-9d0a-4d44-a370-c80e140c0b7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105071103,
        "parent_id": "d105b889-1bb2-45c9-84d3-7f1a88bf0deb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let lowestMagnitudeVec2 = vectors.min { $0.magnitude \u003c $1.magnitude }\nlet highestMagnitudeVec2 = vectors.max { $0.magnitude \u003c $1.magnitude }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let lowestMagnitudeVec2 = vectors.min { $0.magnitude \u003c $1.magnitude }\nlet highestMagnitudeVec2 = vectors.max { $0.magnitude \u003c $1.magnitude }",
        "code_language": "Plain Text"
      }
    ],
    "title": "Finding the minimum or maximum element of an Array",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}