{
  "ID": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
  "Root": {
    "alive": true,
    "content": [
      "5df7c099-8f38-4c2a-bef0-2db3a3b28315",
      "0b2add06-429e-495d-a9f8-5cac6130f455",
      "c2059141-7ff2-4ece-924c-3354b5daa499",
      "24ab89c4-d8a8-450e-b48f-7eb94662a78a",
      "8821f085-49db-4422-b919-b6260ea1df70",
      "21a4858b-21c7-4665-8f24-4444089e8471",
      "216dbc24-9659-43ef-8f49-a372fa2d9da0",
      "555fcb01-fb73-41df-9f48-5760648915df",
      "f01dc77d-2c18-4f19-9844-341c7ff347af",
      "ee7e391e-0b9c-488f-8101-0dcea7a3849e",
      "0b5afb8e-e423-49b2-9a1f-08ed05095033"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552104950916,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552104950916,
    "parent_id": "4743a9b3-3ba1-4406-8fd8-92f831177a73",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Optional Value and Optional enum"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950911,
        "id": "5df7c099-8f38-4c2a-bef0-2db3a3b28315",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950911,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optionals type, which handles the absence of a value. Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optionals type, which handles the absence of a value. Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950914,
        "id": "0b2add06-429e-495d-a9f8-5cac6130f455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950914,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An Optional is a type on its own, actually one of Swift’s new super-powered enums. It has two possible values, "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Some(T)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where T is an associated value of the correct data type available in Swift."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An Optional is a type on its own, actually one of Swift’s new super-powered enums. It has two possible values, "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Some(T)",
            "AttrFlags": 2
          },
          {
            "Text": ", where T is an associated value of the correct data type available in Swift."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950914,
        "id": "c2059141-7ff2-4ece-924c-3354b5daa499",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950914,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s have a look at this piece of code for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s have a look at this piece of code for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950914,
        "id": "24ab89c4-d8a8-450e-b48f-7eb94662a78a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950915,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let x: String? = \"Hello World\"\n\nif let y = x {\n   print(y)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let x: String? = \"Hello World\"\n\nif let y = x {\n   print(y)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950915,
        "id": "8821f085-49db-4422-b919-b6260ea1df70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950915,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In fact if you add a "
            ],
            [
              "print(x.dynamicType)",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " statement in the code above you’ll see this in the console:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In fact if you add a "
          },
          {
            "Text": "print(x.dynamicType)",
            "AttrFlags": 3
          },
          {
            "Text": " statement in the code above you’ll see this in the console:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950915,
        "id": "21a4858b-21c7-4665-8f24-4444089e8471",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950915,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Optional\u003cString\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Optional\u003cString\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950915,
        "id": "216dbc24-9659-43ef-8f49-a372fa2d9da0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950915,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String? is actually syntactic sugar for Optional, and Optional is a type in its own right."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "String? is actually syntactic sugar for Optional, and Optional is a type in its own right."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950915,
        "id": "555fcb01-fb73-41df-9f48-5760648915df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950915,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a simplified version of the header of Optional, which you can see by command-clicking on the word Optional in your code from Xcode:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a simplified version of the header of Optional, which you can see by command-clicking on the word Optional in your code from Xcode:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950915,
        "id": "f01dc77d-2c18-4f19-9844-341c7ff347af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950915,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum Optional\u003cWrapped\u003e {\n\n /// The absence of a value.\n case none\n\n /// The presence of a value, stored as `Wrapped`.\n case some(Wrapped)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum Optional\u003cWrapped\u003e {\n\n /// The absence of a value.\n case none\n\n /// The presence of a value, stored as `Wrapped`.\n case some(Wrapped)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950916,
        "id": "ee7e391e-0b9c-488f-8101-0dcea7a3849e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950916,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optional is actually an enum, defined in relation to a generic type Wrapped. It has two cases: "
            ],
            [
              ".none",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " to represent the absence of a value, and "
            ],
            [
              ".some",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " to represent the presence of a value, which is stored as its associated value of type Wrapped."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optional is actually an enum, defined in relation to a generic type Wrapped. It has two cases: "
          },
          {
            "Text": ".none",
            "AttrFlags": 6
          },
          {
            "Text": " to represent the absence of a value, and "
          },
          {
            "Text": ".some",
            "AttrFlags": 6
          },
          {
            "Text": " to represent the presence of a value, which is stored as its associated value of type Wrapped."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104950916,
        "id": "0b5afb8e-e423-49b2-9a1f-08ed05095033",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104950916,
        "parent_id": "1e7f482f-50b6-4e2c-b2d2-199b06fe6d38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let me go through it again: "
            ],
            [
              "String?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but an "
            ],
            [
              "Optional\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ".The fact that "
            ],
            [
              "Optional",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a type means that it has its own methods, for example "
            ],
            [
              "map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "flatMap",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let me go through it again: "
          },
          {
            "Text": "String?",
            "AttrFlags": 2
          },
          {
            "Text": " is not a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " but an "
          },
          {
            "Text": "Optional\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ".The fact that "
          },
          {
            "Text": "Optional",
            "AttrFlags": 2
          },
          {
            "Text": " is a type means that it has its own methods, for example "
          },
          {
            "Text": "map",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "flatMap",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Optional Value and Optional enum",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}