{
  "ID": "345a1572-0fd3-4722-a37e-55d85027e9ea",
  "Root": {
    "alive": true,
    "content": [
      "8faf7cc1-5765-46a4-8617-57969c67a24b",
      "4c89aca2-394d-4e4b-a331-4376d7fa5f81",
      "5d2563c3-0932-4ab1-b9de-4370139aeb86",
      "e36baf0d-318c-4a33-8e87-b6a861f54a8f",
      "d0337f67-f010-4c78-bd21-058558dedf1f",
      "fceaee68-10f4-4896-af54-d3999cc8f026",
      "650d3670-18d0-4337-9e6d-244ec03c1414",
      "b477e5c7-1f99-4fc5-a970-f2e9feea8e2d",
      "5435e1ef-51c8-46d9-ad89-a3858f563105",
      "ad1076d4-0310-4cb6-878e-bd0b313f40eb",
      "4a530026-bf4f-4294-a2aa-f94918382dad",
      "f005f268-0e42-4552-9204-1510c0a674c1",
      "8e702ff6-4cea-4ef0-b329-2affb928ec84",
      "b854a66f-8a36-4d40-9735-b95a980591c9",
      "9c8d175f-61c4-4972-83da-81fd949de2d1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105532899,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105532899,
    "parent_id": "b51b495d-f653-4e2b-b92d-5af0d351982e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Getting type and names of properties for a class without having to instantiate it"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532882,
        "id": "8faf7cc1-5765-46a4-8617-57969c67a24b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532882,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the Swift class "
            ],
            [
              "Mirror",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " works if you want to extract "
            ],
            [
              "name",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "value",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "type",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (Swift 3: "
            ],
            [
              "type(of: value)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", Swift 2: "
            ],
            [
              "value.dynamicType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") of properties for an "
            ],
            [
              "instance",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of a certain class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the Swift class "
          },
          {
            "Text": "Mirror",
            "AttrFlags": 2
          },
          {
            "Text": " works if you want to extract "
          },
          {
            "Text": "name",
            "AttrFlags": 4
          },
          {
            "Text": ", "
          },
          {
            "Text": "value",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "type",
            "AttrFlags": 4
          },
          {
            "Text": " (Swift 3: "
          },
          {
            "Text": "type(of: value)",
            "AttrFlags": 2
          },
          {
            "Text": ", Swift 2: "
          },
          {
            "Text": "value.dynamicType",
            "AttrFlags": 2
          },
          {
            "Text": ") of properties for an "
          },
          {
            "Text": "instance",
            "AttrFlags": 1
          },
          {
            "Text": " of a certain class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532887,
        "id": "4c89aca2-394d-4e4b-a331-4376d7fa5f81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532887,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you class inherits from "
            ],
            [
              "NSObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can use the method "
            ],
            [
              "class_copyPropertyList",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " together with "
            ],
            [
              "property_getAttributes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to find out the "
            ],
            [
              "name",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "types",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of properties for a class - "
            ],
            [
              "without having an instance of it",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". I created a project on "
            ],
            [
              "Github",
              [
                [
                  "a",
                  "https://github.com/Sajjon/SwiftReflection"
                ]
              ]
            ],
            [
              " for this, but here is the code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you class inherits from "
          },
          {
            "Text": "NSObject",
            "AttrFlags": 2
          },
          {
            "Text": ", you can use the method "
          },
          {
            "Text": "class_copyPropertyList",
            "AttrFlags": 2
          },
          {
            "Text": " together with "
          },
          {
            "Text": "property_getAttributes",
            "AttrFlags": 2
          },
          {
            "Text": " to find out the "
          },
          {
            "Text": "name",
            "AttrFlags": 4
          },
          {
            "Text": " and "
          },
          {
            "Text": "types",
            "AttrFlags": 4
          },
          {
            "Text": " of properties for a class - "
          },
          {
            "Text": "without having an instance of it",
            "AttrFlags": 1
          },
          {
            "Text": ". I created a project on "
          },
          {
            "Text": "Github",
            "Link": "https://github.com/Sajjon/SwiftReflection"
          },
          {
            "Text": " for this, but here is the code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532887,
        "id": "5d2563c3-0932-4ab1-b9de-4370139aeb86",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532887,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func getTypesOfProperties(in clazz: NSObject.Type) -\u003e Dictionary\u003cString, Any\u003e? {\n    var count = UInt32()\n    guard let properties = class_copyPropertyList(clazz, \u0026count) else { return nil }\n    var types: Dictionary\u003cString, Any\u003e = [:]\n    for i in 0..\u003cInt(count) {\n        guard let property: objc_property_t = properties[i], let name = getNameOf(property: property) else { continue }\n        let type = getTypeOf(property: property)\n        types[name] = type\n    }\n    free(properties)\n    return types\n}\n\nfunc getTypeOf(property: objc_property_t) -\u003e Any {\n    guard let attributesAsNSString: NSString = NSString(utf8String: property_getAttributes(property)) else { return Any.self }\n    let attributes = attributesAsNSString as String\n    let slices = attributes.components(separatedBy: \"\\\"\")\n    guard slices.count \u003e 1 else { return getPrimitiveDataType(withAttributes: attributes) }\n    let objectClassName = slices[1]\n    let objectClass = NSClassFromString(objectClassName) as! NSObject.Type\n    return objectClass\n}\n    \n   func getPrimitiveDataType(withAttributes attributes: String) -\u003e Any {\n        guard let letter = attributes.substring(from: 1, to: 2), let type = primitiveDataTypes[letter] else { return Any.self }\n        return type\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func getTypesOfProperties(in clazz: NSObject.Type) -\u003e Dictionary\u003cString, Any\u003e? {\n    var count = UInt32()\n    guard let properties = class_copyPropertyList(clazz, \u0026count) else { return nil }\n    var types: Dictionary\u003cString, Any\u003e = [:]\n    for i in 0..\u003cInt(count) {\n        guard let property: objc_property_t = properties[i], let name = getNameOf(property: property) else { continue }\n        let type = getTypeOf(property: property)\n        types[name] = type\n    }\n    free(properties)\n    return types\n}\n\nfunc getTypeOf(property: objc_property_t) -\u003e Any {\n    guard let attributesAsNSString: NSString = NSString(utf8String: property_getAttributes(property)) else { return Any.self }\n    let attributes = attributesAsNSString as String\n    let slices = attributes.components(separatedBy: \"\\\"\")\n    guard slices.count \u003e 1 else { return getPrimitiveDataType(withAttributes: attributes) }\n    let objectClassName = slices[1]\n    let objectClass = NSClassFromString(objectClassName) as! NSObject.Type\n    return objectClass\n}\n    \n   func getPrimitiveDataType(withAttributes attributes: String) -\u003e Any {\n        guard let letter = attributes.substring(from: 1, to: 2), let type = primitiveDataTypes[letter] else { return Any.self }\n        return type\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532887,
        "id": "e36baf0d-318c-4a33-8e87-b6a861f54a8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532887,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Where "
            ],
            [
              "primitiveDataTypes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a Dictionary mapping a letter in the attribute string to a value type:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Where "
          },
          {
            "Text": "primitiveDataTypes",
            "AttrFlags": 2
          },
          {
            "Text": " is a Dictionary mapping a letter in the attribute string to a value type:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532887,
        "id": "d0337f67-f010-4c78-bd21-058558dedf1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532887,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let primitiveDataTypes: Dictionary\u003cString, Any\u003e = [\n    \"c\" : Int8.self,\n    \"s\" : Int16.self,\n    \"i\" : Int32.self,\n    \"q\" : Int.self, //also: Int64, NSInteger, only true on 64 bit platforms\n    \"S\" : UInt16.self,\n    \"I\" : UInt32.self,\n    \"Q\" : UInt.self, //also UInt64, only true on 64 bit platforms\n    \"B\" : Bool.self,\n    \"d\" : Double.self,\n    \"f\" : Float.self,\n    \"{\" : Decimal.self\n]\n    \n   func getNameOf(property: objc_property_t) -\u003e String? {\n        guard let name: NSString = NSString(utf8String: property_getName(property)) else { return nil }\n        return name as String\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let primitiveDataTypes: Dictionary\u003cString, Any\u003e = [\n    \"c\" : Int8.self,\n    \"s\" : Int16.self,\n    \"i\" : Int32.self,\n    \"q\" : Int.self, //also: Int64, NSInteger, only true on 64 bit platforms\n    \"S\" : UInt16.self,\n    \"I\" : UInt32.self,\n    \"Q\" : UInt.self, //also UInt64, only true on 64 bit platforms\n    \"B\" : Bool.self,\n    \"d\" : Double.self,\n    \"f\" : Float.self,\n    \"{\" : Decimal.self\n]\n    \n   func getNameOf(property: objc_property_t) -\u003e String? {\n        guard let name: NSString = NSString(utf8String: property_getName(property)) else { return nil }\n        return name as String\n    }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532888,
        "id": "fceaee68-10f4-4896-af54-d3999cc8f026",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532888,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It can extract the "
            ],
            [
              "NSObject.Type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of all properties which class type inherits from "
            ],
            [
              "NSObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " such as "
            ],
            [
              "NSDate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (Swift3: "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "NSString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "(Swift3: "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "?) and "
            ],
            [
              "NSNumber",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", however it is store in the type "
            ],
            [
              "Any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (as you can see as the type of the value of the Dictionary returned by the method). This is due to the limitations of "
            ],
            [
              "value types",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " such as Int, Int32, Bool. Since those types do not inherit from NSObject, calling "
            ],
            [
              ".self",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on e.g. an Int - "
            ],
            [
              "Int.self",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not return NSObject.Type, but rather the type "
            ],
            [
              "Any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Thus the method returns "
            ],
            [
              "Dictionary\u003cString, Any\u003e?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and not "
            ],
            [
              "Dictionary\u003cString, NSObject.Type\u003e?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It can extract the "
          },
          {
            "Text": "NSObject.Type",
            "AttrFlags": 2
          },
          {
            "Text": " of all properties which class type inherits from "
          },
          {
            "Text": "NSObject",
            "AttrFlags": 2
          },
          {
            "Text": " such as "
          },
          {
            "Text": "NSDate",
            "AttrFlags": 2
          },
          {
            "Text": " (Swift3: "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "NSString",
            "AttrFlags": 2
          },
          {
            "Text": "(Swift3: "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": "?) and "
          },
          {
            "Text": "NSNumber",
            "AttrFlags": 2
          },
          {
            "Text": ", however it is store in the type "
          },
          {
            "Text": "Any",
            "AttrFlags": 2
          },
          {
            "Text": " (as you can see as the type of the value of the Dictionary returned by the method). This is due to the limitations of "
          },
          {
            "Text": "value types",
            "AttrFlags": 2
          },
          {
            "Text": " such as Int, Int32, Bool. Since those types do not inherit from NSObject, calling "
          },
          {
            "Text": ".self",
            "AttrFlags": 2
          },
          {
            "Text": " on e.g. an Int - "
          },
          {
            "Text": "Int.self",
            "AttrFlags": 2
          },
          {
            "Text": " does not return NSObject.Type, but rather the type "
          },
          {
            "Text": "Any",
            "AttrFlags": 2
          },
          {
            "Text": ". Thus the method returns "
          },
          {
            "Text": "Dictionary\u003cString, Any\u003e?",
            "AttrFlags": 2
          },
          {
            "Text": " and not "
          },
          {
            "Text": "Dictionary\u003cString, NSObject.Type\u003e?",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532888,
        "id": "650d3670-18d0-4337-9e6d-244ec03c1414",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532888,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use this method like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use this method like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532888,
        "id": "b477e5c7-1f99-4fc5-a970-f2e9feea8e2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532888,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Book: NSObject {\n    let title: String\n    let author: String?\n    let numberOfPages: Int\n    let released: Date\n    let isPocket: Bool\n\n    init(title: String, author: String?, numberOfPages: Int, released: Date, isPocket: Bool) {\n        self.title = title\n        self.author = author\n        self.numberOfPages = numberOfPages\n        self.released = released\n        self.isPocket = isPocket\n    }\n}\n\nguard let types = getTypesOfProperties(in: Book.self) else { return }\nfor (name, type) in types {\n    print(\"'\\(name)' has type '\\(type)'\")\n}\n// Prints:\n// 'title' has type 'NSString'\n// 'numberOfPages' has type 'Int'\n// 'author' has type 'NSString'\n// 'released' has type 'NSDate'\n// 'isPocket' has type 'Bool'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Book: NSObject {\n    let title: String\n    let author: String?\n    let numberOfPages: Int\n    let released: Date\n    let isPocket: Bool\n\n    init(title: String, author: String?, numberOfPages: Int, released: Date, isPocket: Bool) {\n        self.title = title\n        self.author = author\n        self.numberOfPages = numberOfPages\n        self.released = released\n        self.isPocket = isPocket\n    }\n}\n\nguard let types = getTypesOfProperties(in: Book.self) else { return }\nfor (name, type) in types {\n    print(\"'\\(name)' has type '\\(type)'\")\n}\n// Prints:\n// 'title' has type 'NSString'\n// 'numberOfPages' has type 'Int'\n// 'author' has type 'NSString'\n// 'released' has type 'NSDate'\n// 'isPocket' has type 'Bool'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532889,
        "id": "5435e1ef-51c8-46d9-ad89-a3858f563105",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532889,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also try to cast the "
            ],
            [
              "Any",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "NSObject.Type",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which will succeed for all properties inheriting from "
            ],
            [
              "NSObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then you can check the type using standard "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also try to cast the "
          },
          {
            "Text": "Any",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "NSObject.Type",
            "AttrFlags": 2
          },
          {
            "Text": ", which will succeed for all properties inheriting from "
          },
          {
            "Text": "NSObject",
            "AttrFlags": 2
          },
          {
            "Text": ", then you can check the type using standard "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532889,
        "id": "ad1076d4-0310-4cb6-878e-bd0b313f40eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532889,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func checkPropertiesOfBook() {\n    guard let types = getTypesOfProperties(in: Book.self) else { return }\n    for (name, type) in types {\n        if let objectType = type as? NSObject.Type {\n            if objectType == NSDate.self {\n                print(\"Property named '\\(name)' has type 'NSDate'\")\n            } else if objectType == NSString.self {\n                print(\"Property named '\\(name)' has type 'NSString'\")\n            }\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func checkPropertiesOfBook() {\n    guard let types = getTypesOfProperties(in: Book.self) else { return }\n    for (name, type) in types {\n        if let objectType = type as? NSObject.Type {\n            if objectType == NSDate.self {\n                print(\"Property named '\\(name)' has type 'NSDate'\")\n            } else if objectType == NSString.self {\n                print(\"Property named '\\(name)' has type 'NSString'\")\n            }\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532898,
        "id": "4a530026-bf4f-4294-a2aa-f94918382dad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532898,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you declare this custom "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you declare this custom "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532898,
        "id": "f005f268-0e42-4552-9204-1510c0a674c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532898,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func ==(rhs: Any, lhs: Any) -\u003e Bool {\n    let rhsType: String = \"\\(rhs)\"\n    let lhsType: String = \"\\(lhs)\"\n    let same = rhsType == lhsType\n    return same\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func ==(rhs: Any, lhs: Any) -\u003e Bool {\n    let rhsType: String = \"\\(rhs)\"\n    let lhsType: String = \"\\(lhs)\"\n    let same = rhsType == lhsType\n    return same\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532898,
        "id": "8e702ff6-4cea-4ef0-b329-2affb928ec84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532898,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can then even check the type of "
            ],
            [
              "value types",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can then even check the type of "
          },
          {
            "Text": "value types",
            "AttrFlags": 2
          },
          {
            "Text": " like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532898,
        "id": "b854a66f-8a36-4d40-9735-b95a980591c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532898,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func checkPropertiesOfBook() {\n    guard let types = getTypesOfProperties(in: Book.self) else { return }\n    for (name, type) in types {\n        if type == Int.self {\n            print(\"Property named '\\(name)' has type 'Int'\")\n        } else if type == Bool.self {\n            print(\"Property named '\\(name)' has type 'Bool'\")\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func checkPropertiesOfBook() {\n    guard let types = getTypesOfProperties(in: Book.self) else { return }\n    for (name, type) in types {\n        if type == Int.self {\n            print(\"Property named '\\(name)' has type 'Int'\")\n        } else if type == Bool.self {\n            print(\"Property named '\\(name)' has type 'Bool'\")\n        }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105532899,
        "id": "9c8d175f-61c4-4972-83da-81fd949de2d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105532899,
        "parent_id": "345a1572-0fd3-4722-a37e-55d85027e9ea",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "LIMITATIONS",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " This solution does not work when "
            ],
            [
              "value types",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are optionals. If you have declared a property in you NSObject subclass like this: "
            ],
            [
              "var myOptionalInt: Int?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the code above won’t find that property because the method "
            ],
            [
              "class_copyPropertyList",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not contain optional value types."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "LIMITATIONS",
            "AttrFlags": 1
          },
          {
            "Text": " This solution does not work when "
          },
          {
            "Text": "value types",
            "AttrFlags": 2
          },
          {
            "Text": " are optionals. If you have declared a property in you NSObject subclass like this: "
          },
          {
            "Text": "var myOptionalInt: Int?",
            "AttrFlags": 2
          },
          {
            "Text": ", the code above won’t find that property because the method "
          },
          {
            "Text": "class_copyPropertyList",
            "AttrFlags": 2
          },
          {
            "Text": " does not contain optional value types."
          }
        ]
      }
    ],
    "title": "Getting type and names of properties for a class without having to instantiate it",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}