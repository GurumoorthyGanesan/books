{
  "ID": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
  "Root": {
    "alive": true,
    "content": [
      "e5d9115c-cf3b-4ef7-bf11-fec178a2e856",
      "7a2fd8b3-22a1-4225-8462-f24b4a1994fd",
      "c0148ae2-2c93-410d-9d85-d1ac2bee8136",
      "fc159f16-1db0-4cba-8956-308532f9863c",
      "c0e3fb6d-34d4-4ee6-9123-a864cf8bf872",
      "33e2807e-0a69-438e-98ae-b4622f60d1e5",
      "8da0fa40-f6ac-4f8a-bd20-3f6330eafcab",
      "d85d0757-7960-4b0c-bc36-79052ddc9cd5",
      "d3e7d81c-7a07-4949-a7a0-33959046d163",
      "d0158452-1939-47f1-8c40-ea4d544ee525",
      "2babaf4c-e9be-4c87-af33-08b4263885af",
      "4f51a1b7-8afa-4c43-b712-36e9de7c0bdb",
      "48f76ee6-104c-4779-9c16-f1b0dac0fe48"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105857051,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105857051,
    "parent_id": "35e9a1fb-1c65-4c4d-b44b-becc6cd9f6bd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "AES encryption in CBC mode with a random IV Swift 2.3"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857047,
        "id": "e5d9115c-cf3b-4ef7-bf11-fec178a2e856",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857047,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The iv is prefixed to the encrypted data"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The iv is prefixed to the encrypted data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "7a2fd8b3-22a1-4225-8462-f24b4a1994fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "aesCBC128Encrypt will create a random IV and prefixed to the encrypted code. aesCBC128Decrypt will use the prefixed IV during decryption."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "aesCBC128Encrypt will create a random IV and prefixed to the encrypted code. aesCBC128Decrypt will use the prefixed IV during decryption."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "c0148ae2-2c93-410d-9d85-d1ac2bee8136",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inputs are the data and key are Data objects. If an encoded form such as Base64 if required convert to and/or from in the calling method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inputs are the data and key are Data objects. If an encoded form such as Base64 if required convert to and/or from in the calling method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "fc159f16-1db0-4cba-8956-308532f9863c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The key should be exactly 128-bits (16-bytes). For other key sizes see the Swift 3.0 example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The key should be exactly 128-bits (16-bytes). For other key sizes see the Swift 3.0 example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "c0e3fb6d-34d4-4ee6-9123-a864cf8bf872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PKCS#7 padding is set by default."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PKCS#7 padding is set by default."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "33e2807e-0a69-438e-98ae-b4622f60d1e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example requires Common Crypto It is necessary to have a bridging header to the project: #import \u003cCommonCrypto/CommonCrypto.h\u003e Add the Security.framework to the project."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example requires Common Crypto It is necessary to have a bridging header to the project: #import \u003cCommonCrypto/CommonCrypto.h\u003e Add the Security.framework to the project."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "8da0fa40-f6ac-4f8a-bd20-3f6330eafcab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See Swift 3 example for notes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See Swift 3 example for notes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857050,
        "id": "d85d0757-7960-4b0c-bc36-79052ddc9cd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857050,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is example, not production code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is example, not production code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857051,
        "id": "d3e7d81c-7a07-4949-a7a0-33959046d163",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857051,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func aesCBC128Encrypt(data data:[UInt8], keyData:[UInt8]) -\u003e [UInt8]? {\n    let keyLength   = size_t(kCCKeySizeAES128)\n    let ivLength    = size_t(kCCBlockSizeAES128)\n    let cryptDataLength = size_t(data.count + kCCBlockSizeAES128)\n    var cryptData = [UInt8](count:ivLength + cryptDataLength, repeatedValue:0)\n\n    let status = SecRandomCopyBytes(kSecRandomDefault, Int(ivLength), UnsafeMutablePointer\u003cUInt8\u003e(cryptData));\n    if (status != 0) {\n        print(\"IV Error, errno: \\(status)\")\n        return nil\n    }\n\n    var numBytesEncrypted :size_t = 0\n    let cryptStatus = CCCrypt(CCOperation(kCCEncrypt),\n                              CCAlgorithm(kCCAlgorithmAES128),\n                              CCOptions(kCCOptionPKCS7Padding),\n                              keyData, keyLength,\n                              cryptData,\n                              data, data.count,\n                              \u0026cryptData + ivLength, cryptDataLength,\n                              \u0026numBytesEncrypted)\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        cryptData.removeRange(numBytesEncrypted+ivLength..\u003ccryptData.count)\n    }\n    else {\n        print(\"Error: \\(cryptStatus)\")\n        return nil;\n    }\n\n    return cryptData;\n}\n\nfunc aesCBC128Decrypt(data data:[UInt8], keyData:[UInt8]) -\u003e [UInt8]? {\n    let clearLength = size_t(data.count)\n    var clearData   = [UInt8](count:clearLength, repeatedValue:0)\n\n    let keyLength   = size_t(kCCKeySizeAES128)\n    let ivLength    = size_t(kCCBlockSizeAES128)\n\n    var numBytesDecrypted :size_t = 0\n    let cryptStatus = CCCrypt(CCOperation(kCCDecrypt),\n                              CCAlgorithm(kCCAlgorithmAES128),\n                              CCOptions(kCCOptionPKCS7Padding),\n                              keyData, keyLength,\n                              data,\n                              UnsafePointer\u003cUInt8\u003e(data) + ivLength, data.count - ivLength,\n                              \u0026clearData, clearLength,\n                              \u0026numBytesDecrypted)\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        clearData.removeRange(numBytesDecrypted..\u003cclearLength)\n\n    } else {\n        print(\"Error: \\(cryptStatus)\")\n        return nil;\n    }\n\n    return clearData;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func aesCBC128Encrypt(data data:[UInt8], keyData:[UInt8]) -\u003e [UInt8]? {\n    let keyLength   = size_t(kCCKeySizeAES128)\n    let ivLength    = size_t(kCCBlockSizeAES128)\n    let cryptDataLength = size_t(data.count + kCCBlockSizeAES128)\n    var cryptData = [UInt8](count:ivLength + cryptDataLength, repeatedValue:0)\n\n    let status = SecRandomCopyBytes(kSecRandomDefault, Int(ivLength), UnsafeMutablePointer\u003cUInt8\u003e(cryptData));\n    if (status != 0) {\n        print(\"IV Error, errno: \\(status)\")\n        return nil\n    }\n\n    var numBytesEncrypted :size_t = 0\n    let cryptStatus = CCCrypt(CCOperation(kCCEncrypt),\n                              CCAlgorithm(kCCAlgorithmAES128),\n                              CCOptions(kCCOptionPKCS7Padding),\n                              keyData, keyLength,\n                              cryptData,\n                              data, data.count,\n                              \u0026cryptData + ivLength, cryptDataLength,\n                              \u0026numBytesEncrypted)\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        cryptData.removeRange(numBytesEncrypted+ivLength..\u003ccryptData.count)\n    }\n    else {\n        print(\"Error: \\(cryptStatus)\")\n        return nil;\n    }\n\n    return cryptData;\n}\n\nfunc aesCBC128Decrypt(data data:[UInt8], keyData:[UInt8]) -\u003e [UInt8]? {\n    let clearLength = size_t(data.count)\n    var clearData   = [UInt8](count:clearLength, repeatedValue:0)\n\n    let keyLength   = size_t(kCCKeySizeAES128)\n    let ivLength    = size_t(kCCBlockSizeAES128)\n\n    var numBytesDecrypted :size_t = 0\n    let cryptStatus = CCCrypt(CCOperation(kCCDecrypt),\n                              CCAlgorithm(kCCAlgorithmAES128),\n                              CCOptions(kCCOptionPKCS7Padding),\n                              keyData, keyLength,\n                              data,\n                              UnsafePointer\u003cUInt8\u003e(data) + ivLength, data.count - ivLength,\n                              \u0026clearData, clearLength,\n                              \u0026numBytesDecrypted)\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        clearData.removeRange(numBytesDecrypted..\u003cclearLength)\n\n    } else {\n        print(\"Error: \\(cryptStatus)\")\n        return nil;\n    }\n\n    return clearData;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857051,
        "id": "d0158452-1939-47f1-8c40-ea4d544ee525",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857051,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857051,
        "id": "2babaf4c-e9be-4c87-af33-08b4263885af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857051,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let clearData = toData(\"clearData0123456\")\nlet keyData   = toData(\"keyData890123456\")\n\nprint(\"clearData:   \\(toHex(clearData))\")\nprint(\"keyData:     \\(toHex(keyData))\")\nlet cryptData = aesCBC128Encrypt(data:clearData, keyData:keyData)!\nprint(\"cryptData:   \\(toHex(cryptData))\")\nlet decryptData = aesCBC128Decrypt(data:cryptData, keyData:keyData)!\nprint(\"decryptData: \\(toHex(decryptData))\")"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let clearData = toData(\"clearData0123456\")\nlet keyData   = toData(\"keyData890123456\")\n\nprint(\"clearData:   \\(toHex(clearData))\")\nprint(\"keyData:     \\(toHex(keyData))\")\nlet cryptData = aesCBC128Encrypt(data:clearData, keyData:keyData)!\nprint(\"cryptData:   \\(toHex(cryptData))\")\nlet decryptData = aesCBC128Decrypt(data:cryptData, keyData:keyData)!\nprint(\"decryptData: \\(toHex(decryptData))\")",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857051,
        "id": "4f51a1b7-8afa-4c43-b712-36e9de7c0bdb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857051,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105857051,
        "id": "48f76ee6-104c-4779-9c16-f1b0dac0fe48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105857051,
        "parent_id": "90d0e6c7-3e0e-4549-b27d-819a8ce48753",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "clearData:   \u003c636c6561 72446174 61303132 33343536\u003e\nkeyData:     \u003c6b657944 61746138 39303132 33343536\u003e\ncryptData:   \u003c9fce4323 830e3734 93dd93bf e464f72a a653a3a5 2c40d5ea e90c1017 958750a7 ff094c53 6a81b458 b1fbd6d4 1f583298\u003e\ndecryptData: \u003c636c6561 72446174 61303132 33343536\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "clearData:   \u003c636c6561 72446174 61303132 33343536\u003e\nkeyData:     \u003c6b657944 61746138 39303132 33343536\u003e\ncryptData:   \u003c9fce4323 830e3734 93dd93bf e464f72a a653a3a5 2c40d5ea e90c1017 958750a7 ff094c53 6a81b458 b1fbd6d4 1f583298\u003e\ndecryptData: \u003c636c6561 72446174 61303132 33343536\u003e",
        "code_language": "Plain Text"
      }
    ],
    "title": "AES encryption in CBC mode with a random IV Swift 2.3",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}