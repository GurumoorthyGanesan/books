{
  "ID": "fbd914e0-3412-4c81-80c3-68b463b378c2",
  "Root": {
    "alive": true,
    "content": [
      "4f10ab2f-ea98-4c1c-a430-a06b0827bcbe",
      "2b4061bd-0c0e-4f59-a442-84dbc94ca172",
      "b78d7df6-f4e6-4e27-9dce-92fd88523569",
      "329ccca0-491c-4334-9275-ab846f012c47",
      "a81c46f1-95b5-41e8-b135-49c5840af10c",
      "748ea4fb-3220-4022-b132-498985283d27",
      "12096f8f-93e6-4d35-b8a2-c62c5a8fb8e8",
      "05168885-4f1d-4fd4-b87b-835078bbe744",
      "92b6d93d-37c0-45e0-a94c-df5496908b94",
      "8c3aea34-b85d-4793-9b65-2bf1ae9935d1",
      "5054adec-8bb8-47c3-95ae-ef05bf9fdfcc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105042834,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105042834,
    "parent_id": "752e5fcf-89e9-482f-8ab5-40b382d1513b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Syntax variations"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042832,
        "id": "4f10ab2f-ea98-4c1c-a430-a06b0827bcbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042832,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The basic closure syntax is"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The basic closure syntax is"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042832,
        "id": "2b4061bd-0c0e-4f59-a442-84dbc94ca172",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042832,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\\{ \\[capture list\\] \\(parameters\\) throws-ness -\u003e return type in body \\}."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "\\{ \\[capture list\\] \\(parameters\\) throws-ness -\u003e return type in body \\}."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042832,
        "id": "b78d7df6-f4e6-4e27-9dce-92fd88523569",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042832,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many of these parts can be omitted, so there are several equivalent ways to write simple closures:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many of these parts can be omitted, so there are several equivalent ways to write simple closures:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042832,
        "id": "329ccca0-491c-4334-9275-ab846f012c47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042832,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let addOne = { [] (x: Int) -\u003e Int in return x + 1 }\nlet addOne = { [] (x: Int) -\u003e Int in x + 1 }\nlet addOne = { (x: Int) -\u003e Int in x + 1 }\nlet addOne = { x -\u003e Int in x + 1 }\nlet addOne = { x in x + 1 }\nlet addOne = { $0 + 1 }\n\nlet addOneOrThrow = { [] (x: Int) throws -\u003e Int in return x + 1 }\nlet addOneOrThrow = { [] (x: Int) throws -\u003e Int in x + 1 }\nlet addOneOrThrow = { (x: Int) throws -\u003e Int in x + 1 }\nlet addOneOrThrow = { x throws -\u003e Int in x + 1 }\nlet addOneOrThrow = { x throws in x + 1 }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let addOne = { [] (x: Int) -\u003e Int in return x + 1 }\nlet addOne = { [] (x: Int) -\u003e Int in x + 1 }\nlet addOne = { (x: Int) -\u003e Int in x + 1 }\nlet addOne = { x -\u003e Int in x + 1 }\nlet addOne = { x in x + 1 }\nlet addOne = { $0 + 1 }\n\nlet addOneOrThrow = { [] (x: Int) throws -\u003e Int in return x + 1 }\nlet addOneOrThrow = { [] (x: Int) throws -\u003e Int in x + 1 }\nlet addOneOrThrow = { (x: Int) throws -\u003e Int in x + 1 }\nlet addOneOrThrow = { x throws -\u003e Int in x + 1 }\nlet addOneOrThrow = { x throws in x + 1 }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042833,
        "id": "a81c46f1-95b5-41e8-b135-49c5840af10c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042833,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The capture list can be omitted if it’s empty."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The capture list can be omitted if it’s empty."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042833,
        "id": "748ea4fb-3220-4022-b132-498985283d27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042833,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters don’t need type annotations if their types can be inferred."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters don’t need type annotations if their types can be inferred."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042833,
        "id": "12096f8f-93e6-4d35-b8a2-c62c5a8fb8e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042833,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The return type doesn’t need to be specified if it can be inferred."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The return type doesn’t need to be specified if it can be inferred."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042834,
        "id": "05168885-4f1d-4fd4-b87b-835078bbe744",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042834,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Parameters don’t have to be named; instead they can be referred to with "
            ],
            [
              "$0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "$1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "$2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Parameters don’t have to be named; instead they can be referred to with "
          },
          {
            "Text": "$0",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "$1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "$2",
            "AttrFlags": 2
          },
          {
            "Text": ", etc."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042834,
        "id": "92b6d93d-37c0-45e0-a94c-df5496908b94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042834,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the closure contains a single expression, whose value is to be returned, the "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword can be omitted."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the closure contains a single expression, whose value is to be returned, the "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " keyword can be omitted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042834,
        "id": "8c3aea34-b85d-4793-9b65-2bf1ae9935d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042834,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the closure is inferred to throw an error, is written in a context which expects a throwing closure, or doesn’t throw an error, "
            ],
            [
              "throws",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be omitted."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the closure is inferred to throw an error, is written in a context which expects a throwing closure, or doesn’t throw an error, "
          },
          {
            "Text": "throws",
            "AttrFlags": 2
          },
          {
            "Text": " can be omitted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105042834,
        "id": "5054adec-8bb8-47c3-95ae-ef05bf9fdfcc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105042834,
        "parent_id": "fbd914e0-3412-4c81-80c3-68b463b378c2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// The closure's type is unknown, so we have to specify the type of x and y.\n// The output type is inferred to be Int, because the + operator for Ints returns Int.\nlet addInts = { (x: Int, y: Int) in x + y }\n\n// The closure's type is specified, so we can omit the parameters' type annotations.\nlet addInts: (Int, Int) -\u003e Int = { x, y in x + y }\nlet addInts: (Int, Int) -\u003e Int = { $0 + $1 }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// The closure's type is unknown, so we have to specify the type of x and y.\n// The output type is inferred to be Int, because the + operator for Ints returns Int.\nlet addInts = { (x: Int, y: Int) in x + y }\n\n// The closure's type is specified, so we can omit the parameters' type annotations.\nlet addInts: (Int, Int) -\u003e Int = { x, y in x + y }\nlet addInts: (Int, Int) -\u003e Int = { $0 + $1 }",
        "code_language": "Plain Text"
      }
    ],
    "title": "Syntax variations",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}