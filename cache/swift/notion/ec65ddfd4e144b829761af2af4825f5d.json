{
  "ID": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
  "Root": {
    "alive": true,
    "content": [
      "3d36a2c9-3042-48b4-8621-e70b99719b94",
      "59180346-30ae-418f-a162-d9d106e4a147",
      "22931be8-6d59-4890-89d3-af18b8794261",
      "d1182eb6-ccf9-4553-a0f8-61aa2516c6bf",
      "721849e3-4671-4bab-aa25-4b9660a60889",
      "22e5b77e-7e5a-4d4c-9aca-06973a20dbd3",
      "5461a26d-56bd-4344-8de1-c09a2aaa9187",
      "8ccb1255-621e-4d45-ab34-60fb8fd0ba92",
      "5e82d5ef-e933-4430-8d0b-34ffe2e12d18",
      "9e19d5bc-6759-40d6-8473-eefda7bc5c64",
      "729f2a83-f887-46ca-b126-71697377e985",
      "8b6279b0-488f-46df-9b50-57a48ca0d4fe",
      "c2e118f4-bd30-4424-a3fe-21049ad72d2b",
      "385642ae-3214-464b-b3d9-202a699ba6aa",
      "f98c1f7c-d9cb-4e85-a5a5-7cfc924424cf",
      "30db9dce-70e8-4d56-95e2-99664ae43854",
      "95fbba90-6ba7-4c2e-9933-e3889b6fa2e4",
      "1c4456ab-cebc-4365-908e-87710398c2b2",
      "83d35147-638c-4dd1-bb31-9de0b62921a8",
      "48360544-6d25-48b4-a4f1-b4ff813b3467",
      "ccd1d085-61f9-4b18-919e-4c0787d2879d",
      "e243280e-ea20-4de0-a760-c118ce1bc83c",
      "849fbb4e-639e-4e2e-9685-07cbe38b518a",
      "922d8b41-0a4c-4f2d-86f3-7f2122275018",
      "a7bbd890-a66b-4c4c-9206-befd2f8f3080",
      "d2425e47-f574-467d-a08d-b1a845afee35"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105490075,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105490075,
    "parent_id": "5367e1b7-d8c9-42c1-a35c-1508743d5105",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The Basics of Generics"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490057,
        "id": "3d36a2c9-3042-48b4-8621-e70b99719b94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490057,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generics",
              [
                [
                  "a",
                  "https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID179"
                ]
              ]
            ],
            [
              " are placeholders for types, allowing you to write flexible code that can be applied across multiple types. The advantage of using generics over "
            ],
            [
              "Any",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html#//apple_ref/doc/uid/TP40014097-CH22-ID342"
                ]
              ]
            ],
            [
              " is that they still allow the compiler to enforce strong type-safety."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generics",
            "Link": "https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID179"
          },
          {
            "Text": " are placeholders for types, allowing you to write flexible code that can be applied across multiple types. The advantage of using generics over "
          },
          {
            "Text": "Any",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html#//apple_ref/doc/uid/TP40014097-CH22-ID342"
          },
          {
            "Text": " is that they still allow the compiler to enforce strong type-safety."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490058,
        "id": "59180346-30ae-418f-a162-d9d106e4a147",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490058,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A generic placeholder is defined within angle brackets "
            ],
            [
              "\u003c\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A generic placeholder is defined within angle brackets "
          },
          {
            "Text": "\u003c\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490058,
        "id": "22931be8-6d59-4890-89d3-af18b8794261",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490058,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generic Functions"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generic Functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490059,
        "id": "d1182eb6-ccf9-4553-a0f8-61aa2516c6bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490059,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For "
            ],
            [
              "functions",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/432/functions"
                ]
              ]
            ],
            [
              ", this placeholder is placed after the function name:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For "
          },
          {
            "Text": "functions",
            "Link": "http://stackoverflow.com/documentation/swift/432/functions"
          },
          {
            "Text": ", this placeholder is placed after the function name:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490059,
        "id": "721849e3-4671-4bab-aa25-4b9660a60889",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490059,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cT\u003eTTT"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cT\u003eTTT",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490059,
        "id": "22e5b77e-7e5a-4d4c-9aca-06973a20dbd3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490059,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, the generic placeholder is "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When you come to call the function, Swift can infer the type of "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for you (as it simply acts as a placeholder for an actual type)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, the generic placeholder is "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": ". When you come to call the function, Swift can infer the type of "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " for you (as it simply acts as a placeholder for an actual type)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490059,
        "id": "5461a26d-56bd-4344-8de1-c09a2aaa9187",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490059,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let randomOutput = pickRandom(5, 7) // returns an Int (that's either 5 or 7)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let randomOutput = pickRandom(5, 7) // returns an Int (that's either 5 or 7)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490070,
        "id": "8ccb1255-621e-4d45-ab34-60fb8fd0ba92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490070,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we’re passing two integers to the function. Therefore Swift is inferring "
            ],
            [
              "T == Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – thus the function signature is inferred to be "
            ],
            [
              "(Int, Int) -\u003e Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we’re passing two integers to the function. Therefore Swift is inferring "
          },
          {
            "Text": "T == Int",
            "AttrFlags": 2
          },
          {
            "Text": " – thus the function signature is inferred to be "
          },
          {
            "Text": "(Int, Int) -\u003e Int",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490071,
        "id": "5e82d5ef-e933-4430-8d0b-34ffe2e12d18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490071,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because of the strong type safety that generics offer – both the arguments and return of the function must be the "
            ],
            [
              "same",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " type. Therefore the following will not compile:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because of the strong type safety that generics offer – both the arguments and return of the function must be the "
          },
          {
            "Text": "same",
            "AttrFlags": 4
          },
          {
            "Text": " type. Therefore the following will not compile:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490071,
        "id": "9e19d5bc-6759-40d6-8473-eefda7bc5c64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490071,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Foo {}\n\nlet foo = Foo()\n\nlet randomOutput = pickRandom(foo, 5) // error: cannot convert value of type 'Int' to expected argument type 'Foo'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Foo {}\n\nlet foo = Foo()\n\nlet randomOutput = pickRandom(foo, 5) // error: cannot convert value of type 'Int' to expected argument type 'Foo'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490071,
        "id": "729f2a83-f887-46ca-b126-71697377e985",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490071,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generic Types"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generic Types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490072,
        "id": "8b6279b0-488f-46df-9b50-57a48ca0d4fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490072,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to use generics with "
            ],
            [
              "classes",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/459/classes"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "structs",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/255/structs"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "enums",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/224/enums"
                ]
              ]
            ],
            [
              ", you can define the generic placeholder after the type name."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to use generics with "
          },
          {
            "Text": "classes",
            "Link": "http://stackoverflow.com/documentation/swift/459/classes"
          },
          {
            "Text": ", "
          },
          {
            "Text": "structs",
            "Link": "http://stackoverflow.com/documentation/swift/255/structs"
          },
          {
            "Text": " or "
          },
          {
            "Text": "enums",
            "Link": "http://stackoverflow.com/documentation/swift/224/enums"
          },
          {
            "Text": ", you can define the generic placeholder after the type name."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490072,
        "id": "c2e118f4-bd30-4424-a3fe-21049ad72d2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490072,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cT\u003eTT"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cT\u003eTT",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490072,
        "id": "385642ae-3214-464b-b3d9-202a699ba6aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490072,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This generic placeholder will require a type when you come to use the class "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In this case, it can be inferred from the initialiser "
            ],
            [
              "init(baz:T)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This generic placeholder will require a type when you come to use the class "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": ". In this case, it can be inferred from the initialiser "
          },
          {
            "Text": "init(baz:T)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490073,
        "id": "f98c1f7c-d9cb-4e85-a5a5-7cfc924424cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490073,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let bar = Bar(baz: \"a string\") // bar's type is Bar\u003cString\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let bar = Bar(baz: \"a string\") // bar's type is Bar\u003cString\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490073,
        "id": "30db9dce-70e8-4d56-95e2-99664ae43854",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490073,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here the generic placeholder "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is inferred to be of type "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", thus creating a "
            ],
            [
              "Bar\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance. You can also specify the type explicitly:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here the generic placeholder "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " is inferred to be of type "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ", thus creating a "
          },
          {
            "Text": "Bar\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " instance. You can also specify the type explicitly:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490073,
        "id": "95fbba90-6ba7-4c2e-9933-e3889b6fa2e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490073,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cString\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cString\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490073,
        "id": "1c4456ab-cebc-4365-908e-87710398c2b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490073,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When used with a type, the given generic placeholder will keep its type for the entire lifetime of the given instance, and cannot be changed after initialisation. Therefore when you access the property "
            ],
            [
              "baz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it will always be of type "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for this given instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When used with a type, the given generic placeholder will keep its type for the entire lifetime of the given instance, and cannot be changed after initialisation. Therefore when you access the property "
          },
          {
            "Text": "baz",
            "AttrFlags": 2
          },
          {
            "Text": ", it will always be of type "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " for this given instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490073,
        "id": "83d35147-638c-4dd1-bb31-9de0b62921a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490073,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let str = bar.baz // of type String"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let str = bar.baz // of type String",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490073,
        "id": "48360544-6d25-48b4-a4f1-b4ff813b3467",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490073,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Passing Around Generic Types"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Passing Around Generic Types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490074,
        "id": "ccd1d085-61f9-4b18-919e-4c0787d2879d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490074,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you come to pass around generic types, in most cases you have to be explicit about the generic placeholder type you expect. For example, as a function input:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you come to pass around generic types, in most cases you have to be explicit about the generic placeholder type you expect. For example, as a function input:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490074,
        "id": "e243280e-ea20-4de0-a760-c118ce1bc83c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490074,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cInt\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cInt\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490074,
        "id": "849fbb4e-639e-4e2e-9685-07cbe38b518a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490074,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This function will only accept a "
            ],
            [
              "Bar\u003cInt\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Attempting to pass in a "
            ],
            [
              "Bar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance where the generic placeholder type is not "
            ],
            [
              "Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will result in a compiler error."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This function will only accept a "
          },
          {
            "Text": "Bar\u003cInt\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". Attempting to pass in a "
          },
          {
            "Text": "Bar",
            "AttrFlags": 2
          },
          {
            "Text": " instance where the generic placeholder type is not "
          },
          {
            "Text": "Int",
            "AttrFlags": 2
          },
          {
            "Text": " will result in a compiler error."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490074,
        "id": "922d8b41-0a4c-4f2d-86f3-7f2122275018",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490074,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generic Placeholder Naming"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generic Placeholder Naming"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490075,
        "id": "a7bbd890-a66b-4c4c-9206-befd2f8f3080",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490075,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generic placeholder names are not just limited to single letters. If a given placeholder represents a meaningful concept, you should give it a descriptive name. For example, Swift’s "
            ],
            [
              "Array",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/library/watchos/documentation/Swift/Reference/Swift_Array_Structure/index.html"
                ]
              ]
            ],
            [
              " has a generic placeholder called "
            ],
            [
              "Element",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which defines the element type of a given "
            ],
            [
              "Array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generic placeholder names are not just limited to single letters. If a given placeholder represents a meaningful concept, you should give it a descriptive name. For example, Swift’s "
          },
          {
            "Text": "Array",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/library/watchos/documentation/Swift/Reference/Swift_Array_Structure/index.html"
          },
          {
            "Text": " has a generic placeholder called "
          },
          {
            "Text": "Element",
            "AttrFlags": 2
          },
          {
            "Text": ", which defines the element type of a given "
          },
          {
            "Text": "Array",
            "AttrFlags": 2
          },
          {
            "Text": " instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105490075,
        "id": "d2425e47-f574-467d-a08d-b1a845afee35",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105490075,
        "parent_id": "ec65ddfd-4e14-4b82-9761-af2af4825f5d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003cElement\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003cElement\u003e",
        "code_language": "Plain Text"
      }
    ],
    "title": "The Basics of Generics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}