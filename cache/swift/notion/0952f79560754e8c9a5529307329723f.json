{
  "ID": "0952f795-6075-4e8c-9a55-29307329723f",
  "Root": {
    "alive": true,
    "content": [
      "6d00f4da-cbf4-410d-8dd6-c1c1ce1b0040",
      "d1092a94-343c-47de-8254-ceadb7268f08",
      "4282d794-01b7-441b-b19b-8295b20dde1d",
      "01185799-bf42-414e-b384-9649e9c530d8",
      "e58f2fe9-f116-4332-a985-8d45849a986d",
      "98a9d9fc-5144-47e8-9ba0-3eec57557199",
      "ff37a5c4-4126-4d6e-a369-4c0c8c9faa7a",
      "9f784695-0065-4d4f-b60a-349ae1359bc8",
      "4f302856-664f-416a-92bd-e30b9ab66bc3",
      "b1ac9b2c-c0f0-40c0-a157-79f90c630c4d",
      "ab157fca-c6ae-449d-89e1-220669efbcba",
      "01c3ff5e-2702-4ece-bd2a-0a8050d5dc43"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105570893,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0952f795-6075-4e8c-9a55-29307329723f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105570893,
    "parent_id": "2f2b8c00-b4d8-4005-9764-71297a1f77f4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Leveraging Protocol Oriented Programming for Unit Testing"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570887,
        "id": "6d00f4da-cbf4-410d-8dd6-c1c1ce1b0040",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570887,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Protocol Oriented Programming is a useful tool in order to easily write better unit tests for our code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Protocol Oriented Programming is a useful tool in order to easily write better unit tests for our code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570890,
        "id": "d1092a94-343c-47de-8254-ceadb7268f08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570890,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say we want to test a UIViewController that relies on a ViewModel class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say we want to test a UIViewController that relies on a ViewModel class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570890,
        "id": "4282d794-01b7-441b-b19b-8295b20dde1d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570890,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The needed steps on the production code are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The needed steps on the production code are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570891,
        "id": "01185799-bf42-414e-b384-9649e9c530d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570891,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Define a protocol that exposes the public interface of the class ViewModel, with all the properties and methods needed by the UIViewController."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Define a protocol that exposes the public interface of the class ViewModel, with all the properties and methods needed by the UIViewController."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570892,
        "id": "e58f2fe9-f116-4332-a985-8d45849a986d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570892,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implement the real ViewModel class, conforming to that protocol."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implement the real ViewModel class, conforming to that protocol."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570892,
        "id": "98a9d9fc-5144-47e8-9ba0-3eec57557199",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570892,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use a dependency injection technique to let the view controller use the implementation we want, passing it as the protocol and not the concrete instance."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use a dependency injection technique to let the view controller use the implementation we want, passing it as the protocol and not the concrete instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570892,
        "id": "ff37a5c4-4126-4d6e-a369-4c0c8c9faa7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570892,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "protocol ViewModelType {\n   var title : String {get}\n   func confirm()\n}\n\nclass ViewModel : ViewModelType {\n   let title : String\n\n   init(title: String) {\n       self.title = title\n   }\n   func confirm() { ... }\n}\n\nclass ViewController : UIViewController {\n   // We declare the viewModel property as an object conforming to the protocol\n   // so we can swap the implementations without any friction.\n   var viewModel : ViewModelType! \n   @IBOutlet var titleLabel : UILabel!\n\n   override func viewDidLoad() {\n       super.viewDidLoad()\n       titleLabel.text = viewModel.title\n   }\n\n   @IBAction func didTapOnButton(sender: UIButton) {\n       viewModel.confirm()\n   }\n}\n\n// With DI we setup the view controller and assign the view model.\n// The view controller doesn't know the concrete class of the view model, \n// but just relies on the declared interface on the protocol.\nlet viewController = //... Instantiate view controller\nviewController.viewModel = ViewModel(title: \"MyTitle\")"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "protocol ViewModelType {\n   var title : String {get}\n   func confirm()\n}\n\nclass ViewModel : ViewModelType {\n   let title : String\n\n   init(title: String) {\n       self.title = title\n   }\n   func confirm() { ... }\n}\n\nclass ViewController : UIViewController {\n   // We declare the viewModel property as an object conforming to the protocol\n   // so we can swap the implementations without any friction.\n   var viewModel : ViewModelType! \n   @IBOutlet var titleLabel : UILabel!\n\n   override func viewDidLoad() {\n       super.viewDidLoad()\n       titleLabel.text = viewModel.title\n   }\n\n   @IBAction func didTapOnButton(sender: UIButton) {\n       viewModel.confirm()\n   }\n}\n\n// With DI we setup the view controller and assign the view model.\n// The view controller doesn't know the concrete class of the view model, \n// but just relies on the declared interface on the protocol.\nlet viewController = //... Instantiate view controller\nviewController.viewModel = ViewModel(title: \"MyTitle\")",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570892,
        "id": "9f784695-0065-4d4f-b60a-349ae1359bc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570892,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then, on unit test:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then, on unit test:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570892,
        "id": "4f302856-664f-416a-92bd-e30b9ab66bc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570892,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implement a mock ViewModel that conforms to the same protocol"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implement a mock ViewModel that conforms to the same protocol"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570892,
        "id": "b1ac9b2c-c0f0-40c0-a157-79f90c630c4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570892,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pass it to the UIViewController under test using dependency injection, instead of the real instance."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pass it to the UIViewController under test using dependency injection, instead of the real instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570893,
        "id": "ab157fca-c6ae-449d-89e1-220669efbcba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570893,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test!"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105570893,
        "id": "01c3ff5e-2702-4ece-bd2a-0a8050d5dc43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105570893,
        "parent_id": "0952f795-6075-4e8c-9a55-29307329723f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class FakeViewModel : ViewModelType {\n   let title : String = \"FakeTitle\"\n\n   var didConfirm = false\n   func confirm() {\n       didConfirm = true\n   }\n}\n\nclass ViewControllerTest : XCTestCase {\n    var sut : ViewController!\n    var viewModel : FakeViewModel!\n\n    override func setUp() {\n        super.setUp()\n\n        viewModel = FakeViewModel()\n        sut = // ... initialization for view controller\n        sut.viewModel = viewModel\n\n        XCTAssertNotNil(self.sut.view) // Needed to trigger view loading\n    } \n\n    func testTitleLabel() {\n        XCTAssertEqual(self.sut.titleLabel.text, \"FakeTitle\")\n    }\n\n    func testTapOnButton() {\n        sut.didTapOnButton(UIButton())\n        XCTAssertTrue(self.viewModel.didConfirm)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class FakeViewModel : ViewModelType {\n   let title : String = \"FakeTitle\"\n\n   var didConfirm = false\n   func confirm() {\n       didConfirm = true\n   }\n}\n\nclass ViewControllerTest : XCTestCase {\n    var sut : ViewController!\n    var viewModel : FakeViewModel!\n\n    override func setUp() {\n        super.setUp()\n\n        viewModel = FakeViewModel()\n        sut = // ... initialization for view controller\n        sut.viewModel = viewModel\n\n        XCTAssertNotNil(self.sut.view) // Needed to trigger view loading\n    } \n\n    func testTitleLabel() {\n        XCTAssertEqual(self.sut.titleLabel.text, \"FakeTitle\")\n    }\n\n    func testTapOnButton() {\n        sut.didTapOnButton(UIButton())\n        XCTAssertTrue(self.viewModel.didConfirm)\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Leveraging Protocol Oriented Programming for Unit Testing",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}