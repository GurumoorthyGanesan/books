{
  "ID": "cd0c5142-2606-4d4e-a922-8edee0db52e9",
  "Root": {
    "alive": true,
    "content": [
      "a08e06d5-2a1e-4b51-8069-76fb07054615",
      "6affe406-c57f-433b-bfd8-647c6e44459b",
      "224d24da-0eca-42bd-860d-a1a9d4fa5f87"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105841976,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cd0c5142-2606-4d4e-a922-8edee0db52e9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105841976,
    "parent_id": "18f00844-2ce5-4c04-9bd7-9a256ae07a77",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Extending String to do simple pattern matching"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105841975,
        "id": "a08e06d5-2a1e-4b51-8069-76fb07054615",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105841975,
        "parent_id": "cd0c5142-2606-4d4e-a922-8edee0db52e9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "extension String {\n    func matchesPattern(pattern: String) -\u003e Bool {\n        do {\n            let regex = try NSRegularExpression(pattern: pattern,\n                                                options: NSRegularExpressionOptions(rawValue: 0))\n            let range: NSRange = NSMakeRange(0, self.characters.count)\n            let matches = regex.matchesInString(self, options: NSMatchingOptions(), range: range)\n            return matches.count \u003e 0\n        } catch _ {\n            return false\n        }\n    }\n}\n\n// very basic examples - check for specific strings\ndump(\"Pinkman\".matchesPattern(\"(White|Pinkman|Goodman|Schrader|Fring)\"))\n\n// using character groups to check for similar-sounding impressionist painters\ndump(\"Monet\".matchesPattern(\"(M[oa]net)\"))\ndump(\"Manet\".matchesPattern(\"(M[oa]net)\"))\ndump(\"Money\".matchesPattern(\"(M[oa]net)\"))     // false\n\n// check surname is in list\ndump(\"Skyler White\".matchesPattern(\"\\\\w+ (White|Pinkman|Goodman|Schrader|Fring)\"))\n\n// check if string looks like a UK stock ticker\ndump(\"VOD.L\".matchesPattern(\"[A-Z]{2,3}\\\\.L\"))\ndump(\"BP.L\".matchesPattern(\"[A-Z]{2,3}\\\\.L\"))\n\n// check entire string is printable ASCII characters\ndump(\"tab\\tformatted text\".matchesPattern(\"^[\\u{0020}-\\u{007e}]*$\"))\n\n// Unicode example: check if string contains a playing card suit\ndump(\"â™ ï¸Ž\".matchesPattern(\"[\\u{2660}-\\u{2667}]\"))\ndump(\"â™¡\".matchesPattern(\"[\\u{2660}-\\u{2667}]\"))\ndump(\"ðŸ˜‚\".matchesPattern(\"[\\u{2660}-\\u{2667}]\"))    // false\n\n// NOTE: regex needs Unicode-escaped characters\ndump(\"â™£ï¸Ž\".matchesPattern(\"â™£ï¸Ž\"))           // does NOT work"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "extension String {\n    func matchesPattern(pattern: String) -\u003e Bool {\n        do {\n            let regex = try NSRegularExpression(pattern: pattern,\n                                                options: NSRegularExpressionOptions(rawValue: 0))\n            let range: NSRange = NSMakeRange(0, self.characters.count)\n            let matches = regex.matchesInString(self, options: NSMatchingOptions(), range: range)\n            return matches.count \u003e 0\n        } catch _ {\n            return false\n        }\n    }\n}\n\n// very basic examples - check for specific strings\ndump(\"Pinkman\".matchesPattern(\"(White|Pinkman|Goodman|Schrader|Fring)\"))\n\n// using character groups to check for similar-sounding impressionist painters\ndump(\"Monet\".matchesPattern(\"(M[oa]net)\"))\ndump(\"Manet\".matchesPattern(\"(M[oa]net)\"))\ndump(\"Money\".matchesPattern(\"(M[oa]net)\"))     // false\n\n// check surname is in list\ndump(\"Skyler White\".matchesPattern(\"\\\\w+ (White|Pinkman|Goodman|Schrader|Fring)\"))\n\n// check if string looks like a UK stock ticker\ndump(\"VOD.L\".matchesPattern(\"[A-Z]{2,3}\\\\.L\"))\ndump(\"BP.L\".matchesPattern(\"[A-Z]{2,3}\\\\.L\"))\n\n// check entire string is printable ASCII characters\ndump(\"tab\\tformatted text\".matchesPattern(\"^[\\u{0020}-\\u{007e}]*$\"))\n\n// Unicode example: check if string contains a playing card suit\ndump(\"â™ ï¸Ž\".matchesPattern(\"[\\u{2660}-\\u{2667}]\"))\ndump(\"â™¡\".matchesPattern(\"[\\u{2660}-\\u{2667}]\"))\ndump(\"ðŸ˜‚\".matchesPattern(\"[\\u{2660}-\\u{2667}]\"))    // false\n\n// NOTE: regex needs Unicode-escaped characters\ndump(\"â™£ï¸Ž\".matchesPattern(\"â™£ï¸Ž\"))           // does NOT work",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105841975,
        "id": "6affe406-c57f-433b-bfd8-647c6e44459b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105841975,
        "parent_id": "cd0c5142-2606-4d4e-a922-8edee0db52e9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below is another example which builds on the above to do something useful, which canâ€™t easily be done by any other method and lends itself well to a regex solution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below is another example which builds on the above to do something useful, which canâ€™t easily be done by any other method and lends itself well to a regex solution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105841975,
        "id": "224d24da-0eca-42bd-860d-a1a9d4fa5f87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105841975,
        "parent_id": "cd0c5142-2606-4d4e-a922-8edee0db52e9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Pattern validation for a UK postcode.\n// This simply checks that the format looks like a valid UK postcode and should not fail on false positives.\nprivate func isPostcodeValid(postcode: String) -\u003e Bool {\n    return postcode.matchesPattern(\"^[A-Z]{1,2}([0-9][A-Z]|[0-9]{1,2})\\\\s[0-9][A-Z]{2}\")\n}\n\n// valid patterns (from https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Validation)\n// will return true\ndump(isPostcodeValid(\"EC1A 1BB\"))\ndump(isPostcodeValid(\"W1A 0AX\"))\ndump(isPostcodeValid(\"M1 1AE\"))\ndump(isPostcodeValid(\"B33 8TH\"))\ndump(isPostcodeValid(\"CR2 6XH\"))\ndump(isPostcodeValid(\"DN55 1PT\"))\n\n// some invalid patterns\n// will return false\ndump(isPostcodeValid(\"EC12A 1BB\"))\ndump(isPostcodeValid(\"CRB1 6XH\"))\ndump(isPostcodeValid(\"CR 6XH\"))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Pattern validation for a UK postcode.\n// This simply checks that the format looks like a valid UK postcode and should not fail on false positives.\nprivate func isPostcodeValid(postcode: String) -\u003e Bool {\n    return postcode.matchesPattern(\"^[A-Z]{1,2}([0-9][A-Z]|[0-9]{1,2})\\\\s[0-9][A-Z]{2}\")\n}\n\n// valid patterns (from https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Validation)\n// will return true\ndump(isPostcodeValid(\"EC1A 1BB\"))\ndump(isPostcodeValid(\"W1A 0AX\"))\ndump(isPostcodeValid(\"M1 1AE\"))\ndump(isPostcodeValid(\"B33 8TH\"))\ndump(isPostcodeValid(\"CR2 6XH\"))\ndump(isPostcodeValid(\"DN55 1PT\"))\n\n// some invalid patterns\n// will return false\ndump(isPostcodeValid(\"EC12A 1BB\"))\ndump(isPostcodeValid(\"CRB1 6XH\"))\ndump(isPostcodeValid(\"CR 6XH\"))",
        "code_language": "Plain Text"
      }
    ],
    "title": "Extending String to do simple pattern matching",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}