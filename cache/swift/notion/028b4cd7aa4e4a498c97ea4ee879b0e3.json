{
  "ID": "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
  "Root": {
    "alive": true,
    "content": [
      "6fcf849a-9397-4bc7-97d9-d9b1ce4cb980",
      "90ce2328-ad9d-4a00-8561-2b91af049439",
      "bc0ba635-bf29-4367-8dc2-c0b296523abf",
      "2bc1fc1c-706e-41c4-b40c-caa979a98386"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105928077,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105928077,
    "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Asymptotic analysis"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928073,
        "id": "6fcf849a-9397-4bc7-97d9-d9b1ce4cb980",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928073,
        "parent_id": "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since we have many different algorithms to choose from, when we want to sort an array, we need to know which one will do it’s job. So we need some method of measuring algoritm’s speed and reliability. That’s where Asymptotic analysis kicks in. Asymptotic analysis is the process of describing the efficiency of algorithms as their input size (n) grows. In computer science, asymptotics are usually expressed in a common format known as Big O Notation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since we have many different algorithms to choose from, when we want to sort an array, we need to know which one will do it’s job. So we need some method of measuring algoritm’s speed and reliability. That’s where Asymptotic analysis kicks in. Asymptotic analysis is the process of describing the efficiency of algorithms as their input size (n) grows. In computer science, asymptotics are usually expressed in a common format known as Big O Notation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928076,
        "id": "90ce2328-ad9d-4a00-8561-2b91af049439",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928076,
        "parent_id": "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Linear time O(n)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": When each item in the array has to be evaluated in order for a function to achieve it’s goal, that means that the function becomes less efficent as number of elements is increasing. "
            ],
            [
              "A function like this is said to run in linear time because its speed is dependent on its input size.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Linear time O(n)",
            "AttrFlags": 1
          },
          {
            "Text": ": When each item in the array has to be evaluated in order for a function to achieve it’s goal, that means that the function becomes less efficent as number of elements is increasing. "
          },
          {
            "Text": "A function like this is said to run in linear time because its speed is dependent on its input size.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928076,
        "id": "bc0ba635-bf29-4367-8dc2-c0b296523abf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928076,
        "parent_id": "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Polynominal time O(n2)",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": If complexity of a function grows exponentialy (meaning that for n elements of an array complexity of a function is n squared) that function operates in polynominal time. These are usually functions with nested loops. Two nested loops result in O(n2) complexity, three nested loops result in O(n3) complexity, and so on…"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Polynominal time O(n2)",
            "AttrFlags": 1
          },
          {
            "Text": ": If complexity of a function grows exponentialy (meaning that for n elements of an array complexity of a function is n squared) that function operates in polynominal time. These are usually functions with nested loops. Two nested loops result in O(n2) complexity, three nested loops result in O(n3) complexity, and so on…"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928077,
        "id": "2bc1fc1c-706e-41c4-b40c-caa979a98386",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928077,
        "parent_id": "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Logarithmic time O(log n):",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Logarithmic time functions’s complexity is minimized when the size of its inputs (n) grows. These are the type of functions every programmer strives for."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Logarithmic time O(log n):",
            "AttrFlags": 1
          },
          {
            "Text": " Logarithmic time functions’s complexity is minimized when the size of its inputs (n) grows. These are the type of functions every programmer strives for."
          }
        ]
      }
    ],
    "title": "Asymptotic analysis",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}