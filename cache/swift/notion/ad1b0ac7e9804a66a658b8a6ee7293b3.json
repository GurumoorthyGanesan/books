{
  "ID": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
  "Root": {
    "alive": true,
    "content": [
      "923f828f-6725-47df-876e-1ff6260aef7c",
      "9898ba6d-2f1e-48ab-a411-59cd6e200b14",
      "71ae7cb0-9a7b-45aa-9be5-709afa424f38",
      "e0de4a52-ab20-4474-a74c-e8e203f61f0f",
      "13bf7c31-3989-4b4b-b3d7-e74b934b83f6",
      "0f2a2897-9a47-4f46-87be-c62b4e90076b",
      "5200fb3c-8a3d-4ef9-97c4-f958be3479f0",
      "789ceac2-240e-4c02-b25f-cad94b71bef9",
      "23e330f8-1410-42de-9f9d-98d7e2262c4c",
      "7199e80b-69e4-4f90-8c5e-f7c545a1021e",
      "9d8d1602-03d0-42b6-8108-50797f2e89c5",
      "709a32e4-68e1-48e9-8673-2864d0228fce",
      "ae437824-b994-4319-bac0-7201fe854d7d",
      "fd1839f9-5585-4670-adc5-5d3d2397a460",
      "013bc0f9-0c1b-4ea6-80e5-9e162264c867",
      "296e6010-5c16-44f0-bcae-834c3449dc1a",
      "4f2262a5-8e24-4760-8642-bebcfae46ce4",
      "94ef7744-a5ff-42ad-9ae5-bbc0bda19470",
      "24f06132-5ba7-4ee5-8104-34f538653e1a",
      "eb1610ac-f5dd-439f-be53-7ca139ff83b0",
      "87b6b9ba-aa8c-4509-a149-289716e35492",
      "02e7d51f-2e59-4457-9aff-2103838e25cb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105893227,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105893227,
    "parent_id": "9ae8b978-28e6-44f1-af9c-629e5306665c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dependency Injection Types"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893221,
        "id": "923f828f-6725-47df-876e-1ff6260aef7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893221,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example will demonstrate how to use Dependency Injection ("
            ],
            [
              "DI",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ") design pattern in Swift using these methods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example will demonstrate how to use Dependency Injection ("
          },
          {
            "Text": "DI",
            "AttrFlags": 1
          },
          {
            "Text": ") design pattern in Swift using these methods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893224,
        "id": "9898ba6d-2f1e-48ab-a411-59cd6e200b14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893224,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Initializer Injection",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (the proper term is Constructor Injection, but since Swift has initializers it’s called initializer injection)"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Initializer Injection",
            "AttrFlags": 1
          },
          {
            "Text": " (the proper term is Constructor Injection, but since Swift has initializers it’s called initializer injection)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893224,
        "id": "71ae7cb0-9a7b-45aa-9be5-709afa424f38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893224,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Property Injection",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Property Injection",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "e0de4a52-ab20-4474-a74c-e8e203f61f0f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method Injection",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method Injection",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "13bf7c31-3989-4b4b-b3d7-e74b934b83f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Setup without DI"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Setup without DI"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "0f2a2897-9a47-4f46-87be-c62b4e90076b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "protocol Engine {\n    func startEngine()\n    func stopEngine()\n}\n\nclass TrainEngine: Engine {\n    func startEngine() {\n        print(\"Engine started\")\n    }\n    \n    func stopEngine() {\n        print(\"Engine stopped\")\n    }\n}\n\nprotocol TrainCar {\nvar numberOfSeats: Int { get }\nfunc attachCar(attach: Bool)\n}\n\nclass RestaurantCar: TrainCar {\nvar numberOfSeats: Int {\n    get {\n        return 30\n    }\n}\nfunc attachCar(attach: Bool) {\n    print(\"Attach car\")\n}\n}\n\nclass PassengerCar: TrainCar {\nvar numberOfSeats: Int {\n    get {\n        return 50\n    }\n}\nfunc attachCar(attach: Bool) {\n    print(\"Attach car\")\n}\n}\n\nclass Train {\nlet engine: Engine?\nvar mainCar: TrainCar?\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "protocol Engine {\n    func startEngine()\n    func stopEngine()\n}\n\nclass TrainEngine: Engine {\n    func startEngine() {\n        print(\"Engine started\")\n    }\n    \n    func stopEngine() {\n        print(\"Engine stopped\")\n    }\n}\n\nprotocol TrainCar {\nvar numberOfSeats: Int { get }\nfunc attachCar(attach: Bool)\n}\n\nclass RestaurantCar: TrainCar {\nvar numberOfSeats: Int {\n    get {\n        return 30\n    }\n}\nfunc attachCar(attach: Bool) {\n    print(\"Attach car\")\n}\n}\n\nclass PassengerCar: TrainCar {\nvar numberOfSeats: Int {\n    get {\n        return 50\n    }\n}\nfunc attachCar(attach: Bool) {\n    print(\"Attach car\")\n}\n}\n\nclass Train {\nlet engine: Engine?\nvar mainCar: TrainCar?\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "5200fb3c-8a3d-4ef9-97c4-f958be3479f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Initializer Dependency Injection"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Initializer Dependency Injection"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "789ceac2-240e-4c02-b25f-cad94b71bef9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As the name says, all dependencies are injected through the class initializer. To inject dependencies through the initializer, we’ll add the initializer to the "
            ],
            [
              "Train",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As the name says, all dependencies are injected through the class initializer. To inject dependencies through the initializer, we’ll add the initializer to the "
          },
          {
            "Text": "Train",
            "AttrFlags": 2
          },
          {
            "Text": " class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "23e330f8-1410-42de-9f9d-98d7e2262c4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Train class now looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Train class now looks like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893225,
        "id": "7199e80b-69e4-4f90-8c5e-f7c545a1021e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893225,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Train {\n    let engine: Engine?\n    var mainCar: TrainCar?\n    \n    init(engine: Engine) {\n        self.engine = engine\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Train {\n    let engine: Engine?\n    var mainCar: TrainCar?\n    \n    init(engine: Engine) {\n        self.engine = engine\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "9d8d1602-03d0-42b6-8108-50797f2e89c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we want to create an instance of the Train class we’ll use initializer to inject a specific Engine implementation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we want to create an instance of the Train class we’ll use initializer to inject a specific Engine implementation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "709a32e4-68e1-48e9-8673-2864d0228fce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let train = Train(engine: TrainEngine())"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let train = Train(engine: TrainEngine())",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "ae437824-b994-4319-bac0-7201fe854d7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " The main advantage of the initializer injection versus the property injection is that we can set the variable as private variable or even make it a constant with the "
            ],
            [
              "let",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword (as we did in our example). This way we can make sure that no one can access it or change it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE:",
            "AttrFlags": 1
          },
          {
            "Text": " The main advantage of the initializer injection versus the property injection is that we can set the variable as private variable or even make it a constant with the "
          },
          {
            "Text": "let",
            "AttrFlags": 2
          },
          {
            "Text": " keyword (as we did in our example). This way we can make sure that no one can access it or change it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "fd1839f9-5585-4670-adc5-5d3d2397a460",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Properties Dependency Injection"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Properties Dependency Injection"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "013bc0f9-0c1b-4ea6-80e5-9e162264c867",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DI using properties is even simpler that using an initializer. Let’s inject a PassengerCar dependency to the train object we already created using the properties DI:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "DI using properties is even simpler that using an initializer. Let’s inject a PassengerCar dependency to the train object we already created using the properties DI:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "296e6010-5c16-44f0-bcae-834c3449dc1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "train.mainCar = PassengerCar()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "train.mainCar = PassengerCar()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893226,
        "id": "4f2262a5-8e24-4760-8642-bebcfae46ce4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893226,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That’s it. Our train’s "
            ],
            [
              "mainCar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is now a "
            ],
            [
              "PassengerCar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That’s it. Our train’s "
          },
          {
            "Text": "mainCar",
            "AttrFlags": 2
          },
          {
            "Text": " is now a "
          },
          {
            "Text": "PassengerCar",
            "AttrFlags": 2
          },
          {
            "Text": " instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893227,
        "id": "94ef7744-a5ff-42ad-9ae5-bbc0bda19470",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893227,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Method Dependency Injection"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Method Dependency Injection"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893227,
        "id": "24f06132-5ba7-4ee5-8104-34f538653e1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893227,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This type of dependency injection is a little different that the previous two because it won’t affect the whole object, but it will only inject a dependency to be used in the scope of one specific method. When a dependency is only used in a single method, it’s usually not good to make the whole object dependent on it. Let’s add a new method to the Train class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This type of dependency injection is a little different that the previous two because it won’t affect the whole object, but it will only inject a dependency to be used in the scope of one specific method. When a dependency is only used in a single method, it’s usually not good to make the whole object dependent on it. Let’s add a new method to the Train class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893227,
        "id": "eb1610ac-f5dd-439f-be53-7ca139ff83b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893227,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func reparkCar(trainCar: TrainCar) {\n    trainCar.attachCar(attach: true)\n    engine?.startEngine()\n    engine?.stopEngine()\n    trainCar.attachCar(attach: false)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func reparkCar(trainCar: TrainCar) {\n    trainCar.attachCar(attach: true)\n    engine?.startEngine()\n    engine?.stopEngine()\n    trainCar.attachCar(attach: false)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893227,
        "id": "87b6b9ba-aa8c-4509-a149-289716e35492",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893227,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, if we call the new Train’s class method, we’ll inject the "
            ],
            [
              "TrainCar",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using the method dependency injection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, if we call the new Train’s class method, we’ll inject the "
          },
          {
            "Text": "TrainCar",
            "AttrFlags": 2
          },
          {
            "Text": " using the method dependency injection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105893227,
        "id": "02e7d51f-2e59-4457-9aff-2103838e25cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105893227,
        "parent_id": "ad1b0ac7-e980-4a66-a658-b8a6ee7293b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "train.reparkCar(trainCar: RestaurantCar())"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "train.reparkCar(trainCar: RestaurantCar())",
        "code_language": "Plain Text"
      }
    ],
    "title": "Dependency Injection Types",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}