{
  "ID": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
  "Root": {
    "alive": true,
    "content": [
      "00b577d1-fcc1-440d-8f37-ebd4974eb1c9",
      "d0b7b703-1aca-4f84-94f9-c6144841b03e",
      "27077880-a9a7-4746-86e5-f4494a62fe74",
      "77e4844f-eb0d-4a27-8d7a-75fb610075c0",
      "57a71aa3-5e43-4510-aa8a-49a61a4e58ae",
      "9174847c-d976-42cc-b2a5-ff59b2ce86e9",
      "4a8732d7-37b6-4256-ba87-59aa2573aaf2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105064997,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105064997,
    "parent_id": "9f9ac142-3746-4907-b806-661ae15321d3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Filtering out nil from an Array transformation with flatMap"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064994,
        "id": "00b577d1-fcc1-440d-8f37-ebd4974eb1c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064994,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use "
            ],
            [
              "flatMap(_:)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v2.2/protocol/SequenceType/#func--flatmap-t_-self-generator-element-throws-t"
                ]
              ]
            ],
            [
              " in a similar manner to "
            ],
            [
              "map(_:)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/284/arrays/3584/transforming-the-elements-of-an-array-with-map"
                ]
              ]
            ],
            [
              " in order to create an array by applying a transform to a sequence’s elements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use "
          },
          {
            "Text": "flatMap(_:)",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v2.2/protocol/SequenceType/#func--flatmap-t_-self-generator-element-throws-t"
          },
          {
            "Text": " in a similar manner to "
          },
          {
            "Text": "map(_:)",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/swift/284/arrays/3584/transforming-the-elements-of-an-array-with-map"
          },
          {
            "Text": " in order to create an array by applying a transform to a sequence’s elements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064995,
        "id": "d0b7b703-1aca-4f84-94f9-c6144841b03e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064995,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "extension SequenceType {\n    public func flatMap\u003cT\u003e(@noescape transform: (Self.Generator.Element) throws -\u003e T?) rethrows -\u003e [T]\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "extension SequenceType {\n    public func flatMap\u003cT\u003e(@noescape transform: (Self.Generator.Element) throws -\u003e T?) rethrows -\u003e [T]\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064996,
        "id": "27077880-a9a7-4746-86e5-f4494a62fe74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064996,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The difference with this version of "
            ],
            [
              "flatMap(_:)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is that it expects the transform "
            ],
            [
              "closure",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/262/closures"
                ]
              ]
            ],
            [
              " to return an "
            ],
            [
              "Optional",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/247/optionals"
                ]
              ]
            ],
            [
              " value "
            ],
            [
              "T?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for each of the elements. It will then safely unwrap each of these optional values, filtering out "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – resulting in an array of "
            ],
            [
              "[T]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The difference with this version of "
          },
          {
            "Text": "flatMap(_:)",
            "AttrFlags": 2
          },
          {
            "Text": " is that it expects the transform "
          },
          {
            "Text": "closure",
            "Link": "http://stackoverflow.com/documentation/swift/262/closures"
          },
          {
            "Text": " to return an "
          },
          {
            "Text": "Optional",
            "Link": "http://stackoverflow.com/documentation/swift/247/optionals"
          },
          {
            "Text": " value "
          },
          {
            "Text": "T?",
            "AttrFlags": 2
          },
          {
            "Text": " for each of the elements. It will then safely unwrap each of these optional values, filtering out "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " – resulting in an array of "
          },
          {
            "Text": "[T]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064997,
        "id": "77e4844f-eb0d-4a27-8d7a-75fb610075c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064997,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, you can this in order to transform a "
            ],
            [
              "[String]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a "
            ],
            [
              "[Int]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using "
            ],
            [
              "Int",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
                ]
              ]
            ],
            [
              "’s failable ",
              [
                [
                  "a",
                  "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
                ]
              ]
            ],
            [
              "String",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
                ]
              ]
            ],
            [
              " initializer",
              [
                [
                  "a",
                  "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
                ]
              ]
            ],
            [
              ", filtering out any elements that cannot be converted:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, you can this in order to transform a "
          },
          {
            "Text": "[String]",
            "AttrFlags": 2
          },
          {
            "Text": " into a "
          },
          {
            "Text": "[Int]",
            "AttrFlags": 2
          },
          {
            "Text": " using "
          },
          {
            "Text": "Int",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
          },
          {
            "Text": "’s failable ",
            "Link": "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
          },
          {
            "Text": "String",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
          },
          {
            "Text": " initializer",
            "Link": "http://swiftdoc.org/v2.2/type/Int/#init_radix_"
          },
          {
            "Text": ", filtering out any elements that cannot be converted:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064997,
        "id": "57a71aa3-5e43-4510-aa8a-49a61a4e58ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064997,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let strings = [\"1\", \"foo\", \"3\", \"4\", \"bar\", \"6\"]\n\nlet numbersThatCanBeConverted = strings.flatMap { Int($0) }\n\nprint(numbersThatCanBeConverted) // [1, 3, 4, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let strings = [\"1\", \"foo\", \"3\", \"4\", \"bar\", \"6\"]\n\nlet numbersThatCanBeConverted = strings.flatMap { Int($0) }\n\nprint(numbersThatCanBeConverted) // [1, 3, 4, 6]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064997,
        "id": "9174847c-d976-42cc-b2a5-ff59b2ce86e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064997,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also use "
            ],
            [
              "flatMap(_:)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s ability to filter out "
            ],
            [
              "nil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in order to simply convert an array of optionals into an array of non-optionals:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also use "
          },
          {
            "Text": "flatMap(_:)",
            "AttrFlags": 2
          },
          {
            "Text": "’s ability to filter out "
          },
          {
            "Text": "nil",
            "AttrFlags": 2
          },
          {
            "Text": " in order to simply convert an array of optionals into an array of non-optionals:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105064997,
        "id": "4a8732d7-37b6-4256-ba87-59aa2573aaf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105064997,
        "parent_id": "00fa3f50-f14d-40e4-aa53-32376ea9b7ae",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let optionalNumbers : [Int?] = [nil, 1, nil, 2, nil, 3]\n\nlet numbers = optionalNumbers.flatMap { $0 }\n\nprint(numbers) // [1, 2, 3]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let optionalNumbers : [Int?] = [nil, 1, nil, 2, nil, 3]\n\nlet numbers = optionalNumbers.flatMap { $0 }\n\nprint(numbers) // [1, 2, 3]",
        "code_language": "Plain Text"
      }
    ],
    "title": "Filtering out nil from an Array transformation with flatMap",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}