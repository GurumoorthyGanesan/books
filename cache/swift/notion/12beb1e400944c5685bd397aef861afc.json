{
  "ID": "12beb1e4-0094-4c56-85bd-397aef861afc",
  "Root": {
    "alive": true,
    "content": [
      "399810eb-0979-45c4-969c-ca040ca6d71f",
      "6f0f8e09-8d86-4e23-b738-259748240978",
      "29755045-9fee-4f5e-a2e3-6793dd510b94",
      "57ff05ad-2a88-47fb-921f-8ed97577d00b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105546894,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "12beb1e4-0094-4c56-85bd-397aef861afc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105546894,
    "parent_id": "b5d22e19-0056-4916-bf50-cc1dc2f38c0e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Extending UIViewController and Swizzling viewDidLoad"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105546891,
        "id": "399810eb-0979-45c4-969c-ca040ca6d71f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105546891,
        "parent_id": "12beb1e4-0094-4c56-85bd-397aef861afc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Objective-C, method swizzling is the process of changing the implementation of an existing selector. This is possible due to the way Selectors are mapped on a dispatch table, or a table of pointers to functions or methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Objective-C, method swizzling is the process of changing the implementation of an existing selector. This is possible due to the way Selectors are mapped on a dispatch table, or a table of pointers to functions or methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105546893,
        "id": "6f0f8e09-8d86-4e23-b738-259748240978",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105546893,
        "parent_id": "12beb1e4-0094-4c56-85bd-397aef861afc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pure Swift methods are not dynamically dispatched by the Objective-C runtime, but we can still take advantage of these tricks on any class that inherits from "
            ],
            [
              "NSObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pure Swift methods are not dynamically dispatched by the Objective-C runtime, but we can still take advantage of these tricks on any class that inherits from "
          },
          {
            "Text": "NSObject",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105546894,
        "id": "29755045-9fee-4f5e-a2e3-6793dd510b94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105546894,
        "parent_id": "12beb1e4-0094-4c56-85bd-397aef861afc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, we will extend "
            ],
            [
              "UIViewController",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and swizzle "
            ],
            [
              "viewDidLoad",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to add some custom logging:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, we will extend "
          },
          {
            "Text": "UIViewController",
            "AttrFlags": 2
          },
          {
            "Text": " and swizzle "
          },
          {
            "Text": "viewDidLoad",
            "AttrFlags": 2
          },
          {
            "Text": " to add some custom logging:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105546894,
        "id": "57ff05ad-2a88-47fb-921f-8ed97577d00b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105546894,
        "parent_id": "12beb1e4-0094-4c56-85bd-397aef861afc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "extension UIViewController {\n    \n    // We cannot override load like we could in Objective-C, so override initialize instead\n    public override static func initialize() {\n        \n        // Make a static struct for our dispatch token so only one exists in memory\n        struct Static {\n            static var token: dispatch_once_t = 0\n        }\n        \n        // Wrap this in a dispatch_once block so it is only run once\n        dispatch_once(\u0026Static.token) {\n            // Get the original selectors and method implementations, and swap them with our new method\n            let originalSelector = #selector(UIViewController.viewDidLoad)\n            let swizzledSelector = #selector(UIViewController.myViewDidLoad)\n            \n            let originalMethod = class_getInstanceMethod(self, originalSelector)\n            let swizzledMethod = class_getInstanceMethod(self, swizzledSelector)\n            \n            let didAddMethod = class_addMethod(self, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))\n            \n            // class_addMethod can fail if used incorrectly or with invalid pointers, so check to make sure we were able to add the method to the lookup table successfully\n            if didAddMethod {\n                class_replaceMethod(self, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))\n            } else {\n                method_exchangeImplementations(originalMethod, swizzledMethod);\n            }\n        }\n    }\n    \n    // Our new viewDidLoad function\n    // In this example, we are just logging the name of the function, but this can be used to run any custom code\n    func myViewDidLoad() {\n        // This is not recursive since we swapped the Selectors in initialize().\n        // We cannot call super in an extension.\n        self.myViewDidLoad()\n        print(#function) // logs myViewDidLoad()\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "extension UIViewController {\n    \n    // We cannot override load like we could in Objective-C, so override initialize instead\n    public override static func initialize() {\n        \n        // Make a static struct for our dispatch token so only one exists in memory\n        struct Static {\n            static var token: dispatch_once_t = 0\n        }\n        \n        // Wrap this in a dispatch_once block so it is only run once\n        dispatch_once(\u0026Static.token) {\n            // Get the original selectors and method implementations, and swap them with our new method\n            let originalSelector = #selector(UIViewController.viewDidLoad)\n            let swizzledSelector = #selector(UIViewController.myViewDidLoad)\n            \n            let originalMethod = class_getInstanceMethod(self, originalSelector)\n            let swizzledMethod = class_getInstanceMethod(self, swizzledSelector)\n            \n            let didAddMethod = class_addMethod(self, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))\n            \n            // class_addMethod can fail if used incorrectly or with invalid pointers, so check to make sure we were able to add the method to the lookup table successfully\n            if didAddMethod {\n                class_replaceMethod(self, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))\n            } else {\n                method_exchangeImplementations(originalMethod, swizzledMethod);\n            }\n        }\n    }\n    \n    // Our new viewDidLoad function\n    // In this example, we are just logging the name of the function, but this can be used to run any custom code\n    func myViewDidLoad() {\n        // This is not recursive since we swapped the Selectors in initialize().\n        // We cannot call super in an extension.\n        self.myViewDidLoad()\n        print(#function) // logs myViewDidLoad()\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Extending UIViewController and Swizzling viewDidLoad",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}