{
  "ID": "61575d1f-7879-472c-83bc-a1c409e6b16a",
  "Root": {
    "alive": true,
    "content": [
      "21676ada-622f-4e53-afb8-2966a126c55e",
      "9b039935-c120-41ee-8b8f-09ebf1a668d8",
      "2767baff-67b4-455f-bb9a-5c15987214cc",
      "262de053-25d5-4744-accc-ba0fb42cc2e4",
      "51a86fde-55d4-45c0-a967-18e213603996",
      "610e098b-d7c7-4691-bbb4-0dddaa00af52"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105142411,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105142411,
    "parent_id": "9926a540-7aa3-4e8b-a880-0d25223917b7",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reference Semantics"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105142407,
        "id": "21676ada-622f-4e53-afb8-2966a126c55e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105142407,
        "parent_id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Classes are "
            ],
            [
              "reference types",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", meaning that multiple variables can refer to the same instance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Classes are "
          },
          {
            "Text": "reference types",
            "AttrFlags": 1
          },
          {
            "Text": ", meaning that multiple variables can refer to the same instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105142410,
        "id": "9b039935-c120-41ee-8b8f-09ebf1a668d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105142410,
        "parent_id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "the samealso modifies firstDog"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "the samealso modifies firstDog",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105142410,
        "id": "2767baff-67b4-455f-bb9a-5c15987214cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105142410,
        "parent_id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because classes are reference types, even if the class is a constant, its variable properties can still be modified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because classes are reference types, even if the class is a constant, its variable properties can still be modified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105142410,
        "id": "262de053-25d5-4744-accc-ba0fb42cc2e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105142410,
        "parent_id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Dog {\n    var name: String // name is a variable property.\n    let age: Int // age is a constant property.\n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet constantDog = Dog(name: \"Rover\", age: 5)// This instance is a constant.\nvar variableDog = Dog(name: \"Spot\", age 7)// This instance is a variable.\n\nconstantDog.name = \"Fido\" // Not an error because name is a variable property.\nconstantDog.age = 6 // Error because age is a constant property.\nconstantDog = Dog(name: \"Fido\", age: 6)\n/* The last one is an error because you are changing the actual reference, not\njust what the reference points to. */\n\nvariableDog.name = \"Ace\" // Not an error because name is a variable property.\nvariableDog.age = 8 // Error because age is a constant property.\nvariableDog = Dog(name: \"Ace\", age: 8)\n/* The last one is not an error because variableDog is a variable instance and\ntherefore the actual reference can be changed. */"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Dog {\n    var name: String // name is a variable property.\n    let age: Int // age is a constant property.\n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet constantDog = Dog(name: \"Rover\", age: 5)// This instance is a constant.\nvar variableDog = Dog(name: \"Spot\", age 7)// This instance is a variable.\n\nconstantDog.name = \"Fido\" // Not an error because name is a variable property.\nconstantDog.age = 6 // Error because age is a constant property.\nconstantDog = Dog(name: \"Fido\", age: 6)\n/* The last one is an error because you are changing the actual reference, not\njust what the reference points to. */\n\nvariableDog.name = \"Ace\" // Not an error because name is a variable property.\nvariableDog.age = 8 // Error because age is a constant property.\nvariableDog = Dog(name: \"Ace\", age: 8)\n/* The last one is not an error because variableDog is a variable instance and\ntherefore the actual reference can be changed. */",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105142410,
        "id": "51a86fde-55d4-45c0-a967-18e213603996",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105142410,
        "parent_id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test whether two objects are "
            ],
            [
              "identical",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (point to the exact same instance) using "
            ],
            [
              "===",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test whether two objects are "
          },
          {
            "Text": "identical",
            "AttrFlags": 4
          },
          {
            "Text": " (point to the exact same instance) using "
          },
          {
            "Text": "===",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105142411,
        "id": "610e098b-d7c7-4691-bbb4-0dddaa00af52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105142411,
        "parent_id": "61575d1f-7879-472c-83bc-a1c409e6b16a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Dog: Equatable {\n    let name: String\n    init(name: String) { self.name = name }\n}\n\n// Consider two dogs equal if their names are equal.\nfunc ==(lhs: Dog, rhs: Dog) -\u003e Bool {\n    return lhs.name == rhs.name\n}\n\n// Create two Dog instances which have the same name.\nlet spot1 = Dog(name: \"Spot\")\nlet spot2 = Dog(name: \"Spot\")\n\nspot1 == spot2   // true, because the dogs are equal\nspot1 != spot2   // false\n\nspot1 === spot2  // false, because the dogs are different instances\nspot1 !== spot2  // true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Dog: Equatable {\n    let name: String\n    init(name: String) { self.name = name }\n}\n\n// Consider two dogs equal if their names are equal.\nfunc ==(lhs: Dog, rhs: Dog) -\u003e Bool {\n    return lhs.name == rhs.name\n}\n\n// Create two Dog instances which have the same name.\nlet spot1 = Dog(name: \"Spot\")\nlet spot2 = Dog(name: \"Spot\")\n\nspot1 == spot2   // true, because the dogs are equal\nspot1 != spot2   // false\n\nspot1 === spot2  // false, because the dogs are different instances\nspot1 !== spot2  // true",
        "code_language": "Plain Text"
      }
    ],
    "title": "Reference Semantics",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}