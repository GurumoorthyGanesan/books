{
  "ID": "8bede447-ce80-444c-82d1-2632b3456cc9",
  "Root": {
    "alive": true,
    "content": [
      "d3bbcf74-d9b3-40fe-b362-858032ac5e15",
      "eb6a4717-a238-4cb9-ba03-aca7a8d226af"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105926096,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8bede447-ce80-444c-82d1-2632b3456cc9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105926096,
    "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Insertion Sort"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105926090,
        "id": "d3bbcf74-d9b3-40fe-b362-858032ac5e15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105926090,
        "parent_id": "8bede447-ce80-444c-82d1-2632b3456cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Insertion sort is one of the more basic algorithms in computer science. The insertion sort ranks elements by iterating through a collection and positions elements based on their value. The set is divided into sorted and unsorted halves and repeats until all elements are sorted. Insertion sort has complexity of O(n2). You can put it in an extension, like in an example below, or you can create a method for it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Insertion sort is one of the more basic algorithms in computer science. The insertion sort ranks elements by iterating through a collection and positions elements based on their value. The set is divided into sorted and unsorted halves and repeats until all elements are sorted. Insertion sort has complexity of O(n2). You can put it in an extension, like in an example below, or you can create a method for it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105926096,
        "id": "eb6a4717-a238-4cb9-ba03-aca7a8d226af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105926096,
        "parent_id": "8bede447-ce80-444c-82d1-2632b3456cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "extension Array where Element: Comparable {\n\nfunc insertionSort() -\u003e Array\u003cElement\u003e {\n    \n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n    \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n    \n    for primaryindex in 0..\u003coutput.count {\n        \n        let key = output[primaryindex]\n        var secondaryindex = primaryindex\n        \n        while secondaryindex \u003e -1 {\n            if key \u003c output[secondaryindex] {\n                \n                //move to correct position\n                output.remove(at: secondaryindex + 1)\n                output.insert(key, at: secondaryindex)\n            }\n            secondaryindex -= 1\n        }\n    }\n    \n    return output\n}\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "extension Array where Element: Comparable {\n\nfunc insertionSort() -\u003e Array\u003cElement\u003e {\n    \n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n    \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n    \n    for primaryindex in 0..\u003coutput.count {\n        \n        let key = output[primaryindex]\n        var secondaryindex = primaryindex\n        \n        while secondaryindex \u003e -1 {\n            if key \u003c output[secondaryindex] {\n                \n                //move to correct position\n                output.remove(at: secondaryindex + 1)\n                output.insert(key, at: secondaryindex)\n            }\n            secondaryindex -= 1\n        }\n    }\n    \n    return output\n}\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Insertion Sort",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}