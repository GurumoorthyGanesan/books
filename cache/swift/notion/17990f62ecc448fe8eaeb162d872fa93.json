{
  "ID": "17990f62-ecc4-48fe-8eae-b162d872fa93",
  "Root": {
    "alive": true,
    "content": [
      "7bfaa0a6-c7e6-4d17-85db-08a58ab86d7a",
      "c03faf5b-fc9d-40bc-afbd-1b84c76f346a",
      "b0590260-3eed-4f2e-9053-d8b3975d343d",
      "6163d625-2099-470e-974e-267064551390",
      "71f284fc-4031-4f3a-be18-68225cd576b6",
      "c809f8d9-5245-411c-9804-187036236f53"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105497968,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105497968,
    "parent_id": "5367e1b7-d8c9-42c1-a35c-1508743d5105",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Advanced Type Constraints"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105497967,
        "id": "7bfaa0a6-c7e6-4d17-85db-08a58ab86d7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105497967,
        "parent_id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s possible to specify several type constraints for generics using the "
            ],
            [
              "where",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s possible to specify several type constraints for generics using the "
          },
          {
            "Text": "where",
            "AttrFlags": 2
          },
          {
            "Text": " clause:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105497967,
        "id": "c03faf5b-fc9d-40bc-afbd-1b84c76f346a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105497967,
        "parent_id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func doSomething\u003cT where T: Comparable, T: Hashable\u003e(first: T, second: T) {\n    // Access hashable function\n    guard first.hashValue == second.hashValue else {\n        return\n    }\n    // Access comparable function\n    if first == second {\n        print(\"\\(first) and \\(second) are equal.\")\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func doSomething\u003cT where T: Comparable, T: Hashable\u003e(first: T, second: T) {\n    // Access hashable function\n    guard first.hashValue == second.hashValue else {\n        return\n    }\n    // Access comparable function\n    if first == second {\n        print(\"\\(first) and \\(second) are equal.\")\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105497968,
        "id": "b0590260-3eed-4f2e-9053-d8b3975d343d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105497968,
        "parent_id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s also valid to write the "
            ],
            [
              "where",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause after the argument list:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s also valid to write the "
          },
          {
            "Text": "where",
            "AttrFlags": 2
          },
          {
            "Text": " clause after the argument list:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105497968,
        "id": "6163d625-2099-470e-974e-267064551390",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105497968,
        "parent_id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func doSomething\u003cT\u003e(first: T, second: T) where T: Comparable, T: Hashable {\n    // Access hashable function\n    guard first.hashValue == second.hashValue else {\n        return\n    }\n    // Access comparable function\n    if first == second {\n        print(\"\\(first) and \\(second) are equal.\")\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func doSomething\u003cT\u003e(first: T, second: T) where T: Comparable, T: Hashable {\n    // Access hashable function\n    guard first.hashValue == second.hashValue else {\n        return\n    }\n    // Access comparable function\n    if first == second {\n        print(\"\\(first) and \\(second) are equal.\")\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105497968,
        "id": "71f284fc-4031-4f3a-be18-68225cd576b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105497968,
        "parent_id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Extensions can be restricted to types that satisfy conditions. The function is only available to instances which satisfy the type conditions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Extensions can be restricted to types that satisfy conditions. The function is only available to instances which satisfy the type conditions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105497968,
        "id": "c809f8d9-5245-411c-9804-187036236f53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105497968,
        "parent_id": "17990f62-ecc4-48fe-8eae-b162d872fa93",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// \"Element\" is the generics type defined by \"Array\". For this example, we\n// want to add a function that requires that \"Element\" can be compared, that\n// is: it needs to adhere to the Equatable protocol.\npublic extension Array where Element: Equatable {\n    /// Removes the given object from the array.\n    mutating func remove(_ element: Element) {\n        // We could also use \"self.index(of: element)\" here, as \"index(of:_)\"\n        // is also defined in an extension with \"where Element: Equatable\".\n        // For the sake of this example, explicitly make use of the Equatable.\n        if let index = self.index(where: { $0 == element }) {\n            self.remove(at: index)\n        } else {\n            fatalError(\"Removal error, no such element:\\\"\\(element)\\\" in array.\\n\")\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// \"Element\" is the generics type defined by \"Array\". For this example, we\n// want to add a function that requires that \"Element\" can be compared, that\n// is: it needs to adhere to the Equatable protocol.\npublic extension Array where Element: Equatable {\n    /// Removes the given object from the array.\n    mutating func remove(_ element: Element) {\n        // We could also use \"self.index(of: element)\" here, as \"index(of:_)\"\n        // is also defined in an extension with \"where Element: Equatable\".\n        // For the sake of this example, explicitly make use of the Equatable.\n        if let index = self.index(where: { $0 == element }) {\n            self.remove(at: index)\n        } else {\n            fatalError(\"Removal error, no such element:\\\"\\(element)\\\" in array.\\n\")\n        }\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Advanced Type Constraints",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}