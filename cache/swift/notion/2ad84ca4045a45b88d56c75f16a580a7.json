{
  "ID": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
  "Root": {
    "alive": true,
    "content": [
      "73a42e64-5502-43da-9334-3af35d42d1f2",
      "0447eca7-7a44-4c73-b0be-f6349ab15418",
      "be090424-cf11-4e00-b495-e0a6d847abb5",
      "89533a4b-cd97-4929-a57e-79386ed01fef",
      "622c7d76-7f79-4101-a260-fe4e5833c12d",
      "658be526-3a08-424d-9ed9-9ccad7276dbb",
      "37567e6c-8b5b-4e01-9206-1303c79327b0",
      "20252533-eda2-46db-9700-3ec1343c81f6",
      "ba0f2a6a-b631-464f-932f-ed4dbb31b725",
      "a28de2f8-f603-4b1a-9555-891213c31a3f",
      "fb0f5df7-a737-4b98-93b2-3eb400302fe1",
      "2bf5c4f0-e560-41b5-88dc-173fa8bbf9ed",
      "b35ebbba-e85c-43ad-ba07-701f5a38cb5b",
      "f20a0cc2-7c10-4a77-a7d9-abadfbf6f6de",
      "c7af8a13-6e96-43a5-a0ef-a98a76036a99",
      "d8cffdb9-ff72-43e2-96e9-3c7183102d72",
      "5b8888dd-85fb-4e12-bc61-e0125424fcdc",
      "725b2c98-0ebb-45fe-bdc9-9c4697b5feff",
      "18e955c9-5009-4e48-bbc4-f4fff6a567f5",
      "48a8f861-ec93-4afe-a291-214f8abbe918",
      "b15214f1-77e3-4f0f-a6da-f5d7f827b23e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105856381,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105856381,
    "parent_id": "35e9a1fb-1c65-4c4d-b44b-becc6cd9f6bd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "AES encryption in CBC mode with a random IV Swift 3.0"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856372,
        "id": "73a42e64-5502-43da-9334-3af35d42d1f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856372,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The iv is prefixed to the encrypted data"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The iv is prefixed to the encrypted data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856375,
        "id": "0447eca7-7a44-4c73-b0be-f6349ab15418",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856375,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "aesCBC128Encrypt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will create a random IV and prefixed to the encrypted code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "aesCBC128Encrypt",
            "AttrFlags": 2
          },
          {
            "Text": " will create a random IV and prefixed to the encrypted code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856375,
        "id": "be090424-cf11-4e00-b495-e0a6d847abb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856375,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "aesCBC128Decrypt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will use the prefixed IV during decryption."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "aesCBC128Decrypt",
            "AttrFlags": 2
          },
          {
            "Text": " will use the prefixed IV during decryption."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856375,
        "id": "89533a4b-cd97-4929-a57e-79386ed01fef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856375,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inputs are the data and key are Data objects. If an encoded form such as Base64 if required convert to and/or from in the calling method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inputs are the data and key are Data objects. If an encoded form such as Base64 if required convert to and/or from in the calling method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856375,
        "id": "622c7d76-7f79-4101-a260-fe4e5833c12d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856375,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The key should be exactly 128-bits (16-bytes), 192-bits (24-bytes) or 256-bits (32-bytes) in length. If another key size is used an error will be thrown."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The key should be exactly 128-bits (16-bytes), 192-bits (24-bytes) or 256-bits (32-bytes) in length. If another key size is used an error will be thrown."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856377,
        "id": "658be526-3a08-424d-9ed9-9ccad7276dbb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856377,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PKCS#7 padding",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"
                ]
              ]
            ],
            [
              " is set by default."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "PKCS#7 padding",
            "Link": "https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"
          },
          {
            "Text": " is set by default."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856377,
        "id": "37567e6c-8b5b-4e01-9206-1303c79327b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856377,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example requires Common Crypto"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example requires Common Crypto"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "20252533-eda2-46db-9700-3ec1343c81f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is necessary to have a bridging header to the project:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is necessary to have a bridging header to the project:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "ba0f2a6a-b631-464f-932f-ed4dbb31b725",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "`#import \u003cCommonCrypto/CommonCrypto.h\u003e`  \nAdd the `Security.framework` to the project."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "`#import \u003cCommonCrypto/CommonCrypto.h\u003e`  \nAdd the `Security.framework` to the project.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "a28de2f8-f603-4b1a-9555-891213c31a3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is example, not production code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is example, not production code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "fb0f5df7-a737-4b98-93b2-3eb400302fe1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "enum AESError: Error {\n    case KeyError((String, Int))\n    case IVError((String, Int))\n    case CryptorError((String, Int))\n}\n\n// The iv is prefixed to the encrypted data\nfunc aesCBCEncrypt(data:Data, keyData:Data) throws -\u003e Data {\n    let keyLength = keyData.count\n    let validKeyLengths = [kCCKeySizeAES128, kCCKeySizeAES192, kCCKeySizeAES256]\n    if (validKeyLengths.contains(keyLength) == false) {\n        throw AESError.KeyError((\"Invalid key length\", keyLength))\n    }\n\n    let ivSize = kCCBlockSizeAES128;\n    let cryptLength = size_t(ivSize + data.count + kCCBlockSizeAES128)\n    var cryptData = Data(count:cryptLength)\n\n    let status = cryptData.withUnsafeMutableBytes {ivBytes in\n        SecRandomCopyBytes(kSecRandomDefault, kCCBlockSizeAES128, ivBytes)\n    }\n    if (status != 0) {\n        throw AESError.IVError((\"IV generation failed\", Int(status)))\n    }\n\n    var numBytesEncrypted :size_t = 0\n    let options   = CCOptions(kCCOptionPKCS7Padding)\n\n    let cryptStatus = cryptData.withUnsafeMutableBytes {cryptBytes in\n        data.withUnsafeBytes {dataBytes in\n            keyData.withUnsafeBytes {keyBytes in\n                CCCrypt(CCOperation(kCCEncrypt),\n                        CCAlgorithm(kCCAlgorithmAES),\n                        options,\n                        keyBytes, keyLength,\n                        cryptBytes,\n                        dataBytes, data.count,\n                        cryptBytes+kCCBlockSizeAES128, cryptLength,\n                        \u0026numBytesEncrypted)\n            }\n        }\n    }\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        cryptData.count = numBytesEncrypted + ivSize\n    }\n    else {\n        throw AESError.CryptorError((\"Encryption failed\", Int(cryptStatus)))\n    }\n\n    return cryptData;\n}\n\n// The iv is prefixed to the encrypted data\nfunc aesCBCDecrypt(data:Data, keyData:Data) throws -\u003e Data? {\n    let keyLength = keyData.count\n    let validKeyLengths = [kCCKeySizeAES128, kCCKeySizeAES192, kCCKeySizeAES256]\n    if (validKeyLengths.contains(keyLength) == false) {\n        throw AESError.KeyError((\"Invalid key length\", keyLength))\n    }\n\n    let ivSize = kCCBlockSizeAES128;\n    let clearLength = size_t(data.count - ivSize)\n    var clearData = Data(count:clearLength)\n\n    var numBytesDecrypted :size_t = 0\n    let options   = CCOptions(kCCOptionPKCS7Padding)\n\n    let cryptStatus = clearData.withUnsafeMutableBytes {cryptBytes in\n        data.withUnsafeBytes {dataBytes in\n            keyData.withUnsafeBytes {keyBytes in\n                CCCrypt(CCOperation(kCCDecrypt),\n                        CCAlgorithm(kCCAlgorithmAES128),\n                        options,\n                        keyBytes, keyLength,\n                        dataBytes,\n                        dataBytes+kCCBlockSizeAES128, clearLength,\n                        cryptBytes, clearLength,\n                        \u0026numBytesDecrypted)\n            }\n        }\n    }\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        clearData.count = numBytesDecrypted\n    }\n    else {\n        throw AESError.CryptorError((\"Decryption failed\", Int(cryptStatus)))\n    }\n    \n    return clearData;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "enum AESError: Error {\n    case KeyError((String, Int))\n    case IVError((String, Int))\n    case CryptorError((String, Int))\n}\n\n// The iv is prefixed to the encrypted data\nfunc aesCBCEncrypt(data:Data, keyData:Data) throws -\u003e Data {\n    let keyLength = keyData.count\n    let validKeyLengths = [kCCKeySizeAES128, kCCKeySizeAES192, kCCKeySizeAES256]\n    if (validKeyLengths.contains(keyLength) == false) {\n        throw AESError.KeyError((\"Invalid key length\", keyLength))\n    }\n\n    let ivSize = kCCBlockSizeAES128;\n    let cryptLength = size_t(ivSize + data.count + kCCBlockSizeAES128)\n    var cryptData = Data(count:cryptLength)\n\n    let status = cryptData.withUnsafeMutableBytes {ivBytes in\n        SecRandomCopyBytes(kSecRandomDefault, kCCBlockSizeAES128, ivBytes)\n    }\n    if (status != 0) {\n        throw AESError.IVError((\"IV generation failed\", Int(status)))\n    }\n\n    var numBytesEncrypted :size_t = 0\n    let options   = CCOptions(kCCOptionPKCS7Padding)\n\n    let cryptStatus = cryptData.withUnsafeMutableBytes {cryptBytes in\n        data.withUnsafeBytes {dataBytes in\n            keyData.withUnsafeBytes {keyBytes in\n                CCCrypt(CCOperation(kCCEncrypt),\n                        CCAlgorithm(kCCAlgorithmAES),\n                        options,\n                        keyBytes, keyLength,\n                        cryptBytes,\n                        dataBytes, data.count,\n                        cryptBytes+kCCBlockSizeAES128, cryptLength,\n                        \u0026numBytesEncrypted)\n            }\n        }\n    }\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        cryptData.count = numBytesEncrypted + ivSize\n    }\n    else {\n        throw AESError.CryptorError((\"Encryption failed\", Int(cryptStatus)))\n    }\n\n    return cryptData;\n}\n\n// The iv is prefixed to the encrypted data\nfunc aesCBCDecrypt(data:Data, keyData:Data) throws -\u003e Data? {\n    let keyLength = keyData.count\n    let validKeyLengths = [kCCKeySizeAES128, kCCKeySizeAES192, kCCKeySizeAES256]\n    if (validKeyLengths.contains(keyLength) == false) {\n        throw AESError.KeyError((\"Invalid key length\", keyLength))\n    }\n\n    let ivSize = kCCBlockSizeAES128;\n    let clearLength = size_t(data.count - ivSize)\n    var clearData = Data(count:clearLength)\n\n    var numBytesDecrypted :size_t = 0\n    let options   = CCOptions(kCCOptionPKCS7Padding)\n\n    let cryptStatus = clearData.withUnsafeMutableBytes {cryptBytes in\n        data.withUnsafeBytes {dataBytes in\n            keyData.withUnsafeBytes {keyBytes in\n                CCCrypt(CCOperation(kCCDecrypt),\n                        CCAlgorithm(kCCAlgorithmAES128),\n                        options,\n                        keyBytes, keyLength,\n                        dataBytes,\n                        dataBytes+kCCBlockSizeAES128, clearLength,\n                        cryptBytes, clearLength,\n                        \u0026numBytesDecrypted)\n            }\n        }\n    }\n\n    if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n        clearData.count = numBytesDecrypted\n    }\n    else {\n        throw AESError.CryptorError((\"Decryption failed\", Int(cryptStatus)))\n    }\n    \n    return clearData;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "2bf5c4f0-e560-41b5-88dc-173fa8bbf9ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example usage:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example usage:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "b35ebbba-e85c-43ad-ba07-701f5a38cb5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let clearData = \"clearData0123456\".data(using:String.Encoding.utf8)!\nlet keyData   = \"keyData890123456\".data(using:String.Encoding.utf8)!\nprint(\"clearData:   \\(clearData as NSData)\")\nprint(\"keyData:     \\(keyData as NSData)\")\n\nvar cryptData :Data?\ndo {\n    cryptData = try aesCBCEncrypt(data:clearData, keyData:keyData)\n    print(\"cryptData:   \\(cryptData! as NSData)\")\n}\ncatch (let status) {\n    print(\"Error aesCBCEncrypt: \\(status)\")\n}\n\nlet decryptData :Data?\ndo {\n    let decryptData = try aesCBCDecrypt(data:cryptData!, keyData:keyData)\n    print(\"decryptData: \\(decryptData! as NSData)\")\n}\ncatch (let status) {\n    print(\"Error aesCBCDecrypt: \\(status)\")\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let clearData = \"clearData0123456\".data(using:String.Encoding.utf8)!\nlet keyData   = \"keyData890123456\".data(using:String.Encoding.utf8)!\nprint(\"clearData:   \\(clearData as NSData)\")\nprint(\"keyData:     \\(keyData as NSData)\")\n\nvar cryptData :Data?\ndo {\n    cryptData = try aesCBCEncrypt(data:clearData, keyData:keyData)\n    print(\"cryptData:   \\(cryptData! as NSData)\")\n}\ncatch (let status) {\n    print(\"Error aesCBCEncrypt: \\(status)\")\n}\n\nlet decryptData :Data?\ndo {\n    let decryptData = try aesCBCDecrypt(data:cryptData!, keyData:keyData)\n    print(\"decryptData: \\(decryptData! as NSData)\")\n}\ncatch (let status) {\n    print(\"Error aesCBCDecrypt: \\(status)\")\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856378,
        "id": "f20a0cc2-7c10-4a77-a7d9-abadfbf6f6de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856378,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856379,
        "id": "c7af8a13-6e96-43a5-a0ef-a98a76036a99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856379,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "clearData:   \u003c636c6561 72446174 61303132 33343536\u003e\nkeyData:     \u003c6b657944 61746138 39303132 33343536\u003e\ncryptData:   \u003c92c57393 f454d959 5a4d158f 6e1cd3e7 77986ee9 b2970f49 2bafcf1a 8ee9d51a bde49c31 d7780256 71837a61 60fa4be0\u003e\ndecryptData: \u003c636c6561 72446174 61303132 33343536\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "clearData:   \u003c636c6561 72446174 61303132 33343536\u003e\nkeyData:     \u003c6b657944 61746138 39303132 33343536\u003e\ncryptData:   \u003c92c57393 f454d959 5a4d158f 6e1cd3e7 77986ee9 b2970f49 2bafcf1a 8ee9d51a bde49c31 d7780256 71837a61 60fa4be0\u003e\ndecryptData: \u003c636c6561 72446174 61303132 33343536\u003e",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856379,
        "id": "d8cffdb9-ff72-43e2-96e9-3c7183102d72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856379,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856379,
        "id": "5b8888dd-85fb-4e12-bc61-e0125424fcdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856379,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One typical problem with CBC mode example code is that it leaves the creation and sharing of the random IV to the user. This example includes generation of the IV, prefixed the encrypted data and uses the prefixed IV during decryption. This frees the casual user from the details that are necessary for "
            ],
            [
              "CBC mode",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One typical problem with CBC mode example code is that it leaves the creation and sharing of the random IV to the user. This example includes generation of the IV, prefixed the encrypted data and uses the prefixed IV during decryption. This frees the casual user from the details that are necessary for "
          },
          {
            "Text": "CBC mode",
            "Link": "https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856379,
        "id": "725b2c98-0ebb-45fe-bdc9-9c4697b5feff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856379,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For security the encrypted data also should have authentication, this example code does not provide that in order to be small and allow better interoperability for other platforms."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For security the encrypted data also should have authentication, this example code does not provide that in order to be small and allow better interoperability for other platforms."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856380,
        "id": "18e955c9-5009-4e48-bbc4-f4fff6a567f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856380,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Also missing is key derivation of the key from a password, it is suggested that "
            ],
            [
              "PBKDF2",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/PBKDF2"
                ]
              ]
            ],
            [
              " be used is text passwords are used as keying material."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Also missing is key derivation of the key from a password, it is suggested that "
          },
          {
            "Text": "PBKDF2",
            "Link": "https://en.wikipedia.org/wiki/PBKDF2"
          },
          {
            "Text": " be used is text passwords are used as keying material."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856380,
        "id": "48a8f861-ec93-4afe-a291-214f8abbe918",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856380,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For robust production ready multi-platform encryption code see "
            ],
            [
              "RNCryptor",
              [
                [
                  "a",
                  "https://github.com/RNCryptor"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For robust production ready multi-platform encryption code see "
          },
          {
            "Text": "RNCryptor",
            "Link": "https://github.com/RNCryptor"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105856381,
        "id": "b15214f1-77e3-4f0f-a6da-f5d7f827b23e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105856381,
        "parent_id": "2ad84ca4-045a-45b8-8d56-c75f16a580a7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Updated to use throw/catch and multiple key sizes based on the provided key."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Updated to use throw/catch and multiple key sizes based on the provided key."
          }
        ]
      }
    ],
    "title": "AES encryption in CBC mode with a random IV Swift 3.0",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}