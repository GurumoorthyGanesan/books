{
  "ID": "53cdd726-1e8b-40b7-8448-6603b743fbd9",
  "Root": {
    "alive": true,
    "content": [
      "e5ecfe80-d499-4b6e-bf19-30ec8ae12938",
      "e6ff3e25-4508-440d-8fb3-78982aa06c09"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105927180,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "53cdd726-1e8b-40b7-8448-6603b743fbd9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105927180,
    "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Selection sort"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105927177,
        "id": "e5ecfe80-d499-4b6e-bf19-30ec8ae12938",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105927177,
        "parent_id": "53cdd726-1e8b-40b7-8448-6603b743fbd9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Selection sort is noted for its simplicity. It starts with the first element in the array, saving it’s value as a minimum value (or maximum, depending on sorting order). It then itterates through the array, and replaces the min value with any other value lesser then min it finds on the way. That min value is then placed at the leftmost part of the array and the process is repeated, from the next index, until the end of the array. Selection sort has complexity of O(n2) but it is considered slower than it’s counterpart - Selection sort."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Selection sort is noted for its simplicity. It starts with the first element in the array, saving it’s value as a minimum value (or maximum, depending on sorting order). It then itterates through the array, and replaces the min value with any other value lesser then min it finds on the way. That min value is then placed at the leftmost part of the array and the process is repeated, from the next index, until the end of the array. Selection sort has complexity of O(n2) but it is considered slower than it’s counterpart - Selection sort."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105927180,
        "id": "e6ff3e25-4508-440d-8fb3-78982aa06c09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105927180,
        "parent_id": "53cdd726-1e8b-40b7-8448-6603b743fbd9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func selectionSort() -\u003e Array\u003cElement\u003e {\n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n     \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n     \n    for primaryindex in 0..\u003coutput.count {\n        var minimum = primaryindex\n        var secondaryindex = primaryindex + 1\n         \n        while secondaryindex \u003c output.count {\n            //store lowest value as minimum\n            if output[minimum] \u003e output[secondaryindex] {\n                minimum = secondaryindex\n            }\n            secondaryindex += 1\n        }\n         \n        //swap minimum value with array iteration\n        if primaryindex != minimum {\n            swap(\u0026output[primaryindex], \u0026output[minimum])\n        }\n    }\n     \n    return output\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func selectionSort() -\u003e Array\u003cElement\u003e {\n    //check for trivial case\n    guard self.count \u003e 1 else {\n        return self\n    }\n     \n    //mutated copy\n    var output: Array\u003cElement\u003e = self\n     \n    for primaryindex in 0..\u003coutput.count {\n        var minimum = primaryindex\n        var secondaryindex = primaryindex + 1\n         \n        while secondaryindex \u003c output.count {\n            //store lowest value as minimum\n            if output[minimum] \u003e output[secondaryindex] {\n                minimum = secondaryindex\n            }\n            secondaryindex += 1\n        }\n         \n        //swap minimum value with array iteration\n        if primaryindex != minimum {\n            swap(\u0026output[primaryindex], \u0026output[minimum])\n        }\n    }\n     \n    return output\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Selection sort",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}