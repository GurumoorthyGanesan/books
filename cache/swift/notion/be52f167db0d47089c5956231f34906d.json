{
  "ID": "be52f167-db0d-4708-9c59-56231f34906d",
  "Root": {
    "alive": true,
    "content": [
      "423239a7-5500-4021-9529-dce666048d93",
      "c1ab8681-c5e9-4bdc-8cb1-7dbad51e094d",
      "11f202fa-8c78-4d9d-b7c9-4607fd3c8ec5",
      "1de2c19d-d2d8-4ab4-87a6-be0992342814",
      "44572336-0ec3-4182-876f-69153e8b6d1b",
      "cf2da6fb-5fe9-4b2d-b185-b67b736f1a62"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105928841,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "be52f167-db0d-4708-9c59-56231f34906d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105928841,
    "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Quick Sort - On log n complexity time"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928840,
        "id": "423239a7-5500-4021-9529-dce666048d93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928840,
        "parent_id": "be52f167-db0d-4708-9c59-56231f34906d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Quicksort is one of the advanced algorithms. It features a time complexity of O(n log n) and applies a divide \u0026 conquer strategy. This combination results in advanced algorithmic performance. Quicksort first divides a large array into two smaller sub-arrays: the low elements and the high elements. Quicksort can then recursively sort the sub-arrays."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Quicksort is one of the advanced algorithms. It features a time complexity of O(n log n) and applies a divide \u0026 conquer strategy. This combination results in advanced algorithmic performance. Quicksort first divides a large array into two smaller sub-arrays: the low elements and the high elements. Quicksort can then recursively sort the sub-arrays."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928840,
        "id": "c1ab8681-c5e9-4bdc-8cb1-7dbad51e094d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928840,
        "parent_id": "be52f167-db0d-4708-9c59-56231f34906d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The steps are:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The steps are:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928841,
        "id": "11f202fa-8c78-4d9d-b7c9-4607fd3c8ec5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928841,
        "parent_id": "be52f167-db0d-4708-9c59-56231f34906d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Pick an element, called a pivot, from the array."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Pick an element, called a pivot, from the array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928841,
        "id": "1de2c19d-d2d8-4ab4-87a6-be0992342814",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928841,
        "parent_id": "be52f167-db0d-4708-9c59-56231f34906d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928841,
        "id": "44572336-0ec3-4182-876f-69153e8b6d1b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928841,
        "parent_id": "be52f167-db0d-4708-9c59-56231f34906d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105928841,
        "id": "cf2da6fb-5fe9-4b2d-b185-b67b736f1a62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105928841,
        "parent_id": "be52f167-db0d-4708-9c59-56231f34906d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "mutating func quickSort() -\u003e Array\u003cElement\u003e {\n\nfunc qSort(start startIndex: Int, _ pivot: Int) {\n    \n    if (startIndex \u003c pivot) {\n        let iPivot = qPartition(start: startIndex, pivot)\n        qSort(start: startIndex, iPivot - 1)\n        qSort(start: iPivot + 1, pivot)\n    }\n}\nqSort(start: 0, self.endIndex - 1)\nreturn self\n\n}\n\nmutating func qPartition(start startIndex: Int, _ pivot: Int) -\u003e Int {\n\nvar wallIndex: Int = startIndex\n\n//compare range with pivot\nfor currentIndex in wallIndex..\u003cpivot {\n    \n    if self[currentIndex] \u003c= self[pivot] {\n        if wallIndex != currentIndex {\n            swap(\u0026self[currentIndex], \u0026self[wallIndex])\n        }\n        \n        //advance wall\n        wallIndex += 1\n    }\n}\n\n\n//move pivot to final position\nif wallIndex != pivot {\n    swap(\u0026self[wallIndex], \u0026self[pivot])\n}\nreturn wallIndex\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "mutating func quickSort() -\u003e Array\u003cElement\u003e {\n\nfunc qSort(start startIndex: Int, _ pivot: Int) {\n    \n    if (startIndex \u003c pivot) {\n        let iPivot = qPartition(start: startIndex, pivot)\n        qSort(start: startIndex, iPivot - 1)\n        qSort(start: iPivot + 1, pivot)\n    }\n}\nqSort(start: 0, self.endIndex - 1)\nreturn self\n\n}\n\nmutating func qPartition(start startIndex: Int, _ pivot: Int) -\u003e Int {\n\nvar wallIndex: Int = startIndex\n\n//compare range with pivot\nfor currentIndex in wallIndex..\u003cpivot {\n    \n    if self[currentIndex] \u003c= self[pivot] {\n        if wallIndex != currentIndex {\n            swap(\u0026self[currentIndex], \u0026self[wallIndex])\n        }\n        \n        //advance wall\n        wallIndex += 1\n    }\n}\n\n\n//move pivot to final position\nif wallIndex != pivot {\n    swap(\u0026self[wallIndex], \u0026self[pivot])\n}\nreturn wallIndex\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Quick Sort - On log n complexity time",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}