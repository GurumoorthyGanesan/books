{
  "ID": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
  "Root": {
    "alive": true,
    "content": [
      "e2a2677a-7209-4d72-ac10-1cdaca291c45",
      "feb5aadd-1794-4068-b513-433513b522fd",
      "ccf99269-ee4e-4753-b80e-0caf9622d395",
      "bc0ad460-a429-4919-8452-731bcaa56b08",
      "c748bef5-4647-451e-8f62-fc8701fa4b03",
      "9a28f0c7-e37c-474e-ad74-40e280c34fd5",
      "7d154648-9127-45f3-b3d5-066033dd3f67",
      "30f903c9-2f26-4207-a01e-2f6274a92b83",
      "8411c460-fa22-4bc4-aed3-60e638fa4687",
      "ee6d239b-a454-4c86-bc87-4b807f871b31",
      "212963ef-7237-4832-95b4-ae73ab3a6bbf",
      "e78b9bad-7640-45b2-8c6f-db8bed312b2e",
      "f6d048a8-ba99-4d87-9eac-ea3753977c02"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105498012,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105498012,
    "parent_id": "ab0095d7-f330-4c2a-9564-40c927e04cdd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Custom Operators"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498005,
        "id": "e2a2677a-7209-4d72-ac10-1cdaca291c45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498005,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Swift supports the creation of custom operators. New operators are declared at a global level using the "
            ],
            [
              "operator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Swift supports the creation of custom operators. New operators are declared at a global level using the "
          },
          {
            "Text": "operator",
            "AttrFlags": 2
          },
          {
            "Text": " keyword."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498006,
        "id": "feb5aadd-1794-4068-b513-433513b522fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498006,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The operator’s structure is defined by three parts: operand placement, precedence, and associativity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The operator’s structure is defined by three parts: operand placement, precedence, and associativity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498007,
        "id": "ccf99269-ee4e-4753-b80e-0caf9622d395",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498007,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "prefix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "infix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "postfix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " modifiers are used to start an custom operator declaration. The "
            ],
            [
              "prefix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "postfix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " modifiers declare whether the operator must be before or after, respectively, the value on which it acts. Such operators are urnary, like "
            ],
            [
              "8",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "3++",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "**",
              [
                [
                  "a",
                  "https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md"
                ]
              ]
            ],
            [
              ", since they can only act on one target. The "
            ],
            [
              "infix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " declares a binary operator, which acts on the two values it is between, such as "
            ],
            [
              "2+3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "prefix",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "infix",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "postfix",
            "AttrFlags": 2
          },
          {
            "Text": " modifiers are used to start an custom operator declaration. The "
          },
          {
            "Text": "prefix",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "postfix",
            "AttrFlags": 2
          },
          {
            "Text": " modifiers declare whether the operator must be before or after, respectively, the value on which it acts. Such operators are urnary, like "
          },
          {
            "Text": "8",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "3++",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "**",
            "Link": "https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md"
          },
          {
            "Text": ", since they can only act on one target. The "
          },
          {
            "Text": "infix",
            "AttrFlags": 2
          },
          {
            "Text": " declares a binary operator, which acts on the two values it is between, such as "
          },
          {
            "Text": "2+3",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498008,
        "id": "bc0ad460-a429-4919-8452-731bcaa56b08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498008,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators with higher "
            ],
            [
              "precedence",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are calculated first. The default operator precedence is just higher than "
            ],
            [
              "?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "…"
            ],
            [
              ":",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (a value of 100 in Swift 2.x). The precedence of standard Swift operators can be found "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/1048/advanced-operators/23548/precedence-of-standard-swift-operators#t=201609230518289001195"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators with higher "
          },
          {
            "Text": "precedence",
            "AttrFlags": 1
          },
          {
            "Text": " are calculated first. The default operator precedence is just higher than "
          },
          {
            "Text": "?",
            "AttrFlags": 2
          },
          {
            "Text": "…"
          },
          {
            "Text": ":",
            "AttrFlags": 2
          },
          {
            "Text": " (a value of 100 in Swift 2.x). The precedence of standard Swift operators can be found "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/documentation/swift/1048/advanced-operators/23548/precedence-of-standard-swift-operators#t=201609230518289001195"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498009,
        "id": "c748bef5-4647-451e-8f62-fc8701fa4b03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498009,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Associativity",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " defines the order of operations between operators of the same precedence. Left associative operators are calculated from left to right (reading order, like most operators), while right associative operators calculate from right to left."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Associativity",
            "AttrFlags": 1
          },
          {
            "Text": " defines the order of operations between operators of the same precedence. Left associative operators are calculated from left to right (reading order, like most operators), while right associative operators calculate from right to left."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498010,
        "id": "9a28f0c7-e37c-474e-ad74-40e280c34fd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498010,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Starting from Swift 3.0, one would define the precedence and associativity in a "
            ],
            [
              "precedence group",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " instead of the operator itself, so that multiple operators can easily share the same precedence without referring to the cryptic numbers. The list of standard precedence groups is shown "
            ],
            [
              "below",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/1048/advanced-operators/23548/precedence-of-standard-swift-operators#t=201609230518289001195"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Starting from Swift 3.0, one would define the precedence and associativity in a "
          },
          {
            "Text": "precedence group",
            "AttrFlags": 1
          },
          {
            "Text": " instead of the operator itself, so that multiple operators can easily share the same precedence without referring to the cryptic numbers. The list of standard precedence groups is shown "
          },
          {
            "Text": "below",
            "Link": "http://stackoverflow.com/documentation/swift/1048/advanced-operators/23548/precedence-of-standard-swift-operators#t=201609230518289001195"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498010,
        "id": "7d154648-9127-45f3-b3d5-066033dd3f67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498010,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operators return values based on the calculation code. This code acts as a normal function, with parameters specifying the type of input and the "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword specifying the calculated value that the operator returns."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operators return values based on the calculation code. This code acts as a normal function, with parameters specifying the type of input and the "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " keyword specifying the calculated value that the operator returns."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498010,
        "id": "30f903c9-2f26-4207-a01e-2f6274a92b83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498010,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is the definition of a simple exponential operator, since standard Swift does not have an exponential operator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is the definition of a simple exponential operator, since standard Swift does not have an exponential operator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498010,
        "id": "8411c460-fa22-4bc4-aed3-60e638fa4687",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498010,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import Foundation    \n\ninfix operator ** { associativity left precedence 170 }\n\nfunc ** (num: Double, power: Double) -\u003e Double{\n    return pow(num, power)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import Foundation    \n\ninfix operator ** { associativity left precedence 170 }\n\nfunc ** (num: Double, power: Double) -\u003e Double{\n    return pow(num, power)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498011,
        "id": "ee6d239b-a454-4c86-bc87-4b807f871b31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498011,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "infix",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " says that the "
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator works in between two values, such as "
            ],
            [
              "9**2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Because the function has left associativity, "
            ],
            [
              "3**3**2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is calculated as "
            ],
            [
              "(3**3)**2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The precedence of "
            ],
            [
              "170",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is higher than all standard Swift operations, meaning that "
            ],
            [
              "3+2**4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calculates to "
            ],
            [
              "19",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", despite the left associativity of "
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "infix",
            "AttrFlags": 2
          },
          {
            "Text": " says that the "
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": " operator works in between two values, such as "
          },
          {
            "Text": "9**2",
            "AttrFlags": 2
          },
          {
            "Text": ". Because the function has left associativity, "
          },
          {
            "Text": "3**3**2",
            "AttrFlags": 2
          },
          {
            "Text": " is calculated as "
          },
          {
            "Text": "(3**3)**2",
            "AttrFlags": 2
          },
          {
            "Text": ". The precedence of "
          },
          {
            "Text": "170",
            "AttrFlags": 2
          },
          {
            "Text": " is higher than all standard Swift operations, meaning that "
          },
          {
            "Text": "3+2**4",
            "AttrFlags": 2
          },
          {
            "Text": " calculates to "
          },
          {
            "Text": "19",
            "AttrFlags": 2
          },
          {
            "Text": ", despite the left associativity of "
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498011,
        "id": "212963ef-7237-4832-95b4-ae73ab3a6bbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498011,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import Foundation \n\ninfix operator **: BitwiseShiftPrecedence\n\nfunc ** (num: Double, power: Double) -\u003e Double {\n    return pow(num, power)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import Foundation \n\ninfix operator **: BitwiseShiftPrecedence\n\nfunc ** (num: Double, power: Double) -\u003e Double {\n    return pow(num, power)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498011,
        "id": "e78b9bad-7640-45b2-8c6f-db8bed312b2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498011,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of specifying the precedence and associativity explicitly, on Swift 3.0 we could use the built-in precedence group BitwiseShiftPrecedence that gives the correct values (same as "
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of specifying the precedence and associativity explicitly, on Swift 3.0 we could use the built-in precedence group BitwiseShiftPrecedence that gives the correct values (same as "
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105498011,
        "id": "f6d048a8-ba99-4d87-9eac-ea3753977c02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105498011,
        "parent_id": "716a212c-fb71-42b1-919e-6cce3c58ae8e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "**: The increment and decrement are deprecated and will be removed in Swift 3."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "**: The increment and decrement are deprecated and will be removed in Swift 3."
          }
        ]
      }
    ],
    "title": "Custom Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}