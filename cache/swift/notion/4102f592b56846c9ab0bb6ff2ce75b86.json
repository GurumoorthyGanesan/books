{
  "ID": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
  "Root": {
    "alive": true,
    "content": [
      "da62842b-47de-49ba-a6c2-6ad62bda3afc",
      "52f3a4ce-7cfa-43ab-9d58-e4aec2513b65",
      "5ebe1e08-ca47-4a6a-857d-264107f023c0",
      "65d9f862-0de8-4664-bfe9-974026533451",
      "aeb500b2-820e-4bd6-a585-f53656b98bd4",
      "bff77818-8155-42c3-936a-793a991cc06d",
      "2e4aa2cb-a5c4-490b-90a9-238bf1649de5",
      "bd6fe1ff-93e7-416b-8cc8-2b923e0db7a2",
      "5164aaea-ccef-407e-9ff9-923a5f21020c",
      "e6459281-76b8-420d-8717-6128ae892719",
      "e999ab72-db38-4b8d-bd6f-e6d60f8beac2",
      "5d338b80-8611-461a-b139-f224404e92b4",
      "556314f2-e332-4577-ab07-a7980abd7661",
      "c7b65687-1ea6-489a-8279-576053b2a752",
      "a8c98695-fa70-43e2-a4e9-bffe0c0ceb27",
      "9d69860d-9525-4362-bb30-54744c6927dc",
      "3e21b92b-d936-4255-9a03-c9298a4e8f9e",
      "235a83cc-ed03-4024-b773-8b7c02df958f",
      "ea69c9cc-7337-45a0-b6b7-99d61a48ca91",
      "4966cbb8-0a16-4a4c-98bf-80c12b1c7805",
      "95ba9a1e-83c9-457f-8a9c-f1b7b35dc26c",
      "685061e7-c608-4644-9e52-d75d38e42a25",
      "aaef0689-eebf-4e64-b842-eacb818bbe88",
      "af9c04a2-657c-44d4-a957-a52587704bb9",
      "45617312-0b24-437a-a8a9-44699872f610",
      "6203dd1d-0473-4ef7-a9df-e4dfebdb8ada",
      "671f005b-f2b4-4bb0-ae85-eb22b6b794d3",
      "41b7ad58-1eeb-40fc-84a2-a533eb70aa7d",
      "84e6c830-8e9a-4187-a7b0-f7f20d38bfe0",
      "f5528147-7485-4ded-85bc-6d6e7cc4b49a",
      "ef84eac5-0c6c-426f-bb8a-6b08bafac9ff",
      "105fce5c-9f55-461a-9be7-87d474f2256b",
      "63e25df9-979f-40c4-843e-e4c7369ab27e",
      "df6c4819-1137-454a-a89f-4f9d71b40920",
      "86c1fb6a-0892-4f51-ad86-5b6cb329d97c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552104960627,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552104960627,
    "parent_id": "743fc1c3-bc9c-4386-8bb8-37bb9430112f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "JSON Serialization Encoding and Decoding with Apple Foundation and the Swift Standard Library"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960619,
        "id": "da62842b-47de-49ba-a6c2-6ad62bda3afc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960619,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "JSONSerialization",
              [
                [
                  "a",
                  "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/"
                ]
              ]
            ],
            [
              " class is built into Apple’s Foundation framework."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "JSONSerialization",
            "Link": "https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/"
          },
          {
            "Text": " class is built into Apple’s Foundation framework."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960620,
        "id": "52f3a4ce-7cfa-43ab-9d58-e4aec2513b65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960620,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Read JSON"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Read JSON"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960620,
        "id": "5ebe1e08-ca47-4a6a-857d-264107f023c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960620,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "JSONObjectWithData",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function takes "
            ],
            [
              "NSData",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and returns "
            ],
            [
              "AnyObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". You can use "
            ],
            [
              "as?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to convert the result to your expected type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "JSONObjectWithData",
            "AttrFlags": 2
          },
          {
            "Text": " function takes "
          },
          {
            "Text": "NSData",
            "AttrFlags": 2
          },
          {
            "Text": ", and returns "
          },
          {
            "Text": "AnyObject",
            "AttrFlags": 2
          },
          {
            "Text": ". You can use "
          },
          {
            "Text": "as?",
            "AttrFlags": 2
          },
          {
            "Text": " to convert the result to your expected type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960620,
        "id": "65d9f862-0de8-4664-bfe9-974026533451",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960620,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "do {\n    guard let jsonData = \"[\\\"Hello\\\", \\\"JSON\\\"]\".dataUsingEncoding(NSUTF8StringEncoding) else {\n        fatalError(\"couldn't encode string as UTF-8\")\n    }\n\n    // Convert JSON from NSData to AnyObject\n    let jsonObject = try NSJSONSerialization.JSONObjectWithData(jsonData, options: [])\n    \n    // Try to convert AnyObject to array of strings\n    if let stringArray = jsonObject as? [String] {\n        print(\"Got array of strings: \\(stringArray.joinWithSeparator(\", \"))\")\n    }\n} catch {\n    print(\"error reading JSON: \\(error)\")\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "do {\n    guard let jsonData = \"[\\\"Hello\\\", \\\"JSON\\\"]\".dataUsingEncoding(NSUTF8StringEncoding) else {\n        fatalError(\"couldn't encode string as UTF-8\")\n    }\n\n    // Convert JSON from NSData to AnyObject\n    let jsonObject = try NSJSONSerialization.JSONObjectWithData(jsonData, options: [])\n    \n    // Try to convert AnyObject to array of strings\n    if let stringArray = jsonObject as? [String] {\n        print(\"Got array of strings: \\(stringArray.joinWithSeparator(\", \"))\")\n    }\n} catch {\n    print(\"error reading JSON: \\(error)\")\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960620,
        "id": "aeb500b2-820e-4bd6-a585-f53656b98bd4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960620,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can pass "
            ],
            [
              "options: .AllowFragments",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "options: []",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to allow reading JSON when the top-level object isn’t an array or dictionary."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can pass "
          },
          {
            "Text": "options: .AllowFragments",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "options: []",
            "AttrFlags": 2
          },
          {
            "Text": " to allow reading JSON when the top-level object isn’t an array or dictionary."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960620,
        "id": "bff77818-8155-42c3-936a-793a991cc06d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960620,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Write JSON"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Write JSON"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960621,
        "id": "2e4aa2cb-a5c4-490b-90a9-238bf1649de5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960621,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling "
            ],
            [
              "dataWithJSONObject",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " converts a JSON-compatible object (nested arrays or dictionaries with strings, numbers, and "
            ],
            [
              "NSNull",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") to raw "
            ],
            [
              "NSData",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " encoded as UTF-8."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling "
          },
          {
            "Text": "dataWithJSONObject",
            "AttrFlags": 2
          },
          {
            "Text": " converts a JSON-compatible object (nested arrays or dictionaries with strings, numbers, and "
          },
          {
            "Text": "NSNull",
            "AttrFlags": 2
          },
          {
            "Text": ") to raw "
          },
          {
            "Text": "NSData",
            "AttrFlags": 2
          },
          {
            "Text": " encoded as UTF-8."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960621,
        "id": "bd6fe1ff-93e7-416b-8cc8-2b923e0db7a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960621,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "do {\n    // Convert object to JSON as NSData\n    let jsonData = try NSJSONSerialization.dataWithJSONObject(jsonObject, options: [])\n    print(\"JSON data: \\(jsonData)\")\n    \n    // Convert NSData to String\n    let jsonString = String(data: jsonData, encoding: NSUTF8StringEncoding)!\n    print(\"JSON string: \\(jsonString)\")\n} catch {\n    print(\"error writing JSON: \\(error)\")\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "do {\n    // Convert object to JSON as NSData\n    let jsonData = try NSJSONSerialization.dataWithJSONObject(jsonObject, options: [])\n    print(\"JSON data: \\(jsonData)\")\n    \n    // Convert NSData to String\n    let jsonString = String(data: jsonData, encoding: NSUTF8StringEncoding)!\n    print(\"JSON string: \\(jsonString)\")\n} catch {\n    print(\"error writing JSON: \\(error)\")\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960621,
        "id": "5164aaea-ccef-407e-9ff9-923a5f21020c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960621,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can pass "
            ],
            [
              "options: .PrettyPrinted",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "options: []",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for pretty-printing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can pass "
          },
          {
            "Text": "options: .PrettyPrinted",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "options: []",
            "AttrFlags": 2
          },
          {
            "Text": " for pretty-printing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960621,
        "id": "e6459281-76b8-420d-8717-6128ae892719",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960621,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Same behavior in Swift 3 but with a different syntax."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Same behavior in Swift 3 but with a different syntax."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960621,
        "id": "e999ab72-db38-4b8d-bd6f-e6d60f8beac2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960621,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "do {\n    guard let jsonData = \"[\\\"Hello\\\", \\\"JSON\\\"]\".data(using: String.Encoding.utf8) else {\n        fatalError(\"couldn't encode string as UTF-8\")\n    }\n    \n    // Convert JSON from NSData to AnyObject\n    let jsonObject = try JSONSerialization.jsonObject(with: jsonData, options: [])\n    \n    // Try to convert AnyObject to array of strings\n    if let stringArray = jsonObject as? [String] {\n        print(\"Got array of strings: \\(stringArray.joined(separator: \", \"))\")\n    }\n} catch {\n    print(\"error reading JSON: \\(error)\")\n}\n\ndo {\n    // Convert object to JSON as NSData\n    let jsonData = try JSONSerialization.data(withJSONObject: jsonObject, options: [])\n    print(\"JSON data: \\(jsonData)\")\n\n    // Convert NSData to String\n    let jsonString = String(data: jsonData, encoding: .utf8)!\n    print(\"JSON string: \\(jsonString)\")\n} catch {\n    print(\"error writing JSON: \\(error)\")\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "do {\n    guard let jsonData = \"[\\\"Hello\\\", \\\"JSON\\\"]\".data(using: String.Encoding.utf8) else {\n        fatalError(\"couldn't encode string as UTF-8\")\n    }\n    \n    // Convert JSON from NSData to AnyObject\n    let jsonObject = try JSONSerialization.jsonObject(with: jsonData, options: [])\n    \n    // Try to convert AnyObject to array of strings\n    if let stringArray = jsonObject as? [String] {\n        print(\"Got array of strings: \\(stringArray.joined(separator: \", \"))\")\n    }\n} catch {\n    print(\"error reading JSON: \\(error)\")\n}\n\ndo {\n    // Convert object to JSON as NSData\n    let jsonData = try JSONSerialization.data(withJSONObject: jsonObject, options: [])\n    print(\"JSON data: \\(jsonData)\")\n\n    // Convert NSData to String\n    let jsonString = String(data: jsonData, encoding: .utf8)!\n    print(\"JSON string: \\(jsonString)\")\n} catch {\n    print(\"error writing JSON: \\(error)\")\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960621,
        "id": "5d338b80-8611-461a-b139-f224404e92b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960621,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: The Following is currently available only in Swift 4.0 and later."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: The Following is currently available only in Swift 4.0 and later."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960623,
        "id": "556314f2-e332-4577-ab07-a7980abd7661",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960623,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As of Swift 4.0, the Swift standard library includes the protocols "
            ],
            [
              "Encodable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/documentation/swift/encodable"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Decodable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/documentation/swift/decodable"
                ]
              ]
            ],
            [
              " to define a standardized approach to data encoding and decoding. Adopting these protocols will allow implementations of the "
            ],
            [
              "Encoder",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/documentation/swift/encoder"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Decoder",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/documentation/swift/decoder"
                ]
              ]
            ],
            [
              " protocols take your data and encode or decode it to and from an external representation such as JSON. Conformance to the "
            ],
            [
              "Codable",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.apple.com/documentation/swift/codable"
                ]
              ]
            ],
            [
              " protocol combines both the "
            ],
            [
              "Encodable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Decodable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " protocols. This is now the recommended means to handle JSON in your program."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As of Swift 4.0, the Swift standard library includes the protocols "
          },
          {
            "Text": "Encodable",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/documentation/swift/encodable"
          },
          {
            "Text": " and "
          },
          {
            "Text": "Decodable",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/documentation/swift/decodable"
          },
          {
            "Text": " to define a standardized approach to data encoding and decoding. Adopting these protocols will allow implementations of the "
          },
          {
            "Text": "Encoder",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/documentation/swift/encoder"
          },
          {
            "Text": " and "
          },
          {
            "Text": "Decoder",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/documentation/swift/decoder"
          },
          {
            "Text": " protocols take your data and encode or decode it to and from an external representation such as JSON. Conformance to the "
          },
          {
            "Text": "Codable",
            "AttrFlags": 2,
            "Link": "https://developer.apple.com/documentation/swift/codable"
          },
          {
            "Text": " protocol combines both the "
          },
          {
            "Text": "Encodable",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Decodable",
            "AttrFlags": 2
          },
          {
            "Text": " protocols. This is now the recommended means to handle JSON in your program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960623,
        "id": "c7b65687-1ea6-489a-8279-576053b2a752",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960623,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Encode and Decode Automatically"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Encode and Decode Automatically"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960624,
        "id": "a8c98695-fa70-43e2-a4e9-bffe0c0ceb27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960624,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The easiest way to make a type codable is to declare its properties as types that are already "
            ],
            [
              "Codable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". These types include standard library types such as "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "Double",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; and Foundation types such as "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "Data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "URL",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If a type’s properties are codable, the type itself will automatically conform to "
            ],
            [
              "Codable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by simply declaring the conformance."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The easiest way to make a type codable is to declare its properties as types that are already "
          },
          {
            "Text": "Codable",
            "AttrFlags": 2
          },
          {
            "Text": ". These types include standard library types such as "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Int",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "Double",
            "AttrFlags": 2
          },
          {
            "Text": "; and Foundation types such as "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "Data",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "URL",
            "AttrFlags": 2
          },
          {
            "Text": ". If a type’s properties are codable, the type itself will automatically conform to "
          },
          {
            "Text": "Codable",
            "AttrFlags": 2
          },
          {
            "Text": " by simply declaring the conformance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960624,
        "id": "9d69860d-9525-4362-bb30-54744c6927dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960624,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the following example, in which the "
            ],
            [
              "Book",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " structure conforms to "
            ],
            [
              "Codable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the following example, in which the "
          },
          {
            "Text": "Book",
            "AttrFlags": 2
          },
          {
            "Text": " structure conforms to "
          },
          {
            "Text": "Codable",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960624,
        "id": "3e21b92b-d936-4255-9a03-c9298a4e8f9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960624,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Book: Codable {\n    let title: String\n    let authors: [String]\n    let publicationDate: Date\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Book: Codable {\n    let title: String\n    let authors: [String]\n    let publicationDate: Date\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960624,
        "id": "235a83cc-ed03-4024-b773-8b7c02df958f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960624,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that standard collections such as Array and Dictionary conform to Codable if they contain codable types."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that standard collections such as Array and Dictionary conform to Codable if they contain codable types."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "ea69c9cc-7337-45a0-b6b7-99d61a48ca91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By adopting "
            ],
            [
              "Codable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the "
            ],
            [
              "Book",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " structure can now be encoded to and decoded from JSON using the Apple Foundation classes "
            ],
            [
              "JSONEncoder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "JSONDecoder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", even though "
            ],
            [
              "Book",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " itself contains no code to specifically handle JSON. Custom encoders and decoders can be written, as well, by conforming to the "
            ],
            [
              "Encoder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Decoder",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " protocols, respectively."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By adopting "
          },
          {
            "Text": "Codable",
            "AttrFlags": 2
          },
          {
            "Text": ", the "
          },
          {
            "Text": "Book",
            "AttrFlags": 2
          },
          {
            "Text": " structure can now be encoded to and decoded from JSON using the Apple Foundation classes "
          },
          {
            "Text": "JSONEncoder",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "JSONDecoder",
            "AttrFlags": 2
          },
          {
            "Text": ", even though "
          },
          {
            "Text": "Book",
            "AttrFlags": 2
          },
          {
            "Text": " itself contains no code to specifically handle JSON. Custom encoders and decoders can be written, as well, by conforming to the "
          },
          {
            "Text": "Encoder",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Decoder",
            "AttrFlags": 2
          },
          {
            "Text": " protocols, respectively."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "4966cbb8-0a16-4a4c-98bf-80c12b1c7805",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Encode to JSON data"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Encode to JSON data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "95ba9a1e-83c9-457f-8a9c-f1b7b35dc26c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Create an instance of Book called book\nlet encoder = JSONEncoder()\nlet data = try! encoder.encode(book) // Do not use try! in production code\nprint(data)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Create an instance of Book called book\nlet encoder = JSONEncoder()\nlet data = try! encoder.encode(book) // Do not use try! in production code\nprint(data)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "685061e7-c608-4644-9e52-d75d38e42a25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Set encoder.outputFormatting = .prettyPrinted for easier reading. ## Decode from JSON data"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Set encoder.outputFormatting = .prettyPrinted for easier reading. ## Decode from JSON data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "aaef0689-eebf-4e64-b842-eacb818bbe88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decode from JSON data"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Decode from JSON data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "af9c04a2-657c-44d4-a957-a52587704bb9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Retrieve JSON string from some source\nlet jsonData = jsonString.data(encoding: .utf8)!\nlet decoder = JSONDecoder()\nlet book = try! decoder.decode(Book.self, for: jsonData) // Do not use try! in production code\nprint(book)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Retrieve JSON string from some source\nlet jsonData = jsonString.data(encoding: .utf8)!\nlet decoder = JSONDecoder()\nlet book = try! decoder.decode(Book.self, for: jsonData) // Do not use try! in production code\nprint(book)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "45617312-0b24-437a-a8a9-44699872f610",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example, Book.self informs the decoder of the type to which the JSON should be decoded."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example, Book.self informs the decoder of the type to which the JSON should be decoded."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "6203dd1d-0473-4ef7-a9df-e4dfebdb8ada",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Encoding or Decoding Exclusively"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Encoding or Decoding Exclusively"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960625,
        "id": "671f005b-f2b4-4bb0-ae85-eb22b6b794d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960625,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes you may not need data to be both encodable and decodable, such as when you need only read JSON data from an API, or if your program only submits JSON data to an API."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes you may not need data to be both encodable and decodable, such as when you need only read JSON data from an API, or if your program only submits JSON data to an API."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "41b7ad58-1eeb-40fc-84a2-a533eb70aa7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you intend only to write JSON data, conform your type to "
            ],
            [
              "Encodable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you intend only to write JSON data, conform your type to "
          },
          {
            "Text": "Encodable",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "84e6c830-8e9a-4187-a7b0-f7f20d38bfe0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Book: Encodable {\n    let title: String\n    let authors: [String]\n    let publicationDate: Date\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Book: Encodable {\n    let title: String\n    let authors: [String]\n    let publicationDate: Date\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "f5528147-7485-4ded-85bc-6d6e7cc4b49a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you intend only to read JSON data, conform your type to "
            ],
            [
              "Decodable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you intend only to read JSON data, conform your type to "
          },
          {
            "Text": "Decodable",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "ef84eac5-0c6c-426f-bb8a-6b08bafac9ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Book: Decodable {\n    let title: String\n    let authors: [String]\n    let publicationDate: Date\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Book: Decodable {\n    let title: String\n    let authors: [String]\n    let publicationDate: Date\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "105fce5c-9f55-461a-9be7-87d474f2256b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using Custom Key Names"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using Custom Key Names"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "63e25df9-979f-40c4-843e-e4c7369ab27e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "APIs frequently use naming conventions other than the Swift-standard camel case, such as snake case. This can become an issue when it comes to decoding JSON, since by default the JSON keys must align exactly with your type’s property names. To handle these scenarios you can create custom keys for your type using the "
            ],
            [
              "CodingKey",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " protocol."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "APIs frequently use naming conventions other than the Swift-standard camel case, such as snake case. This can become an issue when it comes to decoding JSON, since by default the JSON keys must align exactly with your type’s property names. To handle these scenarios you can create custom keys for your type using the "
          },
          {
            "Text": "CodingKey",
            "AttrFlags": 2
          },
          {
            "Text": " protocol."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960626,
        "id": "df6c4819-1137-454a-a89f-4f9d71b40920",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960626,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "struct Book: Codable {\n    // ...\n    enum CodingKeys: String, CodingKey { \n        case title\n        case authors\n        case publicationDate = \"publication_date\"\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "struct Book: Codable {\n    // ...\n    enum CodingKeys: String, CodingKey { \n        case title\n        case authors\n        case publicationDate = \"publication_date\"\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552104960627,
        "id": "86c1fb6a-0892-4f51-ad86-5b6cb329d97c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552104960627,
        "parent_id": "4102f592-b568-46c9-ab0b-b6ff2ce75b86",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CodingKeys",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are generated automatically for types which adopt the "
            ],
            [
              "Codable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " protocol, but by creating our own implementation in the example above we’re allow our decoder to match the local camel case "
            ],
            [
              "publicationDate",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the snake case "
            ],
            [
              "publication_date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as it’s delivered by the API."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "CodingKeys",
            "AttrFlags": 2
          },
          {
            "Text": " are generated automatically for types which adopt the "
          },
          {
            "Text": "Codable",
            "AttrFlags": 2
          },
          {
            "Text": " protocol, but by creating our own implementation in the example above we’re allow our decoder to match the local camel case "
          },
          {
            "Text": "publicationDate",
            "AttrFlags": 2
          },
          {
            "Text": " with the snake case "
          },
          {
            "Text": "publication_date",
            "AttrFlags": 2
          },
          {
            "Text": " as it’s delivered by the API."
          }
        ]
      }
    ],
    "title": "JSON Serialization Encoding and Decoding with Apple Foundation and the Swift Standard Library",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}