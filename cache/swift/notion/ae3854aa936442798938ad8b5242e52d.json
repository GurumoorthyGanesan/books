{
  "ID": "ae3854aa-9364-4279-8938-ad8b5242e52d",
  "Root": {
    "alive": true,
    "content": [
      "89289a16-901d-4aed-a1eb-a660eb73d06d",
      "7db1a390-aaba-4276-bf55-8828cee501ce",
      "260181fa-63fb-488c-9a66-525a43319ef5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105050884,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ae3854aa-9364-4279-8938-ad8b5242e52d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105050884,
    "parent_id": "0bbae402-0f8d-4c53-9284-2bfa4e450424",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Catch and Switch Pattern for Explicit Error Handling"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105050881,
        "id": "89289a16-901d-4aed-a1eb-a660eb73d06d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105050881,
        "parent_id": "ae3854aa-9364-4279-8938-ad8b5242e52d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Plane {\n    \n    enum Emergency: ErrorType {\n        case NoFuel\n        case EngineFailure(reason: String)\n        case DamagedWing\n    }\n\n    var fuelInKilograms: Int\n\n    //... init and other methods not shown\n\n    func fly() throws {\n        // ...\n        if fuelInKilograms \u003c= 0 {\n            // uh oh...\n            throw Emergency.NoFuel\n        }\n    }\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Plane {\n    \n    enum Emergency: ErrorType {\n        case NoFuel\n        case EngineFailure(reason: String)\n        case DamagedWing\n    }\n\n    var fuelInKilograms: Int\n\n    //... init and other methods not shown\n\n    func fly() throws {\n        // ...\n        if fuelInKilograms \u003c= 0 {\n            // uh oh...\n            throw Emergency.NoFuel\n        }\n    }\n\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105050884,
        "id": "7db1a390-aaba-4276-bf55-8828cee501ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105050884,
        "parent_id": "ae3854aa-9364-4279-8938-ad8b5242e52d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the client class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the client class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105050884,
        "id": "260181fa-63fb-488c-9a66-525a43319ef5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105050884,
        "parent_id": "ae3854aa-9364-4279-8938-ad8b5242e52d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let airforceOne = Plane()\ndo {\n    try airforceOne.fly()\n} catch let emergency as Plane.Emergency {\n    switch emergency {\n    case .NoFuel:\n        // call nearest airport for emergency landing\n    case .EngineFailure(let reason):\n        print(reason) // let the mechanic know the reason\n    case .DamagedWing:\n        // Assess the damage and determine if the president can make it\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let airforceOne = Plane()\ndo {\n    try airforceOne.fly()\n} catch let emergency as Plane.Emergency {\n    switch emergency {\n    case .NoFuel:\n        // call nearest airport for emergency landing\n    case .EngineFailure(let reason):\n        print(reason) // let the mechanic know the reason\n    case .DamagedWing:\n        // Assess the damage and determine if the president can make it\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Catch and Switch Pattern for Explicit Error Handling",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}