{
  "ID": "5a86278c-93d0-46fe-8ae1-cbe9916f24db",
  "Root": {
    "alive": true,
    "content": [
      "81be1f0b-5ad3-44b3-8a91-c32d85e2fcf4",
      "a9da8df3-cc45-4a3f-adba-0ebf24d26278",
      "05cd038c-1633-4df8-84f9-bb062f63474b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105858003,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5a86278c-93d0-46fe-8ae1-cbe9916f24db",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105858003,
    "parent_id": "35e9a1fb-1c65-4c4d-b44b-becc6cd9f6bd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "AES encryption in ECB mode with PKCS7 padding"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105858001,
        "id": "81be1f0b-5ad3-44b3-8a91-c32d85e2fcf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105858001,
        "parent_id": "5a86278c-93d0-46fe-8ae1-cbe9916f24db",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From Apple documentation for IV,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From Apple documentation for IV,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105858003,
        "id": "a9da8df3-cc45-4a3f-adba-0ebf24d26278",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105858003,
        "parent_id": "5a86278c-93d0-46fe-8ae1-cbe9916f24db",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This parameter is ignored if ECB mode is used or if a stream cipher algorithm is selected."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "This parameter is ignored if ECB mode is used or if a stream cipher algorithm is selected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105858003,
        "id": "05cd038c-1633-4df8-84f9-bb062f63474b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105858003,
        "parent_id": "5a86278c-93d0-46fe-8ae1-cbe9916f24db",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func AESEncryption(key: String) -\u003e String? {\n        \n        let keyData: NSData! = (key as NSString).data(using: String.Encoding.utf8.rawValue) as NSData!\n        \n        let data: NSData! = (self as NSString).data(using: String.Encoding.utf8.rawValue) as NSData!\n        \n        let cryptData    = NSMutableData(length: Int(data.length) + kCCBlockSizeAES128)!\n        \n        let keyLength              = size_t(kCCKeySizeAES128)\n        let operation: CCOperation = UInt32(kCCEncrypt)\n        let algoritm:  CCAlgorithm = UInt32(kCCAlgorithmAES128)\n        let options:   CCOptions   = UInt32(kCCOptionECBMode + kCCOptionPKCS7Padding)\n        \n        var numBytesEncrypted :size_t = 0\n        \n        \n        let cryptStatus = CCCrypt(operation,\n                                  algoritm,\n                                  options,\n                                  keyData.bytes, keyLength,\n                                  nil,\n                                  data.bytes, data.length,\n                                  cryptData.mutableBytes, cryptData.length,\n                                  \u0026numBytesEncrypted)\n        \n        if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n            cryptData.length = Int(numBytesEncrypted)\n            \n            var bytes = [UInt8](repeating: 0, count: cryptData.length)\n            cryptData.getBytes(\u0026bytes, length: cryptData.length)\n            \n            var hexString = \"\"\n            for byte in bytes {\n                hexString += String(format:\"%02x\", UInt8(byte))\n            }\n            \n            return hexString\n        }\n        \n        return nil\n    }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func AESEncryption(key: String) -\u003e String? {\n        \n        let keyData: NSData! = (key as NSString).data(using: String.Encoding.utf8.rawValue) as NSData!\n        \n        let data: NSData! = (self as NSString).data(using: String.Encoding.utf8.rawValue) as NSData!\n        \n        let cryptData    = NSMutableData(length: Int(data.length) + kCCBlockSizeAES128)!\n        \n        let keyLength              = size_t(kCCKeySizeAES128)\n        let operation: CCOperation = UInt32(kCCEncrypt)\n        let algoritm:  CCAlgorithm = UInt32(kCCAlgorithmAES128)\n        let options:   CCOptions   = UInt32(kCCOptionECBMode + kCCOptionPKCS7Padding)\n        \n        var numBytesEncrypted :size_t = 0\n        \n        \n        let cryptStatus = CCCrypt(operation,\n                                  algoritm,\n                                  options,\n                                  keyData.bytes, keyLength,\n                                  nil,\n                                  data.bytes, data.length,\n                                  cryptData.mutableBytes, cryptData.length,\n                                  \u0026numBytesEncrypted)\n        \n        if UInt32(cryptStatus) == UInt32(kCCSuccess) {\n            cryptData.length = Int(numBytesEncrypted)\n            \n            var bytes = [UInt8](repeating: 0, count: cryptData.length)\n            cryptData.getBytes(\u0026bytes, length: cryptData.length)\n            \n            var hexString = \"\"\n            for byte in bytes {\n                hexString += String(format:\"%02x\", UInt8(byte))\n            }\n            \n            return hexString\n        }\n        \n        return nil\n    }",
        "code_language": "Plain Text"
      }
    ],
    "title": "AES encryption in ECB mode with PKCS7 padding",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}