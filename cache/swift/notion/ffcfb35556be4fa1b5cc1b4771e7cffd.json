{
  "ID": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
  "Root": {
    "alive": true,
    "content": [
      "76169ea7-f349-4006-b5d6-870494196563",
      "d28e9efd-2ef7-4462-9e1a-dce9d3d4cf39",
      "6f663b97-f199-45a1-b0fc-d63949a5347a",
      "1f81f944-0c10-4365-a05c-92aeb46313cc",
      "7856b3b6-49b4-4715-8ce9-34b25b373e85",
      "57099b58-1479-45f9-b307-fb0e9a799ebe"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1552105063094,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552105063094,
    "parent_id": "9f9ac142-3746-4907-b806-661ae15321d3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Combining an Arrays elements with reduce combine"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105063092,
        "id": "76169ea7-f349-4006-b5d6-870494196563",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105063092,
        "parent_id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "reduce(_:combine:)",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://swiftdoc.org/v2.2/protocol/SequenceType/#func--reduce_combine_"
                ]
              ]
            ],
            [
              " can be used in order to combine the elements of a sequence into a single value. It takes an initial value for the result, as well as a "
            ],
            [
              "closure",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/swift/262/closures"
                ]
              ]
            ],
            [
              " to apply to each element – which will return the new accumulated value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "reduce(_:combine:)",
            "AttrFlags": 2,
            "Link": "http://swiftdoc.org/v2.2/protocol/SequenceType/#func--reduce_combine_"
          },
          {
            "Text": " can be used in order to combine the elements of a sequence into a single value. It takes an initial value for the result, as well as a "
          },
          {
            "Text": "closure",
            "Link": "http://stackoverflow.com/documentation/swift/262/closures"
          },
          {
            "Text": " to apply to each element – which will return the new accumulated value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105063093,
        "id": "d28e9efd-2ef7-4462-9e1a-dce9d3d4cf39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105063093,
        "parent_id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, we can use it to sum an array of numbers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, we can use it to sum an array of numbers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105063093,
        "id": "6f663b97-f199-45a1-b0fc-d63949a5347a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105063093,
        "parent_id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let numbers = [2, 5, 7, 8, 10, 4]\n\nlet sum = numbers.reduce(0) {accumulator, element in\n    return accumulator + element\n}\n\nprint(sum) // 36"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let numbers = [2, 5, 7, 8, 10, 4]\n\nlet sum = numbers.reduce(0) {accumulator, element in\n    return accumulator + element\n}\n\nprint(sum) // 36",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105063093,
        "id": "1f81f944-0c10-4365-a05c-92aeb46313cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105063093,
        "parent_id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’re passing "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into the initial value, as that’s the logical initial value for a summation. If we passed in a value of "
            ],
            [
              "N",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the resulting "
            ],
            [
              "sum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would be "
            ],
            [
              "N + 36",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The closure passed to "
            ],
            [
              "reduce",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has two arguments. "
            ],
            [
              "accumulator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the current accumulated value, which is assigned the value that the closure returns at each iteration. "
            ],
            [
              "element",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the current element in the iteration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’re passing "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " into the initial value, as that’s the logical initial value for a summation. If we passed in a value of "
          },
          {
            "Text": "N",
            "AttrFlags": 2
          },
          {
            "Text": ", the resulting "
          },
          {
            "Text": "sum",
            "AttrFlags": 2
          },
          {
            "Text": " would be "
          },
          {
            "Text": "N + 36",
            "AttrFlags": 2
          },
          {
            "Text": ". The closure passed to "
          },
          {
            "Text": "reduce",
            "AttrFlags": 2
          },
          {
            "Text": " has two arguments. "
          },
          {
            "Text": "accumulator",
            "AttrFlags": 2
          },
          {
            "Text": " is the current accumulated value, which is assigned the value that the closure returns at each iteration. "
          },
          {
            "Text": "element",
            "AttrFlags": 2
          },
          {
            "Text": " is the current element in the iteration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105063093,
        "id": "7856b3b6-49b4-4715-8ce9-34b25b373e85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105063093,
        "parent_id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As in this example, we’re passing an "
            ],
            [
              "(Int, Int) -\u003e Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " closure to "
            ],
            [
              "reduce",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is simply outputting the addition of the two inputs – we can actually pass in the "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator directly, as operators are functions in Swift:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As in this example, we’re passing an "
          },
          {
            "Text": "(Int, Int) -\u003e Int",
            "AttrFlags": 2
          },
          {
            "Text": " closure to "
          },
          {
            "Text": "reduce",
            "AttrFlags": 2
          },
          {
            "Text": ", which is simply outputting the addition of the two inputs – we can actually pass in the "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " operator directly, as operators are functions in Swift:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552105063094,
        "id": "57099b58-1479-45f9-b307-fb0e9a799ebe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552105063094,
        "parent_id": "ffcfb355-56be-4fa1-b5cc-1b4771e7cffd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "let sum = numbers.reduce(0, combine: +)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "let sum = numbers.reduce(0, combine: +)",
        "code_language": "Plain Text"
      }
    ],
    "title": "Combining an Arrays elements with reduce combine",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}