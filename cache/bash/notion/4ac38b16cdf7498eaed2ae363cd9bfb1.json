{
  "ID": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
  "Root": {
    "alive": true,
    "content": [
      "e4abcc1d-65df-4b18-baab-6c71236f6def",
      "97b62542-f621-4d0c-9f05-d8e3fe7d24a6",
      "11550138-9a63-4756-b240-9ae2adfdef76",
      "02f75ef3-f915-4b60-93ee-a61162dbb5a4",
      "3d79fd3f-e59c-4521-b8f0-7641be2673b4",
      "4a04c1d4-cbd1-415d-941a-7b3575de5c0d",
      "7f03724d-04b5-4b50-ab62-9b08dad22742",
      "85562b70-746d-4203-bf2b-9b05cfbdf40e",
      "298337ba-baf9-44f6-8170-6e64f30476c7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551930043026,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551930043026,
    "parent_id": "bd332e69-feb8-4c99-8358-d5306a65cc40",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Double quotes for variable and command substitution"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043021,
        "id": "e4abcc1d-65df-4b18-baab-6c71236f6def",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043021,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Variable substitutions should only be used inside double quotes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Variable substitutions should only be used inside double quotes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043023,
        "id": "97b62542-f621-4d0c-9f05-d8e3fe7d24a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043023,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "calculation='2 * 3'\necho \"$calculation\"         # prints 2 * 3\necho $calculation           # prints 2, the list of files in the current directory, and 3\necho \"$(($calculation))\"    # prints 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "calculation='2 * 3'\necho \"$calculation\"         # prints 2 * 3\necho $calculation           # prints 2, the list of files in the current directory, and 3\necho \"$(($calculation))\"    # prints 6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043024,
        "id": "11550138-9a63-4756-b240-9ae2adfdef76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043024,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Outside of double quotes, "
            ],
            [
              "$var",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes the value of "
            ],
            [
              "var",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", splits it into whitespace-delimited parts, and interprets each part as a glob (wildcard) pattern. Unless you want this behavior, always put "
            ],
            [
              "$var",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " inside double quotes: "
            ],
            [
              "\"$var\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Outside of double quotes, "
          },
          {
            "Text": "$var",
            "AttrFlags": 2
          },
          {
            "Text": " takes the value of "
          },
          {
            "Text": "var",
            "AttrFlags": 2
          },
          {
            "Text": ", splits it into whitespace-delimited parts, and interprets each part as a glob (wildcard) pattern. Unless you want this behavior, always put "
          },
          {
            "Text": "$var",
            "AttrFlags": 2
          },
          {
            "Text": " inside double quotes: "
          },
          {
            "Text": "\"$var\"",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043025,
        "id": "02f75ef3-f915-4b60-93ee-a61162dbb5a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043025,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The same applies to command substitutions: "
            ],
            [
              "\"$(mycommand)\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the output of "
            ],
            [
              "mycommand",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "$(mycommand)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the result of split+glob on the output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The same applies to command substitutions: "
          },
          {
            "Text": "\"$(mycommand)\"",
            "AttrFlags": 2
          },
          {
            "Text": " is the output of "
          },
          {
            "Text": "mycommand",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "$(mycommand)",
            "AttrFlags": 2
          },
          {
            "Text": " is the result of split+glob on the output."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043025,
        "id": "3d79fd3f-e59c-4521-b8f0-7641be2673b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043025,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "echo \"$var\"             # good\necho \"$(mycommand)\"     # good \nanother=$var            # also works, assignment is implicitly double-quoted\nmake -D THING=$var      # BAD! This is not a bash assignment.\nmake -D THING=\"$var\"    # good\nmake -D \"THING=$var\"    # also good"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "echo \"$var\"             # good\necho \"$(mycommand)\"     # good \nanother=$var            # also works, assignment is implicitly double-quoted\nmake -D THING=$var      # BAD! This is not a bash assignment.\nmake -D THING=\"$var\"    # good\nmake -D \"THING=$var\"    # also good",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043025,
        "id": "4a04c1d4-cbd1-415d-941a-7b3575de5c0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043025,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Command substitutions get their own quoting contexts. Writing arbitrarily nested substitutions is easy because the parser will keep track of nesting depth instead of greedily searching for the first "
            ],
            [
              "\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " character. The StackOverflow syntax highlighter parses this wrong, however. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Command substitutions get their own quoting contexts. Writing arbitrarily nested substitutions is easy because the parser will keep track of nesting depth instead of greedily searching for the first "
          },
          {
            "Text": "\"",
            "AttrFlags": 2
          },
          {
            "Text": " character. The StackOverflow syntax highlighter parses this wrong, however. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043025,
        "id": "7f03724d-04b5-4b50-ab62-9b08dad22742",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043025,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "echo \"formatted text: $(printf \"a + b = %04d\" \"${c}\")\" # “formatted text: a + b = 0000”"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "echo \"formatted text: $(printf \"a + b = %04d\" \"${c}\")\" # “formatted text: a + b = 0000”",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043025,
        "id": "85562b70-746d-4203-bf2b-9b05cfbdf40e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043025,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Variable arguments to a command substitution should be double-quoted inside the expansions as well:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Variable arguments to a command substitution should be double-quoted inside the expansions as well:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930043025,
        "id": "298337ba-baf9-44f6-8170-6e64f30476c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930043025,
        "parent_id": "4ac38b16-cdf7-498e-aed2-ae363cd9bfb1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "echo \"$(mycommand \"$arg1\" \"$arg2\")\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "echo \"$(mycommand \"$arg1\" \"$arg2\")\"",
        "code_language": "Plain Text"
      }
    ],
    "title": "Double quotes for variable and command substitution",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}