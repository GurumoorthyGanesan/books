{
  "ID": "0b71c538-bbcc-46de-88c1-9431582ffacb",
  "Root": {
    "alive": true,
    "content": [
      "5f7be3a7-0d19-457d-8f9b-fc5443511285",
      "ee30f56e-34a7-48bc-bf7f-d0dff4ced205",
      "14be6793-f68b-4d84-a7b7-bae909667bea",
      "6e2d9128-33d7-43f3-b25f-2849e75b7dad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551931127129,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0b71c538-bbcc-46de-88c1-9431582ffacb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551931127129,
    "parent_id": "5538cfed-a620-4ac2-be9c-6ef62c0dbbb4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Eval"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551931127126,
        "id": "5f7be3a7-0d19-457d-8f9b-fc5443511285",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551931127126,
        "parent_id": "0b71c538-bbcc-46de-88c1-9431582ffacb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, consider the following that sets the contents of "
            ],
            [
              "$@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the contents of a given variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, consider the following that sets the contents of "
          },
          {
            "Text": "$@",
            "AttrFlags": 2
          },
          {
            "Text": " to the contents of a given variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551931127128,
        "id": "ee30f56e-34a7-48bc-bf7f-d0dff4ced205",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551931127128,
        "parent_id": "0b71c538-bbcc-46de-88c1-9431582ffacb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a=(1 2 3)\neval set -- \"${a[@]}\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a=(1 2 3)\neval set -- \"${a[@]}\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551931127129,
        "id": "14be6793-f68b-4d84-a7b7-bae909667bea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551931127129,
        "parent_id": "0b71c538-bbcc-46de-88c1-9431582ffacb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code is often accompanied by "
            ],
            [
              "getopt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "getopts",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to set "
            ],
            [
              "$@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the output of the aforementioned option parsers, however, you can also use it to create a simple "
            ],
            [
              "pop",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function that can operate on variables silently and directly without having to store the result to the original variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code is often accompanied by "
          },
          {
            "Text": "getopt",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "getopts",
            "AttrFlags": 2
          },
          {
            "Text": " to set "
          },
          {
            "Text": "$@",
            "AttrFlags": 2
          },
          {
            "Text": " to the output of the aforementioned option parsers, however, you can also use it to create a simple "
          },
          {
            "Text": "pop",
            "AttrFlags": 2
          },
          {
            "Text": " function that can operate on variables silently and directly without having to store the result to the original variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551931127129,
        "id": "6e2d9128-33d7-43f3-b25f-2849e75b7dad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551931127129,
        "parent_id": "0b71c538-bbcc-46de-88c1-9431582ffacb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "isnum()\n{\n    # is argument an integer?\n    local re='^[0-9]+$'\n    if [[ -n $1 ]]; then\n        [[ $1 =~ $re ]] \u0026\u0026 return 0\n        return 1\n    else\n        return 2\n    fi\n}\n\nisvar()\n{\n    if isnum \"$1\"; then\n        return 1\n    fi\n    local arr=\"$(eval eval -- echo -n \"\\$$1\")\"\n    if [[ -n ${arr[@]} ]]; then\n        return 0\n    fi\n    return 1\n}\n\npop()\n{\n    if [[ -z $@ ]]; then\n        return 1\n    fi\n\n    local var=\n    local isvar=0\n    local arr=()\n    \n    if isvar \"$1\"; then # let's check to see if this is a variable or just a bare array\n        var=\"$1\"\n        isvar=1\n        arr=($(eval eval -- echo -n \"\\${$1[@]}\")) # if it is a var, get its contents\n    else\n        arr=($@)\n    fi\n    \n    # we need to reverse the contents of $@ so that we can shift\n    # the last element into nothingness\n    arr=($(awk \u003c\u003c\u003c\"${arr[@]}\" '{ for (i=NF; i\u003e1; --i) printf(\"%s \",$i); print $1; }'\n\n    # set $@ to ${arr[@]} so that we can run shift against it.\n    eval set -- \"${arr[@]}\"\n    \n    shift # remove the last element\n    \n    # put the array back to its original order\n    arr=($(awk \u003c\u003c\u003c\"$@\" '{ for (i=NF; i\u003e1; --i) printf(\"%s \",$i); print $1; }'\n    \n    # echo the contents for the benefit of users and for bare arrays\n    echo \"${arr[@]}\"\n\n    if ((isvar)); then\n        # set the contents of the original var to the new modified array\n        eval -- \"$var=(${arr[@]})\" \n    fi\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "isnum()\n{\n    # is argument an integer?\n    local re='^[0-9]+$'\n    if [[ -n $1 ]]; then\n        [[ $1 =~ $re ]] \u0026\u0026 return 0\n        return 1\n    else\n        return 2\n    fi\n}\n\nisvar()\n{\n    if isnum \"$1\"; then\n        return 1\n    fi\n    local arr=\"$(eval eval -- echo -n \"\\$$1\")\"\n    if [[ -n ${arr[@]} ]]; then\n        return 0\n    fi\n    return 1\n}\n\npop()\n{\n    if [[ -z $@ ]]; then\n        return 1\n    fi\n\n    local var=\n    local isvar=0\n    local arr=()\n    \n    if isvar \"$1\"; then # let's check to see if this is a variable or just a bare array\n        var=\"$1\"\n        isvar=1\n        arr=($(eval eval -- echo -n \"\\${$1[@]}\")) # if it is a var, get its contents\n    else\n        arr=($@)\n    fi\n    \n    # we need to reverse the contents of $@ so that we can shift\n    # the last element into nothingness\n    arr=($(awk \u003c\u003c\u003c\"${arr[@]}\" '{ for (i=NF; i\u003e1; --i) printf(\"%s \",$i); print $1; }'\n\n    # set $@ to ${arr[@]} so that we can run shift against it.\n    eval set -- \"${arr[@]}\"\n    \n    shift # remove the last element\n    \n    # put the array back to its original order\n    arr=($(awk \u003c\u003c\u003c\"$@\" '{ for (i=NF; i\u003e1; --i) printf(\"%s \",$i); print $1; }'\n    \n    # echo the contents for the benefit of users and for bare arrays\n    echo \"${arr[@]}\"\n\n    if ((isvar)); then\n        # set the contents of the original var to the new modified array\n        eval -- \"$var=(${arr[@]})\" \n    fi\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Using Eval",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}