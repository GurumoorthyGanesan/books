{
  "ID": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
  "Root": {
    "alive": true,
    "content": [
      "8bab8b74-5640-475a-a5a6-5accb28ccc1a",
      "7caed384-c138-4e90-833c-9439762cd3aa",
      "fd1d5d7e-0265-4913-82e5-d344af3314ce",
      "29534e90-0ae8-48fd-800f-59d93894a2fe",
      "7268b810-73c5-4197-9e15-f82d9afc0ca3",
      "d1300756-21f6-4c9e-8f1c-72de92f47249",
      "b560ea6f-7940-4316-8fc7-21cd688c5756",
      "e869f95c-392d-467d-b30b-d702379b5375"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551930010758,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551930010758,
    "parent_id": "c5946963-e44b-4e10-a397-131e51cb1f12",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Substrings and subarrays"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010754,
        "id": "8bab8b74-5640-475a-a5a6-5accb28ccc1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010754,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var='0123456789abcdef'\n\n# Define a zero-based offset\n$ printf '%s\\n' \"${var:3}\"\n3456789abcdef\n\n# Offset and length of substring\n$ printf '%s\\n' \"${var:3:4}\"\n3456"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var='0123456789abcdef'\n\n# Define a zero-based offset\n$ printf '%s\\n' \"${var:3}\"\n3456789abcdef\n\n# Offset and length of substring\n$ printf '%s\\n' \"${var:3:4}\"\n3456",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010756,
        "id": "7caed384-c138-4e90-833c-9439762cd3aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010756,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# Negative length counts from the end of the string\n$ printf '%s\\n' \"${var:3:-5}\"\n3456789a\n\n# Negative offset counts from the end\n# Needs a space to avoid confusion with ${var:-6}\n$ printf '%s\\n' \"${var: -6}\"\nabcdef\n\n# Alternative: parentheses\n$ printf '%s\\n' \"${var:(-6)}\"\nabcdef\n\n# Negative offset and negative length\n$ printf '%s\\n' \"${var: -6:-5}\"\na"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# Negative length counts from the end of the string\n$ printf '%s\\n' \"${var:3:-5}\"\n3456789a\n\n# Negative offset counts from the end\n# Needs a space to avoid confusion with ${var:-6}\n$ printf '%s\\n' \"${var: -6}\"\nabcdef\n\n# Alternative: parentheses\n$ printf '%s\\n' \"${var:(-6)}\"\nabcdef\n\n# Negative offset and negative length\n$ printf '%s\\n' \"${var: -6:-5}\"\na",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010757,
        "id": "fd1d5d7e-0265-4913-82e5-d344af3314ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010757,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The same expansions apply if the parameter is a "
            ],
            [
              "positional parameter",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " or the "
            ],
            [
              "element of a subscripted array",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The same expansions apply if the parameter is a "
          },
          {
            "Text": "positional parameter",
            "AttrFlags": 1
          },
          {
            "Text": " or the "
          },
          {
            "Text": "element of a subscripted array",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010757,
        "id": "29534e90-0ae8-48fd-800f-59d93894a2fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010757,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# Set positional parameter $1\nset -- 0123456789abcdef\n\n# Define offset\n$ printf '%s\\n' \"${1:5}\"\n56789abcdef\n\n# Assign to array element\nmyarr[0]='0123456789abcdef'\n\n# Define offset and length\n$ printf '%s\\n' \"${myarr[0]:7:3}\"\n789"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# Set positional parameter $1\nset -- 0123456789abcdef\n\n# Define offset\n$ printf '%s\\n' \"${1:5}\"\n56789abcdef\n\n# Assign to array element\nmyarr[0]='0123456789abcdef'\n\n# Define offset and length\n$ printf '%s\\n' \"${myarr[0]:7:3}\"\n789",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010757,
        "id": "7268b810-73c5-4197-9e15-f82d9afc0ca3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010757,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Analogous expansions apply to "
            ],
            [
              "positional parameters",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", where offsets are one-based:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Analogous expansions apply to "
          },
          {
            "Text": "positional parameters",
            "AttrFlags": 1
          },
          {
            "Text": ", where offsets are one-based:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010757,
        "id": "d1300756-21f6-4c9e-8f1c-72de92f47249",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010757,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# Set positional parameters $1, $2, ...\n$ set -- 1 2 3 4 5 6 7 8 9 0 a b c d e f\n\n# Define an offset (beware $0 (not a positional parameter)\n# is being considered here as well)\n$ printf '%s\\n' \"${@:10}\"\n0\na\nb \nc\nd\ne\nf\n\n# Define an offset and a length\n$ printf '%s\\n' \"${@:10:3}\"\n0\na\nb\n\n# No negative lengths allowed for positional parameters\n$ printf '%s\\n' \"${@:10:-2}\"\nbash: -2: substring expression \u003c 0\n\n# Negative offset counts from the end\n# Needs a space to avoid confusion with ${@:-10:2}\n$ printf '%s\\n' \"${@: -10:2}\"\n7\n8\n\n# ${@:0} is $0 which is not otherwise a positional parameters or part\n# of $@\n$ printf '%s\\n' \"${@:0:2}\"\n/usr/bin/bash\n1"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# Set positional parameters $1, $2, ...\n$ set -- 1 2 3 4 5 6 7 8 9 0 a b c d e f\n\n# Define an offset (beware $0 (not a positional parameter)\n# is being considered here as well)\n$ printf '%s\\n' \"${@:10}\"\n0\na\nb \nc\nd\ne\nf\n\n# Define an offset and a length\n$ printf '%s\\n' \"${@:10:3}\"\n0\na\nb\n\n# No negative lengths allowed for positional parameters\n$ printf '%s\\n' \"${@:10:-2}\"\nbash: -2: substring expression \u003c 0\n\n# Negative offset counts from the end\n# Needs a space to avoid confusion with ${@:-10:2}\n$ printf '%s\\n' \"${@: -10:2}\"\n7\n8\n\n# ${@:0} is $0 which is not otherwise a positional parameters or part\n# of $@\n$ printf '%s\\n' \"${@:0:2}\"\n/usr/bin/bash\n1",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010757,
        "id": "b560ea6f-7940-4316-8fc7-21cd688c5756",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010757,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Substring expansion can be used with "
            ],
            [
              "indexed arrays",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Substring expansion can be used with "
          },
          {
            "Text": "indexed arrays",
            "AttrFlags": 1
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551930010757,
        "id": "e869f95c-392d-467d-b30b-d702379b5375",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551930010757,
        "parent_id": "93b8c0ec-986f-4bd0-8b16-a017c49fd93d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "# Create array (zero-based indices)\n$ myarr=(0 1 2 3 4 5 6 7 8 9 a b c d e f)\n\n# Elements with index 5 and higher\n$ printf '%s\\n' \"${myarr[@]:12}\"\nc\nd\ne\nf\n\n# 3 elements, starting with index 5\n$ printf '%s\\n' \"${myarr[@]:5:3}\"\n5\n6\n7\n\n# The last element of the array\n$ printf '%s\\n' \"${myarr[@]: -1}\"\nf"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "# Create array (zero-based indices)\n$ myarr=(0 1 2 3 4 5 6 7 8 9 a b c d e f)\n\n# Elements with index 5 and higher\n$ printf '%s\\n' \"${myarr[@]:12}\"\nc\nd\ne\nf\n\n# 3 elements, starting with index 5\n$ printf '%s\\n' \"${myarr[@]:5:3}\"\n5\n6\n7\n\n# The last element of the array\n$ printf '%s\\n' \"${myarr[@]: -1}\"\nf",
        "code_language": "Plain Text"
      }
    ],
    "title": "Substrings and subarrays",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}