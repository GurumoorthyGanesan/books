{
  "ID": "a47b2623-fb4c-4069-a8fd-1c55dfe0368c",
  "Root": {
    "alive": true,
    "content": [
      "f883e27a-bbe2-4409-972f-34865d416384",
      "53030237-7b9c-49c1-af83-cd3b0be8a234",
      "7c2b413d-312f-4524-9670-df66df732047"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550459236087,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a47b2623-fb4c-4069-a8fd-1c55dfe0368c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550479800000,
    "parent_id": "90982c65-15f5-4292-b068-36b5b5bca394",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operator functions"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459236083,
        "id": "f883e27a-bbe2-4409-972f-34865d416384",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459236083,
        "parent_id": "a47b2623-fb4c-4069-a8fd-1c55dfe0368c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Kotlin allows us to provide implementations for a predefined set of operators with fixed symbolic representation (like "
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and fixed precedence. To implement an operator, we provide a member function or an extension function with a fixed name, for the corresponding type. Functions that overload operators need to be marked with the "
            ],
            [
              "operator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " modifier:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Kotlin allows us to provide implementations for a predefined set of operators with fixed symbolic representation (like "
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": ") and fixed precedence. To implement an operator, we provide a member function or an extension function with a fixed name, for the corresponding type. Functions that overload operators need to be marked with the "
          },
          {
            "Text": "operator",
            "AttrFlags": 2
          },
          {
            "Text": " modifier:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459236086,
        "id": "53030237-7b9c-49c1-af83-cd3b0be8a234",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459236086,
        "parent_id": "a47b2623-fb4c-4069-a8fd-1c55dfe0368c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "data class IntListWrapper (val wrapped: List\u003cInt\u003e) {\n    operator fun get(position: Int): Int = wrapped[position]\n}\n\nval a = IntListWrapper(listOf(1, 2, 3))\na[1] // == 2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "data class IntListWrapper (val wrapped: List\u003cInt\u003e) {\n    operator fun get(position: Int): Int = wrapped[position]\n}\n\nval a = IntListWrapper(listOf(1, 2, 3))\na[1] // == 2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459236087,
        "id": "7c2b413d-312f-4524-9670-df66df732047",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459236087,
        "parent_id": "a47b2623-fb4c-4069-a8fd-1c55dfe0368c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More operator functions can be found in "
            ],
            [
              "here",
              [
                [
                  "a",
                  "https://kotlinlang.org/docs/reference/operator-overloading.html"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More operator functions can be found in "
          },
          {
            "Text": "here",
            "Link": "https://kotlinlang.org/docs/reference/operator-overloading.html"
          }
        ]
      }
    ],
    "title": "Operator functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}