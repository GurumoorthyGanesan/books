{
  "ID": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
  "Root": {
    "alive": true,
    "content": [
      "2356dc31-911b-441b-9cc1-3fedaf2fdc50",
      "af4f53e9-c918-40e4-a3a7-e303dffe3194",
      "c82b3ebc-35e6-4050-8b8c-4687af6f9c5f",
      "f7f05eaf-d594-4d81-8f3b-cd30597efec4",
      "ff30bfd0-7db7-4d13-9d7b-5746eb869b60",
      "0531205e-97eb-4a72-8b20-15086775ba13",
      "3025c186-453c-4bad-8092-1fe5543b38ab",
      "cd928f59-30dc-4292-82da-4d8becf79265",
      "e54c4ff3-4d9d-4015-bf75-12d734f5e3b5",
      "ad1ff742-2608-4967-a07f-4cf177dd495e",
      "1f502c38-e0a5-40f9-9273-ac5b401a95f5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550459601010,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550479020000,
    "parent_id": "bcd0d2a7-7420-4503-b628-69e879b06bc1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Idioms for Regex Matching in When Expression"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601006,
        "id": "2356dc31-911b-441b-9cc1-3fedaf2fdc50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601006,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using immutable locals:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using immutable locals:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601009,
        "id": "af4f53e9-c918-40e4-a3a7-e303dffe3194",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601009,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Uses less horizontal space but more vertical space than the “anonymous temporaries” template. Preferable over the “anonymous temporaries” template if the "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression is in a loop–in that case, regex definitions should be placed outside the loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Uses less horizontal space but more vertical space than the “anonymous temporaries” template. Preferable over the “anonymous temporaries” template if the "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " expression is in a loop–in that case, regex definitions should be placed outside the loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601009,
        "id": "c82b3ebc-35e6-4050-8b8c-4687af6f9c5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478960000,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "import kotlin.text.regex\n\nvar string = /* some string */\n\nval regex1 = Regex( /* pattern */ )\nval regex2 = Regex( /* pattern */ )\n/* etc */\n\nwhen {\n    regex1.matches(string) -\u003e /* do stuff */\n    regex2.matches(string) -\u003e /* do stuff */\n    /* etc */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import kotlin.text.regex\n\nvar string = /* some string */\n\nval regex1 = Regex( /* pattern */ )\nval regex2 = Regex( /* pattern */ )\n/* etc */\n\nwhen {\n    regex1.matches(string) -\u003e /* do stuff */\n    regex2.matches(string) -\u003e /* do stuff */\n    /* etc */\n}",
        "code_language": "Kotlin"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601009,
        "id": "f7f05eaf-d594-4d81-8f3b-cd30597efec4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601009,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using anonymous temporaries:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using anonymous temporaries:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "ff30bfd0-7db7-4d13-9d7b-5746eb869b60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601010,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Uses less vertical space but more horizontal space than the “immutable locals” template. Should not be used if then "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression is in a loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Uses less vertical space but more horizontal space than the “immutable locals” template. Should not be used if then "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " expression is in a loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "0531205e-97eb-4a72-8b20-15086775ba13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478960000,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "import kotlin.text.regex\n\nvar string = /* some string */\n\nwhen {  \n    Regex( /* pattern */ ).matches(string) -\u003e /* do stuff */\n    Regex( /* pattern */ ).matches(string) -\u003e /* do stuff */\n    /* etc */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import kotlin.text.regex\n\nvar string = /* some string */\n\nwhen {  \n    Regex( /* pattern */ ).matches(string) -\u003e /* do stuff */\n    Regex( /* pattern */ ).matches(string) -\u003e /* do stuff */\n    /* etc */\n}",
        "code_language": "Kotlin"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "3025c186-453c-4bad-8092-1fe5543b38ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601010,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the visitor pattern:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the visitor pattern:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "cd928f59-30dc-4292-82da-4d8becf79265",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601010,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Has the benefit of closely emulating the “argument-ful” "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax. This is beneficial because it more clearly indicates the argument of the "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression, and also precludes certain programmer mistakes that could arise from having to repeat the "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument in every "
            ],
            [
              "whenEntry",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Either the “immutable locals” or the “anonymous temporaries” template may be used with this implementation the visitor pattern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Has the benefit of closely emulating the “argument-ful” "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " syntax. This is beneficial because it more clearly indicates the argument of the "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " expression, and also precludes certain programmer mistakes that could arise from having to repeat the "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " argument in every "
          },
          {
            "Text": "whenEntry",
            "AttrFlags": 2
          },
          {
            "Text": ". Either the “immutable locals” or the “anonymous temporaries” template may be used with this implementation the visitor pattern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "e54c4ff3-4d9d-4015-bf75-12d734f5e3b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478960000,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "import kotlin.text.regex\n\nvar string = /* some string */\n\nwhen (RegexWhenArgument(string)) {\n    Regex( /* pattern */ ) -\u003e /* do stuff */\n    Regex( /* pattern */ ) -\u003e /* do stuff */\n    /* etc */\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import kotlin.text.regex\n\nvar string = /* some string */\n\nwhen (RegexWhenArgument(string)) {\n    Regex( /* pattern */ ) -\u003e /* do stuff */\n    Regex( /* pattern */ ) -\u003e /* do stuff */\n    /* etc */\n}",
        "code_language": "Kotlin"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "ad1ff742-2608-4967-a07f-4cf177dd495e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459601010,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And the minimal definition of the wrapper class for the "
            ],
            [
              "when",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression argument:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And the minimal definition of the wrapper class for the "
          },
          {
            "Text": "when",
            "AttrFlags": 2
          },
          {
            "Text": " expression argument:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459601010,
        "id": "1f502c38-e0a5-40f9-9273-ac5b401a95f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550479020000,
        "parent_id": "6b36fe3d-e9d1-4362-a788-7f71da7eb9ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "class RegexWhenArgument (val whenArgument: CharSequence) {\n    operator fun equals(whenEntry: Regex) = whenEntry.matches(whenArgument)\n    override operator fun equals(whenEntry: Any?) = (whenArgument == whenEntry)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class RegexWhenArgument (val whenArgument: CharSequence) {\n    operator fun equals(whenEntry: Regex) = whenEntry.matches(whenArgument)\n    override operator fun equals(whenEntry: Any?) = (whenArgument == whenEntry)\n}",
        "code_language": "Kotlin"
      }
    ],
    "title": "Idioms for Regex Matching in When Expression",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}