{
  "ID": "eddfdd4e-460a-4406-9c93-e855a47572f7",
  "Root": {
    "alive": true,
    "content": [
      "f2608ea9-33c6-4748-8348-8b52243b1bac",
      "f3d9c2a8-45f3-4a04-999f-650d2e11f1bd",
      "c9954afe-3891-4f9f-8605-2a22c456e519",
      "708a0f47-ce9a-4864-b975-3548220894ab",
      "04efc95f-b23a-431c-89c7-5fc7e2b84e64",
      "21939735-e0d3-4276-af5a-18f6f8aa1a9e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550459272253,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550479620000,
    "parent_id": "7b416f2b-f26d-4f20-87fe-64ec020e1f51",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Setting values of all properties of a class"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459272248,
        "id": "f2608ea9-33c6-4748-8348-8b52243b1bac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459272248,
        "parent_id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As an example we want to set all string properties of a sample class"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As an example we want to set all string properties of a sample class"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459272251,
        "id": "f3d9c2a8-45f3-4a04-999f-650d2e11f1bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550479620000,
        "parent_id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "class TestClass {\n    val readOnlyProperty: String\n        get() = \"Read only!\"\n\n    var readWriteString = \"asd\"\n    var readWriteInt = 23\n\n    var readWriteBackedStringProperty: String = \"\"\n        get() = field + '5'\n        set(value) { field = value + '5' }\n\n    var readWriteBackedIntProperty: Int = 0\n        get() = field + 1\n        set(value) { field = value - 1 }\n\n    var delegatedProperty: Int by TestDelegate()\n\n    private var privateProperty = \"This should be private\"\n\n    private class TestDelegate {\n        private var backingField = 3\n\n        operator fun getValue(thisRef: Any?, prop: KProperty\u003c*\u003e): Int {\n            return backingField\n        }\n\n        operator fun setValue(thisRef: Any?, prop: KProperty\u003c*\u003e, value: Int) {\n            backingField += value\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class TestClass {\n    val readOnlyProperty: String\n        get() = \"Read only!\"\n\n    var readWriteString = \"asd\"\n    var readWriteInt = 23\n\n    var readWriteBackedStringProperty: String = \"\"\n        get() = field + '5'\n        set(value) { field = value + '5' }\n\n    var readWriteBackedIntProperty: Int = 0\n        get() = field + 1\n        set(value) { field = value - 1 }\n\n    var delegatedProperty: Int by TestDelegate()\n\n    private var privateProperty = \"This should be private\"\n\n    private class TestDelegate {\n        private var backingField = 3\n\n        operator fun getValue(thisRef: Any?, prop: KProperty\u003c*\u003e): Int {\n            return backingField\n        }\n\n        operator fun setValue(thisRef: Any?, prop: KProperty\u003c*\u003e, value: Int) {\n            backingField += value\n        }\n    }\n}",
        "code_language": "Kotlin"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459272251,
        "id": "c9954afe-3891-4f9f-8605-2a22c456e519",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459272251,
        "parent_id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Getting mutable properties builds on getting all properties, filtering mutable properties by type. We also need to check visibility, as reading private properties results in run time exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Getting mutable properties builds on getting all properties, filtering mutable properties by type. We also need to check visibility, as reading private properties results in run time exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459272251,
        "id": "708a0f47-ce9a-4864-b975-3548220894ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550479620000,
        "parent_id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "val instance = TestClass()\nTestClass::class.memberProperties\n        .filter{ prop.visibility == KVisibility.PUBLIC }\n        .filterIsInstance\u003cKMutableProperty\u003c*\u003e\u003e()\n        .forEach { prop -\u003e\n            System.out.println(\"${prop.name} -\u003e ${prop.get(instance)\")\n        }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "val instance = TestClass()\nTestClass::class.memberProperties\n        .filter{ prop.visibility == KVisibility.PUBLIC }\n        .filterIsInstance\u003cKMutableProperty\u003c*\u003e\u003e()\n        .forEach { prop -\u003e\n            System.out.println(\"${prop.name} -\u003e ${prop.get(instance)\")\n        }",
        "code_language": "Kotlin"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459272253,
        "id": "04efc95f-b23a-431c-89c7-5fc7e2b84e64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459272253,
        "parent_id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To set all "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " properties to "
            ],
            [
              "\"Our Value\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we can additionally filter by the return type. Since Kotlin is based on Java VM, "
            ],
            [
              "Type Erasure",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/339699/java-generics-type-erasure-when-and-what-happens"
                ]
              ]
            ],
            [
              " is in effect, and thus Properties returning generic types such as "
            ],
            [
              "List\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be the same as "
            ],
            [
              "List\u003cAny\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Sadly reflection is not a golden bullet and there is no sensible way to avoid this, so you need to watch out in your use-cases."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To set all "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " properties to "
          },
          {
            "Text": "\"Our Value\"",
            "AttrFlags": 2
          },
          {
            "Text": " we can additionally filter by the return type. Since Kotlin is based on Java VM, "
          },
          {
            "Text": "Type Erasure",
            "Link": "http://stackoverflow.com/questions/339699/java-generics-type-erasure-when-and-what-happens"
          },
          {
            "Text": " is in effect, and thus Properties returning generic types such as "
          },
          {
            "Text": "List\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " will be the same as "
          },
          {
            "Text": "List\u003cAny\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ". Sadly reflection is not a golden bullet and there is no sensible way to avoid this, so you need to watch out in your use-cases."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459272253,
        "id": "21939735-e0d3-4276-af5a-18f6f8aa1a9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550479620000,
        "parent_id": "eddfdd4e-460a-4406-9c93-e855a47572f7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Kotlin"
            ]
          ],
          "title": [
            [
              "val instance = TestClass()\nTestClass::class.memberProperties\n        .filter{ prop.visibility == KVisibility.PUBLIC }\n        // We only want strings\n        .filter{ it.returnType.isSubtypeOf(String::class.starProjectedType) }\n        .filterIsInstance\u003cKMutableProperty\u003c*\u003e\u003e()\n        .forEach { prop -\u003e\n            // Instead of printing the property we set it to some value\n            prop.setter.call(instance, \"Our Value\")\n        }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "val instance = TestClass()\nTestClass::class.memberProperties\n        .filter{ prop.visibility == KVisibility.PUBLIC }\n        // We only want strings\n        .filter{ it.returnType.isSubtypeOf(String::class.starProjectedType) }\n        .filterIsInstance\u003cKMutableProperty\u003c*\u003e\u003e()\n        .forEach { prop -\u003e\n            // Instead of printing the property we set it to some value\n            prop.setter.call(instance, \"Our Value\")\n        }",
        "code_language": "Kotlin"
      }
    ],
    "title": "Setting values of all properties of a class",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}