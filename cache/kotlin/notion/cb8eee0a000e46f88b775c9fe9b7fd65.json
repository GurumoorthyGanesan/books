{
  "ID": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
  "Root": {
    "alive": true,
    "content": [
      "1d8b6344-411b-450b-a58e-7631573bfa27",
      "5a6a55a7-894d-469f-a05e-b0f4e0f02d53",
      "2f5875f7-8499-478c-b9ae-9267f4ecbc82",
      "b6761c1b-4421-46a7-90f7-09f353deac77",
      "d75fdfe5-f32f-4f0b-a1fd-4faabbc7e345",
      "05afb4b3-8c19-4f9e-9df8-03039bda91b9",
      "60a7b8b0-bf9a-4254-80e9-fa75bbc12bf7",
      "a53dcb7e-f162-4a52-ae7d-215eca0c01ab",
      "f7888553-4087-44ad-b717-10e371ae27de",
      "dbf06b62-ab37-4cdf-a046-9f2e644c2e45",
      "a2ad9d46-ee3a-4f2c-83d0-44a85acae0f7",
      "b645e3b6-2e60-4005-bca2-a4c1d8910f9e",
      "5cd865f9-f255-46bf-a145-45efd27226b5",
      "6bb51174-30cd-494a-b82a-eac0e6250c5c",
      "fada8a37-cedf-4ca5-a0bb-a968828bd17a",
      "f237f4e1-fc10-462b-a34e-e783f7ffc54a",
      "6b30ca6a-01f7-4c5e-8aab-d3d71d243af7",
      "d5a320fc-6446-40b6-aad3-0eee490b587d",
      "cd866cf5-3aca-43a9-9ce0-d3b00c9ed9c5",
      "0b85bef9-b9bd-4d72-adc3-307c410c7965",
      "790e6c38-74be-434b-9e75-c44e19067f4e",
      "6f23cc4e-0697-4a8c-9300-ddb6e717ced5",
      "63b05040-42f5-438a-9618-2bde283b24b9",
      "f954cdaa-28f5-4e43-bcdb-1d0521d9b352",
      "b9f4f44c-1032-496c-b820-b860e8909920",
      "7c45ec79-bfd7-4512-90a3-ff758784f37f",
      "0fbc77fb-f5ad-4b80-ac1d-f3bae222607b",
      "8e66483c-8dc3-4b14-a09a-ab553dabf367",
      "ae7c7832-3f85-4b94-8215-f82d6e9e351c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550459203098,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550479920000,
    "parent_id": "9714a780-3ee8-4e3d-95bb-973e02de4953",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Java 8 Stream Equivalents"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203088,
        "id": "1d8b6344-411b-450b-a58e-7631573bfa27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203088,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Introduction"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Introduction"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203091,
        "id": "5a6a55a7-894d-469f-a05e-b0f4e0f02d53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203091,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Kotlin provides many extension methods on collections and iterables for applying functional-style operations. A dedicated "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type allows for lazy composition of several such operations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Kotlin provides many extension methods on collections and iterables for applying functional-style operations. A dedicated "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " type allows for lazy composition of several such operations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203091,
        "id": "2f5875f7-8499-478c-b9ae-9267f4ecbc82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203091,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203091,
        "id": "b6761c1b-4421-46a7-90f7-09f353deac77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203091,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "About laziness"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "About laziness"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203091,
        "id": "d75fdfe5-f32f-4f0b-a1fd-4faabbc7e345",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203091,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to lazy process a chain, you can convert to a "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " using "
            ],
            [
              "asSequence()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " before the chain. At the end of the chain of functions, you usually end up with a "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as well. Then you can use "
            ],
            [
              "toList()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "toSet()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "toMap()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or some other function to materialize the "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the end."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to lazy process a chain, you can convert to a "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " using "
          },
          {
            "Text": "asSequence()",
            "AttrFlags": 2
          },
          {
            "Text": " before the chain. At the end of the chain of functions, you usually end up with a "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " as well. Then you can use "
          },
          {
            "Text": "toList()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "toSet()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "toMap()",
            "AttrFlags": 2
          },
          {
            "Text": " or some other function to materialize the "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " at the end."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "05afb4b3-8c19-4f9e-9df8-03039bda91b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// switch to and from lazy\nval someList = items.asSequence().filter { ... }.take(10).map { ... }.toList()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// switch to and from lazy\nval someList = items.asSequence().filter { ... }.take(10).map { ... }.toList()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "60a7b8b0-bf9a-4254-80e9-fa75bbc12bf7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// switch to lazy, but sorted() brings us out again at the end\nval someList = items.asSequence().filter { ... }.take(10).map { ... }.sorted()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// switch to lazy, but sorted() brings us out again at the end\nval someList = items.asSequence().filter { ... }.take(10).map { ... }.sorted()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "a53dcb7e-f162-4a52-ae7d-215eca0c01ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why are there no Types?!?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why are there no Types?!?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "f7888553-4087-44ad-b717-10e371ae27de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You will notice the Kotlin examples do not specify the types. This is because Kotlin has full type inference and is completely type safe at compile time. More so than Java because it also has nullable types and can help prevent the dreaded NPE. So this in Kotlin:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You will notice the Kotlin examples do not specify the types. This is because Kotlin has full type inference and is completely type safe at compile time. More so than Java because it also has nullable types and can help prevent the dreaded NPE. So this in Kotlin:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "dbf06b62-ab37-4cdf-a046-9f2e644c2e45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "val someList = people.filter { it.age \u003c= 30 }.map { it.name }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "val someList = people.filter { it.age \u003c= 30 }.map { it.name }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "a2ad9d46-ee3a-4f2c-83d0-44a85acae0f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "is the same as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "is the same as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203092,
        "id": "b645e3b6-2e60-4005-bca2-a4c1d8910f9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203092,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "val someList: List\u003cString\u003e = people.filter { it.age \u003c= 30 }.map { it.name }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "val someList: List\u003cString\u003e = people.filter { it.age \u003c= 30 }.map { it.name }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203093,
        "id": "5cd865f9-f255-46bf-a145-45efd27226b5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203093,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because Kotlin knows what "
            ],
            [
              "people",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is, and that "
            ],
            [
              "people.age",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " therefore the filter expression only allows comparison to an "
            ],
            [
              "Int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and that "
            ],
            [
              "people.name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " therefore the "
            ],
            [
              "map",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " step produces a "
            ],
            [
              "List\u003cString\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (readonly "
            ],
            [
              "List",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "String",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because Kotlin knows what "
          },
          {
            "Text": "people",
            "AttrFlags": 2
          },
          {
            "Text": " is, and that "
          },
          {
            "Text": "people.age",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "Int",
            "AttrFlags": 2
          },
          {
            "Text": " therefore the filter expression only allows comparison to an "
          },
          {
            "Text": "Int",
            "AttrFlags": 2
          },
          {
            "Text": ", and that "
          },
          {
            "Text": "people.name",
            "AttrFlags": 2
          },
          {
            "Text": " is a "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": " therefore the "
          },
          {
            "Text": "map",
            "AttrFlags": 2
          },
          {
            "Text": " step produces a "
          },
          {
            "Text": "List\u003cString\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " (readonly "
          },
          {
            "Text": "List",
            "AttrFlags": 2
          },
          {
            "Text": " of "
          },
          {
            "Text": "String",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203093,
        "id": "6bb51174-30cd-494a-b82a-eac0e6250c5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203093,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, if "
            ],
            [
              "people",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " were possibly "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as-in a "
            ],
            [
              "List\u003cPeople\u003e?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, if "
          },
          {
            "Text": "people",
            "AttrFlags": 2
          },
          {
            "Text": " were possibly "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ", as-in a "
          },
          {
            "Text": "List\u003cPeople\u003e?",
            "AttrFlags": 2
          },
          {
            "Text": " then:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203093,
        "id": "fada8a37-cedf-4ca5-a0bb-a968828bd17a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203093,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "val someList = people?.filter { it.age \u003c= 30 }?.map { it.name }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "val someList = people?.filter { it.age \u003c= 30 }?.map { it.name }",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203095,
        "id": "f237f4e1-fc10-462b-a34e-e783f7ffc54a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203095,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Returns a "
            ],
            [
              "List\u003cString\u003e?",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that would need to be null checked ("
            ],
            [
              "or use one of the other Kotlin operators for nullable values, see this ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "Kotlin idiomatic way to deal with nullable values",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/questions/34498562/in-kotlin-what-is-the-idiomatic-way-to-deal-with-nullable-values-referencing-o"
                ]
              ]
            ],
            [
              " and also ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "Idiomatic way of handling nullable or empty list in Kotlin",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/questions/26341225/idiomatic-way-of-handling-nullable-or-empty-list-in-kotlin"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Returns a "
          },
          {
            "Text": "List\u003cString\u003e?",
            "AttrFlags": 2
          },
          {
            "Text": " that would need to be null checked ("
          },
          {
            "Text": "or use one of the other Kotlin operators for nullable values, see this ",
            "AttrFlags": 4
          },
          {
            "Text": "Kotlin idiomatic way to deal with nullable values",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/questions/34498562/in-kotlin-what-is-the-idiomatic-way-to-deal-with-nullable-values-referencing-o"
          },
          {
            "Text": " and also ",
            "AttrFlags": 4
          },
          {
            "Text": "Idiomatic way of handling nullable or empty list in Kotlin",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/questions/26341225/idiomatic-way-of-handling-nullable-or-empty-list-in-kotlin"
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203095,
        "id": "6b30ca6a-01f7-4c5e-8aab-d3d71d243af7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203095,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reusing Streams"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Reusing Streams"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203095,
        "id": "d5a320fc-6446-40b6-aad3-0eee490b587d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203095,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Kotlin, it depends on the type of collection whether it can be consumed more than once. A "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " generates a new iterator every time, and unless it asserts “use only once” it can reset to the start each time it is acted upon. Therefore while the following fails in Java 8 stream, but works in Kotlin:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Kotlin, it depends on the type of collection whether it can be consumed more than once. A "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " generates a new iterator every time, and unless it asserts “use only once” it can reset to the start each time it is acted upon. Therefore while the following fails in Java 8 stream, but works in Kotlin:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203095,
        "id": "cd866cf5-3aca-43a9-9ce0-d3b00c9ed9c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203095,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Java:\nStream\u003cString\u003e stream =\nStream.of(\"d2\", \"a2\", \"b1\", \"b3\", \"c\").filter(s -\u003e s.startsWith(\"b\"));\n\nstream.anyMatch(s -\u003e true);    // ok\nstream.noneMatch(s -\u003e true);   // exception"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Java:\nStream\u003cString\u003e stream =\nStream.of(\"d2\", \"a2\", \"b1\", \"b3\", \"c\").filter(s -\u003e s.startsWith(\"b\"));\n\nstream.anyMatch(s -\u003e true);    // ok\nstream.noneMatch(s -\u003e true);   // exception",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203095,
        "id": "0b85bef9-b9bd-4d72-adc3-307c410c7965",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203095,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Kotlin:  \nval stream = listOf(\"d2\", \"a2\", \"b1\", \"b3\", \"c\").asSequence().filter { it.startsWith('b' ) }\n\nstream.forEach(::println) // b1, b2\n\nprintln(\"Any B ${stream.any { it.startsWith('b') }}\") // Any B true\nprintln(\"Any C ${stream.any { it.startsWith('c') }}\") // Any C false\n\nstream.forEach(::println) // b1, b2"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Kotlin:  \nval stream = listOf(\"d2\", \"a2\", \"b1\", \"b3\", \"c\").asSequence().filter { it.startsWith('b' ) }\n\nstream.forEach(::println) // b1, b2\n\nprintln(\"Any B ${stream.any { it.startsWith('b') }}\") // Any B true\nprintln(\"Any C ${stream.any { it.startsWith('c') }}\") // Any C false\n\nstream.forEach(::println) // b1, b2",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203095,
        "id": "790e6c38-74be-434b-9e75-c44e19067f4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203095,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And in Java to get the same behavior:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And in Java to get the same behavior:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203096,
        "id": "6f23cc4e-0697-4a8c-9300-ddb6e717ced5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203096,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Java:\nSupplier\u003cStream\u003cString\u003e\u003e streamSupplier =\n    () -\u003e Stream.of(\"d2\", \"a2\", \"b1\", \"b3\", \"c\")\n          .filter(s -\u003e s.startsWith(\"a\"));\n\nstreamSupplier.get().anyMatch(s -\u003e true);   // ok\nstreamSupplier.get().noneMatch(s -\u003e true);  // ok"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Java:\nSupplier\u003cStream\u003cString\u003e\u003e streamSupplier =\n    () -\u003e Stream.of(\"d2\", \"a2\", \"b1\", \"b3\", \"c\")\n          .filter(s -\u003e s.startsWith(\"a\"));\n\nstreamSupplier.get().anyMatch(s -\u003e true);   // ok\nstreamSupplier.get().noneMatch(s -\u003e true);  // ok",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203096,
        "id": "63b05040-42f5-438a-9618-2bde283b24b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203096,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Therefore in Kotlin the provider of the data decides if it can reset back and provide a new iterator or not. But if you want to intentionally constrain a "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to one time iteration, you can use "
            ],
            [
              "constrainOnce()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function for "
            ],
            [
              "Sequence",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Therefore in Kotlin the provider of the data decides if it can reset back and provide a new iterator or not. But if you want to intentionally constrain a "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " to one time iteration, you can use "
          },
          {
            "Text": "constrainOnce()",
            "AttrFlags": 2
          },
          {
            "Text": " function for "
          },
          {
            "Text": "Sequence",
            "AttrFlags": 2
          },
          {
            "Text": " as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203096,
        "id": "f954cdaa-28f5-4e43-bcdb-1d0521d9b352",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203096,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "val stream = listOf(\"d2\", \"a2\", \"b1\", \"b3\", \"c\").asSequence().filter { it.startsWith('b' ) }\n        .constrainOnce()\n\nstream.forEach(::println) // b1, b2\nstream.forEach(::println) // Error:java.lang.IllegalStateException: This sequence can be consumed only once."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "val stream = listOf(\"d2\", \"a2\", \"b1\", \"b3\", \"c\").asSequence().filter { it.startsWith('b' ) }\n        .constrainOnce()\n\nstream.forEach(::println) // b1, b2\nstream.forEach(::println) // Error:java.lang.IllegalStateException: This sequence can be consumed only once.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203096,
        "id": "b9f4f44c-1032-496c-b820-b860e8909920",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203096,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See also:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "See also:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203097,
        "id": "7c45ec79-bfd7-4512-90a3-ff758784f37f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203097,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "API Reference for "
            ],
            [
              "extension functions for Iterable",
              [
                [
                  "a",
                  "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/index.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "API Reference for "
          },
          {
            "Text": "extension functions for Iterable",
            "Link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/index.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203097,
        "id": "0fbc77fb-f5ad-4b80-ac1d-f3bae222607b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203097,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "API reference for "
            ],
            [
              "extension functions for Array",
              [
                [
                  "a",
                  "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-array/index.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "API reference for "
          },
          {
            "Text": "extension functions for Array",
            "Link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-array/index.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203098,
        "id": "8e66483c-8dc3-4b14-a09a-ab553dabf367",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203098,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "API reference for "
            ],
            [
              "extension functions for List",
              [
                [
                  "a",
                  "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-list/index.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "API reference for "
          },
          {
            "Text": "extension functions for List",
            "Link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-list/index.html"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459203098,
        "id": "ae7c7832-3f85-4b94-8215-f82d6e9e351c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459203098,
        "parent_id": "cb8eee0a-000e-46f8-8b77-5c9fe9b7fd65",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "API reference for "
            ],
            [
              "extension functions to Map",
              [
                [
                  "a",
                  "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-map/index.html"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "API reference for "
          },
          {
            "Text": "extension functions to Map",
            "Link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-map/index.html"
          }
        ]
      }
    ],
    "title": "Java 8 Stream Equivalents",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}