{
  "ID": "364dd74d-3288-483a-8948-e8d8b83c1516",
  "Root": {
    "alive": true,
    "content": [
      "631888c1-ef9f-4646-95e5-641b34ff2b51",
      "441e1d68-164b-40c6-8c32-7b809d8bfbd8",
      "e487eaff-5ca9-46a3-aab5-1fd76b9aa075",
      "af7d0300-5d8d-4e48-a232-9ee89a1cfdc6",
      "b3190398-8159-4507-9359-10074761d9c1",
      "53fac719-fa5d-4f0d-9bca-6d9a23b5955e",
      "a7adda9d-c8b1-4619-b6a9-0d363a43337d",
      "bd643aa1-a8a1-4895-bcfc-b870fb91fefb",
      "8b13d680-4ac7-4942-83fd-a2f6b0ffed24",
      "577b5ef0-a37d-4b4a-9bf4-26dc6cda2c3a",
      "0349bee4-a2c2-4588-b151-d245cdadffbd",
      "ac2dbb07-ca6a-44c7-ac19-6c21925c620f",
      "ed804e53-f22d-4dbb-9579-9ffda1cba2e0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550459231172,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "364dd74d-3288-483a-8948-e8d8b83c1516",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550479800000,
    "parent_id": "90982c65-15f5-4292-b068-36b5b5bca394",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Function References"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231168,
        "id": "631888c1-ef9f-4646-95e5-641b34ff2b51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231168,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can reference a function without actually calling it by prefixing the function’s name with "
            ],
            [
              "::",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This can then be passed to a function which accepts some other function as a parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can reference a function without actually calling it by prefixing the function’s name with "
          },
          {
            "Text": "::",
            "AttrFlags": 2
          },
          {
            "Text": ". This can then be passed to a function which accepts some other function as a parameter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231171,
        "id": "441e1d68-164b-40c6-8c32-7b809d8bfbd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231171,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fun addTwo(x: Int) = x + 2\nlistOf(1, 2, 3, 4).map(::addTwo) # =\u003e [3, 4, 5, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fun addTwo(x: Int) = x + 2\nlistOf(1, 2, 3, 4).map(::addTwo) # =\u003e [3, 4, 5, 6]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231171,
        "id": "e487eaff-5ca9-46a3-aab5-1fd76b9aa075",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231171,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functions without a receiver will be converted to "
            ],
            [
              "(ParamTypeA, ParamTypeB, ...) -\u003e ReturnType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "ParamTypeA",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "ParamTypeB",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " … are the type of the function parameters and `ReturnType1 is the type of function return value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functions without a receiver will be converted to "
          },
          {
            "Text": "(ParamTypeA, ParamTypeB, ...) -\u003e ReturnType",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "ParamTypeA",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "ParamTypeB",
            "AttrFlags": 2
          },
          {
            "Text": " … are the type of the function parameters and `ReturnType1 is the type of function return value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231171,
        "id": "af7d0300-5d8d-4e48-a232-9ee89a1cfdc6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231171,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fun foo(p0: Foo0, p1: Foo1, p2: Foo2): Bar {\n    //...\n}\nprintln(::foo::class.java.genericInterfaces[0]) \n// kotlin.jvm.functions.Function3\u003cFoo0, Foo1, Foo2, Bar\u003e\n// Human readable type: (Foo0, Foo1, Foo2) -\u003e Bar"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fun foo(p0: Foo0, p1: Foo1, p2: Foo2): Bar {\n    //...\n}\nprintln(::foo::class.java.genericInterfaces[0]) \n// kotlin.jvm.functions.Function3\u003cFoo0, Foo1, Foo2, Bar\u003e\n// Human readable type: (Foo0, Foo1, Foo2) -\u003e Bar",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231171,
        "id": "b3190398-8159-4507-9359-10074761d9c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231171,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functions with a receiver (be it an extension function or a member function) has a different syntax. You have to add the type name of the receiver before the double colon:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functions with a receiver (be it an extension function or a member function) has a different syntax. You have to add the type name of the receiver before the double colon:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231171,
        "id": "53fac719-fa5d-4f0d-9bca-6d9a23b5955e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231171,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\nfun Foo.foo(p0: Foo0, p1: Foo1, p2: Foo2): Bar {\n    //...\n}\nval ref = Foo::foo\nprintln(ref::class.java.genericInterfaces[0]) \n// kotlin.jvm.functions.Function4\u003cFoo, Foo0, Foo1, Foo2, Bar\u003e\n// Human readable type: (Foo, Foo0, Foo1, Foo2) -\u003e Bar\n// takes 4 parameters, with receiver as first and actual parameters following, in their order\n\n// this function can't be called like an extension function, though\nval ref = Foo::foo\nFoo().ref(Foo0(), Foo1(), Foo2()) // compile error\n\nclass Bar {\n    fun bar()\n}\nprint(Bar::bar) // works on member functions, too."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\nfun Foo.foo(p0: Foo0, p1: Foo1, p2: Foo2): Bar {\n    //...\n}\nval ref = Foo::foo\nprintln(ref::class.java.genericInterfaces[0]) \n// kotlin.jvm.functions.Function4\u003cFoo, Foo0, Foo1, Foo2, Bar\u003e\n// Human readable type: (Foo, Foo0, Foo1, Foo2) -\u003e Bar\n// takes 4 parameters, with receiver as first and actual parameters following, in their order\n\n// this function can't be called like an extension function, though\nval ref = Foo::foo\nFoo().ref(Foo0(), Foo1(), Foo2()) // compile error\n\nclass Bar {\n    fun bar()\n}\nprint(Bar::bar) // works on member functions, too.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231171,
        "id": "a7adda9d-c8b1-4619-b6a9-0d363a43337d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231171,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, when a function’s receiver is an object, the receiver is omitted from parameter list, because these is and only is one instance of such type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, when a function’s receiver is an object, the receiver is omitted from parameter list, because these is and only is one instance of such type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231172,
        "id": "bd643aa1-a8a1-4895-bcfc-b870fb91fefb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231172,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "object Foo\nfun Foo.foo(p0: Foo0, p1: Foo1, p2: Foo2): Bar {\n    //...\n}\nval ref = Foo::foo\nprintln(ref::class.java.genericInterfaces[0]) \n// kotlin.jvm.functions.Function3\u003cFoo0, Foo1, Foo2, Bar\u003e\n// Human readable type: (Foo0, Foo1, Foo2) -\u003e Bar\n// takes 3 parameters, receiver not needed\n\nobject Bar {\n    fun bar()\n}\nprint(Bar::bar) // works on member functions, too."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "object Foo\nfun Foo.foo(p0: Foo0, p1: Foo1, p2: Foo2): Bar {\n    //...\n}\nval ref = Foo::foo\nprintln(ref::class.java.genericInterfaces[0]) \n// kotlin.jvm.functions.Function3\u003cFoo0, Foo1, Foo2, Bar\u003e\n// Human readable type: (Foo0, Foo1, Foo2) -\u003e Bar\n// takes 3 parameters, receiver not needed\n\nobject Bar {\n    fun bar()\n}\nprint(Bar::bar) // works on member functions, too.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231172,
        "id": "8b13d680-4ac7-4942-83fd-a2f6b0ffed24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231172,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since kotlin 1.1, function reference can also be "
            ],
            [
              "bounded",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to a variable, which is then called a "
            ],
            [
              "bounded function reference",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since kotlin 1.1, function reference can also be "
          },
          {
            "Text": "bounded",
            "AttrFlags": 4
          },
          {
            "Text": " to a variable, which is then called a "
          },
          {
            "Text": "bounded function reference",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231172,
        "id": "577b5ef0-a37d-4b4a-9bf4-26dc6cda2c3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231172,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fun makeList(last: String?): List\u003cString\u003e {\n    val list = mutableListOf(\"a\", \"b\", \"c\")\n    last?.let(list::add)\n    return list\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fun makeList(last: String?): List\u003cString\u003e {\n    val list = mutableListOf(\"a\", \"b\", \"c\")\n    last?.let(list::add)\n    return list\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231172,
        "id": "0349bee4-a2c2-4588-b151-d245cdadffbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231172,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note this example is given only to show how bounded function reference works. It’s bad practice in all other senses."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note this example is given only to show how bounded function reference works. It’s bad practice in all other senses."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231172,
        "id": "ac2dbb07-ca6a-44c7-ac19-6c21925c620f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231172,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a special case, though. An extension function declared as a member can’t be referenced."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a special case, though. An extension function declared as a member can’t be referenced."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459231172,
        "id": "ed804e53-f22d-4dbb-9579-9ffda1cba2e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459231172,
        "parent_id": "364dd74d-3288-483a-8948-e8d8b83c1516",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo\nclass Bar {\n    fun Foo.foo() {}\n    val ref = Foo::foo // compile error\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo\nclass Bar {\n    fun Foo.foo() {}\n    val ref = Foo::foo // compile error\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Function References",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}