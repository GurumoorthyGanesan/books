{
  "ID": "8a7c29cd-bcd2-4281-9f6e-09427a025e19",
  "Root": {
    "alive": true,
    "content": [
      "79f77108-3362-46a2-b343-eb0e2145e0aa",
      "6132b0e7-88a2-4197-abce-4ea756ce0766",
      "bee05366-3e5b-4086-8a04-1d1d21dd95f9",
      "afe90c1e-ceee-46c9-9051-8558a2bee140"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550459204984,
    "id": "8a7c29cd-bcd2-4281-9f6e-09427a025e19",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550479920000,
    "parent_id": "9714a780-3ee8-4e3d-95bb-973e02de4953",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Collect example 5 - find people of legal age output formatted string"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459204979,
        "id": "79f77108-3362-46a2-b343-eb0e2145e0aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459204979,
        "parent_id": "8a7c29cd-bcd2-4281-9f6e-09427a025e19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Java:\nString phrase = persons\n        .stream()\n        .filter(p -\u003e p.age \u003e= 18)\n        .map(p -\u003e p.name)\n        .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n\nSystem.out.println(phrase);\n// In Germany Max and Peter and Pamela are of legal age."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Java:\nString phrase = persons\n        .stream()\n        .filter(p -\u003e p.age \u003e= 18)\n        .map(p -\u003e p.name)\n        .collect(Collectors.joining(\" and \", \"In Germany \", \" are of legal age.\"));\n\nSystem.out.println(phrase);\n// In Germany Max and Peter and Pamela are of legal age.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459204982,
        "id": "6132b0e7-88a2-4197-abce-4ea756ce0766",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459204982,
        "parent_id": "8a7c29cd-bcd2-4281-9f6e-09427a025e19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Kotlin:\nval phrase = persons\n        .filter { it.age \u003e= 18 }\n        .map { it.name }\n        .joinToString(\" and \", \"In Germany \", \" are of legal age.\")\n\nprintln(phrase)\n// In Germany Max and Peter and Pamela are of legal age."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Kotlin:\nval phrase = persons\n        .filter { it.age \u003e= 18 }\n        .map { it.name }\n        .joinToString(\" and \", \"In Germany \", \" are of legal age.\")\n\nprintln(phrase)\n// In Germany Max and Peter and Pamela are of legal age.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459204984,
        "id": "bee05366-3e5b-4086-8a04-1d1d21dd95f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459204984,
        "parent_id": "8a7c29cd-bcd2-4281-9f6e-09427a025e19",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And as a side note, in Kotlin we can create simple "
            ],
            [
              "data classes",
              [
                [
                  "a",
                  "https://kotlinlang.org/docs/reference/data-classes.html"
                ]
              ]
            ],
            [
              " and instantiate the test data as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And as a side note, in Kotlin we can create simple "
          },
          {
            "Text": "data classes",
            "Link": "https://kotlinlang.org/docs/reference/data-classes.html"
          },
          {
            "Text": " and instantiate the test data as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550459204984,
        "id": "afe90c1e-ceee-46c9-9051-8558a2bee140",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550459204984,
        "parent_id": "8a7c29cd-bcd2-4281-9f6e-09427a025e19",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Kotlin:\n// data class has equals, hashcode, toString, and copy methods automagically\ndata class Person(val name: String, val age: Int) \n\nval persons = listOf(Person(\"Tod\", 5), Person(\"Max\", 33), \n                     Person(\"Frank\", 13), Person(\"Peter\", 80),\n                     Person(\"Pamela\", 18))"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Kotlin:\n// data class has equals, hashcode, toString, and copy methods automagically\ndata class Person(val name: String, val age: Int) \n\nval persons = listOf(Person(\"Tod\", 5), Person(\"Max\", 33), \n                     Person(\"Frank\", 13), Person(\"Peter\", 80),\n                     Person(\"Pamela\", 18))",
        "code_language": "Plain Text"
      }
    ],
    "title": "Collect example 5 - find people of legal age output formatted string"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}