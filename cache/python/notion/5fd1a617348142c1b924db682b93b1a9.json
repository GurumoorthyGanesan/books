{
  "ID": "5fd1a617-3481-42c1-b924-db682b93b1a9",
  "Root": {
    "alive": true,
    "content": [
      "2980005d-a5e9-4ff4-b5d2-d4fbeb7562c2",
      "60594d34-c673-4338-8454-0e32906deb32",
      "82c49056-c070-4aac-be69-32356e859ee8",
      "b91e4391-efb4-423b-9474-550807ae7137",
      "1f51d7b8-fab4-4869-8caf-ecdf838acd5e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550393699871,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5fd1a617-3481-42c1-b924-db682b93b1a9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550478180000,
    "parent_id": "f9cef861-fa11-469e-9688-07cce105be5c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple transform"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550393699868,
        "id": "2980005d-a5e9-4ff4-b5d2-d4fbeb7562c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478180000,
        "parent_id": "5fd1a617-3481-42c1-b924-db682b93b1a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, Lets create a dummy dataframe."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "First, Lets create a dummy dataframe."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550393699871,
        "id": "60594d34-c673-4338-8454-0e32906deb32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550393699871,
        "parent_id": "5fd1a617-3481-42c1-b924-db682b93b1a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We assume that a customer can have n orders, an order can have m items, and items can be ordered more multiple times"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We assume that a customer can have n orders, an order can have m items, and items can be ordered more multiple times"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550393699871,
        "id": "82c49056-c070-4aac-be69-32356e859ee8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478180000,
        "parent_id": "5fd1a617-3481-42c1-b924-db682b93b1a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "orders_df = pd.DataFrame()\norders_df['customer_id'] = [1,1,1,1,1,2,2,3,3,3,3,3]\norders_df['order_id'] = [1,1,1,2,2,3,3,4,5,6,6,6]\norders_df['item'] = ['apples', 'chocolate', 'chocolate', 'coffee', 'coffee', 'apples', \n                     'bananas', 'coffee', 'milkshake', 'chocolate', 'strawberry', 'strawberry']\n\n# And this is how the dataframe looks like:\nprint(orders_df)\n#     customer_id  order_id        item\n# 0             1         1      apples\n# 1             1         1   chocolate\n# 2             1         1   chocolate\n# 3             1         2      coffee\n# 4             1         2      coffee\n# 5             2         3      apples\n# 6             2         3     bananas\n# 7             3         4      coffee\n# 8             3         5   milkshake\n# 9             3         6   chocolate\n# 10            3         6  strawberry\n# 11            3         6  strawberry"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "orders_df = pd.DataFrame()\norders_df['customer_id'] = [1,1,1,1,1,2,2,3,3,3,3,3]\norders_df['order_id'] = [1,1,1,2,2,3,3,4,5,6,6,6]\norders_df['item'] = ['apples', 'chocolate', 'chocolate', 'coffee', 'coffee', 'apples', \n                     'bananas', 'coffee', 'milkshake', 'chocolate', 'strawberry', 'strawberry']\n\n# And this is how the dataframe looks like:\nprint(orders_df)\n#     customer_id  order_id        item\n# 0             1         1      apples\n# 1             1         1   chocolate\n# 2             1         1   chocolate\n# 3             1         2      coffee\n# 4             1         2      coffee\n# 5             2         3      apples\n# 6             2         3     bananas\n# 7             3         4      coffee\n# 8             3         5   milkshake\n# 9             3         6   chocolate\n# 10            3         6  strawberry\n# 11            3         6  strawberry",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550393699871,
        "id": "b91e4391-efb4-423b-9474-550807ae7137",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478180000,
        "parent_id": "5fd1a617-3481-42c1-b924-db682b93b1a9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, we will use pandas "
            ],
            [
              "transform",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function to count the number of orders per customer"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Now, we will use pandas "
          },
          {
            "Text": "transform",
            "AttrFlags": 2
          },
          {
            "Text": " function to count the number of orders per customer"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550393699871,
        "id": "1f51d7b8-fab4-4869-8caf-ecdf838acd5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550478180000,
        "parent_id": "5fd1a617-3481-42c1-b924-db682b93b1a9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# First, we define the function that will be applied per customer_id \ncount_number_of_orders = lambda x: len(x.unique())\n\n# And now, we can tranform each group using the logic defined above\norders_df['number_of_orders_per_cient'] = (               # Put the results into a new column that is called 'number_of_orders_per_cient'\n                     orders_df                            # Take the original dataframe\n                    .groupby(['customer_id'])['order_id'] # Create a seperate group for each customer_id \u0026 select the order_id\n                    .transform(count_number_of_orders))   # Apply the function to each group seperatly \n\n# Inspecting the results ... \nprint(orders_df)\n#     customer_id  order_id        item  number_of_orders_per_cient\n# 0             1         1      apples                           2\n# 1             1         1   chocolate                           2\n# 2             1         1   chocolate                           2\n# 3             1         2      coffee                           2\n# 4             1         2      coffee                           2\n# 5             2         3      apples                           1\n# 6             2         3     bananas                           1\n# 7             3         4      coffee                           3\n# 8             3         5   milkshake                           3\n# 9             3         6   chocolate                           3\n# 10            3         6  strawberry                           3\n# 11            3         6  strawberry                           3"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# First, we define the function that will be applied per customer_id \ncount_number_of_orders = lambda x: len(x.unique())\n\n# And now, we can tranform each group using the logic defined above\norders_df['number_of_orders_per_cient'] = (               # Put the results into a new column that is called 'number_of_orders_per_cient'\n                     orders_df                            # Take the original dataframe\n                    .groupby(['customer_id'])['order_id'] # Create a seperate group for each customer_id \u0026 select the order_id\n                    .transform(count_number_of_orders))   # Apply the function to each group seperatly \n\n# Inspecting the results ... \nprint(orders_df)\n#     customer_id  order_id        item  number_of_orders_per_cient\n# 0             1         1      apples                           2\n# 1             1         1   chocolate                           2\n# 2             1         1   chocolate                           2\n# 3             1         2      coffee                           2\n# 4             1         2      coffee                           2\n# 5             2         3      apples                           1\n# 6             2         3     bananas                           1\n# 7             3         4      coffee                           3\n# 8             3         5   milkshake                           3\n# 9             3         6   chocolate                           3\n# 10            3         6  strawberry                           3\n# 11            3         6  strawberry                           3",
        "code_language": "Python"
      }
    ],
    "title": "Simple transform",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}