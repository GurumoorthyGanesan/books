{
  "ID": "ca31b138-0113-4aa2-aa01-47280021192c",
  "Root": {
    "alive": true,
    "content": [
      "d0fbbf96-6116-494e-ba36-5e16c1ac8235",
      "2bc08629-0208-4f02-bc56-4844bc5d8fe4",
      "e970e4aa-bd06-44cd-9e17-f13aac937a4d",
      "3480e45a-dbbe-4df3-9b40-7b70a5ff4252",
      "16c1d3ad-a447-4ce4-8062-326e4d845ab3",
      "2708ef81-6aed-436f-b393-640f0a9df2fc",
      "8eab0df6-8589-41f2-9209-4b1d1071fdd5",
      "39c45378-2ebf-449d-9678-4c38cfcca7c3",
      "499edb98-0a5e-4378-aa7d-447cea479912",
      "41076b88-93a7-468d-979b-4f835bcb48af",
      "da8df907-5e16-4fa0-886c-9bf050e849be",
      "61a407ec-5dad-4f36-b826-b6fb3bd2a7fd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550262665965,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ca31b138-0113-4aa2-aa01-47280021192c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550266560000,
    "parent_id": "03bb9294-3af1-4922-b21f-12ca8b68a4f2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Decorator class"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665961,
        "id": "d0fbbf96-6116-494e-ba36-5e16c1ac8235",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665961,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As mentioned in the introduction, a decorator is a function that can be applied to another function to augment its behavior. The syntactic sugar is equivalent to the following: "
            ],
            [
              "my_func = decorator(my_func)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". But what if the "
            ],
            [
              "decorator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " was instead a class? The syntax would still work, except that now "
            ],
            [
              "my_func",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " gets replaced with an instance of the "
            ],
            [
              "decorator",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class. If this class implements the "
            ],
            [
              "__call__()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " magic method, then it would still be possible to use "
            ],
            [
              "my_func",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as if it was a function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As mentioned in the introduction, a decorator is a function that can be applied to another function to augment its behavior. The syntactic sugar is equivalent to the following: "
          },
          {
            "Text": "my_func = decorator(my_func)",
            "AttrFlags": 2
          },
          {
            "Text": ". But what if the "
          },
          {
            "Text": "decorator",
            "AttrFlags": 2
          },
          {
            "Text": " was instead a class? The syntax would still work, except that now "
          },
          {
            "Text": "my_func",
            "AttrFlags": 2
          },
          {
            "Text": " gets replaced with an instance of the "
          },
          {
            "Text": "decorator",
            "AttrFlags": 2
          },
          {
            "Text": " class. If this class implements the "
          },
          {
            "Text": "__call__()",
            "AttrFlags": 2
          },
          {
            "Text": " magic method, then it would still be possible to use "
          },
          {
            "Text": "my_func",
            "AttrFlags": 2
          },
          {
            "Text": " as if it was a function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665964,
        "id": "2bc08629-0208-4f02-bc56-4844bc5d8fe4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550266560000,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Decorator(object):\n    \"\"\"Simple decorator class.\"\"\"\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print('Before the function call.')\n        res = self.func(*args, **kwargs)\n        print('After the function call.')\n        return res\n\n@Decorator\ndef testfunc():\n    print('Inside the function.')\n\ntestfunc()\n# Before the function call.\n# Inside the function.\n# After the function call."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Decorator(object):\n    \"\"\"Simple decorator class.\"\"\"\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print('Before the function call.')\n        res = self.func(*args, **kwargs)\n        print('After the function call.')\n        return res\n\n@Decorator\ndef testfunc():\n    print('Inside the function.')\n\ntestfunc()\n# Before the function call.\n# Inside the function.\n# After the function call.",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665964,
        "id": "e970e4aa-bd06-44cd-9e17-f13aac937a4d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665964,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that a function decorated with a class decorator will no longer be considered a “function” from type-checking perspective:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that a function decorated with a class decorator will no longer be considered a “function” from type-checking perspective:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665964,
        "id": "3480e45a-dbbe-4df3-9b40-7b70a5ff4252",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550266560000,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import types\nisinstance(testfunc, types.FunctionType)\n# False\ntype(testfunc)\n# \u003cclass '__main__.Decorator'\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import types\nisinstance(testfunc, types.FunctionType)\n# False\ntype(testfunc)\n# \u003cclass '__main__.Decorator'\u003e",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665964,
        "id": "16c1d3ad-a447-4ce4-8062-326e4d845ab3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665964,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decorating Methods"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Decorating Methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665965,
        "id": "2708ef81-6aed-436f-b393-640f0a9df2fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665965,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For decorating methods you need to define an additional "
            ],
            [
              "__get__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For decorating methods you need to define an additional "
          },
          {
            "Text": "__get__",
            "AttrFlags": 2
          },
          {
            "Text": "-method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665965,
        "id": "8eab0df6-8589-41f2-9209-4b1d1071fdd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550266560000,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from types import MethodType\n\nclass Decorator(object):\n    def __init__(self, func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        print('Inside the decorator.')\n        return self.func(*args, **kwargs)\n    \n    def __get__(self, instance, cls):\n        # Return a Method if it is called on an instance\n        return self if instance is None else MethodType(self, instance)\n\nclass Test(object):\n    @Decorator\n    def __init__(self):\n        pass\n    \na = Test()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from types import MethodType\n\nclass Decorator(object):\n    def __init__(self, func):\n        self.func = func\n        \n    def __call__(self, *args, **kwargs):\n        print('Inside the decorator.')\n        return self.func(*args, **kwargs)\n    \n    def __get__(self, instance, cls):\n        # Return a Method if it is called on an instance\n        return self if instance is None else MethodType(self, instance)\n\nclass Test(object):\n    @Decorator\n    def __init__(self):\n        pass\n    \na = Test()",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665965,
        "id": "39c45378-2ebf-449d-9678-4c38cfcca7c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665965,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inside the decorator."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inside the decorator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665965,
        "id": "499edb98-0a5e-4378-aa7d-447cea479912",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665965,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Warning!"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Warning!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665965,
        "id": "41076b88-93a7-468d-979b-4f835bcb48af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262665965,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class Decorators only produce one instance for a specific function so decorating a method with a class decorator will share the same decorator between all instances of that class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class Decorators only produce one instance for a specific function so decorating a method with a class decorator will share the same decorator between all instances of that class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550262665965,
        "id": "da8df907-5e16-4fa0-886c-9bf050e849be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550266560000,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from types import MethodType\n\nclass CountCallsDecorator(object):\n    def __init__(self, func):\n        self.func = func\n        self.ncalls = 0    # Number of calls of this method\n        \n    def __call__(self, *args, **kwargs):\n        self.ncalls += 1   # Increment the calls counter\n        return self.func(*args, **kwargs)\n    \n    def __get__(self, instance, cls):\n        return self if instance is None else MethodType(self, instance)\n\nclass Test(object):\n    def __init__(self):\n        pass\n    \n    @CountCallsDecorator\n    def do_something(self):\n        return 'something was done'\n    \na = Test()\na.do_something()\na.do_something.ncalls   # 1\nb = Test()\nb.do_something()\nb.do_something.ncalls   # 2"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from types import MethodType\n\nclass CountCallsDecorator(object):\n    def __init__(self, func):\n        self.func = func\n        self.ncalls = 0    # Number of calls of this method\n        \n    def __call__(self, *args, **kwargs):\n        self.ncalls += 1   # Increment the calls counter\n        return self.func(*args, **kwargs)\n    \n    def __get__(self, instance, cls):\n        return self if instance is None else MethodType(self, instance)\n\nclass Test(object):\n    def __init__(self):\n        pass\n    \n    @CountCallsDecorator\n    def do_something(self):\n        return 'something was done'\n    \na = Test()\na.do_something()\na.do_something.ncalls   # 1\nb = Test()\nb.do_something()\nb.do_something.ncalls   # 2",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550266560000,
        "id": "61a407ec-5dad-4f36-b826-b6fb3bd2a7fd",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550266560000,
        "parent_id": "ca31b138-0113-4aa2-aa01-47280021192c",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Decorator class",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}