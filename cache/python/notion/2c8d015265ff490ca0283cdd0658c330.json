{
  "ID": "2c8d0152-65ff-490c-a028-3cdd0658c330",
  "Root": {
    "alive": true,
    "content": [
      "4a9f53cb-cf81-4d6a-8c71-2b6f7e1ae2e3",
      "b9ccbdf9-a418-43c0-a96c-44b753c758f3",
      "53b07877-017f-43bc-81aa-6d12a586eef5",
      "2842c193-4ab3-408c-a472-da9d5a06b310",
      "bbb4bb70-5782-426d-b117-0da63bd428a2",
      "74fc09da-0218-49e2-bbcd-a53eceb3c8e6",
      "7f1765ea-5166-4eb0-832d-25d743c87d47",
      "3a5cab97-fb59-4ac6-a1cf-281bc6afd309",
      "749890fd-40d1-4395-b445-d3f8635e7c57"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550310915268,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550311260000,
    "parent_id": "305111c8-efce-4cf2-b2ae-7b5e31a27b42",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Setting the ABCMeta metaclass"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915263,
        "id": "4a9f53cb-cf81-4d6a-8c71-2b6f7e1ae2e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310915263,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract classes are classes that are meant to be inherited but avoid implementing specific methods, leaving behind only method signatures that subclasses must implement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract classes are classes that are meant to be inherited but avoid implementing specific methods, leaving behind only method signatures that subclasses must implement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915266,
        "id": "b9ccbdf9-a418-43c0-a96c-44b753c758f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310915266,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract classes are useful for defining and enforcing class abstractions at a high level, similar to the concept of interfaces in typed languages, without the need for method implementation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract classes are useful for defining and enforcing class abstractions at a high level, similar to the concept of interfaces in typed languages, without the need for method implementation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915267,
        "id": "53b07877-017f-43bc-81aa-6d12a586eef5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310915267,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One conceptual approach to defining an abstract class is to stub out the class methods, and then raise a NotImplementedError if accessed. This prevents children classes from accessing parent methods without overriding them first. Like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One conceptual approach to defining an abstract class is to stub out the class methods, and then raise a NotImplementedError if accessed. This prevents children classes from accessing parent methods without overriding them first. Like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915267,
        "id": "2842c193-4ab3-408c-a472-da9d5a06b310",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311260000,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Fruit:\n    \n    def check_ripeness(self):\n        raise NotImplementedError(\"check_ripeness method not implemented!\")"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Fruit:\n    \n    def check_ripeness(self):\n        raise NotImplementedError(\"check_ripeness method not implemented!\")",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915267,
        "id": "bbb4bb70-5782-426d-b117-0da63bd428a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311260000,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Apple(Fruit):\n    pass\n\n\na = Apple()\na.check_ripeness() # raises NotImplementedError"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Apple(Fruit):\n    pass\n\n\na = Apple()\na.check_ripeness() # raises NotImplementedError",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915267,
        "id": "74fc09da-0218-49e2-bbcd-a53eceb3c8e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310915267,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating an abstract class in this way prevents improper usage of methods that are not overriden, and certainly encourages methods to be defined in child classes, but it does not enforce their definition. With the "
            ],
            [
              "abc",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " module we can prevent child classes from being instantiated when they fail to override abstract class methods of their parents and ancestors:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating an abstract class in this way prevents improper usage of methods that are not overriden, and certainly encourages methods to be defined in child classes, but it does not enforce their definition. With the "
          },
          {
            "Text": "abc",
            "AttrFlags": 2
          },
          {
            "Text": " module we can prevent child classes from being instantiated when they fail to override abstract class methods of their parents and ancestors:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915267,
        "id": "7f1765ea-5166-4eb0-832d-25d743c87d47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311260000,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from abc import ABCMeta\n\nclass AbstractClass(object):\n    # the metaclass attribute must always be set as a class variable \n    __metaclass__ = ABCMeta\n\n   # the abstractmethod decorator registers this method as undefined\n   @abstractmethod \n   def virtual_method_subclasses_must_define(self):\n       # Can be left completely blank, or a base implementation can be provided\n       # Note that ordinarily a blank interpretation implicitly returns `None`, \n       # but by registering, this behaviour is no longer enforced."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from abc import ABCMeta\n\nclass AbstractClass(object):\n    # the metaclass attribute must always be set as a class variable \n    __metaclass__ = ABCMeta\n\n   # the abstractmethod decorator registers this method as undefined\n   @abstractmethod \n   def virtual_method_subclasses_must_define(self):\n       # Can be left completely blank, or a base implementation can be provided\n       # Note that ordinarily a blank interpretation implicitly returns `None`, \n       # but by registering, this behaviour is no longer enforced.",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915267,
        "id": "3a5cab97-fb59-4ac6-a1cf-281bc6afd309",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310915267,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is now possible to simply subclass and override:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is now possible to simply subclass and override:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310915268,
        "id": "749890fd-40d1-4395-b445-d3f8635e7c57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311260000,
        "parent_id": "2c8d0152-65ff-490c-a028-3cdd0658c330",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Subclass(AbstractClass):\n    def virtual_method_subclasses_must_define(self):\n        return"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Subclass(AbstractClass):\n    def virtual_method_subclasses_must_define(self):\n        return",
        "code_language": "Python"
      }
    ],
    "title": "Setting the ABCMeta metaclass",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}