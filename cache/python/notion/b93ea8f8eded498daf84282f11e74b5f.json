{
  "ID": "b93ea8f8-eded-498d-af84-282f11e74b5f",
  "Root": {
    "alive": true,
    "content": [
      "f69cd6c3-2980-42cb-9cd3-8e8af73851c5",
      "752ba452-cbec-41b6-bdbe-a9db5bc3731d",
      "3e854088-928d-4a3f-b4d6-12c63c5209fe",
      "108d4c6f-4f23-4bee-b944-b6d7ab3f5fd6",
      "3edb168c-5433-45c0-8813-6ed4482ec66d",
      "bcdd374d-ba9b-4a46-b86b-18e2c5ed6481",
      "a41fd979-9746-468d-9341-5cc42a774967",
      "9c8cbb46-bdf1-4cc8-bc07-ca60f715490d",
      "3c634845-421e-4d79-bc79-09033d14104a",
      "70023aff-4c0a-450c-bdd3-680428609477",
      "28ff57e1-cf57-4b9a-8250-0a325b3fc132",
      "93ee662a-592c-418f-9fc9-183607be0a3a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389262038,
    "id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550469420000,
    "parent_id": "6f02e2b4-2630-4916-8284-461d35c0ceba",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Managing garbage collection"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262034,
        "id": "f69cd6c3-2980-42cb-9cd3-8e8af73851c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262034,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two approaches for influencing when a memory cleanup is performed. They are influencing how often the automatic process is performed and the other is manually triggering a cleanup."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two approaches for influencing when a memory cleanup is performed. They are influencing how often the automatic process is performed and the other is manually triggering a cleanup."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262036,
        "id": "752ba452-cbec-41b6-bdbe-a9db5bc3731d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262036,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The garbage collector can be manipulated by tuning the collection thresholds which affect the frequency at which the collector runs. Python uses a generation based memory management system. New objects are saved in the newest generation - "
            ],
            [
              "generation0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and with each survived collection, objects are promoted to older generations. After reaching the last generation - "
            ],
            [
              "generation2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", they are no longer promoted."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The garbage collector can be manipulated by tuning the collection thresholds which affect the frequency at which the collector runs. Python uses a generation based memory management system. New objects are saved in the newest generation - "
          },
          {
            "Text": "generation0",
            "AttrFlags": 1
          },
          {
            "Text": " and with each survived collection, objects are promoted to older generations. After reaching the last generation - "
          },
          {
            "Text": "generation2",
            "AttrFlags": 1
          },
          {
            "Text": ", they are no longer promoted."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262037,
        "id": "3e854088-928d-4a3f-b4d6-12c63c5209fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262037,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The thresholds can be changed using the following snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The thresholds can be changed using the following snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262037,
        "id": "108d4c6f-4f23-4bee-b944-b6d7ab3f5fd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262037,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import gc\ngc.set_threshold(1000, 100, 10) # Values are just for demonstration purpose"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import gc\ngc.set_threshold(1000, 100, 10) # Values are just for demonstration purpose",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262037,
        "id": "3edb168c-5433-45c0-8813-6ed4482ec66d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262037,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first argument represents the threshold for collecting "
            ],
            [
              "generation0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". Every time the number of "
            ],
            [
              "allocations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " exceeds the number of "
            ],
            [
              "deallocations",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " by 1000 the garbage collector will be called."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first argument represents the threshold for collecting "
          },
          {
            "Text": "generation0",
            "AttrFlags": 1
          },
          {
            "Text": ". Every time the number of "
          },
          {
            "Text": "allocations",
            "AttrFlags": 1
          },
          {
            "Text": " exceeds the number of "
          },
          {
            "Text": "deallocations",
            "AttrFlags": 1
          },
          {
            "Text": " by 1000 the garbage collector will be called."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262037,
        "id": "bcdd374d-ba9b-4a46-b86b-18e2c5ed6481",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262037,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The older generations are not cleaned at each run to optimize the process. The second and third arguments are "
            ],
            [
              "optional",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and control how frequently the older generations are cleaned. If "
            ],
            [
              "generation0",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " was processed 100 times without cleaning "
            ],
            [
              "generation1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", then "
            ],
            [
              "generation1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be processed. Similarly, objects in "
            ],
            [
              "generation2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " will be processed only when the ones in "
            ],
            [
              "generation1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " were cleaned 10 times without touching "
            ],
            [
              "generation2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The older generations are not cleaned at each run to optimize the process. The second and third arguments are "
          },
          {
            "Text": "optional",
            "AttrFlags": 1
          },
          {
            "Text": " and control how frequently the older generations are cleaned. If "
          },
          {
            "Text": "generation0",
            "AttrFlags": 1
          },
          {
            "Text": " was processed 100 times without cleaning "
          },
          {
            "Text": "generation1",
            "AttrFlags": 1
          },
          {
            "Text": ", then "
          },
          {
            "Text": "generation1",
            "AttrFlags": 1
          },
          {
            "Text": " will be processed. Similarly, objects in "
          },
          {
            "Text": "generation2",
            "AttrFlags": 1
          },
          {
            "Text": " will be processed only when the ones in "
          },
          {
            "Text": "generation1",
            "AttrFlags": 1
          },
          {
            "Text": " were cleaned 10 times without touching "
          },
          {
            "Text": "generation2",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262038,
        "id": "a41fd979-9746-468d-9341-5cc42a774967",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262038,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One instance in which manually setting the thresholds is beneficial is when the program allocates a lot of small objects without deallocating them which leads to the garbage collector running too often (each "
            ],
            [
              "generation0_threshold",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " object allocations). Even though, the collector is pretty fast, when it runs on huge numbers of objects it poses a performance issue. Anyway, there’s no one size fits all strategy for choosing the thresholds and it’s use case dependable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One instance in which manually setting the thresholds is beneficial is when the program allocates a lot of small objects without deallocating them which leads to the garbage collector running too often (each "
          },
          {
            "Text": "generation0_threshold",
            "AttrFlags": 1
          },
          {
            "Text": " object allocations). Even though, the collector is pretty fast, when it runs on huge numbers of objects it poses a performance issue. Anyway, there’s no one size fits all strategy for choosing the thresholds and it’s use case dependable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262038,
        "id": "9c8cbb46-bdf1-4cc8-bc07-ca60f715490d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262038,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Manually triggering a collection can be done as in the following snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Manually triggering a collection can be done as in the following snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262038,
        "id": "3c634845-421e-4d79-bc79-09033d14104a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262038,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import gc\ngc.collect()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import gc\ngc.collect()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262038,
        "id": "70023aff-4c0a-450c-bdd3-680428609477",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262038,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The garbage collection is automatically triggered based on the number of allocations and deallocations, not on the consumed or available memory. Consequently, when working with big objects, the memory might get depleted before the automated cleanup is triggered. This makes a good use case for manually calling the garbage collector."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The garbage collection is automatically triggered based on the number of allocations and deallocations, not on the consumed or available memory. Consequently, when working with big objects, the memory might get depleted before the automated cleanup is triggered. This makes a good use case for manually calling the garbage collector."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262038,
        "id": "28ff57e1-cf57-4b9a-8250-0a325b3fc132",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262038,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though it’s possible, it’s not an encouraged practice. Avoiding memory leaks is the best option. Anyway, in big projects detecting the memory leak can be a though task and manually triggering a garbage collection can be used as a quick solution until further debugging."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though it’s possible, it’s not an encouraged practice. Avoiding memory leaks is the best option. Anyway, in big projects detecting the memory leak can be a though task and manually triggering a garbage collection can be used as a quick solution until further debugging."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389262038,
        "id": "93ee662a-592c-418f-9fc9-183607be0a3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389262038,
        "parent_id": "b93ea8f8-eded-498d-af84-282f11e74b5f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For long-running programs, the garbage collection can be triggered on a time basis or on an event basis. An example for the first one is a web server that triggers a collection after a fixed number of requests. For the later, a web server that triggers a garbage collection when a certain type of request is received."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For long-running programs, the garbage collection can be triggered on a time basis or on an event basis. An example for the first one is a web server that triggers a collection after a fixed number of requests. For the later, a web server that triggers a garbage collection when a certain type of request is received."
          }
        ]
      }
    ],
    "title": "Managing garbage collection"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}