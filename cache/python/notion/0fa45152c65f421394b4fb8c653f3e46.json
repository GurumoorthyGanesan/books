{
  "ID": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
  "Root": {
    "alive": true,
    "content": [
      "5eb639a4-c0da-425c-9d8c-4409ec3b5120",
      "1c066b6a-be81-4268-89f8-4e0336cb847e",
      "9fc63a81-9696-4c8a-bd63-1e865110c82e",
      "c9ef03aa-136a-49ba-99f5-b6c4fef72dfe",
      "ca419b8b-9ad5-4a13-8eea-9eceaa6bd6b1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346318154,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550346900000,
    "parent_id": "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Test Setup and Teardown within a unittest.TestCase"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346318132,
        "id": "5eb639a4-c0da-425c-9d8c-4409ec3b5120",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346318132,
        "parent_id": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes we want to prepare a context for each test to be run under. The "
            ],
            [
              "setUp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method is run prior to each test in the class. "
            ],
            [
              "tearDown",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is run at the end of every test. These methods are optional. Remember that TestCases are often used in cooperative multiple inheritance so you should be careful to always call "
            ],
            [
              "super",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in these methods so that base class’s "
            ],
            [
              "setUp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "tearDown",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods also get called. The base implementation of "
            ],
            [
              "TestCase",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides empty "
            ],
            [
              "setUp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "tearDown",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods so that they can be called without raising exceptions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes we want to prepare a context for each test to be run under. The "
          },
          {
            "Text": "setUp",
            "AttrFlags": 2
          },
          {
            "Text": " method is run prior to each test in the class. "
          },
          {
            "Text": "tearDown",
            "AttrFlags": 2
          },
          {
            "Text": " is run at the end of every test. These methods are optional. Remember that TestCases are often used in cooperative multiple inheritance so you should be careful to always call "
          },
          {
            "Text": "super",
            "AttrFlags": 2
          },
          {
            "Text": " in these methods so that base class’s "
          },
          {
            "Text": "setUp",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "tearDown",
            "AttrFlags": 2
          },
          {
            "Text": " methods also get called. The base implementation of "
          },
          {
            "Text": "TestCase",
            "AttrFlags": 2
          },
          {
            "Text": " provides empty "
          },
          {
            "Text": "setUp",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "tearDown",
            "AttrFlags": 2
          },
          {
            "Text": " methods so that they can be called without raising exceptions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346318152,
        "id": "1c066b6a-be81-4268-89f8-4e0336cb847e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346840000,
        "parent_id": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import unittest\n\nclass SomeTest(unittest.TestCase):\n    def setUp(self):\n        super(SomeTest, self).setUp()\n        self.mock_data = [1,2,3,4,5]\n\n    def test(self):\n        self.assertEqual(len(self.mock_data), 5)\n\n    def tearDown(self):\n        super(SomeTest, self).tearDown()\n        self.mock_data = []\n\nif __name__ == '__main__':\n    unittest.main()"
            ]
          ]
        },
        "type": "code",
        "version": 9,
        "code": "import unittest\n\nclass SomeTest(unittest.TestCase):\n    def setUp(self):\n        super(SomeTest, self).setUp()\n        self.mock_data = [1,2,3,4,5]\n\n    def test(self):\n        self.assertEqual(len(self.mock_data), 5)\n\n    def tearDown(self):\n        super(SomeTest, self).tearDown()\n        self.mock_data = []\n\nif __name__ == '__main__':\n    unittest.main()",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346318154,
        "id": "9fc63a81-9696-4c8a-bd63-1e865110c82e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346318154,
        "parent_id": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that in python2.7+, there is also the "
            ],
            [
              "addCleanup",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.addCleanup"
                ]
              ]
            ],
            [
              " method that registers functions to be called after the test is run. In contrast to "
            ],
            [
              "tearDown",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which only gets called if "
            ],
            [
              "setUp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " succeeds, functions registered via "
            ],
            [
              "addCleanup",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be called even in the event of an unhandled exception in "
            ],
            [
              "setUp",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". As a concrete example, this method can frequently be seen removing various mocks that were registered while the test was running:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that in python2.7+, there is also the "
          },
          {
            "Text": "addCleanup",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.addCleanup"
          },
          {
            "Text": " method that registers functions to be called after the test is run. In contrast to "
          },
          {
            "Text": "tearDown",
            "AttrFlags": 2
          },
          {
            "Text": " which only gets called if "
          },
          {
            "Text": "setUp",
            "AttrFlags": 2
          },
          {
            "Text": " succeeds, functions registered via "
          },
          {
            "Text": "addCleanup",
            "AttrFlags": 2
          },
          {
            "Text": " will be called even in the event of an unhandled exception in "
          },
          {
            "Text": "setUp",
            "AttrFlags": 2
          },
          {
            "Text": ". As a concrete example, this method can frequently be seen removing various mocks that were registered while the test was running:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346318154,
        "id": "c9ef03aa-136a-49ba-99f5-b6c4fef72dfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import unittest\nimport some_module\n\nclass SomeOtherTest(unittest.TestCase):\n    def setUp(self):\n        super(SomeOtherTest, self).setUp()\n        \n        # Replace `some_module.method` with a `mock.Mock`\n        my_patch = mock.patch.object(some_module, 'method')\n        my_patch.start()\n\n        # When the test finishes running, put the original method back.\n        self.addCleanup(my_patch.stop)"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "import unittest\nimport some_module\n\nclass SomeOtherTest(unittest.TestCase):\n    def setUp(self):\n        super(SomeOtherTest, self).setUp()\n        \n        # Replace `some_module.method` with a `mock.Mock`\n        my_patch = mock.patch.object(some_module, 'method')\n        my_patch.start()\n\n        # When the test finishes running, put the original method back.\n        self.addCleanup(my_patch.stop)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346318154,
        "id": "ca419b8b-9ad5-4a13-8eea-9eceaa6bd6b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346318154,
        "parent_id": "0fa45152-c65f-4213-94b4-fb8c653f3e46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another benefit of registering cleanups this way is that it allows the programmer to put the cleanup code next to the setup code and it protects you in the event that a subclasser forgets to call "
            ],
            [
              "super",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "tearDown",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another benefit of registering cleanups this way is that it allows the programmer to put the cleanup code next to the setup code and it protects you in the event that a subclasser forgets to call "
          },
          {
            "Text": "super",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "tearDown",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Test Setup and Teardown within a unittest.TestCase",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}