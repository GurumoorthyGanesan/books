{
  "ID": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
  "Root": {
    "alive": true,
    "content": [
      "c506b626-49ca-4994-85b3-d562bfb69dd8",
      "66855e4d-b457-4ce8-bf98-a92c4bb774cf",
      "8ff3dcf3-c5e3-476e-a12d-2cbeb3250217",
      "7173edb2-8bfa-45bd-a911-a645eae94e93",
      "0d5116be-4c9f-4184-9056-5946fe062d77",
      "78ce7cc8-637c-4764-9027-ca8f388ee193",
      "23372f63-3b35-4d83-b35f-7f0e6fbcf7e1",
      "60f3a7f1-d864-408b-93eb-2ec5ef2c5cb4",
      "3a134a00-51c5-4c29-89bf-6798403669e3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346320201,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550346960000,
    "parent_id": "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Asserting on Exceptions"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320195,
        "id": "c506b626-49ca-4994-85b3-d562bfb69dd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346320195,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can test that a function throws an exception with the built-in unittest through two different methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can test that a function throws an exception with the built-in unittest through two different methods."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "66855e4d-b457-4ce8-bf98-a92c4bb774cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346320200,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using a ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "context manager",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/928/context-managers-with-statement#t=201608020050207353618"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using a ",
            "AttrFlags": 1
          },
          {
            "Text": "context manager",
            "AttrFlags": 1,
            "Link": "http://stackoverflow.com/documentation/python/928/context-managers-with-statement#t=201608020050207353618"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "8ff3dcf3-c5e3-476e-a12d-2cbeb3250217",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346960000,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def division_function(dividend, divisor):\n    return dividend / divisor\n\nclass MyTestCase(unittest.TestCase):\n    def test_using_context_manager(self):\n        with self.assertRaises(ZeroDivisionError):\n            x = division_function(1, 0)"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "def division_function(dividend, divisor):\n    return dividend / divisor\n\nclass MyTestCase(unittest.TestCase):\n    def test_using_context_manager(self):\n        with self.assertRaises(ZeroDivisionError):\n            x = division_function(1, 0)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "7173edb2-8bfa-45bd-a911-a645eae94e93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346320200,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will run the code inside of the context manager and, if it succeeds, it will fail the test because the exception was not raised. If the code raises an exception of the correct type, the test will continue."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will run the code inside of the context manager and, if it succeeds, it will fail the test because the exception was not raised. If the code raises an exception of the correct type, the test will continue."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "0d5116be-4c9f-4184-9056-5946fe062d77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346320200,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also get the content of the raised exception if you want to execute additional assertions against it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also get the content of the raised exception if you want to execute additional assertions against it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "78ce7cc8-637c-4764-9027-ca8f388ee193",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346960000,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class MyTestCase(unittest.TestCase):\n    def test_using_context_manager(self):\n        with self.assertRaises(ZeroDivisionError) as ex:\n            x = division_function(1, 0)\n\n        self.assertEqual(ex.message, 'integer division or modulo by zero')"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class MyTestCase(unittest.TestCase):\n    def test_using_context_manager(self):\n        with self.assertRaises(ZeroDivisionError) as ex:\n            x = division_function(1, 0)\n\n        self.assertEqual(ex.message, 'integer division or modulo by zero')",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "23372f63-3b35-4d83-b35f-7f0e6fbcf7e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346320200,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By providing a callable function",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By providing a callable function",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320200,
        "id": "60f3a7f1-d864-408b-93eb-2ec5ef2c5cb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346960000,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def division_function(dividend, divisor):\n    \"\"\"\n    Dividing two numbers.\n\n    :type dividend: int\n    :type divisor: int\n\n    :raises: ZeroDivisionError if divisor is zero (0).\n    :rtype: int\n    \"\"\"\n    return dividend / divisor\n\nclass MyTestCase(unittest.TestCase):\n    def test_passing_function(self):\n        self.assertRaises(ZeroDivisionError, division_function, 1, 0)"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "def division_function(dividend, divisor):\n    \"\"\"\n    Dividing two numbers.\n\n    :type dividend: int\n    :type divisor: int\n\n    :raises: ZeroDivisionError if divisor is zero (0).\n    :rtype: int\n    \"\"\"\n    return dividend / divisor\n\nclass MyTestCase(unittest.TestCase):\n    def test_passing_function(self):\n        self.assertRaises(ZeroDivisionError, division_function, 1, 0)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346320201,
        "id": "3a134a00-51c5-4c29-89bf-6798403669e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346320201,
        "parent_id": "339cb1f4-66a9-4b51-b2a8-814733fc5d5e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The exception to check for must be the first parameter, and a callable function must be passed as the second parameter. Any other parameters specified will be passed directly to the function that is being called, allowing you to specify the parameters that trigger the exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The exception to check for must be the first parameter, and a callable function must be passed as the second parameter. Any other parameters specified will be passed directly to the function that is being called, allowing you to specify the parameters that trigger the exception."
          }
        ]
      }
    ],
    "title": "Asserting on Exceptions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}