{
  "ID": "31eaca9c-d006-423c-9b20-f1c65b797b30",
  "Root": {
    "alive": true,
    "content": [
      "62528d2b-6439-4674-8e9a-161ac2ee02e1",
      "a42809d0-a5d8-4098-99e2-3bf204baf385",
      "d73baf8b-5f06-4fb4-ab6f-761417d16e7b",
      "530a8563-5742-4abe-888e-20a945375e02",
      "eca697cd-bd83-402c-8fad-b45b3362b753",
      "b429b6e6-8c60-47a8-bb0e-31b3b3fd8155",
      "df79ee4b-716e-4c85-9723-035679acab0c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550357323540,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550358060000,
    "parent_id": "fbd6ee98-3b2f-4047-8c89-f040e48632d1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Chaining multiple iterators together"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323538,
        "id": "62528d2b-6439-4674-8e9a-161ac2ee02e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357323538,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "itertools.chain",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3.4/library/itertools.html#itertools.chain"
                ]
              ]
            ],
            [
              " to create a single generator which will yield the values from several generators in sequence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "itertools.chain",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3.4/library/itertools.html#itertools.chain"
          },
          {
            "Text": " to create a single generator which will yield the values from several generators in sequence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323539,
        "id": "a42809d0-a5d8-4098-99e2-3bf204baf385",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358060000,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from itertools import chain\na = (x for x in ['1', '2', '3', '4'])\nb = (x for x in ['x', 'y', 'z'])\n' '.join(chain(a, b))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from itertools import chain\na = (x for x in ['1', '2', '3', '4'])\nb = (x for x in ['x', 'y', 'z'])\n' '.join(chain(a, b))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323539,
        "id": "d73baf8b-5f06-4fb4-ab6f-761417d16e7b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357323539,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Results in:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Results in:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323539,
        "id": "530a8563-5742-4abe-888e-20a945375e02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357323539,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "'1 2 3 4 x y z'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "'1 2 3 4 x y z'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323539,
        "id": "eca697cd-bd83-402c-8fad-b45b3362b753",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357323539,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As an alternate constructor, you can use the classmethod "
            ],
            [
              "chain.from_iterable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which takes as its single parameter an iterable of iterables. To get the same result as above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As an alternate constructor, you can use the classmethod "
          },
          {
            "Text": "chain.from_iterable",
            "AttrFlags": 2
          },
          {
            "Text": " which takes as its single parameter an iterable of iterables. To get the same result as above:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323540,
        "id": "b429b6e6-8c60-47a8-bb0e-31b3b3fd8155",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358060000,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "' '.join(chain.from_iterable([a,b])"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "' '.join(chain.from_iterable([a,b])",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357323540,
        "id": "df79ee4b-716e-4c85-9723-035679acab0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357323540,
        "parent_id": "31eaca9c-d006-423c-9b20-f1c65b797b30",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While "
            ],
            [
              "chain",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can take an arbitrary number of arguments, "
            ],
            [
              "chain.from_iterable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the only way to chain an "
            ],
            [
              "infinite",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " number of iterables."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While "
          },
          {
            "Text": "chain",
            "AttrFlags": 2
          },
          {
            "Text": " can take an arbitrary number of arguments, "
          },
          {
            "Text": "chain.from_iterable",
            "AttrFlags": 2
          },
          {
            "Text": " is the only way to chain an "
          },
          {
            "Text": "infinite",
            "AttrFlags": 4
          },
          {
            "Text": " number of iterables."
          }
        ]
      }
    ],
    "title": "Chaining multiple iterators together",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}