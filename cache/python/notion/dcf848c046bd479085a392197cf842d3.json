{
  "ID": "dcf848c0-46bd-4790-85a3-92197cf842d3",
  "Root": {
    "alive": true,
    "content": [
      "2f47fab8-02bf-49e9-99b8-c470fe2dc0e6",
      "33a1fd18-3d41-4f85-9c1c-412b9b3dfc89",
      "d00b19b3-cb8e-4f83-85d2-2c1a41d1d5c9",
      "7a3c7f50-4db4-4530-80e8-6a03ec7813dd",
      "f958ae98-069a-410b-9d9b-d71e223f1c95",
      "d9c373b8-c3e6-428f-8a6c-26581e639378",
      "a45e8aad-67d1-4900-bf70-e76701897943",
      "906afa98-8575-4544-af5c-4136970f958f",
      "b8ca1922-8f15-45b6-882e-b4c36e6232be",
      "cccb5d85-6016-49b4-a7eb-41ccfb983da6",
      "6915de0b-7fbb-46b9-97d6-9f7cf8660f85",
      "9c3af3cb-817d-4dbc-a4eb-c1fe474d5a7c",
      "449cdaf2-a99a-4f11-955b-2afcda839783",
      "5b53cefa-cf01-4336-b4b1-3c1cc0007f9b",
      "6e00aaa1-d7db-4f31-80e0-47277e4f2369",
      "c60e1837-07e3-4d43-9a6a-d48ef116c0ed",
      "b3daef29-7d0c-44d7-b207-08d83b0191e1",
      "372a0129-48ac-4e61-bbc0-da1a540cd769",
      "9bfb5c46-6e3c-4686-b289-b5a8c2240512",
      "2a4bfce6-1f0b-4653-b329-26aba033f238",
      "36a7596b-56d1-4efa-b10c-cea4bab300f5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550347958598,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550348100000,
    "parent_id": "6b6906c1-a818-41da-b196-40ce5c79d75d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unpacking Iterables"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958594,
        "id": "2f47fab8-02bf-49e9-99b8-c470fe2dc0e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958594,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 3, you can unpack an iterable without knowing the exact number of items in it, and even have a variable hold the end of the iterable. For that, you provide a variable that may collect a list of values. This is done by placing an asterisk before the name. For example, unpacking a "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 3, you can unpack an iterable without knowing the exact number of items in it, and even have a variable hold the end of the iterable. For that, you provide a variable that may collect a list of values. This is done by placing an asterisk before the name. For example, unpacking a "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958595,
        "id": "33a1fd18-3d41-4f85-9c1c-412b9b3dfc89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "first, second, *tail, last = [1, 2, 3, 4, 5]\nprint(first)\n# Out: 1\nprint(second)\n# Out: 2\nprint(tail)\n# Out: [3, 4]\nprint(last)\n# Out: 5"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "first, second, *tail, last = [1, 2, 3, 4, 5]\nprint(first)\n# Out: 1\nprint(second)\n# Out: 2\nprint(tail)\n# Out: [3, 4]\nprint(last)\n# Out: 5",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958595,
        "id": "d00b19b3-cb8e-4f83-85d2-2c1a41d1d5c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958595,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": When using the "
            ],
            [
              "*variable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax, the "
            ],
            [
              "variable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will always be a list, even if the original type wasn’t a list. It may contain zero or more elements depending on the number of elements in the original list."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 1
          },
          {
            "Text": ": When using the "
          },
          {
            "Text": "*variable",
            "AttrFlags": 2
          },
          {
            "Text": " syntax, the "
          },
          {
            "Text": "variable",
            "AttrFlags": 2
          },
          {
            "Text": " will always be a list, even if the original type wasn’t a list. It may contain zero or more elements depending on the number of elements in the original list."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958595,
        "id": "7a3c7f50-4db4-4530-80e8-6a03ec7813dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "first, second, *tail, last = [1, 2, 3, 4]\nprint(tail)\n# Out: [3]\n\nfirst, second, *tail, last = [1, 2, 3]\nprint(tail)\n# Out: []\nprint(last)\n# Out: 3"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "first, second, *tail, last = [1, 2, 3, 4]\nprint(tail)\n# Out: [3]\n\nfirst, second, *tail, last = [1, 2, 3]\nprint(tail)\n# Out: []\nprint(last)\n# Out: 3",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958595,
        "id": "f958ae98-069a-410b-9d9b-d71e223f1c95",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958595,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, unpacking a "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, unpacking a "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958595,
        "id": "d9c373b8-c3e6-428f-8a6c-26581e639378",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "begin, *tail = \"Hello\"\nprint(begin)\n# Out: 'H'\nprint(tail)\n# Out: ['e', 'l', 'l', 'o']"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "begin, *tail = \"Hello\"\nprint(begin)\n# Out: 'H'\nprint(tail)\n# Out: ['e', 'l', 'l', 'o']",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958596,
        "id": "a45e8aad-67d1-4900-bf70-e76701897943",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958596,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example of unpacking a "
            ],
            [
              "date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "; "
            ],
            [
              "\\_",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is used in this example as a throwaway variable (we are interested only in "
            ],
            [
              "year",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " value):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example of unpacking a "
          },
          {
            "Text": "date",
            "AttrFlags": 2
          },
          {
            "Text": "; "
          },
          {
            "Text": "\\_",
            "AttrFlags": 2
          },
          {
            "Text": " is used in this example as a throwaway variable (we are interested only in "
          },
          {
            "Text": "year",
            "AttrFlags": 2
          },
          {
            "Text": " value):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958596,
        "id": "906afa98-8575-4544-af5c-4136970f958f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "person = ('John', 'Doe', (10, 16, 2016))\n*_, (*_, year_of_birth) = person\nprint(year_of_birth)\n# Out: 2016"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "person = ('John', 'Doe', (10, 16, 2016))\n*_, (*_, year_of_birth) = person\nprint(year_of_birth)\n# Out: 2016",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958596,
        "id": "b8ca1922-8f15-45b6-882e-b4c36e6232be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958596,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is worth mentioning that, since "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " eats up a variable number of items, you cannot have two "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s "
            ],
            [
              "for the same iterable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in an assignment - it wouldn’t know how many elements go into the first unpacking, and how many in the second:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is worth mentioning that, since "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " eats up a variable number of items, you cannot have two "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": "s "
          },
          {
            "Text": "for the same iterable",
            "AttrFlags": 4
          },
          {
            "Text": " in an assignment - it wouldn’t know how many elements go into the first unpacking, and how many in the second:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958596,
        "id": "cccb5d85-6016-49b4-a7eb-41ccfb983da6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "*head, *tail = [1, 2]\n# Out: SyntaxError: two starred expressions in assignment"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "*head, *tail = [1, 2]\n# Out: SyntaxError: two starred expressions in assignment",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958597,
        "id": "6915de0b-7fbb-46b9-97d6-9f7cf8660f85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958597,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So far we have discussed unpacking in assignments. "
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " were "
            ],
            [
              "extended in Python 3.5",
              [
                [
                  "a",
                  "https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations"
                ]
              ]
            ],
            [
              ". It’s now possible to have several unpacking operations in one expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So far we have discussed unpacking in assignments. "
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": " were "
          },
          {
            "Text": "extended in Python 3.5",
            "Link": "https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations"
          },
          {
            "Text": ". It’s now possible to have several unpacking operations in one expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958597,
        "id": "9c3af3cb-817d-4dbc-a4eb-c1fe474d5a7c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "{*range(4), 4, *(5, 6, 7)}\n# Out: {0, 1, 2, 3, 4, 5, 6, 7}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "{*range(4), 4, *(5, 6, 7)}\n# Out: {0, 1, 2, 3, 4, 5, 6, 7}",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958597,
        "id": "449cdaf2-a99a-4f11-955b-2afcda839783",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958597,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is also possible to unpack an iterable into function arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is also possible to unpack an iterable into function arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958597,
        "id": "5b53cefa-cf01-4336-b4b1-3c1cc0007f9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "iterable = [1, 2, 3, 4, 5]\nprint(iterable)\n# Out: [1, 2, 3, 4, 5]\nprint(*iterable)\n# Out: 1 2 3 4 5"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "iterable = [1, 2, 3, 4, 5]\nprint(iterable)\n# Out: [1, 2, 3, 4, 5]\nprint(*iterable)\n# Out: 1 2 3 4 5",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958597,
        "id": "6e00aaa1-d7db-4f31-80e0-47277e4f2369",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958597,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unpacking a dictionary uses two adjacent stars "
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "PEP 448",
              [
                [
                  "a",
                  "https://www.python.org/dev/peps/pep-0448/"
                ]
              ]
            ],
            [
              "):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unpacking a dictionary uses two adjacent stars "
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "PEP 448",
            "Link": "https://www.python.org/dev/peps/pep-0448/"
          },
          {
            "Text": "):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958598,
        "id": "c60e1837-07e3-4d43-9a6a-d48ef116c0ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "tail = {'y': 2, 'z': 3}\n{'x': 1, **tail}\n # Out: {'x': 1, 'y': 2, 'z': 3}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "tail = {'y': 2, 'z': 3}\n{'x': 1, **tail}\n # Out: {'x': 1, 'y': 2, 'z': 3}",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958598,
        "id": "b3daef29-7d0c-44d7-b207-08d83b0191e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958598,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows for both overriding old values and merging dictionaries."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows for both overriding old values and merging dictionaries."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958598,
        "id": "372a0129-48ac-4e61-bbc0-da1a540cd769",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "dict1 = {'x': 1, 'y': 1}\ndict2 = {'y': 2, 'z': 3}\n{**dict1, **dict2}\n# Out: {'x': 1, 'y': 2, 'z': 3}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "dict1 = {'x': 1, 'y': 1}\ndict2 = {'y': 2, 'z': 3}\n{**dict1, **dict2}\n# Out: {'x': 1, 'y': 2, 'z': 3}",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958598,
        "id": "9bfb5c46-6e3c-4686-b289-b5a8c2240512",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958598,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python 3 removed tuple unpacking in functions. Hence the following doesn’t work in Python 3"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python 3 removed tuple unpacking in functions. Hence the following doesn’t work in Python 3"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958598,
        "id": "2a4bfce6-1f0b-4653-b329-26aba033f238",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# Works in Python 2, but syntax error in Python 3:\nmap(lambda (x, y): x + y, zip(range(5), range(5)))\n# Same is true for non-lambdas:\ndef example((x, y)):\n    pass\n\n# Works in both Python 2 and Python 3:\nmap(lambda x: x[0] + x[1], zip(range(5), range(5)))\n# And non-lambdas, too:\ndef working_example(x_y):\n    x, y = x_y\n    pass"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# Works in Python 2, but syntax error in Python 3:\nmap(lambda (x, y): x + y, zip(range(5), range(5)))\n# Same is true for non-lambdas:\ndef example((x, y)):\n    pass\n\n# Works in both Python 2 and Python 3:\nmap(lambda x: x[0] + x[1], zip(range(5), range(5)))\n# And non-lambdas, too:\ndef working_example(x_y):\n    x, y = x_y\n    pass",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347958598,
        "id": "36a7596b-56d1-4efa-b10c-cea4bab300f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347958598,
        "parent_id": "dcf848c0-46bd-4790-85a3-92197cf842d3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See PEP "
            ],
            [
              "3113",
              [
                [
                  "a",
                  "https://www.python.org/dev/peps/pep-3113/"
                ]
              ]
            ],
            [
              " for detailed rationale."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See PEP "
          },
          {
            "Text": "3113",
            "Link": "https://www.python.org/dev/peps/pep-3113/"
          },
          {
            "Text": " for detailed rationale."
          }
        ]
      }
    ],
    "title": "Unpacking Iterables",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}