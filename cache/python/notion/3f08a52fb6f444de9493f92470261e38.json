{
  "ID": "3f08a52f-b6f4-44de-9493-f92470261e38",
  "Root": {
    "alive": true,
    "content": [
      "df12ecd3-d09f-40bd-9996-fcb862368e31",
      "966e4590-4af6-4945-94aa-0a214f13d994"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390760000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3f08a52f-b6f4-44de-9493-f92470261e38",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550473440000,
    "parent_id": "12e6f78e-68a5-4972-90c9-6e1365ae6259",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Abstract Syntax Tree"
        ]
      ]
    },
    "type": "page",
    "version": 41,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390779947,
        "id": "df12ecd3-d09f-40bd-9996-fcb862368e31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550473440000,
        "parent_id": "3f08a52f-b6f4-44de-9493-f92470261e38",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This analyzes a python script and, for each defined function, reports the line number where the function began, where the signature ends, where the docstring ends, and where the function definition ends."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "This analyzes a python script and, for each defined function, reports the line number where the function began, where the signature ends, where the docstring ends, and where the function definition ends."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390779950,
        "id": "966e4590-4af6-4945-94aa-0a214f13d994",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550473440000,
        "parent_id": "3f08a52f-b6f4-44de-9493-f92470261e38",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "#!/usr/local/bin/python3\n\nimport ast\nimport sys\n\n\"\"\" The data we collect.  Each key is a function name; each value is a dict\nwith keys: firstline, sigend, docend, and lastline and values of line numbers\nwhere that happens. \"\"\"\nfunctions = {}\n\ndef process(functions):\n    \"\"\" Handle the function data stored in functions. \"\"\"\n    for funcname,data in functions.items():\n        print(\"function:\",funcname)\n        print(\"\\tstarts at line:\",data['firstline'])\n        print(\"\\tsignature ends at line:\",data['sigend'])\n        if ( data['sigend'] \u003c data['docend'] ):\n            print(\"\\tdocstring ends at line:\",data['docend'])\n        else:\n            print(\"\\tno docstring\")\n        print(\"\\tfunction ends at line:\",data['lastline'])\n        print()\n\nclass FuncLister(ast.NodeVisitor):\n    def visit_FunctionDef(self, node):\n        \"\"\" Recursively visit all functions, determining where each function\n        starts, where its signature ends, where the docstring ends, and where\n        the function ends. \"\"\"\n        functions[node.name] = {'firstline':node.lineno}\n        sigend = max(node.lineno,lastline(node.args))\n        functions[node.name]['sigend'] = sigend\n        docstring = ast.get_docstring(node)\n        docstringlength = len(docstring.split('\\n')) if docstring else -1\n        functions[node.name]['docend'] = sigend+docstringlength\n        functions[node.name]['lastline'] = lastline(node)\n        self.generic_visit(node)\n\ndef lastline(node):\n    \"\"\" Recursively find the last line of a node \"\"\"\n    return max( [ node.lineno if hasattr(node,'lineno') else -1 , ]\n                +[lastline(child) for child in ast.iter_child_nodes(node)] )\n\ndef readin(pythonfilename):\n    \"\"\" Read the file name and store the function data into functions. \"\"\"\n    with open(pythonfilename) as f:\n        code = f.read()\n    FuncLister().visit(ast.parse(code))\n\ndef analyze(file,process):\n    \"\"\" Read the file and process the function data. \"\"\"\n    readin(file)\n    process(functions)\n\nif __name__ == '__main__':\n    if len(sys.argv)\u003e1:\n        for file in sys.argv[1:]:\n            analyze(file,process)\n    else:\n        analyze(sys.argv[0],process)"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "#!/usr/local/bin/python3\n\nimport ast\nimport sys\n\n\"\"\" The data we collect.  Each key is a function name; each value is a dict\nwith keys: firstline, sigend, docend, and lastline and values of line numbers\nwhere that happens. \"\"\"\nfunctions = {}\n\ndef process(functions):\n    \"\"\" Handle the function data stored in functions. \"\"\"\n    for funcname,data in functions.items():\n        print(\"function:\",funcname)\n        print(\"\\tstarts at line:\",data['firstline'])\n        print(\"\\tsignature ends at line:\",data['sigend'])\n        if ( data['sigend'] \u003c data['docend'] ):\n            print(\"\\tdocstring ends at line:\",data['docend'])\n        else:\n            print(\"\\tno docstring\")\n        print(\"\\tfunction ends at line:\",data['lastline'])\n        print()\n\nclass FuncLister(ast.NodeVisitor):\n    def visit_FunctionDef(self, node):\n        \"\"\" Recursively visit all functions, determining where each function\n        starts, where its signature ends, where the docstring ends, and where\n        the function ends. \"\"\"\n        functions[node.name] = {'firstline':node.lineno}\n        sigend = max(node.lineno,lastline(node.args))\n        functions[node.name]['sigend'] = sigend\n        docstring = ast.get_docstring(node)\n        docstringlength = len(docstring.split('\\n')) if docstring else -1\n        functions[node.name]['docend'] = sigend+docstringlength\n        functions[node.name]['lastline'] = lastline(node)\n        self.generic_visit(node)\n\ndef lastline(node):\n    \"\"\" Recursively find the last line of a node \"\"\"\n    return max( [ node.lineno if hasattr(node,'lineno') else -1 , ]\n                +[lastline(child) for child in ast.iter_child_nodes(node)] )\n\ndef readin(pythonfilename):\n    \"\"\" Read the file name and store the function data into functions. \"\"\"\n    with open(pythonfilename) as f:\n        code = f.read()\n    FuncLister().visit(ast.parse(code))\n\ndef analyze(file,process):\n    \"\"\" Read the file and process the function data. \"\"\"\n    readin(file)\n    process(functions)\n\nif __name__ == '__main__':\n    if len(sys.argv)\u003e1:\n        for file in sys.argv[1:]:\n            analyze(file,process)\n    else:\n        analyze(sys.argv[0],process)",
        "code_language": "Python"
      }
    ],
    "title": "Abstract Syntax Tree",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}