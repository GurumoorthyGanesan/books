{
  "ID": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
  "Root": {
    "alive": true,
    "content": [
      "26a21629-b5b8-43cb-85d2-57e8062dd3e5",
      "474e3f3f-ec99-4f8d-901a-79cdc8016d99",
      "7c761b79-522b-4c55-a74a-511d52368ccd",
      "6ccfebdd-1141-41ad-a72f-adca1fbea30b",
      "6968c54a-7cd6-440a-ae6d-cb23acddc5dc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389956078,
    "id": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550470620000,
    "parent_id": "4bd133ec-d8bb-49c4-b2af-77f12d05a275",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Multiprocessing.Pool"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389956073,
        "id": "26a21629-b5b8-43cb-85d2-57e8062dd3e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389956073,
        "parent_id": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The simple answer, when asking how to use threads in Python is: “Don’t. Use processes, instead.” The multiprocessing module lets you create processes with similar syntax to creating threads, but I prefer using their convenient Pool object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The simple answer, when asking how to use threads in Python is: “Don’t. Use processes, instead.” The multiprocessing module lets you create processes with similar syntax to creating threads, but I prefer using their convenient Pool object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389956078,
        "id": "474e3f3f-ec99-4f8d-901a-79cdc8016d99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389956078,
        "parent_id": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "the code that David Beazley first used to show the dangers of threads against the GIL",
              [
                [
                  "a",
                  "http://www.dabeaz.com/GIL/gilvis/measure2.py"
                ]
              ]
            ],
            [
              ", we’ll rewrite it using "
            ],
            [
              "multiprocessing.Pool",
              [
                [
                  "a",
                  "https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "the code that David Beazley first used to show the dangers of threads against the GIL",
            "Link": "http://www.dabeaz.com/GIL/gilvis/measure2.py"
          },
          {
            "Text": ", we’ll rewrite it using "
          },
          {
            "Text": "multiprocessing.Pool",
            "Link": "https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389956078,
        "id": "7c761b79-522b-4c55-a74a-511d52368ccd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389956078,
        "parent_id": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "David Beazley’s code that showed GIL threading problems"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "David Beazley’s code that showed GIL threading problems"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389956078,
        "id": "6ccfebdd-1141-41ad-a72f-adca1fbea30b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389956078,
        "parent_id": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "from threading import Thread\nimport time\ndef countdown(n):\n    while n \u003e 0:\n        n -= 1\n\nCOUNT = 10000000\n\nt1 = Thread(target=countdown,args=(COUNT/2,))\nt2 = Thread(target=countdown,args=(COUNT/2,))\nstart = time.time()\nt1.start();t2.start()\nt1.join();t2.join()\nend = time.time()\nprint end-start"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "from threading import Thread\nimport time\ndef countdown(n):\n    while n \u003e 0:\n        n -= 1\n\nCOUNT = 10000000\n\nt1 = Thread(target=countdown,args=(COUNT/2,))\nt2 = Thread(target=countdown,args=(COUNT/2,))\nstart = time.time()\nt1.start();t2.start()\nt1.join();t2.join()\nend = time.time()\nprint end-start",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389956078,
        "id": "6968c54a-7cd6-440a-ae6d-cb23acddc5dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389956078,
        "parent_id": "f0b9b7bc-1795-4803-9191-de3ea1f255bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Re-written using multiprocessing.Pool:"
            ],
            [
              "import multiprocessing\nimport time\ndef countdown(n): while n \u003e 0: n -= 1\nCOUNT = 10000000\nstart = time.time()\nwith multiprocessing.Pool as pool: pool.map(countdown, [COUNT/2, COUNT/2]) pool.close() pool.join()\nend = time.time()\nprint(end-start)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "Instead of creating threads, this creates new processes. Since each process is its own interpreter, there are no GIL collisions. multiprocessing.Pool will open as many processes as there are cores on the machine, though in the example above, it would only need two. In a real-world scenario, you want to design your list to have at least as much length as there are processors on your machine. The Pool will run the function you tell it to run with each argument, up to the number of processes it creates. When the function finishes, any remaining functions in the list will be run on that process."
            ],
            [
              "I’ve found that, even using the "
            ],
            [
              "with",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement, if you don’t close and join the pool, the processes continue to exist. To clean up resources, I always close and join my pools."
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Re-written using multiprocessing.Pool:"
          },
          {
            "Text": "import multiprocessing\nimport time\ndef countdown(n): while n \u003e 0: n -= 1\nCOUNT = 10000000\nstart = time.time()\nwith multiprocessing.Pool as pool: pool.map(countdown, [COUNT/2, COUNT/2]) pool.close() pool.join()\nend = time.time()\nprint(end-start)",
            "AttrFlags": 2
          },
          {
            "Text": "Instead of creating threads, this creates new processes. Since each process is its own interpreter, there are no GIL collisions. multiprocessing.Pool will open as many processes as there are cores on the machine, though in the example above, it would only need two. In a real-world scenario, you want to design your list to have at least as much length as there are processors on your machine. The Pool will run the function you tell it to run with each argument, up to the number of processes it creates. When the function finishes, any remaining functions in the list will be run on that process."
          },
          {
            "Text": "I’ve found that, even using the "
          },
          {
            "Text": "with",
            "AttrFlags": 2
          },
          {
            "Text": " statement, if you don’t close and join the pool, the processes continue to exist. To clean up resources, I always close and join my pools."
          }
        ]
      }
    ],
    "title": "Multiprocessing.Pool"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}