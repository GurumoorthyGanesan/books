{
  "ID": "425e0064-415c-414c-8a40-30a10e20ce52",
  "Root": {
    "alive": true,
    "content": [
      "e96680f2-f5f4-4cec-a59f-929fd979d626",
      "c32f1a62-c893-42c5-91da-79303e89355b",
      "6a87f087-1a37-4468-a0b4-40638827cca9",
      "9428c489-f5d0-4dfe-aaed-ca22498525a0",
      "f1ab2263-9eb2-4f56-9138-f5e1d1182a17",
      "fe0eb07a-0b7b-4d05-9ab0-7dfcdd7212d0",
      "62f2eafd-af87-4913-9a80-87a573904826",
      "68882a8d-6b33-4292-9032-7a36c274b3c1",
      "082da4af-b7d4-4f68-a27f-794be7aacc08",
      "9d2f31f5-bd20-4fea-878e-a3bbff5cec0a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550344504969,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "425e0064-415c-414c-8a40-30a10e20ce52",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550344800000,
    "parent_id": "a19ec278-02d7-497e-9253-2d8ba401504c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Parsing an arbitrary ISO 8601 timestamp with minimal libraries"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504964,
        "id": "e96680f2-f5f4-4cec-a59f-929fd979d626",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344504964,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python has only limited support for parsing ISO 8601 timestamps. For "
            ],
            [
              "strptime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " you need to know exactly what format it is in. As a complication the stringification of a "
            ],
            [
              "datetime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an ISO 8601 timestamp, with space as a separator and 6 digit fraction:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python has only limited support for parsing ISO 8601 timestamps. For "
          },
          {
            "Text": "strptime",
            "AttrFlags": 2
          },
          {
            "Text": " you need to know exactly what format it is in. As a complication the stringification of a "
          },
          {
            "Text": "datetime",
            "AttrFlags": 2
          },
          {
            "Text": " is an ISO 8601 timestamp, with space as a separator and 6 digit fraction:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504965,
        "id": "c32f1a62-c893-42c5-91da-79303e89355b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344800000,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "str(datetime.datetime(2016, 7, 22, 9, 25, 59, 555555))\n# '2016-07-22 09:25:59.555555'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "str(datetime.datetime(2016, 7, 22, 9, 25, 59, 555555))\n# '2016-07-22 09:25:59.555555'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504965,
        "id": "6a87f087-1a37-4468-a0b4-40638827cca9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344504965,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "but if the fraction is 0, no fractional part is output"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "but if the fraction is 0, no fractional part is output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504965,
        "id": "9428c489-f5d0-4dfe-aaed-ca22498525a0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344800000,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "str(datetime.datetime(2016, 7, 22, 9, 25, 59, 0))\n# '2016-07-22 09:25:59'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "str(datetime.datetime(2016, 7, 22, 9, 25, 59, 0))\n# '2016-07-22 09:25:59'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504965,
        "id": "f1ab2263-9eb2-4f56-9138-f5e1d1182a17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344504965,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But these 2 forms need a "
            ],
            [
              "different",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " format for "
            ],
            [
              "strptime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Furthermore, "
            ],
            [
              "strptime' does not support at all parsing minute timezones that have a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ],
            [
              "in it, thus",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "2016-07-22 09:25:59+0300"
            ],
            [
              "can be parsed, but the standard format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "2016-07-22 09:25:59+03:00` cannot."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But these 2 forms need a "
          },
          {
            "Text": "different",
            "AttrFlags": 4
          },
          {
            "Text": " format for "
          },
          {
            "Text": "strptime",
            "AttrFlags": 2
          },
          {
            "Text": ". Furthermore, "
          },
          {
            "Text": "strptime' does not support at all parsing minute timezones that have a",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          },
          {
            "Text": "in it, thus",
            "AttrFlags": 2
          },
          {
            "Text": "2016-07-22 09:25:59+0300"
          },
          {
            "Text": "can be parsed, but the standard format",
            "AttrFlags": 2
          },
          {
            "Text": "2016-07-22 09:25:59+03:00` cannot."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504968,
        "id": "fe0eb07a-0b7b-4d05-9ab0-7dfcdd7212d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344504968,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a "
            ],
            [
              "single-file",
              [
                [
                  "a",
                  "https://bitbucket.org/micktwomey/pyiso8601/src/43c6749d06c4aac6b1156911e85a0b952ca8a324/iso8601/iso8601.py?at=default\u0026fileviewer=file-view-default"
                ]
              ]
            ],
            [
              " library called "
            ],
            [
              "iso8601",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://pypi.python.org/pypi/iso8601"
                ]
              ]
            ],
            [
              " which properly parses ISO 8601 timestamps and only them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a "
          },
          {
            "Text": "single-file",
            "Link": "https://bitbucket.org/micktwomey/pyiso8601/src/43c6749d06c4aac6b1156911e85a0b952ca8a324/iso8601/iso8601.py?at=default\u0026fileviewer=file-view-default"
          },
          {
            "Text": " library called "
          },
          {
            "Text": "iso8601",
            "AttrFlags": 2,
            "Link": "https://pypi.python.org/pypi/iso8601"
          },
          {
            "Text": " which properly parses ISO 8601 timestamps and only them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504968,
        "id": "62f2eafd-af87-4913-9a80-87a573904826",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344504968,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It supports fractions and timezones, and the "
            ],
            [
              "T",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " separator all with a single function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It supports fractions and timezones, and the "
          },
          {
            "Text": "T",
            "AttrFlags": 2
          },
          {
            "Text": " separator all with a single function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504968,
        "id": "68882a8d-6b33-4292-9032-7a36c274b3c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344800000,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import iso8601\niso8601.parse_date('2016-07-22 09:25:59')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003ciso8601.Utc\u003e)\niso8601.parse_date('2016-07-22 09:25:59+03:00')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003cFixedOffset '+03:00' ...\u003e)\niso8601.parse_date('2016-07-22 09:25:59Z')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003ciso8601.Utc\u003e)\niso8601.parse_date('2016-07-22T09:25:59.000111+03:00')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, 111, tzinfo=\u003cFixedOffset '+03:00' ...\u003e)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import iso8601\niso8601.parse_date('2016-07-22 09:25:59')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003ciso8601.Utc\u003e)\niso8601.parse_date('2016-07-22 09:25:59+03:00')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003cFixedOffset '+03:00' ...\u003e)\niso8601.parse_date('2016-07-22 09:25:59Z')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003ciso8601.Utc\u003e)\niso8601.parse_date('2016-07-22T09:25:59.000111+03:00')\n# datetime.datetime(2016, 7, 22, 9, 25, 59, 111, tzinfo=\u003cFixedOffset '+03:00' ...\u003e)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504969,
        "id": "082da4af-b7d4-4f68-a27f-794be7aacc08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344504969,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If no timezone is set, "
            ],
            [
              "iso8601.parse_date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " defaults to UTC. The default zone can be changed with "
            ],
            [
              "default_zone",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword argument. Notably, if this is "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of the default, then those timestamps that do not have an explicit timezone are returned as naive datetimes instead:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If no timezone is set, "
          },
          {
            "Text": "iso8601.parse_date",
            "AttrFlags": 2
          },
          {
            "Text": " defaults to UTC. The default zone can be changed with "
          },
          {
            "Text": "default_zone",
            "AttrFlags": 2
          },
          {
            "Text": " keyword argument. Notably, if this is "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": " instead of the default, then those timestamps that do not have an explicit timezone are returned as naive datetimes instead:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344504969,
        "id": "9d2f31f5-bd20-4fea-878e-a3bbff5cec0a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344800000,
        "parent_id": "425e0064-415c-414c-8a40-30a10e20ce52",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "iso8601.parse_date('2016-07-22T09:25:59', default_timezone=None)\n# datetime.datetime(2016, 7, 22, 9, 25, 59)\niso8601.parse_date('2016-07-22T09:25:59Z', default_timezone=None)\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003ciso8601.Utc\u003e)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "iso8601.parse_date('2016-07-22T09:25:59', default_timezone=None)\n# datetime.datetime(2016, 7, 22, 9, 25, 59)\niso8601.parse_date('2016-07-22T09:25:59Z', default_timezone=None)\n# datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=\u003ciso8601.Utc\u003e)",
        "code_language": "Python"
      }
    ],
    "title": "Parsing an arbitrary ISO 8601 timestamp with minimal libraries",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}