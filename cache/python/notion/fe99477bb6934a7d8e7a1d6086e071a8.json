{
  "ID": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
  "Root": {
    "alive": true,
    "content": [
      "f1e8790c-8e3d-43a0-9aaf-f48b06596d24",
      "57f58d63-48a6-4c0f-acfd-c6e359344490",
      "650e364d-98fd-4a2a-987d-8244712f58f1",
      "e2fe35a3-38fe-42f5-b59f-c84b3ba30f56",
      "14ce90f3-1969-4ec0-8704-f1ba9dfa9e0c",
      "44bcd406-557b-47af-afaf-b4807761e0bd",
      "494c2851-3c79-4d83-a632-49fa4467a134",
      "90226d06-44c4-42c6-90cd-a575f4d8bd1f",
      "fcf54d8e-908c-4bc3-826a-090809d3a853",
      "7686eb18-de25-4d5c-90bc-05549242a427"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550344962937,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550344980000,
    "parent_id": "8c1668f0-5926-46c6-bcc9-afb867f72fff",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Set"
        ]
      ]
    },
    "type": "page",
    "version": 5,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962931,
        "id": "f1e8790c-8e3d-43a0-9aaf-f48b06596d24",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962931,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962934,
        "id": "57f58d63-48a6-4c0f-acfd-c6e359344490",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962934,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "empty_set = set() # initialize an empty set"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "empty_set = set() # initialize an empty set"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962934,
        "id": "650e364d-98fd-4a2a-987d-8244712f58f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962934,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "literal_set = {‘foo’, ‘bar’, ‘baz’} # construct a set with 3 strings inside it"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "literal_set = {‘foo’, ‘bar’, ‘baz’} # construct a set with 3 strings inside it"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962934,
        "id": "e2fe35a3-38fe-42f5-b59f-c84b3ba30f56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962934,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set_from_list = set([‘foo’, ‘bar’, ‘baz’]) # call the set function for a new set"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "set_from_list = set([‘foo’, ‘bar’, ‘baz’]) # call the set function for a new set"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962935,
        "id": "14ce90f3-1969-4ec0-8704-f1ba9dfa9e0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962935,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set_from_iter = set(x for x in range(30)) # use arbitrary iterables to create a set"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "set_from_iter = set(x for x in range(30)) # use arbitrary iterables to create a set"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962935,
        "id": "44bcd406-557b-47af-afaf-b4807761e0bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962935,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "set_from_iter = {x for x in [random.randint(0,10) for i in range(10)]} # alternative notation"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "set_from_iter = {x for x in [random.randint(0,10) for i in range(10)]} # alternative notation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962935,
        "id": "494c2851-3c79-4d83-a632-49fa4467a134",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962935,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962935,
        "id": "90226d06-44c4-42c6-90cd-a575f4d8bd1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962935,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sets are "
            ],
            [
              "unordered",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and have "
            ],
            [
              "very fast lookup time",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (amortized O(1) if you want to get technical). It is great to use when you have a collection of things, the order doesn’t matter, and you’ll be looking up items by name a lot. If it makes more sense to look up items by an index number, consider using a list instead. If order matters, consider a list as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sets are "
          },
          {
            "Text": "unordered",
            "AttrFlags": 4
          },
          {
            "Text": " and have "
          },
          {
            "Text": "very fast lookup time",
            "AttrFlags": 4
          },
          {
            "Text": " (amortized O(1) if you want to get technical). It is great to use when you have a collection of things, the order doesn’t matter, and you’ll be looking up items by name a lot. If it makes more sense to look up items by an index number, consider using a list instead. If order matters, consider a list as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962937,
        "id": "fcf54d8e-908c-4bc3-826a-090809d3a853",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962937,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sets are "
            ],
            [
              "mutable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " and thus cannot be hashed, so you cannot use them as dictionary keys or put them in other sets, or anywhere else that requires hashable types. In such cases, you can use an immutable "
            ],
            [
              "frozenset",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/stdtypes.html#frozenset"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sets are "
          },
          {
            "Text": "mutable",
            "AttrFlags": 4
          },
          {
            "Text": " and thus cannot be hashed, so you cannot use them as dictionary keys or put them in other sets, or anywhere else that requires hashable types. In such cases, you can use an immutable "
          },
          {
            "Text": "frozenset",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/stdtypes.html#frozenset"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344962937,
        "id": "7686eb18-de25-4d5c-90bc-05549242a427",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344962937,
        "parent_id": "fe99477b-b693-4a7d-8e7a-1d6086e071a8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The elements of a set must be "
            ],
            [
              "hashable",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". This means that they have a correct "
            ],
            [
              "__hash__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, that is consistent with "
            ],
            [
              "__eq__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In general, mutable types such as "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are not hashable and cannot be put in a set. If you encounter this problem, consider using "
            ],
            [
              "dict",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and immutable keys."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The elements of a set must be "
          },
          {
            "Text": "hashable",
            "AttrFlags": 4
          },
          {
            "Text": ". This means that they have a correct "
          },
          {
            "Text": "__hash__",
            "AttrFlags": 2
          },
          {
            "Text": " method, that is consistent with "
          },
          {
            "Text": "__eq__",
            "AttrFlags": 2
          },
          {
            "Text": ". In general, mutable types such as "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "set",
            "AttrFlags": 2
          },
          {
            "Text": " are not hashable and cannot be put in a set. If you encounter this problem, consider using "
          },
          {
            "Text": "dict",
            "AttrFlags": 2
          },
          {
            "Text": " and immutable keys."
          }
        ]
      }
    ],
    "title": "Set",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}