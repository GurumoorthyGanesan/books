{
  "ID": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
  "Root": {
    "alive": true,
    "content": [
      "706f1b86-1b6c-4577-83bc-010ca118a639",
      "170a268b-5248-48ca-8d97-f886d974b5ab",
      "c91a66fd-52c7-4484-b36f-3a901d2dc02c",
      "efed3276-9091-48fe-bffe-998c407e07da",
      "c86d2f9d-aec5-4f66-a704-ad23b2486534",
      "db22c738-6dfa-443f-b9e4-9ff17196d0e0",
      "043087d2-de68-4129-a6d4-1c82f15f67c5",
      "93a69449-2c76-4b5a-9fb8-fcd65c93e412",
      "c50e8f89-b1d6-4835-a624-2a2e74e16e73",
      "1faef9c2-779f-49de-be24-2886e5a2221e",
      "f3eb6445-5905-4deb-9764-1b3876370a3f",
      "726e0c5e-06ab-4d30-b28a-6b392f579710",
      "30fc7974-6e18-4432-ba1a-db3cbea3354c",
      "15f17164-029f-4d5b-8da7-2507fa616e7f",
      "111a08b3-1db1-46f2-92fc-6406150017f6",
      "7759e954-1869-4463-a9a8-859bda3ac607",
      "821c5999-5f4c-4ecf-a89f-7e8c88b35024",
      "e53f1073-363c-40c3-985d-7a0d4be55b78",
      "25347274-f1d0-4c42-a70b-84ee4fb0508c",
      "df559339-061c-409d-b6b4-7e26cd0c6f29",
      "c96c9565-897c-4594-8241-8587783260b1",
      "291c1d65-f736-46ef-a7f6-22cc0ea20b81",
      "30b34b09-fb3b-427f-ba0a-0e86e633da6a",
      "6624335e-b86f-40b1-9f30-b811e1caf6d0",
      "15fea042-5dff-4593-8203-b1b5134ffa22",
      "04e73aa3-7708-4457-9ee2-4526cf077e52",
      "345da57a-1f06-4dfc-b061-24a7dcc92b8b",
      "60c0ea7a-407d-4009-b744-df96b45cde2a",
      "804d75f2-0e5f-4805-b8ac-ecf89cfbed7f",
      "49f57b2e-65b5-43a1-a2f4-291959b278e7",
      "e0baf3bc-22a3-4b63-86ba-b74c1d54ce3c",
      "dd5de1c1-0676-4564-a83f-239f8b08cc3b",
      "6e96d1c3-ff3e-4604-aef9-124fe382cbff",
      "010be691-7ec8-46a3-a85f-a380119d4eb2",
      "ad77099b-a960-4fa9-8964-ba79a7feedde",
      "49ba7528-3d28-451d-8a90-3f0affe113ef",
      "761f7edb-0493-4f2c-b3fc-3bb93441ff72",
      "c3a71996-e179-44ab-9bf0-b0f540805d7d",
      "681a8be4-68f4-40ce-9f89-08afc4dfca9e",
      "739d3d57-7a17-4bc3-9bb0-a10fe1a47523",
      "be7ecfde-3faa-4fb7-b9d8-7f05f55d97a1",
      "5b3ed35a-853e-4edf-85a9-5765f1bb46d4",
      "07fcc5ff-4412-4c07-959e-080d3a6a2eb5",
      "d2fee3ae-32d9-4d8b-9827-38922c6ad7f5",
      "b6fa9e50-4834-4ff4-b276-75c8ed1bfb65",
      "07a509d2-e80c-40a3-bcdb-f6d079015ab4",
      "536c2637-8b04-4219-a0dc-906eb0123047",
      "5fa7e542-2899-4e28-a9a8-654f8114174e",
      "86909a47-3bce-44da-919a-3fdfa6976cd9",
      "4374d983-1d7a-4063-a4a5-8ad55c71b893",
      "3637eb41-2187-47a4-a69f-5b7ddab5dcad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390069056,
    "id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550470920000,
    "parent_id": "1f200c14-a05e-489f-8ec8-434c986484e9",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "SQLite"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069043,
        "id": "706f1b86-1b6c-4577-83bc-010ca118a639",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069043,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SQLite is a lightweight, disk-based database. Since it does not require a separate database server, it is often used for prototyping or for small applications that are often used by a single user or by one user at a given time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SQLite is a lightweight, disk-based database. Since it does not require a separate database server, it is often used for prototyping or for small applications that are often used by a single user or by one user at a given time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069046,
        "id": "170a268b-5248-48ca-8d97-f886d974b5ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069046,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import sqlite3\n\nconn = sqlite3.connect(\"users.db\")\nc = conn.cursor()\n\nc.execute(\"CREATE TABLE user (name text, age integer)\")\n\nc.execute(\"INSERT INTO user VALUES ('User A', 42)\")\nc.execute(\"INSERT INTO user VALUES ('User B', 43)\")\n\nconn.commit()\n\nc.execute(\"SELECT * FROM user\")\nprint(c.fetchall())\n\nconn.close()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import sqlite3\n\nconn = sqlite3.connect(\"users.db\")\nc = conn.cursor()\n\nc.execute(\"CREATE TABLE user (name text, age integer)\")\n\nc.execute(\"INSERT INTO user VALUES ('User A', 42)\")\nc.execute(\"INSERT INTO user VALUES ('User B', 43)\")\n\nconn.commit()\n\nc.execute(\"SELECT * FROM user\")\nprint(c.fetchall())\n\nconn.close()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069046,
        "id": "c91a66fd-52c7-4484-b36f-3a901d2dc02c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069046,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The code above connects to the database stored in the file named "
            ],
            [
              "users.db",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", creating the file first if it doesn’t already exist. You can interact with the database via SQL statements."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The code above connects to the database stored in the file named "
          },
          {
            "Text": "users.db",
            "AttrFlags": 2
          },
          {
            "Text": ", creating the file first if it doesn’t already exist. You can interact with the database via SQL statements."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069047,
        "id": "efed3276-9091-48fe-bffe-998c407e07da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069047,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of this example should be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of this example should be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069047,
        "id": "c86d2f9d-aec5-4f66-a704-ad23b2486534",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069047,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[(u'User A', 42), (u'User B', 43)]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[(u'User A', 42), (u'User B', 43)]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069047,
        "id": "db22c738-6dfa-443f-b9e4-9ff17196d0e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069047,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The SQLite Syntax: An in-depth analysis"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The SQLite Syntax: An in-depth analysis"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069047,
        "id": "043087d2-de68-4129-a6d4-1c82f15f67c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069047,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Getting started"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Getting started"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069047,
        "id": "93a69449-2c76-4b5a-9fb8-fcd65c93e412",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069047,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Import the sqlite module using"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Import the sqlite module using"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069047,
        "id": "c50e8f89-b1d6-4835-a624-2a2e74e16e73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069047,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e import sqlite3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e import sqlite3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069048,
        "id": "1faef9c2-779f-49de-be24-2886e5a2221e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069048,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use the module, you must first create a Connection object that represents the database. Here the data will be stored in the example.db file:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use the module, you must first create a Connection object that represents the database. Here the data will be stored in the example.db file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069048,
        "id": "f3eb6445-5905-4deb-9764-1b3876370a3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069048,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e conn = sqlite3.connect('users.db')\n\nAlternatively, you can also supply the special name `:memory:` to create a temporary database in RAM, as follows:\n\n\u003e\u003e\u003e conn = sqlite3.connect(':memory:')"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e conn = sqlite3.connect('users.db')\n\nAlternatively, you can also supply the special name `:memory:` to create a temporary database in RAM, as follows:\n\n\u003e\u003e\u003e conn = sqlite3.connect(':memory:')",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069049,
        "id": "726e0c5e-06ab-4d30-b28a-6b392f579710",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069049,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Once you have a "
            ],
            [
              "Connection",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", you can create a "
            ],
            [
              "Cursor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object and call its "
            ],
            [
              "execute()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to perform SQL commands:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Once you have a "
          },
          {
            "Text": "Connection",
            "AttrFlags": 2
          },
          {
            "Text": ", you can create a "
          },
          {
            "Text": "Cursor",
            "AttrFlags": 2
          },
          {
            "Text": " object and call its "
          },
          {
            "Text": "execute()",
            "AttrFlags": 2
          },
          {
            "Text": " method to perform SQL commands:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069049,
        "id": "30fc7974-6e18-4432-ba1a-db3cbea3354c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069049,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "##\n\n   c = conn.cursor()\n\n   # Create table\n   c.execute('''CREATE TABLE stocks\n               (date text, trans text, symbol text, qty real, price real)''')\n  \n   # Insert a row of data\n   c.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")\n  \n   # Save (commit) the changes\n   conn.commit()\n  \n   # We can also close the connection if we are done with it.\n   # Just be sure any changes have been committed or they will be lost.\n   conn.close()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "##\n\n   c = conn.cursor()\n\n   # Create table\n   c.execute('''CREATE TABLE stocks\n               (date text, trans text, symbol text, qty real, price real)''')\n  \n   # Insert a row of data\n   c.execute(\"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)\")\n  \n   # Save (commit) the changes\n   conn.commit()\n  \n   # We can also close the connection if we are done with it.\n   # Just be sure any changes have been committed or they will be lost.\n   conn.close()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069049,
        "id": "15f17164-029f-4d5b-8da7-2507fa616e7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069049,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important Attributes and Functions of "
            ],
            [
              "Connection",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important Attributes and Functions of "
          },
          {
            "Text": "Connection",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069049,
        "id": "111a08b3-1db1-46f2-92fc-6406150017f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069049,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "isolation_level",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "isolation_level",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069049,
        "id": "7759e954-1869-4463-a9a8-859bda3ac607",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069049,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is an attribute used to get or set the current isolation level. None for autocommit mode or one of "
            ],
            [
              "DEFERRED",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "IMMEDIATE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "EXCLUSIVE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is an attribute used to get or set the current isolation level. None for autocommit mode or one of "
          },
          {
            "Text": "DEFERRED",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "IMMEDIATE",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "EXCLUSIVE",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069050,
        "id": "821c5999-5f4c-4ecf-a89f-7e8c88b35024",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069050,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "cursor",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "cursor",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069050,
        "id": "e53f1073-363c-40c3-985d-7a0d4be55b78",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069050,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The cursor object is used to execute SQL commands and queries."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The cursor object is used to execute SQL commands and queries."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069050,
        "id": "25347274-f1d0-4c42-a70b-84ee4fb0508c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069050,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "commit()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "commit()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069050,
        "id": "df559339-061c-409d-b6b4-7e26cd0c6f29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069050,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Commits the current transaction."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Commits the current transaction."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069050,
        "id": "c96c9565-897c-4594-8241-8587783260b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069050,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "rollback()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "rollback()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069050,
        "id": "291c1d65-f736-46ef-a7f6-22cc0ea20b81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069050,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Rolls back any changes made since the previous call to "
            ],
            [
              "commit()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Rolls back any changes made since the previous call to "
          },
          {
            "Text": "commit()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069051,
        "id": "30b34b09-fb3b-427f-ba0a-0e86e633da6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069051,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "close()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "close()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069051,
        "id": "6624335e-b86f-40b1-9f30-b811e1caf6d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069051,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Closes the database connection. It does not call "
            ],
            [
              "commit()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " automatically. If "
            ],
            [
              "close()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called without first calling "
            ],
            [
              "commit()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (assuming you are not in autocommit mode) then all changes made will be lost."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Closes the database connection. It does not call "
          },
          {
            "Text": "commit()",
            "AttrFlags": 2
          },
          {
            "Text": " automatically. If "
          },
          {
            "Text": "close()",
            "AttrFlags": 2
          },
          {
            "Text": " is called without first calling "
          },
          {
            "Text": "commit()",
            "AttrFlags": 2
          },
          {
            "Text": " (assuming you are not in autocommit mode) then all changes made will be lost."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069051,
        "id": "15fea042-5dff-4593-8203-b1b5134ffa22",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069051,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "total_changes",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "total_changes",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069051,
        "id": "04e73aa3-7708-4457-9ee2-4526cf077e52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069051,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An attribute that logs the total number of rows modified, deleted or inserted since the database was opened."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An attribute that logs the total number of rows modified, deleted or inserted since the database was opened."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069052,
        "id": "345da57a-1f06-4dfc-b061-24a7dcc92b8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069052,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "execute",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "executemany",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "executescript",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "execute",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "executemany",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "executescript",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069052,
        "id": "60c0ea7a-407d-4009-b744-df96b45cde2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069052,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These functions perform the same way as those of the cursor object. This is a shortcut since calling these functions through the connection object results in the creation of an intermediate cursor object and calls the corresponding method of the cursor object"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These functions perform the same way as those of the cursor object. This is a shortcut since calling these functions through the connection object results in the creation of an intermediate cursor object and calls the corresponding method of the cursor object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069052,
        "id": "804d75f2-0e5f-4805-b8ac-ecf89cfbed7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069052,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "row_factory",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "row_factory",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069052,
        "id": "49f57b2e-65b5-43a1-a2f4-291959b278e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069052,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.\n\n   def dict_factory(cursor, row):\n       d = {}\n       for i, col in enumerate(cursor.description):\n           d[col[0]] = row[i]\n       return d\n\n   conn = sqlite3.connect(\":memory:\")\n   conn.row_factory = dict_factory"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.\n\n   def dict_factory(cursor, row):\n       d = {}\n       for i, col in enumerate(cursor.description):\n           d[col[0]] = row[i]\n       return d\n\n   conn = sqlite3.connect(\":memory:\")\n   conn.row_factory = dict_factory",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069053,
        "id": "e0baf3bc-22a3-4b63-86ba-b74c1d54ce3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069053,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important Functions of "
            ],
            [
              "Cursor",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important Functions of "
          },
          {
            "Text": "Cursor",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069053,
        "id": "dd5de1c1-0676-4564-a83f-239f8b08cc3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069053,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "execute(sql[, parameters])",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "execute(sql[, parameters])",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069053,
        "id": "6e96d1c3-ff3e-4604-aef9-124fe382cbff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069053,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Executes a _single_ SQL statement. The SQL statement may be parametrized (i. e. placeholders instead of SQL literals). \nThe sqlite3 module supports two kinds of placeholders: question marks `?` (“qmark style”) and named placeholders `:name` (“named style”).\n\n   import sqlite3\n   conn = sqlite3.connect(\":memory:\")\n   cur = conn.cursor()\n   cur.execute(\"create table people (name, age)\")\n\n   who = \"Sophia\"\n   age = 37\n   # This is the qmark style:\n   cur.execute(\"insert into people values (?, ?)\",\n               (who, age))\n\n   # And this is the named style:\n   cur.execute(\"select * from people where name=:who and age=:age\",\n               {\"who\": who, \"age\": age})  # the keys correspond to the placeholders in SQL\n\n   print(cur.fetchone())"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Executes a _single_ SQL statement. The SQL statement may be parametrized (i. e. placeholders instead of SQL literals). \nThe sqlite3 module supports two kinds of placeholders: question marks `?` (“qmark style”) and named placeholders `:name` (“named style”).\n\n   import sqlite3\n   conn = sqlite3.connect(\":memory:\")\n   cur = conn.cursor()\n   cur.execute(\"create table people (name, age)\")\n\n   who = \"Sophia\"\n   age = 37\n   # This is the qmark style:\n   cur.execute(\"insert into people values (?, ?)\",\n               (who, age))\n\n   # And this is the named style:\n   cur.execute(\"select * from people where name=:who and age=:age\",\n               {\"who\": who, \"age\": age})  # the keys correspond to the placeholders in SQL\n\n   print(cur.fetchone())",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069053,
        "id": "010be691-7ec8-46a3-a85f-a380119d4eb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069053,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Beware: don’t use %s for inserting strings into SQL commands as it can make your program vulnerable to an SQL injection attack (see https://stackoverflow.com/documentation/sql/3517/sql-injection )."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Beware: don’t use %s for inserting strings into SQL commands as it can make your program vulnerable to an SQL injection attack (see https://stackoverflow.com/documentation/sql/3517/sql-injection )."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069053,
        "id": "ad77099b-a960-4fa9-8964-ba79a7feedde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069053,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "executemany(sql, seq_of_parameters)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "executemany(sql, seq_of_parameters)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069053,
        "id": "49ba7528-3d28-451d-8a90-3f0affe113ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069053,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Executes an SQL command against all parameter sequences or mappings found in the sequence sql. The sqlite3 module also allows using an iterator yielding parameters instead of a sequence.\n\n   L = [(1, 'abcd', 'dfj', 300),    # A list of tuples to be inserted into the database\n        (2, 'cfgd', 'dyfj', 400),\n        (3, 'sdd', 'dfjh', 300.50)]                           \n\n   conn = sqlite3.connect(\"test1.db\")\n   conn.execute(\"create table if not exists book (id int, name text, author text, price real)\")\n   conn.executemany(\"insert into book values (?, ?, ?, ?)\", L)\n\n   for row in conn.execute(\"select * from book\"):\n       print(row)\n\nYou can also pass iterator objects as a parameter to executemany, and the function will iterate over the each tuple of values that the iterator returns. The iterator must return a tuple of values.\n\n   import sqlite3\n\n   class IterChars:\n       def __init__(self):\n           self.count = ord('a')\n\n       def __iter__(self):\n           return self\n\n       def __next__(self):            # (use next(self) for Python 2)\n           if self.count \u003e ord('z'):\n               raise StopIteration\n           self.count += 1\n           return (chr(self.count - 1),) \n\n   conn = sqlite3.connect(\"abc.db\")\n   cur = conn.cursor()\n   cur.execute(\"create table characters(c)\")\n\n   theIter = IterChars()\n   cur.executemany(\"insert into characters(c) values (?)\", theIter)\n\n   rows = cur.execute(\"select c from characters\")\n   for row in rows:\n       print(row[0]),"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Executes an SQL command against all parameter sequences or mappings found in the sequence sql. The sqlite3 module also allows using an iterator yielding parameters instead of a sequence.\n\n   L = [(1, 'abcd', 'dfj', 300),    # A list of tuples to be inserted into the database\n        (2, 'cfgd', 'dyfj', 400),\n        (3, 'sdd', 'dfjh', 300.50)]                           \n\n   conn = sqlite3.connect(\"test1.db\")\n   conn.execute(\"create table if not exists book (id int, name text, author text, price real)\")\n   conn.executemany(\"insert into book values (?, ?, ?, ?)\", L)\n\n   for row in conn.execute(\"select * from book\"):\n       print(row)\n\nYou can also pass iterator objects as a parameter to executemany, and the function will iterate over the each tuple of values that the iterator returns. The iterator must return a tuple of values.\n\n   import sqlite3\n\n   class IterChars:\n       def __init__(self):\n           self.count = ord('a')\n\n       def __iter__(self):\n           return self\n\n       def __next__(self):            # (use next(self) for Python 2)\n           if self.count \u003e ord('z'):\n               raise StopIteration\n           self.count += 1\n           return (chr(self.count - 1),) \n\n   conn = sqlite3.connect(\"abc.db\")\n   cur = conn.cursor()\n   cur.execute(\"create table characters(c)\")\n\n   theIter = IterChars()\n   cur.executemany(\"insert into characters(c) values (?)\", theIter)\n\n   rows = cur.execute(\"select c from characters\")\n   for row in rows:\n       print(row[0]),",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069054,
        "id": "761f7edb-0493-4f2c-b3fc-3bb93441ff72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069054,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "executescript(sql_script)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "executescript(sql_script)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069054,
        "id": "c3a71996-e179-44ab-9bf0-b0f540805d7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069054,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "This is a nonstandard convenience method for executing multiple SQL statements at once. It issues a `COMMIT` statement first, then executes the SQL script it gets as a parameter.\n\n`sql_script` can be an instance of `str` or `bytes`."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "This is a nonstandard convenience method for executing multiple SQL statements at once. It issues a `COMMIT` statement first, then executes the SQL script it gets as a parameter.\n\n`sql_script` can be an instance of `str` or `bytes`.",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069054,
        "id": "681a8be4-68f4-40ce-9f89-08afc4dfca9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069054,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import sqlite3\nconn = sqlite3.connect(\":memory:\")\ncur = conn.cursor()\ncur.executescript(\"\"\"\n     create table person(\n         firstname,\n         lastname,\n         age\n     );\n\n     create table book(\n         title,\n         author,\n         published\n     );\n\n     insert into book(title, author, published)\n     values (\n         'Dirk Gently''s Holistic Detective Agency',\n         'Douglas Adams',\n         1987\n     );\n     \"\"\")\n\nThe next set of functions are used in conjunction with `SELECT` statements in SQL. To retrieve data after executing a `SELECT` statement, you can either treat the cursor as an iterator, call the cursor’s `fetchone()` method to retrieve a single matching row, or call `fetchall()` to get a list of the matching rows.\n\nExample of the iterator form:\n\nimport sqlite3\nstocks = [('2006-01-05', 'BUY', 'RHAT', 100, 35.14),\n          ('2006-03-28', 'BUY', 'IBM', 1000, 45.0),\n          ('2006-04-06', 'SELL', 'IBM', 500, 53.0),\n          ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)]\nconn = sqlite3.connect(\":memory:\")\nconn.execute(\"create table stocks (date text, buysell text, symb text, amount int, price real)\")\nconn.executemany(\"insert into stocks values (?, ?, ?, ?, ?)\", stocks)    \ncur = conn.cursor()\n\nfor row in cur.execute('SELECT * FROM stocks ORDER BY price'):\n    print(row)\n\n# Output:\n# ('2006-01-05', 'BUY', 'RHAT', 100, 35.14)\n# ('2006-03-28', 'BUY', 'IBM', 1000, 45.0)\n# ('2006-04-06', 'SELL', 'IBM', 500, 53.0)\n# ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import sqlite3\nconn = sqlite3.connect(\":memory:\")\ncur = conn.cursor()\ncur.executescript(\"\"\"\n     create table person(\n         firstname,\n         lastname,\n         age\n     );\n\n     create table book(\n         title,\n         author,\n         published\n     );\n\n     insert into book(title, author, published)\n     values (\n         'Dirk Gently''s Holistic Detective Agency',\n         'Douglas Adams',\n         1987\n     );\n     \"\"\")\n\nThe next set of functions are used in conjunction with `SELECT` statements in SQL. To retrieve data after executing a `SELECT` statement, you can either treat the cursor as an iterator, call the cursor’s `fetchone()` method to retrieve a single matching row, or call `fetchall()` to get a list of the matching rows.\n\nExample of the iterator form:\n\nimport sqlite3\nstocks = [('2006-01-05', 'BUY', 'RHAT', 100, 35.14),\n          ('2006-03-28', 'BUY', 'IBM', 1000, 45.0),\n          ('2006-04-06', 'SELL', 'IBM', 500, 53.0),\n          ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)]\nconn = sqlite3.connect(\":memory:\")\nconn.execute(\"create table stocks (date text, buysell text, symb text, amount int, price real)\")\nconn.executemany(\"insert into stocks values (?, ?, ?, ?, ?)\", stocks)    \ncur = conn.cursor()\n\nfor row in cur.execute('SELECT * FROM stocks ORDER BY price'):\n    print(row)\n\n# Output:\n# ('2006-01-05', 'BUY', 'RHAT', 100, 35.14)\n# ('2006-03-28', 'BUY', 'IBM', 1000, 45.0)\n# ('2006-04-06', 'SELL', 'IBM', 500, 53.0)\n# ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069054,
        "id": "739d3d57-7a17-4bc3-9bb0-a10fe1a47523",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069054,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "fetchone()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "fetchone()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069054,
        "id": "be7ecfde-3faa-4fb7-b9d8-7f05f55d97a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069054,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Fetches the next row of a query result set, returning a single sequence, or None when no more data is available. \n \n   cur.execute('SELECT * FROM stocks ORDER BY price')\n   i = cur.fetchone()\n   while(i): \n       print(i)\n       i = cur.fetchone()\n\n   # Output:\n   # ('2006-01-05', 'BUY', 'RHAT', 100, 35.14)\n   # ('2006-03-28', 'BUY', 'IBM', 1000, 45.0)\n   # ('2006-04-06', 'SELL', 'IBM', 500, 53.0)\n   # ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Fetches the next row of a query result set, returning a single sequence, or None when no more data is available. \n \n   cur.execute('SELECT * FROM stocks ORDER BY price')\n   i = cur.fetchone()\n   while(i): \n       print(i)\n       i = cur.fetchone()\n\n   # Output:\n   # ('2006-01-05', 'BUY', 'RHAT', 100, 35.14)\n   # ('2006-03-28', 'BUY', 'IBM', 1000, 45.0)\n   # ('2006-04-06', 'SELL', 'IBM', 500, 53.0)\n   # ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "5b3ed35a-853e-4edf-85a9-5765f1bb46d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "fetchmany(size=cursor.arraysize)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "fetchmany(size=cursor.arraysize)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "07fcc5ff-4412-4c07-959e-080d3a6a2eb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fetches the next set of rows of a query result (specified by size), returning a list. If size is omitted, fetchmany returns a single row. An empty list is returned when no more rows are available."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fetches the next set of rows of a query result (specified by size), returning a list. If size is omitted, fetchmany returns a single row. An empty list is returned when no more rows are available."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "d2fee3ae-32d9-4d8b-9827-38922c6ad7f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "cur.execute('SELECT * FROM stocks ORDER BY price')\nprint(cur.fetchmany(2))\n\n# Output:    \n# [('2006-01-05', 'BUY', 'RHAT', 100, 35.14), ('2006-03-28', 'BUY', 'IBM', 1000, 45.0)]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "cur.execute('SELECT * FROM stocks ORDER BY price')\nprint(cur.fetchmany(2))\n\n# Output:    \n# [('2006-01-05', 'BUY', 'RHAT', 100, 35.14), ('2006-03-28', 'BUY', 'IBM', 1000, 45.0)]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "b6fa9e50-4834-4ff4-b276-75c8ed1bfb65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "fetchall()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "fetchall()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "07a509d2-e80c-40a3-bcdb-f6d079015ab4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fetches all (remaining) rows of a query result, returning a list."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fetches all (remaining) rows of a query result, returning a list."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "536c2637-8b04-4219-a0dc-906eb0123047",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "cur.execute('SELECT * FROM stocks ORDER BY price')\nprint(cur.fetchall())\n\n# Output:\n# [('2006-01-05', 'BUY', 'RHAT', 100, 35.14), ('2006-03-28', 'BUY', 'IBM', 1000, 45.0), ('2006-04-06', 'SELL', 'IBM', 500, 53.0), ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "cur.execute('SELECT * FROM stocks ORDER BY price')\nprint(cur.fetchall())\n\n# Output:\n# [('2006-01-05', 'BUY', 'RHAT', 100, 35.14), ('2006-03-28', 'BUY', 'IBM', 1000, 45.0), ('2006-04-06', 'SELL', 'IBM', 500, 53.0), ('2006-04-05', 'BUY', 'MSFT', 1000, 72.0)]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "5fa7e542-2899-4e28-a9a8-654f8114174e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SQLite and Python data types"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "SQLite and Python data types"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069055,
        "id": "86909a47-3bce-44da-919a-3fdfa6976cd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069055,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "SQLite natively supports the following types: NULL, INTEGER, REAL, TEXT, BLOB."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "SQLite natively supports the following types: NULL, INTEGER, REAL, TEXT, BLOB."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069056,
        "id": "4374d983-1d7a-4063-a4a5-8ad55c71b893",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069056,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is how the data types are converted when moving from SQL to Python or vice versa."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is how the data types are converted when moving from SQL to Python or vice versa."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390069056,
        "id": "3637eb41-2187-47a4-a69f-5b7ddab5dcad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390069056,
        "parent_id": "d90f13b8-9282-4899-9465-65d5ce8cd65e",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "None     \u003c-\u003e     NULL\nint      \u003c-\u003e     INTEGER/INT\nfloat    \u003c-\u003e     REAL/FLOAT\nstr      \u003c-\u003e     TEXT/VARCHAR(n)\nbytes    \u003c-\u003e     BLOB"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "None     \u003c-\u003e     NULL\nint      \u003c-\u003e     INTEGER/INT\nfloat    \u003c-\u003e     REAL/FLOAT\nstr      \u003c-\u003e     TEXT/VARCHAR(n)\nbytes    \u003c-\u003e     BLOB",
        "code_language": "Plain Text"
      }
    ],
    "title": "SQLite"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}