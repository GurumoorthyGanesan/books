{
  "ID": "351ed672-c1ca-45d9-ba36-95962c164bca",
  "Root": {
    "alive": true,
    "content": [
      "2008aa72-375f-4948-9c24-9ecc40b1f13d",
      "84f8f72a-7cdb-402f-8f60-52079e99a314",
      "02bddeed-2b80-4f9e-ba5e-635867be5f88",
      "427e8cde-3105-43de-b4f1-c32bcb18feab",
      "8c5ce248-6e08-45ac-a424-fe84840555b4",
      "6fb1d89e-06bf-4a95-a9c4-20b7de899411"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550303360724,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "351ed672-c1ca-45d9-ba36-95962c164bca",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550303460000,
    "parent_id": "5101a914-c687-4402-85e8-f60ea14e09d2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Nonlocal Variables"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303360722,
        "id": "2008aa72-375f-4948-9c24-9ecc40b1f13d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303360722,
        "parent_id": "351ed672-c1ca-45d9-ba36-95962c164bca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python 3 added a new keyword called "
            ],
            [
              "nonlocal",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". The nonlocal keyword adds a scope override to the inner scope. You can read all about it in "
            ],
            [
              "PEP 3104",
              [
                [
                  "a",
                  "https://www.python.org/dev/peps/pep-3104/"
                ]
              ]
            ],
            [
              ". This is best illustrated with a couple of code examples. One of the most common examples is to create function that can increment:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python 3 added a new keyword called "
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 1
          },
          {
            "Text": ". The nonlocal keyword adds a scope override to the inner scope. You can read all about it in "
          },
          {
            "Text": "PEP 3104",
            "Link": "https://www.python.org/dev/peps/pep-3104/"
          },
          {
            "Text": ". This is best illustrated with a couple of code examples. One of the most common examples is to create function that can increment:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303360723,
        "id": "84f8f72a-7cdb-402f-8f60-52079e99a314",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303460000,
        "parent_id": "351ed672-c1ca-45d9-ba36-95962c164bca",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def counter():\n    num = 0\n    def incrementer():\n        num += 1\n        return num\n    return incrementer"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def counter():\n    num = 0\n    def incrementer():\n        num += 1\n        return num\n    return incrementer",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303360724,
        "id": "02bddeed-2b80-4f9e-ba5e-635867be5f88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303360724,
        "parent_id": "351ed672-c1ca-45d9-ba36-95962c164bca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you try running this code, you will receive an "
            ],
            [
              "UnboundLocalError",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " because the "
            ],
            [
              "num",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " variable is referenced before it is assigned in the innermost function. Let’s add nonlocal to the mix:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you try running this code, you will receive an "
          },
          {
            "Text": "UnboundLocalError",
            "AttrFlags": 1
          },
          {
            "Text": " because the "
          },
          {
            "Text": "num",
            "AttrFlags": 1
          },
          {
            "Text": " variable is referenced before it is assigned in the innermost function. Let’s add nonlocal to the mix:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303360724,
        "id": "427e8cde-3105-43de-b4f1-c32bcb18feab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303460000,
        "parent_id": "351ed672-c1ca-45d9-ba36-95962c164bca",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def counter():\n    num = 0\n    def incrementer():\n        nonlocal num\n        num += 1\n        return num\n    return incrementer\n\nc = counter()\nc() # = 1\nc() # = 2\nc() # = 3"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def counter():\n    num = 0\n    def incrementer():\n        nonlocal num\n        num += 1\n        return num\n    return incrementer\n\nc = counter()\nc() # = 1\nc() # = 2\nc() # = 3",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303360724,
        "id": "8c5ce248-6e08-45ac-a424-fe84840555b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303360724,
        "parent_id": "351ed672-c1ca-45d9-ba36-95962c164bca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Basically "
            ],
            [
              "nonlocal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will allow you to assign to variables in an outer scope, but not a global scope. So you can’t use "
            ],
            [
              "nonlocal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in our "
            ],
            [
              "counter",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function because then it would try to assign to a global scope. Give it a try and you will quickly get a "
            ],
            [
              "SyntaxError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Instead you must use "
            ],
            [
              "nonlocal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a nested function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Basically "
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 2
          },
          {
            "Text": " will allow you to assign to variables in an outer scope, but not a global scope. So you can’t use "
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 2
          },
          {
            "Text": " in our "
          },
          {
            "Text": "counter",
            "AttrFlags": 2
          },
          {
            "Text": " function because then it would try to assign to a global scope. Give it a try and you will quickly get a "
          },
          {
            "Text": "SyntaxError",
            "AttrFlags": 2
          },
          {
            "Text": ". Instead you must use "
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 2
          },
          {
            "Text": " in a nested function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303360724,
        "id": "6fb1d89e-06bf-4a95-a9c4-20b7de899411",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303360724,
        "parent_id": "351ed672-c1ca-45d9-ba36-95962c164bca",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(Note that the functionality presented here is better implemented using generators.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(Note that the functionality presented here is better implemented using generators.)"
          }
        ]
      }
    ],
    "title": "Nonlocal Variables",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}