{
  "ID": "9de369f1-f7c5-41c1-a697-552256225ce6",
  "Root": {
    "alive": true,
    "content": [
      "48c26e0f-bd4b-4173-8163-babbb0df6ea6",
      "b31d9d9f-589a-4e73-b5f5-a54704694a11",
      "de37ed99-8b9a-4559-bec4-b9a57880de0d",
      "9c4df297-32f6-4918-b057-10a91a2f0432",
      "b8629d38-61cc-4961-b820-6822cb449f2d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346065101,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9de369f1-f7c5-41c1-a697-552256225ce6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550346120000,
    "parent_id": "ce5582e1-265e-4411-b5ad-310114bbe696",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Communicating between threads"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346065098,
        "id": "48c26e0f-bd4b-4173-8163-babbb0df6ea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346065098,
        "parent_id": "9de369f1-f7c5-41c1-a697-552256225ce6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are multiple threads in your code and you need to safely communicate between them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are multiple threads in your code and you need to safely communicate between them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346065101,
        "id": "b31d9d9f-589a-4e73-b5f5-a54704694a11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346065101,
        "parent_id": "9de369f1-f7c5-41c1-a697-552256225ce6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use a "
            ],
            [
              "Queue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from the "
            ],
            [
              "queue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " library."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use a "
          },
          {
            "Text": "Queue",
            "AttrFlags": 2
          },
          {
            "Text": " from the "
          },
          {
            "Text": "queue",
            "AttrFlags": 2
          },
          {
            "Text": " library."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346065101,
        "id": "de37ed99-8b9a-4559-bec4-b9a57880de0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346120000,
        "parent_id": "9de369f1-f7c5-41c1-a697-552256225ce6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from queue import Queue\nfrom threading import Thread\n\n# create a data producer \ndef producer(output_queue):\n    while True:\n        data = data_computation()\n        \n        output_queue.put(data)\n\n# create a consumer\ndef consumer(input_queue):\n    while True:\n        # retrieve data (blocking)\n        data = input_queue.get()\n\n        # do something with the data\n\n        # indicate data has been consumed\n        input_queue.task_done()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from queue import Queue\nfrom threading import Thread\n\n# create a data producer \ndef producer(output_queue):\n    while True:\n        data = data_computation()\n        \n        output_queue.put(data)\n\n# create a consumer\ndef consumer(input_queue):\n    while True:\n        # retrieve data (blocking)\n        data = input_queue.get()\n\n        # do something with the data\n\n        # indicate data has been consumed\n        input_queue.task_done()",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346065101,
        "id": "9c4df297-32f6-4918-b057-10a91a2f0432",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346065101,
        "parent_id": "9de369f1-f7c5-41c1-a697-552256225ce6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating producer and consumer threads with a shared queue"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating producer and consumer threads with a shared queue"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346065101,
        "id": "b8629d38-61cc-4961-b820-6822cb449f2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346120000,
        "parent_id": "9de369f1-f7c5-41c1-a697-552256225ce6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "q = Queue()\nt1 = Thread(target=consumer, args=(q,))\nt2 = Thread(target=producer, args=(q,))\nt1.start()\nt2.start()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "q = Queue()\nt1 = Thread(target=consumer, args=(q,))\nt2 = Thread(target=producer, args=(q,))\nt1.start()\nt2.start()",
        "code_language": "Python"
      }
    ],
    "title": "Communicating between threads",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}