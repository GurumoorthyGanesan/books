{
  "ID": "30de055d-658d-415b-bc43-344915b799d8",
  "Root": {
    "alive": true,
    "content": [
      "252c6710-173d-4ffb-8511-96895b01fb79",
      "bacaac8f-b1ab-43ab-852d-bfdf8addd553",
      "11ea02ba-19d1-4a85-8d66-e911aa75d982",
      "4a618b36-4bbe-4a2d-87c1-423f18782563",
      "47663e61-11b6-4ea2-ac96-06abfe96926d",
      "49516956-3f42-4320-a78c-78d73e6e6e4e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550391866013,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "30de055d-658d-415b-bc43-344915b799d8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550474640000,
    "parent_id": "b488e901-dd9d-4c29-9888-3b6571294f72",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Strategy Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391866009,
        "id": "252c6710-173d-4ffb-8511-96895b01fb79",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391866009,
        "parent_id": "30de055d-658d-415b-bc43-344915b799d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This design pattern is called Strategy Pattern. It is used to define a family of algorithms, encapsulates each one, and make them interchangeable. Strategy design pattern lets an algorithm vary independently from clients that use it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This design pattern is called Strategy Pattern. It is used to define a family of algorithms, encapsulates each one, and make them interchangeable. Strategy design pattern lets an algorithm vary independently from clients that use it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391866012,
        "id": "bacaac8f-b1ab-43ab-852d-bfdf8addd553",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391866012,
        "parent_id": "30de055d-658d-415b-bc43-344915b799d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, animals can “walk” in many different ways. Walking could be considered a strategy that is implemented by different types of animals:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, animals can “walk” in many different ways. Walking could be considered a strategy that is implemented by different types of animals:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391866012,
        "id": "11ea02ba-19d1-4a85-8d66-e911aa75d982",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550474640000,
        "parent_id": "30de055d-658d-415b-bc43-344915b799d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from types import MethodType\n\n\nclass Animal(object):\n    \n    def __init__(self, *args, **kwargs):\n        self.name = kwargs.pop('name', None) or 'Animal'\n        if kwargs.get('walk', None):\n            self.walk = MethodType(kwargs.pop('walk'), self)\n\n    def walk(self):\n        \"\"\"\n        Cause animal instance to walk\n        \n        Walking funcionallity is a strategy, and is intended to\n        be implemented separately by different types of animals.\n        \"\"\"\n        message = '{} should implement a walk method'.format(\n            self.__class__.__name__)\n        raise NotImplementedError(message)\n\n\n# Here are some different walking algorithms that can be used with Animal\ndef snake_walk(self):\n    print('I am slithering side to side because I am a {}.'.format(self.name))\n\ndef four_legged_animal_walk(self):\n    print('I am using all four of my legs to walk because I am a(n) {}.'.format(\n        self.name))\n\ndef two_legged_animal_walk(self):\n    print('I am standing up on my two legs to walk because I am a {}.'.format(\n        self.name))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from types import MethodType\n\n\nclass Animal(object):\n    \n    def __init__(self, *args, **kwargs):\n        self.name = kwargs.pop('name', None) or 'Animal'\n        if kwargs.get('walk', None):\n            self.walk = MethodType(kwargs.pop('walk'), self)\n\n    def walk(self):\n        \"\"\"\n        Cause animal instance to walk\n        \n        Walking funcionallity is a strategy, and is intended to\n        be implemented separately by different types of animals.\n        \"\"\"\n        message = '{} should implement a walk method'.format(\n            self.__class__.__name__)\n        raise NotImplementedError(message)\n\n\n# Here are some different walking algorithms that can be used with Animal\ndef snake_walk(self):\n    print('I am slithering side to side because I am a {}.'.format(self.name))\n\ndef four_legged_animal_walk(self):\n    print('I am using all four of my legs to walk because I am a(n) {}.'.format(\n        self.name))\n\ndef two_legged_animal_walk(self):\n    print('I am standing up on my two legs to walk because I am a {}.'.format(\n        self.name))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391866012,
        "id": "4a618b36-4bbe-4a2d-87c1-423f18782563",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391866012,
        "parent_id": "30de055d-658d-415b-bc43-344915b799d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Running this example would produce the following output:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Running this example would produce the following output:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391866012,
        "id": "47663e61-11b6-4ea2-ac96-06abfe96926d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391866012,
        "parent_id": "30de055d-658d-415b-bc43-344915b799d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "generic_animal = Animal()\nking_cobra = Animal(name='King Cobra', walk=snake_walk)\nelephant = Animal(name='Elephant', walk=four_legged_animal_walk)\nkangaroo = Animal(name='Kangaroo', walk=two_legged_animal_walk)\n\nkangaroo.walk()\nelephant.walk()\nking_cobra.walk()\n# This one will Raise a NotImplementedError to let the programmer\n# know that the walk method is intended to be used as a strategy.\ngeneric_animal.walk()\n\n    # OUTPUT:\n    #\n    # I am standing up on my two legs to walk because I am a Kangaroo.\n    # I am using all four of my legs to walk because I am a(n) Elephant.\n    # I am slithering side to side because I am a King Cobra.\n    # Traceback (most recent call last):\n    #   File \"./strategy.py\", line 56, in \u003cmodule\u003e\n    #     generic_animal.walk()\n    #   File \"./strategy.py\", line 30, in walk\n    #     raise NotImplementedError(message)\n    # NotImplementedError: Animal should implement a walk method"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "generic_animal = Animal()\nking_cobra = Animal(name='King Cobra', walk=snake_walk)\nelephant = Animal(name='Elephant', walk=four_legged_animal_walk)\nkangaroo = Animal(name='Kangaroo', walk=two_legged_animal_walk)\n\nkangaroo.walk()\nelephant.walk()\nking_cobra.walk()\n# This one will Raise a NotImplementedError to let the programmer\n# know that the walk method is intended to be used as a strategy.\ngeneric_animal.walk()\n\n    # OUTPUT:\n    #\n    # I am standing up on my two legs to walk because I am a Kangaroo.\n    # I am using all four of my legs to walk because I am a(n) Elephant.\n    # I am slithering side to side because I am a King Cobra.\n    # Traceback (most recent call last):\n    #   File \"./strategy.py\", line 56, in \u003cmodule\u003e\n    #     generic_animal.walk()\n    #   File \"./strategy.py\", line 30, in walk\n    #     raise NotImplementedError(message)\n    # NotImplementedError: Animal should implement a walk method",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391866012,
        "id": "49516956-3f42-4320-a78c-78d73e6e6e4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391866012,
        "parent_id": "30de055d-658d-415b-bc43-344915b799d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that in languages like C++ or Java, this pattern is implemented using an abstract class or an interface to define a a strategy. In Python it makes more sense to just define some functions externally that can be added dynamically to a class using "
            ],
            [
              "types.MethodType",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that in languages like C++ or Java, this pattern is implemented using an abstract class or an interface to define a a strategy. In Python it makes more sense to just define some functions externally that can be added dynamically to a class using "
          },
          {
            "Text": "types.MethodType",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Strategy Pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}