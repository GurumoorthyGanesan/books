{
  "ID": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
  "Root": {
    "alive": true,
    "content": [
      "ab1d5dae-d889-4786-b30b-5bfa8c2b7991",
      "e0c316d5-0b3e-4f31-9d10-66a7c50478c6",
      "4f1e793b-e8ae-4371-8375-f33a5657a305",
      "c47c983b-1c01-4b45-a03e-fb4abcb99fae",
      "e962d879-e83a-40fa-9cbb-0910d0b8169d",
      "f348bc18-d190-41c1-9c2c-3954977f0f25",
      "5ed6061a-bbe0-4486-bc9c-0e5fc34d6397",
      "7e70fe02-e498-47f7-b342-39129c1aeefc",
      "04107830-f430-4f42-95f2-5143c364e71e",
      "080decc0-8b66-4a50-9b64-04896fe6d0ca",
      "49c60f85-a9d3-42e8-879c-9778a6369382",
      "4cd6dbad-4e3d-4a71-8f4e-6cf47203d431",
      "9718b0ef-bbfe-4762-a533-6d12f21bb00e",
      "6ae9e3fe-543d-4bc9-ba61-c30ddccd49f2",
      "3fb28f28-90bd-49e8-8d8a-995580912c76",
      "494f408f-5e70-4555-96df-2872a6fa28c4",
      "163e30d9-2596-4e44-b9fc-3ee571aeb26a",
      "e4f7c229-8531-49ca-af88-fdbf287e72aa",
      "8a637439-9a59-4a8f-9001-9b9ccefd1236",
      "58cb62aa-3e18-4893-a5d5-489d604cc29f",
      "4144e5d6-4857-439d-987a-67c04d0e352b",
      "0197b960-d039-4bed-8602-a56b95d23772",
      "be9c219d-280c-415d-846a-0f1b59895c48",
      "5cce8a69-63fa-4daf-824b-e2f3b6ded9e7",
      "ef025046-e2a8-4a7d-b18f-76752de483bc",
      "d951f46f-aed3-488a-b322-e6b6e18e7598",
      "7cec6467-e32d-436d-9f2b-86fc75bb9d88",
      "20f87bae-3e59-4041-b0ea-3334467d5a7a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550307134743,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550307240000,
    "parent_id": "a0d16770-ed43-43f6-8843-dfd332e9a62a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Introduction"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134735,
        "id": "ab1d5dae-d889-4786-b30b-5bfa8c2b7991",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134735,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generator expressions",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are similar to list, dictionary and set comprehensions, but are enclosed with parentheses. The parentheses do not have to be present when they are used as the sole argument for a function call."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generator expressions",
            "AttrFlags": 1
          },
          {
            "Text": " are similar to list, dictionary and set comprehensions, but are enclosed with parentheses. The parentheses do not have to be present when they are used as the sole argument for a function call."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134737,
        "id": "e0c316d5-0b3e-4f31-9d10-66a7c50478c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307180000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "expression = (x**2 for x in range(10))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "expression = (x**2 for x in range(10))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134737,
        "id": "4f1e793b-e8ae-4371-8375-f33a5657a305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134737,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example generates the 10 first perfect squares, including 0 (in which x = 0)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example generates the 10 first perfect squares, including 0 (in which x = 0)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134739,
        "id": "c47c983b-1c01-4b45-a03e-fb4abcb99fae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134739,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generator functions",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " are similar to regular functions, except that they have one or more "
            ],
            [
              "yield",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/reference/simple_stmts.html#yield"
                ]
              ]
            ],
            [
              " statements in their body. Such functions cannot "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " any values (however empty "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s are allowed if you want to stop the generator early)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generator functions",
            "AttrFlags": 1
          },
          {
            "Text": " are similar to regular functions, except that they have one or more "
          },
          {
            "Text": "yield",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/reference/simple_stmts.html#yield"
          },
          {
            "Text": " statements in their body. Such functions cannot "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " any values (however empty "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": "s are allowed if you want to stop the generator early)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134739,
        "id": "e962d879-e83a-40fa-9cbb-0910d0b8169d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307180000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def function():\n    for x in range(10):\n        yield x**2"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def function():\n    for x in range(10):\n        yield x**2",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134739,
        "id": "f348bc18-d190-41c1-9c2c-3954977f0f25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134739,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This generator function is equivalent to the previous generator expression, it outputs the same."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This generator function is equivalent to the previous generator expression, it outputs the same."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "5ed6061a-bbe0-4486-bc9c-0e5fc34d6397",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134740,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": all generator expressions have their own "
            ],
            [
              "equivalent",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " functions, but not vice versa."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 1
          },
          {
            "Text": ": all generator expressions have their own "
          },
          {
            "Text": "equivalent",
            "AttrFlags": 4
          },
          {
            "Text": " functions, but not vice versa."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "7e70fe02-e498-47f7-b342-39129c1aeefc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134740,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A generator expression can be used without parentheses if both parentheses would be repeated otherwise:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A generator expression can be used without parentheses if both parentheses would be repeated otherwise:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "04107830-f430-4f42-95f2-5143c364e71e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307180000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "sum(i for i in range(10) if i % 2 == 0)   #Output: 20\nany(x = 0 for x in foo)                   #Output: True or False depending on foo\ntype(a \u003e b for a in foo if a % 2 == 1)    #Output: \u003cclass 'generator'\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "sum(i for i in range(10) if i % 2 == 0)   #Output: 20\nany(x = 0 for x in foo)                   #Output: True or False depending on foo\ntype(a \u003e b for a in foo if a % 2 == 1)    #Output: \u003cclass 'generator'\u003e",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "080decc0-8b66-4a50-9b64-04896fe6d0ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134740,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "49c60f85-a9d3-42e8-879c-9778a6369382",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307180000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "sum((i for i in range(10) if i % 2 == 0))\nany((x = 0 for x in foo))\ntype((a \u003e b for a in foo if a % 2 == 1))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "sum((i for i in range(10) if i % 2 == 0))\nany((x = 0 for x in foo))\ntype((a \u003e b for a in foo if a % 2 == 1))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "4cd6dbad-4e3d-4a71-8f4e-6cf47203d431",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134740,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But not:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But not:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "9718b0ef-bbfe-4762-a533-6d12f21bb00e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307180000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "fooFunction(i for i in range(10) if i % 2 == 0,foo,bar)\nreturn x = 0 for x in foo\nbarFunction(baz, a \u003e b for a in foo if a % 2 == 1)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "fooFunction(i for i in range(10) if i % 2 == 0,foo,bar)\nreturn x = 0 for x in foo\nbarFunction(baz, a \u003e b for a in foo if a % 2 == 1)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "6ae9e3fe-543d-4bc9-ba61-c30ddccd49f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134740,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calling a generator function produces a "
            ],
            [
              "generator object",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", which can later be iterated over. Unlike other types of iterators, generator objects may only be traversed once."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calling a generator function produces a "
          },
          {
            "Text": "generator object",
            "AttrFlags": 1
          },
          {
            "Text": ", which can later be iterated over. Unlike other types of iterators, generator objects may only be traversed once."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134740,
        "id": "3fb28f28-90bd-49e8-8d8a-995580912c76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307240000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "g1 = function()\nprint(g1)  # Out: \u003cgenerator object function at 0x1012e1888\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "g1 = function()\nprint(g1)  # Out: \u003cgenerator object function at 0x1012e1888\u003e",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134741,
        "id": "494f408f-5e70-4555-96df-2872a6fa28c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134741,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice that a generator’s body is "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " immediately executed: when you call "
            ],
            [
              "function()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the example above, it immediately returns a generator object, without executing even the first print statement. This allows generators to consume less memory than functions that return a list, and it allows creating generators that produce infinitely long sequences."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice that a generator’s body is "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " immediately executed: when you call "
          },
          {
            "Text": "function()",
            "AttrFlags": 2
          },
          {
            "Text": " in the example above, it immediately returns a generator object, without executing even the first print statement. This allows generators to consume less memory than functions that return a list, and it allows creating generators that produce infinitely long sequences."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134741,
        "id": "163e30d9-2596-4e44-b9fc-3ee571aeb26a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134741,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this reason, generators are often used in data science, and other contexts involving large amounts of data. Another advantage is that other code can immediately use the values yielded by a generator, without waiting for the complete sequence to be produced."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this reason, generators are often used in data science, and other contexts involving large amounts of data. Another advantage is that other code can immediately use the values yielded by a generator, without waiting for the complete sequence to be produced."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134741,
        "id": "e4f7c229-8531-49ca-af88-fdbf287e72aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134741,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, if you need to use the values produced by a generator more than once, and if generating them costs more than storing, it may be better to store the yielded values as a "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " than to re-generate the sequence. See ‘Resetting a generator’ below for more details."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, if you need to use the values produced by a generator more than once, and if generating them costs more than storing, it may be better to store the yielded values as a "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " than to re-generate the sequence. See ‘Resetting a generator’ below for more details."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134741,
        "id": "8a637439-9a59-4a8f-9001-9b9ccefd1236",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134741,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Typically a generator object is used in a loop, or in any function that requires an iterable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Typically a generator object is used in a loop, or in any function that requires an iterable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134741,
        "id": "58cb62aa-3e18-4893-a5d5-489d604cc29f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307240000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "for x in g1:\n    print(\"Received\", x)\n\n# Output:\n# Received 0\n# Received 1\n# Received 4\n# Received 9\n# Received 16\n# Received 25\n# Received 36\n# Received 49\n# Received 64\n# Received 81\n\narr1 = list(g1)\n# arr1 = [], because the loop above already consumed all the values.\ng2 = function()\narr2 = list(g2)  # arr2 = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "for x in g1:\n    print(\"Received\", x)\n\n# Output:\n# Received 0\n# Received 1\n# Received 4\n# Received 9\n# Received 16\n# Received 25\n# Received 36\n# Received 49\n# Received 64\n# Received 81\n\narr1 = list(g1)\n# arr1 = [], because the loop above already consumed all the values.\ng2 = function()\narr2 = list(g2)  # arr2 = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134742,
        "id": "4144e5d6-4857-439d-987a-67c04d0e352b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134742,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since generator objects are iterators, one can iterate over them manually using the "
            ],
            [
              "next()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/functions.html#next"
                ]
              ]
            ],
            [
              " function. Doing so will return the yielded values one by one on each subsequent invocation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since generator objects are iterators, one can iterate over them manually using the "
          },
          {
            "Text": "next()",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/functions.html#next"
          },
          {
            "Text": " function. Doing so will return the yielded values one by one on each subsequent invocation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134742,
        "id": "0197b960-d039-4bed-8602-a56b95d23772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134742,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Under the hood, each time you call "
            ],
            [
              "next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on a generator, Python executes statements in the body of the generator function until it hits the next "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement. At this point it returns the argument of the "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " command, and remembers the point where that happened. Calling "
            ],
            [
              "next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " once again will resume execution from that point and continue until the next "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Under the hood, each time you call "
          },
          {
            "Text": "next()",
            "AttrFlags": 2
          },
          {
            "Text": " on a generator, Python executes statements in the body of the generator function until it hits the next "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " statement. At this point it returns the argument of the "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " command, and remembers the point where that happened. Calling "
          },
          {
            "Text": "next()",
            "AttrFlags": 2
          },
          {
            "Text": " once again will resume execution from that point and continue until the next "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134742,
        "id": "be9c219d-280c-415d-846a-0f1b59895c48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134742,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If Python reaches the end of the generator function without encountering any more "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s, a "
            ],
            [
              "StopIteration",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exception is raised (this is normal, all iterators behave in the same way)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If Python reaches the end of the generator function without encountering any more "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": "s, a "
          },
          {
            "Text": "StopIteration",
            "AttrFlags": 2
          },
          {
            "Text": " exception is raised (this is normal, all iterators behave in the same way)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134742,
        "id": "5cce8a69-63fa-4daf-824b-e2f3b6ded9e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307240000,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "g3 = function()\na = next(g3)  # a becomes 0\nb = next(g3)  # b becomes 1\nc = next(g3)  # c becomes 2\n...\nj = next(g3)  # Raises StopIteration, j remains undefined"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "g3 = function()\na = next(g3)  # a becomes 0\nb = next(g3)  # b becomes 1\nc = next(g3)  # c becomes 2\n...\nj = next(g3)  # Raises StopIteration, j remains undefined",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134743,
        "id": "ef025046-e2a8-4a7d-b18f-76752de483bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134743,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that in Python 2 generator objects had "
            ],
            [
              ".next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods that could be used to iterate through the yielded values manually. In Python 3 this method was replaced with the "
            ],
            [
              ".__next__()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " standard for all iterators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that in Python 2 generator objects had "
          },
          {
            "Text": ".next()",
            "AttrFlags": 2
          },
          {
            "Text": " methods that could be used to iterate through the yielded values manually. In Python 3 this method was replaced with the "
          },
          {
            "Text": ".__next__()",
            "AttrFlags": 2
          },
          {
            "Text": " standard for all iterators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134743,
        "id": "d951f46f-aed3-488a-b322-e6b6e18e7598",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134743,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Resetting a generator",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Resetting a generator",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134743,
        "id": "7cec6467-e32d-436d-9f2b-86fc75bb9d88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134743,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remember that you can only iterate through the objects generated by a generator "
            ],
            [
              "once",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". If you have already iterated through the objects in a script, any further attempt do so will yield "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remember that you can only iterate through the objects generated by a generator "
          },
          {
            "Text": "once",
            "AttrFlags": 4
          },
          {
            "Text": ". If you have already iterated through the objects in a script, any further attempt do so will yield "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307134743,
        "id": "20f87bae-3e59-4041-b0ea-3334467d5a7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307134743,
        "parent_id": "05480380-e6dd-4a24-bff0-2dca48daf8bb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you need to use the objects generated by a generator more than once, you can either define the generator function again and use it a second time, or, alternatively, you can store the output of the generator function in a list on first use. Re-defining the generator function will be a good option if you are dealing with large volumes of data, and storing a list of all data items would take up a lot of disc space. Conversely, if it is costly to generate the items initially, you may prefer to store the generated items in a list so that you can re-use them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you need to use the objects generated by a generator more than once, you can either define the generator function again and use it a second time, or, alternatively, you can store the output of the generator function in a list on first use. Re-defining the generator function will be a good option if you are dealing with large volumes of data, and storing a list of all data items would take up a lot of disc space. Conversely, if it is costly to generate the items initially, you may prefer to store the generated items in a list so that you can re-use them."
          }
        ]
      }
    ],
    "title": "Introduction",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}