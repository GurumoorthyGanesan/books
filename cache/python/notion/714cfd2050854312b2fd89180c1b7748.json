{
  "ID": "714cfd20-5085-4312-b2fd-89180c1b7748",
  "Root": {
    "alive": true,
    "content": [
      "560366cc-b60e-4065-8ba1-d1d3821cfece",
      "cd5c09bb-d1ac-4af3-adef-ae4ceee3dce0",
      "cb5cd690-ed0a-423e-8722-58dc36db085f",
      "22a16f30-d2f0-4a76-b786-5039f4fd07e8",
      "b7cd1f89-02ed-49f5-8e7b-a51ebd07a279",
      "032b262c-9c9e-4d08-96d2-75c586cc30c2",
      "e1a084db-93c2-47a0-81c4-6fb881bd1b12",
      "a068e661-f9a0-47f0-97b7-2d52c0a3882b",
      "11839edb-7095-495a-ad88-6d0829d9589f",
      "39b5700b-9ab2-4466-96be-af40f2680fe7",
      "3dcdbba7-36eb-4da3-abab-ffc87beddf8d",
      "ca090a26-7777-4b81-bddc-20861511457d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550261085401,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "714cfd20-5085-4312-b2fd-89180c1b7748",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550262240000,
    "parent_id": "e895cb09-a4b0-4965-a04d-695253fcf7c6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Argument passing and mutability"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085396,
        "id": "560366cc-b60e-4065-8ba1-d1d3821cfece",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085396,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, some terminology:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, some terminology:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085399,
        "id": "cd5c09bb-d1ac-4af3-adef-ae4ceee3dce0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085399,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "argument (",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "actual",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " parameter):",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the actual variable being passed to a function;"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "argument (",
            "AttrFlags": 1
          },
          {
            "Text": "actual",
            "AttrFlags": 5
          },
          {
            "Text": " parameter):",
            "AttrFlags": 1
          },
          {
            "Text": " the actual variable being passed to a function;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085399,
        "id": "cb5cd690-ed0a-423e-8722-58dc36db085f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085399,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "parameter (",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "formal",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " parameter):",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the receiving variable that is used in a function."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "parameter (",
            "AttrFlags": 1
          },
          {
            "Text": "formal",
            "AttrFlags": 5
          },
          {
            "Text": " parameter):",
            "AttrFlags": 1
          },
          {
            "Text": " the receiving variable that is used in a function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085399,
        "id": "22a16f30-d2f0-4a76-b786-5039f4fd07e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085399,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python, arguments are passed by ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "assignment",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " (as opposed to other languages, where arguments can be passed by value/reference/pointer)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python, arguments are passed by ",
            "AttrFlags": 1
          },
          {
            "Text": "assignment",
            "AttrFlags": 5
          },
          {
            "Text": " (as opposed to other languages, where arguments can be passed by value/reference/pointer)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085400,
        "id": "b7cd1f89-02ed-49f5-8e7b-a51ebd07a279",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262240000,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mutating a parameter will mutate the argument (if the argument’s type is mutable):"
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Mutating a parameter will mutate the argument (if the argument’s type is mutable):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085400,
        "id": "032b262c-9c9e-4d08-96d2-75c586cc30c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262240000,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def foo(x):        # here x is the parameter\n    x[0] = 9       # This mutates the list labelled by both x and y\n    print(x)\n\ny = [4, 5, 6]\nfoo(y)             # call foo with y as argument\n# Out: [9, 5, 6]   # list labelled by x has been mutated\nprint(y)           \n# Out: [9, 5, 6]   # list labelled by y has been mutated too"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def foo(x):        # here x is the parameter\n    x[0] = 9       # This mutates the list labelled by both x and y\n    print(x)\n\ny = [4, 5, 6]\nfoo(y)             # call foo with y as argument\n# Out: [9, 5, 6]   # list labelled by x has been mutated\nprint(y)           \n# Out: [9, 5, 6]   # list labelled by y has been mutated too",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085400,
        "id": "e1a084db-93c2-47a0-81c4-6fb881bd1b12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262240000,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reassigning the parameter won’t reassign the argument:"
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Reassigning the parameter won’t reassign the argument:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085400,
        "id": "a068e661-f9a0-47f0-97b7-2d52c0a3882b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262240000,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def foo(x):        # here x is the parameter, when we call foo(y) we assign y to x\n    x[0] = 9       # This mutates the list labelled by both x and y\n    x = [1, 2, 3]  # x is now labeling a different list (y is unaffected)\n    x[2] = 8       # This mutates x's list, not y's list\n  \ny = [4, 5, 6]      # y is the argument, x is the parameter\nfoo(y)             # Pretend that we wrote \"x = y\", then go to line 1\ny\n# Out: [9, 5, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def foo(x):        # here x is the parameter, when we call foo(y) we assign y to x\n    x[0] = 9       # This mutates the list labelled by both x and y\n    x = [1, 2, 3]  # x is now labeling a different list (y is unaffected)\n    x[2] = 8       # This mutates x's list, not y's list\n  \ny = [4, 5, 6]      # y is the argument, x is the parameter\nfoo(y)             # Pretend that we wrote \"x = y\", then go to line 1\ny\n# Out: [9, 5, 6]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085400,
        "id": "11839edb-7095-495a-ad88-6d0829d9589f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085400,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python, we don’t really assign values to variables, instead we ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "bind",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              " (i.e. assign, attach) variables (considered as ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "names",
              [
                [
                  "b"
                ],
                [
                  "i"
                ]
              ]
            ],
            [
              ") to objects.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python, we don’t really assign values to variables, instead we ",
            "AttrFlags": 1
          },
          {
            "Text": "bind",
            "AttrFlags": 5
          },
          {
            "Text": " (i.e. assign, attach) variables (considered as ",
            "AttrFlags": 1
          },
          {
            "Text": "names",
            "AttrFlags": 5
          },
          {
            "Text": ") to objects.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085400,
        "id": "39b5700b-9ab2-4466-96be-af40f2680fe7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085400,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Immutable:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Integers, strings, tuples, and so on. All operations make copies."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Immutable:",
            "AttrFlags": 1
          },
          {
            "Text": " Integers, strings, tuples, and so on. All operations make copies."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085401,
        "id": "3dcdbba7-36eb-4da3-abab-ffc87beddf8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261085401,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mutable:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Lists, dictionaries, sets, and so on. Operations may or may not mutate."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Mutable:",
            "AttrFlags": 1
          },
          {
            "Text": " Lists, dictionaries, sets, and so on. Operations may or may not mutate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261085401,
        "id": "ca090a26-7777-4b81-bddc-20861511457d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262240000,
        "parent_id": "714cfd20-5085-4312-b2fd-89180c1b7748",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "x = [3, 1, 9]\ny = x\nx.append(5)    # Mutates the list labelled by x and y, both x and y are bound to [3, 1, 9]\nx.sort()       # Mutates the list labelled by x and y (in-place sorting)\nx = x + [4]    # Does not mutate the list (makes a copy for x only, not y)\nz = x          # z is x ([1, 3, 9, 4])\nx += [6]       # Mutates the list labelled by both x and z (uses the extend function).\nx = sorted(x)  # Does not mutate the list (makes a copy for x only).\nx\n# Out: [1, 3, 4, 5, 6, 9]\ny\n# Out: [1, 3, 5, 9]\nz\n# Out: [1, 3, 5, 9, 4, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "x = [3, 1, 9]\ny = x\nx.append(5)    # Mutates the list labelled by x and y, both x and y are bound to [3, 1, 9]\nx.sort()       # Mutates the list labelled by x and y (in-place sorting)\nx = x + [4]    # Does not mutate the list (makes a copy for x only, not y)\nz = x          # z is x ([1, 3, 9, 4])\nx += [6]       # Mutates the list labelled by both x and z (uses the extend function).\nx = sorted(x)  # Does not mutate the list (makes a copy for x only).\nx\n# Out: [1, 3, 4, 5, 6, 9]\ny\n# Out: [1, 3, 5, 9]\nz\n# Out: [1, 3, 5, 9, 4, 6]",
        "code_language": "Python"
      }
    ],
    "title": "Argument passing and mutability",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}