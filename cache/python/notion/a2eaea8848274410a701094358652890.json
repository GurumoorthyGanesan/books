{
  "ID": "a2eaea88-4827-4410-a701-094358652890",
  "Root": {
    "alive": true,
    "content": [
      "13cd5493-14f4-4fbb-96e7-95ed2864eb07",
      "fac12606-f7e9-4048-b77d-b38ad7f23b51",
      "1211ac6a-3d12-4a3e-8aa0-c55d5703cdd2",
      "26c50332-89ed-4377-a65c-1f1cff660bd7",
      "52e241ee-49cc-436d-b2ad-8059fd06b223",
      "569070d9-66d1-4365-b9fe-6c92a51159ad"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550391430275,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a2eaea88-4827-4410-a701-094358652890",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550474100000,
    "parent_id": "f113a62e-8bf0-48cd-8849-516dc9c9142d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Largest and smallest items in a collection"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391430271,
        "id": "13cd5493-14f4-4fbb-96e7-95ed2864eb07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391430271,
        "parent_id": "a2eaea88-4827-4410-a701-094358652890",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find the largest items in a collection, "
            ],
            [
              "heapq",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " module has a function called "
            ],
            [
              "nlargest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we pass it two arguments, the first one is the number of items that we want to retrieve, the second one is the collection name:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find the largest items in a collection, "
          },
          {
            "Text": "heapq",
            "AttrFlags": 2
          },
          {
            "Text": " module has a function called "
          },
          {
            "Text": "nlargest",
            "AttrFlags": 2
          },
          {
            "Text": ", we pass it two arguments, the first one is the number of items that we want to retrieve, the second one is the collection name:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391430274,
        "id": "fac12606-f7e9-4048-b77d-b38ad7f23b51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391430274,
        "parent_id": "a2eaea88-4827-4410-a701-094358652890",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import heapq\n\n\nnumbers = [1, 4, 2, 100, 20, 50, 32, 200, 150, 8]\nprint(heapq.nlargest(4, numbers))  # [200, 150, 100, 50]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import heapq\n\n\nnumbers = [1, 4, 2, 100, 20, 50, 32, 200, 150, 8]\nprint(heapq.nlargest(4, numbers))  # [200, 150, 100, 50]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391430274,
        "id": "1211ac6a-3d12-4a3e-8aa0-c55d5703cdd2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391430274,
        "parent_id": "a2eaea88-4827-4410-a701-094358652890",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similarly, to find the smallest items in a collection, we use "
            ],
            [
              "nsmallest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similarly, to find the smallest items in a collection, we use "
          },
          {
            "Text": "nsmallest",
            "AttrFlags": 2
          },
          {
            "Text": " function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391430274,
        "id": "26c50332-89ed-4377-a65c-1f1cff660bd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391430274,
        "parent_id": "a2eaea88-4827-4410-a701-094358652890",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "print(heapq.nsmallest(4, numbers))  # [1, 2, 4, 8]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "print(heapq.nsmallest(4, numbers))  # [1, 2, 4, 8]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391430275,
        "id": "52e241ee-49cc-436d-b2ad-8059fd06b223",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391430275,
        "parent_id": "a2eaea88-4827-4410-a701-094358652890",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both "
            ],
            [
              "nlargest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "nsmallest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions take an optional argument (key parameter) for complicated data structures. The following example shows the use of "
            ],
            [
              "age",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property to retrieve the oldest and the youngest people from "
            ],
            [
              "people",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " dictionary:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both "
          },
          {
            "Text": "nlargest",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "nsmallest",
            "AttrFlags": 2
          },
          {
            "Text": " functions take an optional argument (key parameter) for complicated data structures. The following example shows the use of "
          },
          {
            "Text": "age",
            "AttrFlags": 2
          },
          {
            "Text": " property to retrieve the oldest and the youngest people from "
          },
          {
            "Text": "people",
            "AttrFlags": 2
          },
          {
            "Text": " dictionary:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391430275,
        "id": "569070d9-66d1-4365-b9fe-6c92a51159ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391430275,
        "parent_id": "a2eaea88-4827-4410-a701-094358652890",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "people = [\n    {'firstname': 'John', 'lastname': 'Doe', 'age': 30},\n    {'firstname': 'Jane', 'lastname': 'Doe', 'age': 25},\n    {'firstname': 'Janie', 'lastname': 'Doe', 'age': 10},\n    {'firstname': 'Jane', 'lastname': 'Roe', 'age': 22},\n    {'firstname': 'Johnny', 'lastname': 'Doe', 'age': 12},\n    {'firstname': 'John', 'lastname': 'Roe', 'age': 45}\n]\n\noldest = heapq.nlargest(2, people, key=lambda s: s['age'])\nprint(oldest)\n# Output: [{'firstname': 'John', 'age': 45, 'lastname': 'Roe'}, {'firstname': 'John', 'age': 30, 'lastname': 'Doe'}]\n\nyoungest = heapq.nsmallest(2, people, key=lambda s: s['age'])\nprint(youngest)\n# Output: [{'firstname': 'Janie', 'age': 10, 'lastname': 'Doe'}, {'firstname': 'Johnny', 'age': 12, 'lastname': 'Doe'}]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "people = [\n    {'firstname': 'John', 'lastname': 'Doe', 'age': 30},\n    {'firstname': 'Jane', 'lastname': 'Doe', 'age': 25},\n    {'firstname': 'Janie', 'lastname': 'Doe', 'age': 10},\n    {'firstname': 'Jane', 'lastname': 'Roe', 'age': 22},\n    {'firstname': 'Johnny', 'lastname': 'Doe', 'age': 12},\n    {'firstname': 'John', 'lastname': 'Roe', 'age': 45}\n]\n\noldest = heapq.nlargest(2, people, key=lambda s: s['age'])\nprint(oldest)\n# Output: [{'firstname': 'John', 'age': 45, 'lastname': 'Roe'}, {'firstname': 'John', 'age': 30, 'lastname': 'Doe'}]\n\nyoungest = heapq.nsmallest(2, people, key=lambda s: s['age'])\nprint(youngest)\n# Output: [{'firstname': 'Janie', 'age': 10, 'lastname': 'Doe'}, {'firstname': 'Johnny', 'age': 12, 'lastname': 'Doe'}]",
        "code_language": "Plain Text"
      }
    ],
    "title": "Largest and smallest items in a collection",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}