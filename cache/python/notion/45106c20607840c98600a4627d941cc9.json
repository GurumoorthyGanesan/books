{
  "ID": "45106c20-6078-40c9-8600-a4627d941cc9",
  "Root": {
    "alive": true,
    "content": [
      "2c7d4745-aff3-4274-98e9-0cdc484faaf5",
      "7837c2b7-bf57-475c-88ed-9fdf440cb5b3",
      "b4b9814a-6622-436a-94e1-ff53024e6c65",
      "ae0807bd-b738-4b9e-82f9-7eb15cb2f800",
      "fc750360-056d-4a9d-a08d-9ba408554991",
      "966aa000-086f-4c26-9e45-93c220aca8c7",
      "60a73d1d-b530-47c8-bf09-4fd4259026b9",
      "8e6b5061-9fad-48bb-80c5-073960f663e6",
      "e66013f4-6fd5-4a91-bf15-3f2461d0bc37",
      "9e1218d9-76a8-4155-a3f4-2abe3285167b",
      "2b9038b9-05ec-4416-9c41-7ce0e8ae4fa9",
      "b3f97bc3-bc95-4cb3-bee4-cd19833ee6d4",
      "285419f0-f6ae-453b-9c91-065645de5097",
      "37e03ff0-2b97-466f-a12c-19c20b71c3c0",
      "bac027bf-2d09-4468-8e74-cc0fff3a89ca",
      "d444e9d6-ff3c-477c-83f3-418da5310a89",
      "94c5d8c6-2477-4618-981a-9dd875405900",
      "c23da1d0-f546-4bae-913d-c2e76f8b4b59",
      "6eb8ab96-ea12-4e50-be6a-39f8042f2a03",
      "d2681645-56d1-4898-9032-192ef6889be4",
      "9f8fbdd3-e1b9-4762-a410-d5c89764b645",
      "81c6d095-f45b-4601-9838-7a7a7a778220",
      "ea997fb6-5e85-4f27-afe4-761a45a50884",
      "efa61fb6-3ee9-4aba-bf3c-6efb789ab48a",
      "c240a75a-344d-4fde-87c8-175a71a417d4",
      "a7126d77-b6a3-49cc-9229-719b9751f4b3",
      "5511c33a-83a0-49b7-9e55-0199e828daf9",
      "6601df70-5529-4aa4-90e2-ef8212dd604d",
      "809506f4-e891-4e40-a0d5-d46e17824af3",
      "e5c833c4-b74a-42ec-96de-2daa57749404",
      "12a3ac7c-f5d1-46c7-8512-1faa617373a2",
      "504b4876-fce3-4361-91d0-8f2ad23c8ca4",
      "eff3ad19-140b-4c01-8b3d-e962a1f5fd13",
      "8395f102-3028-4f0f-be1a-c641c965abcb",
      "fa6ced0e-9d87-40bb-8bfa-9e364da0d7ba",
      "432dd966-b073-4c85-8522-3ce066247011",
      "a9795c00-f0ec-4a21-87d8-43112d40bbca",
      "13bf841e-8e61-4a1a-9ae3-45a21cfc0251",
      "4084f12e-33cc-463f-bb35-fc0e4a42db06"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550229427046,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "45106c20-6078-40c9-8600-a4627d941cc9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550229720000,
    "parent_id": "eecffaeb-508c-45b9-93c4-ae07958e5f67",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "List Comprehensions"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427035,
        "id": "2c7d4745-aff3-4274-98e9-0cdc484faaf5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427035,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "list comprehension",
              [
                [
                  "a",
                  "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
                ]
              ]
            ],
            [
              " creates a new "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by applying an expression to each element of an "
            ],
            [
              "iterable",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/2343/iterables-and-iterators"
                ]
              ]
            ],
            [
              ". The most basic form is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "list comprehension",
            "Link": "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
          },
          {
            "Text": " creates a new "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " by applying an expression to each element of an "
          },
          {
            "Text": "iterable",
            "Link": "http://stackoverflow.com/documentation/python/2343/iterables-and-iterators"
          },
          {
            "Text": ". The most basic form is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427036,
        "id": "7837c2b7-bf57-475c-88ed-9fdf440cb5b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[ \u003cexpression\u003e for \u003celement\u003e in \u003citerable\u003e ]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[ \u003cexpression\u003e for \u003celement\u003e in \u003citerable\u003e ]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427037,
        "id": "b4b9814a-6622-436a-94e1-ff53024e6c65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427037,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There’s also an optional ‘if’ condition:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There’s also an optional ‘if’ condition:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427037,
        "id": "ae0807bd-b738-4b9e-82f9-7eb15cb2f800",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[ \u003cexpression\u003e for \u003celement\u003e in \u003citerable\u003e if \u003ccondition\u003e ]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[ \u003cexpression\u003e for \u003celement\u003e in \u003citerable\u003e if \u003ccondition\u003e ]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427038,
        "id": "fc750360-056d-4a9d-a08d-9ba408554991",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427038,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each "
            ],
            [
              "\u003celement\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the "
            ],
            [
              "\u003citerable\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is plugged in to the "
            ],
            [
              "\u003cexpression\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the (optional) "
            ],
            [
              "\u003ccondition\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "evaluates to true",
              [
                [
                  "a",
                  "https://docs.python.org/3/library/stdtypes.html#truth-value-testing"
                ]
              ]
            ],
            [
              " . All results are returned at once in the new list. "
            ],
            [
              "Generator expressions",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/292/generators#t=201609020956268959493"
                ]
              ]
            ],
            [
              " are evaluated lazily, but list comprehensions evaluate the entire iterator immediately - consuming memory proportional to the iterator’s length."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each "
          },
          {
            "Text": "\u003celement\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " in the "
          },
          {
            "Text": "\u003citerable\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is plugged in to the "
          },
          {
            "Text": "\u003cexpression\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " if the (optional) "
          },
          {
            "Text": "\u003ccondition\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "evaluates to true",
            "Link": "https://docs.python.org/3/library/stdtypes.html#truth-value-testing"
          },
          {
            "Text": " . All results are returned at once in the new list. "
          },
          {
            "Text": "Generator expressions",
            "Link": "http://stackoverflow.com/documentation/python/292/generators#t=201609020956268959493"
          },
          {
            "Text": " are evaluated lazily, but list comprehensions evaluate the entire iterator immediately - consuming memory proportional to the iterator’s length."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427038,
        "id": "966aa000-086f-4c26-9e45-93c220aca8c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427038,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To create a "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of squared integers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To create a "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " of squared integers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427038,
        "id": "60a73d1d-b530-47c8-bf09-4fd4259026b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "squares = [x * x for x in (1, 2, 3, 4)]\n# squares: [1, 4, 9, 16]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "squares = [x * x for x in (1, 2, 3, 4)]\n# squares: [1, 4, 9, 16]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427038,
        "id": "8e6b5061-9fad-48bb-80c5-073960f663e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427038,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " expression sets "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to each value in turn from "
            ],
            [
              "(1, 2, 3, 4)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The result of the expression "
            ],
            [
              "x * x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is appended to an internal "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The internal "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is assigned to the variable "
            ],
            [
              "squares",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when completed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " expression sets "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " to each value in turn from "
          },
          {
            "Text": "(1, 2, 3, 4)",
            "AttrFlags": 2
          },
          {
            "Text": ". The result of the expression "
          },
          {
            "Text": "x * x",
            "AttrFlags": 2
          },
          {
            "Text": " is appended to an internal "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": ". The internal "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " is assigned to the variable "
          },
          {
            "Text": "squares",
            "AttrFlags": 2
          },
          {
            "Text": " when completed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427039,
        "id": "e66013f4-6fd5-4a91-bf15-3f2461d0bc37",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427039,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Besides a "
            ],
            [
              "speed increase",
              [
                [
                  "a",
                  "https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops"
                ]
              ]
            ],
            [
              " (as explained "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/39518899/3-array-generators-faster-than-1-for-loop/39519661#39519661"
                ]
              ]
            ],
            [
              "), a list comprehension is roughly equivalent to the following for-loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Besides a "
          },
          {
            "Text": "speed increase",
            "Link": "https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops"
          },
          {
            "Text": " (as explained "
          },
          {
            "Text": "here",
            "Link": "http://stackoverflow.com/questions/39518899/3-array-generators-faster-than-1-for-loop/39519661#39519661"
          },
          {
            "Text": "), a list comprehension is roughly equivalent to the following for-loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427039,
        "id": "9e1218d9-76a8-4155-a3f4-2abe3285167b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "squares = []\nfor x in (1, 2, 3, 4):\n    squares.append(x * x)\n# squares: [1, 4, 9, 16]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "squares = []\nfor x in (1, 2, 3, 4):\n    squares.append(x * x)\n# squares: [1, 4, 9, 16]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427039,
        "id": "2b9038b9-05ec-4416-9c41-7ce0e8ae4fa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427039,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The expression applied to each element can be as complex as needed:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The expression applied to each element can be as complex as needed:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427039,
        "id": "b3f97bc3-bc95-4cb3-bee4-cd19833ee6d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# Get a list of uppercase characters from a string\n[s.upper() for s in \"Hello World\"]\n# ['H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D']\n\n# Strip off any commas from the end of strings in a list\n[w.strip(',') for w in ['these,', 'words,,', 'mostly', 'have,commas,']]\n# ['these', 'words', 'mostly', 'have,commas']\n\n# Organize letters in words more reasonably - in an alphabetical order\nsentence = \"Beautiful is better than ugly\"\n[\"\".join(sorted(word, key = lambda x: x.lower())) for word in sentence.split()]\n# ['aBefiltuu', 'is', 'beertt', 'ahnt', 'gluy']"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# Get a list of uppercase characters from a string\n[s.upper() for s in \"Hello World\"]\n# ['H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D']\n\n# Strip off any commas from the end of strings in a list\n[w.strip(',') for w in ['these,', 'words,,', 'mostly', 'have,commas,']]\n# ['these', 'words', 'mostly', 'have,commas']\n\n# Organize letters in words more reasonably - in an alphabetical order\nsentence = \"Beautiful is better than ugly\"\n[\"\".join(sorted(word, key = lambda x: x.lower())) for word in sentence.split()]\n# ['aBefiltuu', 'is', 'beertt', 'ahnt', 'gluy']",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427040,
        "id": "285419f0-f6ae-453b-9c91-065645de5097",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427040,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "else"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "else"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427040,
        "id": "37e03ff0-2b97-466f-a12c-19c20b71c3c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427040,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "else",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used in List comprehension constructs, but be careful regarding the syntax. The if/else clauses should be used before "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop, not after:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "else",
            "AttrFlags": 2
          },
          {
            "Text": " can be used in List comprehension constructs, but be careful regarding the syntax. The if/else clauses should be used before "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop, not after:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427040,
        "id": "bac027bf-2d09-4468-8e74-cc0fff3a89ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# create a list of characters in apple, replacing non vowels with '*'\n# Ex - 'apple' --\u003e ['a', '*', '*', '*' ,'e']\n\n[x for x in 'apple' if x in 'aeiou' else '*']\n#SyntaxError: invalid syntax\n\n# When using if/else together use them before the loop\n[x if x in 'aeiou' else '*' for x in 'apple']\n#['a', '*', '*', '*', 'e']"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# create a list of characters in apple, replacing non vowels with '*'\n# Ex - 'apple' --\u003e ['a', '*', '*', '*' ,'e']\n\n[x for x in 'apple' if x in 'aeiou' else '*']\n#SyntaxError: invalid syntax\n\n# When using if/else together use them before the loop\n[x if x in 'aeiou' else '*' for x in 'apple']\n#['a', '*', '*', '*', 'e']",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "d444e9d6-ff3c-477c-83f3-418da5310a89",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427041,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note this uses a different language construct, a "
            ],
            [
              "conditional expression",
              [
                [
                  "a",
                  "http://docs.python.org/3/reference/expressions.html#conditional-expressions"
                ]
              ]
            ],
            [
              ", which itself is not part of the "
            ],
            [
              "comprehension syntax",
              [
                [
                  "a",
                  "http://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries"
                ]
              ]
            ],
            [
              ". Whereas the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after the "
            ],
            [
              "for…in",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "is",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " a part of list comprehensions and used to "
            ],
            [
              "filter",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " elements from the source iterable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note this uses a different language construct, a "
          },
          {
            "Text": "conditional expression",
            "Link": "http://docs.python.org/3/reference/expressions.html#conditional-expressions"
          },
          {
            "Text": ", which itself is not part of the "
          },
          {
            "Text": "comprehension syntax",
            "Link": "http://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries"
          },
          {
            "Text": ". Whereas the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " after the "
          },
          {
            "Text": "for…in",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "is",
            "AttrFlags": 4
          },
          {
            "Text": " a part of list comprehensions and used to "
          },
          {
            "Text": "filter",
            "AttrFlags": 4
          },
          {
            "Text": " elements from the source iterable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "94c5d8c6-2477-4618-981a-9dd875405900",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427041,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Double Iteration"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Double Iteration"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "c23da1d0-f546-4bae-913d-c2e76f8b4b59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427041,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Order of double iteration "
            ],
            [
              "[... for x in ... for y in ...]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is either natural or counter-intuitive. The rule of thumb is to follow an equivalent "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Order of double iteration "
          },
          {
            "Text": "[... for x in ... for y in ...]",
            "AttrFlags": 2
          },
          {
            "Text": " is either natural or counter-intuitive. The rule of thumb is to follow an equivalent "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "6eb8ab96-ea12-4e50-be6a-39f8042f2a03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def foo(i):\n    return i, i + 0.5\n\nfor i in range(3):\n    for x in foo(i):\n        yield str(x)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def foo(i):\n    return i, i + 0.5\n\nfor i in range(3):\n    for x in foo(i):\n        yield str(x)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "d2681645-56d1-4898-9032-192ef6889be4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427041,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This becomes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This becomes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "9f8fbdd3-e1b9-4762-a410-d5c89764b645",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[str(x)\n    for i in range(3)\n        for x in foo(i)\n]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[str(x)\n    for i in range(3)\n        for x in foo(i)\n]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427041,
        "id": "81c6d095-f45b-4601-9838-7a7a7a778220",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427042,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be compressed into one line as "
            ],
            [
              "[str(x) for i in range(3) for x in foo(i)]",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be compressed into one line as "
          },
          {
            "Text": "[str(x) for i in range(3) for x in foo(i)]",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427042,
        "id": "ea997fb6-5e85-4f27-afe4-761a45a50884",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427042,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In-place Mutation and Other Side Effects"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "In-place Mutation and Other Side Effects"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427042,
        "id": "efa61fb6-3ee9-4aba-bf3c-6efb789ab48a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427042,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before using list comprehension, understand the difference between functions called for their side effects ("
            ],
            [
              "mutating",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", or "
            ],
            [
              "in-place",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/In-place_algorithm"
                ]
              ]
            ],
            [
              " functions) which usually return "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and functions that return an interesting value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before using list comprehension, understand the difference between functions called for their side effects ("
          },
          {
            "Text": "mutating",
            "AttrFlags": 4
          },
          {
            "Text": ", or "
          },
          {
            "Text": "in-place",
            "AttrFlags": 4,
            "Link": "https://en.wikipedia.org/wiki/In-place_algorithm"
          },
          {
            "Text": " functions) which usually return "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": ", and functions that return an interesting value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427043,
        "id": "c240a75a-344d-4fde-87c8-175a71a417d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427043,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many functions (especially "
            ],
            [
              "pure",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Pure_function"
                ]
              ]
            ],
            [
              " functions) simply take an object and return some object. An "
            ],
            [
              "in-place",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " function modifies the existing object, which is called a "
            ],
            [
              "side effect",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". Other examples include input and output operations such as printing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many functions (especially "
          },
          {
            "Text": "pure",
            "AttrFlags": 4,
            "Link": "https://en.wikipedia.org/wiki/Pure_function"
          },
          {
            "Text": " functions) simply take an object and return some object. An "
          },
          {
            "Text": "in-place",
            "AttrFlags": 4
          },
          {
            "Text": " function modifies the existing object, which is called a "
          },
          {
            "Text": "side effect",
            "AttrFlags": 4
          },
          {
            "Text": ". Other examples include input and output operations such as printing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427043,
        "id": "a7126d77-b6a3-49cc-9229-719b9751f4b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427043,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "list.sort()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/stdtypes.html#list.sort"
                ]
              ]
            ],
            [
              " sorts a list "
            ],
            [
              "in-place",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (meaning that it modifies the original list) and returns the value "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, it won’t work as expected in a list comprehension:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "list.sort()",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/stdtypes.html#list.sort"
          },
          {
            "Text": " sorts a list "
          },
          {
            "Text": "in-place",
            "AttrFlags": 4
          },
          {
            "Text": " (meaning that it modifies the original list) and returns the value "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, it won’t work as expected in a list comprehension:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427043,
        "id": "5511c33a-83a0-49b7-9e55-0199e828daf9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[x.sort() for x in [[2, 1], [4, 3], [0, 1]]]\n# [None, None, None]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[x.sort() for x in [[2, 1], [4, 3], [0, 1]]]\n# [None, None, None]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427044,
        "id": "6601df70-5529-4aa4-90e2-ef8212dd604d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427044,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, "
            ],
            [
              "sorted()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/functions.html#sorted"
                ]
              ]
            ],
            [
              " returns a sorted "
            ],
            [
              "list",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " rather than sorting in-place:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, "
          },
          {
            "Text": "sorted()",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/functions.html#sorted"
          },
          {
            "Text": " returns a sorted "
          },
          {
            "Text": "list",
            "AttrFlags": 2
          },
          {
            "Text": " rather than sorting in-place:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427044,
        "id": "809506f4-e891-4e40-a0d5-d46e17824af3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[sorted(x) for x in [[2, 1], [4, 3], [0, 1]]]\n# [[1, 2], [3, 4], [0, 1]]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[sorted(x) for x in [[2, 1], [4, 3], [0, 1]]]\n# [[1, 2], [3, 4], [0, 1]]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427044,
        "id": "e5c833c4-b74a-42ec-96de-2daa57749404",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427044,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using comprehensions for side-effects is possible, such as I/O or in-place functions. Yet a for loop is usually more readable. While this works in Python 3:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using comprehensions for side-effects is possible, such as I/O or in-place functions. Yet a for loop is usually more readable. While this works in Python 3:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427044,
        "id": "12a3ac7c-f5d1-46c7-8512-1faa617373a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[print(x) for x in (1, 2, 3)]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[print(x) for x in (1, 2, 3)]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427044,
        "id": "504b4876-fce3-4361-91d0-8f2ad23c8ca4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427044,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427044,
        "id": "eff3ad19-140b-4c01-8b3d-e962a1f5fd13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229660000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "for x in (1, 2, 3):\n    print(x)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "for x in (1, 2, 3):\n    print(x)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427045,
        "id": "8395f102-3028-4f0f-be1a-c641c965abcb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427045,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In some situations, side effect functions "
            ],
            [
              "are",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " suitable for list comprehension. "
            ],
            [
              "random.randrange()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/random.html#random.randrange"
                ]
              ]
            ],
            [
              " has the side effect of changing the state of the random number generator, but it also returns an interesting value. Additionally, "
            ],
            [
              "next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be called on an iterator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In some situations, side effect functions "
          },
          {
            "Text": "are",
            "AttrFlags": 4
          },
          {
            "Text": " suitable for list comprehension. "
          },
          {
            "Text": "random.randrange()",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/random.html#random.randrange"
          },
          {
            "Text": " has the side effect of changing the state of the random number generator, but it also returns an interesting value. Additionally, "
          },
          {
            "Text": "next()",
            "AttrFlags": 2
          },
          {
            "Text": " can be called on an iterator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427045,
        "id": "fa6ced0e-9d87-40bb-8bfa-9e364da0d7ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427045,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following random value generator is not pure, yet makes sense as the random generator is reset every time the expression is evaluated:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following random value generator is not pure, yet makes sense as the random generator is reset every time the expression is evaluated:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427045,
        "id": "432dd966-b073-4c85-8522-3ce066247011",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229720000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from random import randrange\n[randrange(1, 7) for _ in range(10)]\n# [2, 3, 2, 1, 1, 5, 2, 4, 3, 5]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from random import randrange\n[randrange(1, 7) for _ in range(10)]\n# [2, 3, 2, 1, 1, 5, 2, 4, 3, 5]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427045,
        "id": "a9795c00-f0ec-4a21-87d8-43112d40bbca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427045,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Whitespace in list comprehensions"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Whitespace in list comprehensions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427045,
        "id": "13bf841e-8e61-4a1a-9ae3-45a21cfc0251",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229427045,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More complicated list comprehensions can reach an undesired length, or become less readable. Although less common in examples, it is possible to break a list comprehension into multiple lines like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More complicated list comprehensions can reach an undesired length, or become less readable. Although less common in examples, it is possible to break a list comprehension into multiple lines like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229427046,
        "id": "4084f12e-33cc-463f-bb35-fc0e4a42db06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229720000,
        "parent_id": "45106c20-6078-40c9-8600-a4627d941cc9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[\n    x for x\n    in 'foo'\n    if x not in 'bar'\n]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[\n    x for x\n    in 'foo'\n    if x not in 'bar'\n]",
        "code_language": "Python"
      }
    ],
    "title": "List Comprehensions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}