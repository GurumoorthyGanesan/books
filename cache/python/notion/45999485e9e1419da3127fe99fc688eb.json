{
  "ID": "45999485-e9e1-419d-a312-7fe99fc688eb",
  "Root": {
    "alive": true,
    "content": [
      "643cfd12-de48-49f3-b308-39c0ef4a0b92",
      "c2216c94-45dc-4d72-b0aa-403271894b59",
      "9a4654f8-980a-4dcd-aea8-2d124056a3e6",
      "60899212-2cf0-471b-8b2b-3d146f0a9cbe",
      "3506e05c-0886-473e-9097-cbfb0f397f65",
      "91524705-6415-457c-8e4f-bfd05a316b19",
      "aaa0d0ad-f36a-4d47-b066-9c238c8bfcd1",
      "b277b055-8454-441d-bc1c-bb211b52e71b",
      "b33f1a18-68a0-4201-99ca-47c8cd6d9505",
      "19a2ef4d-edee-44f4-b922-324dcf786e00"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550301765264,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "45999485-e9e1-419d-a312-7fe99fc688eb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550302740000,
    "parent_id": "ded3913a-88c5-4173-b2a5-ee3d56b4fbd4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Extracting N largest or N smallest items from an iterable"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765261,
        "id": "643cfd12-de48-49f3-b308-39c0ef4a0b92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765261,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To find some number (more than one) of largest or smallest values of an iterable, you can use the "
            ],
            [
              "nlargest",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/heapq.html#heapq.nlargest"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "nsmallest",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/heapq.html#heapq.nlargest"
                ]
              ]
            ],
            [
              " of the "
            ],
            [
              "heapq",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/heapq.html"
                ]
              ]
            ],
            [
              " module:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To find some number (more than one) of largest or smallest values of an iterable, you can use the "
          },
          {
            "Text": "nlargest",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/heapq.html#heapq.nlargest"
          },
          {
            "Text": " and "
          },
          {
            "Text": "nsmallest",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/heapq.html#heapq.nlargest"
          },
          {
            "Text": " of the "
          },
          {
            "Text": "heapq",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/heapq.html"
          },
          {
            "Text": " module:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765262,
        "id": "c2216c94-45dc-4d72-b0aa-403271894b59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550302740000,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import heapq\n\n# get 5 largest items from the range\n\nheapq.nlargest(5, range(10))\n# Output: [9, 8, 7, 6, 5]\n\nheapq.nsmallest(5, range(10))\n# Output: [0, 1, 2, 3, 4]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import heapq\n\n# get 5 largest items from the range\n\nheapq.nlargest(5, range(10))\n# Output: [9, 8, 7, 6, 5]\n\nheapq.nsmallest(5, range(10))\n# Output: [0, 1, 2, 3, 4]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765262,
        "id": "9a4654f8-980a-4dcd-aea8-2d124056a3e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765262,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is much more efficient than sorting the whole iterable and then slicing from the end or beginning. Internally these functions use the "
            ],
            [
              "binary heap",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Binary_heap"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "priority queue",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Priority_queue"
                ]
              ]
            ],
            [
              " data structure, which is very efficient for this use case."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is much more efficient than sorting the whole iterable and then slicing from the end or beginning. Internally these functions use the "
          },
          {
            "Text": "binary heap",
            "Link": "https://en.wikipedia.org/wiki/Binary_heap"
          },
          {
            "Text": " "
          },
          {
            "Text": "priority queue",
            "Link": "https://en.wikipedia.org/wiki/Priority_queue"
          },
          {
            "Text": " data structure, which is very efficient for this use case."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765263,
        "id": "60899212-2cf0-471b-8b2b-3d146f0a9cbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765263,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Like "
            ],
            [
              "min",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "max",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "sorted",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", these functions accept the optional "
            ],
            [
              "key",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword argument, which must be a function that, given an element, returns its sort key."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Like "
          },
          {
            "Text": "min",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "max",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "sorted",
            "AttrFlags": 2
          },
          {
            "Text": ", these functions accept the optional "
          },
          {
            "Text": "key",
            "AttrFlags": 2
          },
          {
            "Text": " keyword argument, which must be a function that, given an element, returns its sort key."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765263,
        "id": "3506e05c-0886-473e-9097-cbfb0f397f65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765263,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is a program that extracts 1000 longest lines from a file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is a program that extracts 1000 longest lines from a file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765263,
        "id": "91524705-6415-457c-8e4f-bfd05a316b19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550302740000,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import heapq\nwith open(filename) as f:\n    longest_lines = heapq.nlargest(1000, f, key=len)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import heapq\nwith open(filename) as f:\n    longest_lines = heapq.nlargest(1000, f, key=len)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765263,
        "id": "aaa0d0ad-f36a-4d47-b066-9c238c8bfcd1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765263,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we open the file, and pass the file handle "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "nlargest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Iterating the file yields each line of the file as a separate string; "
            ],
            [
              "nlargest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then passes each element (or line) is passed to the function "
            ],
            [
              "len",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to determine its sort key. "
            ],
            [
              "len",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", given a string, returns the length of the line in characters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we open the file, and pass the file handle "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "nlargest",
            "AttrFlags": 2
          },
          {
            "Text": ". Iterating the file yields each line of the file as a separate string; "
          },
          {
            "Text": "nlargest",
            "AttrFlags": 2
          },
          {
            "Text": " then passes each element (or line) is passed to the function "
          },
          {
            "Text": "len",
            "AttrFlags": 2
          },
          {
            "Text": " to determine its sort key. "
          },
          {
            "Text": "len",
            "AttrFlags": 2
          },
          {
            "Text": ", given a string, returns the length of the line in characters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765263,
        "id": "b277b055-8454-441d-bc1c-bb211b52e71b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765263,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This only needs storage for a list of 1000 largest lines so far, which can be contrasted with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This only needs storage for a list of 1000 largest lines so far, which can be contrasted with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765264,
        "id": "b33f1a18-68a0-4201-99ca-47c8cd6d9505",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550302740000,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "longest_lines = sorted(f, key=len)[1000:]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "longest_lines = sorted(f, key=len)[1000:]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301765264,
        "id": "19a2ef4d-edee-44f4-b922-324dcf786e00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301765264,
        "parent_id": "45999485-e9e1-419d-a312-7fe99fc688eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which will have to hold "
            ],
            [
              "the entire file in memory",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which will have to hold "
          },
          {
            "Text": "the entire file in memory",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Extracting N largest or N smallest items from an iterable",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}