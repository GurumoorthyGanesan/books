{
  "ID": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
  "Root": {
    "alive": true,
    "content": [
      "04bd13ce-c95a-44e7-9c73-057ab1bf655e",
      "f73e5195-c66b-459d-bcb6-74e6626a4f61",
      "cbcb4fcd-c5eb-485f-9f98-2545e15ff1cc",
      "3d5c742e-4232-4cdc-84f7-1a646547182b",
      "55644914-5b22-4e4b-9465-53f47c0ac38b",
      "582631c6-9c6e-4098-aed4-d15f05b690d3",
      "fc3e8102-68f6-449a-901a-d433080524c4",
      "872a5d98-9260-4e56-946d-2f7fd811225c",
      "553d2957-9f1f-4704-a6ac-93c7de0d5373",
      "ba512128-89d4-4c08-a276-eb12ebdef4e8",
      "bbab8a86-05ec-4b04-81c1-4df7fb5602aa",
      "02dd89cd-9958-489b-af64-a408298792ff",
      "e7130ff0-4115-46ba-9956-c4ad625da68f",
      "6b9f8dc3-8938-4454-a68e-c8829101f796",
      "eb388974-1922-415e-a222-ccad77ff8a2f",
      "bfb61a69-14c9-4515-af87-41e210a6e8f4",
      "8c8e3b7d-4d1f-49e3-964a-ee59a6f856ac",
      "69a2bb64-3d70-4938-997b-8a592a4f6334",
      "6f71fdc9-f6af-4319-a362-94208a4544f3",
      "f5177af4-b9fc-4e92-a386-fee028b369eb",
      "6b1824cd-3526-46cf-890f-4f61b7b25548",
      "3c1fb482-273c-471e-b355-f4b60a54bbaa",
      "ca51830d-cab9-4195-aead-83be8bcb811b",
      "5feacb06-7983-43cc-9448-2ad93732c6f8",
      "86437aab-af21-4307-b9d2-db20be79ef39",
      "76f3fa05-a2db-48b5-8c04-6966d73d43d2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550303366710,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550303580000,
    "parent_id": "5101a914-c687-4402-85e8-f60ea14e09d2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Local vs Global Scope"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366701,
        "id": "04bd13ce-c95a-44e7-9c73-057ab1bf655e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366701,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What are local and global scope?"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "What are local and global scope?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366704,
        "id": "f73e5195-c66b-459d-bcb6-74e6626a4f61",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366704,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All Python variabes which are accessible at some point in code are either in "
            ],
            [
              "local scope",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " or in "
            ],
            [
              "global scope",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All Python variabes which are accessible at some point in code are either in "
          },
          {
            "Text": "local scope",
            "AttrFlags": 4
          },
          {
            "Text": " or in "
          },
          {
            "Text": "global scope",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366704,
        "id": "cbcb4fcd-c5eb-485f-9f98-2545e15ff1cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366704,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The explanation is that local scope includes all variables defined in the current function and global scope includes variabled defined outside of the current function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The explanation is that local scope includes all variables defined in the current function and global scope includes variabled defined outside of the current function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366704,
        "id": "3d5c742e-4232-4cdc-84f7-1a646547182b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1  # global\n\ndef func():\n    bar = 2  # local\n    print(foo)  # prints variable foo from global scope\n    print(bar)  # prints variable bar from local scope"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1  # global\n\ndef func():\n    bar = 2  # local\n    print(foo)  # prints variable foo from global scope\n    print(bar)  # prints variable bar from local scope",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366704,
        "id": "55644914-5b22-4e4b-9465-53f47c0ac38b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366704,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One can inspect which variables are in which scope. Built-in functions "
            ],
            [
              "locals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "globals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " return the whole scopes as dictionaries."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One can inspect which variables are in which scope. Built-in functions "
          },
          {
            "Text": "locals()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "globals()",
            "AttrFlags": 2
          },
          {
            "Text": " return the whole scopes as dictionaries."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366704,
        "id": "582631c6-9c6e-4098-aed4-d15f05b690d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\n\ndef func():\n    bar = 2\n    print(globals().keys())  # prints all variable names in global scope\n    print(locals().keys())  # prints all variable names in local scope"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\n\ndef func():\n    bar = 2\n    print(globals().keys())  # prints all variable names in global scope\n    print(locals().keys())  # prints all variable names in local scope",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "fc3e8102-68f6-449a-901a-d433080524c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366705,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What happens with name clashes?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "What happens with name clashes?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "872a5d98-9260-4e56-946d-2f7fd811225c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\n\ndef func():\n    foo = 2  # creates a new variable foo in local scope, global foo is not affected\n\n    print(foo)  # prints 2\n\n    # global variable foo still exists, unchanged:\n    print(globals()['foo'])  # prints 1\n    print(locals()['foo'])  # prints 2"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\n\ndef func():\n    foo = 2  # creates a new variable foo in local scope, global foo is not affected\n\n    print(foo)  # prints 2\n\n    # global variable foo still exists, unchanged:\n    print(globals()['foo'])  # prints 1\n    print(locals()['foo'])  # prints 2",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "553d2957-9f1f-4704-a6ac-93c7de0d5373",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366705,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To modify a global variable, use keyword "
            ],
            [
              "global",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To modify a global variable, use keyword "
          },
          {
            "Text": "global",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "ba512128-89d4-4c08-a276-eb12ebdef4e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\n\ndef func():\n    global foo\n    foo = 2  # this modifies the global foo, rather than creating a local variable"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\n\ndef func():\n    global foo\n    foo = 2  # this modifies the global foo, rather than creating a local variable",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "bbab8a86-05ec-4b04-81c1-4df7fb5602aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366705,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The scope is defined for the whole body of the function!",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The scope is defined for the whole body of the function!",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "02dd89cd-9958-489b-af64-a408298792ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366705,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What it means is that a variable will never be global for a half of the function and local afterwards, or vice-versa."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What it means is that a variable will never be global for a half of the function and local afterwards, or vice-versa."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "e7130ff0-4115-46ba-9956-c4ad625da68f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\n\ndef func():\n    # This function has a local variable foo, because it is defined down below.\n    # So, foo is local from this point. Global foo is hidden.\n\n    print(foo) # raises UnboundLocalError, because local foo is not yet initialized\n    foo = 7\n    print(foo)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\n\ndef func():\n    # This function has a local variable foo, because it is defined down below.\n    # So, foo is local from this point. Global foo is hidden.\n\n    print(foo) # raises UnboundLocalError, because local foo is not yet initialized\n    foo = 7\n    print(foo)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "6b9f8dc3-8938-4454-a68e-c8829101f796",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366705,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Likewise, the oposite:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Likewise, the oposite:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366705,
        "id": "eb388974-1922-415e-a222-ccad77ff8a2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\n\ndef func():\n    # In this function, foo is a global variable from the begining\n\n    foo = 7  # global foo is modified\n\n    print(foo)  # 7\n    print(globals()['foo'])  # 7\n\n    global foo  # this could be anywhere within the function\n    print(foo)  # 7"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\n\ndef func():\n    # In this function, foo is a global variable from the begining\n\n    foo = 7  # global foo is modified\n\n    print(foo)  # 7\n    print(globals()['foo'])  # 7\n\n    global foo  # this could be anywhere within the function\n    print(foo)  # 7",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366706,
        "id": "bfb61a69-14c9-4515-af87-41e210a6e8f4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366706,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functions within functions"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functions within functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366706,
        "id": "8c8e3b7d-4d1f-49e3-964a-ee59a6f856ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366706,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There may be many levels of functions nested within functions, but within any one function there is only one local scope for that function and the global scope. There are no intermediate scopes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There may be many levels of functions nested within functions, but within any one function there is only one local scope for that function and the global scope. There are no intermediate scopes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366706,
        "id": "69a2bb64-3d70-4938-997b-8a592a4f6334",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\n\ndef f1():\n    bar = 1\n\n    def f2():\n        baz = 2\n        # here, foo is a global variable, baz is a local variable\n        # bar is not in either scope\n        print(locals().keys())  # ['baz']\n        print('bar' in locals())  # False\n        print('bar' in globals())  # False\n\n    def f3():\n        baz = 3\n        print(bar)  # bar from f1 is referenced so it enters local scope of f3 (closure)\n        print(locals().keys())  # ['bar', 'baz']\n        print('bar' in locals())  # True\n        print('bar' in globals())  # False\n\n    def f4():\n        bar = 4  # a new local bar which hides bar from local scope of f1\n        baz = 4\n        print(bar)\n        print(locals().keys())  # ['bar', 'baz']\n        print('bar' in locals())  # True\n        print('bar' in globals())  # False"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\n\ndef f1():\n    bar = 1\n\n    def f2():\n        baz = 2\n        # here, foo is a global variable, baz is a local variable\n        # bar is not in either scope\n        print(locals().keys())  # ['baz']\n        print('bar' in locals())  # False\n        print('bar' in globals())  # False\n\n    def f3():\n        baz = 3\n        print(bar)  # bar from f1 is referenced so it enters local scope of f3 (closure)\n        print(locals().keys())  # ['bar', 'baz']\n        print('bar' in locals())  # True\n        print('bar' in globals())  # False\n\n    def f4():\n        bar = 4  # a new local bar which hides bar from local scope of f1\n        baz = 4\n        print(bar)\n        print(locals().keys())  # ['bar', 'baz']\n        print('bar' in locals())  # True\n        print('bar' in globals())  # False",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366706,
        "id": "6f71fdc9-f6af-4319-a362-94208a4544f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366706,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "global",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " vs "
            ],
            [
              "nonlocal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (Python 3 only)"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "global",
            "AttrFlags": 2
          },
          {
            "Text": " vs "
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 2
          },
          {
            "Text": " (Python 3 only)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366707,
        "id": "f5177af4-b9fc-4e92-a386-fee028b369eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366707,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both these keywords are used to gain write access to variables which are not local to the current functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both these keywords are used to gain write access to variables which are not local to the current functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366707,
        "id": "6b1824cd-3526-46cf-890f-4f61b7b25548",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366707,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "global",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword declares that a name should be treated as a global variable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "global",
            "AttrFlags": 2
          },
          {
            "Text": " keyword declares that a name should be treated as a global variable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366707,
        "id": "3c1fb482-273c-471e-b355-f4b60a54bbaa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 0  # global foo\n\ndef f1():\n    foo = 1  # a new foo local in f1\n    \n    def f2():\n        foo = 2  # a new foo local in f2\n        \n        def f3():\n            foo = 3  # a new foo local in f3\n            print(foo)  # 3\n            foo = 30  # modifies local foo in f3 only\n        \n        def f4():\n            global foo\n            print(foo)  # 0\n            foo = 100  # modifies global foo"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 0  # global foo\n\ndef f1():\n    foo = 1  # a new foo local in f1\n    \n    def f2():\n        foo = 2  # a new foo local in f2\n        \n        def f3():\n            foo = 3  # a new foo local in f3\n            print(foo)  # 3\n            foo = 30  # modifies local foo in f3 only\n        \n        def f4():\n            global foo\n            print(foo)  # 0\n            foo = 100  # modifies global foo",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366707,
        "id": "ca51830d-cab9-4195-aead-83be8bcb811b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366707,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On the other hand, "
            ],
            [
              "nonlocal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (see http://stackoverflow.com/documentation/python/263/variable-scope-and-binding/5712/nonlocal-variables#t=201609030858342242664 ), available in Python 3, takes a "
            ],
            [
              "local",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " variable from an enclosing scope into the local scope of current function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On the other hand, "
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 2
          },
          {
            "Text": " (see http://stackoverflow.com/documentation/python/263/variable-scope-and-binding/5712/nonlocal-variables#t=201609030858342242664 ), available in Python 3, takes a "
          },
          {
            "Text": "local",
            "AttrFlags": 4
          },
          {
            "Text": " variable from an enclosing scope into the local scope of current function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366709,
        "id": "5feacb06-7983-43cc-9448-2ad93732c6f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366709,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From the "
            ],
            [
              "Python documentation on ",
              [
                [
                  "a",
                  "https://docs.python.org/3/reference/simple_stmts.html#nonlocal"
                ]
              ]
            ],
            [
              "nonlocal",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/reference/simple_stmts.html#nonlocal"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From the "
          },
          {
            "Text": "Python documentation on ",
            "Link": "https://docs.python.org/3/reference/simple_stmts.html#nonlocal"
          },
          {
            "Text": "nonlocal",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/reference/simple_stmts.html#nonlocal"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366709,
        "id": "86437aab-af21-4307-b9d2-db20be79ef39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303366709,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "The nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550303366710,
        "id": "76f3fa05-a2db-48b5-8c04-6966d73d43d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550303580000,
        "parent_id": "71f842e4-53c6-447f-a01f-1ef1ab286ed8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def f1():\n    \n    def f2():\n        foo = 2  # a new foo local in f2\n\n        def f3():\n            nonlocal foo  # foo from f2, which is the nearest enclosing scope\n            print(foo)  # 2\n            foo = 20  # modifies foo from f2!"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def f1():\n    \n    def f2():\n        foo = 2  # a new foo local in f2\n\n        def f3():\n            nonlocal foo  # foo from f2, which is the nearest enclosing scope\n            print(foo)  # 2\n            foo = 20  # modifies foo from f2!",
        "code_language": "Python"
      }
    ],
    "title": "Local vs Global Scope",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}