{
  "ID": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
  "Root": {
    "alive": true,
    "content": [
      "67c738d8-3b6f-404a-81dc-a2bab76e48d3",
      "b2abf8dc-bc96-46a7-aaa6-638f1ba489df",
      "237f1cad-1ea9-47f2-9a76-50934f36ba49",
      "74cfed26-7ed5-46e1-b5c4-2af84b1ccfee",
      "42251043-7cb0-44d9-b495-ad88eded91b6",
      "dc30e148-0f84-4127-85f6-2bf65b861291",
      "ed5f1e4f-1a75-45f8-9611-7c0047b112b6",
      "6d529ff5-7012-4784-9bf1-7645ec41fe5e",
      "c18c6ef0-99ac-4b59-8608-7d4c720f5b7d",
      "e32570e4-4a32-4391-8434-6379aec649d2",
      "f4ac039c-f04f-4834-b972-a3f825d4817b",
      "69863105-17a9-4a6c-8705-17cb6dbc6593",
      "0789ea51-20d1-44d1-b958-20cfb40c2048",
      "94f9246a-e99d-4a5e-8ae2-35ef62bbc095",
      "e2c0333a-d639-4b6a-ad13-2688f21f8065",
      "7cbfee4c-3d68-485b-b9e5-6c6daa37815c",
      "fefbb42c-937c-4ff3-a61d-74deb315fdfd",
      "cb7c79b9-0ed4-465a-a54c-97991c9e5c9a",
      "57387f4e-aae8-441e-9321-8bedbe7ae98e",
      "8a582ece-a46d-4ef8-aaec-e50b1c60900a",
      "e9437165-ced8-4d56-b009-88a596f92bbf",
      "8bc27ab2-f09c-454d-9a1f-49d5d15ec1e7",
      "dbdc47ef-9ce5-4336-b64e-5d118a2b6d6c",
      "9e2cdba4-844b-4334-85c9-4d77f3ffac4b",
      "7719e3fe-8a4c-4be6-a3b5-39b9f2ee5015",
      "536bcd45-e793-42c1-983e-51b69d158712"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346319041,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550346900000,
    "parent_id": "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Intro to Test Fixtures"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319033,
        "id": "67c738d8-3b6f-404a-81dc-a2bab76e48d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319033,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More complicated tests sometimes need to have things set up before you run the code you want to test. It is possible to do this in the test function itself, but then you end up with large test functions doing so much that it is difficult to tell where the setup stops and the test begins. You can also get a lot of duplicate setup code between your various test functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More complicated tests sometimes need to have things set up before you run the code you want to test. It is possible to do this in the test function itself, but then you end up with large test functions doing so much that it is difficult to tell where the setup stops and the test begins. You can also get a lot of duplicate setup code between your various test functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319036,
        "id": "b2abf8dc-bc96-46a7-aaa6-638f1ba489df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319036,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our code file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our code file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319036,
        "id": "237f1cad-1ea9-47f2-9a76-50934f36ba49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# projectroot/module/stuff.py\nclass Stuff(object):\n    def prep(self):\n        self.foo = 1\n        self.bar = 2"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# projectroot/module/stuff.py\nclass Stuff(object):\n    def prep(self):\n        self.foo = 1\n        self.bar = 2",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "74cfed26-7ed5-46e1-b5c4-2af84b1ccfee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319037,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our test file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our test file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "42251043-7cb0-44d9-b495-ad88eded91b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# projectroot/tests/test_stuff.py\nimport pytest\nfrom module import stuff\n\ndef test_foo_updates():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    assert 1 == my_stuff.foo\n    my_stuff.foo = 30000\n    assert my_stuff.foo == 30000\n\n\ndef test_bar_updates():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    assert 2 == my_stuff.bar\n    my_stuff.bar = 42\n    assert 42 == my_stuff.bar"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "# projectroot/tests/test_stuff.py\nimport pytest\nfrom module import stuff\n\ndef test_foo_updates():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    assert 1 == my_stuff.foo\n    my_stuff.foo = 30000\n    assert my_stuff.foo == 30000\n\n\ndef test_bar_updates():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    assert 2 == my_stuff.bar\n    my_stuff.bar = 42\n    assert 42 == my_stuff.bar",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "dc30e148-0f84-4127-85f6-2bf65b861291",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319037,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These are pretty simple examples, but if our "
            ],
            [
              "Stuff",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object needed a lot more setup, it would get unwieldy. We see that there is some duplicated code between our test cases, so let’s refactor that into a separate function first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These are pretty simple examples, but if our "
          },
          {
            "Text": "Stuff",
            "AttrFlags": 2
          },
          {
            "Text": " object needed a lot more setup, it would get unwieldy. We see that there is some duplicated code between our test cases, so let’s refactor that into a separate function first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "ed5f1e4f-1a75-45f8-9611-7c0047b112b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# projectroot/tests/test_stuff.py\nimport pytest\nfrom module import stuff\n\n\ndef get_prepped_stuff():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    return my_stuff\n\n\ndef test_foo_updates():\n    my_stuff = get_prepped_stuff()\n    assert 1 == my_stuff.foo\n    my_stuff.foo = 30000\n    assert my_stuff.foo == 30000\n\n\ndef test_bar_updates():\n    my_stuff = get_prepped_stuff()\n    assert 2 == my_stuff.bar\n    my_stuff.bar = 42\n    assert 42 == my_stuff.bar"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# projectroot/tests/test_stuff.py\nimport pytest\nfrom module import stuff\n\n\ndef get_prepped_stuff():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    return my_stuff\n\n\ndef test_foo_updates():\n    my_stuff = get_prepped_stuff()\n    assert 1 == my_stuff.foo\n    my_stuff.foo = 30000\n    assert my_stuff.foo == 30000\n\n\ndef test_bar_updates():\n    my_stuff = get_prepped_stuff()\n    assert 2 == my_stuff.bar\n    my_stuff.bar = 42\n    assert 42 == my_stuff.bar",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "6d529ff5-7012-4784-9bf1-7645ec41fe5e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319037,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This looks better but we still have the "
            ],
            [
              "my_stuff = get_prepped_stuff()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call cluttering up our test functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This looks better but we still have the "
          },
          {
            "Text": "my_stuff = get_prepped_stuff()",
            "AttrFlags": 2
          },
          {
            "Text": " call cluttering up our test functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "c18c6ef0-99ac-4b59-8608-7d4c720f5b7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319037,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "py.test fixtures to the rescue!"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "py.test fixtures to the rescue!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319037,
        "id": "e32570e4-4a32-4391-8434-6379aec649d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319037,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fixtures are much more powerful and flexible versions of test setup functions. They can do a lot more than we’re leveraging here, but we’ll take it one step at a time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fixtures are much more powerful and flexible versions of test setup functions. They can do a lot more than we’re leveraging here, but we’ll take it one step at a time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "f4ac039c-f04f-4834-b972-a3f825d4817b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319038,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First we change "
            ],
            [
              "get_prepped_stuff",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a fixture called "
            ],
            [
              "prepped_stuff",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". You want to name your fixtures with nouns rather than verbs because of how the fixtures will end up being used in the test functions themselves later. The "
            ],
            [
              "@pytest.fixture",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " indicates that this specific function should be handled as a fixture rather than a regular function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First we change "
          },
          {
            "Text": "get_prepped_stuff",
            "AttrFlags": 2
          },
          {
            "Text": " to a fixture called "
          },
          {
            "Text": "prepped_stuff",
            "AttrFlags": 2
          },
          {
            "Text": ". You want to name your fixtures with nouns rather than verbs because of how the fixtures will end up being used in the test functions themselves later. The "
          },
          {
            "Text": "@pytest.fixture",
            "AttrFlags": 2
          },
          {
            "Text": " indicates that this specific function should be handled as a fixture rather than a regular function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "69863105-17a9-4a6c-8705-17cb6dbc6593",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@pytest.fixture\ndef prepped_stuff():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    return my_stuff"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@pytest.fixture\ndef prepped_stuff():\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    return my_stuff",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "0789ea51-20d1-44d1-b958-20cfb40c2048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319038,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we should update the test functions so that they use the fixture. This is done by adding a parameter to their definition that exactly matches the fixture name. When py.test executes, it will run the fixture before running the test, then pass the return value of the fixture into the test function through that parameter. (Note that fixtures don’t "
            ],
            [
              "need",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to return a value; they can do other setup things instead, like calling an external resource, arranging things on the filesystem, putting values in a database, whatever the tests need for setup)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we should update the test functions so that they use the fixture. This is done by adding a parameter to their definition that exactly matches the fixture name. When py.test executes, it will run the fixture before running the test, then pass the return value of the fixture into the test function through that parameter. (Note that fixtures don’t "
          },
          {
            "Text": "need",
            "AttrFlags": 1
          },
          {
            "Text": " to return a value; they can do other setup things instead, like calling an external resource, arranging things on the filesystem, putting values in a database, whatever the tests need for setup)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "94f9246a-e99d-4a5e-8ae2-35ef62bbc095",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def test_foo_updates(prepped_stuff):\n    my_stuff = prepped_stuff\n    assert 1 == my_stuff.foo\n    my_stuff.foo = 30000\n    assert my_stuff.foo == 30000\n\n\ndef test_bar_updates(prepped_stuff):\n    my_stuff = prepped_stuff\n    assert 2 == my_stuff.bar\n    my_stuff.bar = 42\n    assert 42 == my_stuff.bar"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def test_foo_updates(prepped_stuff):\n    my_stuff = prepped_stuff\n    assert 1 == my_stuff.foo\n    my_stuff.foo = 30000\n    assert my_stuff.foo == 30000\n\n\ndef test_bar_updates(prepped_stuff):\n    my_stuff = prepped_stuff\n    assert 2 == my_stuff.bar\n    my_stuff.bar = 42\n    assert 42 == my_stuff.bar",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "e2c0333a-d639-4b6a-ad13-2688f21f8065",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319038,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now you can see why we named it with a noun. but the "
            ],
            [
              "my_stuff = prepped_stuff",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " line is pretty much useless, so let’s just use "
            ],
            [
              "prepped_stuff",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " directly instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now you can see why we named it with a noun. but the "
          },
          {
            "Text": "my_stuff = prepped_stuff",
            "AttrFlags": 2
          },
          {
            "Text": " line is pretty much useless, so let’s just use "
          },
          {
            "Text": "prepped_stuff",
            "AttrFlags": 2
          },
          {
            "Text": " directly instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "7cbfee4c-3d68-485b-b9e5-6c6daa37815c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def test_foo_updates(prepped_stuff):\n    assert 1 == prepped_stuff.foo\n    prepped_stuff.foo = 30000\n    assert prepped_stuff.foo == 30000\n\n\ndef test_bar_updates(prepped_stuff):\n    assert 2 == prepped_stuff.bar\n    prepped_stuff.bar = 42\n    assert 42 == prepped_stuff.bar"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def test_foo_updates(prepped_stuff):\n    assert 1 == prepped_stuff.foo\n    prepped_stuff.foo = 30000\n    assert prepped_stuff.foo == 30000\n\n\ndef test_bar_updates(prepped_stuff):\n    assert 2 == prepped_stuff.bar\n    prepped_stuff.bar = 42\n    assert 42 == prepped_stuff.bar",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "fefbb42c-937c-4ff3-a61d-74deb315fdfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319038,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we’re using fixtures! We can go further by changing the scope of the fixture (so it only runs once per test module or test suite execution session instead of once per test function), building fixtures that use other fixtures, parametrizing the fixture (so that the fixture and all tests using that fixture are run multiple times, once for each parameter given to the fixture), fixtures that read values from the module that calls them… as mentioned earlier, fixtures have a lot more power and flexibility than a normal setup function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we’re using fixtures! We can go further by changing the scope of the fixture (so it only runs once per test module or test suite execution session instead of once per test function), building fixtures that use other fixtures, parametrizing the fixture (so that the fixture and all tests using that fixture are run multiple times, once for each parameter given to the fixture), fixtures that read values from the module that calls them… as mentioned earlier, fixtures have a lot more power and flexibility than a normal setup function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319038,
        "id": "cb7c79b9-0ed4-465a-a54c-97991c9e5c9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319038,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Cleaning up after the tests are done."
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Cleaning up after the tests are done."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "57387f4e-aae8-441e-9321-8bedbe7ae98e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319039,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say our code has grown and our Stuff object now needs special clean up."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say our code has grown and our Stuff object now needs special clean up."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "8a582ece-a46d-4ef8-aaec-e50b1c60900a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# projectroot/module/stuff.py\nclass Stuff(object):\ndef prep(self):\n    self.foo = 1\n    self.bar = 2\n\ndef finish(self):\n    self.foo = 0\n    self.bar = 0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# projectroot/module/stuff.py\nclass Stuff(object):\ndef prep(self):\n    self.foo = 1\n    self.bar = 2\n\ndef finish(self):\n    self.foo = 0\n    self.bar = 0",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "e9437165-ced8-4d56-b009-88a596f92bbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319039,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We could add some code to call the clean up at the bottom of every test function, but fixtures provide a better way to do this. If you add a function to the fixture and register it as a "
            ],
            [
              "finalizer",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", the code in the finalizer function will get called after the test using the fixture is done. If the scope of the fixture is larger than a single function (like module or session), the finalizer will be executed after all the tests in scope are completed, so after the module is done running or at the end of the entire test running session."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We could add some code to call the clean up at the bottom of every test function, but fixtures provide a better way to do this. If you add a function to the fixture and register it as a "
          },
          {
            "Text": "finalizer",
            "AttrFlags": 1
          },
          {
            "Text": ", the code in the finalizer function will get called after the test using the fixture is done. If the scope of the fixture is larger than a single function (like module or session), the finalizer will be executed after all the tests in scope are completed, so after the module is done running or at the end of the entire test running session."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "8bc27ab2-f09c-454d-9a1f-49d5d15ec1e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@pytest.fixture\ndef prepped_stuff(request):  # we need to pass in the request to use finalizers\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    def fin():  # finalizer function\n        # do all the cleanup here\n        my_stuff.finish()\n    request.addfinalizer(fin)  # register fin() as a finalizer\n    # you can do more setup here if you really want to\n    return my_stuff"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@pytest.fixture\ndef prepped_stuff(request):  # we need to pass in the request to use finalizers\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    def fin():  # finalizer function\n        # do all the cleanup here\n        my_stuff.finish()\n    request.addfinalizer(fin)  # register fin() as a finalizer\n    # you can do more setup here if you really want to\n    return my_stuff",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "dbdc47ef-9ce5-4336-b64e-5d118a2b6d6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319039,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the finalizer function inside a function can be a bit hard to understand at first glance, especially when you have more complicated fixtures. You can instead use a "
            ],
            [
              "yield fixture",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " to do the same thing with a more human readable execution flow. The only real difference is that instead of using "
            ],
            [
              "return",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we use a "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " at the part of the fixture where the setup is done and control should go to a test function, then add all the cleanup code after the "
            ],
            [
              "yield",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We also decorate it as a "
            ],
            [
              "yield_fixture",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " so that py.test knows how to handle it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the finalizer function inside a function can be a bit hard to understand at first glance, especially when you have more complicated fixtures. You can instead use a "
          },
          {
            "Text": "yield fixture",
            "AttrFlags": 1
          },
          {
            "Text": " to do the same thing with a more human readable execution flow. The only real difference is that instead of using "
          },
          {
            "Text": "return",
            "AttrFlags": 2
          },
          {
            "Text": " we use a "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": " at the part of the fixture where the setup is done and control should go to a test function, then add all the cleanup code after the "
          },
          {
            "Text": "yield",
            "AttrFlags": 2
          },
          {
            "Text": ". We also decorate it as a "
          },
          {
            "Text": "yield_fixture",
            "AttrFlags": 2
          },
          {
            "Text": " so that py.test knows how to handle it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "9e2cdba4-844b-4334-85c9-4d77f3ffac4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346900000,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@pytest.yield_fixture\ndef prepped_stuff():  # it doesn't need request now!\n    # do setup\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    # setup is done, pass control to the test functions\n    yield my_stuff\n    # do cleanup \n    my_stuff.finish()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@pytest.yield_fixture\ndef prepped_stuff():  # it doesn't need request now!\n    # do setup\n    my_stuff = stuff.Stuff()\n    my_stuff.prep()\n    # setup is done, pass control to the test functions\n    yield my_stuff\n    # do cleanup \n    my_stuff.finish()",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319039,
        "id": "7719e3fe-8a4c-4be6-a3b5-39b9f2ee5015",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319039,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And that concludes the Intro to Test Fixtures!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And that concludes the Intro to Test Fixtures!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346319041,
        "id": "536bcd45-e793-42c1-983e-51b69d158712",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346319041,
        "parent_id": "66c95eb6-74b1-4293-a682-aeb50e4ab447",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For more information, see the "
            ],
            [
              "official py.test fixture documentation",
              [
                [
                  "a",
                  "http://doc.pytest.org/en/latest/fixture.html"
                ]
              ]
            ],
            [
              " and the "
            ],
            [
              "official yield fixture documentation",
              [
                [
                  "a",
                  "http://doc.pytest.org/en/latest/yieldfixture.html"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For more information, see the "
          },
          {
            "Text": "official py.test fixture documentation",
            "Link": "http://doc.pytest.org/en/latest/fixture.html"
          },
          {
            "Text": " and the "
          },
          {
            "Text": "official yield fixture documentation",
            "Link": "http://doc.pytest.org/en/latest/yieldfixture.html"
          }
        ]
      }
    ],
    "title": "Intro to Test Fixtures",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}