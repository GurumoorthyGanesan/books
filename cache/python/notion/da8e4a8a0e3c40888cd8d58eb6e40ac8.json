{
  "ID": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
  "Root": {
    "alive": true,
    "content": [
      "56131a68-712a-4121-ad02-f6d14db051b1",
      "7ca1b8bd-36a9-479c-8987-ed029357871d",
      "67bbee2d-e459-4ab7-aa60-cc6747f0f6cf",
      "b134a0dc-5d67-4542-8cde-5e56bdd89aa1",
      "ea008b33-d461-4fe1-abbd-b7fc78967abf",
      "ab394544-93a3-4113-b06d-10d47f45f8c8",
      "ae8c57ae-2d7c-40bc-b164-e62f1ec7adf1",
      "2dd0fbc5-3976-416b-b71a-d0e5ebf6b20b",
      "e0fb957b-b737-4977-a31b-b5ec2cf9491d",
      "ee3d6a85-acab-431a-a23e-b3da43192a54",
      "9ae51618-57c2-47e8-99dc-743b06f01aee",
      "22d689ab-5f3a-4357-a1b9-8fd2522799f9",
      "18c3aa90-77e7-4030-b4f8-2882f8f0f1d7",
      "ef3c57f5-f559-4f7f-be6c-b8350619445d",
      "9989cc8f-533e-4c8e-8c88-b71b046fbf92",
      "cb7e20df-ddfa-49a0-955c-adf3e8110e59",
      "c0988744-632a-4182-acbf-4443199d5d25",
      "cbf6a0c6-b46a-4299-ae5f-135a5fae2f0b",
      "a1b55409-71e4-4db4-9aa9-60e093c27553",
      "18acd9d2-50a2-41d6-a926-736f5ca9fb55",
      "3ca4ba9d-2d82-4140-8b94-463089029f72",
      "735aaf78-3351-42f5-8b7a-2ca1a7fce670",
      "f897020c-2c02-4b7d-8a7d-c4b0c0aa6128",
      "7d79c30c-714b-45b2-9ac8-c4d04de4fd3c",
      "b21ea2d3-e40f-4840-ae1a-1b1fb59ff6be",
      "1066609f-cf87-4a9f-8251-9e940f985035",
      "293fa0ad-2152-4969-b5c6-0a8e6eba4152",
      "f9f5d294-46be-4ec5-93cf-d61a0bd828b8",
      "5c3b0d26-ee6b-41c2-9e04-c8ac074a09be"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550267082547,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550267640000,
    "parent_id": "7b2ed094-b20e-4b46-88a8-b786c61a0c44",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Infinity and NaN not a number"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082541,
        "id": "56131a68-712a-4121-ad02-f6d14db051b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082541,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In all versions of Python, we can represent infinity and NaN (“not a number”) as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In all versions of Python, we can represent infinity and NaN (“not a number”) as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082543,
        "id": "7ca1b8bd-36a9-479c-8987-ed029357871d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "pos_inf = float('inf')     # positive infinity\nneg_inf = float('-inf')    # negative infinity\nnot_a_num = float('nan')   # NaN (\"not a number\")"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pos_inf = float('inf')     # positive infinity\nneg_inf = float('-inf')    # negative infinity\nnot_a_num = float('nan')   # NaN (\"not a number\")",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082544,
        "id": "67bbee2d-e459-4ab7-aa60-cc6747f0f6cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082544,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 3.5 and higher, we can also use the defined constants "
            ],
            [
              "math.inf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "math.nan",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 3.5 and higher, we can also use the defined constants "
          },
          {
            "Text": "math.inf",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "math.nan",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082544,
        "id": "b134a0dc-5d67-4542-8cde-5e56bdd89aa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "pos_inf = math.inf\nneg_inf = -math.inf\nnot_a_num = math.nan"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pos_inf = math.inf\nneg_inf = -math.inf\nnot_a_num = math.nan",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082544,
        "id": "ea008b33-d461-4fe1-abbd-b7fc78967abf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082544,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The string representations display as "
            ],
            [
              "inf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "-inf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "nan",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The string representations display as "
          },
          {
            "Text": "inf",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "-inf",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "nan",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082544,
        "id": "ab394544-93a3-4113-b06d-10d47f45f8c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "pos_inf, neg_inf, not_a_num\n# Out: (inf, -inf, nan)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pos_inf, neg_inf, not_a_num\n# Out: (inf, -inf, nan)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "ae8c57ae-2d7c-40bc-b164-e62f1ec7adf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082545,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can test for either positive or negative infinity with the "
            ],
            [
              "isinf",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can test for either positive or negative infinity with the "
          },
          {
            "Text": "isinf",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "2dd0fbc5-3976-416b-b71a-d0e5ebf6b20b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "math.isinf(pos_inf)\n# Out: True\n\nmath.isinf(neg_inf)\n# Out: True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "math.isinf(pos_inf)\n# Out: True\n\nmath.isinf(neg_inf)\n# Out: True",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "e0fb957b-b737-4977-a31b-b5ec2cf9491d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082545,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can test specifically for positive infinity or for negative infinity by direct comparison:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can test specifically for positive infinity or for negative infinity by direct comparison:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "ee3d6a85-acab-431a-a23e-b3da43192a54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "pos_inf == float('inf')    # or  == math.inf in Python 3.5+\n# Out: True\n\nneg_inf == float('-inf')   # or  == -math.inf in Python 3.5+\n# Out: True\n\nneg_inf == pos_inf\n# Out: False"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pos_inf == float('inf')    # or  == math.inf in Python 3.5+\n# Out: True\n\nneg_inf == float('-inf')   # or  == -math.inf in Python 3.5+\n# Out: True\n\nneg_inf == pos_inf\n# Out: False",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "9ae51618-57c2-47e8-99dc-743b06f01aee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082545,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python 3.2 and higher also allows checking for finiteness:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python 3.2 and higher also allows checking for finiteness:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "22d689ab-5f3a-4357-a1b9-8fd2522799f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "math.isfinite(pos_inf)\n# Out: False\n\nmath.isfinite(0.0)\n# Out: True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "math.isfinite(pos_inf)\n# Out: False\n\nmath.isfinite(0.0)\n# Out: True",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "18c3aa90-77e7-4030-b4f8-2882f8f0f1d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082545,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Comparison operators work as expected for positive and negative infinity:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Comparison operators work as expected for positive and negative infinity:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "ef3c57f5-f559-4f7f-be6c-b8350619445d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import sys\n\nsys.float_info.max\n# Out: 1.7976931348623157e+308  (this is system-dependent)\n\npos_inf \u003e sys.float_info.max\n# Out: True\n\nneg_inf \u003c -sys.float_info.max\n# Out: True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import sys\n\nsys.float_info.max\n# Out: 1.7976931348623157e+308  (this is system-dependent)\n\npos_inf \u003e sys.float_info.max\n# Out: True\n\nneg_inf \u003c -sys.float_info.max\n# Out: True",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "9989cc8f-533e-4c8e-8c88-b71b046fbf92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082545,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But if an arithmetic expression produces a value larger than the maximum that can be represented as a "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it will become infinity:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But if an arithmetic expression produces a value larger than the maximum that can be represented as a "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": ", it will become infinity:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082545,
        "id": "cb7e20df-ddfa-49a0-955c-adf3e8110e59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "pos_inf == sys.float_info.max * 1.0000001\n# Out: True\n\nneg_inf == -sys.float_info.max * 1.0000001\n# Out: True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pos_inf == sys.float_info.max * 1.0000001\n# Out: True\n\nneg_inf == -sys.float_info.max * 1.0000001\n# Out: True",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "c0988744-632a-4182-acbf-4443199d5d25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082546,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However division by zero does not give a result of infinity (or negative infinity where appropriate), rather it raises a "
            ],
            [
              "ZeroDivisionError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exception."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However division by zero does not give a result of infinity (or negative infinity where appropriate), rather it raises a "
          },
          {
            "Text": "ZeroDivisionError",
            "AttrFlags": 2
          },
          {
            "Text": " exception."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "cbf6a0c6-b46a-4299-ae5f-135a5fae2f0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "try:\n    x = 1.0 / 0.0\n    print(x)\nexcept ZeroDivisionError:\n    print(\"Division by zero\")\n\n# Out: Division by zero"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "try:\n    x = 1.0 / 0.0\n    print(x)\nexcept ZeroDivisionError:\n    print(\"Division by zero\")\n\n# Out: Division by zero",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "a1b55409-71e4-4db4-9aa9-60e093c27553",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082546,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arithmetic operations on infinity just give infinite results, or sometimes NaN:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arithmetic operations on infinity just give infinite results, or sometimes NaN:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "18acd9d2-50a2-41d6-a926-736f5ca9fb55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "-5.0 * pos_inf == neg_inf\n# Out: True\n\n-5.0 * neg_inf == pos_inf\n# Out: True\n\npos_inf * neg_inf == neg_inf\n# Out: True\n\n0.0 * pos_inf\n# Out: nan\n\n0.0 * neg_inf\n# Out: nan\n\npos_inf / pos_inf\n# Out: nan"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "-5.0 * pos_inf == neg_inf\n# Out: True\n\n-5.0 * neg_inf == pos_inf\n# Out: True\n\npos_inf * neg_inf == neg_inf\n# Out: True\n\n0.0 * pos_inf\n# Out: nan\n\n0.0 * neg_inf\n# Out: nan\n\npos_inf / pos_inf\n# Out: nan",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "3ca4ba9d-2d82-4140-8b94-463089029f72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082546,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NaN is never equal to anything, not even itself. We can test for it is with the "
            ],
            [
              "isnan",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NaN is never equal to anything, not even itself. We can test for it is with the "
          },
          {
            "Text": "isnan",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "735aaf78-3351-42f5-8b7a-2ca1a7fce670",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "not_a_num == not_a_num\n# Out: False\n\nmath.isnan(not_a_num)\nOut: True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "not_a_num == not_a_num\n# Out: False\n\nmath.isnan(not_a_num)\nOut: True",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "f897020c-2c02-4b7d-8a7d-c4b0c0aa6128",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082546,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NaN always compares as “not equal”, but never less than or greater than:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NaN always compares as “not equal”, but never less than or greater than:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "7d79c30c-714b-45b2-9ac8-c4d04de4fd3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "not_a_num != 5.0   # or any random value\n# Out: True\n\nnot_a_num \u003e 5.0   or   not_a_num \u003c 5.0   or   not_a_num == 5.0\n# Out: False"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "not_a_num != 5.0   # or any random value\n# Out: True\n\nnot_a_num \u003e 5.0   or   not_a_num \u003c 5.0   or   not_a_num == 5.0\n# Out: False",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082546,
        "id": "b21ea2d3-e40f-4840-ae1a-1b1fb59ff6be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082546,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Arithmetic operations on NaN always give NaN. This includes multiplication by -1: there is no “negative NaN”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Arithmetic operations on NaN always give NaN. This includes multiplication by -1: there is no “negative NaN”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082547,
        "id": "1066609f-cf87-4a9f-8251-9e940f985035",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "5.0 * not_a_num\n# Out: nan\n\nfloat('-nan')\n# Out: nan"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "5.0 * not_a_num\n# Out: nan\n\nfloat('-nan')\n# Out: nan",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082547,
        "id": "293fa0ad-2152-4969-b5c6-0a8e6eba4152",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "-math.nan\n# Out: nan"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "-math.nan\n# Out: nan",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082547,
        "id": "f9f5d294-46be-4ec5-93cf-d61a0bd828b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267082547,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is one subtle difference between the old "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " versions of NaN and infinity and the Python 3.5+ "
            ],
            [
              "math",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " library constants:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is one subtle difference between the old "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " versions of NaN and infinity and the Python 3.5+ "
          },
          {
            "Text": "math",
            "AttrFlags": 2
          },
          {
            "Text": " library constants:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550267082547,
        "id": "5c3b0d26-ee6b-41c2-9e04-c8ac074a09be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550267640000,
        "parent_id": "da8e4a8a-0e3c-4088-8cd8-d58eb6e40ac8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "math.inf is math.inf, math.nan is math.nan\n# Out: (True, True)\n\nfloat('inf') is float('inf'), float('nan') is float('nan')\n# Out: (False, False)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "math.inf is math.inf, math.nan is math.nan\n# Out: (True, True)\n\nfloat('inf') is float('inf'), float('nan') is float('nan')\n# Out: (False, False)",
        "code_language": "Python"
      }
    ],
    "title": "Infinity and NaN not a number",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}