{
  "ID": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
  "Root": {
    "alive": true,
    "content": [
      "39fb6eca-3d50-4747-94fa-c32e07109875",
      "a41dcbf4-592d-4d21-98a3-a089684ba3f8",
      "33ab7b91-866b-41c4-914f-5db87f66632c",
      "cef4bc42-d200-42aa-b607-98c317571500",
      "94ef8a77-48ce-4a8c-82c5-43f56c752c3e",
      "eb749143-1b6c-4830-afef-e2ceee5ca61b",
      "9e280cbd-4f8a-446e-b57f-b753536b9437",
      "d2b538f8-deaf-4bff-b3c8-74e9267d0cd9",
      "cf2522db-670a-4e4a-bc33-e9b1b0f24748",
      "f4da7f64-72b6-4e98-a8a3-a6142c82c095",
      "0705370a-0a3e-40b0-ba87-aba59c63a52b",
      "0ef82ee6-5eb4-4b43-8f17-7cbafbba3ae9",
      "21d11392-2800-45c2-8382-fa9886814d8b",
      "24615b51-bfc8-477d-9a03-68929e3d907e",
      "a896b1be-6201-4756-8d43-12b73a2954d3",
      "0c951d66-208a-4641-b4b2-d3c23b51a590",
      "739c2ca5-161e-4044-901d-b8f29fdfc6cb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550310906645,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550311080000,
    "parent_id": "305111c8-efce-4cf2-b2ae-7b5e31a27b42",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Class methods alternate initializers"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906640,
        "id": "39fb6eca-3d50-4747-94fa-c32e07109875",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906640,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Class methods present alternate ways to build instances of classes. To illustrate, let’s look at an example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Class methods present alternate ways to build instances of classes. To illustrate, let’s look at an example."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906641,
        "id": "a41dcbf4-592d-4d21-98a3-a089684ba3f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906641,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s suppose we have a relatively simple "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s suppose we have a relatively simple "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906641,
        "id": "33ab7b91-866b-41c4-914f-5db87f66632c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311080000,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Person(object):\n\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.full_name = first_name + \" \" + last_name\n    \n    def greet(self):\n        print(\"Hello, my name is \" + self.full_name + \".\")"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Person(object):\n\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.full_name = first_name + \" \" + last_name\n    \n    def greet(self):\n        print(\"Hello, my name is \" + self.full_name + \".\")",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906641,
        "id": "cef4bc42-d200-42aa-b607-98c317571500",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906641,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It might be handy to have a way to build instances of this class specifying a full name instead of first and last name separately. One way to do this would be to have "
            ],
            [
              "last_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " be an optional parameter, and assuming that if it isn’t given, we passed the full name in:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It might be handy to have a way to build instances of this class specifying a full name instead of first and last name separately. One way to do this would be to have "
          },
          {
            "Text": "last_name",
            "AttrFlags": 2
          },
          {
            "Text": " be an optional parameter, and assuming that if it isn’t given, we passed the full name in:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906641,
        "id": "94ef8a77-48ce-4a8c-82c5-43f56c752c3e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311080000,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Person(object):\n\n    def __init__(self, first_name, age, last_name=None):\n        if last_name is None:\n            self.first_name, self.last_name = first_name.split(\" \", 2)\n        else:\n            self.first_name = first_name\n            self.last_name = last_name\n        \n        self.full_name = self.first_name + \" \" + self.last_name\n        self.age = age\n\n    def greet(self):\n        print(\"Hello, my name is \" + self.full_name + \".\")"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Person(object):\n\n    def __init__(self, first_name, age, last_name=None):\n        if last_name is None:\n            self.first_name, self.last_name = first_name.split(\" \", 2)\n        else:\n            self.first_name = first_name\n            self.last_name = last_name\n        \n        self.full_name = self.first_name + \" \" + self.last_name\n        self.age = age\n\n    def greet(self):\n        print(\"Hello, my name is \" + self.full_name + \".\")",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906642,
        "id": "eb749143-1b6c-4830-afef-e2ceee5ca61b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906642,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, there are two main problems with this bit of code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, there are two main problems with this bit of code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906642,
        "id": "9e280cbd-4f8a-446e-b57f-b753536b9437",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906642,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The parameters "
            ],
            [
              "first_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "last_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are now misleading, since you can enter a full name for "
            ],
            [
              "first_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Also, if there are more cases and/or more parameters that have this kind of flexibility, the if/elif/else branching can get annoying fast."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The parameters "
          },
          {
            "Text": "first_name",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "last_name",
            "AttrFlags": 2
          },
          {
            "Text": " are now misleading, since you can enter a full name for "
          },
          {
            "Text": "first_name",
            "AttrFlags": 2
          },
          {
            "Text": ". Also, if there are more cases and/or more parameters that have this kind of flexibility, the if/elif/else branching can get annoying fast."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906643,
        "id": "d2b538f8-deaf-4bff-b3c8-74e9267d0cd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906643,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not quite as important, but still worth pointing out: what if "
            ],
            [
              "last_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but "
            ],
            [
              "first_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " doesn’t split into two or more things via spaces? We have yet another layer of input validation and/or exception handling…"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not quite as important, but still worth pointing out: what if "
          },
          {
            "Text": "last_name",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": ", but "
          },
          {
            "Text": "first_name",
            "AttrFlags": 2
          },
          {
            "Text": " doesn’t split into two or more things via spaces? We have yet another layer of input validation and/or exception handling…"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906643,
        "id": "cf2522db-670a-4e4a-bc33-e9b1b0f24748",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906643,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Enter class methods. Rather than having a single initializer, we will create a separate initializer, called "
            ],
            [
              "from_full_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and decorate it with the (built-in) "
            ],
            [
              "classmethod",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " decorator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Enter class methods. Rather than having a single initializer, we will create a separate initializer, called "
          },
          {
            "Text": "from_full_name",
            "AttrFlags": 2
          },
          {
            "Text": ", and decorate it with the (built-in) "
          },
          {
            "Text": "classmethod",
            "AttrFlags": 2
          },
          {
            "Text": " decorator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906643,
        "id": "f4da7f64-72b6-4e98-a8a3-a6142c82c095",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311080000,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Person(object):\n\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.full_name = first_name + \" \" + last_name\n    \n    @classmethod\n    def from_full_name(cls, name, age):\n        if \" \" not in name:\n            raise ValueError\n        first_name, last_name = name.split(\" \", 2)\n        return cls(first_name, last_name, age)\n    \n    def greet(self):\n        print(\"Hello, my name is \" + self.full_name + \".\")"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Person(object):\n\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.full_name = first_name + \" \" + last_name\n    \n    @classmethod\n    def from_full_name(cls, name, age):\n        if \" \" not in name:\n            raise ValueError\n        first_name, last_name = name.split(\" \", 2)\n        return cls(first_name, last_name, age)\n    \n    def greet(self):\n        print(\"Hello, my name is \" + self.full_name + \".\")",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906644,
        "id": "0705370a-0a3e-40b0-ba87-aba59c63a52b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906644,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice "
            ],
            [
              "cls",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "self",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as the first argument to "
            ],
            [
              "from_full_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Class methods are applied to the overall class, "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " an instance of a given class (which is what "
            ],
            [
              "self",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " usually denotes). So, if "
            ],
            [
              "cls",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is our "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class, then the returned value from the "
            ],
            [
              "from_full_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class method is "
            ],
            [
              "Person(first_name, last_name, age)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which uses "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s "
            ],
            [
              "__init__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to create an instance of the "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class. In particular, if we were to make a subclass "
            ],
            [
              "Employee",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", then "
            ],
            [
              "from_full_name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would work in the "
            ],
            [
              "Employee",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice "
          },
          {
            "Text": "cls",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "self",
            "AttrFlags": 2
          },
          {
            "Text": " as the first argument to "
          },
          {
            "Text": "from_full_name",
            "AttrFlags": 2
          },
          {
            "Text": ". Class methods are applied to the overall class, "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " an instance of a given class (which is what "
          },
          {
            "Text": "self",
            "AttrFlags": 2
          },
          {
            "Text": " usually denotes). So, if "
          },
          {
            "Text": "cls",
            "AttrFlags": 2
          },
          {
            "Text": " is our "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " class, then the returned value from the "
          },
          {
            "Text": "from_full_name",
            "AttrFlags": 2
          },
          {
            "Text": " class method is "
          },
          {
            "Text": "Person(first_name, last_name, age)",
            "AttrFlags": 2
          },
          {
            "Text": ", which uses "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": "’s "
          },
          {
            "Text": "__init__",
            "AttrFlags": 2
          },
          {
            "Text": " to create an instance of the "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " class. In particular, if we were to make a subclass "
          },
          {
            "Text": "Employee",
            "AttrFlags": 2
          },
          {
            "Text": " of "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": ", then "
          },
          {
            "Text": "from_full_name",
            "AttrFlags": 2
          },
          {
            "Text": " would work in the "
          },
          {
            "Text": "Employee",
            "AttrFlags": 2
          },
          {
            "Text": " class as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906644,
        "id": "0ef82ee6-5eb4-4b43-8f17-7cbafbba3ae9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906644,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To show that this works as expected, let’s create instances of "
            ],
            [
              "Person",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in more than one way without the branching in "
            ],
            [
              "__init__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To show that this works as expected, let’s create instances of "
          },
          {
            "Text": "Person",
            "AttrFlags": 2
          },
          {
            "Text": " in more than one way without the branching in "
          },
          {
            "Text": "__init__",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906644,
        "id": "21d11392-2800-45c2-8382-fa9886814d8b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311080000,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "In [2]: bob = Person(\"Bob\", \"Bobberson\", 42)\n\nIn [3]: alice = Person.from_full_name(\"Alice Henderson\", 31)\n\nIn [4]: bob.greet()\nHello, my name is Bob Bobberson.\n\nIn [5]: alice.greet()\nHello, my name is Alice Henderson."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "In [2]: bob = Person(\"Bob\", \"Bobberson\", 42)\n\nIn [3]: alice = Person.from_full_name(\"Alice Henderson\", 31)\n\nIn [4]: bob.greet()\nHello, my name is Bob Bobberson.\n\nIn [5]: alice.greet()\nHello, my name is Alice Henderson.",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906644,
        "id": "24615b51-bfc8-477d-9a03-68929e3d907e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906644,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other references:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other references:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906645,
        "id": "a896b1be-6201-4756-8d43-12b73a2954d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906645,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906645,
        "id": "0c951d66-208a-4641-b4b2-d3c23b51a590",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906645,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "https://docs.python.org/2/library/functions.html#classmethod"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "https://docs.python.org/2/library/functions.html#classmethod"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310906645,
        "id": "739c2ca5-161e-4044-901d-b8f29fdfc6cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310906645,
        "parent_id": "38b9ce9b-4e88-4f18-9a93-8411238150bc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "https://docs.python.org/3.5/library/functions.html#classmethod"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "https://docs.python.org/3.5/library/functions.html#classmethod"
          }
        ]
      }
    ],
    "title": "Class methods alternate initializers",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}