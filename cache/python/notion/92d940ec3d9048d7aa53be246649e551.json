{
  "ID": "92d940ec-3d90-48d7-aa53-be246649e551",
  "Root": {
    "alive": true,
    "content": [
      "88fb8f16-acc5-4bc3-9641-5b2125880885",
      "f9c3854f-e104-471d-b445-5492fdaf8dd1",
      "b5c56338-8990-4945-8302-ccc43adac525",
      "3ffc0522-4071-46d8-8d65-14a742c0152f",
      "bb803a28-4deb-4c4f-b0ff-14d13704c998",
      "4a8a2e57-6be6-4812-8fbf-9668695fa13e",
      "8dca4d8c-6111-4f8d-a111-718573a649b3",
      "7cda4c1c-c629-461d-90e4-4ac1211ec0e9",
      "5e308199-d215-421c-aaa8-86d9a3f7cdfd",
      "59fd87f6-7e64-4b0b-8ff7-fef51a2cf406",
      "e34a5272-a202-4021-85ba-70df184d71aa",
      "c5ad77dd-2d21-4f77-81ab-e8980053a1a1",
      "ce05f681-512e-4453-a2b4-869290acdbcf",
      "f9ff5dad-3b41-4974-9c81-4a6d803457c7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390498153,
    "id": "92d940ec-3d90-48d7-aa53-be246649e551",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550472840000,
    "parent_id": "da277847-f950-4459-ad97-133ea0ad78ce",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Setters Getters Properties"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498148,
        "id": "88fb8f16-acc5-4bc3-9641-5b2125880885",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498148,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the sake of data encapsulation, sometimes you want to have an attribute which value comes from other attributes or, in general, which value shall be computed at the moment. The standard way to deal with this situation is to create a method, called getter or a setter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the sake of data encapsulation, sometimes you want to have an attribute which value comes from other attributes or, in general, which value shall be computed at the moment. The standard way to deal with this situation is to create a method, called getter or a setter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498150,
        "id": "f9c3854f-e104-471d-b445-5492fdaf8dd1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498150,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498151,
        "id": "b5c56338-8990-4945-8302-ccc43adac525",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498151,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the example above, it’s easy to see what happens if we create a new Book that contains a title and a author. If all books we’re to add to our Library have authors and titles, then we can skip the getters and setters and use the dot notation. However, suppose we have some books that do not have an author and we want to set the author to “Unknown”. Or if they have multiple authors and we plan to return a list of authors."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the example above, it’s easy to see what happens if we create a new Book that contains a title and a author. If all books we’re to add to our Library have authors and titles, then we can skip the getters and setters and use the dot notation. However, suppose we have some books that do not have an author and we want to set the author to “Unknown”. Or if they have multiple authors and we plan to return a list of authors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "3ffc0522-4071-46d8-8d65-14a742c0152f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case we can create a getter and a setter for the "
            ],
            [
              "author",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " attribute."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case we can create a getter and a setter for the "
          },
          {
            "Text": "author",
            "AttrFlags": 4
          },
          {
            "Text": " attribute."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "bb803a28-4deb-4c4f-b0ff-14d13704c998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class P:\n    def __init__(self,title,author):\n        self.title = title\n        self.setAuthor(author)\n\n    def get_author(self):\n        return self.author\n\n    def set_author(self, author):\n        if not author: \n            self.author = \"Unknown\"\n        else:\n            self.author = author"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class P:\n    def __init__(self,title,author):\n        self.title = title\n        self.setAuthor(author)\n\n    def get_author(self):\n        return self.author\n\n    def set_author(self, author):\n        if not author: \n            self.author = \"Unknown\"\n        else:\n            self.author = author",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "4a8a2e57-6be6-4812-8fbf-9668695fa13e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This scheme is not recommended."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This scheme is not recommended."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "8dca4d8c-6111-4f8d-a111-718573a649b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One reason is that there is a catch: Let’s assume we have designed our class with the public attribute and no methods. People have already used it a lot and they have written code like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One reason is that there is a catch: Let’s assume we have designed our class with the public attribute and no methods. People have already used it a lot and they have written code like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "7cda4c1c-c629-461d-90e4-4ac1211ec0e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e book = Book(title=\"Ancient Manuscript\", author=\"Some Guy\")\n\u003e\u003e\u003e book.author = \"\"  #Cos Some Guy didn't write this one!"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e book = Book(title=\"Ancient Manuscript\", author=\"Some Guy\")\n\u003e\u003e\u003e book.author = \"\"  #Cos Some Guy didn't write this one!",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "5e308199-d215-421c-aaa8-86d9a3f7cdfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we have a problem. Because "
            ],
            [
              "author",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is not an attribute! Python offers a solution to this problem called properties. A method to get properties is decorated with the @property before it’s header. The method that we want to function as a setter is decorated with @attributeName.setter before it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we have a problem. Because "
          },
          {
            "Text": "author",
            "AttrFlags": 4
          },
          {
            "Text": " is not an attribute! Python offers a solution to this problem called properties. A method to get properties is decorated with the @property before it’s header. The method that we want to function as a setter is decorated with @attributeName.setter before it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "59fd87f6-7e64-4b0b-8ff7-fef51a2cf406",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Keeping this in mind, we now have our new updated class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Keeping this in mind, we now have our new updated class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498152,
        "id": "e34a5272-a202-4021-85ba-70df184d71aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498152,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    @property\n    def author(self):\n        return self.__author\n\n    @author.setter\n    def author(self, author):\n        if not author: \n            self.author = \"Unknown\"\n        else:\n            self.author = author"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    @property\n    def author(self):\n        return self.__author\n\n    @author.setter\n    def author(self, author):\n        if not author: \n            self.author = \"Unknown\"\n        else:\n            self.author = author",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498153,
        "id": "c5ad77dd-2d21-4f77-81ab-e8980053a1a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498153,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note, normally Python doesn’t allow you to have multiple methods with the same name and different number of parameters. However, in this case Python allows this because of the decorators used."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note, normally Python doesn’t allow you to have multiple methods with the same name and different number of parameters. However, in this case Python allows this because of the decorators used."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498153,
        "id": "ce05f681-512e-4453-a2b4-869290acdbcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498153,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we test the code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we test the code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390498153,
        "id": "f9ff5dad-3b41-4974-9c81-4a6d803457c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390498153,
        "parent_id": "92d940ec-3d90-48d7-aa53-be246649e551",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e book = Book(title=\"Ancient Manuscript\", author=\"Some Guy\")\n\u003e\u003e\u003e book.author = \"\"  #Cos Some Guy didn't write this one!\n\u003e\u003e\u003e book.author \nUnknown"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e book = Book(title=\"Ancient Manuscript\", author=\"Some Guy\")\n\u003e\u003e\u003e book.author = \"\"  #Cos Some Guy didn't write this one!\n\u003e\u003e\u003e book.author \nUnknown",
        "code_language": "Plain Text"
      }
    ],
    "title": "Setters Getters Properties"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}