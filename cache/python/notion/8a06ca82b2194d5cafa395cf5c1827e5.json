{
  "ID": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
  "Root": {
    "alive": true,
    "content": [
      "209ab1ec-bf2c-4d73-8418-94beed0d1a96",
      "7cd1e530-e533-44ae-b25d-49bce7287fe3",
      "fff5c12a-3001-4d59-a550-e66288e9a7e0",
      "3d4f4a21-2e19-4885-9a46-a2d725151e2e",
      "7abc0ea7-98f5-42bd-9c45-644066ab62eb"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550388849899,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550468280000,
    "parent_id": "2a4bdab1-4a05-4c5d-9f05-61c2e4d09b32",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "MagicDunder Methods"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388849898,
        "id": "209ab1ec-bf2c-4d73-8418-94beed0d1a96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388849898,
        "parent_id": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Magic (also called dunder as an abbreviation for double-underscore) methods in Python serve a similar purpose to operator overloading in other languages. They allow a class to define its behavior when it is used as an operand in unary or binary operator expressions. They also serve as implementations called by some built-in functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Magic (also called dunder as an abbreviation for double-underscore) methods in Python serve a similar purpose to operator overloading in other languages. They allow a class to define its behavior when it is used as an operand in unary or binary operator expressions. They also serve as implementations called by some built-in functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388849898,
        "id": "7cd1e530-e533-44ae-b25d-49bce7287fe3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388849898,
        "parent_id": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider this implementation of two-dimensional vectors."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider this implementation of two-dimensional vectors."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388849898,
        "id": "fff5c12a-3001-4d59-a550-e66288e9a7e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550468280000,
        "parent_id": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import math\n\nclass Vector(object):\n    # instantiation\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    # unary negation (-v)\n    def __neg__(self):\n        return Vector(-self.x, -self.y)\n\n    # addition (v + u)\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    # subtraction (v - u)\n    def __sub__(self, other):\n        return self + (-other)\n\n    # equality (v == u)\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    # abs(v)\n    def __abs__(self):\n        return math.hypot(self.x, self.y)\n\n    # str(v)\n    def __str__(self):\n        return '\u003c{0.x}, {0.y}\u003e'.format(self)\n\n    # repr(v)\n    def __repr__(self):\n        return 'Vector({0.x}, {0.y})'.format(self)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import math\n\nclass Vector(object):\n    # instantiation\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    # unary negation (-v)\n    def __neg__(self):\n        return Vector(-self.x, -self.y)\n\n    # addition (v + u)\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    # subtraction (v - u)\n    def __sub__(self, other):\n        return self + (-other)\n\n    # equality (v == u)\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    # abs(v)\n    def __abs__(self):\n        return math.hypot(self.x, self.y)\n\n    # str(v)\n    def __str__(self):\n        return '\u003c{0.x}, {0.y}\u003e'.format(self)\n\n    # repr(v)\n    def __repr__(self):\n        return 'Vector({0.x}, {0.y})'.format(self)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388849899,
        "id": "3d4f4a21-2e19-4885-9a46-a2d725151e2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388849899,
        "parent_id": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now it is possible to naturally use instances of the "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class in various expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now it is possible to naturally use instances of the "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " class in various expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388849899,
        "id": "7abc0ea7-98f5-42bd-9c45-644066ab62eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550468280000,
        "parent_id": "8a06ca82-b219-4d5c-afa3-95cf5c1827e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "v = Vector(1, 4)\nu = Vector(2, 0)\n\nu + v           # Vector(3, 4)\nprint(u + v)    # \"\u003c3, 4\u003e\" (implicit string conversion)\nu - v           # Vector(1, -4)\nu == v          # False\nu + v == v + u  # True\nabs(u + v)      # 5.0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "v = Vector(1, 4)\nu = Vector(2, 0)\n\nu + v           # Vector(3, 4)\nprint(u + v)    # \"\u003c3, 4\u003e\" (implicit string conversion)\nu - v           # Vector(1, -4)\nu == v          # False\nu + v == v + u  # True\nabs(u + v)      # 5.0",
        "code_language": "Python"
      }
    ],
    "title": "MagicDunder Methods",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}