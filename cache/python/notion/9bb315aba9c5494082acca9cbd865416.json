{
  "ID": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
  "Root": {
    "alive": true,
    "content": [
      "dd3b66de-998e-4d2b-a622-b863cff5ae4f",
      "343fe1da-6227-4627-91ef-6a07e07ec29a",
      "6c4ac873-5703-46af-8d62-a088da7a33f5",
      "5f370a95-aa9c-4eb8-aba9-ba008ddc5490",
      "1f3418da-8292-4c54-8b2a-964d0c995ef5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550306851910,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550307000000,
    "parent_id": "1fe63b14-6a86-4d94-bb88-fd772aa9e50a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Indexing custom classes: getitem, setitem and delitem "
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550306851909,
        "id": "dd3b66de-998e-4d2b-a622-b863cff5ae4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307000000,
        "parent_id": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class MultiIndexingList:\n    def __init__(self, value):\n        self.value = value\n        \n    def __repr__(self):\n        return repr(self.value)\n    \n    def __getitem__(self, item):\n        if isinstance(item, (int, slice)):\n            return self.__class__(self.value[item])\n        return [self.value[i] for i in item]\n    \n    def __setitem__(self, item, value):\n        if isinstance(item, int):\n            self.value[item] = value\n        elif isinstance(item, slice):\n            raise ValueError('Cannot interpret slice with multiindexing')\n        else:\n            for i in item:\n                if isinstance(i, slice):\n                    raise ValueError('Cannot interpret slice with multiindexing')\n                self.value[i] = value\n    \n    def __delitem__(self, item):\n        if isinstance(item, int):\n            del self.value[item]\n        elif isinstance(item, slice):\n            del self.value[item]\n        else:\n            if any(isinstance(elem, slice) for elem in item):\n                raise ValueError('Cannot interpret slice with multiindexing')\n            item = sorted(item, reverse=True)\n            for elem in item:\n                del self.value[elem]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class MultiIndexingList:\n    def __init__(self, value):\n        self.value = value\n        \n    def __repr__(self):\n        return repr(self.value)\n    \n    def __getitem__(self, item):\n        if isinstance(item, (int, slice)):\n            return self.__class__(self.value[item])\n        return [self.value[i] for i in item]\n    \n    def __setitem__(self, item, value):\n        if isinstance(item, int):\n            self.value[item] = value\n        elif isinstance(item, slice):\n            raise ValueError('Cannot interpret slice with multiindexing')\n        else:\n            for i in item:\n                if isinstance(i, slice):\n                    raise ValueError('Cannot interpret slice with multiindexing')\n                self.value[i] = value\n    \n    def __delitem__(self, item):\n        if isinstance(item, int):\n            del self.value[item]\n        elif isinstance(item, slice):\n            del self.value[item]\n        else:\n            if any(isinstance(elem, slice) for elem in item):\n                raise ValueError('Cannot interpret slice with multiindexing')\n            item = sorted(item, reverse=True)\n            for elem in item:\n                del self.value[elem]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550306851910,
        "id": "343fe1da-6227-4627-91ef-6a07e07ec29a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306851910,
        "parent_id": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows slicing and indexing for element access:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows slicing and indexing for element access:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550306851910,
        "id": "6c4ac873-5703-46af-8d62-a088da7a33f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307000000,
        "parent_id": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "a = MultiIndexingList([1,2,3,4,5,6,7,8])\na\n# Out: [1, 2, 3, 4, 5, 6, 7, 8]\na[1,5,2,6,1]\n# Out: [2, 6, 3, 7, 2]\na[4, 1, 5:, 2, ::2]\n# Out: [5, 2, [6, 7, 8], 3, [1, 3, 5, 7]]\n#       4|1-|----50:---|2-|-----::2-----   \u003c-- indicated which element came from which index"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = MultiIndexingList([1,2,3,4,5,6,7,8])\na\n# Out: [1, 2, 3, 4, 5, 6, 7, 8]\na[1,5,2,6,1]\n# Out: [2, 6, 3, 7, 2]\na[4, 1, 5:, 2, ::2]\n# Out: [5, 2, [6, 7, 8], 3, [1, 3, 5, 7]]\n#       4|1-|----50:---|2-|-----::2-----   \u003c-- indicated which element came from which index",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550306851910,
        "id": "5f370a95-aa9c-4eb8-aba9-ba008ddc5490",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306851910,
        "parent_id": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While setting and deleting elements only allows for "
            ],
            [
              "comma seperated",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " integer indexing (no slicing):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While setting and deleting elements only allows for "
          },
          {
            "Text": "comma seperated",
            "AttrFlags": 4
          },
          {
            "Text": " integer indexing (no slicing):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550306851910,
        "id": "1f3418da-8292-4c54-8b2a-964d0c995ef5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307000000,
        "parent_id": "9bb315ab-a9c5-4940-82ac-ca9cbd865416",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "a[4] = 1000\na\n# Out: [1, 2, 3, 4, 1000, 6, 7, 8]\na[2,6,1] = 100\na\n# Out: [1, 100, 100, 4, 1000, 6, 100, 8]\ndel a[5]\na\n# Out: [1, 100, 100, 4, 1000, 100, 8]\ndel a[4,2,5]\na\n# Out: [1, 100, 4, 8]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a[4] = 1000\na\n# Out: [1, 2, 3, 4, 1000, 6, 7, 8]\na[2,6,1] = 100\na\n# Out: [1, 100, 100, 4, 1000, 6, 100, 8]\ndel a[5]\na\n# Out: [1, 100, 100, 4, 1000, 100, 8]\ndel a[4,2,5]\na\n# Out: [1, 100, 4, 8]",
        "code_language": "Python"
      }
    ],
    "title": "Indexing custom classes: getitem, setitem and delitem ",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}