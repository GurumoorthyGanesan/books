{
  "ID": "a0493a5f-f896-49a5-bb71-6b46301a5537",
  "Root": {
    "alive": true,
    "content": [
      "a7908313-ce07-49d7-87db-d0ccd5e66bed",
      "09045ca0-219b-48bf-838d-0fdfc0bf06f0",
      "5def91a2-6f73-4a6f-997f-0082e3826326",
      "14248a65-4a44-40b2-a820-922b2dc6cfd7",
      "bddacc3d-59c3-4d50-ac1e-19e57565323c",
      "2cc37460-3dbb-4765-a394-ac0df29c02a5",
      "e95bcc7d-183a-4326-9a14-26a4f3df1cfc",
      "166a4650-1657-43a7-86eb-7fab15e36507"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550358138422,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550358240000,
    "parent_id": "452808ad-96bf-49e7-9654-c63c69b0f943",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Tree exploration with recursion"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138419,
        "id": "a7908313-ce07-49d7-87db-d0ccd5e66bed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358138419,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Say we have the following tree:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Say we have the following tree:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138421,
        "id": "09045ca0-219b-48bf-838d-0fdfc0bf06f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358138421,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "root\n- A\n  - AA\n  - AB\n- B\n  - BA\n  - BB\n    - BBA"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "root\n- A\n  - AA\n  - AB\n- B\n  - BA\n  - BB\n    - BBA",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138422,
        "id": "5def91a2-6f73-4a6f-997f-0082e3826326",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358138422,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, if we wish to list all the names of the elements, we could do this with a simple for-loop. We assume there is a function "
            ],
            [
              "get_name()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to return a string of the name of a node, a function "
            ],
            [
              "get_children()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to return a list of all the sub-nodes of a given node in the tree, and a function "
            ],
            [
              "get_root()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to get the root node."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, if we wish to list all the names of the elements, we could do this with a simple for-loop. We assume there is a function "
          },
          {
            "Text": "get_name()",
            "AttrFlags": 2
          },
          {
            "Text": " to return a string of the name of a node, a function "
          },
          {
            "Text": "get_children()",
            "AttrFlags": 2
          },
          {
            "Text": " to return a list of all the sub-nodes of a given node in the tree, and a function "
          },
          {
            "Text": "get_root()",
            "AttrFlags": 2
          },
          {
            "Text": " to get the root node."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138422,
        "id": "14248a65-4a44-40b2-a820-922b2dc6cfd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358240000,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "root = get_root(tree)\nfor node in get_children(root):\n    print(get_name(node))\n    for child in get_children(node):\n        print(get_name(child))\n        for grand_child in get_children(child):\n            print(get_name(grand_child))\n# prints: A, AA, AB, B, BA, BB, BBA"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "root = get_root(tree)\nfor node in get_children(root):\n    print(get_name(node))\n    for child in get_children(node):\n        print(get_name(child))\n        for grand_child in get_children(child):\n            print(get_name(grand_child))\n# prints: A, AA, AB, B, BA, BB, BBA",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138422,
        "id": "bddacc3d-59c3-4d50-ac1e-19e57565323c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358138422,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This works well and fast, but what if the sub-nodes, got sub-nodes of its own? And those sub-nodes might have more sub-nodes… What if you don’t know beforehand how many there will be? A method to solve this is the use of recursion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This works well and fast, but what if the sub-nodes, got sub-nodes of its own? And those sub-nodes might have more sub-nodes… What if you don’t know beforehand how many there will be? A method to solve this is the use of recursion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138422,
        "id": "2cc37460-3dbb-4765-a394-ac0df29c02a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358240000,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def list_tree_names(node):\n    for child in get_children(node):\n        print(get_name(child))\n        list_tree_names(node=child)\n\nlist_tree_names(node=get_root(tree))\n# prints: A, AA, AB, B, BA, BB, BBA"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def list_tree_names(node):\n    for child in get_children(node):\n        print(get_name(child))\n        list_tree_names(node=child)\n\nlist_tree_names(node=get_root(tree))\n# prints: A, AA, AB, B, BA, BB, BBA",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138422,
        "id": "e95bcc7d-183a-4326-9a14-26a4f3df1cfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358138422,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Perhaps you wish to not print, but return a flat list of all node names. This can be done by passing a rolling list as a parameter."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Perhaps you wish to not print, but return a flat list of all node names. This can be done by passing a rolling list as a parameter."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358138422,
        "id": "166a4650-1657-43a7-86eb-7fab15e36507",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358240000,
        "parent_id": "a0493a5f-f896-49a5-bb71-6b46301a5537",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def list_tree_names(node, lst=[]):\n    for child in get_children(node):\n        lst.append(get_name(child))\n        list_tree_names(node=child, lst=lst)\n    return lst\n\nlist_tree_names(node=get_root(tree))\n# returns ['A', 'AA', 'AB', 'B', 'BA', 'BB', 'BBA']"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def list_tree_names(node, lst=[]):\n    for child in get_children(node):\n        lst.append(get_name(child))\n        list_tree_names(node=child, lst=lst)\n    return lst\n\nlist_tree_names(node=get_root(tree))\n# returns ['A', 'AA', 'AB', 'B', 'BA', 'BB', 'BBA']",
        "code_language": "Python"
      }
    ],
    "title": "Tree exploration with recursion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}