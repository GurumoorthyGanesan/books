{
  "ID": "f024e995-ca25-4353-ac68-d8e4a5a01003",
  "Root": {
    "alive": true,
    "content": [
      "cffac45f-a035-45f5-8723-c05e36994038",
      "096d740a-f582-4126-9a55-161c4208240a",
      "0e97f8cf-4fea-4d0b-9975-88d5add23910",
      "da0a4667-5301-4592-9239-cde5b26f622b",
      "46b12709-bc2e-4548-96d5-75f3bc6adb2b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550388906043,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f024e995-ca25-4353-ac68-d8e4a5a01003",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550468580000,
    "parent_id": "344fdad6-1793-40af-955e-a3d442e7017f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Evaluating a string containing a Python literal with ast.literal eval"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388906042,
        "id": "cffac45f-a035-45f5-8723-c05e36994038",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388906042,
        "parent_id": "f024e995-ca25-4353-ac68-d8e4a5a01003",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you have a string that contains Python literals, such as strings, floats etc, you can use "
            ],
            [
              "ast.literal_eval",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to evaluate its value instead of "
            ],
            [
              "eval",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This has the added feature of allowing only certain syntax."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you have a string that contains Python literals, such as strings, floats etc, you can use "
          },
          {
            "Text": "ast.literal_eval",
            "AttrFlags": 2
          },
          {
            "Text": " to evaluate its value instead of "
          },
          {
            "Text": "eval",
            "AttrFlags": 2
          },
          {
            "Text": ". This has the added feature of allowing only certain syntax."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388906043,
        "id": "096d740a-f582-4126-9a55-161c4208240a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550468580000,
        "parent_id": "f024e995-ca25-4353-ac68-d8e4a5a01003",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e import ast\n\u003e\u003e\u003e code = \"\"\"(1, 2, {'foo': 'bar'})\"\"\"\n\u003e\u003e\u003e object = ast.literal_eval(code)\n\u003e\u003e\u003e object\n(1, 2, {'foo': 'bar'})\n\u003e\u003e\u003e type(object)\n\u003cclass 'tuple'\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e import ast\n\u003e\u003e\u003e code = \"\"\"(1, 2, {'foo': 'bar'})\"\"\"\n\u003e\u003e\u003e object = ast.literal_eval(code)\n\u003e\u003e\u003e object\n(1, 2, {'foo': 'bar'})\n\u003e\u003e\u003e type(object)\n\u003cclass 'tuple'\u003e",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388906043,
        "id": "0e97f8cf-4fea-4d0b-9975-88d5add23910",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388906043,
        "parent_id": "f024e995-ca25-4353-ac68-d8e4a5a01003",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, this is not secure for execution of code provided by untrusted user, and it is trivial to crash an interpreter with carefully crafted input",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, this is not secure for execution of code provided by untrusted user, and it is trivial to crash an interpreter with carefully crafted input",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388906043,
        "id": "da0a4667-5301-4592-9239-cde5b26f622b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550468580000,
        "parent_id": "f024e995-ca25-4353-ac68-d8e4a5a01003",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e import ast\n\u003e\u003e\u003e ast.literal_eval('()' * 1000000)\n[5]    21358 segmentation fault (core dumped)  python3"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e import ast\n\u003e\u003e\u003e ast.literal_eval('()' * 1000000)\n[5]    21358 segmentation fault (core dumped)  python3",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388906043,
        "id": "46b12709-bc2e-4548-96d5-75f3bc6adb2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388906043,
        "parent_id": "f024e995-ca25-4353-ac68-d8e4a5a01003",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the input is a string of "
            ],
            [
              "()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " repeated one million times, which causes a crash in CPython parser. CPython developers do not consider bugs in parser as security issues."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the input is a string of "
          },
          {
            "Text": "()",
            "AttrFlags": 2
          },
          {
            "Text": " repeated one million times, which causes a crash in CPython parser. CPython developers do not consider bugs in parser as security issues."
          }
        ]
      }
    ],
    "title": "Evaluating a string containing a Python literal with ast.literal eval",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}