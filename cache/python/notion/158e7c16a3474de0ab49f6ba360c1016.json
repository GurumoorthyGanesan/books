{
  "ID": "158e7c16-a347-4de0-ab49-f6ba360c1016",
  "Root": {
    "alive": true,
    "content": [
      "f1bd5ab1-d177-4399-a40f-eff06598a89c",
      "eb5b387c-cda2-465c-9506-e0ce70e92dbf",
      "4e2dc701-0443-4ecd-ba27-257500e91466",
      "4ce8295e-eafa-40f8-8c63-83ef033c38e2",
      "dc7315c4-7625-4a42-afe8-fcd70a26b007"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550308646694,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "158e7c16-a347-4de0-ab49-f6ba360c1016",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550310120000,
    "parent_id": "b9edb898-2ed3-4d8d-b860-4fea918682e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Computing large integer roots"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308646692,
        "id": "f1bd5ab1-d177-4399-a40f-eff06598a89c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308646692,
        "parent_id": "158e7c16-a347-4de0-ab49-f6ba360c1016",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though Python natively supports big integers, taking the nth root of very large numbers can fail in Python."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though Python natively supports big integers, taking the nth root of very large numbers can fail in Python."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308646694,
        "id": "eb5b387c-cda2-465c-9506-e0ce70e92dbf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "158e7c16-a347-4de0-ab49-f6ba360c1016",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "x = 2 ** 100\ncube = x ** 3\nroot = cube ** (1.0 / 3)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "x = 2 ** 100\ncube = x ** 3\nroot = cube ** (1.0 / 3)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308646694,
        "id": "4e2dc701-0443-4ecd-ba27-257500e91466",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308646694,
        "parent_id": "158e7c16-a347-4de0-ab49-f6ba360c1016",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "OverflowError: long int too large to convert to float"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "OverflowError: long int too large to convert to float"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308646694,
        "id": "4ce8295e-eafa-40f8-8c63-83ef033c38e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308646694,
        "parent_id": "158e7c16-a347-4de0-ab49-f6ba360c1016",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When dealing with such large integers, you will need to use a custom function to compute the nth root of a number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When dealing with such large integers, you will need to use a custom function to compute the nth root of a number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308646694,
        "id": "dc7315c4-7625-4a42-afe8-fcd70a26b007",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310120000,
        "parent_id": "158e7c16-a347-4de0-ab49-f6ba360c1016",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def nth_root(x, n):\n    # Start with some reasonable bounds around the nth root.\n    upper_bound = 1\n    while upper_bound ** n \u003c= x:\n        upper_bound *= 2\n    lower_bound = upper_bound // 2\n    # Keep searching for a better result as long as the bounds make sense.\n    while lower_bound \u003c upper_bound:\n        mid = (lower_bound + upper_bound) // 2\n        mid_nth = mid ** n\n        if lower_bound \u003c mid and mid_nth \u003c x:\n            lower_bound = mid\n        elif upper_bound \u003e mid and mid_nth \u003e x:\n            upper_bound = mid\n        else:\n            # Found perfect nth root.\n            return mid\n    return mid + 1\n\nx = 2 ** 100\ncube = x ** 3\nroot = nth_root(cube, 3)\nx == root\n# True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def nth_root(x, n):\n    # Start with some reasonable bounds around the nth root.\n    upper_bound = 1\n    while upper_bound ** n \u003c= x:\n        upper_bound *= 2\n    lower_bound = upper_bound // 2\n    # Keep searching for a better result as long as the bounds make sense.\n    while lower_bound \u003c upper_bound:\n        mid = (lower_bound + upper_bound) // 2\n        mid_nth = mid ** n\n        if lower_bound \u003c mid and mid_nth \u003c x:\n            lower_bound = mid\n        elif upper_bound \u003e mid and mid_nth \u003e x:\n            upper_bound = mid\n        else:\n            # Found perfect nth root.\n            return mid\n    return mid + 1\n\nx = 2 ** 100\ncube = x ** 3\nroot = nth_root(cube, 3)\nx == root\n# True",
        "code_language": "Python"
      }
    ],
    "title": "Computing large integer roots",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}