{
  "ID": "ce3638bf-1d3a-4a27-9af4-2291ae5c02af",
  "Root": {
    "alive": true,
    "content": [
      "0a21e331-48e8-4578-ab23-dcea38040a7d",
      "d1f790b4-9cf3-45b3-999e-09bea896a6fd",
      "fbdb1ce0-cfed-45cf-ac44-0e09f59137c1",
      "e99c938b-274f-4bf6-a710-0b9adce0050e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550391462823,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ce3638bf-1d3a-4a27-9af4-2291ae5c02af",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550474160000,
    "parent_id": "2b7d3509-6e7a-4433-bf2b-39b4b72907ed",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "argparse custom help formatter"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391462819,
        "id": "0a21e331-48e8-4578-ab23-dcea38040a7d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391462819,
        "parent_id": "ce3638bf-1d3a-4a27-9af4-2291ae5c02af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Extended version of https://stackoverflow.com/documentation/python/7701/cli-subcommands/25282/argparse-default-help-formatter that fixed help output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Extended version of https://stackoverflow.com/documentation/python/7701/cli-subcommands/25282/argparse-default-help-formatter that fixed help output."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391462822,
        "id": "d1f790b4-9cf3-45b3-999e-09bea896a6fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391462822,
        "parent_id": "ce3638bf-1d3a-4a27-9af4-2291ae5c02af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import argparse\nimport sys\n\nclass CustomHelpFormatter(argparse.HelpFormatter):\n    def _format_action(self, action):\n        if type(action) == argparse._SubParsersAction:\n            # inject new class variable for subcommand formatting\n            subactions = action._get_subactions()\n            invocations = [self._format_action_invocation(a) for a in subactions]\n            self._subcommand_max_length = max(len(i) for i in invocations)\n\n        if type(action) == argparse._SubParsersAction._ChoicesPseudoAction:\n            # format subcommand help line\n            subcommand = self._format_action_invocation(action) # type: str\n            width = self._subcommand_max_length\n            help_text = \"\"\n            if action.help:\n                help_text = self._expand_help(action)\n            return \"  {:{width}} -  {}\\n\".format(subcommand, help_text, width=width)\n\n        elif type(action) == argparse._SubParsersAction:\n            # process subcommand help section\n            msg = '\\n'\n            for subaction in action._get_subactions():\n                msg += self._format_action(subaction)\n            return msg\n        else:\n            return super(CustomHelpFormatter, self)._format_action(action)\n\n\ndef check():\n    print(\"status\")\n    return 0\n\nparser = argparse.ArgumentParser(usage=\"sub \u003ccommand\u003e\", add_help=False,\n             formatter_class=CustomHelpFormatter)\n\nsubparser = parser.add_subparsers(dest=\"cmd\")\nsubparser.add_parser('status', help='show status')\nsubparser.add_parser('list', help='print list')\n\n# custom help messge\nparser._positionals.title = \"commands\"\n\n# hack to show help when no arguments supplied\nif len(sys.argv) == 1:\n    parser.print_help()\n    sys.exit(0)\n\nargs = parser.parse_args()\n\nif args.cmd == 'list':\n    print('list')\nelif args.cmd == 'status':\n    sys.exit(check())"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import argparse\nimport sys\n\nclass CustomHelpFormatter(argparse.HelpFormatter):\n    def _format_action(self, action):\n        if type(action) == argparse._SubParsersAction:\n            # inject new class variable for subcommand formatting\n            subactions = action._get_subactions()\n            invocations = [self._format_action_invocation(a) for a in subactions]\n            self._subcommand_max_length = max(len(i) for i in invocations)\n\n        if type(action) == argparse._SubParsersAction._ChoicesPseudoAction:\n            # format subcommand help line\n            subcommand = self._format_action_invocation(action) # type: str\n            width = self._subcommand_max_length\n            help_text = \"\"\n            if action.help:\n                help_text = self._expand_help(action)\n            return \"  {:{width}} -  {}\\n\".format(subcommand, help_text, width=width)\n\n        elif type(action) == argparse._SubParsersAction:\n            # process subcommand help section\n            msg = '\\n'\n            for subaction in action._get_subactions():\n                msg += self._format_action(subaction)\n            return msg\n        else:\n            return super(CustomHelpFormatter, self)._format_action(action)\n\n\ndef check():\n    print(\"status\")\n    return 0\n\nparser = argparse.ArgumentParser(usage=\"sub \u003ccommand\u003e\", add_help=False,\n             formatter_class=CustomHelpFormatter)\n\nsubparser = parser.add_subparsers(dest=\"cmd\")\nsubparser.add_parser('status', help='show status')\nsubparser.add_parser('list', help='print list')\n\n# custom help messge\nparser._positionals.title = \"commands\"\n\n# hack to show help when no arguments supplied\nif len(sys.argv) == 1:\n    parser.print_help()\n    sys.exit(0)\n\nargs = parser.parse_args()\n\nif args.cmd == 'list':\n    print('list')\nelif args.cmd == 'status':\n    sys.exit(check())",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391462822,
        "id": "fbdb1ce0-cfed-45cf-ac44-0e09f59137c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391462822,
        "parent_id": "ce3638bf-1d3a-4a27-9af4-2291ae5c02af",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Output without arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Output without arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550391462822,
        "id": "e99c938b-274f-4bf6-a710-0b9adce0050e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550391462822,
        "parent_id": "ce3638bf-1d3a-4a27-9af4-2291ae5c02af",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "usage: sub \u003ccommand\u003e\n\ncommands:\n\n  status -  show status\n  list   -  print list"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "usage: sub \u003ccommand\u003e\n\ncommands:\n\n  status -  show status\n  list   -  print list",
        "code_language": "Plain Text"
      }
    ],
    "title": "argparse custom help formatter",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}