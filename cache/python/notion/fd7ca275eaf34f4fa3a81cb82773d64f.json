{
  "ID": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
  "Root": {
    "alive": true,
    "content": [
      "8bc98186-915c-4149-b414-e4756ed0765b",
      "c4a85dda-12af-4cac-8694-f7f485cbf0fd",
      "52bbd900-0056-419b-a921-fc2688cf542f",
      "a04893bf-cea2-44ee-9576-e49c1c8a5ce7",
      "b0a0de24-cf50-41d8-9cdd-d4891d513178"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389256056,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550469360000,
    "parent_id": "6f02e2b4-2630-4916-8284-461d35c0ceba",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Reuse of primitive objects"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389256052,
        "id": "8bc98186-915c-4149-b414-e4756ed0765b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389256052,
        "parent_id": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An interesting thing to note which may help optimize your applications is that primitives are actually also refcounted under the hood. Let’s take a look at numbers; for all integers between -5 and 256, Python always reuses the same object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An interesting thing to note which may help optimize your applications is that primitives are actually also refcounted under the hood. Let’s take a look at numbers; for all integers between -5 and 256, Python always reuses the same object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389256055,
        "id": "c4a85dda-12af-4cac-8694-f7f485cbf0fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389256055,
        "parent_id": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e import sys\n\u003e\u003e\u003e sys.getrefcount(1)\n797\n\u003e\u003e\u003e a = 1\n\u003e\u003e\u003e b = 1\n\u003e\u003e\u003e sys.getrefcount(1)\n799"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e import sys\n\u003e\u003e\u003e sys.getrefcount(1)\n797\n\u003e\u003e\u003e a = 1\n\u003e\u003e\u003e b = 1\n\u003e\u003e\u003e sys.getrefcount(1)\n799",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389256055,
        "id": "52bbd900-0056-419b-a921-fc2688cf542f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389256055,
        "parent_id": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the refcount increases, meaning that "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference the same underlying object when they refer to the "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " primitive. However, for larger numbers, Python actually doesn’t reuse the underlying object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the refcount increases, meaning that "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " reference the same underlying object when they refer to the "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " primitive. However, for larger numbers, Python actually doesn’t reuse the underlying object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389256055,
        "id": "a04893bf-cea2-44ee-9576-e49c1c8a5ce7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389256055,
        "parent_id": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e a = 999999999\n\u003e\u003e\u003e sys.getrefcount(999999999)\n3\n\u003e\u003e\u003e b = 999999999\n\u003e\u003e\u003e sys.getrefcount(999999999)\n3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e a = 999999999\n\u003e\u003e\u003e sys.getrefcount(999999999)\n3\n\u003e\u003e\u003e b = 999999999\n\u003e\u003e\u003e sys.getrefcount(999999999)\n3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389256056,
        "id": "b0a0de24-cf50-41d8-9cdd-d4891d513178",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389256056,
        "parent_id": "fd7ca275-eaf3-4f4f-a3a8-1cb82773d64f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Because the refcount for "
            ],
            [
              "999999999",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not change when assigning it to "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we can infer that they refer to two different underlying objects, even though they both are assigned the same primitive."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Because the refcount for "
          },
          {
            "Text": "999999999",
            "AttrFlags": 2
          },
          {
            "Text": " does not change when assigning it to "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " we can infer that they refer to two different underlying objects, even though they both are assigned the same primitive."
          }
        ]
      }
    ],
    "title": "Reuse of primitive objects",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}