{
  "ID": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
  "Root": {
    "alive": true,
    "content": [
      "0bb8580e-b1e8-49f2-aa3a-5d908ae58057",
      "e857e50b-3b40-4368-be05-3b77ab3edbed",
      "424876e3-b1cd-4922-9764-768d2f14509f",
      "34d5803e-82d4-42e2-a9a3-8daf014e5971",
      "613a1da9-8bee-4821-8605-e22e0a6f866b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389302986,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550469480000,
    "parent_id": "154b1b38-7004-4d41-8644-1bd8e63d12f1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Asymmetric RSA encryption using pycrypto"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389302985,
        "id": "0bb8580e-b1e8-49f2-aa3a-5d908ae58057",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389302985,
        "parent_id": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Asymmetric encryption has the advantage that a message can be encrypted without exchanging a secret key with the recipient of the message. The sender merely needs to know the recipients public key, this allows encrypting the message in such a way that only the designated recipient (who has the corresponding private key) can decrypt it. Currently, a third-party module like "
            ],
            [
              "pycrypto",
              [
                [
                  "a",
                  "https://pypi.python.org/pypi/pycrypto"
                ]
              ]
            ],
            [
              " is required for this functionality."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Asymmetric encryption has the advantage that a message can be encrypted without exchanging a secret key with the recipient of the message. The sender merely needs to know the recipients public key, this allows encrypting the message in such a way that only the designated recipient (who has the corresponding private key) can decrypt it. Currently, a third-party module like "
          },
          {
            "Text": "pycrypto",
            "Link": "https://pypi.python.org/pypi/pycrypto"
          },
          {
            "Text": " is required for this functionality."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389302985,
        "id": "e857e50b-3b40-4368-be05-3b77ab3edbed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389302985,
        "parent_id": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "from Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.PublicKey import RSA\n\nmessage = b'This is a very secret message.'\n\nwith open('pubkey.pem', 'rb') as f:\n    key = RSA.importKey(f.read())\ncipher = PKCS1_OAEP.new(key)\nencrypted = cipher.encrypt(message)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "from Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.PublicKey import RSA\n\nmessage = b'This is a very secret message.'\n\nwith open('pubkey.pem', 'rb') as f:\n    key = RSA.importKey(f.read())\ncipher = PKCS1_OAEP.new(key)\nencrypted = cipher.encrypt(message)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389302985,
        "id": "424876e3-b1cd-4922-9764-768d2f14509f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389302985,
        "parent_id": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The recipient can decrypt the message then if they have the right private key:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The recipient can decrypt the message then if they have the right private key:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389302986,
        "id": "34d5803e-82d4-42e2-a9a3-8daf014e5971",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389302986,
        "parent_id": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "with open('privkey.pem', 'rb') as f:\n    key = RSA.importKey(f.read())\ncipher = PKCS1_OAEP.new(key)\ndecrypted = cipher.decrypt(encrypted)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "with open('privkey.pem', 'rb') as f:\n    key = RSA.importKey(f.read())\ncipher = PKCS1_OAEP.new(key)\ndecrypted = cipher.decrypt(encrypted)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389302986,
        "id": "613a1da9-8bee-4821-8605-e22e0a6f866b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389302986,
        "parent_id": "1c9ea9d1-6daa-4c7b-beef-fb87e5ae7c66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ": The above examples use PKCS#1 OAEP encryption scheme. pycrypto also implements PKCS#1 v1.5 encryption scheme, this one is not recommended for new protocols however due to "
            ],
            [
              "known caveats",
              [
                [
                  "a",
                  "http://security.stackexchange.com/questions/32050/what-specific-padding-weakness-does-oaep-address-in-rsa"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note",
            "AttrFlags": 4
          },
          {
            "Text": ": The above examples use PKCS#1 OAEP encryption scheme. pycrypto also implements PKCS#1 v1.5 encryption scheme, this one is not recommended for new protocols however due to "
          },
          {
            "Text": "known caveats",
            "Link": "http://security.stackexchange.com/questions/32050/what-specific-padding-weakness-does-oaep-address-in-rsa"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Asymmetric RSA encryption using pycrypto",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}