{
  "ID": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
  "Root": {
    "alive": true,
    "content": [
      "ba52517f-0740-4b25-8772-9b3769335305",
      "4a251944-357c-4a7b-96cd-77c77a234b25",
      "8c0271f2-0abe-4a44-9ef5-453446702fd5",
      "9fe0e30a-6b9d-4c18-a0a3-65aa273bb860",
      "05959d21-a701-4a15-8b49-7da90ce80b76",
      "f915d0b2-64e4-4086-8777-61b381d7355a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389259029,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550469420000,
    "parent_id": "6f02e2b4-2630-4916-8284-461d35c0ceba",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Garbage Collector for Reference Cycles"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389259026,
        "id": "ba52517f-0740-4b25-8772-9b3769335305",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389259026,
        "parent_id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only time the garbage collector is needed is if you have a "
            ],
            [
              "reference cycle",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". The simples example of a reference cycle is one in which A refers to B and B refers to A, while nothing else refers to either A or B. Neither A or B are accessible from anywhere in the program, so they can safely be destructed, yet their reference counts are 1 and so they cannot be freed by the reference counting algorithm alone."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only time the garbage collector is needed is if you have a "
          },
          {
            "Text": "reference cycle",
            "AttrFlags": 4
          },
          {
            "Text": ". The simples example of a reference cycle is one in which A refers to B and B refers to A, while nothing else refers to either A or B. Neither A or B are accessible from anywhere in the program, so they can safely be destructed, yet their reference counts are 1 and so they cannot be freed by the reference counting algorithm alone."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389259028,
        "id": "4a251944-357c-4a7b-96cd-77c77a234b25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389259028,
        "parent_id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e import gc; gc.disable()  # disable garbage collector\n\u003e\u003e\u003e class Track:"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e import gc; gc.disable()  # disable garbage collector\n\u003e\u003e\u003e class Track:",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389259029,
        "id": "8c0271f2-0abe-4a44-9ef5-453446702fd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389259029,
        "parent_id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "def "
            ],
            [
              "init",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "(self): print(“Initialized”) def "
            ],
            [
              "del",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "(self): print(“Destructed”)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "def "
          },
          {
            "Text": "init",
            "AttrFlags": 1
          },
          {
            "Text": "(self): print(“Initialized”) def "
          },
          {
            "Text": "del",
            "AttrFlags": 1
          },
          {
            "Text": "(self): print(“Destructed”)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389259029,
        "id": "9fe0e30a-6b9d-4c18-a0a3-65aa273bb860",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389259029,
        "parent_id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e A = Track()\nInitialized\n\u003e\u003e\u003e B = Track()\nInitialized\n\u003e\u003e\u003e A.other = B\n\u003e\u003e\u003e B.other = A\n\u003e\u003e\u003e del A; del B  # objects are not destructed due to reference cycle\n\u003e\u003e\u003e gc.collect()  # trigger collection\nDestructed\nDestructed\n4"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e A = Track()\nInitialized\n\u003e\u003e\u003e B = Track()\nInitialized\n\u003e\u003e\u003e A.other = B\n\u003e\u003e\u003e B.other = A\n\u003e\u003e\u003e del A; del B  # objects are not destructed due to reference cycle\n\u003e\u003e\u003e gc.collect()  # trigger collection\nDestructed\nDestructed\n4",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389259029,
        "id": "05959d21-a701-4a15-8b49-7da90ce80b76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389259029,
        "parent_id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A reference cycle can be arbitrary long. If A points to B points to C points to … points to Z which points to A, then neither A through Z will be collected, until the garbage collection phase:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A reference cycle can be arbitrary long. If A points to B points to C points to … points to Z which points to A, then neither A through Z will be collected, until the garbage collection phase:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389259029,
        "id": "f915d0b2-64e4-4086-8777-61b381d7355a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389259029,
        "parent_id": "0cec9636-a9ee-4965-87d7-6202d2a8094b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e objs = [Track() for _ in range(10)]\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\n\u003e\u003e\u003e for i in range(len(objs)-1):\n...     objs[i].other = objs[i + 1]\n...\n\u003e\u003e\u003e objs[-1].other = objs[0]  # complete the cycle\n\u003e\u003e\u003e del objs                  # no one can refer to objs now - still not destructed\n\u003e\u003e\u003e gc.collect()\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\n20"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e objs = [Track() for _ in range(10)]\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\nInitialized\n\u003e\u003e\u003e for i in range(len(objs)-1):\n...     objs[i].other = objs[i + 1]\n...\n\u003e\u003e\u003e objs[-1].other = objs[0]  # complete the cycle\n\u003e\u003e\u003e del objs                  # no one can refer to objs now - still not destructed\n\u003e\u003e\u003e gc.collect()\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\nDestructed\n20",
        "code_language": "Plain Text"
      }
    ],
    "title": "Garbage Collector for Reference Cycles",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}