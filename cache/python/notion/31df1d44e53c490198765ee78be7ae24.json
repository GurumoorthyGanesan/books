{
  "ID": "31df1d44-e53c-4901-9876-5ee78be7ae24",
  "Root": {
    "alive": true,
    "content": [
      "9734c770-5ab9-430b-99d8-d9f6c786381a",
      "cfd75cda-1da4-4ae5-b2dc-ad01d51454b8",
      "94f0ae6f-f84e-401e-aa47-f1af16b667e3",
      "b33f71e0-0f0c-47a0-afb6-bd2b77ea5ee4",
      "8e083fd7-97d8-4d3a-a184-3ad071353952",
      "93833389-db17-48f7-b142-b2b4e563519d",
      "61175798-9fc6-4b72-a70a-3acfb7216cb2",
      "87de8b0d-a43c-444a-b65f-045693324d8a",
      "42ec3003-7e25-4ddc-96a2-d4f8ecb1595c",
      "21fd2714-6b2c-4c14-a71b-72fbde2576b0",
      "fe140682-aa2e-4f88-81bb-6209664d6886"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390177204,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550472840000,
    "parent_id": "e4b799b8-8e9f-453c-8f08-0bfd4dbbd9a3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Mixin"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177201,
        "id": "9734c770-5ab9-430b-99d8-d9f6c786381a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177201,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "Mixin",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " is a set of properties and methods that can be used in different classes, which "
            ],
            [
              "don’t",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " come from a base class. In Object Oriented Programming languages, you typically use "
            ],
            [
              "inheritance",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to give objects of different classes the same functionality; if a set of objects have some ability, you put that ability in a base class that both objects "
            ],
            [
              "inherit",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " from."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "Mixin",
            "AttrFlags": 1
          },
          {
            "Text": " is a set of properties and methods that can be used in different classes, which "
          },
          {
            "Text": "don’t",
            "AttrFlags": 4
          },
          {
            "Text": " come from a base class. In Object Oriented Programming languages, you typically use "
          },
          {
            "Text": "inheritance",
            "AttrFlags": 4
          },
          {
            "Text": " to give objects of different classes the same functionality; if a set of objects have some ability, you put that ability in a base class that both objects "
          },
          {
            "Text": "inherit",
            "AttrFlags": 4
          },
          {
            "Text": " from."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177202,
        "id": "cfd75cda-1da4-4ae5-b2dc-ad01d51454b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177202,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For instance, say you have the classes Car, Boat, and Plane. Objects from all of these classes have the ability to travel, so they get the function travel. In this scenario, they all travel the same basic way, too; by getting a route, and moving along it. To implement this function, you could derive all of the classes from Vehicle, and put the function in that shared class:"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "For instance, say you have the classes Car, Boat, and Plane. Objects from all of these classes have the ability to travel, so they get the function travel. In this scenario, they all travel the same basic way, too; by getting a route, and moving along it. To implement this function, you could derive all of the classes from Vehicle, and put the function in that shared class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177202,
        "id": "94f0ae6f-f84e-401e-aa47-f1af16b667e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177202,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Vehicle(object):\n   \"\"\"A generic vehicle class.\"\"\"\n\n   def __init__(self, position):\n       self.position = position\n\n   def travel(self, destination):\n       route = calculate_route(from=self.position, to=destination)\n       self.move_along(route)\n\nclass Car(Vehicle):\n   ...\n\nclass Boat(Vehicle):\n   ...\n\nclass Plane(Vehicle):\n   ..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Vehicle(object):\n   \"\"\"A generic vehicle class.\"\"\"\n\n   def __init__(self, position):\n       self.position = position\n\n   def travel(self, destination):\n       route = calculate_route(from=self.position, to=destination)\n       self.move_along(route)\n\nclass Car(Vehicle):\n   ...\n\nclass Boat(Vehicle):\n   ...\n\nclass Plane(Vehicle):\n   ...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177202,
        "id": "b33f71e0-0f0c-47a0-afb6-bd2b77ea5ee4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177202,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With this code, you can call "
            ],
            [
              "travel",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on a car ("
            ],
            [
              "car.travel(\"Montana\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), boat ("
            ],
            [
              "boat.travel(\"Hawaii\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and plane ("
            ],
            [
              "plane.travel(\"France\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With this code, you can call "
          },
          {
            "Text": "travel",
            "AttrFlags": 2
          },
          {
            "Text": " on a car ("
          },
          {
            "Text": "car.travel(\"Montana\")",
            "AttrFlags": 2
          },
          {
            "Text": "), boat ("
          },
          {
            "Text": "boat.travel(\"Hawaii\")",
            "AttrFlags": 2
          },
          {
            "Text": "), and plane ("
          },
          {
            "Text": "plane.travel(\"France\")",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177203,
        "id": "8e083fd7-97d8-4d3a-a184-3ad071353952",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177203,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, what if you have functionality that’s not available to a base class? Say, for instance, you want to give "
            ],
            [
              "Car",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " a radio and the ability to use it to play a song on a radio station, with "
            ],
            [
              "play_song_on_station",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but you also have a "
            ],
            [
              "Clock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that can use a radio too. "
            ],
            [
              "Car",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Clock",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " could share a base class ("
            ],
            [
              "Machine",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). However, not all machines can play songs; "
            ],
            [
              "Boat",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Plane",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can’t (at least in this example). So how do you accomplish without duplicating code? You can use a mixin. In Python, giving a class a mixin is as simple as adding it to the list of subclasses, like this"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, what if you have functionality that’s not available to a base class? Say, for instance, you want to give "
          },
          {
            "Text": "Car",
            "AttrFlags": 2
          },
          {
            "Text": " a radio and the ability to use it to play a song on a radio station, with "
          },
          {
            "Text": "play_song_on_station",
            "AttrFlags": 2
          },
          {
            "Text": ", but you also have a "
          },
          {
            "Text": "Clock",
            "AttrFlags": 2
          },
          {
            "Text": " that can use a radio too. "
          },
          {
            "Text": "Car",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Clock",
            "AttrFlags": 2
          },
          {
            "Text": " could share a base class ("
          },
          {
            "Text": "Machine",
            "AttrFlags": 2
          },
          {
            "Text": "). However, not all machines can play songs; "
          },
          {
            "Text": "Boat",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Plane",
            "AttrFlags": 2
          },
          {
            "Text": " can’t (at least in this example). So how do you accomplish without duplicating code? You can use a mixin. In Python, giving a class a mixin is as simple as adding it to the list of subclasses, like this"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177203,
        "id": "93833389-db17-48f7-b142-b2b4e563519d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177203,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Foo(main_super, mixin): ..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Foo(main_super, mixin): ...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177203,
        "id": "61175798-9fc6-4b72-a70a-3acfb7216cb2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177203,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Foo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will inherit all of the properties and methods of "
            ],
            [
              "main_super",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but also those of "
            ],
            [
              "mixin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Foo",
            "AttrFlags": 2
          },
          {
            "Text": " will inherit all of the properties and methods of "
          },
          {
            "Text": "main_super",
            "AttrFlags": 2
          },
          {
            "Text": ", but also those of "
          },
          {
            "Text": "mixin",
            "AttrFlags": 2
          },
          {
            "Text": " as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177203,
        "id": "87de8b0d-a43c-444a-b65f-045693324d8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177203,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So, to give the classes Car and clock the ability to use a radio, you could override Car from the last example and write this:"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "So, to give the classes Car and clock the ability to use a radio, you could override Car from the last example and write this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177203,
        "id": "42ec3003-7e25-4ddc-96a2-d4f8ecb1595c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177203,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class RadioUserMixin(object):\n   def __init__(self):\n       self.radio = Radio()\n\n   def play_song_on_station(self, station):\n       self.radio.set_station(station)\n       self.radio.play_song()\n\nclass Car(Vehicle, RadioUserMixin):\n   ...\n\nclass Clock(Vehicle, RadioUserMixin):\n   ..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class RadioUserMixin(object):\n   def __init__(self):\n       self.radio = Radio()\n\n   def play_song_on_station(self, station):\n       self.radio.set_station(station)\n       self.radio.play_song()\n\nclass Car(Vehicle, RadioUserMixin):\n   ...\n\nclass Clock(Vehicle, RadioUserMixin):\n   ...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177204,
        "id": "21fd2714-6b2c-4c14-a71b-72fbde2576b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177204,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now you can call "
            ],
            [
              "car.play_song_on_station(98.7)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "clock.play_song_on_station(101.3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but not something like "
            ],
            [
              "boat.play_song_on_station(100.5)",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now you can call "
          },
          {
            "Text": "car.play_song_on_station(98.7)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "clock.play_song_on_station(101.3)",
            "AttrFlags": 2
          },
          {
            "Text": ", but not something like "
          },
          {
            "Text": "boat.play_song_on_station(100.5)",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390177204,
        "id": "fe140682-aa2e-4f88-81bb-6209664d6886",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390177204,
        "parent_id": "31df1d44-e53c-4901-9876-5ee78be7ae24",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The important thing with mixins is that they allow you to add functionality to much different objects, that don’t share a “main” subclass with this functionality but still share the code for it nonetheless. Without mixins, doing something like the above example would be much harder, and/or might require some repetition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The important thing with mixins is that they allow you to add functionality to much different objects, that don’t share a “main” subclass with this functionality but still share the code for it nonetheless. Without mixins, doing something like the above example would be much harder, and/or might require some repetition."
          }
        ]
      }
    ],
    "title": "Mixin",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}