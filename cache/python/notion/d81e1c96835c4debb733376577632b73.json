{
  "ID": "d81e1c96-835c-4deb-b733-376577632b73",
  "Root": {
    "alive": true,
    "content": [
      "60bf88a0-d0b4-4a97-9471-f3c825a1f4a1",
      "3f28d001-4b85-4c02-8e16-f81333946b19",
      "161df6bd-24dd-4b34-b8b0-1519a1d20777",
      "1f0572f4-7298-48b4-ad0f-918559bf571a",
      "67c0db24-4d85-4c24-ae32-5389d14af755",
      "bc3021c2-b8ec-4e83-852d-1213018f9a3b",
      "8245d36b-58da-44b0-a0cb-fe2d13df7da8",
      "679bdbed-d1a6-4c8b-9bb3-95b4a41551f8",
      "ce659582-f24c-4278-b373-433949ac2b71",
      "e6ad048e-a04c-470f-90b1-f054dcc5e688",
      "af6473e1-34a4-4584-9063-d9bfc2a249bd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550388848162,
    "id": "d81e1c96-835c-4deb-b733-376577632b73",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550468280000,
    "parent_id": "2a4bdab1-4a05-4c5d-9f05-61c2e4d09b32",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operator overloading"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848151,
        "id": "60bf88a0-d0b4-4a97-9471-f3c825a1f4a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848151,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Below are the operators that can be overloaded in classes, along with the method definitions that are required, and an example of the operator in use within an expression."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Below are the operators that can be overloaded in classes, along with the method definitions that are required, and an example of the operator in use within an expression."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848154,
        "id": "3f28d001-4b85-4c02-8e16-f81333946b19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848154,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "N.B. The use of ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "other",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " as a variable name is not mandatory, but is considered the norm.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "N.B. The use of ",
            "AttrFlags": 1
          },
          {
            "Text": "other",
            "AttrFlags": 3
          },
          {
            "Text": " as a variable name is not mandatory, but is considered the norm.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848159,
        "id": "161df6bd-24dd-4b34-b8b0-1519a1d20777",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848159,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operator | Method | Expression |\n–––– | –––– | ––––– |"
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Addition | "
            ],
            [
              "__add__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 + a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Subtraction | "
            ],
            [
              "__sub__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 - a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\\*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Multiplication | "
            ],
            [
              "__mul__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 * a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "@",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Matrix Multiplication | "
            ],
            [
              "__matmul__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 @ a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "Python 3.5",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") |"
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Division | "
            ],
            [
              "__div__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 / a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "Python 2 only",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")|"
            ],
            [
              "/",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Division | "
            ],
            [
              "__truediv__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 / a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "Python 3",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") |"
            ],
            [
              "//",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Floor Division | "
            ],
            [
              "__floordiv__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 // a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "%",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Modulo/Remainder | "
            ],
            [
              "__mod__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 % a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Power | "
            ],
            [
              "__pow__(self, other[, modulo])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 ** a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\u003c\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Bitwise Left Shift | "
            ],
            [
              "__lshift__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u003c\u003c a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Bitwise Right Shift | "
            ],
            [
              "__rshift__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u003e\u003e a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Bitwise AND | "
            ],
            [
              "__and__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u0026 a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Bitwise XOR | "
            ],
            [
              "__xor__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 ^ a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\n| (Bitwise OR) | "
            ],
            [
              "__or__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | a1 | a2 |"
            ],
            [
              "\\-",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Negation (Arithmetic) | "
            ],
            [
              "__neg__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "-a1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\\+",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Positive | "
            ],
            [
              "__pos__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "+a1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Bitwise NOT | "
            ],
            [
              "__invert__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "~a1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Less than | "
            ],
            [
              "__lt__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u003c a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Less than or Equal to | "
            ],
            [
              "__le__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u003c= a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Equal to | "
            ],
            [
              "__eq__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 == a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Not Equal to | "
            ],
            [
              "__ne__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 != a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Greater than | "
            ],
            [
              "__gt__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u003e a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "\u003e=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Greater than or Equal to | "
            ],
            [
              "__ge__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1 \u003e= a2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "[index]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Index operator | "
            ],
            [
              "__getitem__(self, index)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1[index]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "in",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " In operator | "
            ],
            [
              "__contains__(self, other)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a2 in a1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ],
            [
              "(*args, ...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Calling | "
            ],
            [
              "__call__(self, *args, **kwargs)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "a1(*args, **kwargs)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operator | Method | Expression |\n–––– | –––– | ––––– |"
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " Addition | "
          },
          {
            "Text": "__add__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 + a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " Subtraction | "
          },
          {
            "Text": "__sub__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 - a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\\*",
            "AttrFlags": 2
          },
          {
            "Text": " Multiplication | "
          },
          {
            "Text": "__mul__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 * a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "@",
            "AttrFlags": 2
          },
          {
            "Text": " Matrix Multiplication | "
          },
          {
            "Text": "__matmul__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 @ a2",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "Python 3.5",
            "AttrFlags": 4
          },
          {
            "Text": ") |"
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": " Division | "
          },
          {
            "Text": "__div__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 / a2",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "Python 2 only",
            "AttrFlags": 4
          },
          {
            "Text": ")|"
          },
          {
            "Text": "/",
            "AttrFlags": 2
          },
          {
            "Text": " Division | "
          },
          {
            "Text": "__truediv__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 / a2",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "Python 3",
            "AttrFlags": 4
          },
          {
            "Text": ") |"
          },
          {
            "Text": "//",
            "AttrFlags": 2
          },
          {
            "Text": " Floor Division | "
          },
          {
            "Text": "__floordiv__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 // a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "%",
            "AttrFlags": 2
          },
          {
            "Text": " Modulo/Remainder | "
          },
          {
            "Text": "__mod__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 % a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": " Power | "
          },
          {
            "Text": "__pow__(self, other[, modulo])",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 ** a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\u003c\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " Bitwise Left Shift | "
          },
          {
            "Text": "__lshift__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u003c\u003c a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " Bitwise Right Shift | "
          },
          {
            "Text": "__rshift__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u003e\u003e a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " Bitwise AND | "
          },
          {
            "Text": "__and__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u0026 a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " Bitwise XOR | "
          },
          {
            "Text": "__xor__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 ^ a2",
            "AttrFlags": 2
          },
          {
            "Text": " |\n| (Bitwise OR) | "
          },
          {
            "Text": "__or__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | a1 | a2 |"
          },
          {
            "Text": "\\-",
            "AttrFlags": 2
          },
          {
            "Text": " Negation (Arithmetic) | "
          },
          {
            "Text": "__neg__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "-a1",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\\+",
            "AttrFlags": 2
          },
          {
            "Text": " Positive | "
          },
          {
            "Text": "__pos__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "+a1",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": " Bitwise NOT | "
          },
          {
            "Text": "__invert__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "~a1",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": " Less than | "
          },
          {
            "Text": "__lt__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u003c a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": " Less than or Equal to | "
          },
          {
            "Text": "__le__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u003c= a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " Equal to | "
          },
          {
            "Text": "__eq__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 == a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " Not Equal to | "
          },
          {
            "Text": "__ne__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 != a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " Greater than | "
          },
          {
            "Text": "__gt__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u003e a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "\u003e=",
            "AttrFlags": 2
          },
          {
            "Text": " Greater than or Equal to | "
          },
          {
            "Text": "__ge__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1 \u003e= a2",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "[index]",
            "AttrFlags": 2
          },
          {
            "Text": " Index operator | "
          },
          {
            "Text": "__getitem__(self, index)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1[index]",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "in",
            "AttrFlags": 2
          },
          {
            "Text": " In operator | "
          },
          {
            "Text": "__contains__(self, other)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a2 in a1",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          },
          {
            "Text": "(*args, ...)",
            "AttrFlags": 2
          },
          {
            "Text": " Calling | "
          },
          {
            "Text": "__call__(self, *args, **kwargs)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "a1(*args, **kwargs)",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848159,
        "id": "1f0572f4-7298-48b4-ad0f-918559bf571a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848159,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The optional parameter ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "modulo",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " for ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "__pow__",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " is only used by the ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "pow",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " built-in function.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The optional parameter ",
            "AttrFlags": 4
          },
          {
            "Text": "modulo",
            "AttrFlags": 6
          },
          {
            "Text": " for ",
            "AttrFlags": 4
          },
          {
            "Text": "__pow__",
            "AttrFlags": 6
          },
          {
            "Text": " is only used by the ",
            "AttrFlags": 4
          },
          {
            "Text": "pow",
            "AttrFlags": 6
          },
          {
            "Text": " built-in function.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848160,
        "id": "67c0db24-4d85-4c24-ae32-5389d14af755",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848160,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each of the methods corresponding to a "
            ],
            [
              "binary",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " operator has a corresponding “right” method which start with "
            ],
            [
              "__r",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for example "
            ],
            [
              "__radd__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each of the methods corresponding to a "
          },
          {
            "Text": "binary",
            "AttrFlags": 4
          },
          {
            "Text": " operator has a corresponding “right” method which start with "
          },
          {
            "Text": "__r",
            "AttrFlags": 2
          },
          {
            "Text": ", for example "
          },
          {
            "Text": "__radd__",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848160,
        "id": "bc3021c2-b8ec-4e83-852d-1213018f9a3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848160,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class A:\n    def __init__(self, a):\n        self.a = a\n    def __add__(self, other):\n        return self.a + other\n    def __radd__(self, other):\n        print(\"radd\")\n        return other + self.a\n\nA(1) + 2  # Out:  3\n2 + A(1)  # prints radd. Out: 3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class A:\n    def __init__(self, a):\n        self.a = a\n    def __add__(self, other):\n        return self.a + other\n    def __radd__(self, other):\n        print(\"radd\")\n        return other + self.a\n\nA(1) + 2  # Out:  3\n2 + A(1)  # prints radd. Out: 3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848160,
        "id": "8245d36b-58da-44b0-a0cb-fe2d13df7da8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848160,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "as well as a corresponding inplace version, starting with "
            ],
            [
              "__i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "as well as a corresponding inplace version, starting with "
          },
          {
            "Text": "__i",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848160,
        "id": "679bdbed-d1a6-4c8b-9bb3-95b4a41551f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848160,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class B:\n    def __init__(self, b):\n        self.b = b\n    def __iadd__(self, other):\n        self.b += other\n        print(\"iadd\")\n        return self\n\nb = B(2)\nb.b       # Out: 2\nb += 1    # prints iadd\nb.b       # Out: 3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class B:\n    def __init__(self, b):\n        self.b = b\n    def __iadd__(self, other):\n        self.b += other\n        print(\"iadd\")\n        return self\n\nb = B(2)\nb.b       # Out: 2\nb += 1    # prints iadd\nb.b       # Out: 3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848160,
        "id": "ce659582-f24c-4278-b373-433949ac2b71",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848160,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Since there’s nothing special about these methods, many other parts of the language, parts of the standard library, and even third-party modules add magic methods on their own, like methods to cast an object to a type or checking properties of the object. For example, the builtin "
            ],
            [
              "str()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function calls the object’s "
            ],
            [
              "__str__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, if it exists. Some of these uses are listed below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Since there’s nothing special about these methods, many other parts of the language, parts of the standard library, and even third-party modules add magic methods on their own, like methods to cast an object to a type or checking properties of the object. For example, the builtin "
          },
          {
            "Text": "str()",
            "AttrFlags": 2
          },
          {
            "Text": " function calls the object’s "
          },
          {
            "Text": "__str__",
            "AttrFlags": 2
          },
          {
            "Text": " method, if it exists. Some of these uses are listed below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848162,
        "id": "e6ad048e-a04c-470f-90b1-f054dcc5e688",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848162,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function | Method | Expression |\n–––– | –––– | ––––– |\nCasting to "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "__int__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "int(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nAbsolute function | "
            ],
            [
              "__abs__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "abs(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nCasting to "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "__str__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "str(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nCasting to "
            ],
            [
              "unicode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "__unicode__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "unicode(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (Python 2 only)|\nString representation | "
            ],
            [
              "__repr__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "repr(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nCasting to "
            ],
            [
              "bool",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "__nonzero__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "bool(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nString formatting | "
            ],
            [
              "__format__(self, formatstr)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "\"Hi {:abc}\".format(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nHashing | "
            ],
            [
              "__hash__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "hash(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nLength | "
            ],
            [
              "__len__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "len(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " || Rounding | "
            ],
            [
              "__round__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "round(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nReversed | "
            ],
            [
              "__reversed__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "reversed(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " || Floor | "
            ],
            [
              "__floor__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "math.floor(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nFloor | "
            ],
            [
              "__floor__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "math.floor(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |\nCeiling | "
            ],
            [
              "__ceil__(self)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " | "
            ],
            [
              "math.ceil(a1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " |"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function | Method | Expression |\n–––– | –––– | ––––– |\nCasting to "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "__int__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "int(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nAbsolute function | "
          },
          {
            "Text": "__abs__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "abs(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nCasting to "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "__str__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "str(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nCasting to "
          },
          {
            "Text": "unicode",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "__unicode__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "unicode(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " (Python 2 only)|\nString representation | "
          },
          {
            "Text": "__repr__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "repr(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nCasting to "
          },
          {
            "Text": "bool",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "__nonzero__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "bool(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nString formatting | "
          },
          {
            "Text": "__format__(self, formatstr)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "\"Hi {:abc}\".format(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nHashing | "
          },
          {
            "Text": "__hash__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "hash(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nLength | "
          },
          {
            "Text": "__len__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "len(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " || Rounding | "
          },
          {
            "Text": "__round__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "round(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nReversed | "
          },
          {
            "Text": "__reversed__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "reversed(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " || Floor | "
          },
          {
            "Text": "__floor__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "math.floor(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nFloor | "
          },
          {
            "Text": "__floor__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "math.floor(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |\nCeiling | "
          },
          {
            "Text": "__ceil__(self)",
            "AttrFlags": 2
          },
          {
            "Text": " | "
          },
          {
            "Text": "math.ceil(a1)",
            "AttrFlags": 2
          },
          {
            "Text": " |"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550388848162,
        "id": "af6473e1-34a4-4584-9063-d9bfc2a249bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550388848162,
        "parent_id": "d81e1c96-835c-4deb-b733-376577632b73",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are also the special methods "
            ],
            [
              "__enter__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "__exit__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for context managers, and many more."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are also the special methods "
          },
          {
            "Text": "__enter__",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "__exit__",
            "AttrFlags": 2
          },
          {
            "Text": " for context managers, and many more."
          }
        ]
      }
    ],
    "title": "Operator overloading"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}