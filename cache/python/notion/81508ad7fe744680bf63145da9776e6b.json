{
  "ID": "81508ad7-fe74-4680-bf63-145da9776e6b",
  "Root": {
    "alive": true,
    "content": [
      "097ef289-0039-4879-a10c-58d48339ceb5",
      "29714667-e93d-485a-bdb0-22e2e59a9b25",
      "39a82a26-e4ae-4b53-9798-2f31e334080f",
      "15a94012-faf5-476f-bc4f-661a2515f509",
      "57ea52f5-7683-4603-91e2-d50b7e65bd66",
      "6a2902f1-0049-4c68-bd32-d8b7f7258348",
      "64bbc987-d908-43d2-9859-1179f02bf904",
      "2979ed25-1c51-4455-bc65-a50fbedb572f",
      "22719eb1-96a7-4dd8-963e-eb9c39b2ee3a",
      "390c2aa3-445a-416e-956a-cbad6bcf284e",
      "f4c8046d-1900-48b8-8705-d8234d17dc02"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346322468,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "81508ad7-fe74-4680-bf63-145da9776e6b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550347020000,
    "parent_id": "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Testing Exceptions"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322463,
        "id": "097ef289-0039-4879-a10c-58d48339ceb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322463,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Programs throw errors when for instance wrong input is given. Because of this, one needs to make sure that an error is thrown when actual wrong input is given. Because of that we need to check for an exact exception, for this example we will use the following exception:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Programs throw errors when for instance wrong input is given. Because of this, one needs to make sure that an error is thrown when actual wrong input is given. Because of that we need to check for an exact exception, for this example we will use the following exception:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322466,
        "id": "29714667-e93d-485a-bdb0-22e2e59a9b25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class WrongInputException(Exception):\n    pass"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class WrongInputException(Exception):\n    pass",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322466,
        "id": "39a82a26-e4ae-4b53-9798-2f31e334080f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322466,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This exception is raised when wrong input is given, in the following context where we always expect a number as text input."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This exception is raised when wrong input is given, in the following context where we always expect a number as text input."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322466,
        "id": "15a94012-faf5-476f-bc4f-661a2515f509",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def convert2number(random_input):\n    try:\n        my_input = int(random_input)\n    except ValueError:\n        raise WrongInputException(\"Expected an integer!\")\n    return my_input"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def convert2number(random_input):\n    try:\n        my_input = int(random_input)\n    except ValueError:\n        raise WrongInputException(\"Expected an integer!\")\n    return my_input",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322466,
        "id": "57ea52f5-7683-4603-91e2-d50b7e65bd66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322466,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To check whether an exception has been raised, we use "
            ],
            [
              "assertRaises",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to check for that exception. "
            ],
            [
              "assertRaises",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used in two ways:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To check whether an exception has been raised, we use "
          },
          {
            "Text": "assertRaises",
            "AttrFlags": 2
          },
          {
            "Text": " to check for that exception. "
          },
          {
            "Text": "assertRaises",
            "AttrFlags": 2
          },
          {
            "Text": " can be used in two ways:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322467,
        "id": "6a2902f1-0049-4c68-bd32-d8b7f7258348",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322467,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the regular function call. The first argument takes the exception type, second a callable (usually a function) and the rest of arguments are passed to this callable."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the regular function call. The first argument takes the exception type, second a callable (usually a function) and the rest of arguments are passed to this callable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322467,
        "id": "64bbc987-d908-43d2-9859-1179f02bf904",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322467,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using a "
            ],
            [
              "with",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " clause, giving only the exception type to the function. This has as advantage that more code can be executed, but should be used with care since multiple functions can use the same exception which can be problematic. An example:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using a "
          },
          {
            "Text": "with",
            "AttrFlags": 2
          },
          {
            "Text": " clause, giving only the exception type to the function. This has as advantage that more code can be executed, but should be used with care since multiple functions can use the same exception which can be problematic. An example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322467,
        "id": "2979ed25-1c51-4455-bc65-a50fbedb572f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "with self.assertRaises(WrongInputException):\n    convert2number(\"not a number\")"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "with self.assertRaises(WrongInputException):\n    convert2number(\"not a number\")",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322467,
        "id": "22719eb1-96a7-4dd8-963e-eb9c39b2ee3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322467,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This first has been implemented in the following test case:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This first has been implemented in the following test case:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322467,
        "id": "390c2aa3-445a-416e-956a-cbad6bcf284e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import unittest\n\nclass ExceptionTestCase(unittest.TestCase):\n\n    def test_wrong_input_string(self):\n        self.assertRaises(WrongInputException, convert2number, \"not a number\")\n\n    def test_correct_input(self):\n        try:\n            result = convert2number(\"56\")\n            self.assertIsInstance(result, int)\n        except WrongInputException:\n            self.fail()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import unittest\n\nclass ExceptionTestCase(unittest.TestCase):\n\n    def test_wrong_input_string(self):\n        self.assertRaises(WrongInputException, convert2number, \"not a number\")\n\n    def test_correct_input(self):\n        try:\n            result = convert2number(\"56\")\n            self.assertIsInstance(result, int)\n        except WrongInputException:\n            self.fail()",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346322467,
        "id": "f4c8046d-1900-48b8-8705-d8234d17dc02",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346322467,
        "parent_id": "81508ad7-fe74-4680-bf63-145da9776e6b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There also may be a need to check for an exception which should not have been thrown. However, a test will automatically fail when an exception is thrown and thus may not be necessary at all. Just to show the options, the second test method shows a case on how one can check for an exception not to be thrown. Basically, this is catching the exception and then failing the test using the "
            ],
            [
              "fail",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There also may be a need to check for an exception which should not have been thrown. However, a test will automatically fail when an exception is thrown and thus may not be necessary at all. Just to show the options, the second test method shows a case on how one can check for an exception not to be thrown. Basically, this is catching the exception and then failing the test using the "
          },
          {
            "Text": "fail",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      }
    ],
    "title": "Testing Exceptions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}