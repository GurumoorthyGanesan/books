{
  "ID": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
  "Root": {
    "alive": true,
    "content": [
      "0c27a778-fc35-430f-9eca-6b02f8f60cb5",
      "199eef00-6ee1-4f93-997d-0497ea627875",
      "e0462340-a095-4313-ad83-35414b8dff4b",
      "509ff0c5-e2a0-4e1d-9c13-73910aeff742",
      "247cc5aa-91fa-4eb1-a63a-91e2acda0737",
      "f13fb075-642c-4364-b47e-f77d14e06078",
      "a4625b5e-9a73-425f-9925-70e916f167bc",
      "ed528c4a-6adc-4fb7-b148-7f7ab00e27df",
      "fd25dfc0-635f-41e6-8fce-2f3c5febe67f",
      "bfa83eaa-ac3f-413f-a5b0-898c4e4b0746",
      "07b89f40-c9ab-4a43-b46f-7749dce5908d",
      "a94d2807-ce5c-45a4-8022-12ac43bbc5f6",
      "977cfd41-da78-4b81-9693-7348b474b2c7",
      "2b854dcb-27f0-4a49-9801-6bb65d2a90c3",
      "6d895f0d-d404-4e7c-823a-8fdc20c74dc4",
      "e9e924a0-46a0-4200-a2d4-b3d6b0969cd5",
      "e5e83fb8-e32e-4709-ad8f-538ea0d20dd9",
      "76cbc845-7efa-40cd-a19d-1d1bdf965de9",
      "313b9ca9-2bfc-4251-8404-37b42f4cda07",
      "e12377bd-84e0-4bcd-9b4a-a4c884ecc5de",
      "7158d09f-0e10-4c48-8d0f-d2ee291600ac",
      "d17313ef-9f4e-4d3c-bfe6-0ccb0d02be68",
      "66726ccd-f882-4b3f-bb36-d825025cfdc4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550350774215,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550352120000,
    "parent_id": "71fc79ae-18b5-47de-ae64-7e006c4197b1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Boolean Logic Expressions"
        ]
      ]
    },
    "type": "page",
    "version": 13,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774209,
        "id": "0c27a778-fc35-430f-9eca-6b02f8f60cb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774209,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Boolean logic expressions, in addition to evaluating to "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", return the "
            ],
            [
              "value",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that was interpreted as "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". It is Pythonic way to represent logic that might otherwise require an if-else test."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Boolean logic expressions, in addition to evaluating to "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": ", return the "
          },
          {
            "Text": "value",
            "AttrFlags": 4
          },
          {
            "Text": " that was interpreted as "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": ". It is Pythonic way to represent logic that might otherwise require an if-else test."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774212,
        "id": "199eef00-6ee1-4f93-997d-0497ea627875",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774212,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And operator"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "And operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774212,
        "id": "e0462340-a095-4313-ad83-35414b8dff4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774212,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "and",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator evaluates all expressions and returns the last expression if all expressions evaluate to "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Otherwise it returns the first value that evaluates to "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "and",
            "AttrFlags": 2
          },
          {
            "Text": " operator evaluates all expressions and returns the last expression if all expressions evaluate to "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": ". Otherwise it returns the first value that evaluates to "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "509ff0c5-e2a0-4e1d-9c13-73910aeff742",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352060000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e 1 and 2\n2\n\n\u003e\u003e\u003e 1 and 0\n0\n\n\u003e\u003e\u003e 1 and \"Hello World\"\n\"Hello World\"\n\n\u003e\u003e\u003e \"\" and \"Pancakes\"\n\"\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e 1 and 2\n2\n\n\u003e\u003e\u003e 1 and 0\n0\n\n\u003e\u003e\u003e 1 and \"Hello World\"\n\"Hello World\"\n\n\u003e\u003e\u003e \"\" and \"Pancakes\"\n\"\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "247cc5aa-91fa-4eb1-a63a-91e2acda0737",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774213,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or operator"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or operator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "f13fb075-642c-4364-b47e-f77d14e06078",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774213,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "or",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator evaluates the expressions left to right and returns the first value that evaluates to "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or the last value (if none are "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "or",
            "AttrFlags": 2
          },
          {
            "Text": " operator evaluates the expressions left to right and returns the first value that evaluates to "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " or the last value (if none are "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "a4625b5e-9a73-425f-9925-70e916f167bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352060000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e 1 or 2\n1\n\n\u003e\u003e\u003e None or 1\n1\n\n\u003e\u003e\u003e 0 or []\n[]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e 1 or 2\n1\n\n\u003e\u003e\u003e None or 1\n1\n\n\u003e\u003e\u003e 0 or []\n[]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "ed528c4a-6adc-4fb7-b148-7f7ab00e27df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774213,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Lazy evaluation"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Lazy evaluation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "fd25dfc0-635f-41e6-8fce-2f3c5febe67f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774213,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you use this approach, remember that the evaluation is lazy. Expressions that are not required to be evaluated to determine the result are not evaluated. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you use this approach, remember that the evaluation is lazy. Expressions that are not required to be evaluated to determine the result are not evaluated. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774213,
        "id": "bfa83eaa-ac3f-413f-a5b0-898c4e4b0746",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352060000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e def print_me():\n        print('I am here!')\n\u003e\u003e\u003e 0 and print_me()\n0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e def print_me():\n        print('I am here!')\n\u003e\u003e\u003e 0 and print_me()\n0",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774214,
        "id": "07b89f40-c9ab-4a43-b46f-7749dce5908d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774214,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example, "
            ],
            [
              "print_me",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is never executed because Python can determine the entire expression is "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when it encounters the "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Keep this in mind if "
            ],
            [
              "print_me",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " needs to execute to serve your program logic."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example, "
          },
          {
            "Text": "print_me",
            "AttrFlags": 2
          },
          {
            "Text": " is never executed because Python can determine the entire expression is "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": " when it encounters the "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": "). Keep this in mind if "
          },
          {
            "Text": "print_me",
            "AttrFlags": 2
          },
          {
            "Text": " needs to execute to serve your program logic."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774214,
        "id": "a94d2807-ce5c-45a4-8022-12ac43bbc5f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774214,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Testing for multiple conditions"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Testing for multiple conditions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774214,
        "id": "977cfd41-da78-4b81-9693-7348b474b2c7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774214,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common mistake when checking for multiple conditions is to apply the logic incorrectly."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common mistake when checking for multiple conditions is to apply the logic incorrectly."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774214,
        "id": "2b854dcb-27f0-4a49-9801-6bb65d2a90c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774214,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is trying to check if two variables are each greater than 2. The statement is evaluated as - "
            ],
            [
              "if (a) and (b \u003e 2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This produces an unexpected result because "
            ],
            [
              "bool(a)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " evaluates as "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not zero."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is trying to check if two variables are each greater than 2. The statement is evaluated as - "
          },
          {
            "Text": "if (a) and (b \u003e 2)",
            "AttrFlags": 2
          },
          {
            "Text": ". This produces an unexpected result because "
          },
          {
            "Text": "bool(a)",
            "AttrFlags": 2
          },
          {
            "Text": " evaluates as "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " when "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is not zero."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774214,
        "id": "6d895f0d-d404-4e7c-823a-8fdc20c74dc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352120000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e a = 1\n\u003e\u003e\u003e b = 6\n\u003e\u003e\u003e if a and b \u003e 2:\n...     print('yes')\n... else:\n...     print('no')\n    \nyes"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e a = 1\n\u003e\u003e\u003e b = 6\n\u003e\u003e\u003e if a and b \u003e 2:\n...     print('yes')\n... else:\n...     print('no')\n    \nyes",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774214,
        "id": "e9e924a0-46a0-4200-a2d4-b3d6b0969cd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774214,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Each variable needs to be compared separately."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Each variable needs to be compared separately."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "e5e83fb8-e32e-4709-ad8f-538ea0d20dd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352120000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e if a \u003e 2 and b \u003e 2:\n...     print('yes')\n... else:\n...     print('no')\n        \nno"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e if a \u003e 2 and b \u003e 2:\n...     print('yes')\n... else:\n...     print('no')\n        \nno",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "76cbc845-7efa-40cd-a19d-1d1bdf965de9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774215,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another, similar, mistake is made when checking if a variable is one of multiple values. The statement in this example is evaluated as - "
            ],
            [
              "if (a == 3) or (4) or (6)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This produces an unexpected result because "
            ],
            [
              "bool(4)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "bool(6)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " each evaluate to "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another, similar, mistake is made when checking if a variable is one of multiple values. The statement in this example is evaluated as - "
          },
          {
            "Text": "if (a == 3) or (4) or (6)",
            "AttrFlags": 2
          },
          {
            "Text": ". This produces an unexpected result because "
          },
          {
            "Text": "bool(4)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "bool(6)",
            "AttrFlags": 2
          },
          {
            "Text": " each evaluate to "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "313b9ca9-2bfc-4251-8404-37b42f4cda07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352120000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e a = 1\n\u003e\u003e\u003e if a == 3 or 4 or 6:\n...     print('yes')\n... else:\n...     print('no')\n       \nyes"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e a = 1\n\u003e\u003e\u003e if a == 3 or 4 or 6:\n...     print('yes')\n... else:\n...     print('no')\n       \nyes",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "e12377bd-84e0-4bcd-9b4a-a4c884ecc5de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774215,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Again each comparison must be made separately"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Again each comparison must be made separately"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "7158d09f-0e10-4c48-8d0f-d2ee291600ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352120000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e if a == 3 or a == 4 or a == 6:\n...     print('yes')\n... else:\n...     print('no')\n        \nno"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e if a == 3 or a == 4 or a == 6:\n...     print('yes')\n... else:\n...     print('no')\n        \nno",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "d17313ef-9f4e-4d3c-bfe6-0ccb0d02be68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350774215,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the in operator is the canonical way to write this."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the in operator is the canonical way to write this."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350774215,
        "id": "66726ccd-f882-4b3f-bb36-d825025cfdc4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550352120000,
        "parent_id": "7523c63f-7e37-4a2f-88d7-3c2a69c621cd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e if a in (3, 4, 6):\n...     print('yes')\n... else:\n...     print('no')\n    \nno"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e if a in (3, 4, 6):\n...     print('yes')\n... else:\n...     print('no')\n    \nno",
        "code_language": "Python"
      }
    ],
    "title": "Boolean Logic Expressions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}