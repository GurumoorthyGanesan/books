{
  "ID": "3561ccec-6e51-4521-8034-b92be85f84da",
  "Root": {
    "alive": true,
    "content": [
      "3cb3225f-38d5-406f-aa00-93f925778c93",
      "9b336c3f-e5a9-4220-8521-fe5564902e6a",
      "3038e3a4-c627-449d-9511-a7fb83dc08e5",
      "7f56facf-4bac-4202-8c22-e4cece2dcb68",
      "c66da81e-2b32-4329-885a-011211c93418"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550357314362,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3561ccec-6e51-4521-8034-b92be85f84da",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550357700000,
    "parent_id": "fbd6ee98-3b2f-4047-8c89-f040e48632d1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Zipping two iterators until they are both exhausted"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357314359,
        "id": "3cb3225f-38d5-406f-aa00-93f925778c93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357314359,
        "parent_id": "3561ccec-6e51-4521-8034-b92be85f84da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Similar to the built-in function "
            ],
            [
              "zip()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "itertools.zip_longest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will continue iterating beyond the end of the shorter of two iterables."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Similar to the built-in function "
          },
          {
            "Text": "zip()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "itertools.zip_longest",
            "AttrFlags": 2
          },
          {
            "Text": " will continue iterating beyond the end of the shorter of two iterables."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357314361,
        "id": "9b336c3f-e5a9-4220-8521-fe5564902e6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357700000,
        "parent_id": "3561ccec-6e51-4521-8034-b92be85f84da",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from itertools import zip_longest\na = [i for i in range(5)] # Length is 5\nb = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] # Length is 7\nfor i in zip_longest(a, b):\n    x, y = i  # Note that zip longest returns the values as a tuple\n    print(x, y)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from itertools import zip_longest\na = [i for i in range(5)] # Length is 5\nb = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] # Length is 7\nfor i in zip_longest(a, b):\n    x, y = i  # Note that zip longest returns the values as a tuple\n    print(x, y)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357314361,
        "id": "3038e3a4-c627-449d-9511-a7fb83dc08e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357314361,
        "parent_id": "3561ccec-6e51-4521-8034-b92be85f84da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An optional "
            ],
            [
              "fillvalue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument can be passed (defaults to "
            ],
            [
              "''",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An optional "
          },
          {
            "Text": "fillvalue",
            "AttrFlags": 2
          },
          {
            "Text": " argument can be passed (defaults to "
          },
          {
            "Text": "''",
            "AttrFlags": 2
          },
          {
            "Text": ") like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357314361,
        "id": "7f56facf-4bac-4202-8c22-e4cece2dcb68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357700000,
        "parent_id": "3561ccec-6e51-4521-8034-b92be85f84da",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "for i in zip_longest(a, b, fillvalue='Hogwash!'):\n    x, y = i  # Note that zip longest returns the values as a tuple\n    print(x, y)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "for i in zip_longest(a, b, fillvalue='Hogwash!'):\n    x, y = i  # Note that zip longest returns the values as a tuple\n    print(x, y)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550357314362,
        "id": "c66da81e-2b32-4329-885a-011211c93418",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550357314362,
        "parent_id": "3561ccec-6e51-4521-8034-b92be85f84da",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 2.6 and 2.7, this function is called "
            ],
            [
              "itertools.izip_longest",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 2.6 and 2.7, this function is called "
          },
          {
            "Text": "itertools.izip_longest",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Zipping two iterators until they are both exhausted",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}