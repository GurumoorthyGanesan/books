{
  "ID": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
  "Root": {
    "alive": true,
    "content": [
      "4c81e809-ad8c-4933-8211-8c2d272fe6c1",
      "eb856d82-e8b2-41b3-aa57-2ec2f9951553",
      "0aa2c6d8-69dc-434a-850c-a40ca670f73d",
      "8db1ba1c-f2d0-4909-90ab-4516adadc1d4",
      "024cfece-404d-43ab-a3f9-2bd3c42a2699",
      "facd9b62-f76a-4672-8ee4-26e81ace7d6a",
      "629cccdf-6b05-4b21-b5e8-719424e40730",
      "9ab90e26-826e-4c28-8698-e442ff862a73"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389589531,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550470080000,
    "parent_id": "ec883772-3307-46a3-8831-ebcc8479e939",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Global Interpreter Lock GIL and blocking threads"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589529,
        "id": "4c81e809-ad8c-4933-8211-8c2d272fe6c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589529,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Plenty has been "
            ],
            [
              "written",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Global_interpreter_lock"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "about",
              [
                [
                  "a",
                  "https://wiki.python.org/moin/GlobalInterpreterLock"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "Python’s",
              [
                [
                  "a",
                  "https://docs.python.org/3/glossary.html#term-global-interpreter-lock"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "GIL",
              [
                [
                  "a",
                  "http://python-notes.curiousefficiency.org/en/latest/python3/multicore_python.html"
                ]
              ]
            ],
            [
              ". It can sometimes cause confusion when dealing with multi-threaded (not to be confused with multiprocess) applications."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Plenty has been "
          },
          {
            "Text": "written",
            "Link": "https://en.wikipedia.org/wiki/Global_interpreter_lock"
          },
          {
            "Text": " "
          },
          {
            "Text": "about",
            "Link": "https://wiki.python.org/moin/GlobalInterpreterLock"
          },
          {
            "Text": " "
          },
          {
            "Text": "Python’s",
            "Link": "https://docs.python.org/3/glossary.html#term-global-interpreter-lock"
          },
          {
            "Text": " "
          },
          {
            "Text": "GIL",
            "Link": "http://python-notes.curiousefficiency.org/en/latest/python3/multicore_python.html"
          },
          {
            "Text": ". It can sometimes cause confusion when dealing with multi-threaded (not to be confused with multiprocess) applications."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589530,
        "id": "eb856d82-e8b2-41b3-aa57-2ec2f9951553",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589530,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589530,
        "id": "0aa2c6d8-69dc-434a-850c-a40ca670f73d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589530,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import math\nfrom threading import Thread\n\ndef calc_fact(num):\n    math.factorial(num)\n\nnum = 600000\nt = Thread(target=calc_fact, daemon=True, args=[num])\nprint(\"About to calculate: {}!\".format(num))\nt.start()\nprint(\"Calculating...\")\nt.join()\nprint(\"Calculated\")"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import math\nfrom threading import Thread\n\ndef calc_fact(num):\n    math.factorial(num)\n\nnum = 600000\nt = Thread(target=calc_fact, daemon=True, args=[num])\nprint(\"About to calculate: {}!\".format(num))\nt.start()\nprint(\"Calculating...\")\nt.join()\nprint(\"Calculated\")",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589530,
        "id": "8db1ba1c-f2d0-4909-90ab-4516adadc1d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589530,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You would expect to see "
            ],
            [
              "Calculating...",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " printed out immediately after the thread is started, we wanted the calculation to happen in a new thread after all! But in actuality, you see it get printed after the calculation is complete. That is because the new thread relies on a C function ("
            ],
            [
              "math.factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") which will lock the GIL while it executes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You would expect to see "
          },
          {
            "Text": "Calculating...",
            "AttrFlags": 2
          },
          {
            "Text": " printed out immediately after the thread is started, we wanted the calculation to happen in a new thread after all! But in actuality, you see it get printed after the calculation is complete. That is because the new thread relies on a C function ("
          },
          {
            "Text": "math.factorial",
            "AttrFlags": 2
          },
          {
            "Text": ") which will lock the GIL while it executes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589530,
        "id": "024cfece-404d-43ab-a3f9-2bd3c42a2699",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589530,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are a couple ways around this. The first is to implement your factorial function in native Python. This will allow the main thread to grab control while you are inside your loop. The downside is that this solution will be "
            ],
            [
              "a lot",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " slower, since we’re not using the C function anymore."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are a couple ways around this. The first is to implement your factorial function in native Python. This will allow the main thread to grab control while you are inside your loop. The downside is that this solution will be "
          },
          {
            "Text": "a lot",
            "AttrFlags": 1
          },
          {
            "Text": " slower, since we’re not using the C function anymore."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589530,
        "id": "facd9b62-f76a-4672-8ee4-26e81ace7d6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589530,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def calc_fact(num):\n    \"\"\" A slow version of factorial in native Python \"\"\"\n    res = 1\n    while num \u003e= 1:\n        res = res * num\n        num -= 1\n    return res"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def calc_fact(num):\n    \"\"\" A slow version of factorial in native Python \"\"\"\n    res = 1\n    while num \u003e= 1:\n        res = res * num\n        num -= 1\n    return res",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589531,
        "id": "629cccdf-6b05-4b21-b5e8-719424e40730",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589531,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also "
            ],
            [
              "sleep",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for a period of time before starting your execution. Note: this won’t actually allow your program to interrupt the computation happening inside the C function, but it will allow your main thread to continue after the spawn, which is what you may expect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also "
          },
          {
            "Text": "sleep",
            "AttrFlags": 2
          },
          {
            "Text": " for a period of time before starting your execution. Note: this won’t actually allow your program to interrupt the computation happening inside the C function, but it will allow your main thread to continue after the spawn, which is what you may expect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389589531,
        "id": "9ab90e26-826e-4c28-8698-e442ff862a73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389589531,
        "parent_id": "cf430c07-0c80-4b19-b367-e1d93cdedabd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "def calc_fact(num):\n    sleep(0.001)\n    math.factorial(num)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "def calc_fact(num):\n    sleep(0.001)\n    math.factorial(num)",
        "code_language": "Plain Text"
      }
    ],
    "title": "Global Interpreter Lock GIL and blocking threads",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}