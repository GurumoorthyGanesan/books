{
  "ID": "b0a37029-2eee-4e47-84cb-63f6592907e4",
  "Root": {
    "alive": true,
    "content": [
      "96840af1-cafb-4f7a-bea9-aee05fa7760b",
      "04a80b4b-3909-4628-9cf6-324500267dad",
      "48562ab4-20df-49b0-bfff-dbbb2e1b20ca",
      "dcdc4717-6acb-465c-83f2-b586d272174c",
      "1c263a95-caae-442c-b246-2b458f7641fd",
      "01751dbe-92fe-457e-a297-ddb5ac6dea88",
      "7c4fcb90-c59a-49e1-af6b-e3bb19e276c2",
      "7d618042-6c69-4ce9-be65-170a9bb63d7a",
      "1bdde479-b41d-42bb-9eae-56408a12e2fb",
      "c0a3bfd3-6ba8-4c4e-88bb-18590c7bb5e5",
      "b801adea-e91d-46c9-9ccb-73d6e265bbbd",
      "607331cb-87ea-47ec-91c1-f10b40c5a5d3",
      "a4248ccd-dd68-4544-aee9-312f45ca07d5",
      "02a90c83-56fb-4620-9456-d48a4d9946c2",
      "e4dda99a-853a-4650-a635-f450b43416f3",
      "f3151a03-a3ca-4c04-9cb1-ca5d0c1cf554",
      "61984277-fb0f-4183-b6d3-03f2ca12fa97",
      "a9ae429f-9537-417f-8710-1a94be6f594a",
      "c1241acb-c975-445b-8d2c-ab30dedf3340",
      "ce224171-5f9a-4134-833e-77d5977ceb13"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550350430245,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550350500000,
    "parent_id": "7ad8cf4b-5e6d-4587-a7a4-5baeac3ddd3e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basics of String Formatting"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430238,
        "id": "96840af1-cafb-4f7a-bea9-aee05fa7760b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "foo = 1\nbar = 'bar'\nbaz = 3.14"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo = 1\nbar = 'bar'\nbaz = 3.14",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430241,
        "id": "04a80b4b-3909-4628-9cf6-324500267dad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430241,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use "
            ],
            [
              "str.format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to format output. Bracket pairs are replaced with arguments in the order in which the arguments are passed:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use "
          },
          {
            "Text": "str.format",
            "AttrFlags": 2
          },
          {
            "Text": " to format output. Bracket pairs are replaced with arguments in the order in which the arguments are passed:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430241,
        "id": "48562ab4-20df-49b0-bfff-dbbb2e1b20ca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "print('{}, {} and {}'.format(foo, bar, baz))\n# Out: \"1, bar and 3.14\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "print('{}, {} and {}'.format(foo, bar, baz))\n# Out: \"1, bar and 3.14\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430241,
        "id": "dcdc4717-6acb-465c-83f2-b586d272174c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430241,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Indexes can also be specified inside the brackets. The numbers correspond to indexes of the arguments passed to the "
            ],
            [
              "str.format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function (0-based)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Indexes can also be specified inside the brackets. The numbers correspond to indexes of the arguments passed to the "
          },
          {
            "Text": "str.format",
            "AttrFlags": 2
          },
          {
            "Text": " function (0-based)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430241,
        "id": "1c263a95-caae-442c-b246-2b458f7641fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "print('{0}, {1}, {2}, and {1}'.format(foo, bar, baz))\n# Out: \"1, bar, 3.14, and bar\"\nprint('{0}, {1}, {2}, and {3}'.format(foo, bar, baz))\n# Out: index out of range error"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "print('{0}, {1}, {2}, and {1}'.format(foo, bar, baz))\n# Out: \"1, bar, 3.14, and bar\"\nprint('{0}, {1}, {2}, and {3}'.format(foo, bar, baz))\n# Out: index out of range error",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430241,
        "id": "01751dbe-92fe-457e-a297-ddb5ac6dea88",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430241,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Named arguments can be also used:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Named arguments can be also used:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430241,
        "id": "7c4fcb90-c59a-49e1-af6b-e3bb19e276c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "print(\"X value is: {x_val}. Y value is: {y_val}.\".format(x_val=2, y_val=3))\n# Out: \"X value is: 2. Y value is: 3.\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "print(\"X value is: {x_val}. Y value is: {y_val}.\".format(x_val=2, y_val=3))\n# Out: \"X value is: 2. Y value is: 3.\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "7d618042-6c69-4ce9-be65-170a9bb63d7a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430242,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Object attributes can be referenced when passed into "
            ],
            [
              "str.format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Object attributes can be referenced when passed into "
          },
          {
            "Text": "str.format",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "1bdde479-b41d-42bb-9eae-56408a12e2fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class AssignValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = AssignValue(6)\nprint('My value is: {0.value}'.format(my_value))  # \"0\" is optional\n# Out: \"My value is: 6\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class AssignValue(object):\n    def __init__(self, value):\n        self.value = value\nmy_value = AssignValue(6)\nprint('My value is: {0.value}'.format(my_value))  # \"0\" is optional\n# Out: \"My value is: 6\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "c0a3bfd3-6ba8-4c4e-88bb-18590c7bb5e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430242,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dictionary keys can be used as well:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dictionary keys can be used as well:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "b801adea-e91d-46c9-9ccb-73d6e265bbbd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350500000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "my_dict = {'key': 6, 'other_key': 7}\nprint(\"My other key is: {0[other_key]}\".format(my_dict))  # \"0\" is optional\n# Out: \"My other key is: 7\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "my_dict = {'key': 6, 'other_key': 7}\nprint(\"My other key is: {0[other_key]}\".format(my_dict))  # \"0\" is optional\n# Out: \"My other key is: 7\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "607331cb-87ea-47ec-91c1-f10b40c5a5d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430242,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Same applies to list and tuple indices:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Same applies to list and tuple indices:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "a4248ccd-dd68-4544-aee9-312f45ca07d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350500000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "my_list = ['zero', 'one', 'two']\nprint(\"2nd element is: {0[2]}\".format(my_list))  # \"0\" is optional\n# Out: \"2nd element is: two\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "my_list = ['zero', 'one', 'two']\nprint(\"2nd element is: {0[2]}\".format(my_list))  # \"0\" is optional\n# Out: \"2nd element is: two\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430242,
        "id": "02a90c83-56fb-4620-9456-d48a4d9946c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430242,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: In addition to str.format, Python also provides the modulo operator %–also known as the string formatting or interpolation operator (see PEP 3101)–for formatting strings. str.format is a successor of % and it offers greater flexibility, for instance by making it easier to carry out multiple substitutions."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: In addition to str.format, Python also provides the modulo operator %–also known as the string formatting or interpolation operator (see PEP 3101)–for formatting strings. str.format is a successor of % and it offers greater flexibility, for instance by making it easier to carry out multiple substitutions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430244,
        "id": "e4dda99a-853a-4650-a635-f450b43416f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430244,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to argument indexes, you can also include a "
            ],
            [
              "format specification",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " inside the curly brackets. This is an expression that follows special rules and must be preceded by a colon ("
            ],
            [
              ":",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). See the "
            ],
            [
              "docs",
              [
                [
                  "a",
                  "https://docs.python.org/2/library/string.html#format-specification-mini-language"
                ]
              ]
            ],
            [
              " for a full description of format specification. An example of format specification is the alignment directive "
            ],
            [
              ":~^20",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " stands for center alignment, total width 20, fill with ~ character):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to argument indexes, you can also include a "
          },
          {
            "Text": "format specification",
            "AttrFlags": 4
          },
          {
            "Text": " inside the curly brackets. This is an expression that follows special rules and must be preceded by a colon ("
          },
          {
            "Text": ":",
            "AttrFlags": 2
          },
          {
            "Text": "). See the "
          },
          {
            "Text": "docs",
            "Link": "https://docs.python.org/2/library/string.html#format-specification-mini-language"
          },
          {
            "Text": " for a full description of format specification. An example of format specification is the alignment directive "
          },
          {
            "Text": ":~^20",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " stands for center alignment, total width 20, fill with ~ character):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430244,
        "id": "f3151a03-a3ca-4c04-9cb1-ca5d0c1cf554",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350500000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "'{:~^20}'.format('centered')\n# Out: '~~~~~~centered~~~~~~'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "'{:~^20}'.format('centered')\n# Out: '~~~~~~centered~~~~~~'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430244,
        "id": "61984277-fb0f-4183-b6d3-03f2ca12fa97",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430244,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows behaviour not possible with "
            ],
            [
              "%",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", for example repetition of arguments:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "format",
            "AttrFlags": 2
          },
          {
            "Text": " allows behaviour not possible with "
          },
          {
            "Text": "%",
            "AttrFlags": 2
          },
          {
            "Text": ", for example repetition of arguments:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430245,
        "id": "a9ae429f-9537-417f-8710-1a94be6f594a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350500000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "t = (12, 45, 22222, 103, 6)\nprint '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*t)    \n# Out: 12 22222 45 22222 103 22222 6 22222"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "t = (12, 45, 22222, 103, 6)\nprint '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*t)    \n# Out: 12 22222 45 22222 103 22222 6 22222",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430245,
        "id": "c1241acb-c975-445b-8d2c-ab30dedf3340",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350430245,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As "
            ],
            [
              "format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a function, it can be used as an argument in other functions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As "
          },
          {
            "Text": "format",
            "AttrFlags": 2
          },
          {
            "Text": " is a function, it can be used as an argument in other functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350430245,
        "id": "ce224171-5f9a-4134-833e-77d5977ceb13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350500000,
        "parent_id": "b0a37029-2eee-4e47-84cb-63f6592907e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "number_list = [12,45,78]\nprint map('the number is {}'.format, number_list)\n# Out: ['the number is 12', 'the number is 45', 'the number is 78']   \n    \n\nfrom datetime import datetime,timedelta\n    \nonce_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)\ndelta = timedelta(days=13, hours=8,  minutes=20)\n    \ngen = (once_upon_a_time + x * delta for x in xrange(5))\n    \nprint '\\n'.join(map('{:%Y-%m-%d %H:%M:%S}'.format, gen))\n#Out: 2010-07-01 12:00:00\n#     2010-07-14 20:20:00\n#     2010-07-28 04:40:00\n#     2010-08-10 13:00:00\n#     2010-08-23 21:20:00"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "number_list = [12,45,78]\nprint map('the number is {}'.format, number_list)\n# Out: ['the number is 12', 'the number is 45', 'the number is 78']   \n    \n\nfrom datetime import datetime,timedelta\n    \nonce_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)\ndelta = timedelta(days=13, hours=8,  minutes=20)\n    \ngen = (once_upon_a_time + x * delta for x in xrange(5))\n    \nprint '\\n'.join(map('{:%Y-%m-%d %H:%M:%S}'.format, gen))\n#Out: 2010-07-01 12:00:00\n#     2010-07-14 20:20:00\n#     2010-07-28 04:40:00\n#     2010-08-10 13:00:00\n#     2010-08-23 21:20:00",
        "code_language": "Python"
      }
    ],
    "title": "Basics of String Formatting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}