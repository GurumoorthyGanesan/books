{
  "ID": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
  "Root": {
    "alive": true,
    "content": [
      "93bca889-e7c2-4999-b6ec-e163010469af",
      "449d24df-f8aa-4bc3-b7d4-32dbfc329455",
      "0f4844ea-07b3-4ea9-987a-bcbc908672b4",
      "dfa5d195-dc93-4aa7-9ffe-ce79f03ef7f9",
      "28452bd4-4f15-4189-abe7-76ff6892cae5",
      "e3cc9d29-5a41-4097-a334-c52af972024b",
      "4ea1751f-3f98-4a7b-893d-5fba6efdda47",
      "47bb7610-a2a7-49fa-9b9b-5b9cc55e5d14",
      "7345d73b-d8bf-4ea5-b619-56c2d1b0aa30",
      "f165145d-e196-46f9-be21-a9b7681b0a58",
      "677f9afa-e549-4b3f-89ca-c0ecbf4d1fad",
      "356d6a6e-fdfc-4056-9963-f1ca9d5601dd",
      "1f068d3a-b778-4a25-b236-b70ba7c47fcd",
      "e61a37a2-49c3-43b5-b10e-de4aed6c95b6",
      "d5c38603-3385-486c-b57a-0b08ffbcec54"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346323245,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550347020000,
    "parent_id": "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Choosing Assertions Within Unittests"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323241,
        "id": "93bca889-e7c2-4999-b6ec-e163010469af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323241,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While Python has an "
            ],
            [
              "assert",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/2/reference/simple_stmts.html#grammar-token-assert_stmt"
                ]
              ]
            ],
            [
              " statement",
              [
                [
                  "a",
                  "https://docs.python.org/2/reference/simple_stmts.html#grammar-token-assert_stmt"
                ]
              ]
            ],
            [
              ", the Python unit testing framework has better assertions specialized for tests: they are more informative on failures, and do not depend on the execution’s debug mode."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While Python has an "
          },
          {
            "Text": "assert",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/2/reference/simple_stmts.html#grammar-token-assert_stmt"
          },
          {
            "Text": " statement",
            "Link": "https://docs.python.org/2/reference/simple_stmts.html#grammar-token-assert_stmt"
          },
          {
            "Text": ", the Python unit testing framework has better assertions specialized for tests: they are more informative on failures, and do not depend on the execution’s debug mode."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323243,
        "id": "449d24df-f8aa-4bc3-b7d4-32dbfc329455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323243,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Perhaps the simplest assertion is "
            ],
            [
              "assertTrue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which can be used like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Perhaps the simplest assertion is "
          },
          {
            "Text": "assertTrue",
            "AttrFlags": 2
          },
          {
            "Text": ", which can be used like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323243,
        "id": "0f4844ea-07b3-4ea9-987a-bcbc908672b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import unittest\n\nclass SimplisticTest(unittest.TestCase):\n    def test_basic(self):\n        self.assertTrue(1 + 1 == 2)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import unittest\n\nclass SimplisticTest(unittest.TestCase):\n    def test_basic(self):\n        self.assertTrue(1 + 1 == 2)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323243,
        "id": "dfa5d195-dc93-4aa7-9ffe-ce79f03ef7f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323243,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will run fine, but replacing the line above with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will run fine, but replacing the line above with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323243,
        "id": "28452bd4-4f15-4189-abe7-76ff6892cae5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "self.assertTrue(1 + 1 == 3)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "self.assertTrue(1 + 1 == 3)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323243,
        "id": "e3cc9d29-5a41-4097-a334-c52af972024b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323243,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "will fail."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "will fail."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "4ea1751f-3f98-4a7b-893d-5fba6efdda47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323244,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "assertTrue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " assertion is quite likely the most general assertion, as anything tested can be cast as some boolean condition, but often there are better alternatives. When testing for equality, as above, it is better to write"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "assertTrue",
            "AttrFlags": 2
          },
          {
            "Text": " assertion is quite likely the most general assertion, as anything tested can be cast as some boolean condition, but often there are better alternatives. When testing for equality, as above, it is better to write"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "47bb7610-a2a7-49fa-9b9b-5b9cc55e5d14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347020000,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "self.assertEqual(1 + 1, 3)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "self.assertEqual(1 + 1, 3)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "7345d73b-d8bf-4ea5-b619-56c2d1b0aa30",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323244,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the former fails, the message is"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the former fails, the message is"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "f165145d-e196-46f9-be21-a9b7681b0a58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323244,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "======================================================================\n\nFAIL: test (__main__.TruthTest)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"stuff.py\", line 6, in test\n\n    self.assertTrue(1 + 1 == 3)\n\nAssertionError: False is not true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "======================================================================\n\nFAIL: test (__main__.TruthTest)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"stuff.py\", line 6, in test\n\n    self.assertTrue(1 + 1 == 3)\n\nAssertionError: False is not true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "677f9afa-e549-4b3f-89ca-c0ecbf4d1fad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323244,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "but when the latter fails, the message is"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "but when the latter fails, the message is"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "356d6a6e-fdfc-4056-9963-f1ca9d5601dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323244,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "======================================================================\n\nFAIL: test (__main__.TruthTest)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"stuff.py\", line 6, in test\n\n    self.assertEqual(1 + 1, 3)\nAssertionError: 2 != 3"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "======================================================================\n\nFAIL: test (__main__.TruthTest)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"stuff.py\", line 6, in test\n\n    self.assertEqual(1 + 1, 3)\nAssertionError: 2 != 3",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323244,
        "id": "1f068d3a-b778-4a25-b236-b70ba7c47fcd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323244,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "which is more informative (it actually evaluated the result of the left hand side)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "which is more informative (it actually evaluated the result of the left hand side)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323245,
        "id": "e61a37a2-49c3-43b5-b10e-de4aed6c95b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323245,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can find the list of assertions "
            ],
            [
              "in the standard documentation",
              [
                [
                  "a",
                  "https://docs.python.org/2/library/unittest.html#assert-methods"
                ]
              ]
            ],
            [
              ". In general, it is a good idea to choose the assertion that is the most specifically fitting the condition. Thus, as shown above, for asserting that "
            ],
            [
              "1 + 1 == 2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " it is better to use "
            ],
            [
              "assertEqual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " than "
            ],
            [
              "assertTrue",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Similarly, for asserting that "
            ],
            [
              "a is None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", it is better to use "
            ],
            [
              "assertIsNone",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " than "
            ],
            [
              "assertEqual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can find the list of assertions "
          },
          {
            "Text": "in the standard documentation",
            "Link": "https://docs.python.org/2/library/unittest.html#assert-methods"
          },
          {
            "Text": ". In general, it is a good idea to choose the assertion that is the most specifically fitting the condition. Thus, as shown above, for asserting that "
          },
          {
            "Text": "1 + 1 == 2",
            "AttrFlags": 2
          },
          {
            "Text": " it is better to use "
          },
          {
            "Text": "assertEqual",
            "AttrFlags": 2
          },
          {
            "Text": " than "
          },
          {
            "Text": "assertTrue",
            "AttrFlags": 2
          },
          {
            "Text": ". Similarly, for asserting that "
          },
          {
            "Text": "a is None",
            "AttrFlags": 2
          },
          {
            "Text": ", it is better to use "
          },
          {
            "Text": "assertIsNone",
            "AttrFlags": 2
          },
          {
            "Text": " than "
          },
          {
            "Text": "assertEqual",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346323245,
        "id": "d5c38603-3385-486c-b57a-0b08ffbcec54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346323245,
        "parent_id": "cedf263d-9ac3-4751-922b-8da447cfd9fd",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note also that the assertions have negative forms. Thus "
            ],
            [
              "assertEqual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has its negative counterpart "
            ],
            [
              "assertNotEqual",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and "
            ],
            [
              "assertIsNone",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has its negative counterpart "
            ],
            [
              "assertIsNotNone",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Once again, using the negative counterparts when appropriate, will lead to clearer error messages."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note also that the assertions have negative forms. Thus "
          },
          {
            "Text": "assertEqual",
            "AttrFlags": 2
          },
          {
            "Text": " has its negative counterpart "
          },
          {
            "Text": "assertNotEqual",
            "AttrFlags": 2
          },
          {
            "Text": ", and "
          },
          {
            "Text": "assertIsNone",
            "AttrFlags": 2
          },
          {
            "Text": " has its negative counterpart "
          },
          {
            "Text": "assertIsNotNone",
            "AttrFlags": 2
          },
          {
            "Text": ". Once again, using the negative counterparts when appropriate, will lead to clearer error messages."
          }
        ]
      }
    ],
    "title": "Choosing Assertions Within Unittests",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}