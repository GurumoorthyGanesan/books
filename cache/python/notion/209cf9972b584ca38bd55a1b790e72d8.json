{
  "ID": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
  "Root": {
    "alive": true,
    "content": [
      "ee7ef217-7d81-4367-9cc4-a2297230ba9e",
      "6a4b2922-8fa5-4475-9a63-b9e0249fccd1",
      "711b54a5-863c-487b-b9c6-f092086a5d99",
      "df16023f-ca15-4900-9e1f-4104249cc676",
      "9e21c260-8c48-44a0-bd19-43b7e84d5f67",
      "0b5b48c0-6027-4dd5-98d9-19fd8d1e5371",
      "99ba9cb0-0e93-4a05-85a2-daa42ac3d446",
      "3138ca30-8c14-4e93-baa8-49a8158be208",
      "c847f36b-1a14-4c28-9f18-7d86d7edfbe0",
      "81138833-4573-4ef8-9dd9-193163f7ad23",
      "2e42a177-bfe4-486e-87fa-8c50d9680ba7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390588076,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550472960000,
    "parent_id": "7aeced73-daff-461a-beb3-ac9281908249",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using Autobahn as a Websocket Factory"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588070,
        "id": "ee7ef217-7d81-4367-9cc4-a2297230ba9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588070,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Autobahn package can be used for Python web socket server factories."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Autobahn package can be used for Python web socket server factories."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588074,
        "id": "6a4b2922-8fa5-4475-9a63-b9e0249fccd1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588074,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python Autobahn package documentation",
              [
                [
                  "a",
                  "http://autobahn.ws/python/"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python Autobahn package documentation",
            "Link": "http://autobahn.ws/python/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "711b54a5-863c-487b-b9c6-f092086a5d99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To install, typically one would simply use the terminal command"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To install, typically one would simply use the terminal command"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "df16023f-ca15-4900-9e1f-4104249cc676",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(For Linux):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(For Linux):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "9e21c260-8c48-44a0-bd19-43b7e84d5f67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "sudo pip install autobahn"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "sudo pip install autobahn",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "0b5b48c0-6027-4dd5-98d9-19fd8d1e5371",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(For Windows):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(For Windows):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "99ba9cb0-0e93-4a05-85a2-daa42ac3d446",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "python -m pip install autobahn"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "python -m pip install autobahn",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "3138ca30-8c14-4e93-baa8-49a8158be208",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then, a simple echo server can be created in a Python script:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then, a simple echo server can be created in a Python script:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "c847f36b-1a14-4c28-9f18-7d86d7edfbe0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "from autobahn.asyncio.websocket import WebSocketServerProtocol\nclass MyServerProtocol(WebSocketServerProtocol):\n    '''When creating server protocol, the\n    user defined class inheriting the \n    WebSocketServerProtocol needs to override\n    the onMessage, onConnect, et-c events for \n    user specified functionality, these events \n    define your server's protocol, in essence'''\n    def onMessage(self,payload,isBinary):\n        '''The onMessage routine is called \n        when the server receives a message.\n        It has the required arguments payload \n        and the bool isBinary. The payload is the \n        actual contents of the \"message\" and isBinary\n        is simply a flag to let the user know that \n        the payload contains binary data. I typically \n        elsewise assume that the payload is a string.\n        In this example, the payload is returned to sender verbatim.'''\n        self.sendMessage(payload,isBinary)\nif__name__=='__main__':\n    try:\n        importasyncio\n    except ImportError:\n        '''Trollius = 0.3 was renamed'''\n        import trollius as asyncio\n    from autobahn.asyncio.websocketimportWebSocketServerFactory\n    factory=WebSocketServerFactory()\n    '''Initialize the websocket factory, and set the protocol to the \n    above defined protocol(the class that inherits from \n    autobahn.asyncio.websocket.WebSocketServerProtocol)'''\n    factory.protocol=MyServerProtocol\n    '''This above line can be thought of as \"binding\" the methods\n    onConnect, onMessage, et-c that were described in the MyServerProtocol class\n    to the server, setting the servers functionality, ie, protocol'''\n    loop=asyncio.get_event_loop()\n    coro=loop.create_server(factory,'127.0.0.1',9000)\n    server=loop.run_until_complete(coro)\n    '''Run the server in an infinite loop'''\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt:\n        pass\n    finally:\n        server.close()\n        loop.close()"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "from autobahn.asyncio.websocket import WebSocketServerProtocol\nclass MyServerProtocol(WebSocketServerProtocol):\n    '''When creating server protocol, the\n    user defined class inheriting the \n    WebSocketServerProtocol needs to override\n    the onMessage, onConnect, et-c events for \n    user specified functionality, these events \n    define your server's protocol, in essence'''\n    def onMessage(self,payload,isBinary):\n        '''The onMessage routine is called \n        when the server receives a message.\n        It has the required arguments payload \n        and the bool isBinary. The payload is the \n        actual contents of the \"message\" and isBinary\n        is simply a flag to let the user know that \n        the payload contains binary data. I typically \n        elsewise assume that the payload is a string.\n        In this example, the payload is returned to sender verbatim.'''\n        self.sendMessage(payload,isBinary)\nif__name__=='__main__':\n    try:\n        importasyncio\n    except ImportError:\n        '''Trollius = 0.3 was renamed'''\n        import trollius as asyncio\n    from autobahn.asyncio.websocketimportWebSocketServerFactory\n    factory=WebSocketServerFactory()\n    '''Initialize the websocket factory, and set the protocol to the \n    above defined protocol(the class that inherits from \n    autobahn.asyncio.websocket.WebSocketServerProtocol)'''\n    factory.protocol=MyServerProtocol\n    '''This above line can be thought of as \"binding\" the methods\n    onConnect, onMessage, et-c that were described in the MyServerProtocol class\n    to the server, setting the servers functionality, ie, protocol'''\n    loop=asyncio.get_event_loop()\n    coro=loop.create_server(factory,'127.0.0.1',9000)\n    server=loop.run_until_complete(coro)\n    '''Run the server in an infinite loop'''\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt:\n        pass\n    finally:\n        server.close()\n        loop.close()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588075,
        "id": "81138833-4573-4ef8-9dd9-193163f7ad23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588075,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example, a server is being created on the localhost (127.0.0.1) on port 9000. This is the listening IP and port. This is important information, as using this, you could identify your computer’s LAN address and port forward from your modem, though whatever routers you have to the computer. Then, using google to investigate your WAN IP, you could design your website to send WebSocket messages to your WAN IP, on port 9000 (in this example)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example, a server is being created on the localhost (127.0.0.1) on port 9000. This is the listening IP and port. This is important information, as using this, you could identify your computer’s LAN address and port forward from your modem, though whatever routers you have to the computer. Then, using google to investigate your WAN IP, you could design your website to send WebSocket messages to your WAN IP, on port 9000 (in this example)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390588076,
        "id": "2e42a177-bfe4-486e-87fa-8c50d9680ba7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390588076,
        "parent_id": "209cf997-2b58-4ca3-8bd5-5a1b790e72d8",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is important that you port forward from your modem back, meaning that if you have routers daisy chained to the modem, enter into the modem’s configuration settings, port forward from the modem to the connected router, and so forth until the final router your computer is connected to is having the information being received on modem port 9000 (in this example) forwarded to it."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is important that you port forward from your modem back, meaning that if you have routers daisy chained to the modem, enter into the modem’s configuration settings, port forward from the modem to the connected router, and so forth until the final router your computer is connected to is having the information being received on modem port 9000 (in this example) forwarded to it."
          }
        ]
      }
    ],
    "title": "Using Autobahn as a Websocket Factory",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}