{
  "ID": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
  "Root": {
    "alive": true,
    "content": [
      "6a115485-4b0a-4948-b530-fe831d036171",
      "8bef8e82-d4c5-447a-90cf-168a4c7f6f65",
      "30105621-621f-40d8-a399-6c5fa5a33fd9",
      "e0c04fd1-3c15-4a2c-bd25-27fcedfe7950",
      "0576b883-5a27-403f-be94-57d60eda1848",
      "a62dbb74-0134-4437-896e-8a87b1d27656",
      "2303b416-5e02-4143-996b-2b569e2ac89a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550307147602,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550307480000,
    "parent_id": "a0d16770-ed43-43f6-8843-dfd332e9a62a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Chaining multiple iterators together"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147601,
        "id": "6a115485-4b0a-4948-b530-fe831d036171",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307147601,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use "
            ],
            [
              "itertools.chain",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3.4/library/itertools.html#itertools.chain"
                ]
              ]
            ],
            [
              " to create a single generator which will yield the values from several generators in sequence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use "
          },
          {
            "Text": "itertools.chain",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3.4/library/itertools.html#itertools.chain"
          },
          {
            "Text": " to create a single generator which will yield the values from several generators in sequence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147602,
        "id": "8bef8e82-d4c5-447a-90cf-168a4c7f6f65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307480000,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from itertools import chain\na = (x for x in ['1', '2', '3', '4'])\nb = (x for x in ['x', 'y', 'z'])\n' '.join(chain(a, b))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from itertools import chain\na = (x for x in ['1', '2', '3', '4'])\nb = (x for x in ['x', 'y', 'z'])\n' '.join(chain(a, b))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147602,
        "id": "30105621-621f-40d8-a399-6c5fa5a33fd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307147602,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Results in:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Results in:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147602,
        "id": "e0c04fd1-3c15-4a2c-bd25-27fcedfe7950",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307147602,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "'1 2 3 4 x y z'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "'1 2 3 4 x y z'",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147602,
        "id": "0576b883-5a27-403f-be94-57d60eda1848",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307147602,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As an alternate constructor, you can use the classmethod "
            ],
            [
              "chain.from_iterable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which takes as its single parameter an iterable of iterables. To get the same result as above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As an alternate constructor, you can use the classmethod "
          },
          {
            "Text": "chain.from_iterable",
            "AttrFlags": 2
          },
          {
            "Text": " which takes as its single parameter an iterable of iterables. To get the same result as above:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147602,
        "id": "a62dbb74-0134-4437-896e-8a87b1d27656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307480000,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "' '.join(chain.from_iterable([a,b])"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "' '.join(chain.from_iterable([a,b])",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550307147602,
        "id": "2303b416-5e02-4143-996b-2b569e2ac89a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550307147602,
        "parent_id": "f5cabbb4-91d9-4b3d-ac18-0d705ca4bdb4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While "
            ],
            [
              "chain",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can take an arbitrary number of arguments, "
            ],
            [
              "chain.from_iterable",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the only way to chain an "
            ],
            [
              "infinite",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " number of iterables."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While "
          },
          {
            "Text": "chain",
            "AttrFlags": 2
          },
          {
            "Text": " can take an arbitrary number of arguments, "
          },
          {
            "Text": "chain.from_iterable",
            "AttrFlags": 2
          },
          {
            "Text": " is the only way to chain an "
          },
          {
            "Text": "infinite",
            "AttrFlags": 4
          },
          {
            "Text": " number of iterables."
          }
        ]
      }
    ],
    "title": "Chaining multiple iterators together",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}