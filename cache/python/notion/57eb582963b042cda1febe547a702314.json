{
  "ID": "57eb5829-63b0-42cd-a1fe-be547a702314",
  "Root": {
    "alive": true,
    "content": [
      "ed03f153-b549-4f16-b0d0-9a6cb05c46f6",
      "23bb08bf-f80d-45dd-9b40-bd26b2580ad1",
      "54c2986a-38fa-4d0e-b35e-dde8e273be51",
      "5478d57d-c424-4744-8608-207e84b854e6",
      "baa3ba7c-02d0-490f-bcf1-34dcf7e031f5",
      "15844618-7aec-434a-aa4d-eedd27642522",
      "320203f4-5d02-420f-b0ce-a5eec16edd64",
      "e7a3df3f-de55-4b73-bfd4-84d4e82d6792",
      "c71f7c28-15fa-4d01-b345-8cce7b7b50ea",
      "8de90631-9328-4ded-a7b0-bb6ff93f9f8f",
      "20ba8ca1-b56e-40e3-86d3-0d4b0b7d83bf",
      "6439f6a5-0eac-4bb6-a579-1cf9660e28c0",
      "b63c925c-342f-4617-8ad2-1b7a253c03c9",
      "f0d905bc-492b-413a-9dbf-886363215850",
      "10e07eaa-456a-4098-904a-8d94d55dbf0c",
      "96336382-904d-4763-8c84-790b28244a66",
      "57930724-7344-45e9-8982-a9a4fcf79bbe",
      "a46fd832-3c94-4d60-83f5-ed5292f356e5",
      "2bdc4417-7564-4296-8f76-b8318dd41d0b",
      "8b80ed29-da32-48a0-8582-7bd150adf928",
      "3be37eec-27fa-45d2-90c0-31162979c7d1",
      "3d2f4fa5-4100-40b2-880e-bb22ceb97ba4",
      "6bd97860-de9b-4b1b-a535-08fb467f29fb",
      "4793cb5b-445b-40b5-a0b5-c7a546917e13",
      "4731b8d0-bff6-4437-96b2-c37af8d840be",
      "56b0495d-c00a-492b-ae09-9c28ff9edebe",
      "e5b2bea7-de64-4bb4-837c-d7e8e3ac3a3d",
      "2fbb94c1-58b0-4f69-b178-d175302ff253",
      "81630a9f-4fae-4492-8a68-3d3879298269",
      "6fe3c576-33b8-4291-9130-592f736ad64e",
      "9bbc6448-ab11-412c-b5a9-e6f65e1e7c5b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550347959495,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "57eb5829-63b0-42cd-a1fe-be547a702314",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550348160000,
    "parent_id": "6b6906c1-a818-41da-b196-40ce5c79d75d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Strings Bytes versus Unicode"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959488,
        "id": "ed03f153-b549-4f16-b0d0-9a6cb05c46f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959488,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 2 there are two variants of string: those made of bytes with type ("
            ],
            [
              "str",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/2/library/functions.html#str"
                ]
              ]
            ],
            [
              ") and those made of text with type ("
            ],
            [
              "unicode",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/2/library/functions.html#unicode"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 2 there are two variants of string: those made of bytes with type ("
          },
          {
            "Text": "str",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/2/library/functions.html#str"
          },
          {
            "Text": ") and those made of text with type ("
          },
          {
            "Text": "unicode",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/2/library/functions.html#unicode"
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959489,
        "id": "23bb08bf-f80d-45dd-9b40-bd26b2580ad1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959489,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 2, an object of type "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is always a byte sequence, but is commonly used for both text and binary data."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 2, an object of type "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " is always a byte sequence, but is commonly used for both text and binary data."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959490,
        "id": "54c2986a-38fa-4d0e-b35e-dde8e273be51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959490,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A string literal is interpreted as a byte string."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A string literal is interpreted as a byte string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959490,
        "id": "5478d57d-c424-4744-8608-207e84b854e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "s = 'Cafe'    # type(s) == str"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "s = 'Cafe'    # type(s) == str",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959490,
        "id": "baa3ba7c-02d0-490f-bcf1-34dcf7e031f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959490,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two exceptions: You can define a "
            ],
            [
              "Unicode (text) literal",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " explicitly by prefixing the literal with "
            ],
            [
              "u",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two exceptions: You can define a "
          },
          {
            "Text": "Unicode (text) literal",
            "AttrFlags": 4
          },
          {
            "Text": " explicitly by prefixing the literal with "
          },
          {
            "Text": "u",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959490,
        "id": "15844618-7aec-434a-aa4d-eedd27642522",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "s = u'Café'   # type(s) == unicode\nb = 'Lorem ipsum'  # type(b) == str"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "s = u'Café'   # type(s) == unicode\nb = 'Lorem ipsum'  # type(b) == str",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959490,
        "id": "320203f4-5d02-420f-b0ce-a5eec16edd64",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959490,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, you can specify that a whole module’s string literals should create Unicode (text) literals:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, you can specify that a whole module’s string literals should create Unicode (text) literals:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959490,
        "id": "e7a3df3f-de55-4b73-bfd4-84d4e82d6792",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from __future__ import unicode_literals\n\ns = 'Café'   # type(s) == unicode\nb = 'Lorem ipsum'  # type(b) == unicode"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from __future__ import unicode_literals\n\ns = 'Café'   # type(s) == unicode\nb = 'Lorem ipsum'  # type(b) == unicode",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959491,
        "id": "c71f7c28-15fa-4d01-b345-8cce7b7b50ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959491,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to check whether your variable is a string (either Unicode or a byte string), you can use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to check whether your variable is a string (either Unicode or a byte string), you can use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959491,
        "id": "8de90631-9328-4ded-a7b0-bb6ff93f9f8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "isinstance(s, basestring)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "isinstance(s, basestring)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959491,
        "id": "20ba8ca1-b56e-40e3-86d3-0d4b0b7d83bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959491,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 3, the "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type is a Unicode text type."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 3, the "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " type is a Unicode text type."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959491,
        "id": "6439f6a5-0eac-4bb6-a579-1cf9660e28c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "s = 'Cafe'           # type(s) == str\ns = 'Café'           # type(s) == str (note the accented trailing e)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "s = 'Cafe'           # type(s) == str\ns = 'Café'           # type(s) == str (note the accented trailing e)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "b63c925c-342f-4617-8ad2-1b7a253c03c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959492,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Additionally, Python 3 added a "
            ],
            [
              "bytes",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/functions.html#func-bytes"
                ]
              ]
            ],
            [
              " object",
              [
                [
                  "a",
                  "https://docs.python.org/3/library/functions.html#func-bytes"
                ]
              ]
            ],
            [
              ", suitable for binary “blobs” or writing to encoding-independent files. To create a bytes object, you can prefix "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to a string literal or call the string’s "
            ],
            [
              "encode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Additionally, Python 3 added a "
          },
          {
            "Text": "bytes",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/functions.html#func-bytes"
          },
          {
            "Text": " object",
            "Link": "https://docs.python.org/3/library/functions.html#func-bytes"
          },
          {
            "Text": ", suitable for binary “blobs” or writing to encoding-independent files. To create a bytes object, you can prefix "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " to a string literal or call the string’s "
          },
          {
            "Text": "encode",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "f0d905bc-492b-413a-9dbf-886363215850",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348100000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# Or, if you really need a byte string:\ns = b'Cafe'          # type(s) == bytes\ns = 'Café'.encode()  # type(s) == bytes"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# Or, if you really need a byte string:\ns = b'Cafe'          # type(s) == bytes\ns = 'Café'.encode()  # type(s) == bytes",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "10e07eaa-456a-4098-904a-8d94d55dbf0c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959492,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To test whether a value is a string, use:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To test whether a value is a string, use:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "96336382-904d-4763-8c84-790b28244a66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "isinstance(s, str)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "isinstance(s, str)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "57930724-7344-45e9-8982-a9a4fcf79bbe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959492,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is also possible to prefix string literals with a "
            ],
            [
              "u",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " prefix to ease compatibility between Python 2 and Python 3 code bases. Since, in Python 3, all strings are Unicode by default, prepending a string literal with "
            ],
            [
              "u",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has no effect:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is also possible to prefix string literals with a "
          },
          {
            "Text": "u",
            "AttrFlags": 2
          },
          {
            "Text": " prefix to ease compatibility between Python 2 and Python 3 code bases. Since, in Python 3, all strings are Unicode by default, prepending a string literal with "
          },
          {
            "Text": "u",
            "AttrFlags": 2
          },
          {
            "Text": " has no effect:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "a46fd832-3c94-4d60-83f5-ed5292f356e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "u'Cafe' == 'Cafe'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "u'Cafe' == 'Cafe'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "2bdc4417-7564-4296-8f76-b8318dd41d0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959492,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python 2’s raw Unicode string prefix "
            ],
            [
              "ur",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not supported, however:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python 2’s raw Unicode string prefix "
          },
          {
            "Text": "ur",
            "AttrFlags": 2
          },
          {
            "Text": " is not supported, however:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959492,
        "id": "8b80ed29-da32-48a0-8582-7bd150adf928",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e ur'Café'\n  File \"\u003cstdin\u003e\", line 1\n    ur'Café'\n           ^\nSyntaxError: invalid syntax"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e ur'Café'\n  File \"\u003cstdin\u003e\", line 1\n    ur'Café'\n           ^\nSyntaxError: invalid syntax",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959493,
        "id": "3be37eec-27fa-45d2-90c0-31162979c7d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959493,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that you must "
            ],
            [
              "encode",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/stdtypes.html#str.encode"
                ]
              ]
            ],
            [
              " a Python 3 text ("
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") object to convert it into a "
            ],
            [
              "bytes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " representation of that text. The default encoding of this method is "
            ],
            [
              "UTF-8",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/UTF-8"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that you must "
          },
          {
            "Text": "encode",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/stdtypes.html#str.encode"
          },
          {
            "Text": " a Python 3 text ("
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": ") object to convert it into a "
          },
          {
            "Text": "bytes",
            "AttrFlags": 2
          },
          {
            "Text": " representation of that text. The default encoding of this method is "
          },
          {
            "Text": "UTF-8",
            "Link": "https://en.wikipedia.org/wiki/UTF-8"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "3d2f4fa5-4100-40b2-880e-bb22ceb97ba4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959494,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use "
            ],
            [
              "decode",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/stdtypes.html#bytes.decode"
                ]
              ]
            ],
            [
              " to ask a "
            ],
            [
              "bytes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object for what Unicode text it represents:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use "
          },
          {
            "Text": "decode",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/stdtypes.html#bytes.decode"
          },
          {
            "Text": " to ask a "
          },
          {
            "Text": "bytes",
            "AttrFlags": 2
          },
          {
            "Text": " object for what Unicode text it represents:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "6bd97860-de9b-4b1b-a535-08fb467f29fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e b.decode()\n'Café'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e b.decode()\n'Café'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "4793cb5b-445b-40b5-a0b5-c7a546917e13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959494,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While the "
            ],
            [
              "bytes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type exists in both Python 2 and 3, the "
            ],
            [
              "unicode",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type only exists in Python 2. To use Python 3’s implicit Unicode strings in Python 2, add the following to the top of your code file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While the "
          },
          {
            "Text": "bytes",
            "AttrFlags": 2
          },
          {
            "Text": " type exists in both Python 2 and 3, the "
          },
          {
            "Text": "unicode",
            "AttrFlags": 2
          },
          {
            "Text": " type only exists in Python 2. To use Python 3’s implicit Unicode strings in Python 2, add the following to the top of your code file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "4731b8d0-bff6-4437-96b2-c37af8d840be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from __future__ import unicode_literals\nprint(repr(\"hi\"))\n# u'hi'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from __future__ import unicode_literals\nprint(repr(\"hi\"))\n# u'hi'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "56b0495d-c00a-492b-ae09-9c28ff9edebe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959494,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another important difference is that indexing bytes in Python 3 results in an "
            ],
            [
              "int",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " output like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another important difference is that indexing bytes in Python 3 results in an "
          },
          {
            "Text": "int",
            "AttrFlags": 2
          },
          {
            "Text": " output like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "e5b2bea7-de64-4bb4-837c-d7e8e3ac3a3d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "b\"abc\"[0] == 97"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "b\"abc\"[0] == 97",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959494,
        "id": "2fbb94c1-58b0-4f69-b178-d175302ff253",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959494,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Whilst slicing in a size of one results in a length 1 bytes object:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Whilst slicing in a size of one results in a length 1 bytes object:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959495,
        "id": "81630a9f-4fae-4492-8a68-3d3879298269",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "b\"abc\"[0:1] == b\"a\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "b\"abc\"[0:1] == b\"a\"",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959495,
        "id": "6fe3c576-33b8-4291-9130-592f736ad64e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347959495,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition, Python 3 "
            ],
            [
              "fixes some unusual behavior",
              [
                [
                  "a",
                  "https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/"
                ]
              ]
            ],
            [
              " with unicode, i.e. reversing byte strings in Python 2. For example, the "
            ],
            [
              "following issue",
              [
                [
                  "a",
                  "https://stackoverflow.com/questions/34015615/python-reversing-an-utf-8-string"
                ]
              ]
            ],
            [
              " is resolved:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition, Python 3 "
          },
          {
            "Text": "fixes some unusual behavior",
            "Link": "https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/"
          },
          {
            "Text": " with unicode, i.e. reversing byte strings in Python 2. For example, the "
          },
          {
            "Text": "following issue",
            "Link": "https://stackoverflow.com/questions/34015615/python-reversing-an-utf-8-string"
          },
          {
            "Text": " is resolved:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347959495,
        "id": "9bbc6448-ab11-412c-b5a9-e6f65e1e7c5b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550348160000,
        "parent_id": "57eb5829-63b0-42cd-a1fe-be547a702314",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# -*- coding: utf8 -*-\nprint(\"Hi, my name is Łukasz Langa.\")\nprint(u\"Hi, my name is Łukasz Langa.\"[::-1])\nprint(\"Hi, my name is Łukasz Langa.\"[::-1])\n\n# Output in Python 2\n# Hi, my name is Łukasz Langa.\n# .agnaL zsakuŁ si eman ym ,iH\n# .agnaL zsaku�� si eman ym ,iH\n\n# Output in Python 3\n# Hi, my name is Łukasz Langa.\n# .agnaL zsakuŁ si eman ym ,iH\n# .agnaL zsakuŁ si eman ym ,iH"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# -*- coding: utf8 -*-\nprint(\"Hi, my name is Łukasz Langa.\")\nprint(u\"Hi, my name is Łukasz Langa.\"[::-1])\nprint(\"Hi, my name is Łukasz Langa.\"[::-1])\n\n# Output in Python 2\n# Hi, my name is Łukasz Langa.\n# .agnaL zsakuŁ si eman ym ,iH\n# .agnaL zsaku�� si eman ym ,iH\n\n# Output in Python 3\n# Hi, my name is Łukasz Langa.\n# .agnaL zsakuŁ si eman ym ,iH\n# .agnaL zsakuŁ si eman ym ,iH",
        "code_language": "Python"
      }
    ],
    "title": "Strings Bytes versus Unicode",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}