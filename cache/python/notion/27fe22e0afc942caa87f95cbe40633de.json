{
  "ID": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
  "Root": {
    "alive": true,
    "content": [
      "c4f882a2-5010-4f6d-b255-e070ab9d8932",
      "7351dcab-a29b-4cbf-a93d-ef7718b62ba5",
      "96091293-49aa-4c72-b034-8bfdca5efc5a",
      "be452078-4c00-43ee-866d-176871e14409",
      "23df86e4-445b-47bd-a026-9d1b118aa663",
      "67e22fea-3fc3-4d56-b7f7-82ba81f36004",
      "c4871923-d59d-43f0-97d3-fb5a59596fe1",
      "c79d18fb-f6fc-4f89-9fbf-8fdcdaa643a2",
      "4d0a4d84-f2a0-46ab-aba5-fb821de2c85f",
      "6c2cb851-a93d-43c9-9ca5-a90a4abe808c",
      "305fc704-2a47-4359-9fd2-73f841a4fda1",
      "b2604f73-c246-4829-84a5-07be7344d3e9",
      "3e4ea141-812c-4e07-80e9-f6b2ec5d8217",
      "f2163f98-2558-4d38-8276-eab767386dc8",
      "c6390294-d78b-457f-a691-51687b55e1d8",
      "cab844f2-7a6b-423c-938b-a7e8eaa17bf4",
      "93c6109a-a56a-4a3a-8749-16d63fe41dd9",
      "c7ebc88a-e708-449c-aa11-1fa117b86359",
      "e686d74c-e6ee-4d52-b26e-c955bb3e3518",
      "e4c26044-b2cc-41d0-b282-ed1f20461559",
      "fbbc0b3a-50c3-42fa-855b-498e25343568",
      "44675dac-d554-4a6e-a8a2-820dff9729ad",
      "d86951b7-4355-4ef9-a16a-a1da6db55b93",
      "caf4d8a7-0f31-49b1-8d28-9e8b31134e2d",
      "82d9a22f-12cd-4b6e-a383-1176bc0b3aa1",
      "b472a64a-dda3-4c60-bed9-adbfbf54d5db",
      "78532b6d-f0c1-49f7-bdf6-4a43d508fb6d",
      "16f05896-2eab-4713-b5ac-d856b86bc894",
      "f462d34c-6dab-4c15-8969-48c560e80a25",
      "944594d2-4ab2-421a-8c07-711e0443ed1a",
      "48eac1ed-0640-4e33-913b-0cdf2f6f9b45",
      "7439c4cd-2975-479e-9846-4a7dc61e6998",
      "5b7b567b-1291-483a-b49a-478686437b8d",
      "c369f851-4247-47be-af1f-be8d72e088ec",
      "971d7e73-1f5d-47d2-ac44-e2fe376815ec",
      "44de3ae3-957b-4e74-a67e-14e4f314c989",
      "adc791a0-685a-4176-a6d3-cfa3f832391d",
      "f48f7b91-5d07-424f-8d34-554453e93711"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550358136623,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550358180000,
    "parent_id": "452808ad-96bf-49e7-9654-c63c69b0f943",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "The What How and When of Recursion"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136605,
        "id": "c4f882a2-5010-4f6d-b255-e070ab9d8932",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136605,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Recursion occurs when a function call causes that same function to be called again before the original function call terminates. For example, consider the well-known mathematical expression "
            ],
            [
              "x!",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (i.e. the factorial operation). The factorial operation is defined for all nonnegative integers as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Recursion occurs when a function call causes that same function to be called again before the original function call terminates. For example, consider the well-known mathematical expression "
          },
          {
            "Text": "x!",
            "AttrFlags": 2
          },
          {
            "Text": " (i.e. the factorial operation). The factorial operation is defined for all nonnegative integers as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136608,
        "id": "7351dcab-a29b-4cbf-a93d-ef7718b62ba5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136608,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the number is 0, then the answer is 1."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the number is 0, then the answer is 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136608,
        "id": "96091293-49aa-4c72-b034-8bfdca5efc5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136608,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, the answer is that number times the factorial of one less than that number."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, the answer is that number times the factorial of one less than that number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136609,
        "id": "be452078-4c00-43ee-866d-176871e14409",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136609,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python, a naïve implementation of the factorial operation can be defined as a function as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python, a naïve implementation of the factorial operation can be defined as a function as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136609,
        "id": "23df86e4-445b-47bd-a026-9d1b118aa663",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358180000,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136609,
        "id": "67e22fea-3fc3-4d56-b7f7-82ba81f36004",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136609,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Recursion functions can be difficult to grasp sometimes, so let’s walk through this step-by-step. Consider the expression "
            ],
            [
              "factorial(3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This and "
            ],
            [
              "all",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " function calls create a new "
            ],
            [
              "environment",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". An environment is basically just a table that maps identifiers (e.g. "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "print",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc.) to their corresponding values. At any point in time, you can access the current environment using "
            ],
            [
              "locals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". In the first function call, the only local variable that gets defined is "
            ],
            [
              "n = 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, printing "
            ],
            [
              "locals()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " would show "
            ],
            [
              "{'n': 3}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since "
            ],
            [
              "n == 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the return value becomes "
            ],
            [
              "n * factorial(n - 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Recursion functions can be difficult to grasp sometimes, so let’s walk through this step-by-step. Consider the expression "
          },
          {
            "Text": "factorial(3)",
            "AttrFlags": 2
          },
          {
            "Text": ". This and "
          },
          {
            "Text": "all",
            "AttrFlags": 4
          },
          {
            "Text": " function calls create a new "
          },
          {
            "Text": "environment",
            "AttrFlags": 1
          },
          {
            "Text": ". An environment is basically just a table that maps identifiers (e.g. "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "print",
            "AttrFlags": 2
          },
          {
            "Text": ", etc.) to their corresponding values. At any point in time, you can access the current environment using "
          },
          {
            "Text": "locals()",
            "AttrFlags": 2
          },
          {
            "Text": ". In the first function call, the only local variable that gets defined is "
          },
          {
            "Text": "n = 3",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, printing "
          },
          {
            "Text": "locals()",
            "AttrFlags": 2
          },
          {
            "Text": " would show "
          },
          {
            "Text": "{'n': 3}",
            "AttrFlags": 2
          },
          {
            "Text": ". Since "
          },
          {
            "Text": "n == 3",
            "AttrFlags": 2
          },
          {
            "Text": ", the return value becomes "
          },
          {
            "Text": "n * factorial(n - 1)",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136611,
        "id": "c4871923-d59d-43f0-97d3-fb5a59596fe1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136611,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At this next step is where things might get a little confusing. Looking at our new expression, we already know what "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is. However, we don’t yet know what "
            ],
            [
              "factorial(n - 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is. First, "
            ],
            [
              "n - 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " evaluates to "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Then, "
            ],
            [
              "2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is passed to "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as the value for "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Since this is a new function call, a second environment is created to store this new "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Let "
            ],
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be the first environment and "
            ],
            [
              "B",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be the second environment. "
            ],
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " still exists and equals "
            ],
            [
              "{'n': 3}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", however, "
            ],
            [
              "B",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (which equals "
            ],
            [
              "{'n': 2}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") is the current environment. Looking at the function body, the return value is, again, "
            ],
            [
              "n * factorial(n - 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Without evaluating this expression, let’s substitute it into the original return expression. By doing this, we’re mentally discarding "
            ],
            [
              "B",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", so remember to substitute "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " accordingly (i.e. references to "
            ],
            [
              "B",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "’s "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are replaced with "
            ],
            [
              "n - 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which uses "
            ],
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "’s "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Now, the original return expression becomes "
            ],
            [
              "n * ((n - 1) * factorial((n - 1) - 1))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Take a second to ensure that you understand why this is so."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At this next step is where things might get a little confusing. Looking at our new expression, we already know what "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is. However, we don’t yet know what "
          },
          {
            "Text": "factorial(n - 1)",
            "AttrFlags": 2
          },
          {
            "Text": " is. First, "
          },
          {
            "Text": "n - 1",
            "AttrFlags": 2
          },
          {
            "Text": " evaluates to "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": ". Then, "
          },
          {
            "Text": "2",
            "AttrFlags": 2
          },
          {
            "Text": " is passed to "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": " as the value for "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": ". Since this is a new function call, a second environment is created to store this new "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": ". Let "
          },
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": " be the first environment and "
          },
          {
            "Text": "B",
            "AttrFlags": 4
          },
          {
            "Text": " be the second environment. "
          },
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": " still exists and equals "
          },
          {
            "Text": "{'n': 3}",
            "AttrFlags": 2
          },
          {
            "Text": ", however, "
          },
          {
            "Text": "B",
            "AttrFlags": 4
          },
          {
            "Text": " (which equals "
          },
          {
            "Text": "{'n': 2}",
            "AttrFlags": 2
          },
          {
            "Text": ") is the current environment. Looking at the function body, the return value is, again, "
          },
          {
            "Text": "n * factorial(n - 1)",
            "AttrFlags": 2
          },
          {
            "Text": ". Without evaluating this expression, let’s substitute it into the original return expression. By doing this, we’re mentally discarding "
          },
          {
            "Text": "B",
            "AttrFlags": 4
          },
          {
            "Text": ", so remember to substitute "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " accordingly (i.e. references to "
          },
          {
            "Text": "B",
            "AttrFlags": 4
          },
          {
            "Text": "’s "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " are replaced with "
          },
          {
            "Text": "n - 1",
            "AttrFlags": 2
          },
          {
            "Text": " which uses "
          },
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": "’s "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": "). Now, the original return expression becomes "
          },
          {
            "Text": "n * ((n - 1) * factorial((n - 1) - 1))",
            "AttrFlags": 2
          },
          {
            "Text": ". Take a second to ensure that you understand why this is so."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136611,
        "id": "c79d18fb-f6fc-4f89-9fbf-8fdcdaa643a2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136611,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, let’s evaluate the "
            ],
            [
              "factorial((n - 1) - 1))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " portion of that. Since "
            ],
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "‘s "
            ],
            [
              "n == 3",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", we’re passing "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, we are creating a new environment "
            ],
            [
              "C",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " which equals "
            ],
            [
              "{'n': 1}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Again, the return value is "
            ],
            [
              "n * factorial(n - 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". So let’s replace "
            ],
            [
              "factorial((n - 1) - 1))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of the “original” return expression similarly to how we adjusted the original return expression earlier. The “original” expression is now "
            ],
            [
              "n * ((n - 1) * ((n - 2) * factorial((n - 2) - 1)))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, let’s evaluate the "
          },
          {
            "Text": "factorial((n - 1) - 1))",
            "AttrFlags": 2
          },
          {
            "Text": " portion of that. Since "
          },
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": "‘s "
          },
          {
            "Text": "n == 3",
            "AttrFlags": 2
          },
          {
            "Text": ", we’re passing "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " into "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, we are creating a new environment "
          },
          {
            "Text": "C",
            "AttrFlags": 4
          },
          {
            "Text": " which equals "
          },
          {
            "Text": "{'n': 1}",
            "AttrFlags": 2
          },
          {
            "Text": ". Again, the return value is "
          },
          {
            "Text": "n * factorial(n - 1)",
            "AttrFlags": 2
          },
          {
            "Text": ". So let’s replace "
          },
          {
            "Text": "factorial((n - 1) - 1))",
            "AttrFlags": 2
          },
          {
            "Text": " of the “original” return expression similarly to how we adjusted the original return expression earlier. The “original” expression is now "
          },
          {
            "Text": "n * ((n - 1) * ((n - 2) * factorial((n - 2) - 1)))",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136614,
        "id": "4d0a4d84-f2a0-46ab-aba5-fb821de2c85f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136614,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Almost done. Now, we need to evaluate "
            ],
            [
              "factorial((n - 2) - 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This time, we’re passing in "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Therefore, this evaluates to "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Now, let’s perform our last substitution. The “original” return expression is now "
            ],
            [
              "n * ((n - 1) * ((n - 2) * 1))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Recalling that the original return expression is evaluated under "
            ],
            [
              "A",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", the expression becomes "
            ],
            [
              "3 * ((3 - 1) * ((3 - 2) * 1))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This, of course, evaluates to 6. To confirm that this is the correct answer, recall that "
            ],
            [
              "3! == 3 * 2 * 1 == 6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Before reading any further, be sure that you fully understand the concept of environments and how they apply to recursion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Almost done. Now, we need to evaluate "
          },
          {
            "Text": "factorial((n - 2) - 1)",
            "AttrFlags": 2
          },
          {
            "Text": ". This time, we’re passing in "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ". Therefore, this evaluates to "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": ". Now, let’s perform our last substitution. The “original” return expression is now "
          },
          {
            "Text": "n * ((n - 1) * ((n - 2) * 1))",
            "AttrFlags": 2
          },
          {
            "Text": ". Recalling that the original return expression is evaluated under "
          },
          {
            "Text": "A",
            "AttrFlags": 4
          },
          {
            "Text": ", the expression becomes "
          },
          {
            "Text": "3 * ((3 - 1) * ((3 - 2) * 1))",
            "AttrFlags": 2
          },
          {
            "Text": ". This, of course, evaluates to 6. To confirm that this is the correct answer, recall that "
          },
          {
            "Text": "3! == 3 * 2 * 1 == 6",
            "AttrFlags": 2
          },
          {
            "Text": ". Before reading any further, be sure that you fully understand the concept of environments and how they apply to recursion."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136614,
        "id": "6c2cb851-a93d-43c9-9ca5-a90a4abe808c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136614,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The statement "
            ],
            [
              "if n == 0: return 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is called a base case. This is because, it exhibits no recursion. A base case is absolutely required. Without one, you’ll run into infinite recursion. With that said, as long as you have at least one base case, you can have as many cases as you want. For example, we could have equivalently written "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The statement "
          },
          {
            "Text": "if n == 0: return 1",
            "AttrFlags": 2
          },
          {
            "Text": " is called a base case. This is because, it exhibits no recursion. A base case is absolutely required. Without one, you’ll run into infinite recursion. With that said, as long as you have at least one base case, you can have as many cases as you want. For example, we could have equivalently written "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": " as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136614,
        "id": "305fc704-2a47-4359-9fd2-73f841a4fda1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358180000,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def factorial(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def factorial(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136614,
        "id": "b2604f73-c246-4829-84a5-07be7344d3e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136614,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may also have multiple recursion cases, but we won’t get into that since it’s relatively uncommon and is often difficult to mentally process."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may also have multiple recursion cases, but we won’t get into that since it’s relatively uncommon and is often difficult to mentally process."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136616,
        "id": "3e4ea141-812c-4e07-80e9-f6b2ec5d8217",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136616,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also have “parallel” recursive function calls. For example, consider the "
            ],
            [
              "Fibonacci sequence",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Fibonacci_number"
                ]
              ]
            ],
            [
              " which is defined as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also have “parallel” recursive function calls. For example, consider the "
          },
          {
            "Text": "Fibonacci sequence",
            "Link": "https://en.wikipedia.org/wiki/Fibonacci_number"
          },
          {
            "Text": " which is defined as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136617,
        "id": "f2163f98-2558-4d38-8276-eab767386dc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136617,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the number is 0, then the answer is 0."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the number is 0, then the answer is 0."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136617,
        "id": "c6390294-d78b-457f-a691-51687b55e1d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136617,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the number is 1, then the answer is 1."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the number is 1, then the answer is 1."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136617,
        "id": "cab844f2-7a6b-423c-938b-a7e8eaa17bf4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136617,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Otherwise, the answer is the sum of the previous two Fibonacci numbers."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Otherwise, the answer is the sum of the previous two Fibonacci numbers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136617,
        "id": "93c6109a-a56a-4a3a-8749-16d63fe41dd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136617,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can define this is as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can define this is as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136617,
        "id": "c7ebc88a-e708-449c-aa11-1fa117b86359",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358180000,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def fib(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def fib(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136617,
        "id": "e686d74c-e6ee-4d52-b26e-c955bb3e3518",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136617,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I won’t walk through this function as thoroughly as I did with "
            ],
            [
              "factorial(3)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but the final return value of "
            ],
            [
              "fib(5)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is equivalent to the following ("
            ],
            [
              "syntactically",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " invalid) expression:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I won’t walk through this function as thoroughly as I did with "
          },
          {
            "Text": "factorial(3)",
            "AttrFlags": 2
          },
          {
            "Text": ", but the final return value of "
          },
          {
            "Text": "fib(5)",
            "AttrFlags": 2
          },
          {
            "Text": " is equivalent to the following ("
          },
          {
            "Text": "syntactically",
            "AttrFlags": 4
          },
          {
            "Text": " invalid) expression:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136618,
        "id": "e4c26044-b2cc-41d0-b282-ed1f20461559",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136618,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(\n  fib((n - 2) - 2)\n  +\n  (\n    fib(((n - 2) - 1) - 2)\n    +\n    fib(((n - 2) - 1) - 1)\n  )\n)\n+\n(\n  (\n    fib(((n - 1) - 2) - 2)\n    +\n    fib(((n - 1) - 2) - 1)\n  )\n  +\n  (\n    fib(((n - 1) - 1) - 2)\n    +\n    (\n      fib((((n - 1) - 1) - 1) - 2)\n      +\n      fib((((n - 1) - 1) - 1) - 1)\n    )\n  )\n)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(\n  fib((n - 2) - 2)\n  +\n  (\n    fib(((n - 2) - 1) - 2)\n    +\n    fib(((n - 2) - 1) - 1)\n  )\n)\n+\n(\n  (\n    fib(((n - 1) - 2) - 2)\n    +\n    fib(((n - 1) - 2) - 1)\n  )\n  +\n  (\n    fib(((n - 1) - 1) - 2)\n    +\n    (\n      fib((((n - 1) - 1) - 1) - 2)\n      +\n      fib((((n - 1) - 1) - 1) - 1)\n    )\n  )\n)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136618,
        "id": "fbbc0b3a-50c3-42fa-855b-498e25343568",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136618,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This becomes "
            ],
            [
              "(1 + (0 + 1)) + ((0 + 1) + (1 + (0 + 1)))",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which of course evaluates to "
            ],
            [
              "5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This becomes "
          },
          {
            "Text": "(1 + (0 + 1)) + ((0 + 1) + (1 + (0 + 1)))",
            "AttrFlags": 2
          },
          {
            "Text": " which of course evaluates to "
          },
          {
            "Text": "5",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136618,
        "id": "44675dac-d554-4a6e-a8a2-820dff9729ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136618,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now, let’s cover a few more vocabulary terms:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now, let’s cover a few more vocabulary terms:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136619,
        "id": "d86951b7-4355-4ef9-a16a-a1da6db55b93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136619,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A "
            ],
            [
              "tail call",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Tail_call"
                ]
              ]
            ],
            [
              " is simply a recursive function call which is the last operation to be performed before returning a value. To be clear, "
            ],
            [
              "return foo(n - 1)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a tail call, but "
            ],
            [
              "return foo(n - 1) + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not (since the addition is the last operation)."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "A "
          },
          {
            "Text": "tail call",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Tail_call"
          },
          {
            "Text": " is simply a recursive function call which is the last operation to be performed before returning a value. To be clear, "
          },
          {
            "Text": "return foo(n - 1)",
            "AttrFlags": 2
          },
          {
            "Text": " is a tail call, but "
          },
          {
            "Text": "return foo(n - 1) + 1",
            "AttrFlags": 2
          },
          {
            "Text": " is not (since the addition is the last operation)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136619,
        "id": "caf4d8a7-0f31-49b1-8d28-9e8b31134e2d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136619,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tail call optimization",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (TCO) is a way to automatically reduce recursion in recursive functions."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tail call optimization",
            "AttrFlags": 1
          },
          {
            "Text": " (TCO) is a way to automatically reduce recursion in recursive functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136619,
        "id": "82d9a22f-12cd-4b6e-a383-1176bc0b3aa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136619,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tail call elimination",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (TCE) is the reduction of a tail call to an expression that can be evaluated without recursion. TCE is a type of TCO."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tail call elimination",
            "AttrFlags": 1
          },
          {
            "Text": " (TCE) is the reduction of a tail call to an expression that can be evaluated without recursion. TCE is a type of TCO."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136619,
        "id": "b472a64a-dda3-4c60-bed9-adbfbf54d5db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136619,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tail call optimization is helpful for a number of reasons:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tail call optimization is helpful for a number of reasons:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136620,
        "id": "78532b6d-f0c1-49f7-bdf6-4a43d508fb6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136620,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The interpreter can minimize the amount of memory occupied by environments. Since no computer has unlimited memory, excessive recursive function calls would lead to a "
            ],
            [
              "stack overflow",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Stack_overflow"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The interpreter can minimize the amount of memory occupied by environments. Since no computer has unlimited memory, excessive recursive function calls would lead to a "
          },
          {
            "Text": "stack overflow",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Stack_overflow"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136621,
        "id": "16f05896-2eab-4713-b5ac-d856b86bc894",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136621,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The interpreter can reduce the number of "
            ],
            [
              "stack frame",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Call_stack"
                ]
              ]
            ],
            [
              " switches."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The interpreter can reduce the number of "
          },
          {
            "Text": "stack frame",
            "AttrFlags": 1,
            "Link": "https://en.wikipedia.org/wiki/Call_stack"
          },
          {
            "Text": " switches."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136621,
        "id": "f462d34c-6dab-4c15-8969-48c560e80a25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136621,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python has no form of TCO implemented for "
            ],
            [
              "a number of a reasons",
              [
                [
                  "a",
                  "http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html"
                ]
              ]
            ],
            [
              ". Therefore, other techniques are required to skirt this limitation. The method of choice depends on the use case. With some intuition, the definitions of "
            ],
            [
              "factorial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "fib",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can relatively easily be converted to iterative code as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python has no form of TCO implemented for "
          },
          {
            "Text": "a number of a reasons",
            "Link": "http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html"
          },
          {
            "Text": ". Therefore, other techniques are required to skirt this limitation. The method of choice depends on the use case. With some intuition, the definitions of "
          },
          {
            "Text": "factorial",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "fib",
            "AttrFlags": 2
          },
          {
            "Text": " can relatively easily be converted to iterative code as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136621,
        "id": "944594d2-4ab2-421a-8c07-711e0443ed1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358180000,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def factorial(n):\n    product = 1\n    while n \u003e 1:\n        product *= n\n        n -= 1\n    return product\n\ndef fib(n):\n    a, b = 0, 1\n    while n \u003e 0:\n        a, b = b, a + b\n        n -= 1\n    return a"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def factorial(n):\n    product = 1\n    while n \u003e 1:\n        product *= n\n        n -= 1\n    return product\n\ndef fib(n):\n    a, b = 0, 1\n    while n \u003e 0:\n        a, b = b, a + b\n        n -= 1\n    return a",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136622,
        "id": "48eac1ed-0640-4e33-913b-0cdf2f6f9b45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136622,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is usually the most efficient way to manually eliminate recursion, but it can become rather difficult for more complex functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is usually the most efficient way to manually eliminate recursion, but it can become rather difficult for more complex functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136622,
        "id": "7439c4cd-2975-479e-9846-4a7dc61e6998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136622,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another useful tool is Python’s "
            ],
            [
              "lru_cache",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/2492/functools/19930/lru-cache#t=201608251554325693435"
                ]
              ]
            ],
            [
              " decorator which can be used to reduce the number of redundant calculations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another useful tool is Python’s "
          },
          {
            "Text": "lru_cache",
            "Link": "http://stackoverflow.com/documentation/python/2492/functools/19930/lru-cache#t=201608251554325693435"
          },
          {
            "Text": " decorator which can be used to reduce the number of redundant calculations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136622,
        "id": "5b7b567b-1291-483a-b49a-478686437b8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136622,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You now have an idea as to how to avoid recursion in Python, but when "
            ],
            [
              "should",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " you use recursion? The answer is “not often”. All recursive functions can be implemented iteratively. It’s simply a matter of figuring out how to do so. However, there are rare cases in which recursion is okay. Recursion is common in Python when the expected inputs wouldn’t cause a significant number of a recursive function calls."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You now have an idea as to how to avoid recursion in Python, but when "
          },
          {
            "Text": "should",
            "AttrFlags": 4
          },
          {
            "Text": " you use recursion? The answer is “not often”. All recursive functions can be implemented iteratively. It’s simply a matter of figuring out how to do so. However, there are rare cases in which recursion is okay. Recursion is common in Python when the expected inputs wouldn’t cause a significant number of a recursive function calls."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136622,
        "id": "c369f851-4247-47be-af1f-be8d72e088ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136622,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If recursion is a topic that interests you, I implore you to study functional languages such as Scheme or Haskell. In such languages, recursion is much more useful."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If recursion is a topic that interests you, I implore you to study functional languages such as Scheme or Haskell. In such languages, recursion is much more useful."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136623,
        "id": "971d7e73-1f5d-47d2-ac44-e2fe376815ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136623,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Please note that the above example for the Fibonacci sequence, although good at showing how to apply the definition in python and later use of the lru cache, has an inefficient running time since it makes 2 recursive calls for each non base case. The number of calls to the function grows exponentially to "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Please note that the above example for the Fibonacci sequence, although good at showing how to apply the definition in python and later use of the lru cache, has an inefficient running time since it makes 2 recursive calls for each non base case. The number of calls to the function grows exponentially to "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136623,
        "id": "44de3ae3-957b-4e74-a67e-14e4f314c989",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136623,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Rather non-intuitively a more efficient implementation would use linear recursion:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Rather non-intuitively a more efficient implementation would use linear recursion:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136623,
        "id": "adc791a0-685a-4176-a6d3-cfa3f832391d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358180000,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def fib(n):\n    if n \u003c= 1:\n        return (n,0)\n    else:\n        (a, b) = fib(n - 1)\n        return (a + b, a)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def fib(n):\n    if n \u003c= 1:\n        return (n,0)\n    else:\n        (a, b) = fib(n - 1)\n        return (a + b, a)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358136623,
        "id": "f48f7b91-5d07-424f-8d34-554453e93711",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358136623,
        "parent_id": "27fe22e0-afc9-42ca-a87f-95cbe40633de",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But that one has the issue of returning a "
            ],
            [
              "pair",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of numbers. This emphasizes that some functions really do not gain much from recursion."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But that one has the issue of returning a "
          },
          {
            "Text": "pair",
            "AttrFlags": 4
          },
          {
            "Text": " of numbers. This emphasizes that some functions really do not gain much from recursion."
          }
        ]
      }
    ],
    "title": "The What How and When of Recursion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}