{
  "ID": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
  "Root": {
    "alive": true,
    "content": [
      "b22b26f6-4008-4f30-8468-98b365e2ca28",
      "6cfeab2c-6e5c-4f8a-aecb-bfcfdd49dec2",
      "6b149ac2-5bad-443e-9138-ae71882cfe1f",
      "172280a1-3350-4980-ad07-93e9a8f0c11d",
      "b14a4d16-f838-49c9-a76c-76881ccc3291",
      "9ccdd8c7-8c36-4674-862f-808b34763d39",
      "49b066ea-7efd-47b8-a936-94401692675b",
      "ae2f81b3-e489-48ac-87d8-0f398d467c4e",
      "1336fa14-1b62-4373-8b71-af28e89ab7d7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550350440214,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550350620000,
    "parent_id": "7ad8cf4b-5e6d-4587-a7a4-5baeac3ddd3e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Custom formatting for a class"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440211,
        "id": "b22b26f6-4008-4f30-8468-98b365e2ca28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440211,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440212,
        "id": "6cfeab2c-6e5c-4f8a-aecb-bfcfdd49dec2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440212,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Everything below applies to the str.format method, as well as the format function. In the text below, the two are interchangeable."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Everything below applies to the str.format method, as well as the format function. In the text below, the two are interchangeable."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440212,
        "id": "6b149ac2-5bad-443e-9138-ae71882cfe1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440212,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For every value which is passed to the "
            ],
            [
              "format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function, Python looks for a "
            ],
            [
              "__format__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method for that argument. Your own custom class can therefore have their own "
            ],
            [
              "__format__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to determine how the "
            ],
            [
              "format",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function will display and format your class and it’s attributes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For every value which is passed to the "
          },
          {
            "Text": "format",
            "AttrFlags": 2
          },
          {
            "Text": " function, Python looks for a "
          },
          {
            "Text": "__format__",
            "AttrFlags": 2
          },
          {
            "Text": " method for that argument. Your own custom class can therefore have their own "
          },
          {
            "Text": "__format__",
            "AttrFlags": 2
          },
          {
            "Text": " method to determine how the "
          },
          {
            "Text": "format",
            "AttrFlags": 2
          },
          {
            "Text": " function will display and format your class and it’s attributes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440213,
        "id": "172280a1-3350-4980-ad07-93e9a8f0c11d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440213,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is different than the "
            ],
            [
              "__str__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, as in the "
            ],
            [
              "__format__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method you can take into account the formatting language, including alignment, field width etc, and even (if you wish) implement your own format specifiers, and your own formatting language extensions."
            ],
            [
              "1",
              [
                [
                  "a",
                  "https://docs.python.org/2.7/library/string.html#formatspec"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is different than the "
          },
          {
            "Text": "__str__",
            "AttrFlags": 2
          },
          {
            "Text": " method, as in the "
          },
          {
            "Text": "__format__",
            "AttrFlags": 2
          },
          {
            "Text": " method you can take into account the formatting language, including alignment, field width etc, and even (if you wish) implement your own format specifiers, and your own formatting language extensions."
          },
          {
            "Text": "1",
            "Link": "https://docs.python.org/2.7/library/string.html#formatspec"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440213,
        "id": "b14a4d16-f838-49c9-a76c-76881ccc3291",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350620000,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "object.__format__(self, format_spec)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "object.__format__(self, format_spec)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440213,
        "id": "9ccdd8c7-8c36-4674-862f-808b34763d39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440213,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example :"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example :"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440214,
        "id": "49b066ea-7efd-47b8-a936-94401692675b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350620000,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# Example in Python 2 - but can be easily applied to Python 3\n\nclass Example(object):\n    def __init__(self,a,b,c):\n        self.a, self.b, self.c = a,b,c\n\n    def __format__(self, format_spec):\n        \"\"\" Implement special semantics for the 's' format specifier \"\"\"\n        # Reject anything that isn't an s\n        if format_spec[-1] != 's':\n            raise ValueError('{} format specifier not understood for this object', format_spec[:-1])\n\n        # Output in this example will be (\u003ca\u003e,\u003cb\u003e,\u003cc\u003e)\n        raw = \"(\" + \",\".join([str(self.a), str(self.b), str(self.c)]) + \")\"\n        # Honor the format language by using the inbuilt string format\n        # Since we know the original format_spec ends in an 's' \n        # we can take advantage of the str.format method with a \n        # string argument we constructed above\n        return \"{r:{f}}\".format( r=raw, f=format_spec )\n\ninst = Example(1,2,3)\nprint \"{0:\u003e20s}\".format( inst )\n# out :              (1,2,3)\n# Note how the right align and field width of 20 has been honored."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# Example in Python 2 - but can be easily applied to Python 3\n\nclass Example(object):\n    def __init__(self,a,b,c):\n        self.a, self.b, self.c = a,b,c\n\n    def __format__(self, format_spec):\n        \"\"\" Implement special semantics for the 's' format specifier \"\"\"\n        # Reject anything that isn't an s\n        if format_spec[-1] != 's':\n            raise ValueError('{} format specifier not understood for this object', format_spec[:-1])\n\n        # Output in this example will be (\u003ca\u003e,\u003cb\u003e,\u003cc\u003e)\n        raw = \"(\" + \",\".join([str(self.a), str(self.b), str(self.c)]) + \")\"\n        # Honor the format language by using the inbuilt string format\n        # Since we know the original format_spec ends in an 's' \n        # we can take advantage of the str.format method with a \n        # string argument we constructed above\n        return \"{r:{f}}\".format( r=raw, f=format_spec )\n\ninst = Example(1,2,3)\nprint \"{0:\u003e20s}\".format( inst )\n# out :              (1,2,3)\n# Note how the right align and field width of 20 has been honored.",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440214,
        "id": "ae2f81b3-e489-48ac-87d8-0f398d467c4e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440214,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350440214,
        "id": "1336fa14-1b62-4373-8b71-af28e89ab7d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350440214,
        "parent_id": "efd63c06-44c9-4ebc-ba4e-932127c0eea2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If your custom class does not have a custom __format__ method and an instance of the class is passed to the format function, Python2 will always use the return value of the __str__ method or __repr__ method to determine what to print (and if neither exist then the default repr will be used), and you will need to use the s format specifier to format this. With Python3, to pass your custom class to the format function, you will need define __format__ method on your custom class."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "If your custom class does not have a custom __format__ method and an instance of the class is passed to the format function, Python2 will always use the return value of the __str__ method or __repr__ method to determine what to print (and if neither exist then the default repr will be used), and you will need to use the s format specifier to format this. With Python3, to pass your custom class to the format function, you will need define __format__ method on your custom class."
          }
        ]
      }
    ],
    "title": "Custom formatting for a class",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}