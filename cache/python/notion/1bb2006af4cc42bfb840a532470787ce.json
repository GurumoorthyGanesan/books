{
  "ID": "1bb2006a-f4cc-42bf-b840-a532470787ce",
  "Root": {
    "alive": true,
    "content": [
      "4cc01e58-94c2-4932-a915-d7cb42423afc",
      "b75b7bab-c31d-4f9c-91fe-0754029fba6f",
      "82d8b079-64fb-44d2-bd91-f6464dd2ce34",
      "e00f6b17-b93d-4537-bf6d-d5a33a8f3b1e",
      "591b7194-e614-4493-b4a1-f3fe4e1dd048",
      "239b7506-ef33-4955-9b76-ce67a4efdedc",
      "89764ea3-1820-4526-8a0b-38666e35b5f1",
      "5e46fcbf-77b5-4dcf-b2c6-d48c03efa7d7",
      "e306db48-37e3-47da-927a-aa65b937e23a",
      "ad4fcc66-6f3c-4f7b-816e-c4a952493455",
      "48f8d25d-47f8-458b-a7e5-ccc04299d694",
      "72501dac-cae5-4aa6-97fa-2572185e432d",
      "06bae777-e7f9-4853-8c04-d3379fe76834",
      "bfd07528-e69c-46f4-aa44-b0066f6fcedc",
      "38c71c01-205e-4bf4-81fd-edd67f82f478",
      "a3f67821-26de-4f4b-8293-51e20577b5b4",
      "7ee44c6b-c899-4fd2-9af3-efb85c25005d",
      "e595f906-402a-4676-8805-c8cc2710eb19",
      "07a6f92e-e8cf-4494-844c-cbace45d4af6",
      "7b426033-3d8d-4279-9e8f-ecf03d32c646",
      "4177dec0-8c87-4119-b441-2650f36d6b2e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550310902516,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550311020000,
    "parent_id": "305111c8-efce-4cf2-b2ae-7b5e31a27b42",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bound unbound and static methods"
        ]
      ]
    },
    "type": "page",
    "version": 12,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902510,
        "id": "4cc01e58-94c2-4932-a915-d7cb42423afc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902510,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The idea of bound and unbound methods was "
            ],
            [
              "removed in Python 3",
              [
                [
                  "a",
                  "https://python-history.blogspot.com/2009/02/first-class-everything.html"
                ]
              ]
            ],
            [
              ". In Python 3 when you declare a method within a class, you are using a "
            ],
            [
              "def",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword, thus creating a function object. This is a regular function, and the surrounding class works as its namespace. In the following example we declare method "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " within class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and it becomes a function "
            ],
            [
              "A.f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The idea of bound and unbound methods was "
          },
          {
            "Text": "removed in Python 3",
            "Link": "https://python-history.blogspot.com/2009/02/first-class-everything.html"
          },
          {
            "Text": ". In Python 3 when you declare a method within a class, you are using a "
          },
          {
            "Text": "def",
            "AttrFlags": 2
          },
          {
            "Text": " keyword, thus creating a function object. This is a regular function, and the surrounding class works as its namespace. In the following example we declare method "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " within class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": ", and it becomes a function "
          },
          {
            "Text": "A.f",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902511,
        "id": "b75b7bab-c31d-4f9c-91fe-0754029fba6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310960000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class A(object):\n    def f(self, x):\n        return 2 * x\nA.f\n# \u003cfunction A.f at ...\u003e  (in Python 3.x)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class A(object):\n    def f(self, x):\n        return 2 * x\nA.f\n# \u003cfunction A.f at ...\u003e  (in Python 3.x)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902511,
        "id": "82d8b079-64fb-44d2-bd91-f6464dd2ce34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902511,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 2 the behavior was different: function objects within the class were implicitly replaced with objects of type "
            ],
            [
              "instancemethod",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which were called "
            ],
            [
              "unbound methods",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " because they were not bound to any particular class instance. It was possible to access the underlying function using "
            ],
            [
              ".__func__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Python 2 the behavior was different: function objects within the class were implicitly replaced with objects of type "
          },
          {
            "Text": "instancemethod",
            "AttrFlags": 2
          },
          {
            "Text": ", which were called "
          },
          {
            "Text": "unbound methods",
            "AttrFlags": 4
          },
          {
            "Text": " because they were not bound to any particular class instance. It was possible to access the underlying function using "
          },
          {
            "Text": ".__func__",
            "AttrFlags": 2
          },
          {
            "Text": " property."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902511,
        "id": "e00f6b17-b93d-4537-bf6d-d5a33a8f3b1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310960000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "A.f\n# \u003cunbound method A.f\u003e   (in Python 2.x)\nA.f.__class__\n# \u003ctype 'instancemethod'\u003e\nA.f.__func__\n# \u003cfunction f at ...\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "A.f\n# \u003cunbound method A.f\u003e   (in Python 2.x)\nA.f.__class__\n# \u003ctype 'instancemethod'\u003e\nA.f.__func__\n# \u003cfunction f at ...\u003e",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902511,
        "id": "591b7194-e614-4493-b4a1-f3fe4e1dd048",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902511,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The latter behaviors are confirmed by inspection - methods are recognized as functions in Python 3, while the distinction is upheld in Python 2."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The latter behaviors are confirmed by inspection - methods are recognized as functions in Python 3, while the distinction is upheld in Python 2."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902511,
        "id": "239b7506-ef33-4955-9b76-ce67a4efdedc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310960000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import inspect\n\ninspect.isfunction(A.f)\n# True\ninspect.ismethod(A.f)\n# False"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import inspect\n\ninspect.isfunction(A.f)\n# True\ninspect.ismethod(A.f)\n# False",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550311016041,
        "id": "89764ea3-1820-4526-8a0b-38666e35b5f1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311020000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 3:"
            ]
          ]
        },
        "type": "text",
        "version": 18,
        "inline_content": [
          {
            "Text": "In Python 3:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902511,
        "id": "5e46fcbf-77b5-4dcf-b2c6-d48c03efa7d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902511,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import inspect\n\ninspect.isfunction(A.f)\n# False\ninspect.ismethod(A.f)\n# True"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import inspect\n\ninspect.isfunction(A.f)\n# False\ninspect.ismethod(A.f)\n# True",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902512,
        "id": "e306db48-37e3-47da-927a-aa65b937e23a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311020000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902512,
        "id": "ad4fcc66-6f3c-4f7b-816e-c4a952493455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902512,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In both versions of Python function/method "
            ],
            [
              "A.f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be called directly, provided that you pass an instance of class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as the first argument."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In both versions of Python function/method "
          },
          {
            "Text": "A.f",
            "AttrFlags": 2
          },
          {
            "Text": " can be called directly, provided that you pass an instance of class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " as the first argument."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902512,
        "id": "48f8d25d-47f8-458b-a7e5-ccc04299d694",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311020000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "A.f(1, 7)\n# Python 2: TypeError: unbound method f() must be called with\n#                      A instance as first argument (got int instance instead) \n# Python 3: 14   \na = A()\nA.f(a, 20)\n# Python 2 \u0026 3: 40"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "A.f(1, 7)\n# Python 2: TypeError: unbound method f() must be called with\n#                      A instance as first argument (got int instance instead) \n# Python 3: 14   \na = A()\nA.f(a, 20)\n# Python 2 \u0026 3: 40",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902512,
        "id": "72501dac-cae5-4aa6-97fa-2572185e432d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902512,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now suppose "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is an instance of class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", what is "
            ],
            [
              "a.f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then? Well, intuitively this should be the same method "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", only it should somehow “know” that it was applied to the object "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – in Python this is called method "
            ],
            [
              "bound",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now suppose "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is an instance of class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": ", what is "
          },
          {
            "Text": "a.f",
            "AttrFlags": 2
          },
          {
            "Text": " then? Well, intuitively this should be the same method "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " of class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": ", only it should somehow “know” that it was applied to the object "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " – in Python this is called method "
          },
          {
            "Text": "bound",
            "AttrFlags": 4
          },
          {
            "Text": " to "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902513,
        "id": "06bae777-e7f9-4853-8c04-d3379fe76834",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902513,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The nitty-gritty details are as follows: writing "
            ],
            [
              "a.f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " invokes the magic "
            ],
            [
              "__getattribute__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which first checks whether "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has an attribute named "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (it doesn’t), then checks the class "
            ],
            [
              "A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " whether it contains a method with such a name (it does), and creates a new object "
            ],
            [
              "m",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of type "
            ],
            [
              "method",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which has the reference to the original "
            ],
            [
              "A.f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "m.__func__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and a reference to the object "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in "
            ],
            [
              "m.__self__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When this object is called as a function, it simply does the following: "
            ],
            [
              "m(...) =\u003e m.__func__(m.__self__, ...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Thus this object is called a "
            ],
            [
              "bound method",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " because when invoked it knows to supply the object it was bound to as the first argument. (These things work same way in Python 2 and 3)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The nitty-gritty details are as follows: writing "
          },
          {
            "Text": "a.f",
            "AttrFlags": 2
          },
          {
            "Text": " invokes the magic "
          },
          {
            "Text": "__getattribute__",
            "AttrFlags": 2
          },
          {
            "Text": " method of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ", which first checks whether "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " has an attribute named "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " (it doesn’t), then checks the class "
          },
          {
            "Text": "A",
            "AttrFlags": 2
          },
          {
            "Text": " whether it contains a method with such a name (it does), and creates a new object "
          },
          {
            "Text": "m",
            "AttrFlags": 2
          },
          {
            "Text": " of type "
          },
          {
            "Text": "method",
            "AttrFlags": 2
          },
          {
            "Text": " which has the reference to the original "
          },
          {
            "Text": "A.f",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "m.__func__",
            "AttrFlags": 2
          },
          {
            "Text": ", and a reference to the object "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " in "
          },
          {
            "Text": "m.__self__",
            "AttrFlags": 2
          },
          {
            "Text": ". When this object is called as a function, it simply does the following: "
          },
          {
            "Text": "m(...) =\u003e m.__func__(m.__self__, ...)",
            "AttrFlags": 2
          },
          {
            "Text": ". Thus this object is called a "
          },
          {
            "Text": "bound method",
            "AttrFlags": 1
          },
          {
            "Text": " because when invoked it knows to supply the object it was bound to as the first argument. (These things work same way in Python 2 and 3)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902513,
        "id": "bfd07528-e69c-46f4-aa44-b0066f6fcedc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311020000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "a = A()\na.f\n# \u003cbound method A.f of \u003c__main__.A object at ...\u003e\u003e\na.f(2)\n# 4\n\n# Note: the bound method object a.f is recreated *every time* you call it:\na.f is a.f  # False\n# As a performance optimization you can store the bound method in the object's\n# __dict__, in which case the method object will remain fixed:\na.f = a.f\na.f is a.f  # True"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = A()\na.f\n# \u003cbound method A.f of \u003c__main__.A object at ...\u003e\u003e\na.f(2)\n# 4\n\n# Note: the bound method object a.f is recreated *every time* you call it:\na.f is a.f  # False\n# As a performance optimization you can store the bound method in the object's\n# __dict__, in which case the method object will remain fixed:\na.f = a.f\na.f is a.f  # True",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902514,
        "id": "38c71c01-205e-4bf4-81fd-edd67f82f478",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902514,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, Python has "
            ],
            [
              "class methods",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "static methods",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " – special kinds of methods. Class methods work the same way as regular methods, except that when invoked on an object they bind to the "
            ],
            [
              "class",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of the object instead of to the object. Thus "
            ],
            [
              "m.__self__ = type(a)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When you call such bound method, it passes the class of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as the first argument. Static methods are even simpler: they don’t bind anything at all, and simply return the underlying function without any transformations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, Python has "
          },
          {
            "Text": "class methods",
            "AttrFlags": 1
          },
          {
            "Text": " and "
          },
          {
            "Text": "static methods",
            "AttrFlags": 1
          },
          {
            "Text": " – special kinds of methods. Class methods work the same way as regular methods, except that when invoked on an object they bind to the "
          },
          {
            "Text": "class",
            "AttrFlags": 4
          },
          {
            "Text": " of the object instead of to the object. Thus "
          },
          {
            "Text": "m.__self__ = type(a)",
            "AttrFlags": 2
          },
          {
            "Text": ". When you call such bound method, it passes the class of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " as the first argument. Static methods are even simpler: they don’t bind anything at all, and simply return the underlying function without any transformations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902514,
        "id": "a3f67821-26de-4f4b-8293-51e20577b5b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311020000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class D(object):\n    multiplier = 2\n\n    @classmethod\n    def f(cls, x):\n        return cls.multiplier * x\n\n    @staticmethod\n    def g(name):\n        print(\"Hello, %s\" % name)\n\nD.f\n# \u003cbound method type.f of \u003cclass '__main__.D'\u003e\u003e\nD.f(12)\n# 24\nD.g\n# \u003cfunction D.g at ...\u003e\nD.g(\"world\")\n# Hello, world"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class D(object):\n    multiplier = 2\n\n    @classmethod\n    def f(cls, x):\n        return cls.multiplier * x\n\n    @staticmethod\n    def g(name):\n        print(\"Hello, %s\" % name)\n\nD.f\n# \u003cbound method type.f of \u003cclass '__main__.D'\u003e\u003e\nD.f(12)\n# 24\nD.g\n# \u003cfunction D.g at ...\u003e\nD.g(\"world\")\n# Hello, world",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902514,
        "id": "7ee44c6b-c899-4fd2-9af3-efb85c25005d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902514,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that class methods are bound to the class even when accessed on the instance:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that class methods are bound to the class even when accessed on the instance:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902514,
        "id": "e595f906-402a-4676-8805-c8cc2710eb19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311020000,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "d = D()\nd.multiplier = 1337\n(D.multiplier, d.multiplier)\n# (2, 1337)\nd.f\n# \u003cbound method D.f of \u003cclass '__main__.D'\u003e\u003e\nd.f(10)\n# 20"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "d = D()\nd.multiplier = 1337\n(D.multiplier, d.multiplier)\n# (2, 1337)\nd.f\n# \u003cbound method D.f of \u003cclass '__main__.D'\u003e\u003e\nd.f(10)\n# 20",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902515,
        "id": "07a6f92e-e8cf-4494-844c-cbace45d4af6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902515,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is worth noting that at the lowest level, functions, methods, staticmethods, etc. are actually "
            ],
            [
              "descriptors",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/3405/descriptor/11716/simple-descriptor#t=201612051953531019874"
                ]
              ]
            ],
            [
              " that invoke "
            ],
            [
              "__get__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "__set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "__ and optionally "
            ],
            [
              "__del__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " special methods. For more details on classmethods and staticmethods:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is worth noting that at the lowest level, functions, methods, staticmethods, etc. are actually "
          },
          {
            "Text": "descriptors",
            "Link": "http://stackoverflow.com/documentation/python/3405/descriptor/11716/simple-descriptor#t=201612051953531019874"
          },
          {
            "Text": " that invoke "
          },
          {
            "Text": "__get__",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "__set",
            "AttrFlags": 2
          },
          {
            "Text": "__ and optionally "
          },
          {
            "Text": "__del__",
            "AttrFlags": 2
          },
          {
            "Text": " special methods. For more details on classmethods and staticmethods:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902515,
        "id": "7b426033-3d8d-4279-9e8f-ecf03d32c646",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902515,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310902516,
        "id": "4177dec0-8c87-4119-b441-2650f36d6b2e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310902516,
        "parent_id": "1bb2006a-f4cc-42bf-b840-a532470787ce",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner"
          }
        ]
      }
    ],
    "title": "Bound unbound and static methods",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}