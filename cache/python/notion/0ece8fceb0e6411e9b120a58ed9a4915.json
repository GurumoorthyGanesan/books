{
  "ID": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
  "Root": {
    "alive": true,
    "content": [
      "ea82ab16-7a38-455d-8072-22466992a178",
      "301764c4-33b2-4e14-b3e0-ff75cb82bddb",
      "328a3731-6c24-4b44-90f8-ce14fefc74c1",
      "0c9e007d-b670-430d-acd1-36a9596ee656",
      "74ac0b78-b10d-42e2-a8b8-1d4a8c0845ae",
      "ac2f0c53-bd56-4a8e-b173-6da7c8d1f277",
      "c528d8dd-5930-4411-9091-289a58f6d812",
      "9c351a36-f144-4733-8614-2a16b7a4e05f",
      "96ab51e2-e13d-43d8-895d-f2ea23a09f59",
      "fd634811-cb56-4a04-9b13-bebbf0b902cc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550392556064,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550475780000,
    "parent_id": "bca69887-c59f-48b3-b7e3-8c5f47ba0299",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Mutable and Immutable as Arguments"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556059,
        "id": "ea82ab16-7a38-455d-8072-22466992a178",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556059,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One of the major use case when a developer needs to take mutability into account is when passing arguments to a function. This is very important, because this will determine the ability for the function to modify objects that doesn’t belong to its scope, or in other words if the function has side effects. This is also important to understand where the result of a function has to be made available."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One of the major use case when a developer needs to take mutability into account is when passing arguments to a function. This is very important, because this will determine the ability for the function to modify objects that doesn’t belong to its scope, or in other words if the function has side effects. This is also important to understand where the result of a function has to be made available."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556062,
        "id": "301764c4-33b2-4e14-b3e0-ff75cb82bddb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556062,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e def list_add3(lin):\n    lin += [3]\n    return lin\n\n\u003e\u003e\u003e a = [1, 2, 3]\n\u003e\u003e\u003e b = list_add3(a)\n\u003e\u003e\u003e b\n[1, 2, 3, 3]\n\u003e\u003e\u003e a\n[1, 2, 3, 3]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e def list_add3(lin):\n    lin += [3]\n    return lin\n\n\u003e\u003e\u003e a = [1, 2, 3]\n\u003e\u003e\u003e b = list_add3(a)\n\u003e\u003e\u003e b\n[1, 2, 3, 3]\n\u003e\u003e\u003e a\n[1, 2, 3, 3]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556062,
        "id": "328a3731-6c24-4b44-90f8-ce14fefc74c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556062,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here, the mistake is to think that "
            ],
            [
              "lin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", as a parameter to the function, can be modified locally. Instead, "
            ],
            [
              "lin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference the same object. As this object is mutable, the modification is done in-place, which means that the object referenced by both "
            ],
            [
              "lin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is modified. "
            ],
            [
              "lin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " doesn’t really need to be returned, because we already have a reference to this object in the form of "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " end referencing the same object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here, the mistake is to think that "
          },
          {
            "Text": "lin",
            "AttrFlags": 2
          },
          {
            "Text": ", as a parameter to the function, can be modified locally. Instead, "
          },
          {
            "Text": "lin",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " reference the same object. As this object is mutable, the modification is done in-place, which means that the object referenced by both "
          },
          {
            "Text": "lin",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " is modified. "
          },
          {
            "Text": "lin",
            "AttrFlags": 2
          },
          {
            "Text": " doesn’t really need to be returned, because we already have a reference to this object in the form of "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "b",
            "AttrFlags": 2
          },
          {
            "Text": " end referencing the same object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556063,
        "id": "0c9e007d-b670-430d-acd1-36a9596ee656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556063,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This doesn’t go the same for tuples."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This doesn’t go the same for tuples."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556063,
        "id": "74ac0b78-b10d-42e2-a8b8-1d4a8c0845ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556063,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e def tuple_add3(tin):\n    tin += (3,)\n    return tin\n\n\u003e\u003e\u003e a = (1, 2, 3)\n\u003e\u003e\u003e b = tuple_add3(a)\n\u003e\u003e\u003e b\n(1, 2, 3, 3)\n\u003e\u003e\u003e a\n(1, 2, 3)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e def tuple_add3(tin):\n    tin += (3,)\n    return tin\n\n\u003e\u003e\u003e a = (1, 2, 3)\n\u003e\u003e\u003e b = tuple_add3(a)\n\u003e\u003e\u003e b\n(1, 2, 3, 3)\n\u003e\u003e\u003e a\n(1, 2, 3)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556063,
        "id": "ac2f0c53-bd56-4a8e-b173-6da7c8d1f277",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556063,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At the beginning of the function, "
            ],
            [
              "tin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " reference the same object. But this is an immutable object. So when the function tries to modify it, "
            ],
            [
              "tin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " receive a new object with the modification, while "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keeps a reference to the original object. In this case, returning "
            ],
            [
              "tin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is mandatory, or the new object would be lost."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At the beginning of the function, "
          },
          {
            "Text": "tin",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " reference the same object. But this is an immutable object. So when the function tries to modify it, "
          },
          {
            "Text": "tin",
            "AttrFlags": 2
          },
          {
            "Text": " receive a new object with the modification, while "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": " keeps a reference to the original object. In this case, returning "
          },
          {
            "Text": "tin",
            "AttrFlags": 2
          },
          {
            "Text": " is mandatory, or the new object would be lost."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556063,
        "id": "c528d8dd-5930-4411-9091-289a58f6d812",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556063,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Exercise"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Exercise"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556063,
        "id": "9c351a36-f144-4733-8614-2a16b7a4e05f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556063,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e def yoda(prologue, sentence):\n    sentence.reverse()\n    prologue += \" \".join(sentence)\n    return prologue\n\n\u003e\u003e\u003e focused = [\"You must\", \"stay focused\"]\n\u003e\u003e\u003e saying = \"Yoda said: \"\n\u003e\u003e\u003e yoda_sentence = yoda(saying, focused)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e def yoda(prologue, sentence):\n    sentence.reverse()\n    prologue += \" \".join(sentence)\n    return prologue\n\n\u003e\u003e\u003e focused = [\"You must\", \"stay focused\"]\n\u003e\u003e\u003e saying = \"Yoda said: \"\n\u003e\u003e\u003e yoda_sentence = yoda(saying, focused)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556063,
        "id": "96ab51e2-e13d-43d8-895d-f2ea23a09f59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556063,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: ",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "reverse",
              [
                [
                  "i"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " operates in-place.",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: ",
            "AttrFlags": 4
          },
          {
            "Text": "reverse",
            "AttrFlags": 6
          },
          {
            "Text": " operates in-place.",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392556064,
        "id": "fd634811-cb56-4a04-9b13-bebbf0b902cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550392556064,
        "parent_id": "0ece8fce-b0e6-411e-9b12-0a58ed9a4915",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What do you think of this function? Does it have side effects? Is the return necessary? After the call, what is the value of "
            ],
            [
              "saying",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? Of "
            ],
            [
              "focused",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "? What happens if the function is called again with the same parameters?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What do you think of this function? Does it have side effects? Is the return necessary? After the call, what is the value of "
          },
          {
            "Text": "saying",
            "AttrFlags": 2
          },
          {
            "Text": "? Of "
          },
          {
            "Text": "focused",
            "AttrFlags": 2
          },
          {
            "Text": "? What happens if the function is called again with the same parameters?"
          }
        ]
      }
    ],
    "title": "Mutable and Immutable as Arguments",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}