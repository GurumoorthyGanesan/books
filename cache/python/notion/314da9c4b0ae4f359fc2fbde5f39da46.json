{
  "ID": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
  "Root": {
    "alive": true,
    "content": [
      "a31dfea7-f747-49ff-81a6-7e556eb129cf",
      "6971c453-9f40-4a2e-909d-de653d3da21d",
      "6d322964-c539-4a68-abd7-17e4b280d55e",
      "1cf3ebd1-804c-4940-8a9b-35be1a706174",
      "12666571-fcee-492d-b0d1-f7bf593600ce",
      "d68f485e-35c1-4a94-a99e-9f9cf0736a31"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550344110239,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550344200000,
    "parent_id": "e69eaeab-d086-4d16-bfdf-ed205568003a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Counting occurrences in numpy array"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344110238,
        "id": "a31dfea7-f747-49ff-81a6-7e556eb129cf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344110238,
        "parent_id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To count the occurences of a value in a numpy array. This will work:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To count the occurences of a value in a numpy array. This will work:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344110238,
        "id": "6971c453-9f40-4a2e-909d-de653d3da21d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344200000,
        "parent_id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e import numpy as np\n\u003e\u003e\u003e a=np.array([0,3,4,3,5,4,7])\n\u003e\u003e\u003e print np.sum(a==3)\n2"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e import numpy as np\n\u003e\u003e\u003e a=np.array([0,3,4,3,5,4,7])\n\u003e\u003e\u003e print np.sum(a==3)\n2",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344110238,
        "id": "6d322964-c539-4a68-abd7-17e4b280d55e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344110238,
        "parent_id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The logic is that the boolean statement produces a array where all occurences of the requested values are 1 and all others are zero. So summing these gives the number of occurencies. This works for arrays of any shape or dtype."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The logic is that the boolean statement produces a array where all occurences of the requested values are 1 and all others are zero. So summing these gives the number of occurencies. This works for arrays of any shape or dtype."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344110238,
        "id": "1cf3ebd1-804c-4940-8a9b-35be1a706174",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344110238,
        "parent_id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are two methods I use to count occurences of all unique values in numpy. Unique and bincount. Unique automatically flattens multidimensional arrays, while bincount only works with 1d arrays only containing positive integers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are two methods I use to count occurences of all unique values in numpy. Unique and bincount. Unique automatically flattens multidimensional arrays, while bincount only works with 1d arrays only containing positive integers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344110238,
        "id": "12666571-fcee-492d-b0d1-f7bf593600ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344200000,
        "parent_id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e unique,counts=np.unique(a,return_counts=True)\n\u003e\u003e\u003e print unique,counts # counts[i] is equal to occurrences of unique[i] in a\n[0 3 4 5 7] [1 2 2 1 1]\n\u003e\u003e\u003e bin_count=np.bincount(a)\n\u003e\u003e\u003e print bin_count # bin_count[i] is equal to occurrences of i in a\n[1 0 0 2 2 1 0 1]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e unique,counts=np.unique(a,return_counts=True)\n\u003e\u003e\u003e print unique,counts # counts[i] is equal to occurrences of unique[i] in a\n[0 3 4 5 7] [1 2 2 1 1]\n\u003e\u003e\u003e bin_count=np.bincount(a)\n\u003e\u003e\u003e print bin_count # bin_count[i] is equal to occurrences of i in a\n[1 0 0 2 2 1 0 1]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344110239,
        "id": "d68f485e-35c1-4a94-a99e-9f9cf0736a31",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344110239,
        "parent_id": "314da9c4-b0ae-4f35-9fc2-fbde5f39da46",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If your data are numpy arrays it is generally much faster to use numpy methods then to convert your data to generic methods."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If your data are numpy arrays it is generally much faster to use numpy methods then to convert your data to generic methods."
          }
        ]
      }
    ],
    "title": "Counting occurrences in numpy array",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}