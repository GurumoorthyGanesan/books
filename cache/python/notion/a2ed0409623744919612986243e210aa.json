{
  "ID": "a2ed0409-6237-4491-9612-986243e210aa",
  "Root": {
    "alive": true,
    "content": [
      "b2423ae7-dd85-4c68-86f5-b9bc2870530a",
      "248b75ec-bc66-488c-a68d-897c4eb1f3a5",
      "41cde056-0f9d-4ce8-bb27-fe6ff786ce6c",
      "c959a754-9a23-42c3-89fd-7973480c8004",
      "f5343173-915d-4d5d-912b-4b64275379d9",
      "89bff541-307b-4bfa-a762-56c9ab68df55"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389301652,
    "id": "a2ed0409-6237-4491-9612-986243e210aa",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550469480000,
    "parent_id": "154b1b38-7004-4d41-8644-1bd8e63d12f1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Symmetric encryption using pycrypto"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389301650,
        "id": "b2423ae7-dd85-4c68-86f5-b9bc2870530a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389301650,
        "parent_id": "a2ed0409-6237-4491-9612-986243e210aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python’s built-in crypto functionality is currently limited to hashing. Encryption requires a third-party module like "
            ],
            [
              "pycrypto",
              [
                [
                  "a",
                  "https://pypi.python.org/pypi/pycrypto"
                ]
              ]
            ],
            [
              ". For example, it provides the "
            ],
            [
              "AES algorithm",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
                ]
              ]
            ],
            [
              " which is considered state of the art for symmetric encryption. The following code will encrypt a given message using a passphrase:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python’s built-in crypto functionality is currently limited to hashing. Encryption requires a third-party module like "
          },
          {
            "Text": "pycrypto",
            "Link": "https://pypi.python.org/pypi/pycrypto"
          },
          {
            "Text": ". For example, it provides the "
          },
          {
            "Text": "AES algorithm",
            "Link": "https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
          },
          {
            "Text": " which is considered state of the art for symmetric encryption. The following code will encrypt a given message using a passphrase:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389301651,
        "id": "248b75ec-bc66-488c-a68d-897c4eb1f3a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389301651,
        "parent_id": "a2ed0409-6237-4491-9612-986243e210aa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import hashlib\nimport math\nimport os\n\nfrom Crypto.Cipher import AES\n\nIV_SIZE = 16    # 128 bit, fixed for the AES algorithm\nKEY_SIZE = 32   # 256 bit meaning AES-256, can also be 128 or 192 bits\nSALT_SIZE = 16  # This size is arbitrary\n\ncleartext = b'Lorem ipsum'\npassword = b'highly secure encryption password'\nsalt = os.urandom(SALT_SIZE)\nderived = hashlib.pbkdf2_hmac('sha256', password, salt, 100000,\n                              dklen=IV_SIZE + KEY_SIZE)\niv = derived[0:IV_SIZE]\nkey = derived[IV_SIZE:]\n\nencrypted = salt + AES.new(key, AES.MODE_CFB, iv).encrypt(cleartext)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import hashlib\nimport math\nimport os\n\nfrom Crypto.Cipher import AES\n\nIV_SIZE = 16    # 128 bit, fixed for the AES algorithm\nKEY_SIZE = 32   # 256 bit meaning AES-256, can also be 128 or 192 bits\nSALT_SIZE = 16  # This size is arbitrary\n\ncleartext = b'Lorem ipsum'\npassword = b'highly secure encryption password'\nsalt = os.urandom(SALT_SIZE)\nderived = hashlib.pbkdf2_hmac('sha256', password, salt, 100000,\n                              dklen=IV_SIZE + KEY_SIZE)\niv = derived[0:IV_SIZE]\nkey = derived[IV_SIZE:]\n\nencrypted = salt + AES.new(key, AES.MODE_CFB, iv).encrypt(cleartext)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389301652,
        "id": "41cde056-0f9d-4ce8-bb27-fe6ff786ce6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389301652,
        "parent_id": "a2ed0409-6237-4491-9612-986243e210aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The AES algorithm takes three parameters: encryption key, initialization vector (IV) and the actual message to be encrypted. If you have a randomly generated AES key then you can use that one directly and merely generate a random initialization vector. A passphrase doesn’t have the right size however, nor would it be recommendable to use it directly given that it isn’t truly random and thus has comparably little entropy. Instead, we use the "
            ],
            [
              "built-in implementation of the PBKDF2 algorithm",
              [
                [
                  "a",
                  "https://stackoverflow.com/documentation/python/2598/security-and-cryptography/8622/secure-password-hashing"
                ]
              ]
            ],
            [
              " to generate a 128 bit initialization vector and 256 bit encryption key from the password."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The AES algorithm takes three parameters: encryption key, initialization vector (IV) and the actual message to be encrypted. If you have a randomly generated AES key then you can use that one directly and merely generate a random initialization vector. A passphrase doesn’t have the right size however, nor would it be recommendable to use it directly given that it isn’t truly random and thus has comparably little entropy. Instead, we use the "
          },
          {
            "Text": "built-in implementation of the PBKDF2 algorithm",
            "Link": "https://stackoverflow.com/documentation/python/2598/security-and-cryptography/8622/secure-password-hashing"
          },
          {
            "Text": " to generate a 128 bit initialization vector and 256 bit encryption key from the password."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389301652,
        "id": "c959a754-9a23-42c3-89fd-7973480c8004",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389301652,
        "parent_id": "a2ed0409-6237-4491-9612-986243e210aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note the random salt which is important to have a different initialization vector and key for each message encrypted. This ensures in particular that two equal messages won’t result in identical encrypted text, but it also prevents attackers from reusing work spent guessing one passphrase on messages encrypted with another passphrase. This salt has to be stored along with the encrypted message in order to derive the same initialization vector and key for decrypting."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note the random salt which is important to have a different initialization vector and key for each message encrypted. This ensures in particular that two equal messages won’t result in identical encrypted text, but it also prevents attackers from reusing work spent guessing one passphrase on messages encrypted with another passphrase. This salt has to be stored along with the encrypted message in order to derive the same initialization vector and key for decrypting."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389301652,
        "id": "f5343173-915d-4d5d-912b-4b64275379d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389301652,
        "parent_id": "a2ed0409-6237-4491-9612-986243e210aa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following code will decrypt our message again:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following code will decrypt our message again:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389301652,
        "id": "89bff541-307b-4bfa-a762-56c9ab68df55",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389301652,
        "parent_id": "a2ed0409-6237-4491-9612-986243e210aa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "salt = encrypted[0:SALT_SIZE]\nderived = hashlib.pbkdf2_hmac('sha256', password, salt, 100000,\n                              dklen=IV_SIZE + KEY_SIZE)\niv = derived[0:IV_SIZE]\nkey = derived[IV_SIZE:]\ncleartext = AES.new(key, AES.MODE_CFB, iv).decrypt(encrypted[SALT_SIZE:])"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "salt = encrypted[0:SALT_SIZE]\nderived = hashlib.pbkdf2_hmac('sha256', password, salt, 100000,\n                              dklen=IV_SIZE + KEY_SIZE)\niv = derived[0:IV_SIZE]\nkey = derived[IV_SIZE:]\ncleartext = AES.new(key, AES.MODE_CFB, iv).decrypt(encrypted[SALT_SIZE:])",
        "code_language": "Plain Text"
      }
    ],
    "title": "Symmetric encryption using pycrypto"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}