{
  "ID": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
  "Root": {
    "alive": true,
    "content": [
      "8faa8e20-c535-41d0-87c7-58ba6af0d2e2",
      "c24a84dd-fed3-41bb-b602-83f0ed023bec",
      "131f6ca7-8928-48cc-a8a0-daa446d27f4b",
      "b28a4754-7f43-4915-be7f-d07385058c11",
      "38886a38-4192-44fe-a5aa-91182f3757bc",
      "09170b15-c885-4d2e-8e6a-3cf736fe5936"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550308269681,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550308500000,
    "parent_id": "a27718c5-df77-4fd4-b80b-880f0a024099",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Transposing with Map Using None as function argument python 2.x only"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308269677,
        "id": "8faa8e20-c535-41d0-87c7-58ba6af0d2e2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308500000,
        "parent_id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from itertools import imap\nfrom future_builtins import map as fmap # Different name to highlight differences\n\nimage = [[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9]]\n\nlist(map(None, *image))\n# Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\nlist(fmap(None, *image))\n# Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\nlist(imap(None, *image))\n# Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\nimage2 = [[1, 2, 3],\n          [4, 5],\n          [7, 8, 9]]\nlist(map(None, *image2))\n# Out: [(1, 4, 7), (2, 5, 8), (3, None, 9)]  # Fill missing values with None\nlist(fmap(None, *image2))\n# Out: [(1, 4, 7), (2, 5, 8)]                # ignore columns with missing values\nlist(imap(None, *image2))\n# Out: [(1, 4, 7), (2, 5, 8)]                # dito"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "from itertools import imap\nfrom future_builtins import map as fmap # Different name to highlight differences\n\nimage = [[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9]]\n\nlist(map(None, *image))\n# Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\nlist(fmap(None, *image))\n# Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\nlist(imap(None, *image))\n# Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\nimage2 = [[1, 2, 3],\n          [4, 5],\n          [7, 8, 9]]\nlist(map(None, *image2))\n# Out: [(1, 4, 7), (2, 5, 8), (3, None, 9)]  # Fill missing values with None\nlist(fmap(None, *image2))\n# Out: [(1, 4, 7), (2, 5, 8)]                # ignore columns with missing values\nlist(imap(None, *image2))\n# Out: [(1, 4, 7), (2, 5, 8)]                # dito",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308513734,
        "id": "c24a84dd-fed3-41bb-b602-83f0ed023bec",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308500000,
        "parent_id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Python 3:"
            ]
          ]
        },
        "type": "text",
        "version": 15,
        "inline_content": [
          {
            "Text": "In Python 3:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308269680,
        "id": "131f6ca7-8928-48cc-a8a0-daa446d27f4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308500000,
        "parent_id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "list(map(None, *image))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "list(map(None, *image))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308269680,
        "id": "b28a4754-7f43-4915-be7f-d07385058c11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308269680,
        "parent_id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "TypeError: ‘NoneType’ object is not callable"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "TypeError: ‘NoneType’ object is not callable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308269681,
        "id": "38886a38-4192-44fe-a5aa-91182f3757bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308269681,
        "parent_id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But there is a workaround to have similar results:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But there is a workaround to have similar results:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308269681,
        "id": "09170b15-c885-4d2e-8e6a-3cf736fe5936",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308500000,
        "parent_id": "5c4bbfbd-7c25-40f1-8a33-74b49f89610d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def conv_to_list(*args):\n    return list(args)\n\nlist(map(conv_to_list, *image))\n# Out: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "def conv_to_list(*args):\n    return list(args)\n\nlist(map(conv_to_list, *image))\n# Out: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]",
        "code_language": "Python"
      }
    ],
    "title": "Transposing with Map Using None as function argument python 2.x only",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}