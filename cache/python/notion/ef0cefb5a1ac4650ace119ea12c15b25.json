{
  "ID": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
  "Root": {
    "alive": true,
    "content": [
      "c390f71d-7893-4489-827e-2d3abf8c540b",
      "4c585366-832e-460c-ab43-ccba851f2792",
      "5b94db86-3bb1-4abb-b851-34c6fb165f1f",
      "9c37af4c-83cd-42bc-9275-3f27b4d14226",
      "f8d2ee72-4f79-49cf-b4fa-0906cd24b1ee",
      "e3b5cce6-86e1-4cba-a953-5bcdcd3afcf2",
      "acacd400-79fe-4215-8b3a-ded26ad5be0e",
      "54fcf333-02f5-43a4-a19e-e1191acee5c1",
      "92aaa9a1-9a4f-4a7b-b0e0-8fb3721989c2",
      "01da27df-384b-4d84-9327-8cd7f4c7cea5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550304893872,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550305380000,
    "parent_id": "8ee64259-4cde-4221-b561-4fa00141ee12",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "load vs loads dump vs dumps"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893869,
        "id": "c390f71d-7893-4489-827e-2d3abf8c540b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550304893869,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "json",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " module contains functions for both reading and writing to and from unicode strings, and reading and writing to and from files. These are differentiated by a trailing "
            ],
            [
              "s",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the function name. In these examples we use a StringIO object, but the same functions would apply for any file-like object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "json",
            "AttrFlags": 2
          },
          {
            "Text": " module contains functions for both reading and writing to and from unicode strings, and reading and writing to and from files. These are differentiated by a trailing "
          },
          {
            "Text": "s",
            "AttrFlags": 2
          },
          {
            "Text": " in the function name. In these examples we use a StringIO object, but the same functions would apply for any file-like object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893871,
        "id": "4c585366-832e-460c-ab43-ccba851f2792",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550304893871,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we use the string-based functions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we use the string-based functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "5b94db86-3bb1-4abb-b851-34c6fb165f1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305380000,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import json\n\ndata = {u\"foo\": u\"bar\", u\"baz\": []}\njson_string = json.dumps(data)\n# u'{\"foo\": \"bar\", \"baz\": []}'\njson.loads(json_string)\n# {u\"foo\": u\"bar\", u\"baz\": []}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import json\n\ndata = {u\"foo\": u\"bar\", u\"baz\": []}\njson_string = json.dumps(data)\n# u'{\"foo\": \"bar\", \"baz\": []}'\njson.loads(json_string)\n# {u\"foo\": u\"bar\", u\"baz\": []}",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "9c37af4c-83cd-42bc-9275-3f27b4d14226",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550304893872,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And here we use the file-based functions:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And here we use the file-based functions:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "f8d2ee72-4f79-49cf-b4fa-0906cd24b1ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305380000,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import json\n\nfrom io import StringIO\n\njson_file = StringIO()\ndata = {u\"foo\": u\"bar\", u\"baz\": []}\njson.dump(data, json_file)\njson_file.seek(0)  # Seek back to the start of the file before reading\njson_file_content = json_file.read()\n# u'{\"foo\": \"bar\", \"baz\": []}'\njson_file.seek(0)  # Seek back to the start of the file before reading\njson.load(json_file)\n# {u\"foo\": u\"bar\", u\"baz\": []}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import json\n\nfrom io import StringIO\n\njson_file = StringIO()\ndata = {u\"foo\": u\"bar\", u\"baz\": []}\njson.dump(data, json_file)\njson_file.seek(0)  # Seek back to the start of the file before reading\njson_file_content = json_file.read()\n# u'{\"foo\": \"bar\", \"baz\": []}'\njson_file.seek(0)  # Seek back to the start of the file before reading\njson.load(json_file)\n# {u\"foo\": u\"bar\", u\"baz\": []}",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "e3b5cce6-86e1-4cba-a953-5bcdcd3afcf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550304893872,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As you can see the main difference is that when dumping json data you must pass the file handle to the function, as opposed to capturing the return value. Also worth noting is that you must seek to the start of the file before reading or writing, in order to avoid data corruption. When opening a file the cursor is placed at position "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so the below would also work:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As you can see the main difference is that when dumping json data you must pass the file handle to the function, as opposed to capturing the return value. Also worth noting is that you must seek to the start of the file before reading or writing, in order to avoid data corruption. When opening a file the cursor is placed at position "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", so the below would also work:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "acacd400-79fe-4215-8b3a-ded26ad5be0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305380000,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import json\n\njson_file_path = './data.json'\ndata = {u\"foo\": u\"bar\", u\"baz\": []}\n\nwith open(json_file_path, 'w') as json_file:\n    json.dump(data, json_file)\n\nwith open(json_file_path) as json_file:\n    json_file_content = json_file.read()\n    # u'{\"foo\": \"bar\", \"baz\": []}'\n\nwith open(json_file_path) as json_file:\n    json.load(json_file)\n    # {u\"foo\": u\"bar\", u\"baz\": []}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import json\n\njson_file_path = './data.json'\ndata = {u\"foo\": u\"bar\", u\"baz\": []}\n\nwith open(json_file_path, 'w') as json_file:\n    json.dump(data, json_file)\n\nwith open(json_file_path) as json_file:\n    json_file_content = json_file.read()\n    # u'{\"foo\": \"bar\", \"baz\": []}'\n\nwith open(json_file_path) as json_file:\n    json.load(json_file)\n    # {u\"foo\": u\"bar\", u\"baz\": []}",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "54fcf333-02f5-43a4-a19e-e1191acee5c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550304893872,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Having both ways of dealing with json data allows you to idiomatically and efficiently work with formats which build upon json, such as "
            ],
            [
              "pyspark",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s json-per-line:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Having both ways of dealing with json data allows you to idiomatically and efficiently work with formats which build upon json, such as "
          },
          {
            "Text": "pyspark",
            "AttrFlags": 2
          },
          {
            "Text": "’s json-per-line:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550304893872,
        "id": "92aaa9a1-9a4f-4a7b-b0e0-8fb3721989c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305380000,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "# loading from a file\ndata = [json.loads(line) for line in open(file_path).splitlines()]\n\n# dumping to a file\nwith open(file_path, 'w') as json_file:\n    for item in data:\n        json.dump(item, json_file)\n        json_file.write('\\n')"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "# loading from a file\ndata = [json.loads(line) for line in open(file_path).splitlines()]\n\n# dumping to a file\nwith open(file_path, 'w') as json_file:\n    for item in data:\n        json.dump(item, json_file)\n        json_file.write('\\n')",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305380000,
        "id": "01da27df-384b-4d84-9327-8cd7f4c7cea5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305380000,
        "parent_id": "ef0cefb5-a1ac-4650-ace1-19ea12c15b25",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "load vs loads dump vs dumps",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}