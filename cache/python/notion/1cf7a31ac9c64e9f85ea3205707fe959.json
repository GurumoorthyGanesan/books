{
  "ID": "1cf7a31a-c9c6-4e9f-85ea-3205707fe959",
  "Root": {
    "alive": true,
    "content": [
      "cfd60904-6504-45ff-b43a-bc1c7274ca39",
      "40612eeb-78ea-4b2d-a3a3-2effb6c56912",
      "6523ed99-4af4-4674-b32b-8b3212e3e072",
      "683de069-4324-49ed-9cea-31e10096c74e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346067095,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1cf7a31a-c9c6-4e9f-85ea-3205707fe959",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550346120000,
    "parent_id": "ce5582e1-265e-4411-b5ad-310114bbe696",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Advanced use of multithreads"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346067091,
        "id": "cfd60904-6504-45ff-b43a-bc1c7274ca39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346067091,
        "parent_id": "1cf7a31a-c9c6-4e9f-85ea-3205707fe959",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This section will contain some of the most advanced examples realized using Multithreading."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This section will contain some of the most advanced examples realized using Multithreading."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346067094,
        "id": "40612eeb-78ea-4b2d-a3a3-2effb6c56912",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346067094,
        "parent_id": "1cf7a31a-c9c6-4e9f-85ea-3205707fe959",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Advanced printer (logger)"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Advanced printer (logger)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346067094,
        "id": "6523ed99-4af4-4674-b32b-8b3212e3e072",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346067094,
        "parent_id": "1cf7a31a-c9c6-4e9f-85ea-3205707fe959",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A thread that prints everything is received and modifies the output according to the terminal width. The nice part is that also the “already written” output is modified when the width of the terminal changes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A thread that prints everything is received and modifies the output according to the terminal width. The nice part is that also the “already written” output is modified when the width of the terminal changes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346067094,
        "id": "683de069-4324-49ed-9cea-31e10096c74e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346120000,
        "parent_id": "1cf7a31a-c9c6-4e9f-85ea-3205707fe959",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "#!/usr/bin/env python2\n\nimport threading\nimport Queue\nimport time\nimport sys\nimport subprocess\nfrom backports.shutil_get_terminal_size import get_terminal_size\n\nprintq = Queue.Queue()\ninterrupt = False\nlines = []\n\ndef main():\n\n    ptt = threading.Thread(target=printer) # Turn the printer on\n    ptt.daemon = True\n    ptt.start()\n\n    # Stupid example of stuff to print\n    for i in xrange(1,100):\n        printq.put(' '.join([str(x) for x in range(1,i)]))           # The actual way to send stuff to the printer\n        time.sleep(.5)\n\ndef split_line(line, cols):\n    if len(line) \u003e cols:\n        new_line = ''\n        ww = line.split()\n        i = 0\n        while len(new_line) \u003c= (cols - len(ww[i]) - 1):\n            new_line += ww[i] + ' '\n            i += 1\n            print len(new_line)\n        if new_line == '':\n            return (line, '')\n\n        return (new_line, ' '.join(ww[i:]))\n    else:\n        return (line, '')\n\n\ndef printer():\n\n    while True:\n        cols, rows = get_terminal_size() # Get the terminal dimensions\n        msg = '#' + '-' * (cols - 2) + '#\\n' # Create the\n        try:\n            new_line = str(printq.get_nowait())\n            if new_line != '!@#EXIT#@!': # A nice way to turn the printer\n                                         # thread out gracefully\n                lines.append(new_line)\n                printq.task_done()\n            else:\n                printq.task_done()\n                sys.exit()\n        except Queue.Empty:\n            pass\n\n        # Build the new message to show and split too long lines\n        for line in lines:\n            res = line          # The following is to split lines which are\n                                # longer than cols.\n            while len(res) !=0:\n                toprint, res = split_line(res, cols)\n                msg += '\\n' + toprint\n\n        # Clear the shell and print the new output\n        subprocess.check_call('clear') # Keep the shell clean\n        sys.stdout.write(msg)\n        sys.stdout.flush()\n        time.sleep(.5)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#!/usr/bin/env python2\n\nimport threading\nimport Queue\nimport time\nimport sys\nimport subprocess\nfrom backports.shutil_get_terminal_size import get_terminal_size\n\nprintq = Queue.Queue()\ninterrupt = False\nlines = []\n\ndef main():\n\n    ptt = threading.Thread(target=printer) # Turn the printer on\n    ptt.daemon = True\n    ptt.start()\n\n    # Stupid example of stuff to print\n    for i in xrange(1,100):\n        printq.put(' '.join([str(x) for x in range(1,i)]))           # The actual way to send stuff to the printer\n        time.sleep(.5)\n\ndef split_line(line, cols):\n    if len(line) \u003e cols:\n        new_line = ''\n        ww = line.split()\n        i = 0\n        while len(new_line) \u003c= (cols - len(ww[i]) - 1):\n            new_line += ww[i] + ' '\n            i += 1\n            print len(new_line)\n        if new_line == '':\n            return (line, '')\n\n        return (new_line, ' '.join(ww[i:]))\n    else:\n        return (line, '')\n\n\ndef printer():\n\n    while True:\n        cols, rows = get_terminal_size() # Get the terminal dimensions\n        msg = '#' + '-' * (cols - 2) + '#\\n' # Create the\n        try:\n            new_line = str(printq.get_nowait())\n            if new_line != '!@#EXIT#@!': # A nice way to turn the printer\n                                         # thread out gracefully\n                lines.append(new_line)\n                printq.task_done()\n            else:\n                printq.task_done()\n                sys.exit()\n        except Queue.Empty:\n            pass\n\n        # Build the new message to show and split too long lines\n        for line in lines:\n            res = line          # The following is to split lines which are\n                                # longer than cols.\n            while len(res) !=0:\n                toprint, res = split_line(res, cols)\n                msg += '\\n' + toprint\n\n        # Clear the shell and print the new output\n        subprocess.check_call('clear') # Keep the shell clean\n        sys.stdout.write(msg)\n        sys.stdout.flush()\n        time.sleep(.5)",
        "code_language": "Python"
      }
    ],
    "title": "Advanced use of multithreads",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}