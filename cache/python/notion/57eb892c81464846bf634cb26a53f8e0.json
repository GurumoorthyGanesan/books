{
  "ID": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
  "Root": {
    "alive": true,
    "content": [
      "8a0eb8bd-0a08-4428-a3d3-7bdb93bae06f",
      "d5be2c18-cd8f-4b11-863a-c49f5c57174a",
      "30f3f6b4-2ba0-4340-8201-8d1663fa2455",
      "df9125e8-1870-41d2-be76-61e48e413177",
      "bd609b5e-6dff-48fb-bb0c-1477d7e626af",
      "45953ce5-58e5-4a56-917c-c2c7f01106f3",
      "2c8305b6-9276-4862-834b-d4989836382b",
      "9c778cca-c37c-4665-ac0d-996d8791b6db",
      "0e8a9339-1534-4da4-858a-97b7fff501d1",
      "64f3f135-369d-422c-9e13-efc92bd2cbf8",
      "7c1fd6d9-c921-4ed2-8ee4-272aecdc9e76",
      "3b047da6-dce8-4b6f-bbe1-315fbb2846a9",
      "b91b0f5d-33b2-4351-b623-5587ba8bbe0e",
      "2705f4cf-4618-4107-97e4-4da6b35588f1",
      "9b777032-6a8f-41ef-8039-df5e453436a8",
      "742576cc-6430-4b0a-8541-1de7a04aab0e",
      "d64e2c9b-d022-4850-87cb-a9d0a4be5884"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390729053,
    "id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550473320000,
    "parent_id": "67aee09a-004e-4bbf-b975-0c78a4095c91",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "List Comprehensions with Nested Loops"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729050,
        "id": "8a0eb8bd-0a08-4428-a3d3-7bdb93bae06f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729050,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "List Comprehensions",
              [
                [
                  "a",
                  "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
                ]
              ]
            ],
            [
              " can use nested "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loops. You can code any number of nested for loops within a list comprehension, and each "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop may have an optional associated "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " test. When doing so, the order of the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructs is the same order as when writing a series of nested "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements. The general structure of list comprehensions looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "List Comprehensions",
            "Link": "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
          },
          {
            "Text": " can use nested "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loops. You can code any number of nested for loops within a list comprehension, and each "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop may have an optional associated "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " test. When doing so, the order of the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " constructs is the same order as when writing a series of nested "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " statements. The general structure of list comprehensions looks like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729050,
        "id": "d5be2c18-cd8f-4b11-863a-c49f5c57174a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729050,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "[ expression for target1 in iterable1 [if condition1]\n             for target2 in iterable2 [if condition2]...\n             for targetN in iterableN [if conditionN] ]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "[ expression for target1 in iterable1 [if condition1]\n             for target2 in iterable2 [if condition2]...\n             for targetN in iterableN [if conditionN] ]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729051,
        "id": "30f3f6b4-2ba0-4340-8201-8d1663fa2455",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729051,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, the following code flattening a list of lists using multiple "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, the following code flattening a list of lists using multiple "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " statements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729051,
        "id": "df9125e8-1870-41d2-be76-61e48e413177",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729051,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "data = [[1, 2], [3, 4], [5, 6]]\noutput = []\nfor each_list in data:\n    for element in each_list:\n        output.append(element)\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "data = [[1, 2], [3, 4], [5, 6]]\noutput = []\nfor each_list in data:\n    for element in each_list:\n        output.append(element)\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729051,
        "id": "bd609b5e-6dff-48fb-bb0c-1477d7e626af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729051,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "can be equivalently written as a list comprehension with multiple "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "can be equivalently written as a list comprehension with multiple "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " constructs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729051,
        "id": "45953ce5-58e5-4a56-917c-c2c7f01106f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729051,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "data = [[1, 2], [3, 4], [5, 6]]\noutput = [element for each_list in data for element in each_list]\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "data = [[1, 2], [3, 4], [5, 6]]\noutput = [element for each_list in data for element in each_list]\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729051,
        "id": "2c8305b6-9276-4862-834b-d4989836382b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729051,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Demo",
              [
                [
                  "a",
                  "https://ideone.com/R7uwEP"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Demo",
            "Link": "https://ideone.com/R7uwEP"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729051,
        "id": "9c778cca-c37c-4665-ac0d-996d8791b6db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729051,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In both the expanded form and the list comprehension, the outer loop (first for statement) comes first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In both the expanded form and the list comprehension, the outer loop (first for statement) comes first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "0e8a9339-1534-4da4-858a-97b7fff501d1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "64f3f135-369d-422c-9e13-efc92bd2cbf8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to being more compact, the nested comprehension is also significantly faster."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to being more compact, the nested comprehension is also significantly faster."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "7c1fd6d9-c921-4ed2-8ee4-272aecdc9e76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "In [1]: data = [[1,2],[3,4],[5,6]]\nIn [2]: def f():\n   ...:     output=[]\n   ...:     for each_list in data:\n   ...:         for element in each_list:\n   ...:             output.append(element)\n   ...:     return output\nIn [3]: timeit f()\n1000000 loops, best of 3: 1.37 µs per loop\nIn [4]: timeit [inner for outer in data for inner in outer]\n1000000 loops, best of 3: 632 ns per loop"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "In [1]: data = [[1,2],[3,4],[5,6]]\nIn [2]: def f():\n   ...:     output=[]\n   ...:     for each_list in data:\n   ...:         for element in each_list:\n   ...:             output.append(element)\n   ...:     return output\nIn [3]: timeit f()\n1000000 loops, best of 3: 1.37 µs per loop\nIn [4]: timeit [inner for outer in data for inner in outer]\n1000000 loops, best of 3: 632 ns per loop",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "3b047da6-dce8-4b6f-bbe1-315fbb2846a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The overhead for the function call above is about "
            ],
            [
              "140ns",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The overhead for the function call above is about "
          },
          {
            "Text": "140ns",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "b91b0f5d-33b2-4351-b623-5587ba8bbe0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "2705f4cf-4618-4107-97e4-4da6b35588f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inline "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s are nested similarly, and may occur in any position after the first "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inline "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": "s are nested similarly, and may occur in any position after the first "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "9b777032-6a8f-41ef-8039-df5e453436a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "data = [[1], [2, 3], [4, 5]]\noutput = [element for each_list in data\n                if len(each_list) == 2\n                for element in each_list\n                if element != 5]\nprint(output)\n# Out: [2, 3, 4]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "data = [[1], [2, 3], [4, 5]]\noutput = [element for each_list in data\n                if len(each_list) == 2\n                for element in each_list\n                if element != 5]\nprint(output)\n# Out: [2, 3, 4]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729052,
        "id": "742576cc-6430-4b0a-8541-1de7a04aab0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729052,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Demo",
              [
                [
                  "a",
                  "https://ideone.com/kPO2Zy"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Demo",
            "Link": "https://ideone.com/kPO2Zy"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390729053,
        "id": "d64e2c9b-d022-4850-87cb-a9d0a4be5884",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390729053,
        "parent_id": "57eb892c-8146-4846-bf63-4cb26a53f8e0",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the sake of readability, however, you should consider using traditional "
            ],
            [
              "for-loops",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". This is especially true when nesting is more than 2 levels deep, and/or the logic of the comprehension is too complex. multiple nested loop list comprehension could be error prone or it gives unexpected result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the sake of readability, however, you should consider using traditional "
          },
          {
            "Text": "for-loops",
            "AttrFlags": 4
          },
          {
            "Text": ". This is especially true when nesting is more than 2 levels deep, and/or the logic of the comprehension is too complex. multiple nested loop list comprehension could be error prone or it gives unexpected result."
          }
        ]
      }
    ],
    "title": "List Comprehensions with Nested Loops"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}