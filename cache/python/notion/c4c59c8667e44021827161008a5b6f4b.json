{
  "ID": "c4c59c86-67e4-4021-8271-61008a5b6f4b",
  "Root": {
    "alive": true,
    "content": [
      "ba647b91-4db6-4bfb-976e-f23412e6130c",
      "e55df072-3928-471e-9134-43201474a789"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390747083,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c4c59c86-67e4-4021-8271-61008a5b6f4b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550473380000,
    "parent_id": "f7049071-561c-4389-a7ae-7fba8393467e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Server Object Method"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390747080,
        "id": "ba647b91-4db6-4bfb-976e-f23412e6130c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390747080,
        "parent_id": "c4c59c86-67e4-4021-8271-61008a5b6f4b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our server object is given an ‘application’ parameter which can be any callable application object (see other examples). It writes first the headers, then the body of data returned by our application to the system standard output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our server object is given an ‘application’ parameter which can be any callable application object (see other examples). It writes first the headers, then the body of data returned by our application to the system standard output."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390747083,
        "id": "e55df072-3928-471e-9134-43201474a789",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390747083,
        "parent_id": "c4c59c86-67e4-4021-8271-61008a5b6f4b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import os, sys    \n\ndef run(application):\n    environ['wsgi.input']        = sys.stdin\n    environ['wsgi.errors']       = sys.stderr\n\n    headers_set = []\n    headers_sent = []\n\n    def write (data):\n        \"\"\" \n        Writes header data from 'start_response()' as well as body data from 'response' \n        to system standard output. \n        \"\"\"\n        if not headers_set:\n            raise AssertionError(\"write() before start_response()\")\n\n        elif not headers_sent:\n            status, response_headers = headers_sent[:] = headers_set\n            sys.stdout.write('Status: %s\\r\\n' % status)\n            for header in response_headers:\n                sys.stdout.write('%s: %s\\r\\n' % header)\n            sys.stdout.write('\\r\\n')\n\n        sys.stdout.write(data)\n        sys.stdout.flush()\n\n    def start_response(status, response_headers):\n        \"\"\" Sets headers for the response returned by this server.\"\"\"\n        if headers_set:\n            raise AssertionError(\"Headers already set!\")\n\n        headers_set[:] = [status, response_headers]\n        return write\n\n    # This is the most important piece of the 'server object'\n    # Our result will be generated by the 'application' given to this method as a parameter\n    result = application(environ, start_response)\n    try:\n        for data in result:\n            if data:\n                write(data)          # Body isn't empty send its data to 'write()'\n        if not headers_sent:\n            write('')                # Body is empty, send empty string to 'write()'"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import os, sys    \n\ndef run(application):\n    environ['wsgi.input']        = sys.stdin\n    environ['wsgi.errors']       = sys.stderr\n\n    headers_set = []\n    headers_sent = []\n\n    def write (data):\n        \"\"\" \n        Writes header data from 'start_response()' as well as body data from 'response' \n        to system standard output. \n        \"\"\"\n        if not headers_set:\n            raise AssertionError(\"write() before start_response()\")\n\n        elif not headers_sent:\n            status, response_headers = headers_sent[:] = headers_set\n            sys.stdout.write('Status: %s\\r\\n' % status)\n            for header in response_headers:\n                sys.stdout.write('%s: %s\\r\\n' % header)\n            sys.stdout.write('\\r\\n')\n\n        sys.stdout.write(data)\n        sys.stdout.flush()\n\n    def start_response(status, response_headers):\n        \"\"\" Sets headers for the response returned by this server.\"\"\"\n        if headers_set:\n            raise AssertionError(\"Headers already set!\")\n\n        headers_set[:] = [status, response_headers]\n        return write\n\n    # This is the most important piece of the 'server object'\n    # Our result will be generated by the 'application' given to this method as a parameter\n    result = application(environ, start_response)\n    try:\n        for data in result:\n            if data:\n                write(data)          # Body isn't empty send its data to 'write()'\n        if not headers_sent:\n            write('')                # Body is empty, send empty string to 'write()'",
        "code_language": "Plain Text"
      }
    ],
    "title": "Server Object Method",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}