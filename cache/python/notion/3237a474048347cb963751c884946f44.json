{
  "ID": "3237a474-0483-47cb-9637-51c884946f44",
  "Root": {
    "alive": true,
    "content": [
      "3e2458fb-6982-4b7e-a1fe-bd0591ea1968",
      "1be6c7cd-6604-4e56-93bd-97e04306697e",
      "dba3e791-6146-4ea4-bd6c-f069cb4495af",
      "60cde512-6e58-46db-8a94-41ca3f83e27b",
      "34fee354-09a8-4e3b-9a43-25b52b6b09af",
      "a164365c-2d6c-4bd2-8222-06b5a3f4112a",
      "1b1629ab-1810-42c9-bd6a-cfbc1d58eb99",
      "74a64072-be7c-43cd-9083-fe271205d295",
      "1b78d4d3-6138-4cb4-927c-3d864d7c8d76",
      "b32c27f3-dd69-4cc8-855d-65712471d04e",
      "8fe09867-1eb8-4ab0-969a-773f20ff699b",
      "c454945a-1db9-4888-b888-61f417c38a9e",
      "0833b360-8f56-4a9b-9127-4474e51fca08",
      "08ec70e9-95e7-447b-beca-aa1b232b1881",
      "466e76e7-7f68-4505-9663-c1c4e7697f47",
      "09fa98ba-5ab0-451f-9653-ce382c015998"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550230987935,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3237a474-0483-47cb-9637-51c884946f44",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550260500000,
    "parent_id": "ae9aef3d-dc0a-4b63-9830-5e3b3a5fffd4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "List methods and supported operators"
        ]
      ]
    },
    "type": "page",
    "version": 67,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550260440000,
        "id": "3e2458fb-6982-4b7e-a1fe-bd0591ea1968",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550260500000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "@TODO maybe conver list into headers or bold for less indentation"
            ]
          ]
        },
        "type": "text",
        "version": 72,
        "inline_content": [
          {
            "Text": "@TODO maybe conver list into headers or bold for less indentation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987928,
        "id": "1be6c7cd-6604-4e56-93bd-97e04306697e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550230987928,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Starting with a given list "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Starting with a given list "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987929,
        "id": "dba3e791-6146-4ea4-bd6c-f069cb4495af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "a = [1, 2, 3, 4, 5]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = [1, 2, 3, 4, 5]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "content": [
          "1bf7f1af-83cb-467e-8ff2-a18330219fac"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987929,
        "id": "60cde512-6e58-46db-8a94-41ca3f83e27b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "append(value)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – appends a new element to the end of the list."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987929,
            "id": "1bf7f1af-83cb-467e-8ff2-a18330219fac",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "60cde512-6e58-46db-8a94-41ca3f83e27b",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "# Append values 6, 7, and 7 to the list\na.append(6)\na.append(7)\na.append(7)\n# a: [1, 2, 3, 4, 5, 6, 7, 7]\n\n# Append another list\nb = [8, 9]\na.append(b)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9]]\n\n# Append an element of a different type, as list elements do not need to have the same type\nmy_string = \"hello world\"\na.append(my_string)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9], \"hello world\"]\n\n**Note that** the `append()` method only appends one new element to the end of the list. If you append a list to another list, the list that you append becomes a single element at the end of the first list.\n\n# Appending a list to another list\na = [1, 2, 3, 4, 5, 6, 7, 7]\nb = [8, 9]\na.append(b)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9]]\na[8]\n# Returns: [8,9]"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "# Append values 6, 7, and 7 to the list\na.append(6)\na.append(7)\na.append(7)\n# a: [1, 2, 3, 4, 5, 6, 7, 7]\n\n# Append another list\nb = [8, 9]\na.append(b)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9]]\n\n# Append an element of a different type, as list elements do not need to have the same type\nmy_string = \"hello world\"\na.append(my_string)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9], \"hello world\"]\n\n**Note that** the `append()` method only appends one new element to the end of the list. If you append a list to another list, the list that you append becomes a single element at the end of the first list.\n\n# Appending a list to another list\na = [1, 2, 3, 4, 5, 6, 7, 7]\nb = [8, 9]\na.append(b)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9]]\na[8]\n# Returns: [8,9]",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "append(value)",
            "AttrFlags": 2
          },
          {
            "Text": " – appends a new element to the end of the list."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "3dc4f59d-c9c9-4cc4-8dc7-a1fe0bde4754",
          "b659ac9b-8d69-4430-a565-71561a4689f9"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987930,
        "id": "34fee354-09a8-4e3b-9a43-25b52b6b09af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "extend(enumerable)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – extends the list by appending elements from another enumerable."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 4,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987930,
            "id": "3dc4f59d-c9c9-4cc4-8dc7-a1fe0bde4754",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "34fee354-09a8-4e3b-9a43-25b52b6b09af",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a = [1, 2, 3, 4, 5, 6, 7, 7]\nb = [8, 9, 10]\n\n# Extend list by appending all elements from b\na.extend(b)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]\n\n# Extend list with elements from a non-list enumerable:\na.extend(range(3))\n# a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 0, 1, 2]\n\nLists can also be concatenated with the `+` operator. Note that this does not modify any of the original lists:\n\na = [1, 2, 3, 4, 5, 6] + [7, 7] + b\n# a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a = [1, 2, 3, 4, 5, 6, 7, 7]\nb = [8, 9, 10]\n\n# Extend list by appending all elements from b\na.extend(b)\n# a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]\n\n# Extend list with elements from a non-list enumerable:\na.extend(range(3))\n# a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 0, 1, 2]\n\nLists can also be concatenated with the `+` operator. Note that this does not modify any of the original lists:\n\na = [1, 2, 3, 4, 5, 6] + [7, 7] + b\n# a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550259780000,
            "id": "b659ac9b-8d69-4430-a565-71561a4689f9",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "34fee354-09a8-4e3b-9a43-25b52b6b09af",
            "parent_table": "block",
            "type": "text",
            "version": 3
          }
        ],
        "inline_content": [
          {
            "Text": "extend(enumerable)",
            "AttrFlags": 2
          },
          {
            "Text": " – extends the list by appending elements from another enumerable."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "9e275d94-7e45-4d7f-996f-3c0454f4b57a",
          "9682d1cd-5386-4059-90ac-149bfef33c12"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987930,
        "id": "a164365c-2d6c-4bd2-8222-06b5a3f4112a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "index(value, [startIndex])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – gets the index of the first occurrence of the input value. If the input value is not in the list a "
            ],
            [
              "ValueError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " exception is raised. If a second argument is provided, the search is started at that specified index."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 4,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987930,
            "id": "9e275d94-7e45-4d7f-996f-3c0454f4b57a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "a164365c-2d6c-4bd2-8222-06b5a3f4112a",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.index(7)\n# Returns: 6\n\na.index(49) # ValueError, because 49 is not in a.\n\na.index(7, 7)\n# Returns: 7\n\na.index(7, 8) # ValueError, because there is no 7 starting at index 8"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a.index(7)\n# Returns: 6\n\na.index(49) # ValueError, because 49 is not in a.\n\na.index(7, 7)\n# Returns: 7\n\na.index(7, 8) # ValueError, because there is no 7 starting at index 8",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550259780000,
            "id": "9682d1cd-5386-4059-90ac-149bfef33c12",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "a164365c-2d6c-4bd2-8222-06b5a3f4112a",
            "parent_table": "block",
            "type": "text",
            "version": 3
          }
        ],
        "inline_content": [
          {
            "Text": "index(value, [startIndex])",
            "AttrFlags": 2
          },
          {
            "Text": " – gets the index of the first occurrence of the input value. If the input value is not in the list a "
          },
          {
            "Text": "ValueError",
            "AttrFlags": 2
          },
          {
            "Text": " exception is raised. If a second argument is provided, the search is started at that specified index."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "368d28bd-0d9f-457b-baab-8f4d5f1565ff"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987931,
        "id": "1b1629ab-1810-42c9-bd6a-cfbc1d58eb99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "insert(index, value)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – inserts "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " just before the specified "
            ],
            [
              "index",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Thus after the insertion the new element occupies position "
            ],
            [
              "index",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987931,
            "id": "368d28bd-0d9f-457b-baab-8f4d5f1565ff",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "1b1629ab-1810-42c9-bd6a-cfbc1d58eb99",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.insert(0, 0)  # insert 0 at position 0\na.insert(2, 5)  # insert 5 at position 2\n# a: [0, 1, 5, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a.insert(0, 0)  # insert 0 at position 0\na.insert(2, 5)  # insert 5 at position 2\n# a: [0, 1, 5, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "insert(index, value)",
            "AttrFlags": 2
          },
          {
            "Text": " – inserts "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " just before the specified "
          },
          {
            "Text": "index",
            "AttrFlags": 2
          },
          {
            "Text": ". Thus after the insertion the new element occupies position "
          },
          {
            "Text": "index",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "3a9ecea4-a35e-4f63-a0c7-70396a768f21"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987931,
        "id": "74a64072-be7c-43cd-9083-fe271205d295",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "pop([index])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – removes and returns the item at "
            ],
            [
              "index",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". With no argument it removes and returns the last element of the list."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987931,
            "id": "3a9ecea4-a35e-4f63-a0c7-70396a768f21",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259780000,
            "parent_id": "74a64072-be7c-43cd-9083-fe271205d295",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.pop(2)\n# Returns: 5\n# a: [0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]\na.pop(8)\n# Returns: 7\n# a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# With no argument:\na.pop()\n# Returns: 10\n# a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a.pop(2)\n# Returns: 5\n# a: [0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]\na.pop(8)\n# Returns: 7\n# a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# With no argument:\na.pop()\n# Returns: 10\n# a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "pop([index])",
            "AttrFlags": 2
          },
          {
            "Text": " – removes and returns the item at "
          },
          {
            "Text": "index",
            "AttrFlags": 2
          },
          {
            "Text": ". With no argument it removes and returns the last element of the list."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "97c68340-5939-4e21-88a0-2a21946dc159"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987931,
        "id": "1b78d4d3-6138-4cb4-927c-3d864d7c8d76",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259780000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "remove(value)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – removes the first occurrence of the specified value. If the provided value cannot be found, a "
            ],
            [
              "ValueError",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is raised."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987931,
            "id": "97c68340-5939-4e21-88a0-2a21946dc159",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259840000,
            "parent_id": "1b78d4d3-6138-4cb4-927c-3d864d7c8d76",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.remove(0)\na.remove(9)\n# a: [1, 2, 3, 4, 5, 6, 7, 8]\na.remove(10)\n# ValueError, because 10 is not in a"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "a.remove(0)\na.remove(9)\n# a: [1, 2, 3, 4, 5, 6, 7, 8]\na.remove(10)\n# ValueError, because 10 is not in a",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "remove(value)",
            "AttrFlags": 2
          },
          {
            "Text": " – removes the first occurrence of the specified value. If the provided value cannot be found, a "
          },
          {
            "Text": "ValueError",
            "AttrFlags": 2
          },
          {
            "Text": " is raised."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "3f6e7ee1-94da-4239-a97d-b1eff81a5da7"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987932,
        "id": "b32c27f3-dd69-4cc8-855d-65712471d04e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259840000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "reverse()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – reverses the list in-place and returns "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987932,
            "id": "3f6e7ee1-94da-4239-a97d-b1eff81a5da7",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259840000,
            "parent_id": "b32c27f3-dd69-4cc8-855d-65712471d04e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.reverse()\n# a: [8, 7, 6, 5, 4, 3, 2, 1]\n\nThere are also [other ways of reversing a list][2]."
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a.reverse()\n# a: [8, 7, 6, 5, 4, 3, 2, 1]\n\nThere are also [other ways of reversing a list][2].",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "reverse()",
            "AttrFlags": 2
          },
          {
            "Text": " – reverses the list in-place and returns "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "1d0223d5-3609-4ee3-a6a4-9f843f185581"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987932,
        "id": "8fe09867-1eb8-4ab0-969a-773f20ff699b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550259840000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "count(value)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – counts the number of occurrences of some value in the list."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987932,
            "id": "1d0223d5-3609-4ee3-a6a4-9f843f185581",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550259840000,
            "parent_id": "8fe09867-1eb8-4ab0-969a-773f20ff699b",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.count(7)\n# Returns: 2"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a.count(7)\n# Returns: 2",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "count(value)",
            "AttrFlags": 2
          },
          {
            "Text": " – counts the number of occurrences of some value in the list."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "55a64326-3c50-4c23-b5b2-32c801e4691f",
          "254f5950-53b3-4060-a583-a14c58b58798",
          "b522dc5b-d5d5-42b7-849c-52101c3c2eeb",
          "ecb5a64a-d5d4-442d-ace1-1c28de05b34f",
          "55068d46-2657-4ec1-8d7a-22041012cc4e",
          "07c17402-4e28-4ab7-92e2-6b741cc60959",
          "3b133233-6433-466c-b1e5-a8509e91c905",
          "a91e978d-7f4b-421e-b1c5-ce0599ade0ae",
          "207c4325-3746-4638-b18c-713dcd7c0429",
          "cda09479-2faf-4485-87d4-37ecc3788836",
          "7d41e076-795c-4245-97c7-b913ec00ca15",
          "2ee7d07a-c827-4c6a-b1f9-86cc794cc11c",
          "9aa26822-88f0-4320-8e24-3abeb40e653e",
          "e16c948c-f0db-4a6b-b2fb-8f336c1f6f5c",
          "402bd334-d722-41fe-bd5b-1ce1794017b0",
          "deabe7f8-1f3e-4919-a99c-1b1e4c59237c"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987932,
        "id": "c454945a-1db9-4888-b888-61f417c38a9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550260200000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "sort()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – sorts the list in numerical and lexicographical order and returns "
            ],
            [
              "None",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 34,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987932,
            "id": "55a64326-3c50-4c23-b5b2-32c801e4691f",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260080000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.sort()\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n# Sorts the list in numerical order\n\n"
                ]
              ]
            },
            "type": "code",
            "version": 21,
            "code": "a.sort()\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n# Sorts the list in numerical order\n\n",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260114325,
            "id": "254f5950-53b3-4060-a583-a14c58b58798",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260140000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Lists can also be reversed when sorted using the `reverse=True` flag in the `sort()` method."
                ]
              ]
            },
            "type": "text",
            "version": 10,
            "inline_content": [
              {
                "Text": "Lists can also be reversed when sorted using the `reverse=True` flag in the `sort()` method."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260152823,
            "id": "b522dc5b-d5d5-42b7-849c-52101c3c2eeb",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260140000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.sort(reverse=True)\n# a = [8, 7, 6, 5, 4, 3, 2, 1]"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "a.sort(reverse=True)\n# a = [8, 7, 6, 5, 4, 3, 2, 1]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550259840000,
            "id": "ecb5a64a-d5d4-442d-ace1-1c28de05b34f",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260020000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "If you want to sort by attributes of items, you can use the `key` keyword argument:\n"
                ]
              ]
            },
            "type": "text",
            "version": 11,
            "inline_content": [
              {
                "Text": "If you want to sort by attributes of items, you can use the `key` keyword argument:\n"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260026091,
            "id": "55068d46-2657-4ec1-8d7a-22041012cc4e",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260140000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "import datetime\n\nclass Person(object):\n    def __init__(self, name, birthday, height):\n        self.name = name\n        self.birthday = birthday\n        self.height = height\n\n    def __repr__(self):\n        return self.name\n\nl = [Person(\"John Cena\", datetime.date(1992, 9, 12), 175),\n     Person(\"Chuck Norris\", datetime.date(1990, 8, 28), 180),\n     Person(\"Jon Skeet\", datetime.date(1991, 7, 6), 185)]\n\nl.sort(key=lambda item: item.name)\n# l: [Chuck Norris, John Cena, Jon Skeet]\n\nl.sort(key=lambda item: item.birthday)\n# l: [Chuck Norris, Jon Skeet, John Cena]\n\nl.sort(key=lambda item: item.height)\n# l: [John Cena, Chuck Norris, Jon Skeet]"
                ]
              ]
            },
            "type": "code",
            "version": 10,
            "code": "import datetime\n\nclass Person(object):\n    def __init__(self, name, birthday, height):\n        self.name = name\n        self.birthday = birthday\n        self.height = height\n\n    def __repr__(self):\n        return self.name\n\nl = [Person(\"John Cena\", datetime.date(1992, 9, 12), 175),\n     Person(\"Chuck Norris\", datetime.date(1990, 8, 28), 180),\n     Person(\"Jon Skeet\", datetime.date(1991, 7, 6), 185)]\n\nl.sort(key=lambda item: item.name)\n# l: [Chuck Norris, John Cena, Jon Skeet]\n\nl.sort(key=lambda item: item.birthday)\n# l: [Chuck Norris, Jon Skeet, John Cena]\n\nl.sort(key=lambda item: item.height)\n# l: [John Cena, Chuck Norris, Jon Skeet]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260020000,
            "id": "07c17402-4e28-4ab7-92e2-6b741cc60959",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260080000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "In case of list of dicts the concept is the same:"
                ]
              ]
            },
            "type": "text",
            "version": 2,
            "inline_content": [
              {
                "Text": "In case of list of dicts the concept is the same:"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260052650,
            "id": "3b133233-6433-466c-b1e5-a8509e91c905",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260020000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "import datetime\n\nl = [{'name':'John Cena', 'birthday': datetime.date(1992, 9, 12),'height': 175},\n {'name': 'Chuck Norris', 'birthday': datetime.date(1990, 8, 28),'height': 180},\n {'name': 'Jon Skeet', 'birthday': datetime.date(1991, 7, 6), 'height': 185}]\n\nl.sort(key=lambda item: item['name'])\n# l: [Chuck Norris, John Cena, Jon Skeet]\n\nl.sort(key=lambda item: item['birthday'])\n# l: [Chuck Norris, Jon Skeet, John Cena]\n\nl.sort(key=lambda item: item['height'])\n# l: [John Cena, Chuck Norris, Jon Skeet]"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "import datetime\n\nl = [{'name':'John Cena', 'birthday': datetime.date(1992, 9, 12),'height': 175},\n {'name': 'Chuck Norris', 'birthday': datetime.date(1990, 8, 28),'height': 180},\n {'name': 'Jon Skeet', 'birthday': datetime.date(1991, 7, 6), 'height': 185}]\n\nl.sort(key=lambda item: item['name'])\n# l: [Chuck Norris, John Cena, Jon Skeet]\n\nl.sort(key=lambda item: item['birthday'])\n# l: [Chuck Norris, Jon Skeet, John Cena]\n\nl.sort(key=lambda item: item['height'])\n# l: [John Cena, Chuck Norris, Jon Skeet]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260020000,
            "id": "a91e978d-7f4b-421e-b1c5-ce0599ade0ae",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260080000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Sort by sub dict :"
                ]
              ]
            },
            "type": "text",
            "version": 17,
            "inline_content": [
              {
                "Text": "Sort by sub dict :"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260079445,
            "id": "207c4325-3746-4638-b18c-713dcd7c0429",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260020000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "import datetime\n\nl = [{'name':'John Cena', 'birthday': datetime.date(1992, 9, 12),'size': {'height': 175, 'weight': 100}},\n {'name': 'Chuck Norris', 'birthday': datetime.date(1990, 8, 28),'size' : {'height': 180, 'weight': 90}},\n {'name': 'Jon Skeet', 'birthday': datetime.date(1991, 7, 6), 'size': {'height': 185, 'weight': 110}}]\n\nl.sort(key=lambda item: item['size']['height'])\n# l: [John Cena, Chuck Norris, Jon Skeet]"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "import datetime\n\nl = [{'name':'John Cena', 'birthday': datetime.date(1992, 9, 12),'size': {'height': 175, 'weight': 100}},\n {'name': 'Chuck Norris', 'birthday': datetime.date(1990, 8, 28),'size' : {'height': 180, 'weight': 90}},\n {'name': 'Jon Skeet', 'birthday': datetime.date(1991, 7, 6), 'size': {'height': 185, 'weight': 110}}]\n\nl.sort(key=lambda item: item['size']['height'])\n# l: [John Cena, Chuck Norris, Jon Skeet]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "cda09479-2faf-4485-87d4-37ecc3788836",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Better way to sort using ",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  "attrgetter",
                  [
                    [
                      "b"
                    ],
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " and ",
                  [
                    [
                      "b"
                    ]
                  ]
                ],
                [
                  "itemgetter",
                  [
                    [
                      "b"
                    ],
                    [
                      "c"
                    ]
                  ]
                ]
              ]
            },
            "type": "text",
            "version": 10,
            "inline_content": [
              {
                "Text": "Better way to sort using ",
                "AttrFlags": 1
              },
              {
                "Text": "attrgetter",
                "AttrFlags": 3
              },
              {
                "Text": " and ",
                "AttrFlags": 1
              },
              {
                "Text": "itemgetter",
                "AttrFlags": 3
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "7d41e076-795c-4245-97c7-b913ec00ca15",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Lists can also be sorted using "
                ],
                [
                  "attrgetter",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " and "
                ],
                [
                  "itemgetter",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " functions from the operator module. These can help improve readability and reusability. Here are some examples,"
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Lists can also be sorted using "
              },
              {
                "Text": "attrgetter",
                "AttrFlags": 2
              },
              {
                "Text": " and "
              },
              {
                "Text": "itemgetter",
                "AttrFlags": 2
              },
              {
                "Text": " functions from the operator module. These can help improve readability and reusability. Here are some examples,"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "2ee7d07a-c827-4c6a-b1f9-86cc794cc11c",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "from operator import itemgetter,attrgetter\n\npeople = [{'name':'chandan','age':20,'salary':2000},\n          {'name':'chetan','age':18,'salary':5000},\n          {'name':'guru','age':30,'salary':3000}]\nby_age = itemgetter('age')\nby_salary = itemgetter('salary')\n\npeople.sort(key=by_age) #in-place sorting by age\npeople.sort(key=by_salary) #in-place sorting by salary"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "from operator import itemgetter,attrgetter\n\npeople = [{'name':'chandan','age':20,'salary':2000},\n          {'name':'chetan','age':18,'salary':5000},\n          {'name':'guru','age':30,'salary':3000}]\nby_age = itemgetter('age')\nby_salary = itemgetter('salary')\n\npeople.sort(key=by_age) #in-place sorting by age\npeople.sort(key=by_salary) #in-place sorting by salary",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "9aa26822-88f0-4320-8e24-3abeb40e653e",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "itemgetter",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " can also be given an index. This is helpful if you want to sort based on indices of a tuple."
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "itemgetter",
                "AttrFlags": 2
              },
              {
                "Text": " can also be given an index. This is helpful if you want to sort based on indices of a tuple."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "e16c948c-f0db-4a6b-b2fb-8f336c1f6f5c",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "list_of_tuples = [(1,2), (3,4), (5,0)]\nlist_of_tuples.sort(key=itemgetter(1))\nprint(list_of_tuples) #[(5, 0), (1, 2), (3, 4)]"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "list_of_tuples = [(1,2), (3,4), (5,0)]\nlist_of_tuples.sort(key=itemgetter(1))\nprint(list_of_tuples) #[(5, 0), (1, 2), (3, 4)]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "402bd334-d722-41fe-bd5b-1ce1794017b0",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Use the "
                ],
                [
                  "attrgetter",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " if you want to sort by attributes of an object,"
                ]
              ]
            },
            "type": "text",
            "version": 4,
            "inline_content": [
              {
                "Text": "Use the "
              },
              {
                "Text": "attrgetter",
                "AttrFlags": 2
              },
              {
                "Text": " if you want to sort by attributes of an object,"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987933,
            "id": "deabe7f8-1f3e-4919-a99c-1b1e4c59237c",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "c454945a-1db9-4888-b888-61f417c38a9e",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "persons = [Person(\"John Cena\", datetime.date(1992, 9, 12), 175),\n           Person(\"Chuck Norris\", datetime.date(1990, 8, 28), 180),\n           Person(\"Jon Skeet\", datetime.date(1991, 7, 6), 185)] #reusing Person class from above example\n\nperson.sort(key=attrgetter('name')) #sort by name\nby_birthday = attrgetter('birthday')\nperson.sort(key=by_birthday) #sort by birthday"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "persons = [Person(\"John Cena\", datetime.date(1992, 9, 12), 175),\n           Person(\"Chuck Norris\", datetime.date(1990, 8, 28), 180),\n           Person(\"Jon Skeet\", datetime.date(1991, 7, 6), 185)] #reusing Person class from above example\n\nperson.sort(key=attrgetter('name')) #sort by name\nby_birthday = attrgetter('birthday')\nperson.sort(key=by_birthday) #sort by birthday",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "sort()",
            "AttrFlags": 2
          },
          {
            "Text": " – sorts the list in numerical and lexicographical order and returns "
          },
          {
            "Text": "None",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "e0229e43-cadb-48ad-b36a-7dda3452f967"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987934,
        "id": "0833b360-8f56-4a9b-9127-4474e51fca08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550260200000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "clear()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " – removes all items from the list"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987934,
            "id": "e0229e43-cadb-48ad-b36a-7dda3452f967",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "0833b360-8f56-4a9b-9127-4474e51fca08",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a.clear()\n# a = []"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a.clear()\n# a = []",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "clear()",
            "AttrFlags": 2
          },
          {
            "Text": " – removes all items from the list"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "c5d369b3-1c0b-4643-9908-b27792156a0e",
          "1ca22cb1-e0cc-41b9-a912-59286dcc6f42"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987934,
        "id": "08ec70e9-95e7-447b-beca-aa1b232b1881",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550260200000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Replication",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " – multiplying an existing list by an integer will produce a larger list consisting of that many copies of the original. This can be useful for example for list initialization:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 6,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987934,
            "id": "c5d369b3-1c0b-4643-9908-b27792156a0e",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "08ec70e9-95e7-447b-beca-aa1b232b1881",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "b = [\"blah\"] * 3\n# b = [\"blah\", \"blah\", \"blah\"]\nb = [1, 3, 5] * 5\n# [1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5]"
                ]
              ]
            },
            "type": "code",
            "version": 10,
            "code": "b = [\"blah\"] * 3\n# b = [\"blah\", \"blah\", \"blah\"]\nb = [1, 3, 5] * 5\n# [1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260200000,
            "id": "1ca22cb1-e0cc-41b9-a912-59286dcc6f42",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "08ec70e9-95e7-447b-beca-aa1b232b1881",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Take care doing this if your list contains references to objects (eg a list of lists), see [Common Pitfalls - List multiplication and common references][2]."
                ]
              ]
            },
            "type": "text",
            "version": 8,
            "inline_content": [
              {
                "Text": "Take care doing this if your list contains references to objects (eg a list of lists), see [Common Pitfalls - List multiplication and common references][2]."
              }
            ]
          }
        ],
        "inline_content": [
          {
            "Text": "Replication",
            "AttrFlags": 1
          },
          {
            "Text": " – multiplying an existing list by an integer will produce a larger list consisting of that many copies of the original. This can be useful for example for list initialization:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "988361f1-ab1e-4674-a100-151de5173cb9"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987934,
        "id": "466e76e7-7f68-4505-9663-c1c4e7697f47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550260200000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Element deletion",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " – it is possible to delete multiple elements in the list using the "
            ],
            [
              "del",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword and slice notation:"
            ]
          ]
        },
        "type": "numbered_list",
        "version": 3,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987934,
            "id": "988361f1-ab1e-4674-a100-151de5173cb9",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260200000,
            "parent_id": "466e76e7-7f68-4505-9663-c1c4e7697f47",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "a = list(range(10))\ndel a[::2]\n# a = [1, 3, 5, 7, 9]\ndel a[-1]\n# a = [1, 3, 5, 7]\ndel a[:]\n# a = []"
                ]
              ]
            },
            "type": "code",
            "version": 5,
            "code": "a = list(range(10))\ndel a[::2]\n# a = [1, 3, 5, 7, 9]\ndel a[-1]\n# a = [1, 3, 5, 7]\ndel a[:]\n# a = []",
            "code_language": "Python"
          }
        ],
        "inline_content": [
          {
            "Text": "Element deletion",
            "AttrFlags": 1
          },
          {
            "Text": " – it is possible to delete multiple elements in the list using the "
          },
          {
            "Text": "del",
            "AttrFlags": 2
          },
          {
            "Text": " keyword and slice notation:"
          }
        ]
      },
      {
        "alive": true,
        "content": [
          "10ac977b-a299-4726-b68b-386633e9c70a",
          "1fafca6d-d4fb-4fc5-bf13-bb12fcb140c3",
          "a461d3f7-3f3b-496b-abd4-abfb7d2d6733",
          "e5036b1d-a5ad-4eb7-a763-676b69118f08",
          "445b8537-02b1-4ad9-b728-ba7332c0f1f5",
          "e08cf654-60da-402c-8763-9b14961f76d7",
          "d50ad627-26f4-486c-b4c7-c450e443f1ac",
          "5c599d41-a839-4796-9f6a-fd8275788551",
          "73fc8953-b536-4c03-a7d7-fd941110e2d1",
          "e41ce5bb-08fc-4b5b-9cec-2069149c8c89",
          "c259273d-bd0a-48d5-b2e8-71bc9b111dfb",
          "2f5c29f3-bb7c-43c7-9f5c-a3fc70de13ac",
          "9ffd13e2-441e-44dd-a0d1-288ee52fb5f1",
          "aa978f3a-dc1f-48b7-b04f-df4e07242974",
          "1f4e3b8f-528e-4f9a-8cac-1a317068dc00"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550230987935,
        "id": "09fa98ba-5ab0-451f-9653-ce382c015998",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550260440000,
        "parent_id": "3237a474-0483-47cb-9637-51c884946f44",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Copying\n",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "The default assignment \"=\" assigns a reference of the original list to the new name.  That is, the original name and new name are both pointing to the same list object. Changes made through any of them will be reflected in another. This is often not what you intended."
            ]
          ]
        },
        "type": "numbered_list",
        "version": 39,
        "content_resolved": [
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987935,
            "id": "10ac977b-a299-4726-b68b-386633e9c70a",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260440000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "\n    b = a\n    a.append(6)\n    # b: [1, 2, 3, 4, 5, 6]\n"
                ]
              ]
            },
            "type": "code",
            "version": 32,
            "code": "\n    b = a\n    a.append(6)\n    # b: [1, 2, 3, 4, 5, 6]\n",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260260000,
            "id": "1fafca6d-d4fb-4fc5-bf13-bb12fcb140c3",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260320000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "If you want to create a copy of the list you have below options."
                ]
              ]
            },
            "type": "text",
            "version": 9,
            "inline_content": [
              {
                "Text": "If you want to create a copy of the list you have below options."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260320000,
            "id": "a461d3f7-3f3b-496b-abd4-abfb7d2d6733",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260320000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "You can slice it:"
                ]
              ]
            },
            "type": "text",
            "version": 7,
            "inline_content": [
              {
                "Text": "You can slice it:"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260320000,
            "id": "e5036b1d-a5ad-4eb7-a763-676b69118f08",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260320000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "\nnew_list = old_list[:]"
                ]
              ]
            },
            "type": "code",
            "version": 17,
            "code": "\nnew_list = old_list[:]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260385729,
            "id": "445b8537-02b1-4ad9-b728-ba7332c0f1f5",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260380000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "You can use the built in list() function:"
                ]
              ]
            },
            "type": "text",
            "version": 10,
            "inline_content": [
              {
                "Text": "You can use the built in list() function:"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260390230,
            "id": "e08cf654-60da-402c-8763-9b14961f76d7",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260380000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "new_list = list(old_list)"
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "new_list = list(old_list)",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260395128,
            "id": "d50ad627-26f4-486c-b4c7-c450e443f1ac",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260380000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "You can use generic copy.copy():"
                ]
              ]
            },
            "type": "text",
            "version": 10,
            "inline_content": [
              {
                "Text": "You can use generic copy.copy():"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260404945,
            "id": "5c599d41-a839-4796-9f6a-fd8275788551",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260380000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "import copy\n    new_list = copy.copy(old_list) #inserts references to the objects found in the original."
                ]
              ]
            },
            "type": "code",
            "version": 6,
            "code": "import copy\n    new_list = copy.copy(old_list) #inserts references to the objects found in the original.",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260420989,
            "id": "73fc8953-b536-4c03-a7d7-fd941110e2d1",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260380000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "This is a little slower than list() because it has to find out the datatype of old_list first.\nIf the list contains objects and you want to copy them as well, use generic copy.deepcopy():"
                ]
              ]
            },
            "type": "text",
            "version": 5,
            "inline_content": [
              {
                "Text": "This is a little slower than list() because it has to find out the datatype of old_list first.\nIf the list contains objects and you want to copy them as well, use generic copy.deepcopy():"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260429683,
            "id": "e41ce5bb-08fc-4b5b-9cec-2069149c8c89",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260380000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "import copy\nnew_list = copy.deepcopy(old_list) #inserts copies of the objects found in the original."
                ]
              ]
            },
            "type": "code",
            "version": 8,
            "code": "import copy\nnew_list = copy.deepcopy(old_list) #inserts copies of the objects found in the original.",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260438495,
            "id": "c259273d-bd0a-48d5-b2e8-71bc9b111dfb",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260440000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "Obviously the slowest and most memory-needing method, but sometimes unavoidable."
                ]
              ]
            },
            "type": "text",
            "version": 5,
            "inline_content": [
              {
                "Text": "Obviously the slowest and most memory-needing method, but sometimes unavoidable."
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260440000,
            "id": "2f5c29f3-bb7c-43c7-9f5c-a3fc70de13ac",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260440000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "type": "text",
            "version": 4
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987935,
            "id": "9ffd13e2-441e-44dd-a0d1-288ee52fb5f1",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260320000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "title": [
                [
                  "copy()",
                  [
                    [
                      "c"
                    ]
                  ]
                ],
                [
                  " – Returns a shallow copy of the list"
                ]
              ]
            },
            "type": "text",
            "version": 12,
            "inline_content": [
              {
                "Text": "copy()",
                "AttrFlags": 2
              },
              {
                "Text": " – Returns a shallow copy of the list"
              }
            ]
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550230987935,
            "id": "aa978f3a-dc1f-48b7-b04f-df4e07242974",
            "ignore_block_count": true,
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260320000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "properties": {
              "language": [
                [
                  "Python"
                ]
              ],
              "title": [
                [
                  "aa = a.copy()\n# aa = [1, 2, 3, 4, 5]"
                ]
              ]
            },
            "type": "code",
            "version": 11,
            "code": "aa = a.copy()\n# aa = [1, 2, 3, 4, 5]",
            "code_language": "Python"
          },
          {
            "alive": true,
            "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "created_time": 1550260260000,
            "id": "1f4e3b8f-528e-4f9a-8cac-1a317068dc00",
            "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
            "last_edited_time": 1550260320000,
            "parent_id": "09fa98ba-5ab0-451f-9653-ce382c015998",
            "parent_table": "block",
            "type": "text",
            "version": 9
          }
        ],
        "inline_content": [
          {
            "Text": "Copying\n",
            "AttrFlags": 1
          },
          {
            "Text": "The default assignment \"=\" assigns a reference of the original list to the new name.  That is, the original name and new name are both pointing to the same list object. Changes made through any of them will be reflected in another. This is often not what you intended."
          }
        ]
      }
    ],
    "title": "List methods and supported operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}