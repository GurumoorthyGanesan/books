{
  "ID": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
  "Root": {
    "alive": true,
    "content": [
      "3bcb9f71-06ad-4c90-bcbc-4700b557ac45",
      "bad462a3-b89a-48fc-8e60-036f4fb93040",
      "30701bcf-32d7-4b82-91ed-3ebb05b53bad",
      "3ce34021-e841-4a9e-b74d-0af6e7c39658",
      "e539f064-0e10-4d81-a286-319a74f2ec54",
      "6abace4f-2482-40b5-9079-6169784ee5dc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390178171,
    "id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550472840000,
    "parent_id": "e4b799b8-8e9f-453c-8f08-0bfd4dbbd9a3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Overriding Methods in Mixins"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390178165,
        "id": "3bcb9f71-06ad-4c90-bcbc-4700b557ac45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390178165,
        "parent_id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mixins are a sort of class that is used to “mix in” extra properties and methods into a class. This is usually fine because many times the mixin classes don’t override each other’s, or the base class’ methods. But if you do override methods or properties in your mixins this can lead to unexpected results because in Python the class hierarchy is defined right to left."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Mixins are a sort of class that is used to “mix in” extra properties and methods into a class. This is usually fine because many times the mixin classes don’t override each other’s, or the base class’ methods. But if you do override methods or properties in your mixins this can lead to unexpected results because in Python the class hierarchy is defined right to left."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390178170,
        "id": "bad462a3-b89a-48fc-8e60-036f4fb93040",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390178170,
        "parent_id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For instance, take the following classes"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For instance, take the following classes"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390178170,
        "id": "30701bcf-32d7-4b82-91ed-3ebb05b53bad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390178170,
        "parent_id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Mixin1(object):\n    def test(self):\n        print \"Mixin1\"\n\nclass Mixin2(object):\n    def test(self):\n        print \"Mixin2\"\n\nclass BaseClass(object):\n    def test(self):\n        print \"Base\"\n\nclass MyClass(BaseClass, Mixin1, Mixin2):\n    pass"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class Mixin1(object):\n    def test(self):\n        print \"Mixin1\"\n\nclass Mixin2(object):\n    def test(self):\n        print \"Mixin2\"\n\nclass BaseClass(object):\n    def test(self):\n        print \"Base\"\n\nclass MyClass(BaseClass, Mixin1, Mixin2):\n    pass",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390178170,
        "id": "3ce34021-e841-4a9e-b74d-0af6e7c39658",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390178170,
        "parent_id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case the Mixin2 class is the base class, extended by Mixin1 and finally by BaseClass. Thus, if we execute the following code snippet:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case the Mixin2 class is the base class, extended by Mixin1 and finally by BaseClass. Thus, if we execute the following code snippet:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390178170,
        "id": "e539f064-0e10-4d81-a286-319a74f2ec54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390178170,
        "parent_id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e x = MyClass()\n\u003e\u003e\u003e x.test()\nBase"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e x = MyClass()\n\u003e\u003e\u003e x.test()\nBase",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390178171,
        "id": "6abace4f-2482-40b5-9079-6169784ee5dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390178171,
        "parent_id": "fd3a4304-84de-427a-8eb0-dbf25f79c900",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We see the result returned is from the Base class. This can lead to unexpected errors in the logic of your code and needs to be accounted for and kept in mind"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We see the result returned is from the Base class. This can lead to unexpected errors in the logic of your code and needs to be accounted for and kept in mind"
          }
        ]
      }
    ],
    "title": "Overriding Methods in Mixins"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}