{
  "ID": "f3320c09-8c31-4976-bde9-08b8b09b052f",
  "Root": {
    "alive": true,
    "content": [
      "7c748b9e-44b8-457e-bab3-b3e5c34e77ee",
      "aa92abc1-5b4e-494e-9c27-22d37e7b0b41",
      "2190acbe-2250-4400-afea-63fe310dc386",
      "35df3ff4-854c-4c3e-ae39-6b3dd1bcb58c",
      "88036781-e4f2-49e1-9030-7dd1ee525080",
      "c4f1429f-3fc6-4bab-8c66-167e4dd48032",
      "f5f8a12e-bb01-4add-b64c-addbb6e4287b",
      "7df31a05-5761-4e2d-8311-e768077386a6",
      "b8dc360d-32b5-4a9d-acff-d97607b02893",
      "9a3c3c29-0b14-4b69-886d-24081335ab47",
      "ed761601-b4e7-4495-b2c7-239f1b07a8c1",
      "24559f0a-67c2-4dda-9ecc-a83e8eaaf2f6",
      "6e8a5630-2b04-4dd3-b04d-4e0883335252",
      "4f1f86a9-14c5-4149-82de-aff4d8d3a4bf",
      "85d75f40-2b80-4a89-8088-add688ec45f3",
      "84617432-668d-4c84-82d6-965f2ca044a4",
      "10eca81d-ae4f-474e-99b1-fd77e578dbd0",
      "077f3ad4-a754-482c-80bd-469679abd591"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550346325101,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550347140000,
    "parent_id": "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unit tests with pytest"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325096,
        "id": "7c748b9e-44b8-457e-bab3-b3e5c34e77ee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325096,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "installing pytest:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "installing pytest:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325099,
        "id": "aa92abc1-5b4e-494e-9c27-22d37e7b0b41",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Shell"
            ]
          ],
          "title": [
            [
              "pip install pytest"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pip install pytest",
        "code_language": "Shell"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325099,
        "id": "2190acbe-2250-4400-afea-63fe310dc386",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325099,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "getting the tests ready:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "getting the tests ready:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325099,
        "id": "35df3ff4-854c-4c3e-ae39-6b3dd1bcb58c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Shell"
            ]
          ],
          "title": [
            [
              "mkdir tests\ntouch tests/test_docker.py"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "mkdir tests\ntouch tests/test_docker.py",
        "code_language": "Shell"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325099,
        "id": "88036781-e4f2-49e1-9030-7dd1ee525080",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325099,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Functions to test in "
            ],
            [
              "docker_something/helpers.py",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Functions to test in "
          },
          {
            "Text": "docker_something/helpers.py",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325099,
        "id": "c4f1429f-3fc6-4bab-8c66-167e4dd48032",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from subprocess import Popen, PIPE \n# this Popen is monkeypatched with the fixture `all_popens`\n\ndef copy_file_to_docker(src, dest):\n    try:\n        result = Popen(['docker','cp', src, 'something_cont:{}'.format(dest)], stdout=PIPE, stderr=PIPE)\n        err = result.stderr.read()\n        if err:\n            raise Exception(err)\n    except Exception as e:\n        print(e)\n    return result\n\ndef docker_exec_something(something_file_string):\n    fl = Popen([\"docker\", \"exec\", \"-i\", \"something_cont\", \"something\"], stdin=PIPE, stdout=PIPE, stderr=PIPE)\n    fl.stdin.write(something_file_string)\n    fl.stdin.close()\n    err = fl.stderr.read()\n    fl.stderr.close()\n    if err:\n        print(err)\n        exit()\n    result = fl.stdout.read()\n    print(result)"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "from subprocess import Popen, PIPE \n# this Popen is monkeypatched with the fixture `all_popens`\n\ndef copy_file_to_docker(src, dest):\n    try:\n        result = Popen(['docker','cp', src, 'something_cont:{}'.format(dest)], stdout=PIPE, stderr=PIPE)\n        err = result.stderr.read()\n        if err:\n            raise Exception(err)\n    except Exception as e:\n        print(e)\n    return result\n\ndef docker_exec_something(something_file_string):\n    fl = Popen([\"docker\", \"exec\", \"-i\", \"something_cont\", \"something\"], stdin=PIPE, stdout=PIPE, stderr=PIPE)\n    fl.stdin.write(something_file_string)\n    fl.stdin.close()\n    err = fl.stderr.read()\n    fl.stderr.close()\n    if err:\n        print(err)\n        exit()\n    result = fl.stdout.read()\n    print(result)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "f5f8a12e-bb01-4add-b64c-addbb6e4287b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325100,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The test imports "
            ],
            [
              "test_docker.py",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The test imports "
          },
          {
            "Text": "test_docker.py",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "7df31a05-5761-4e2d-8311-e768077386a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import os\nfrom tempfile import NamedTemporaryFile\nimport pytest\nfrom subprocess import Popen, PIPE\n\nfrom docker_something import helpers\ncopy_file_to_docker = helpers.copy_file_to_docker\ndocker_exec_something = helpers.docker_exec_something"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import os\nfrom tempfile import NamedTemporaryFile\nimport pytest\nfrom subprocess import Popen, PIPE\n\nfrom docker_something import helpers\ncopy_file_to_docker = helpers.copy_file_to_docker\ndocker_exec_something = helpers.docker_exec_something",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "b8dc360d-32b5-4a9d-acff-d97607b02893",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325100,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "mocking a file like object in "
            ],
            [
              "test_docker.py",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "mocking a file like object in "
          },
          {
            "Text": "test_docker.py",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "9a3c3c29-0b14-4b69-886d-24081335ab47",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class MockBytes():\n    '''Used to collect bytes\n    '''\n    all_read = []\n    all_write = []\n    all_close = []\n\n    def read(self, *args, **kwargs):\n        # print('read', args, kwargs, dir(self))\n        self.all_read.append((self, args, kwargs))\n\n    def write(self, *args, **kwargs):\n        # print('wrote', args, kwargs)\n        self.all_write.append((self, args, kwargs))\n\n    def close(self, *args, **kwargs):\n        # print('closed', self, args, kwargs)\n        self.all_close.append((self, args, kwargs))\n\n    def get_all_mock_bytes(self):\n        return self.all_read, self.all_write, self.all_close"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class MockBytes():\n    '''Used to collect bytes\n    '''\n    all_read = []\n    all_write = []\n    all_close = []\n\n    def read(self, *args, **kwargs):\n        # print('read', args, kwargs, dir(self))\n        self.all_read.append((self, args, kwargs))\n\n    def write(self, *args, **kwargs):\n        # print('wrote', args, kwargs)\n        self.all_write.append((self, args, kwargs))\n\n    def close(self, *args, **kwargs):\n        # print('closed', self, args, kwargs)\n        self.all_close.append((self, args, kwargs))\n\n    def get_all_mock_bytes(self):\n        return self.all_read, self.all_write, self.all_close",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "ed761601-b4e7-4495-b2c7-239f1b07a8c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325100,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Monkey patching with pytest in "
            ],
            [
              "test_docker.py",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Monkey patching with pytest in "
          },
          {
            "Text": "test_docker.py",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "24559f0a-67c2-4dda-9ecc-a83e8eaaf2f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@pytest.fixture\ndef all_popens(monkeypatch):\n    '''This fixture overrides / mocks the builtin Popen\n        and replaces stdin, stdout, stderr with a MockBytes object\n\n        note: monkeypatch is magically imported\n    '''\n    all_popens = []\n    \n    class MockPopen(object):\n        def __init__(self, args, stdout=None, stdin=None, stderr=None):\n            all_popens.append(self)\n            self.args = args\n            self.byte_collection = MockBytes()\n            self.stdin = self.byte_collection\n            self.stdout = self.byte_collection\n            self.stderr = self.byte_collection\n            pass\n    monkeypatch.setattr(helpers, 'Popen', MockPopen)\n\n    return all_popens"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@pytest.fixture\ndef all_popens(monkeypatch):\n    '''This fixture overrides / mocks the builtin Popen\n        and replaces stdin, stdout, stderr with a MockBytes object\n\n        note: monkeypatch is magically imported\n    '''\n    all_popens = []\n    \n    class MockPopen(object):\n        def __init__(self, args, stdout=None, stdin=None, stderr=None):\n            all_popens.append(self)\n            self.args = args\n            self.byte_collection = MockBytes()\n            self.stdin = self.byte_collection\n            self.stdout = self.byte_collection\n            self.stderr = self.byte_collection\n            pass\n    monkeypatch.setattr(helpers, 'Popen', MockPopen)\n\n    return all_popens",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "6e8a5630-2b04-4dd3-b04d-4e0883335252",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325100,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example tests, must start with the prefix "
            ],
            [
              "test_",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the "
            ],
            [
              "test_docker.py",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " file:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example tests, must start with the prefix "
          },
          {
            "Text": "test_",
            "AttrFlags": 2
          },
          {
            "Text": " in the "
          },
          {
            "Text": "test_docker.py",
            "AttrFlags": 2
          },
          {
            "Text": " file:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325100,
        "id": "4f1f86a9-14c5-4149-82de-aff4d8d3a4bf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347080000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "def test_docker_install():\n    p = Popen(['which', 'docker'], stdout=PIPE, stderr=PIPE)\n    result = p.stdout.read()\n    assert 'bin/docker' in result\n\ndef test_copy_file_to_docker(all_popens):    \n    result = copy_file_to_docker('asdf', 'asdf')\n    collected_popen = all_popens.pop()\n    mock_read, mock_write, mock_close = collected_popen.byte_collection.get_all_mock_bytes()\n    assert mock_read\n    assert result.args == ['docker', 'cp', 'asdf', 'something_cont:asdf']\n\ndef test_docker_exec_something(all_popens):\n    \n    docker_exec_something(something_file_string)\n\n    collected_popen = all_popens.pop()\n    mock_read, mock_write, mock_close = collected_popen.byte_collection.get_all_mock_bytes()\n    assert len(mock_read) == 3\n    something_template_stdin = mock_write[0][1][0]\n    these = [os.environ['USER'], os.environ['password_prod'], 'table_name_here', 'test_vdm', 'col_a', 'col_b', '/tmp/test.tsv']\n    assert all([x in something_template_stdin for x in these])"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "def test_docker_install():\n    p = Popen(['which', 'docker'], stdout=PIPE, stderr=PIPE)\n    result = p.stdout.read()\n    assert 'bin/docker' in result\n\ndef test_copy_file_to_docker(all_popens):    \n    result = copy_file_to_docker('asdf', 'asdf')\n    collected_popen = all_popens.pop()\n    mock_read, mock_write, mock_close = collected_popen.byte_collection.get_all_mock_bytes()\n    assert mock_read\n    assert result.args == ['docker', 'cp', 'asdf', 'something_cont:asdf']\n\ndef test_docker_exec_something(all_popens):\n    \n    docker_exec_something(something_file_string)\n\n    collected_popen = all_popens.pop()\n    mock_read, mock_write, mock_close = collected_popen.byte_collection.get_all_mock_bytes()\n    assert len(mock_read) == 3\n    something_template_stdin = mock_write[0][1][0]\n    these = [os.environ['USER'], os.environ['password_prod'], 'table_name_here', 'test_vdm', 'col_a', 'col_b', '/tmp/test.tsv']\n    assert all([x in something_template_stdin for x in these])",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325101,
        "id": "85d75f40-2b80-4a89-8088-add688ec45f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325101,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "running the tests one at a time:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "running the tests one at a time:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325101,
        "id": "84617432-668d-4c84-82d6-965f2ca044a4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347140000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Shell"
            ]
          ],
          "title": [
            [
              "py.test -k test_docker_install tests\npy.test -k test_copy_file_to_docker tests\npy.test -k test_docker_exec_something tests"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "py.test -k test_docker_install tests\npy.test -k test_copy_file_to_docker tests\npy.test -k test_docker_exec_something tests",
        "code_language": "Shell"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325101,
        "id": "10eca81d-ae4f-474e-99b1-fd77e578dbd0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550346325101,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "running all the tests in the "
            ],
            [
              "tests",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " folder:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "running all the tests in the "
          },
          {
            "Text": "tests",
            "AttrFlags": 2
          },
          {
            "Text": " folder:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550346325101,
        "id": "077f3ad4-a754-482c-80bd-469679abd591",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347140000,
        "parent_id": "f3320c09-8c31-4976-bde9-08b8b09b052f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Shell"
            ]
          ],
          "title": [
            [
              "py.test -k test_ tests"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "py.test -k test_ tests",
        "code_language": "Shell"
      }
    ],
    "title": "Unit tests with pytest",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}