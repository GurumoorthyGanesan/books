{
  "ID": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
  "Root": {
    "alive": true,
    "content": [
      "1b648619-4c42-489d-a2b8-9517b83fca45",
      "0fab1e4a-9bbf-4871-a2f1-815a9eef5d2c",
      "1ca1fe40-3a1a-4e8a-8999-a839c0621769",
      "6ca2980d-ed3f-43f2-aa4e-21ab4a62f9c4",
      "6d8f7b1b-fd48-4dc5-908b-027ec714494c",
      "db59e200-ed68-464c-bd1c-250a43ef732d",
      "9595b674-5312-4581-ac1e-493fa092c56b",
      "f63e332a-e83e-42fb-8c74-0b5a5a1ca6bc",
      "52d4f59d-069f-42a9-8b95-dbc4b160ef6d",
      "2e5eabb5-78f7-4b4a-890b-07cf7c27ed28",
      "262da7b0-6cbf-45fe-af07-95a39c6f9c15",
      "f26f6055-7aaf-4c24-bb71-4592c05a9935",
      "31f28194-5480-4d45-8bea-8f25fd3a960f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550308644796,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550310060000,
    "parent_id": "b9edb898-2ed3-4d8d-b860-4fea918682e0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Magic methods and exponentiation builtin math and cmath"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644792,
        "id": "1b648619-4c42-489d-a2b8-9517b83fca45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644792,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Supposing you have a class that stores purely integer values:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Supposing you have a class that stores purely integer values:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644794,
        "id": "0fab1e4a-9bbf-4871-a2f1-815a9eef5d2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Integer(object):\n    def __init__(self, value):\n        self.value = int(value) # Cast to an integer\n        \n    def __repr__(self):\n        return '{cls}({val})'.format(cls=self.__class__.__name__,\n                                     val=self.value)\n    \n    def __pow__(self, other, modulo=None):\n        if modulo is None:\n            print('Using __pow__')\n            return self.__class__(self.value ** other)\n        else:\n            print('Using __pow__ with modulo')\n            return self.__class__(pow(self.value, other, modulo))\n    \n    def __float__(self):\n        print('Using __float__')\n        return float(self.value)\n    \n    def __complex__(self):\n        print('Using __complex__')\n        return complex(self.value, 0)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Integer(object):\n    def __init__(self, value):\n        self.value = int(value) # Cast to an integer\n        \n    def __repr__(self):\n        return '{cls}({val})'.format(cls=self.__class__.__name__,\n                                     val=self.value)\n    \n    def __pow__(self, other, modulo=None):\n        if modulo is None:\n            print('Using __pow__')\n            return self.__class__(self.value ** other)\n        else:\n            print('Using __pow__ with modulo')\n            return self.__class__(pow(self.value, other, modulo))\n    \n    def __float__(self):\n        print('Using __float__')\n        return float(self.value)\n    \n    def __complex__(self):\n        print('Using __complex__')\n        return complex(self.value, 0)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644795,
        "id": "1ca1fe40-3a1a-4e8a-8999-a839c0621769",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644795,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using the builtin "
            ],
            [
              "pow",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function or "
            ],
            [
              "**",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator always calls "
            ],
            [
              "__pow__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using the builtin "
          },
          {
            "Text": "pow",
            "AttrFlags": 2
          },
          {
            "Text": " function or "
          },
          {
            "Text": "**",
            "AttrFlags": 2
          },
          {
            "Text": " operator always calls "
          },
          {
            "Text": "__pow__",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644795,
        "id": "6ca2980d-ed3f-43f2-aa4e-21ab4a62f9c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "Integer(2) ** 2                 # Integer(4)\n# Prints: Using __pow__\nInteger(2) ** 2.5               # Integer(5)\n# Prints: Using __pow__\npow(Integer(2), 0.5)            # Integer(1)\n# Prints: Using __pow__  \noperator.pow(Integer(2), 3)     # Integer(8)\n# Prints: Using __pow__\noperator.__pow__(Integer(3), 3) # Integer(27)\n# Prints: Using __pow__"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Integer(2) ** 2                 # Integer(4)\n# Prints: Using __pow__\nInteger(2) ** 2.5               # Integer(5)\n# Prints: Using __pow__\npow(Integer(2), 0.5)            # Integer(1)\n# Prints: Using __pow__  \noperator.pow(Integer(2), 3)     # Integer(8)\n# Prints: Using __pow__\noperator.__pow__(Integer(3), 3) # Integer(27)\n# Prints: Using __pow__",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644795,
        "id": "6d8f7b1b-fd48-4dc5-908b-027ec714494c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644795,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The second argument of the "
            ],
            [
              "__pow__()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method can only be supplied by using the builtin-"
            ],
            [
              "pow()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or by directly calling the method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The second argument of the "
          },
          {
            "Text": "__pow__()",
            "AttrFlags": 2
          },
          {
            "Text": " method can only be supplied by using the builtin-"
          },
          {
            "Text": "pow()",
            "AttrFlags": 2
          },
          {
            "Text": " or by directly calling the method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644795,
        "id": "db59e200-ed68-464c-bd1c-250a43ef732d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "pow(Integer(2), 3, 4)           # Integer(0)\n# Prints: Using __pow__ with modulo\nInteger(2).__pow__(3, 4)        # Integer(0) \n# Prints: Using __pow__ with modulo"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "pow(Integer(2), 3, 4)           # Integer(0)\n# Prints: Using __pow__ with modulo\nInteger(2).__pow__(3, 4)        # Integer(0) \n# Prints: Using __pow__ with modulo",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644795,
        "id": "9595b674-5312-4581-ac1e-493fa092c56b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644795,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While the "
            ],
            [
              "math",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-functions always convert it to a "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and use the float-computation:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While the "
          },
          {
            "Text": "math",
            "AttrFlags": 2
          },
          {
            "Text": "-functions always convert it to a "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " and use the float-computation:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644795,
        "id": "f63e332a-e83e-42fb-8c74-0b5a5a1ca6bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import math\n\nmath.pow(Integer(2), 0.5) # 1.4142135623730951\n# Prints: Using __float__"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import math\n\nmath.pow(Integer(2), 0.5) # 1.4142135623730951\n# Prints: Using __float__",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644796,
        "id": "52d4f59d-069f-42a9-8b95-dbc4b160ef6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644796,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "cmath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-functions try to convert it to "
            ],
            [
              "complex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but can also fallback to "
            ],
            [
              "float",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if there is no explicit conversion to "
            ],
            [
              "complex",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "cmath",
            "AttrFlags": 2
          },
          {
            "Text": "-functions try to convert it to "
          },
          {
            "Text": "complex",
            "AttrFlags": 2
          },
          {
            "Text": " but can also fallback to "
          },
          {
            "Text": "float",
            "AttrFlags": 2
          },
          {
            "Text": " if there is no explicit conversion to "
          },
          {
            "Text": "complex",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644796,
        "id": "2e5eabb5-78f7-4b4a-890b-07cf7c27ed28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import cmath\n\ncmath.exp(Integer(2))     # (7.38905609893065+0j)\n# Prints: Using __complex__\n\ndel Integer.__complex__   # Deleting __complex__ method - instances cannot be cast to complex\n\ncmath.exp(Integer(2))     # (7.38905609893065+0j)\n# Prints: Using __float__"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import cmath\n\ncmath.exp(Integer(2))     # (7.38905609893065+0j)\n# Prints: Using __complex__\n\ndel Integer.__complex__   # Deleting __complex__ method - instances cannot be cast to complex\n\ncmath.exp(Integer(2))     # (7.38905609893065+0j)\n# Prints: Using __float__",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644796,
        "id": "262da7b0-6cbf-45fe-af07-95a39c6f9c15",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644796,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Neither "
            ],
            [
              "math",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " nor "
            ],
            [
              "cmath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will work if also the "
            ],
            [
              "__float__()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-method is missing:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Neither "
          },
          {
            "Text": "math",
            "AttrFlags": 2
          },
          {
            "Text": " nor "
          },
          {
            "Text": "cmath",
            "AttrFlags": 2
          },
          {
            "Text": " will work if also the "
          },
          {
            "Text": "__float__()",
            "AttrFlags": 2
          },
          {
            "Text": "-method is missing:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644796,
        "id": "f26f6055-7aaf-4c24-bb71-4592c05a9935",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310060000,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "del Integer.__float__  # Deleting __complex__ method\n\nmath.sqrt(Integer(2))  # also cmath.exp(Integer(2))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "del Integer.__float__  # Deleting __complex__ method\n\nmath.sqrt(Integer(2))  # also cmath.exp(Integer(2))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550308644796,
        "id": "31f28194-5480-4d45-8bea-8f25fd3a960f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550308644796,
        "parent_id": "a167942f-3679-456c-bf36-1c9b9d7c3a95",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "TypeError: a float is required"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "TypeError: a float is required"
          }
        ]
      }
    ],
    "title": "Magic methods and exponentiation builtin math and cmath",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}