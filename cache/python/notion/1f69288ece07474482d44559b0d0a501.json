{
  "ID": "1f69288e-ce07-4744-82d4-4559b0d0a501",
  "Root": {
    "alive": true,
    "content": [
      "ae059238-95be-4507-a990-3d40f973c501",
      "72b561a3-4467-40ef-aa4b-9243487d06ff",
      "633282c6-a14d-44ad-a199-d3d77cd20b74",
      "98b3d2e8-0161-4584-9639-cb4cb028ac60",
      "20178b11-e483-43a8-9a54-9bd8cb0dc390",
      "291c50a6-a1c1-4079-bd74-0a2f01432ebd",
      "cc7890e8-7242-4720-961a-4f2fde615f66",
      "38e9dd6e-4827-43dd-bc58-a827de1e40cb",
      "c9d2c06b-d616-4fe4-b47e-79068c104c9a",
      "43bb5d61-4c3e-4873-9071-d49ea2ab1ac8",
      "3031d16d-00f8-478a-ab71-d500fcb28b53",
      "2c6e5671-4407-418e-91b5-800ec5a5127d",
      "0b930fb1-dbd6-4286-a181-aa596647db96"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550390794970,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550473440000,
    "parent_id": "9b4abcde-038e-4074-917e-69a9e7d12d68",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Why / How to use ABCMeta and abstractmethod"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794966,
        "id": "ae059238-95be-4507-a990-3d40f973c501",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794966,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract base classes (ABCs) enforce what derived classes implement particular methods from the base class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract base classes (ABCs) enforce what derived classes implement particular methods from the base class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794968,
        "id": "72b561a3-4467-40ef-aa4b-9243487d06ff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794968,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To understand how this works and why we should use it, let’s take a look at an example that Van Rossum would enjoy. Let’s say we have a Base class “MontyPython” with two methods (joke \u0026 punchline) that must be implemented by all derived classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To understand how this works and why we should use it, let’s take a look at an example that Van Rossum would enjoy. Let’s say we have a Base class “MontyPython” with two methods (joke \u0026 punchline) that must be implemented by all derived classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794969,
        "id": "633282c6-a14d-44ad-a199-d3d77cd20b74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794969,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MontyPython:\n    def joke(self):\n        raise NotImplementedError()\n\n    def punchline(self):\n        raise NotImplementedError()\n\nclass ArgumentClinic(MontyPython):\n    def joke(self):\n        return \"Hahahahahah\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MontyPython:\n    def joke(self):\n        raise NotImplementedError()\n\n    def punchline(self):\n        raise NotImplementedError()\n\nclass ArgumentClinic(MontyPython):\n    def joke(self):\n        return \"Hahahahahah\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794969,
        "id": "98b3d2e8-0161-4584-9639-cb4cb028ac60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794969,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we instantiate an object and call it’s two methods, we’ll get an error (as expected) with the "
            ],
            [
              "punchline()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we instantiate an object and call it’s two methods, we’ll get an error (as expected) with the "
          },
          {
            "Text": "punchline()",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794969,
        "id": "20178b11-e483-43a8-9a54-9bd8cb0dc390",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794969,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e sketch = ArgumentClinic() \n\u003e\u003e\u003e sketch.punchline() \nNotImplementedError"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e sketch = ArgumentClinic() \n\u003e\u003e\u003e sketch.punchline() \nNotImplementedError",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794969,
        "id": "291c50a6-a1c1-4079-bd74-0a2f01432ebd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794969,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, this still allows us to instantiate an object of the ArgumentClinic class without getting an error. In fact we don’t get an error until we look for the punchline()."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, this still allows us to instantiate an object of the ArgumentClinic class without getting an error. In fact we don’t get an error until we look for the punchline()."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794969,
        "id": "cc7890e8-7242-4720-961a-4f2fde615f66",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794969,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is avoided by using the Abstract Base Class (ABC) module. Let’s see how this works with the same example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is avoided by using the Abstract Base Class (ABC) module. Let’s see how this works with the same example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794969,
        "id": "38e9dd6e-4827-43dd-bc58-a827de1e40cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794969,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "from abc import ABCMeta, abstractmethod\n\nclass MontyPython(metaclass=ABCMeta):\n    @abstractmethod\n    def joke(self):\n        pass\n\n@abstractmethod\ndef punchline(self):\n    pass\n\nclass ArgumentClinic(MontyPython):\n    def joke(self):\n        return \"Hahahahahah\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "from abc import ABCMeta, abstractmethod\n\nclass MontyPython(metaclass=ABCMeta):\n    @abstractmethod\n    def joke(self):\n        pass\n\n@abstractmethod\ndef punchline(self):\n    pass\n\nclass ArgumentClinic(MontyPython):\n    def joke(self):\n        return \"Hahahahahah\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794970,
        "id": "c9d2c06b-d616-4fe4-b47e-79068c104c9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794970,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This time when we try to instantiate an object from the incomplete class, we immediately get a TypeError!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This time when we try to instantiate an object from the incomplete class, we immediately get a TypeError!"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794970,
        "id": "43bb5d61-4c3e-4873-9071-d49ea2ab1ac8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794970,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e c = ArgumentClinic()\nTypeError:\n\"Can't instantiate abstract class ArgumentClinic with abstract methods punchline\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e c = ArgumentClinic()\nTypeError:\n\"Can't instantiate abstract class ArgumentClinic with abstract methods punchline\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794970,
        "id": "3031d16d-00f8-478a-ab71-d500fcb28b53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794970,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this case, it’s easy to complete the class to avoid any TypeErrors:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this case, it’s easy to complete the class to avoid any TypeErrors:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794970,
        "id": "2c6e5671-4407-418e-91b5-800ec5a5127d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794970,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class ArgumentClinic(MontyPython):\n    def joke(self):\n        return \"Hahahahahah\"\n\n    def punchline(self):\n        return \"Send in the constable!\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class ArgumentClinic(MontyPython):\n    def joke(self):\n        return \"Hahahahahah\"\n\n    def punchline(self):\n        return \"Send in the constable!\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550390794970,
        "id": "0b930fb1-dbd6-4286-a181-aa596647db96",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550390794970,
        "parent_id": "1f69288e-ce07-4744-82d4-4559b0d0a501",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This time when you instantiate an object it works!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This time when you instantiate an object it works!"
          }
        ]
      }
    ],
    "title": "Why / How to use ABCMeta and abstractmethod",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}