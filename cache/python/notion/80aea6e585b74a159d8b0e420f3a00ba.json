{
  "ID": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
  "Root": {
    "alive": true,
    "content": [
      "d8a65da6-90ab-465c-b53c-d1fa569e4faf",
      "667052fa-a625-48b7-adf3-bfdbd6871047",
      "0d613645-f380-48fd-bb60-639ce5fa3aca",
      "63a54e47-7d79-472f-8acd-5a06c60c7190",
      "00e57837-954b-4e63-9a92-3f50a90d5de7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550301005735,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550301240000,
    "parent_id": "19bec823-bee1-4db8-aae7-3c94b3289eb2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Comparing Objects"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301005731,
        "id": "d8a65da6-90ab-465c-b53c-d1fa569e4faf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301005731,
        "parent_id": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In order to compare the equality of custom classes, you can override "
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by defining "
            ],
            [
              "__eq__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "__ne__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods. You can also override "
            ],
            [
              "__lt__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "\\\u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "__le__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "\u003c=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), "
            ],
            [
              "__gt__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and "
            ],
            [
              "__ge__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " ("
            ],
            [
              "\\\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). Note that you only need to override two comparison methods, and Python can handle the rest ("
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the same as "
            ],
            [
              "not \u003c",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "not \u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", etc.)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In order to compare the equality of custom classes, you can override "
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": " by defining "
          },
          {
            "Text": "__eq__",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "__ne__",
            "AttrFlags": 2
          },
          {
            "Text": " methods. You can also override "
          },
          {
            "Text": "__lt__",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "\\\u003c",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "__le__",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "\u003c=",
            "AttrFlags": 2
          },
          {
            "Text": "), "
          },
          {
            "Text": "__gt__",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "), and "
          },
          {
            "Text": "__ge__",
            "AttrFlags": 2
          },
          {
            "Text": " ("
          },
          {
            "Text": "\\\u003e",
            "AttrFlags": 2
          },
          {
            "Text": "). Note that you only need to override two comparison methods, and Python can handle the rest ("
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " is the same as "
          },
          {
            "Text": "not \u003c",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "not \u003e",
            "AttrFlags": 2
          },
          {
            "Text": ", etc.)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301005734,
        "id": "667052fa-a625-48b7-adf3-bfdbd6871047",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301240000,
        "parent_id": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Foo(object):\n    def __init__(self, item):\n        self.my_item = item\n    def __eq__(self, other):\n        return self.my_item == other.my_item\n    \na = Foo(5)\nb = Foo(5)\na == b     # True\na != b     # False\na is b     # False"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Foo(object):\n    def __init__(self, item):\n        self.my_item = item\n    def __eq__(self, other):\n        return self.my_item == other.my_item\n    \na = Foo(5)\nb = Foo(5)\na == b     # True\na != b     # False\na is b     # False",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301005734,
        "id": "0d613645-f380-48fd-bb60-639ce5fa3aca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301005734,
        "parent_id": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that this simple comparison assumes that "
            ],
            [
              "other",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (the object being compared to) is the same object type. Comparing to another type will throw an error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that this simple comparison assumes that "
          },
          {
            "Text": "other",
            "AttrFlags": 2
          },
          {
            "Text": " (the object being compared to) is the same object type. Comparing to another type will throw an error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301005734,
        "id": "63a54e47-7d79-472f-8acd-5a06c60c7190",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301240000,
        "parent_id": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Bar(object):\n    def __init__(self, item):\n        self.other_item = item\n    def __eq__(self, other):\n        return self.other_item == other.other_item\n    def __ne__(self, other):\n        return self.other_item != other.other_item\n    \nc = Bar(5)\na == c    # throws AttributeError: 'Foo' object has no attribute 'other_item'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Bar(object):\n    def __init__(self, item):\n        self.other_item = item\n    def __eq__(self, other):\n        return self.other_item == other.other_item\n    def __ne__(self, other):\n        return self.other_item != other.other_item\n    \nc = Bar(5)\na == c    # throws AttributeError: 'Foo' object has no attribute 'other_item'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550301005734,
        "id": "00e57837-954b-4e63-9a92-3f50a90d5de7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550301005734,
        "parent_id": "80aea6e5-85b7-4a15-9d8b-0e420f3a00ba",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Checking "
            ],
            [
              "isinstance()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or similar will help prevent this (if desired)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Checking "
          },
          {
            "Text": "isinstance()",
            "AttrFlags": 2
          },
          {
            "Text": " or similar will help prevent this (if desired)."
          }
        ]
      }
    ],
    "title": "Comparing Objects",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}