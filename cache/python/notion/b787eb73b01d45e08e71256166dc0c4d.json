{
  "ID": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
  "Root": {
    "alive": true,
    "content": [
      "46daef73-9c74-4041-8a66-8d1f5b47ca23",
      "83533cdc-59aa-49d7-9aac-75974719cfba",
      "9d3abb94-4764-4405-a253-6c1e2a2daae9",
      "3fa15a05-73c8-4920-a39c-e796ec049ec8",
      "020f181b-9859-490f-a98f-5749ea09296e",
      "5a108201-57e8-49dd-9015-9d3ed6c6477d",
      "7d327172-49c7-4d75-84e3-9dde21bc9773",
      "6aad7fb2-1448-4f31-a88b-86618d56c64b",
      "f9cb07d8-a937-46eb-aef3-00b2ccfcd4d0",
      "bec87aab-73ac-4853-a0f9-72463ee71673"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550350071154,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550350200000,
    "parent_id": "2f958caa-d35e-4318-8653-1bc5b9dd8d29",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Writing your own contextmanager using generator syntax"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071151,
        "id": "46daef73-9c74-4041-8a66-8d1f5b47ca23",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071151,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is also possible to write a context manager using generator syntax thanks to the "
            ],
            [
              "contextlib.contextmanager",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"
                ]
              ]
            ],
            [
              " decorator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is also possible to write a context manager using generator syntax thanks to the "
          },
          {
            "Text": "contextlib.contextmanager",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"
          },
          {
            "Text": " decorator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071153,
        "id": "83533cdc-59aa-49d7-9aac-75974719cfba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350200000,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import contextlib\n\n@contextlib.contextmanager\ndef context_manager(num):\n    print('Enter')\n    yield num + 1\n    print('Exit')\n\nwith context_manager(2) as cm:\n    # the following instructions are run when the 'yield' point of the context\n    # manager is reached.\n    # 'cm' will have the value that was yielded\n    print('Right in the middle with cm = {}'.format(cm))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import contextlib\n\n@contextlib.contextmanager\ndef context_manager(num):\n    print('Enter')\n    yield num + 1\n    print('Exit')\n\nwith context_manager(2) as cm:\n    # the following instructions are run when the 'yield' point of the context\n    # manager is reached.\n    # 'cm' will have the value that was yielded\n    print('Right in the middle with cm = {}'.format(cm))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071153,
        "id": "9d3abb94-4764-4405-a253-6c1e2a2daae9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071153,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "produces:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "produces:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071153,
        "id": "3fa15a05-73c8-4920-a39c-e796ec049ec8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071153,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Enter\nRight in the middle with cm = 3\nExit"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Enter\nRight in the middle with cm = 3\nExit",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071153,
        "id": "020f181b-9859-490f-a98f-5749ea09296e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071153,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The decorator simplifies the task of writing a context manager by converting a generator into one. Everything before the yield expression becomes the "
            ],
            [
              "__enter__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method, the value yielded becomes the value returned by the generator (which can be bound to a variable in the with statement), and everything after the yield expression becomes the "
            ],
            [
              "__exit__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The decorator simplifies the task of writing a context manager by converting a generator into one. Everything before the yield expression becomes the "
          },
          {
            "Text": "__enter__",
            "AttrFlags": 2
          },
          {
            "Text": " method, the value yielded becomes the value returned by the generator (which can be bound to a variable in the with statement), and everything after the yield expression becomes the "
          },
          {
            "Text": "__exit__",
            "AttrFlags": 2
          },
          {
            "Text": " method."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071153,
        "id": "5a108201-57e8-49dd-9015-9d3ed6c6477d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071153,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If an exception needs to be handled by the context manager, a "
            ],
            [
              "try..except..finally",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-block can be written in the generator and any exception raised in the "
            ],
            [
              "with",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-block will be handled by this exception block."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If an exception needs to be handled by the context manager, a "
          },
          {
            "Text": "try..except..finally",
            "AttrFlags": 2
          },
          {
            "Text": "-block can be written in the generator and any exception raised in the "
          },
          {
            "Text": "with",
            "AttrFlags": 2
          },
          {
            "Text": "-block will be handled by this exception block."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071153,
        "id": "7d327172-49c7-4d75-84e3-9dde21bc9773",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350200000,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@contextlib.contextmanager\ndef error_handling_context_manager(num):\n    print(\"Enter\")\n    try:\n        yield num + 1\n    except ZeroDivisionError:\n        print(\"Caught error\")\n    finally:\n        print(\"Cleaning up\")\n    print(\"Exit\")\n\nwith error_handling_context_manager(-1) as cm:\n    print(\"Dividing by cm = {}\".format(cm))\n    print(2 / cm)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@contextlib.contextmanager\ndef error_handling_context_manager(num):\n    print(\"Enter\")\n    try:\n        yield num + 1\n    except ZeroDivisionError:\n        print(\"Caught error\")\n    finally:\n        print(\"Cleaning up\")\n    print(\"Exit\")\n\nwith error_handling_context_manager(-1) as cm:\n    print(\"Dividing by cm = {}\".format(cm))\n    print(2 / cm)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071154,
        "id": "6aad7fb2-1448-4f31-a88b-86618d56c64b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071154,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This produces:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This produces:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350071154,
        "id": "f9cb07d8-a937-46eb-aef3-00b2ccfcd4d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350071154,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Enter\nDividing by cm = 0\nCaught error\nCleaning up\nExit"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Enter\nDividing by cm = 0\nCaught error\nCleaning up\nExit",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350200000,
        "id": "bec87aab-73ac-4853-a0f9-72463ee71673",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350200000,
        "parent_id": "b787eb73-b01d-45e0-8e71-256166dc0c4d",
        "parent_table": "block",
        "type": "text",
        "version": 3
      }
    ],
    "title": "Writing your own contextmanager using generator syntax",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}