{
  "ID": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
  "Root": {
    "alive": true,
    "content": [
      "20c035b7-9cd5-4303-8785-4770822343b4",
      "d3374f94-65f5-4c85-97b8-3773aadd2828",
      "1c5be320-5287-40fc-a30c-df2ef6aa5e9a",
      "74910f98-f529-4f3d-abcf-fef17e855d29",
      "1587d316-be32-4c52-bc0a-10bca69b2276",
      "7582ff14-364d-42ce-991d-d8782104074d",
      "1f10e651-8e77-40f3-9405-7645e74cfcb6",
      "a03118f4-9d6e-4fde-b379-441539aae139",
      "74f8cea9-0850-4a1c-9fa9-e15a84d89e80",
      "81d74e81-e163-4817-9a4c-af7586ffece6",
      "7080c704-c283-4475-acbc-d5366c0b7d52",
      "477697a5-fa89-49b1-9349-89a7f500049a",
      "3ab3c8b2-385d-4457-b05c-7f94eb119de7",
      "6a4279a3-df24-4960-a19e-5b1a437fe9da",
      "2496bf1c-5342-47df-b57c-83331f000878",
      "41cf52d3-7cb0-47e9-bda9-388df260b557",
      "af52e63f-05f9-4c32-affd-6cda315ab8f8",
      "ef069b56-aac9-45ab-a5d6-b772186bd378",
      "c3d718d2-b46b-4d54-9924-3bf9a171bd43",
      "d0fe2bfb-edb0-4ab6-957a-827fb3b9167c",
      "58b03854-d193-4cc5-a39f-f7b2a63f6b54",
      "d81f5691-9aeb-4c10-b4a2-f6a9f5845e3f",
      "1c3f8d1c-236d-469f-9342-3cf7d2bfdb28",
      "2afba63a-44e2-4af1-8389-0041503aa3e1",
      "86ad7e21-a5ce-4dca-8206-845c0ef0563a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550389955306,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550470620000,
    "parent_id": "4bd133ec-d8bb-49c4-b2af-77f12d05a275",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Working around the Global Interpreter Lock GIL"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955300,
        "id": "20c035b7-9cd5-4303-8785-4770822343b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955300,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remarks"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remarks"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955303,
        "id": "d3374f94-65f5-4c85-97b8-3773aadd2828",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955303,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Why is there a GIL?"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Why is there a GIL?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955303,
        "id": "1c5be320-5287-40fc-a30c-df2ef6aa5e9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955303,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The GIL has been around in CPython since the inception of Python threads, in 1992. It’s designed to ensure thread safety of running python code. Python interpreters written with a GIL prevent multiple native threads from executing Python bytecodes at once. This makes it easy for plugins to ensure that their code is thread-safe: simply lock the GIL, and only your active thread is able to run, so your code is automatically thread-safe."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The GIL has been around in CPython since the inception of Python threads, in 1992. It’s designed to ensure thread safety of running python code. Python interpreters written with a GIL prevent multiple native threads from executing Python bytecodes at once. This makes it easy for plugins to ensure that their code is thread-safe: simply lock the GIL, and only your active thread is able to run, so your code is automatically thread-safe."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955303,
        "id": "74910f98-f529-4f3d-abcf-fef17e855d29",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955303,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Short version: the GIL ensures that no matter how many processors and threads you have, only one thread of a python interpreter will run at one time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Short version: the GIL ensures that no matter how many processors and threads you have, only one thread of a python interpreter will run at one time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955303,
        "id": "1587d316-be32-4c52-bc0a-10bca69b2276",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955303,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This has a lot of ease-of-use benefits, but also has a lot of negative benefits as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This has a lot of ease-of-use benefits, but also has a lot of negative benefits as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955303,
        "id": "7582ff14-364d-42ce-991d-d8782104074d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955303,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that a GIL is not a requirment of the Python language. Consequently, you can’t access the GIL directly from standard python code. Not all implementations of Python use a GIL."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that a GIL is not a requirment of the Python language. Consequently, you can’t access the GIL directly from standard python code. Not all implementations of Python use a GIL."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955303,
        "id": "1f10e651-8e77-40f3-9405-7645e74cfcb6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955303,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interpreters that have a GIL: CPython, PyPy, Cython (but you can disable the GIL with "
            ],
            [
              "nogil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interpreters that have a GIL: CPython, PyPy, Cython (but you can disable the GIL with "
          },
          {
            "Text": "nogil",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955304,
        "id": "a03118f4-9d6e-4fde-b379-441539aae139",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955304,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Interpreters that do not have a GIL: Jython, IronPython"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Interpreters that do not have a GIL: Jython, IronPython"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955304,
        "id": "74f8cea9-0850-4a1c-9fa9-e15a84d89e80",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955304,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Details on how the GIL operates:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Details on how the GIL operates:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955304,
        "id": "81d74e81-e163-4817-9a4c-af7586ffece6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955304,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a thread is running, it locks the GIL. When a thread wants to run, it requests the GIL, and waits until it is available. In CPython, before version 3.2, the running thread would check after a certain number of python instructions to see if other code wanted the lock (that is, it released the lock and then requested it again). This method tended to cause thread starvation, largely because the thread that released the lock would acquire it again before the waiting threads had a chance to wake up. Since 3.2, threads that want the GIL wait for the lock for some time, and after that time, they set a shared variable that forces the running thread to yield. This can still result in drastically longer execution times, though. See the links below from dabeaz.com (in the references section) for more details."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a thread is running, it locks the GIL. When a thread wants to run, it requests the GIL, and waits until it is available. In CPython, before version 3.2, the running thread would check after a certain number of python instructions to see if other code wanted the lock (that is, it released the lock and then requested it again). This method tended to cause thread starvation, largely because the thread that released the lock would acquire it again before the waiting threads had a chance to wake up. Since 3.2, threads that want the GIL wait for the lock for some time, and after that time, they set a shared variable that forces the running thread to yield. This can still result in drastically longer execution times, though. See the links below from dabeaz.com (in the references section) for more details."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955304,
        "id": "7080c704-c283-4475-acbc-d5366c0b7d52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955304,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CPython automatically releases the GIL when a thread performs an I/O operation. Image processing libraries and numpy number crunching operations release the GIL before doing their processing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "CPython automatically releases the GIL when a thread performs an I/O operation. Image processing libraries and numpy number crunching operations release the GIL before doing their processing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955304,
        "id": "477697a5-fa89-49b1-9349-89a7f500049a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955304,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Benefits of the GIL"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Benefits of the GIL"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955304,
        "id": "3ab3c8b2-385d-4457-b05c-7f94eb119de7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955304,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For interpreters that use the GIL, the GIL is systemic. It is used to preserve the state of the application. Benefits include:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For interpreters that use the GIL, the GIL is systemic. It is used to preserve the state of the application. Benefits include:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "6a4279a3-df24-4960-a19e-5b1a437fe9da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Garbage collection - thread-safe reference counts must be modified while the GIL is locked. In CPython, all of garbarge collection is tied to the GIL. This is a big one; see the python.org wiki article about the GIL (listed in References, below) for details about what must still be functional if one wanted to remove the GIL."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Garbage collection - thread-safe reference counts must be modified while the GIL is locked. In CPython, all of garbarge collection is tied to the GIL. This is a big one; see the python.org wiki article about the GIL (listed in References, below) for details about what must still be functional if one wanted to remove the GIL."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "2496bf1c-5342-47df-b57c-83331f000878",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Ease for programmers dealing with the GIL - locking everything is simplistic, but easy to code to"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Ease for programmers dealing with the GIL - locking everything is simplistic, but easy to code to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "41cf52d3-7cb0-47e9-bda9-388df260b557",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Eases the import of modules from other languages"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Eases the import of modules from other languages"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "af52e63f-05f9-4c32-affd-6cda315ab8f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consequences of the GIL"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consequences of the GIL"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "ef069b56-aac9-45ab-a5d6-b772186bd378",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The GIL only allows one thread to run python code at a time inside the python interpreter. This means that multithreading of processes that run strict python code simply doesn’t work. When using threads against the GIL, you will likely have worse performance with the threads than if you ran in a single thread."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The GIL only allows one thread to run python code at a time inside the python interpreter. This means that multithreading of processes that run strict python code simply doesn’t work. When using threads against the GIL, you will likely have worse performance with the threads than if you ran in a single thread."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "c3d718d2-b46b-4d54-9924-3bf9a171bd43",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "References:"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "References:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "d0fe2bfb-edb0-4ab6-957a-827fb3b9167c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "https://wiki.python.org/moin/GlobalInterpreterLock - quick summary of what it does, fine details on all the benefits"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "https://wiki.python.org/moin/GlobalInterpreterLock - quick summary of what it does, fine details on all the benefits"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955305,
        "id": "58b03854-d193-4cc5-a39f-f7b2a63f6b54",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955305,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://programmers.stackexchange.com/questions/186889/why-was-python-written-with-the-gil - clearly written summary"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://programmers.stackexchange.com/questions/186889/why-was-python-written-with-the-gil - clearly written summary"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955306,
        "id": "d81f5691-9aeb-4c10-b4a2-f6a9f5845e3f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955306,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://www.dabeaz.com/python/UnderstandingGIL.pdf - how the GIL works and why it slows down on multiple cores"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://www.dabeaz.com/python/UnderstandingGIL.pdf - how the GIL works and why it slows down on multiple cores"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955306,
        "id": "1c3f8d1c-236d-469f-9342-3cf7d2bfdb28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955306,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://www.dabeaz.com/GIL/gilvis/index.html - visualization of the data showing how the GIL locks up threads"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://www.dabeaz.com/GIL/gilvis/index.html - visualization of the data showing how the GIL locks up threads"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955306,
        "id": "2afba63a-44e2-4af1-8389-0041503aa3e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955306,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "http://jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/ - simple to understand history of the GIL problem"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "http://jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/ - simple to understand history of the GIL problem"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550389955306,
        "id": "86ad7e21-a5ce-4dca-8206-845c0ef0563a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550389955306,
        "parent_id": "02c6b315-3131-4cd4-abce-aa346ae8a6b4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "https://jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/ - details on ways to work around the GIL’s limitations"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "https://jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/ - details on ways to work around the GIL’s limitations"
          }
        ]
      }
    ],
    "title": "Working around the Global Interpreter Lock GIL",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}