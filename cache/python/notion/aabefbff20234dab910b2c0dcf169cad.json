{
  "ID": "aabefbff-2023-4dab-910b-2c0dcf169cad",
  "Root": {
    "alive": true,
    "content": [
      "59e9f3f8-c902-451a-8b86-5bb5e7ab5dad",
      "fb85ad88-9aed-4b18-861a-12adee8e8e6d",
      "b6c3d1a6-d2f3-4849-a0e1-ce638928c72b",
      "16763d1c-7a3d-4247-8473-b64b30f2d937",
      "bd344d30-3a52-47a0-bf4c-1e0448a5a103",
      "de251838-78cb-44ec-891f-c4681065d62d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550310910438,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550311200000,
    "parent_id": "305111c8-efce-4cf2-b2ae-7b5e31a27b42",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Singleton class"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310910437,
        "id": "59e9f3f8-c902-451a-8b86-5bb5e7ab5dad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310910437,
        "parent_id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A singleton is a pattern that restricts the instantiation of a class to one instance/object. For more info on python singleton design patterns, see "
            ],
            [
              "here",
              [
                [
                  "a",
                  "http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A singleton is a pattern that restricts the instantiation of a class to one instance/object. For more info on python singleton design patterns, see "
          },
          {
            "Text": "here",
            "Link": "http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310910438,
        "id": "fb85ad88-9aed-4b18-861a-12adee8e8e6d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311200000,
        "parent_id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Singleton:\n    def __new__(cls):\n        try:\n            it = cls.__it__\n        except AttributeError:\n            it = cls.__it__ = object.__new__(cls)\n        return it\n\n    def __repr__(self):\n        return '\u003c{}\u003e'.format(self.__class__.__name__.upper())\n\n    def __eq__(self, other):\n         return other is self"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Singleton:\n    def __new__(cls):\n        try:\n            it = cls.__it__\n        except AttributeError:\n            it = cls.__it__ = object.__new__(cls)\n        return it\n\n    def __repr__(self):\n        return '\u003c{}\u003e'.format(self.__class__.__name__.upper())\n\n    def __eq__(self, other):\n         return other is self",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310910438,
        "id": "b6c3d1a6-d2f3-4849-a0e1-ce638928c72b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310910438,
        "parent_id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another method is to decorate your class. Following the example from this "
            ],
            [
              "answer",
              [
                [
                  "a",
                  "http://stackoverflow.com/a/7346105/3462319"
                ]
              ]
            ],
            [
              " create a Singleton class:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another method is to decorate your class. Following the example from this "
          },
          {
            "Text": "answer",
            "Link": "http://stackoverflow.com/a/7346105/3462319"
          },
          {
            "Text": " create a Singleton class:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310910438,
        "id": "16763d1c-7a3d-4247-8473-b64b30f2d937",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311200000,
        "parent_id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Singleton:\n    \"\"\"\n    A non-thread-safe helper class to ease implementing singletons.\n    This should be used as a decorator -- not a metaclass -- to the\n    class that should be a singleton.\n\n    The decorated class can define one `__init__` function that\n    takes only the `self` argument. Other than that, there are\n    no restrictions that apply to the decorated class.\n\n    To get the singleton instance, use the `Instance` method. Trying\n    to use `__call__` will result in a `TypeError` being raised.\n\n    Limitations: The decorated class cannot be inherited from.\n\n    \"\"\"\n\n    def __init__(self, decorated):\n        self._decorated = decorated\n\n    def Instance(self):\n        \"\"\"\n        Returns the singleton instance. Upon its first call, it creates a\n        new instance of the decorated class and calls its `__init__` method.\n        On all subsequent calls, the already created instance is returned.\n\n        \"\"\"\n        try:\n            return self._instance\n        except AttributeError:\n            self._instance = self._decorated()\n            return self._instance\n\n    def __call__(self):\n        raise TypeError('Singletons must be accessed through `Instance()`.')\n\n    def __instancecheck__(self, inst):\n        return isinstance(inst, self._decorated)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Singleton:\n    \"\"\"\n    A non-thread-safe helper class to ease implementing singletons.\n    This should be used as a decorator -- not a metaclass -- to the\n    class that should be a singleton.\n\n    The decorated class can define one `__init__` function that\n    takes only the `self` argument. Other than that, there are\n    no restrictions that apply to the decorated class.\n\n    To get the singleton instance, use the `Instance` method. Trying\n    to use `__call__` will result in a `TypeError` being raised.\n\n    Limitations: The decorated class cannot be inherited from.\n\n    \"\"\"\n\n    def __init__(self, decorated):\n        self._decorated = decorated\n\n    def Instance(self):\n        \"\"\"\n        Returns the singleton instance. Upon its first call, it creates a\n        new instance of the decorated class and calls its `__init__` method.\n        On all subsequent calls, the already created instance is returned.\n\n        \"\"\"\n        try:\n            return self._instance\n        except AttributeError:\n            self._instance = self._decorated()\n            return self._instance\n\n    def __call__(self):\n        raise TypeError('Singletons must be accessed through `Instance()`.')\n\n    def __instancecheck__(self, inst):\n        return isinstance(inst, self._decorated)",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310910438,
        "id": "bd344d30-3a52-47a0-bf4c-1e0448a5a103",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550310910438,
        "parent_id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use you can use the "
            ],
            [
              "Instance",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use you can use the "
          },
          {
            "Text": "Instance",
            "AttrFlags": 2
          },
          {
            "Text": " method"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550310910438,
        "id": "de251838-78cb-44ec-891f-c4681065d62d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550311200000,
        "parent_id": "aabefbff-2023-4dab-910b-2c0dcf169cad",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@Singleton\nclass Single:\n    def __init__(self):\n        self.name=None\n        self.val=0\n    def getName(self):\n        print(self.name)\n\nx=Single.Instance()\ny=Single.Instance()\nx.name='I\\'m single'\nx.getName() # outputs I'm single\ny.getName() # outputs I'm single"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@Singleton\nclass Single:\n    def __init__(self):\n        self.name=None\n        self.val=0\n    def getName(self):\n        print(self.name)\n\nx=Single.Instance()\ny=Single.Instance()\nx.name='I\\'m single'\nx.getName() # outputs I'm single\ny.getName() # outputs I'm single",
        "code_language": "Python"
      }
    ],
    "title": "Singleton class",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}