{
  "ID": "9d509154-6884-4a00-b8ab-1a389ad80607",
  "Root": {
    "alive": true,
    "content": [
      "e073bc6f-65f6-4a62-89c2-a6c47ecf2a57",
      "3afe14ef-b9ee-4e68-9a2f-e17e6315ab6c",
      "f7cae86e-1498-4214-aba8-370b9b6e2e04",
      "0501fb07-476a-4f70-a8f2-51aa32a9fb7f",
      "9cbcaeec-ed75-4ddb-bf66-8abcd6200c28",
      "7fd0825c-50bb-4548-9b9e-89342565dd8a",
      "cc8ba815-51b0-4ae2-89be-2155de0d7812",
      "e2b0788c-2db9-40d2-af1b-9a545bd25d21",
      "e011abe6-0006-4479-863e-e1854a05866a",
      "a207fae9-44e6-4a35-ae00-ed3a82b13772",
      "740b59b3-d1a4-4a76-9660-e1705ff8da34",
      "89789db1-55cc-4bf3-9ea4-578faaa5ef17",
      "6d18d8c2-ea49-4076-8722-13daed6b96d3",
      "6be09ccc-bf73-48d6-8bda-f694fd304618",
      "e8a5f85f-125c-46f5-b5c7-6f546070bf0e",
      "513a89c0-f3b9-4848-84a7-3adfe77dd900",
      "18f19a13-0c9f-41f0-b97f-2a439ba391e9",
      "7e0f608a-ff45-41b0-b571-f1a1aaa76ea6",
      "5a9241f2-3757-45d2-ac15-ceadbc3ffd72",
      "c550260d-b121-48f9-9125-1606d89b88e3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550229429121,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "9d509154-6884-4a00-b8ab-1a389ad80607",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550229960000,
    "parent_id": "eecffaeb-508c-45b9-93c4-ae07958e5f67",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Avoid repetitive and expensive operations using conditional clause"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429103,
        "id": "e073bc6f-65f6-4a62-89c2-a6c47ecf2a57",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429103,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Consider the below list comprehension:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Consider the below list comprehension:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429103,
        "id": "3afe14ef-b9ee-4e68-9a2f-e17e6315ab6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e def f(x):\n...     import time\n...     time.sleep(.1)       # Simulate expensive function\n...     return x**2\n\n\u003e\u003e\u003e [f(x) for x in range(1000) if f(x) \u003e 10]\n[16, 25, 36, ...]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e def f(x):\n...     import time\n...     time.sleep(.1)       # Simulate expensive function\n...     return x**2\n\n\u003e\u003e\u003e [f(x) for x in range(1000) if f(x) \u003e 10]\n[16, 25, 36, ...]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429103,
        "id": "f7cae86e-1498-4214-aba8-370b9b6e2e04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429103,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This results in two calls to "
            ],
            [
              "f(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for 1,000 values of "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": one call for generating the value and the other for checking the "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " condition. If "
            ],
            [
              "f(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a particularly expensive operation, this can have significant performance implications. Worse, if calling "
            ],
            [
              "f()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has side effects, it can have surprising results."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This results in two calls to "
          },
          {
            "Text": "f(x)",
            "AttrFlags": 2
          },
          {
            "Text": " for 1,000 values of "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": ": one call for generating the value and the other for checking the "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " condition. If "
          },
          {
            "Text": "f(x)",
            "AttrFlags": 2
          },
          {
            "Text": " is a particularly expensive operation, this can have significant performance implications. Worse, if calling "
          },
          {
            "Text": "f()",
            "AttrFlags": 2
          },
          {
            "Text": " has side effects, it can have surprising results."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429104,
        "id": "0501fb07-476a-4f70-a8f2-51aa32a9fb7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429104,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, you should evaluate the expensive operation only once for each value of "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by generating an intermediate iterable ("
            ],
            [
              "generator expression",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/196/comprehensions/739/generator-expressions#t=201607231130336574039"
                ]
              ]
            ],
            [
              ") as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, you should evaluate the expensive operation only once for each value of "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " by generating an intermediate iterable ("
          },
          {
            "Text": "generator expression",
            "Link": "http://stackoverflow.com/documentation/python/196/comprehensions/739/generator-expressions#t=201607231130336574039"
          },
          {
            "Text": ") as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429104,
        "id": "9cbcaeec-ed75-4ddb-bf66-8abcd6200c28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e [v for v in (f(x) for x in range(1000)) if v \u003e 10]\n[16, 25, 36, ...]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e [v for v in (f(x) for x in range(1000)) if v \u003e 10]\n[16, 25, 36, ...]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429105,
        "id": "7fd0825c-50bb-4548-9b9e-89342565dd8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429105,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or, using the builtin "
            ],
            [
              "map",
              [
                [
                  "a",
                  "https://docs.python.org/3.5/library/functions.html#map"
                ]
              ]
            ],
            [
              " equivalent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or, using the builtin "
          },
          {
            "Text": "map",
            "Link": "https://docs.python.org/3.5/library/functions.html#map"
          },
          {
            "Text": " equivalent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429105,
        "id": "cc8ba815-51b0-4ae2-89be-2155de0d7812",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e [v for v in map(f, range(1000)) if v \u003e 10]\n[16, 25, 36, ...]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e [v for v in map(f, range(1000)) if v \u003e 10]\n[16, 25, 36, ...]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429105,
        "id": "e2b0788c-2db9-40d2-af1b-9a545bd25d21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429105,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way that could result in a more readable code is to put the partial result ("
            ],
            [
              "v",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the previous example) in an iterable (such as a list or a tuple) and then iterate over it. Since "
            ],
            [
              "v",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will be the only element in the iterable, the result is that we now have a reference to the output of our slow function computed only once:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way that could result in a more readable code is to put the partial result ("
          },
          {
            "Text": "v",
            "AttrFlags": 2
          },
          {
            "Text": " in the previous example) in an iterable (such as a list or a tuple) and then iterate over it. Since "
          },
          {
            "Text": "v",
            "AttrFlags": 2
          },
          {
            "Text": " will be the only element in the iterable, the result is that we now have a reference to the output of our slow function computed only once:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429105,
        "id": "e011abe6-0006-4479-863e-e1854a05866a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e [v for x in range(1000) for v in [f(x)] if v \u003e 10]\n[16, 25, 36, ...]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e [v for x in range(1000) for v in [f(x)] if v \u003e 10]\n[16, 25, 36, ...]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429106,
        "id": "a207fae9-44e6-4a35-ae00-ed3a82b13772",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429106,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, in practice, the logic of code can be more complicated and it’s important to keep it readable. In general, a separate "
            ],
            [
              "generator function",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/292/generators-yield#t=201607221701093174726"
                ]
              ]
            ],
            [
              " is recommended over a complex one-liner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, in practice, the logic of code can be more complicated and it’s important to keep it readable. In general, a separate "
          },
          {
            "Text": "generator function",
            "Link": "http://stackoverflow.com/documentation/python/292/generators-yield#t=201607221701093174726"
          },
          {
            "Text": " is recommended over a complex one-liner:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429106,
        "id": "740b59b3-d1a4-4a76-9660-e1705ff8da34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429106,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e def process_prime_numbers(iterable):\n...     for x in iterable:\n...         if is_prime(x):\n...             yield f(x)\n...\n\u003e\u003e\u003e [x for x in process_prime_numbers(range(1000)) if x \u003e 10]\n[11, 13, 17, 19, ...]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e\u003e\u003e def process_prime_numbers(iterable):\n...     for x in iterable:\n...         if is_prime(x):\n...             yield f(x)\n...\n\u003e\u003e\u003e [x for x in process_prime_numbers(range(1000)) if x \u003e 10]\n[11, 13, 17, 19, ...]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429120,
        "id": "89789db1-55cc-4bf3-9ea4-578faaa5ef17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429120,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another way to prevent computing "
            ],
            [
              "f(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " multiple times is to use the "
            ],
            [
              "@functools.lru_cache()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://docs.python.org/3/library/functools.html#functools.lru_cache"
                ]
              ]
            ],
            [
              "(Python 3.2+) "
            ],
            [
              "decorator",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/229/decorators#t=201607221701527897836"
                ]
              ]
            ],
            [
              " on "
            ],
            [
              "f(x)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This way since the output of "
            ],
            [
              "f",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for the input "
            ],
            [
              "x",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has already been computed once, the second function invocation of the original list comprehension will be as fast as a dictionary lookup. This approach uses "
            ],
            [
              "memoization",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Memoization"
                ]
              ]
            ],
            [
              " to improve efficiency, which is comparable to using generator expressions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another way to prevent computing "
          },
          {
            "Text": "f(x)",
            "AttrFlags": 2
          },
          {
            "Text": " multiple times is to use the "
          },
          {
            "Text": "@functools.lru_cache()",
            "AttrFlags": 2,
            "Link": "https://docs.python.org/3/library/functools.html#functools.lru_cache"
          },
          {
            "Text": "(Python 3.2+) "
          },
          {
            "Text": "decorator",
            "Link": "http://stackoverflow.com/documentation/python/229/decorators#t=201607221701527897836"
          },
          {
            "Text": " on "
          },
          {
            "Text": "f(x)",
            "AttrFlags": 2
          },
          {
            "Text": ". This way since the output of "
          },
          {
            "Text": "f",
            "AttrFlags": 2
          },
          {
            "Text": " for the input "
          },
          {
            "Text": "x",
            "AttrFlags": 2
          },
          {
            "Text": " has already been computed once, the second function invocation of the original list comprehension will be as fast as a dictionary lookup. This approach uses "
          },
          {
            "Text": "memoization",
            "Link": "https://en.wikipedia.org/wiki/Memoization"
          },
          {
            "Text": " to improve efficiency, which is comparable to using generator expressions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429120,
        "id": "6d18d8c2-ea49-4076-8722-13daed6b96d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429120,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Say you have to flatten a list"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Say you have to flatten a list"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "6be09ccc-bf73-48d6-8bda-f694fd304618",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "e8a5f85f-125c-46f5-b5c7-6f546070bf0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429121,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some of the methods could be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some of the methods could be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "513a89c0-f3b9-4848-84a7-3adfe77dd900",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "reduce(lambda x, y: x+y, l)\n\nsum(l, [])\n\nlist(itertools.chain(*l))"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "reduce(lambda x, y: x+y, l)\n\nsum(l, [])\n\nlist(itertools.chain(*l))",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "18f19a13-0c9f-41f0-b97f-2a439ba391e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429121,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However list comprehension would provide the best time complexity."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However list comprehension would provide the best time complexity."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "7e0f608a-ff45-41b0-b571-f1a1aaa76ea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229960000,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[item for sublist in l for item in sublist]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[item for sublist in l for item in sublist]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "5a9241f2-3757-45d2-ac15-ceadbc3ffd72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429121,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The shortcuts based on + (including the implied use in sum) are, of necessity, O(L^2) when there are L sublists – as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So (for simplicity and without actual loss of generality) say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., I * (L**2)/2."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The shortcuts based on + (including the implied use in sum) are, of necessity, O(L^2) when there are L sublists – as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So (for simplicity and without actual loss of generality) say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., I * (L**2)/2."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229429121,
        "id": "c550260d-b121-48f9-9125-1606d89b88e3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229429121,
        "parent_id": "9d509154-6884-4a00-b8ab-1a389ad80607",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once."
          }
        ]
      }
    ],
    "title": "Avoid repetitive and expensive operations using conditional clause",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}