{
  "ID": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
  "Root": {
    "alive": true,
    "content": [
      "040e3548-68a9-4381-97fa-41acd5a1e76c",
      "66144656-9888-4818-8ef6-5044bc9efb11",
      "475cd920-bf01-41eb-9805-beda1cd6309a",
      "28fd257a-6c61-40ae-8c02-0ca15343d2c4",
      "d9541ce2-a256-450b-94a8-6107838a67c9"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550261094015,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550262480000,
    "parent_id": "e895cb09-a4b0-4965-a04d-695253fcf7c6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Recursive Lambda using assigned variable"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261094011,
        "id": "040e3548-68a9-4381-97fa-41acd5a1e76c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261094011,
        "parent_id": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One method for creating recursive lambda functions involves assigning the function to a variable and then referencing that variable within the function itself. A common example of this is the recursive calculation of the factorial of a number - such as shown in the following code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One method for creating recursive lambda functions involves assigning the function to a variable and then referencing that variable within the function itself. A common example of this is the recursive calculation of the factorial of a number - such as shown in the following code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261094014,
        "id": "66144656-9888-4818-8ef6-5044bc9efb11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550262480000,
        "parent_id": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "lambda_factorial = lambda i:1 if i==0 else i*lambda_factorial(i-1)\nprint(lambda_factorial(4)) # 4 * 3 * 2 * 1 = 12 * 2 = 24"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "lambda_factorial = lambda i:1 if i==0 else i*lambda_factorial(i-1)\nprint(lambda_factorial(4)) # 4 * 3 * 2 * 1 = 12 * 2 = 24",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261094014,
        "id": "475cd920-bf01-41eb-9805-beda1cd6309a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261094014,
        "parent_id": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Description of code"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Description of code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261094014,
        "id": "28fd257a-6c61-40ae-8c02-0ca15343d2c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261094014,
        "parent_id": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The lambda function, through its variable assignment, is passed a value (4) which it evaluates and returns 1 if it is 0 or else it returns the current value ("
            ],
            [
              "i",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") * another calculation by the lambda function of the value - 1 ("
            ],
            [
              "i-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). This continues until the passed value is decremented to 0 ("
            ],
            [
              "return 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "). A process which can be visualized as:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The lambda function, through its variable assignment, is passed a value (4) which it evaluates and returns 1 if it is 0 or else it returns the current value ("
          },
          {
            "Text": "i",
            "AttrFlags": 2
          },
          {
            "Text": ") * another calculation by the lambda function of the value - 1 ("
          },
          {
            "Text": "i-1",
            "AttrFlags": 2
          },
          {
            "Text": "). This continues until the passed value is decremented to 0 ("
          },
          {
            "Text": "return 1",
            "AttrFlags": 2
          },
          {
            "Text": "). A process which can be visualized as:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550261094015,
        "id": "d9541ce2-a256-450b-94a8-6107838a67c9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550261094015,
        "parent_id": "53b71943-dff2-4387-abd4-8f5beeb34e4a",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/uitTM.jpg"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "http://i.stack.imgur.com/uitTM.jpg",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2FuitTM.jpg"
      }
    ],
    "title": "Recursive Lambda using assigned variable",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}