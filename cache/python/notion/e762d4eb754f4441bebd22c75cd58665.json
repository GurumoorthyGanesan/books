{
  "ID": "e762d4eb-754f-4441-bebd-22c75cd58665",
  "Root": {
    "alive": true,
    "content": [
      "441c27de-d860-42b3-bc7e-debb60c99046",
      "7a35ebaf-807a-4702-96d0-151ac2d00439",
      "08ea6447-0b66-4ad6-8a45-55e97f3e1259",
      "c4d5864b-3474-4a46-8c0d-437f3e315569",
      "1feaeb5c-86af-40ed-a95c-93ec5292c43d",
      "16fa8eee-af16-4003-9523-7f6659caf14c",
      "4050891f-71d7-4164-8062-eac26478cf1e",
      "895ba2a6-ae93-488b-899d-2ae54e286900",
      "6cc26c43-b66b-48c4-afc4-0dac4978cf69",
      "fea10357-37c9-443b-8200-852bd4f03dca",
      "e6566b0f-8bb6-4404-9744-881d91f5da07",
      "49a333af-f288-4338-be34-48948c3863cc",
      "7a84d0bf-4f92-4b34-b0fb-e0a01046a352",
      "e379ac3e-4557-4b25-97a5-9977e4d73293",
      "4288d769-f620-4be6-8c9d-2c71e6b33f11",
      "0c47ec42-8b5d-4214-9721-db30cec45625",
      "b82b0fa4-a4d5-4397-9a7e-3f404ddfb168",
      "d9ddd4de-9d36-4be7-8ed6-5283d96b9892",
      "3b5b9dd9-01ab-4007-9008-58fefd9f38d9",
      "f345a3c4-4893-4dc6-8a80-356a05c312c0",
      "22cbbd55-3475-4396-b6a3-aa8fdd43d56a",
      "1dba735e-e213-4bf1-b1bb-9ccb51aa4dc0",
      "e5a40102-dbaa-4b1f-b786-c1850e37f222",
      "ef8aba3c-9c70-406e-8cab-0320926348f8",
      "65a2d91a-2f8e-4ed1-8c4e-2e9e15517dfd",
      "c9e3fe24-061c-49ab-b5e0-467691cd0b3a",
      "877ac1cd-2d32-4708-ab1f-deaf9d1afc74",
      "f8f1367f-be58-413a-ae3c-daff9f14a64e",
      "e17b8666-6e7a-48f7-aef7-44263dbb77a9",
      "be7badd6-14f1-450f-b2a4-b588803c5380",
      "6e39e1af-8078-4824-9b54-feacc97e87b0",
      "0a22ed52-bbf0-4731-aca1-1a4f88a5cb32"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550305638951,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "e762d4eb-754f-4441-bebd-22c75cd58665",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550306280000,
    "parent_id": "61d34cb1-e32c-45a0-89c4-f6bcc8106406",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Testing what a string is composed of"
        ]
      ]
    },
    "type": "page",
    "version": 14,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638941,
        "id": "441c27de-d860-42b3-bc7e-debb60c99046",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638941,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python’s "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type also features a number of methods that can be used to evaluate the contents of a string. These are "
            ],
            [
              "str.isalpha",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.isdigit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.isalnum",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.isspace",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Capitalization can be tested with "
            ],
            [
              "str.isupper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.islower",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "str.istitle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Python’s "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " type also features a number of methods that can be used to evaluate the contents of a string. These are "
          },
          {
            "Text": "str.isalpha",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.isdigit",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.isalnum",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.isspace",
            "AttrFlags": 2
          },
          {
            "Text": ". Capitalization can be tested with "
          },
          {
            "Text": "str.isupper",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.islower",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "str.istitle",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638943,
        "id": "7a35ebaf-807a-4702-96d0-151ac2d00439",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638943,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isalpha",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isalpha",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638944,
        "id": "08ea6447-0b66-4ad6-8a45-55e97f3e1259",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638944,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isalpha",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " takes no arguments and returns "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the all characters in a given string are alphabetic, for example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isalpha",
            "AttrFlags": 2
          },
          {
            "Text": " takes no arguments and returns "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " if the all characters in a given string are alphabetic, for example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638944,
        "id": "c4d5864b-3474-4a46-8c0d-437f3e315569",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306220000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"Hello World\".isalpha()  # contains a space\nFalse\n\u003e\u003e\u003e \"Hello2World\".isalpha()  # contains a number\nFalse\n\u003e\u003e\u003e \"HelloWorld!\".isalpha()  # contains punctuation\nFalse\n\u003e\u003e\u003e \"HelloWorld\".isalpha()\nTrue"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"Hello World\".isalpha()  # contains a space\nFalse\n\u003e\u003e\u003e \"Hello2World\".isalpha()  # contains a number\nFalse\n\u003e\u003e\u003e \"HelloWorld!\".isalpha()  # contains punctuation\nFalse\n\u003e\u003e\u003e \"HelloWorld\".isalpha()\nTrue",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638944,
        "id": "1feaeb5c-86af-40ed-a95c-93ec5292c43d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638944,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As an edge case, the empty string evaluates to "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when used with "
            ],
            [
              "\"\".isalpha()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As an edge case, the empty string evaluates to "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": " when used with "
          },
          {
            "Text": "\"\".isalpha()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638944,
        "id": "16fa8eee-af16-4003-9523-7f6659caf14c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638944,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isupper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.islower",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.istitle",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isupper",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.islower",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.istitle",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638944,
        "id": "4050891f-71d7-4164-8062-eac26478cf1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638944,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These methods test the capitalization in a given string."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These methods test the capitalization in a given string."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "895ba2a6-ae93-488b-899d-2ae54e286900",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638945,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isupper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a method that returns "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if all characters in a given string are uppercase and "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isupper",
            "AttrFlags": 2
          },
          {
            "Text": " is a method that returns "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " if all characters in a given string are uppercase and "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": " otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "6cc26c43-b66b-48c4-afc4-0dac4978cf69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306220000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"HeLLO WORLD\".isupper()\nFalse\n\u003e\u003e\u003e \"HELLO WORLD\".isupper()\nTrue\n\u003e\u003e\u003e \"\".isupper()\nFalse"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"HeLLO WORLD\".isupper()\nFalse\n\u003e\u003e\u003e \"HELLO WORLD\".isupper()\nTrue\n\u003e\u003e\u003e \"\".isupper()\nFalse",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "fea10357-37c9-443b-8200-852bd4f03dca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638945,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversely, "
            ],
            [
              "str.islower",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a method that returns "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if all characters in a given string are lowercase and "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " otherwise."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversely, "
          },
          {
            "Text": "str.islower",
            "AttrFlags": 2
          },
          {
            "Text": " is a method that returns "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " if all characters in a given string are lowercase and "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": " otherwise."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "e6566b0f-8bb6-4404-9744-881d91f5da07",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306220000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"Hello world\".islower()\nFalse\n\u003e\u003e\u003e \"hello world\".islower()\nTrue\n\u003e\u003e\u003e \"\".islower()\nFalse"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"Hello world\".islower()\nFalse\n\u003e\u003e\u003e \"hello world\".islower()\nTrue\n\u003e\u003e\u003e \"\".islower()\nFalse",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "49a333af-f288-4338-be34-48948c3863cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638945,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.istitle",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the given string is title cased; that is, every word begins with an uppercase character followed by lowercase characters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.istitle",
            "AttrFlags": 2
          },
          {
            "Text": " returns "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " if the given string is title cased; that is, every word begins with an uppercase character followed by lowercase characters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "7a84d0bf-4f92-4b34-b0fb-e0a01046a352",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306220000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"hello world\".istitle()\nFalse\n\u003e\u003e\u003e \"Hello world\".istitle()\nFalse\n\u003e\u003e\u003e \"Hello World\".istitle()\nTrue\n\u003e\u003e\u003e \"\".istitle()\nFalse"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"hello world\".istitle()\nFalse\n\u003e\u003e\u003e \"Hello world\".istitle()\nFalse\n\u003e\u003e\u003e \"Hello World\".istitle()\nTrue\n\u003e\u003e\u003e \"\".istitle()\nFalse",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "e379ac3e-4557-4b25-97a5-9977e4d73293",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638945,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isdecimal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.isdigit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str.isnumeric",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isdecimal",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.isdigit",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str.isnumeric",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "4288d769-f620-4be6-8c9d-2c71e6b33f11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638945,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isdecimal",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns whether the string is a sequence of decimal digits, suitable for representing a decimal number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isdecimal",
            "AttrFlags": 2
          },
          {
            "Text": " returns whether the string is a sequence of decimal digits, suitable for representing a decimal number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638945,
        "id": "0c47ec42-8b5d-4214-9721-db30cec45625",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638945,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isdigit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " includes digits not in a form suitable for representing a decimal number, such as superscript digits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isdigit",
            "AttrFlags": 2
          },
          {
            "Text": " includes digits not in a form suitable for representing a decimal number, such as superscript digits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638947,
        "id": "b82b0fa4-a4d5-4397-9a7e-3f404ddfb168",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638947,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isnumeric",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " includes any number values, even if not digits, such as values outside the range 0-9."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isnumeric",
            "AttrFlags": 2
          },
          {
            "Text": " includes any number values, even if not digits, such as values outside the range 0-9."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638947,
        "id": "d9ddd4de-9d36-4be7-8ed6-5283d96b9892",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638947,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "isdecimal    isdigit   isnumeric\n\n12345        True        True       True\n១2߃໔5        True        True       True\n①²³🄅₅       False       True       True\n⑩⒓          False       False      True\nFive         False       False      False"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "isdecimal    isdigit   isnumeric\n\n12345        True        True       True\n១2߃໔5        True        True       True\n①²³🄅₅       False       True       True\n⑩⒓          False       False      True\nFive         False       False      False",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638947,
        "id": "3b5b9dd9-01ab-4007-9008-58fefd9f38d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638947,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bytestrings ("
            ],
            [
              "bytes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in Python 3, "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in Python 2), only support "
            ],
            [
              "isdigit",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which only checks for basic ASCII digits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bytestrings ("
          },
          {
            "Text": "bytes",
            "AttrFlags": 2
          },
          {
            "Text": " in Python 3, "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " in Python 2), only support "
          },
          {
            "Text": "isdigit",
            "AttrFlags": 2
          },
          {
            "Text": ", which only checks for basic ASCII digits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638947,
        "id": "f345a3c4-4893-4dc6-8a80-356a05c312c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638947,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As with "
            ],
            [
              "str.isalpha",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the empty string evaluates to "
            ],
            [
              "False",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As with "
          },
          {
            "Text": "str.isalpha",
            "AttrFlags": 2
          },
          {
            "Text": ", the empty string evaluates to "
          },
          {
            "Text": "False",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "22cbbd55-3475-4396-b6a3-aa8fdd43d56a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638948,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isalnum",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isalnum",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "1dba735e-e213-4bf1-b1bb-9ccb51aa4dc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638948,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is a combination of "
            ],
            [
              "str.isalpha",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "str.isnumeric",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", specifically it evaluates to "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if all characters in the given string are "
            ],
            [
              "alphanumeric",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ", that is, they consist of alphabetic "
            ],
            [
              "or",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " numeric characters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is a combination of "
          },
          {
            "Text": "str.isalpha",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "str.isnumeric",
            "AttrFlags": 2
          },
          {
            "Text": ", specifically it evaluates to "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " if all characters in the given string are "
          },
          {
            "Text": "alphanumeric",
            "AttrFlags": 1
          },
          {
            "Text": ", that is, they consist of alphabetic "
          },
          {
            "Text": "or",
            "AttrFlags": 4
          },
          {
            "Text": " numeric characters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "e5a40102-dbaa-4b1f-b786-c1850e37f222",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306220000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"Hello2World\".isalnum()\nTrue\n\u003e\u003e\u003e \"HelloWorld\".isalnum()\nTrue\n\u003e\u003e\u003e \"2016\".isalnum()\nTrue\n\u003e\u003e\u003e \"Hello World\".isalnum()  # contains whitespace\nFalse"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"Hello2World\".isalnum()\nTrue\n\u003e\u003e\u003e \"HelloWorld\".isalnum()\nTrue\n\u003e\u003e\u003e \"2016\".isalnum()\nTrue\n\u003e\u003e\u003e \"Hello World\".isalnum()  # contains whitespace\nFalse",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "ef8aba3c-9c70-406e-8cab-0320926348f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638948,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "str.isspace",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "str.isspace",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "65a2d91a-2f8e-4ed1-8c4e-2e9e15517dfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638948,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Evaluates to "
            ],
            [
              "True",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if the string contains only whitespace characters."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Evaluates to "
          },
          {
            "Text": "True",
            "AttrFlags": 2
          },
          {
            "Text": " if the string contains only whitespace characters."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "c9e3fe24-061c-49ab-b5e0-467691cd0b3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306220000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "YAML"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"\\t\\r\\n\".isspace()\nTrue\n\u003e\u003e\u003e \" \".isspace()\nTrue"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"\\t\\r\\n\".isspace()\nTrue\n\u003e\u003e\u003e \" \".isspace()\nTrue",
        "code_language": "YAML"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "877ac1cd-2d32-4708-ab1f-deaf9d1afc74",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638948,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes a string looks “empty” but we don’t know whether it’s because it contains just whitespace or no character at all"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes a string looks “empty” but we don’t know whether it’s because it contains just whitespace or no character at all"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "f8f1367f-be58-413a-ae3c-daff9f14a64e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306280000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e \"\".isspace()\nFalse"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e \"\".isspace()\nFalse",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638948,
        "id": "e17b8666-6e7a-48f7-aef7-44263dbb77a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638948,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To cover this case we need an additional test"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To cover this case we need an additional test"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638949,
        "id": "be7badd6-14f1-450f-b2a4-b588803c5380",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306280000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e my_str = ''\n\u003e\u003e\u003e my_str.isspace()\nFalse\n\u003e\u003e\u003e my_str.isspace() or not my_str\nTrue"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e my_str = ''\n\u003e\u003e\u003e my_str.isspace()\nFalse\n\u003e\u003e\u003e my_str.isspace() or not my_str\nTrue",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638950,
        "id": "6e39e1af-8078-4824-9b54-feacc97e87b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550305638950,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But the shortest way to test if a string is empty or just contains whitespace characters is to use "
            ],
            [
              "strip",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/python/278/string-methods/8777/stripping-unwanted-leading-trailing-characters-from-a-string#t=201608150741303855198"
                ]
              ]
            ],
            [
              "(with no arguments it removes all leading and trailing whitespace characters)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But the shortest way to test if a string is empty or just contains whitespace characters is to use "
          },
          {
            "Text": "strip",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/python/278/string-methods/8777/stripping-unwanted-leading-trailing-characters-from-a-string#t=201608150741303855198"
          },
          {
            "Text": "(with no arguments it removes all leading and trailing whitespace characters)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550305638950,
        "id": "0a22ed52-bbf0-4731-aca1-1a4f88a5cb32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550306280000,
        "parent_id": "e762d4eb-754f-4441-bebd-22c75cd58665",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "\u003e\u003e\u003e not my_str.strip()\nTrue"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\u003e\u003e\u003e not my_str.strip()\nTrue",
        "code_language": "Python"
      }
    ],
    "title": "Testing what a string is composed of",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}