{
  "ID": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
  "Root": {
    "alive": true,
    "content": [
      "8b2733f9-2aa1-4308-a6df-f5572fb05ce5",
      "46439d85-c0c1-48c3-8f3f-03fa0109ed8a",
      "8c0f1d04-c0a1-4f43-956f-e1cc05b311f9",
      "7309033b-a247-4c54-8f71-e8d4a5a7e1aa",
      "d31db6f8-50bd-49c9-a143-2e28c99aad53",
      "209126ad-65ae-41d0-acb6-e1cb001e33d2",
      "832d5668-642f-4b52-ac4e-e6c953fb72a8",
      "3746114b-8bed-4b90-a848-72d6bbfc6bff",
      "0a157c72-3c5d-46b1-8e16-1c563881013a",
      "f69949ee-a354-45d6-9435-a59d0ba8d16b",
      "920b782f-aabc-4d71-be16-de9a74fa7bf1",
      "76612f01-bad6-4397-bd84-dd2d61bef448",
      "644ea2eb-5319-4d2f-af0f-b5cb51961c73",
      "8a3a7131-4c87-4012-9306-e833a36edf3c",
      "77c4ab10-abf6-4578-afae-9ae386ab8ac0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550344497376,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550344920000,
    "parent_id": "a19ec278-02d7-497e-9253-2d8ba401504c",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Constructing timezone-aware datetimes"
        ]
      ]
    },
    "type": "page",
    "version": 17,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497368,
        "id": "8b2733f9-2aa1-4308-a6df-f5572fb05ce5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497368,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default all "
            ],
            [
              "datetime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects are naive. To make them timezone-aware, you must attach a "
            ],
            [
              "tzinfo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object, which provides the UTC offset and timezone abbreviation as a function of date and time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default all "
          },
          {
            "Text": "datetime",
            "AttrFlags": 2
          },
          {
            "Text": " objects are naive. To make them timezone-aware, you must attach a "
          },
          {
            "Text": "tzinfo",
            "AttrFlags": 2
          },
          {
            "Text": " object, which provides the UTC offset and timezone abbreviation as a function of date and time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497371,
        "id": "46439d85-c0c1-48c3-8f3f-03fa0109ed8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497371,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fixed Offset Time Zones",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fixed Offset Time Zones",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497371,
        "id": "8c0f1d04-c0a1-4f43-956f-e1cc05b311f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497371,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For time zones that are a fixed offset from UTC, in Python 3.2+, the "
            ],
            [
              "datetime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " module provides the "
            ],
            [
              "timezone",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class, a concrete implementation of "
            ],
            [
              "tzinfo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which takes a "
            ],
            [
              "timedelta",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and an (optional) name parameter:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For time zones that are a fixed offset from UTC, in Python 3.2+, the "
          },
          {
            "Text": "datetime",
            "AttrFlags": 2
          },
          {
            "Text": " module provides the "
          },
          {
            "Text": "timezone",
            "AttrFlags": 2
          },
          {
            "Text": " class, a concrete implementation of "
          },
          {
            "Text": "tzinfo",
            "AttrFlags": 2
          },
          {
            "Text": ", which takes a "
          },
          {
            "Text": "timedelta",
            "AttrFlags": 2
          },
          {
            "Text": " and an (optional) name parameter:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497371,
        "id": "7309033b-a247-4c54-8f71-e8d4a5a7e1aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344680000,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from datetime import datetime, timedelta, timezone\nJST = timezone(timedelta(hours=+9))\n\ndt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=JST)\nprint(dt)\n# 2015-01-01 12:00:00+09:00\n\nprint(dt.tzname())\n# UTC+09:00\n\ndt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=timezone(timedelta(hours=9), 'JST'))\nprint(dt.tzname)\n# 'JST'"
            ]
          ]
        },
        "type": "code",
        "version": 13,
        "code": "from datetime import datetime, timedelta, timezone\nJST = timezone(timedelta(hours=+9))\n\ndt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=JST)\nprint(dt)\n# 2015-01-01 12:00:00+09:00\n\nprint(dt.tzname())\n# UTC+09:00\n\ndt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=timezone(timedelta(hours=9), 'JST'))\nprint(dt.tzname)\n# 'JST'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497373,
        "id": "d31db6f8-50bd-49c9-a143-2e28c99aad53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497373,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For Python versions before 3.2, it is necessary to use a third party library, such as "
            ],
            [
              "dateutil",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://dateutil.readthedocs.io/"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "dateutil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides an equivalent class, "
            ],
            [
              "tzoffset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which (as of version 2.5.3) takes arguments of the form "
            ],
            [
              "dateutil.tz.tzoffset(tzname, offset)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", where "
            ],
            [
              "offset",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is specified in seconds:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For Python versions before 3.2, it is necessary to use a third party library, such as "
          },
          {
            "Text": "dateutil",
            "AttrFlags": 2,
            "Link": "http://dateutil.readthedocs.io/"
          },
          {
            "Text": ". "
          },
          {
            "Text": "dateutil",
            "AttrFlags": 2
          },
          {
            "Text": " provides an equivalent class, "
          },
          {
            "Text": "tzoffset",
            "AttrFlags": 2
          },
          {
            "Text": ", which (as of version 2.5.3) takes arguments of the form "
          },
          {
            "Text": "dateutil.tz.tzoffset(tzname, offset)",
            "AttrFlags": 2
          },
          {
            "Text": ", where "
          },
          {
            "Text": "offset",
            "AttrFlags": 2
          },
          {
            "Text": " is specified in seconds:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497373,
        "id": "209126ad-65ae-41d0-acb6-e1cb001e33d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344620000,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from datetime import datetime, timedelta\nfrom dateutil import tz\n\nJST = tz.tzoffset('JST', 9 * 3600) # 3600 seconds per hour\ndt = datetime(2015, 1, 1, 12, 0, tzinfo=JST)\nprint(dt)\n# 2015-01-01 12:00:00+09:00\nprint(dt.tzname)\n# 'JST'"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "from datetime import datetime, timedelta\nfrom dateutil import tz\n\nJST = tz.tzoffset('JST', 9 * 3600) # 3600 seconds per hour\ndt = datetime(2015, 1, 1, 12, 0, tzinfo=JST)\nprint(dt)\n# 2015-01-01 12:00:00+09:00\nprint(dt.tzname)\n# 'JST'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497374,
        "id": "832d5668-642f-4b52-ac4e-e6c953fb72a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497374,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Zones with daylight savings time",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Zones with daylight savings time",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497374,
        "id": "3746114b-8bed-4b90-a848-72d6bbfc6bff",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497374,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For zones with daylight savings time, python standard libraries do not provide a standard class, so it is necessary to use a third party library. "
            ],
            [
              "pytz",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://pytz.sourceforge.net/"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "dateutil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are popular libraries providing time zone classes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For zones with daylight savings time, python standard libraries do not provide a standard class, so it is necessary to use a third party library. "
          },
          {
            "Text": "pytz",
            "AttrFlags": 2,
            "Link": "http://pytz.sourceforge.net/"
          },
          {
            "Text": " and "
          },
          {
            "Text": "dateutil",
            "AttrFlags": 2
          },
          {
            "Text": " are popular libraries providing time zone classes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497375,
        "id": "0a157c72-3c5d-46b1-8e16-1c563881013a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497375,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to static time zones, "
            ],
            [
              "dateutil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " provides time zone classes that use daylight savings time (see "
            ],
            [
              "the documentation for the ",
              [
                [
                  "a",
                  "http://dateutil.readthedocs.io/en/stable/tz.html"
                ]
              ]
            ],
            [
              "tz",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://dateutil.readthedocs.io/en/stable/tz.html"
                ]
              ]
            ],
            [
              " module",
              [
                [
                  "a",
                  "http://dateutil.readthedocs.io/en/stable/tz.html"
                ]
              ]
            ],
            [
              "). You can use the "
            ],
            [
              "tz.gettz()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method to get a time zone object, which can then be passed directly to the "
            ],
            [
              "datetime",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructor:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to static time zones, "
          },
          {
            "Text": "dateutil",
            "AttrFlags": 2
          },
          {
            "Text": " provides time zone classes that use daylight savings time (see "
          },
          {
            "Text": "the documentation for the ",
            "Link": "http://dateutil.readthedocs.io/en/stable/tz.html"
          },
          {
            "Text": "tz",
            "AttrFlags": 2,
            "Link": "http://dateutil.readthedocs.io/en/stable/tz.html"
          },
          {
            "Text": " module",
            "Link": "http://dateutil.readthedocs.io/en/stable/tz.html"
          },
          {
            "Text": "). You can use the "
          },
          {
            "Text": "tz.gettz()",
            "AttrFlags": 2
          },
          {
            "Text": " method to get a time zone object, which can then be passed directly to the "
          },
          {
            "Text": "datetime",
            "AttrFlags": 2
          },
          {
            "Text": " constructor:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497375,
        "id": "f69949ee-a354-45d6-9435-a59d0ba8d16b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344680000,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from datetime import datetime\nfrom dateutil import tz\nlocal = tz.gettz() # Local time\nPT = tz.gettz('US/Pacific') # Pacific time\n\ndt_l = datetime(2015, 1, 1, 12, tzinfo=local) # I am in EST\ndt_pst = datetime(2015, 1, 1, 12, tzinfo=PT)\ndt_pdt = datetime(2015, 7, 1, 12, tzinfo=PT) # DST is handled automatically\nprint(dt_l)\n# 2015-01-01 12:00:00-05:00\nprint(dt_pst)\n# 2015-01-01 12:00:00-08:00\nprint(dt_pdt)\n# 2015-07-01 12:00:00-07:00"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "from datetime import datetime\nfrom dateutil import tz\nlocal = tz.gettz() # Local time\nPT = tz.gettz('US/Pacific') # Pacific time\n\ndt_l = datetime(2015, 1, 1, 12, tzinfo=local) # I am in EST\ndt_pst = datetime(2015, 1, 1, 12, tzinfo=PT)\ndt_pdt = datetime(2015, 7, 1, 12, tzinfo=PT) # DST is handled automatically\nprint(dt_l)\n# 2015-01-01 12:00:00-05:00\nprint(dt_pst)\n# 2015-01-01 12:00:00-08:00\nprint(dt_pdt)\n# 2015-07-01 12:00:00-07:00",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497375,
        "id": "920b782f-aabc-4d71-be16-de9a74fa7bf1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497375,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CAUTION",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": As of version 2.5.3, "
            ],
            [
              "dateutil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " does not handle ambiguous datetimes correctly, and will always default to the "
            ],
            [
              "later",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " date. There is no way to construct an object with a "
            ],
            [
              "dateutil",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " timezone representing, for example "
            ],
            [
              "2015-11-01 1:30 EDT-4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", since this is "
            ],
            [
              "during",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " a daylight savings time transition."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "CAUTION",
            "AttrFlags": 1
          },
          {
            "Text": ": As of version 2.5.3, "
          },
          {
            "Text": "dateutil",
            "AttrFlags": 2
          },
          {
            "Text": " does not handle ambiguous datetimes correctly, and will always default to the "
          },
          {
            "Text": "later",
            "AttrFlags": 4
          },
          {
            "Text": " date. There is no way to construct an object with a "
          },
          {
            "Text": "dateutil",
            "AttrFlags": 2
          },
          {
            "Text": " timezone representing, for example "
          },
          {
            "Text": "2015-11-01 1:30 EDT-4",
            "AttrFlags": 2
          },
          {
            "Text": ", since this is "
          },
          {
            "Text": "during",
            "AttrFlags": 4
          },
          {
            "Text": " a daylight savings time transition."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497376,
        "id": "76612f01-bad6-4397-bd84-dd2d61bef448",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497376,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All edge cases are handled properly when using "
            ],
            [
              "pytz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but "
            ],
            [
              "pytz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time zones should "
            ],
            [
              "not",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " be directly attached to time zones through the constructor. Instead, a "
            ],
            [
              "pytz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " time zone should be attached using the time zone’s "
            ],
            [
              "localize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All edge cases are handled properly when using "
          },
          {
            "Text": "pytz",
            "AttrFlags": 2
          },
          {
            "Text": ", but "
          },
          {
            "Text": "pytz",
            "AttrFlags": 2
          },
          {
            "Text": " time zones should "
          },
          {
            "Text": "not",
            "AttrFlags": 4
          },
          {
            "Text": " be directly attached to time zones through the constructor. Instead, a "
          },
          {
            "Text": "pytz",
            "AttrFlags": 2
          },
          {
            "Text": " time zone should be attached using the time zone’s "
          },
          {
            "Text": "localize",
            "AttrFlags": 2
          },
          {
            "Text": " method:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497376,
        "id": "644ea2eb-5319-4d2f-af0f-b5cb51961c73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344680000,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "from datetime import datetime, timedelta\nimport pytz\n\nPT = pytz.timezone('US/Pacific')\ndt_pst = PT.localize(datetime(2015, 1, 1, 12))\ndt_pdt = PT.localize(datetime(2015, 11, 1, 0, 30))\nprint(dt_pst)\n# 2015-01-01 12:00:00-08:00\nprint(dt_pdt)\n# 2015-11-01 00:30:00-07:00"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "from datetime import datetime, timedelta\nimport pytz\n\nPT = pytz.timezone('US/Pacific')\ndt_pst = PT.localize(datetime(2015, 1, 1, 12))\ndt_pdt = PT.localize(datetime(2015, 11, 1, 0, 30))\nprint(dt_pst)\n# 2015-01-01 12:00:00-08:00\nprint(dt_pdt)\n# 2015-11-01 00:30:00-07:00",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497376,
        "id": "8a3a7131-4c87-4012-9306-e833a36edf3c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344497376,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Be aware that if you perform datetime arithmetic on a "
            ],
            [
              "pytz",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "-aware time zone, you must either perform the calculations in UTC (if you want absolute elapsed time), or you must call "
            ],
            [
              "normalize()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the result:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Be aware that if you perform datetime arithmetic on a "
          },
          {
            "Text": "pytz",
            "AttrFlags": 2
          },
          {
            "Text": "-aware time zone, you must either perform the calculations in UTC (if you want absolute elapsed time), or you must call "
          },
          {
            "Text": "normalize()",
            "AttrFlags": 2
          },
          {
            "Text": " on the result:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550344497376,
        "id": "77c4ab10-abf6-4578-afae-9ae386ab8ac0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550344680000,
        "parent_id": "a48f1433-f1d7-4ded-a364-1937c9c38ead",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "dt_new = dt_pdt + timedelta(hours=3) # This should be 2:30 AM PST\nprint(dt_new)\n# 2015-11-01 03:30:00-07:00\ndt_corrected = PT.normalize(dt_new)\nprint(dt_corrected)\n# 2015-11-01 02:30:00-08:00"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "dt_new = dt_pdt + timedelta(hours=3) # This should be 2:30 AM PST\nprint(dt_new)\n# 2015-11-01 03:30:00-07:00\ndt_corrected = PT.normalize(dt_new)\nprint(dt_corrected)\n# 2015-11-01 02:30:00-08:00",
        "code_language": "Python"
      }
    ],
    "title": "Constructing timezone-aware datetimes",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}