{
  "ID": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
  "Root": {
    "alive": true,
    "content": [
      "118d889b-9857-4c94-a600-ac7d51a69ac1",
      "b8b008ba-fec6-487e-8c79-aa96802bcbf2",
      "d0933a84-acd4-4249-9099-0187215c8dfe",
      "f3b8e164-c4b5-44bf-a634-815fdc02fe17",
      "479db154-55bb-4ca9-a9a6-684b0ea42951",
      "e4282cdb-98ef-4278-b52b-2b59ee9220ab",
      "9bc934d2-c585-485d-abb4-63b22a6ef91a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550358141568,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550358300000,
    "parent_id": "452808ad-96bf-49e7-9654-c63c69b0f943",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Tail Recursion Optimization Through Stack Introspection"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141564,
        "id": "118d889b-9857-4c94-a600-ac7d51a69ac1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358141564,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default Python’s recursion stack cannot exceed 1000 frames. This can be changed by setting the "
            ],
            [
              "sys.setrecursionlimit(15000)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " which is faster however, this method consumes more memory. Instead, we can also solve the Tail Recursion problem using stack introspection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default Python’s recursion stack cannot exceed 1000 frames. This can be changed by setting the "
          },
          {
            "Text": "sys.setrecursionlimit(15000)",
            "AttrFlags": 2
          },
          {
            "Text": " which is faster however, this method consumes more memory. Instead, we can also solve the Tail Recursion problem using stack introspection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141567,
        "id": "b8b008ba-fec6-487e-8c79-aa96802bcbf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358300000,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "#!/usr/bin/env python2.4\n# This program shows off a python decorator which implements tail call optimization. It\n# does this by throwing an exception if it is it's own grandparent, and catching such \n# exceptions to recall the stack.\n\nimport sys\n\nclass TailRecurseException:\n    def __init__(self, args, kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\ndef tail_call_optimized(g):\n\"\"\"\nThis function decorates a function with tail call\noptimization. It does this by throwing an exception\nif it is it's own grandparent, and catching such\nexceptions to fake the tail call optimization.\n  \nThis function fails if the decorated\nfunction recurses in a non-tail context.\n\"\"\"\n      \n    def func(*args, **kwargs):\n        f = sys._getframe()\n        if f.f_back and f.f_back.f_back and f.f_back.f_back.f_code == f.f_code:\n            raise TailRecurseException(args, kwargs)\n        else:\n            while 1:\n                try:\n                    return g(*args, **kwargs)\n                except TailRecurseException, e:\n                    args = e.args\n                    kwargs = e.kwargs\n    func.__doc__ = g.__doc__\n    return func"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "#!/usr/bin/env python2.4\n# This program shows off a python decorator which implements tail call optimization. It\n# does this by throwing an exception if it is it's own grandparent, and catching such \n# exceptions to recall the stack.\n\nimport sys\n\nclass TailRecurseException:\n    def __init__(self, args, kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\ndef tail_call_optimized(g):\n\"\"\"\nThis function decorates a function with tail call\noptimization. It does this by throwing an exception\nif it is it's own grandparent, and catching such\nexceptions to fake the tail call optimization.\n  \nThis function fails if the decorated\nfunction recurses in a non-tail context.\n\"\"\"\n      \n    def func(*args, **kwargs):\n        f = sys._getframe()\n        if f.f_back and f.f_back.f_back and f.f_back.f_back.f_code == f.f_code:\n            raise TailRecurseException(args, kwargs)\n        else:\n            while 1:\n                try:\n                    return g(*args, **kwargs)\n                except TailRecurseException, e:\n                    args = e.args\n                    kwargs = e.kwargs\n    func.__doc__ = g.__doc__\n    return func",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141568,
        "id": "d0933a84-acd4-4249-9099-0187215c8dfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358141568,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To optimize the recursive functions, we can use the "
            ],
            [
              "@tail_call_optimized",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " decorator to call our function. Here’s a few of the common recursion examples using the decorator described above:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To optimize the recursive functions, we can use the "
          },
          {
            "Text": "@tail_call_optimized",
            "AttrFlags": 2
          },
          {
            "Text": " decorator to call our function. Here’s a few of the common recursion examples using the decorator described above:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141568,
        "id": "f3b8e164-c4b5-44bf-a634-815fdc02fe17",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358141568,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Factorial Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Factorial Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141568,
        "id": "479db154-55bb-4ca9-a9a6-684b0ea42951",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358300000,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@tail_call_optimized\ndef factorial(n, acc=1):\n  \"calculate a factorial\"\n  if n == 0:\n    return acc\n  return factorial(n-1, n*acc)\n\nprint factorial(10000)\n# prints a big, big number,\n# but doesn't hit the recursion limit."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@tail_call_optimized\ndef factorial(n, acc=1):\n  \"calculate a factorial\"\n  if n == 0:\n    return acc\n  return factorial(n-1, n*acc)\n\nprint factorial(10000)\n# prints a big, big number,\n# but doesn't hit the recursion limit.",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141568,
        "id": "e4282cdb-98ef-4278-b52b-2b59ee9220ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358141568,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fibonacci Example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fibonacci Example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550358141568,
        "id": "9bc934d2-c585-485d-abb4-63b22a6ef91a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550358300000,
        "parent_id": "28ced2e9-44bf-4421-8d75-effb3a7a3d47",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "@tail_call_optimized\ndef fib(i, current = 0, next = 1):\n  if i == 0:\n    return current\n  else:\n    return fib(i - 1, next, current + next)\n\nprint fib(10000)\n# also prints a big number,\n# but doesn't hit the recursion limit."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "@tail_call_optimized\ndef fib(i, current = 0, next = 1):\n  if i == 0:\n    return current\n  else:\n    return fib(i - 1, next, current + next)\n\nprint fib(10000)\n# also prints a big number,\n# but doesn't hit the recursion limit.",
        "code_language": "Python"
      }
    ],
    "title": "Tail Recursion Optimization Through Stack Introspection",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}