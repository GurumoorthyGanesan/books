{
  "ID": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
  "Root": {
    "alive": true,
    "content": [
      "5e265fde-25ff-4ecb-b77a-90037ce084e3",
      "83e29d1b-c5a2-4306-928c-e9ed95182dbc",
      "8cb3ffea-ccf4-4af7-92ca-85bbd401156c",
      "1dcff6bc-b3aa-4753-9224-7abc5e2d5994",
      "e9e7b32b-aad0-445e-a187-367738773b06",
      "a966102d-4d4b-45d7-b283-442c37f4e088",
      "11b9a3cc-cee3-4991-897a-675eaa9e7efe"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550392560000,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550476020000,
    "parent_id": "12e6f78e-68a5-4972-90c9-6e1365ae6259",
    "parent_table": "block",
    "permissions": [
      {
        "role": "editor",
        "type": "user_permission",
        "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
      }
    ],
    "properties": {
      "title": [
        [
          "Linked lists"
        ]
      ]
    },
    "type": "page",
    "version": 42,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550475960000,
        "id": "5e265fde-25ff-4ecb-b77a-90037ce084e3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550476020000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#draft not interesting"
            ]
          ]
        },
        "type": "text",
        "version": 41,
        "inline_content": [
          {
            "Text": "#draft not interesting"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392606713,
        "id": "83e29d1b-c5a2-4306-928c-e9ed95182dbc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550475960000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A linked list is a collection of nodes, each made up of a reference and a value. Nodes are strung together into a sequence using their references. Linked lists can be used to implement more complex data structures like lists, stacks, queues, and associative arrays."
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "A linked list is a collection of nodes, each made up of a reference and a value. Nodes are strung together into a sequence using their references. Linked lists can be used to implement more complex data structures like lists, stacks, queues, and associative arrays."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392608125,
        "id": "8cb3ffea-ccf4-4af7-92ca-85bbd401156c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550475960000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Single linked list example"
            ]
          ]
        },
        "type": "header",
        "version": 15,
        "inline_content": [
          {
            "Text": "Single linked list example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392608122,
        "id": "1dcff6bc-b3aa-4753-9224-7abc5e2d5994",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550475960000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example implements a linked list with many of the same methods as that of the built-in list object."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "This example implements a linked list with many of the same methods as that of the built-in list object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392608125,
        "id": "e9e7b32b-aad0-445e-a187-367738773b06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550475960000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class Node:\n    def __init__(self, val):\n        self.data = val\n        self.next = None\n\n    def getData(self):\n        return self.data\n\n    def getNext(self):\n        return self.next\n\n    def setData(self, val):\n        self.data = val\n\n    def setNext(self, val):\n        self.next = val\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def isEmpty(self):\n        \"\"\"Check if the list is empty\"\"\"\n        return self.head is None\n\n    def add(self, item):\n        \"\"\"Add the item to the list\"\"\"\n        new_node = Node(item)\n        new_node.setNext(self.head)\n        self.head = new_node\n\n    def size(self):\n        \"\"\"Return the length/size of the list\"\"\"\n        count = 0\n        current = self.head\n        while current is not None:\n            count += 1\n            current = current.getNext()\n        return count\n\n    def search(self, item):\n        \"\"\"Search for item in list. If found, return True. If not found, return False\"\"\"\n        current = self.head\n        found = False\n        while current is not None and not found:\n            if current.getData() is item:\n                found = True\n            else:\n                current = current.getNext()\n        return found\n\n    def remove(self, item):\n        \"\"\"Remove item from list. If item is not found in list, raise ValueError\"\"\"\n        current = self.head\n        previous = None\n        found = False\n        while current is not None and not found:\n            if current.getData() is item:\n                found = True\n            else:\n                previous = current\n                current = current.getNext()\n        if found:\n            if previous is None:\n                self.head = current.getNext()\n            else:\n                previous.setNext(current.getNext())\n        else:\n            raise ValueError\n            print 'Value not found.'\n\n    def insert(self, position, item):\n        \"\"\"\n        Insert item at position specified. If position specified is\n        out of bounds, raise IndexError\n        \"\"\"\n        if position \u003e self.size() - 1:\n            raise IndexError\n            print \"Index out of bounds.\"\n        current = self.head\n        previous = None\n        pos = 0\n        if position is 0:\n            self.add(item)\n        else:\n            new_node = Node(item)\n            while pos \u003c position:\n                pos += 1\n                previous = current\n                current = current.getNext()\n            previous.setNext(new_node)\n            new_node.setNext(current)\n\n    def index(self, item):\n        \"\"\"\n        Return the index where item is found.\n        If item is not found, return None.\n        \"\"\"\n        current = self.head\n        pos = 0\n        found = False\n        while current is not None and not found:\n            if current.getData() is item:\n                found = True\n            else:\n                current = current.getNext()\n                pos += 1\n        if found:\n            pass\n        else:\n            pos = None\n        return pos\n\n    def pop(self, position = None):\n        \"\"\"\n        If no argument is provided, return and remove the item at the head. \n        If position is provided, return and remove the item at that position.\n        If index is out of bounds, raise IndexError\n        \"\"\"\n        if position \u003e self.size():\n            print 'Index out of bounds'\n            raise IndexError\n            \n        current = self.head\n        if position is None:\n            ret = current.getData()\n            self.head = current.getNext()\n        else:\n            pos = 0\n            previous = None\n            while pos \u003c position:\n                previous = current\n                current = current.getNext()\n                pos += 1\n                ret = current.getData()\n            previous.setNext(current.getNext())\n        print ret\n        return ret\n\n    def append(self, item):\n        \"\"\"Append item to the end of the list\"\"\"\n        current = self.head\n        previous = None\n        pos = 0\n        length = self.size()\n        while pos \u003c length:\n            previous = current\n            current = current.getNext()\n            pos += 1\n        new_node = Node(item)\n        if previous is None:\n            new_node.setNext(current)\n            self.head = new_node\n        else:\n            previous.setNext(new_node)\n\n    def printList(self):\n        \"\"\"Print the list\"\"\"\n        current = self.head\n        while current is not None:\n            print current.getData()\n            current = current.getNext()"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "class Node:\n    def __init__(self, val):\n        self.data = val\n        self.next = None\n\n    def getData(self):\n        return self.data\n\n    def getNext(self):\n        return self.next\n\n    def setData(self, val):\n        self.data = val\n\n    def setNext(self, val):\n        self.next = val\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def isEmpty(self):\n        \"\"\"Check if the list is empty\"\"\"\n        return self.head is None\n\n    def add(self, item):\n        \"\"\"Add the item to the list\"\"\"\n        new_node = Node(item)\n        new_node.setNext(self.head)\n        self.head = new_node\n\n    def size(self):\n        \"\"\"Return the length/size of the list\"\"\"\n        count = 0\n        current = self.head\n        while current is not None:\n            count += 1\n            current = current.getNext()\n        return count\n\n    def search(self, item):\n        \"\"\"Search for item in list. If found, return True. If not found, return False\"\"\"\n        current = self.head\n        found = False\n        while current is not None and not found:\n            if current.getData() is item:\n                found = True\n            else:\n                current = current.getNext()\n        return found\n\n    def remove(self, item):\n        \"\"\"Remove item from list. If item is not found in list, raise ValueError\"\"\"\n        current = self.head\n        previous = None\n        found = False\n        while current is not None and not found:\n            if current.getData() is item:\n                found = True\n            else:\n                previous = current\n                current = current.getNext()\n        if found:\n            if previous is None:\n                self.head = current.getNext()\n            else:\n                previous.setNext(current.getNext())\n        else:\n            raise ValueError\n            print 'Value not found.'\n\n    def insert(self, position, item):\n        \"\"\"\n        Insert item at position specified. If position specified is\n        out of bounds, raise IndexError\n        \"\"\"\n        if position \u003e self.size() - 1:\n            raise IndexError\n            print \"Index out of bounds.\"\n        current = self.head\n        previous = None\n        pos = 0\n        if position is 0:\n            self.add(item)\n        else:\n            new_node = Node(item)\n            while pos \u003c position:\n                pos += 1\n                previous = current\n                current = current.getNext()\n            previous.setNext(new_node)\n            new_node.setNext(current)\n\n    def index(self, item):\n        \"\"\"\n        Return the index where item is found.\n        If item is not found, return None.\n        \"\"\"\n        current = self.head\n        pos = 0\n        found = False\n        while current is not None and not found:\n            if current.getData() is item:\n                found = True\n            else:\n                current = current.getNext()\n                pos += 1\n        if found:\n            pass\n        else:\n            pos = None\n        return pos\n\n    def pop(self, position = None):\n        \"\"\"\n        If no argument is provided, return and remove the item at the head. \n        If position is provided, return and remove the item at that position.\n        If index is out of bounds, raise IndexError\n        \"\"\"\n        if position \u003e self.size():\n            print 'Index out of bounds'\n            raise IndexError\n            \n        current = self.head\n        if position is None:\n            ret = current.getData()\n            self.head = current.getNext()\n        else:\n            pos = 0\n            previous = None\n            while pos \u003c position:\n                previous = current\n                current = current.getNext()\n                pos += 1\n                ret = current.getData()\n            previous.setNext(current.getNext())\n        print ret\n        return ret\n\n    def append(self, item):\n        \"\"\"Append item to the end of the list\"\"\"\n        current = self.head\n        previous = None\n        pos = 0\n        length = self.size()\n        while pos \u003c length:\n            previous = current\n            current = current.getNext()\n            pos += 1\n        new_node = Node(item)\n        if previous is None:\n            new_node.setNext(current)\n            self.head = new_node\n        else:\n            previous.setNext(new_node)\n\n    def printList(self):\n        \"\"\"Print the list\"\"\"\n        current = self.head\n        while current is not None:\n            print current.getData()\n            current = current.getNext()",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392608125,
        "id": "a966102d-4d4b-45d7-b283-442c37f4e088",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550475960000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage functions much like that of the built-in list."
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Usage functions much like that of the built-in list."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550392608125,
        "id": "11b9a3cc-cee3-4991-897a-675eaa9e7efe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550475960000,
        "parent_id": "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ll = LinkedList()\nll.add('l')\nll.add('H')\nll.insert(1,'e')\nll.append('l')\nll.append('o')\nll.printList()\n\nH\ne\nl\nl\no"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "ll = LinkedList()\nll.add('l')\nll.add('H')\nll.insert(1,'e')\nll.append('l')\nll.append('o')\nll.printList()\n\nH\ne\nl\nl\no",
        "code_language": "Plain Text"
      }
    ],
    "title": "Linked lists",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}