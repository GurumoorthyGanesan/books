{
  "ID": "48ec0bea-b568-4988-9e34-ad4d2656cc43",
  "Root": {
    "alive": true,
    "content": [
      "9ab3dc03-10b1-491d-91b2-0a692e926043",
      "d638c4e6-eee6-401e-9c1e-6bda664f8c00",
      "1ec4c319-2fa3-405c-8c11-4e79b52a3d3b",
      "185d2312-b2d6-492e-b19c-ef84dfd29cde"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550350308083,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "48ec0bea-b568-4988-9e34-ad4d2656cc43",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550350320000,
    "parent_id": "ec88d89c-f50d-4507-ae65-fbd967413251",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Operator Overloading"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350308081,
        "id": "9ab3dc03-10b1-491d-91b2-0a692e926043",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350308081,
        "parent_id": "48ec0bea-b568-4988-9e34-ad4d2656cc43",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Everything in Python is an object. Each object has some special internal methods which it uses to interact with other objects. Generally, these methods follow the "
            ],
            [
              "__action__",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " naming convention. Collectively, this is termed as the "
            ],
            [
              "Python Data Model",
              [
                [
                  "a",
                  "https://docs.python.org/2/reference/datamodel.html"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Everything in Python is an object. Each object has some special internal methods which it uses to interact with other objects. Generally, these methods follow the "
          },
          {
            "Text": "__action__",
            "AttrFlags": 2
          },
          {
            "Text": " naming convention. Collectively, this is termed as the "
          },
          {
            "Text": "Python Data Model",
            "Link": "https://docs.python.org/2/reference/datamodel.html"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350308082,
        "id": "d638c4e6-eee6-401e-9c1e-6bda664f8c00",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350308082,
        "parent_id": "48ec0bea-b568-4988-9e34-ad4d2656cc43",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can overload "
            ],
            [
              "any",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " of these methods. This is commonly used in operator overloading in Python. Below is an example of operator overloading using Python’s data model. The "
            ],
            [
              "Vector",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " class creates a simple vector of two variables. We’ll add appropriate support for mathematical operations of two vectors using operator overloading."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can overload "
          },
          {
            "Text": "any",
            "AttrFlags": 4
          },
          {
            "Text": " of these methods. This is commonly used in operator overloading in Python. Below is an example of operator overloading using Python’s data model. The "
          },
          {
            "Text": "Vector",
            "AttrFlags": 2
          },
          {
            "Text": " class creates a simple vector of two variables. We’ll add appropriate support for mathematical operations of two vectors using operator overloading."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350308082,
        "id": "1ec4c319-2fa3-405c-8c11-4e79b52a3d3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350320000,
        "parent_id": "48ec0bea-b568-4988-9e34-ad4d2656cc43",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "class Vector(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        # Addition with another vector.\n        return Vector(self.x + v.x, self.y + v.y)\n\n    def __sub__(self, v):\n        # Subtraction with another vector.\n        return Vector(self.x - v.x, self.y - v.y)\n\n    def __mul__(self, s):\n        # Multiplication with a scalar.\n        return Vector(self.x * s, self.y * s)\n\n    def __div__(self, s):\n        # Division with a scalar.\n        float_s = float(s)\n        return Vector(self.x / float_s, self.y / float_s)\n\n    def __floordiv__(self, s):\n        # Division with a scalar (value floored).\n        return Vector(self.x // s, self.y // s)\n\n    def __repr__(self):\n        # Print friendly representation of Vector class. Else, it would\n        # show up like, \u003c__main__.Vector instance at 0x01DDDDC8\u003e.\n        return '\u003cVector (%f, %f)\u003e' % (self.x, self.y, )\n\na = Vector(3, 5)\nb = Vector(2, 7)\n\nprint a + b # Output: \u003cVector (5.000000, 12.000000)\u003e\nprint b - a # Output: \u003cVector (-1.000000, 2.000000)\u003e\nprint b * 1.3 # Output: \u003cVector (2.600000, 9.100000)\u003e\nprint a // 17 # Output: \u003cVector (0.000000, 0.000000)\u003e\nprint a / 17 # Output: \u003cVector (0.176471, 0.294118)\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "class Vector(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        # Addition with another vector.\n        return Vector(self.x + v.x, self.y + v.y)\n\n    def __sub__(self, v):\n        # Subtraction with another vector.\n        return Vector(self.x - v.x, self.y - v.y)\n\n    def __mul__(self, s):\n        # Multiplication with a scalar.\n        return Vector(self.x * s, self.y * s)\n\n    def __div__(self, s):\n        # Division with a scalar.\n        float_s = float(s)\n        return Vector(self.x / float_s, self.y / float_s)\n\n    def __floordiv__(self, s):\n        # Division with a scalar (value floored).\n        return Vector(self.x // s, self.y // s)\n\n    def __repr__(self):\n        # Print friendly representation of Vector class. Else, it would\n        # show up like, \u003c__main__.Vector instance at 0x01DDDDC8\u003e.\n        return '\u003cVector (%f, %f)\u003e' % (self.x, self.y, )\n\na = Vector(3, 5)\nb = Vector(2, 7)\n\nprint a + b # Output: \u003cVector (5.000000, 12.000000)\u003e\nprint b - a # Output: \u003cVector (-1.000000, 2.000000)\u003e\nprint b * 1.3 # Output: \u003cVector (2.600000, 9.100000)\u003e\nprint a // 17 # Output: \u003cVector (0.000000, 0.000000)\u003e\nprint a / 17 # Output: \u003cVector (0.176471, 0.294118)\u003e",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550350308083,
        "id": "185d2312-b2d6-492e-b19c-ef84dfd29cde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550350308083,
        "parent_id": "48ec0bea-b568-4988-9e34-ad4d2656cc43",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above example demonstrates overloading of basic numeric operators. A comprehensive list can be found "
            ],
            [
              "here",
              [
                [
                  "a",
                  "https://docs.python.org/2/reference/datamodel.html?object.__getattr__#emulating-numeric-types"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above example demonstrates overloading of basic numeric operators. A comprehensive list can be found "
          },
          {
            "Text": "here",
            "Link": "https://docs.python.org/2/reference/datamodel.html?object.__getattr__#emulating-numeric-types"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Operator Overloading",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}