{
  "ID": "35439756-156a-45e3-9cf7-3162a132bd37",
  "Root": {
    "alive": true,
    "content": [
      "06f78c84-e710-44f8-b1f9-bfe897ce29b2",
      "d8f4c9b3-e79d-46b8-9227-197d6d791c13",
      "48e2281d-11c0-458a-80fd-f37d07b1cc93",
      "c7dc6449-8812-430f-9d93-efc6ef896cab",
      "97166356-13cf-4f05-9e33-95f48e5daabb",
      "3583cab4-d30d-48dc-a94e-eba2956df279",
      "55e7fc1b-c61e-47bc-b42d-577693eaf5ed",
      "46f56440-159b-4c73-a76a-458c3a0b6d18",
      "03b88a15-8f92-4c1f-b100-69f894881632",
      "66f1d182-23c8-4c32-b806-c7760b3c4ed4",
      "0e7c6601-f047-47cd-8a10-a3e9ac772725",
      "9bcc1d70-1ad6-4747-a2c5-01a74a1741db",
      "a302231b-f1c5-4701-afbe-bc96fad9d4a6",
      "00b58376-0c36-4390-8966-b3b9137ab778",
      "22e85a9c-167b-4a63-86c8-8d19186b5f8e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550229430868,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "35439756-156a-45e3-9cf7-3162a132bd37",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550230140000,
    "parent_id": "eecffaeb-508c-45b9-93c4-ae07958e5f67",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "List Comprehensions with Nested Loops"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430864,
        "id": "06f78c84-e710-44f8-b1f9-bfe897ce29b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430864,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "List Comprehensions",
              [
                [
                  "a",
                  "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
                ]
              ]
            ],
            [
              " can use nested "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loops. You can code any number of nested for loops within a list comprehension, and each "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop may have an optional associated "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " test. When doing so, the order of the "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructs is the same order as when writing a series of nested "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements. The general structure of list comprehensions looks like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "List Comprehensions",
            "Link": "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
          },
          {
            "Text": " can use nested "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loops. You can code any number of nested for loops within a list comprehension, and each "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop may have an optional associated "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": " test. When doing so, the order of the "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " constructs is the same order as when writing a series of nested "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " statements. The general structure of list comprehensions looks like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430865,
        "id": "d8f4c9b3-e79d-46b8-9227-197d6d791c13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550230140000,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "[ expression for target1 in iterable1 [if condition1]\n             for target2 in iterable2 [if condition2]...\n             for targetN in iterableN [if conditionN] ]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "[ expression for target1 in iterable1 [if condition1]\n             for target2 in iterable2 [if condition2]...\n             for targetN in iterableN [if conditionN] ]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430865,
        "id": "48e2281d-11c0-458a-80fd-f37d07b1cc93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430865,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example, the following code flattening a list of lists using multiple "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statements:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example, the following code flattening a list of lists using multiple "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " statements:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430865,
        "id": "c7dc6449-8812-430f-9d93-efc6ef896cab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550230140000,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "data = [[1, 2], [3, 4], [5, 6]]\noutput = []\nfor each_list in data:\n    for element in each_list:\n        output.append(element)\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "data = [[1, 2], [3, 4], [5, 6]]\noutput = []\nfor each_list in data:\n    for element in each_list:\n        output.append(element)\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430866,
        "id": "97166356-13cf-4f05-9e33-95f48e5daabb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430866,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "can be equivalently written as a list comprehension with multiple "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructs:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "can be equivalently written as a list comprehension with multiple "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " constructs:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430866,
        "id": "3583cab4-d30d-48dc-a94e-eba2956df279",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550230140000,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "data = [[1, 2], [3, 4], [5, 6]]\noutput = [element for each_list in data for element in each_list]\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "data = [[1, 2], [3, 4], [5, 6]]\noutput = [element for each_list in data for element in each_list]\nprint(output)\n# Out: [1, 2, 3, 4, 5, 6]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430866,
        "id": "55e7fc1b-c61e-47bc-b42d-577693eaf5ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430866,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Demo",
              [
                [
                  "a",
                  "https://ideone.com/R7uwEP"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Demo",
            "Link": "https://ideone.com/R7uwEP"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430866,
        "id": "46f56440-159b-4c73-a76a-458c3a0b6d18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430866,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In both the expanded form and the list comprehension, the outer loop (first for statement) comes first."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In both the expanded form and the list comprehension, the outer loop (first for statement) comes first."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430866,
        "id": "03b88a15-8f92-4c1f-b100-69f894881632",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430866,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In addition to being more compact, the nested comprehension is also significantly faster."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In addition to being more compact, the nested comprehension is also significantly faster."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430866,
        "id": "66f1d182-23c8-4c32-b806-c7760b3c4ed4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550230140000,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "In [1]: data = [[1,2],[3,4],[5,6]]\nIn [2]: def f():\n   ...:     output=[]\n   ...:     for each_list in data:\n   ...:         for element in each_list:\n   ...:             output.append(element)\n   ...:     return output\nIn [3]: timeit f()\n1000000 loops, best of 3: 1.37 µs per loop\nIn [4]: timeit [inner for outer in data for inner in outer]\n1000000 loops, best of 3: 632 ns per loop"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "In [1]: data = [[1,2],[3,4],[5,6]]\nIn [2]: def f():\n   ...:     output=[]\n   ...:     for each_list in data:\n   ...:         for element in each_list:\n   ...:             output.append(element)\n   ...:     return output\nIn [3]: timeit f()\n1000000 loops, best of 3: 1.37 µs per loop\nIn [4]: timeit [inner for outer in data for inner in outer]\n1000000 loops, best of 3: 632 ns per loop",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430867,
        "id": "0e7c6601-f047-47cd-8a10-a3e9ac772725",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430867,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The overhead for the function call above is about "
            ],
            [
              "140ns",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The overhead for the function call above is about "
          },
          {
            "Text": "140ns",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430867,
        "id": "9bcc1d70-1ad6-4747-a2c5-01a74a1741db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430867,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Inline "
            ],
            [
              "if",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s are nested similarly, and may occur in any position after the first "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Inline "
          },
          {
            "Text": "if",
            "AttrFlags": 2
          },
          {
            "Text": "s are nested similarly, and may occur in any position after the first "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430867,
        "id": "a302231b-f1c5-4701-afbe-bc96fad9d4a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550230140000,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "data = [[1], [2, 3], [4, 5]]\noutput = [element for each_list in data\n                if len(each_list) == 2\n                for element in each_list\n                if element != 5]\nprint(output)\n# Out: [2, 3, 4]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "data = [[1], [2, 3], [4, 5]]\noutput = [element for each_list in data\n                if len(each_list) == 2\n                for element in each_list\n                if element != 5]\nprint(output)\n# Out: [2, 3, 4]",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430867,
        "id": "00b58376-0c36-4390-8966-b3b9137ab778",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430867,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Live Demo",
              [
                [
                  "a",
                  "https://ideone.com/kPO2Zy"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Live Demo",
            "Link": "https://ideone.com/kPO2Zy"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550229430868,
        "id": "22e85a9c-167b-4a63-86c8-8d19186b5f8e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550229430868,
        "parent_id": "35439756-156a-45e3-9cf7-3162a132bd37",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For the sake of readability, however, you should consider using traditional "
            ],
            [
              "for-loops",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". This is especially true when nesting is more than 2 levels deep, and/or the logic of the comprehension is too complex. multiple nested loop list comprehension could be error prone or it gives unexpected result."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For the sake of readability, however, you should consider using traditional "
          },
          {
            "Text": "for-loops",
            "AttrFlags": 4
          },
          {
            "Text": ". This is especially true when nesting is more than 2 levels deep, and/or the logic of the comprehension is too complex. multiple nested loop list comprehension could be error prone or it gives unexpected result."
          }
        ]
      }
    ],
    "title": "List Comprehensions with Nested Loops",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}