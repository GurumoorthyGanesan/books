{
  "ID": "59ead96b-a0d7-4622-90db-9ac6399421f7",
  "Root": {
    "alive": true,
    "content": [
      "8cef15cd-a1dc-441b-8d0c-73b07efca6dc",
      "a0cde743-31d0-4bd1-bf63-f6d94d0f02c1",
      "972ecd25-f151-4cb2-8131-05c5b8b4d81e",
      "a5b65591-b5c3-48a0-a248-3cde28e0396d",
      "79e828a0-a6ff-4e94-8a2b-fed1e5047628",
      "6c924ae5-ca7c-4952-9348-f65382b4f1a8",
      "d06af33c-ab65-4e6f-a703-5bef9643dc2a",
      "04d1bfa0-3839-406a-86bf-8946f4159d9e",
      "4c21fa14-0692-4825-955f-e211ce5b8a0e"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550347304398,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550347440000,
    "parent_id": "d0dd18a7-d6eb-4149-9290-6d2c0563e346",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Matching the beginning of a string"
        ]
      ]
    },
    "type": "page",
    "version": 10,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304391,
        "id": "8cef15cd-a1dc-441b-8d0c-73b07efca6dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347304391,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The first argument of "
            ],
            [
              "re.match()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the regular expression, the second is the string to match:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The first argument of "
          },
          {
            "Text": "re.match()",
            "AttrFlags": 2
          },
          {
            "Text": " is the regular expression, the second is the string to match:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304394,
        "id": "a0cde743-31d0-4bd1-bf63-f6d94d0f02c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347440000,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "import re\n\npattern = r\"123\"\nstring = \"123zzb\"\n\nre.match(pattern, string)\n# Out: \u003c_sre.SRE_Match object; span=(0, 3), match='123'\u003e\n\nmatch = re.match(pattern, string)\n\nmatch.group()\n# Out: '123'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "import re\n\npattern = r\"123\"\nstring = \"123zzb\"\n\nre.match(pattern, string)\n# Out: \u003c_sre.SRE_Match object; span=(0, 3), match='123'\u003e\n\nmatch = re.match(pattern, string)\n\nmatch.group()\n# Out: '123'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304394,
        "id": "972ecd25-f151-4cb2-8131-05c5b8b4d81e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347304394,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may notice that the pattern variable is a string prefixed with "
            ],
            [
              "r",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which indicates that the string is a "
            ],
            [
              "raw string literal",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may notice that the pattern variable is a string prefixed with "
          },
          {
            "Text": "r",
            "AttrFlags": 2
          },
          {
            "Text": ", which indicates that the string is a "
          },
          {
            "Text": "raw string literal",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304395,
        "id": "a5b65591-b5c3-48a0-a248-3cde28e0396d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347304395,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A raw string literal has a slightly different syntax than a string literal, namely a backslash "
            ],
            [
              "\\\\",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a raw string literal means “just a backslash” and there’s no need for doubling up backlashes to escape “escape sequences” such as newlines ("
            ],
            [
              "\\n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), tabs ("
            ],
            [
              "\\t",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), backspaces ("
            ],
            [
              "\\\\",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), form-feeds ("
            ],
            [
              "\\r",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), and so on. In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A raw string literal has a slightly different syntax than a string literal, namely a backslash "
          },
          {
            "Text": "\\\\",
            "AttrFlags": 2
          },
          {
            "Text": " in a raw string literal means “just a backslash” and there’s no need for doubling up backlashes to escape “escape sequences” such as newlines ("
          },
          {
            "Text": "\\n",
            "AttrFlags": 2
          },
          {
            "Text": "), tabs ("
          },
          {
            "Text": "\\t",
            "AttrFlags": 2
          },
          {
            "Text": "), backspaces ("
          },
          {
            "Text": "\\\\",
            "AttrFlags": 2
          },
          {
            "Text": "), form-feeds ("
          },
          {
            "Text": "\\r",
            "AttrFlags": 2
          },
          {
            "Text": "), and so on. In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304395,
        "id": "79e828a0-a6ff-4e94-8a2b-fed1e5047628",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347304395,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Hence, "
            ],
            [
              "r\"\\n\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a string of 2 characters: "
            ],
            [
              "\\\\",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Regex patterns also use backslashes, e.g. "
            ],
            [
              "\\d",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " refers to any digit character. We can avoid having to double escape our strings ("
            ],
            [
              "\"\\\\d\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") by using raw strings ("
            ],
            [
              "r\"\\d\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Hence, "
          },
          {
            "Text": "r\"\\n\"",
            "AttrFlags": 2
          },
          {
            "Text": " is a string of 2 characters: "
          },
          {
            "Text": "\\\\",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": ". Regex patterns also use backslashes, e.g. "
          },
          {
            "Text": "\\d",
            "AttrFlags": 2
          },
          {
            "Text": " refers to any digit character. We can avoid having to double escape our strings ("
          },
          {
            "Text": "\"\\\\d\"",
            "AttrFlags": 2
          },
          {
            "Text": ") by using raw strings ("
          },
          {
            "Text": "r\"\\d\"",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304395,
        "id": "6c924ae5-ca7c-4952-9348-f65382b4f1a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347304396,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For instance:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For instance:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304396,
        "id": "d06af33c-ab65-4e6f-a703-5bef9643dc2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347440000,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "string = \"\\\\t123zzb\" # here the backslash is escaped, so there's no tab, just '\\' and 't'\npattern = \"\\\\t123\"   # this will match \\t (escaping the backslash) followed by 123\nre.match(pattern, string).group()   # no match\nre.match(pattern, \"\\t123zzb\").group()  # matches '\\t123'\n\npattern = r\"\\\\t123\"  \nre.match(pattern, string).group()   # matches '\\\\t123'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "string = \"\\\\t123zzb\" # here the backslash is escaped, so there's no tab, just '\\' and 't'\npattern = \"\\\\t123\"   # this will match \\t (escaping the backslash) followed by 123\nre.match(pattern, string).group()   # no match\nre.match(pattern, \"\\t123zzb\").group()  # matches '\\t123'\n\npattern = r\"\\\\t123\"  \nre.match(pattern, string).group()   # matches '\\\\t123'",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304397,
        "id": "04d1bfa0-3839-406a-86bf-8946f4159d9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347304397,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Matching is done from the start of the string only. If you want to match anywhere use "
            ],
            [
              "re.search",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://stackoverflow.com/documentation/python/632/regular-expressions-regex/2065/searching"
                ]
              ]
            ],
            [
              " instead:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Matching is done from the start of the string only. If you want to match anywhere use "
          },
          {
            "Text": "re.search",
            "AttrFlags": 2,
            "Link": "https://stackoverflow.com/documentation/python/632/regular-expressions-regex/2065/searching"
          },
          {
            "Text": " instead:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550347304398,
        "id": "4c21fa14-0692-4825-955f-e211ce5b8a0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550347440000,
        "parent_id": "59ead96b-a0d7-4622-90db-9ac6399421f7",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "match = re.match(r\"(123)\", \"a123zzb\")\n\nmatch is None\n# Out: True\n\nmatch = re.search(r\"(123)\", \"a123zzb\")\n\nmatch.group()\n# Out: '123'"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "match = re.match(r\"(123)\", \"a123zzb\")\n\nmatch is None\n# Out: True\n\nmatch = re.search(r\"(123)\", \"a123zzb\")\n\nmatch.group()\n# Out: '123'",
        "code_language": "Python"
      }
    ],
    "title": "Matching the beginning of a string",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}