{
  "ID": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
  "Root": {
    "alive": true,
    "content": [
      "ae3fd9cc-58c7-46c1-a1db-8294bbae3cb3",
      "4b95ce33-677d-4e35-9b24-7c5f208efd19",
      "92e2b047-79a7-403d-8a1d-f39602fa24d2",
      "a83cc66b-9a82-4cbe-b590-38d61beabf94",
      "9dd7e241-7192-4f96-970b-e5568303ba67",
      "ba2f08d2-2ae7-4142-8324-998c6b7e8ddd",
      "5efb35b6-d63a-4fbb-95a5-bac21e99da8d",
      "ca62cb1f-2aef-4776-a596-51bafad24a06",
      "06793c44-cf23-4f96-a752-cbf33a667cdc",
      "dc2e7e7b-40fd-43fc-a154-6a40cb8bbd28",
      "254bece5-7200-48bf-8afb-a578c46116cd",
      "4fa8cc3f-521a-4047-a5c4-495346302514",
      "e78ed10b-b520-4072-8a28-50eb229d5785",
      "d424ad48-e4e6-4534-a27b-a60e64f31156",
      "d0b32b2c-ebbf-414f-b887-2290eac30428",
      "6087eadf-81bb-46a3-842c-44586057f9fc",
      "16f8392a-0a77-4cca-abf4-01c38a9b7d9d",
      "536e5d0b-d527-4742-ab9c-2d118fa3cc21",
      "028fd509-3caa-4794-a26b-ffee5932a28b",
      "6adedcbe-c668-4942-a233-922eb8abe3c3",
      "f495ae04-d564-4766-84b3-0c046f1b698b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715897188,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551594900000,
    "parent_id": "337f40a2-6b9b-4941-a028-cebbb21ea965",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Benchmarking your code - measuring execution time"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897179,
        "id": "ae3fd9cc-58c7-46c1-a1db-8294bbae3cb3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897179,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most performance tips are very dependent of the current state of JS engines and are expected to be only relevant at a given time. The fundamental law of performance optimization is that you must first measure before trying to optimize, and measure again after a presumed optimization."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most performance tips are very dependent of the current state of JS engines and are expected to be only relevant at a given time. The fundamental law of performance optimization is that you must first measure before trying to optimize, and measure again after a presumed optimization."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897180,
        "id": "4b95ce33-677d-4e35-9b24-7c5f208efd19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897180,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To measure code execution time, you can use different time measurement tools like:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To measure code execution time, you can use different time measurement tools like:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897181,
        "id": "92e2b047-79a7-403d-8a1d-f39602fa24d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897181,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Performance",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/API/Performance"
                ]
              ]
            ],
            [
              " interface that represents timing-related performance information for the given page (only available in browsers)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Performance",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance"
          },
          {
            "Text": " interface that represents timing-related performance information for the given page (only available in browsers)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897181,
        "id": "a83cc66b-9a82-4cbe-b590-38d61beabf94",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897181,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "process.hrtime",
              [
                [
                  "a",
                  "https://nodejs.org/api/process.html#process_process_hrtime_time"
                ]
              ]
            ],
            [
              " on Node.js gives you timing information as [seconds, nanoseconds] tuples. Called without argument it returns an arbitrary time but called with a previously returned value as argument it returns the difference between the two executions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "process.hrtime",
            "Link": "https://nodejs.org/api/process.html#process_process_hrtime_time"
          },
          {
            "Text": " on Node.js gives you timing information as [seconds, nanoseconds] tuples. Called without argument it returns an arbitrary time but called with a previously returned value as argument it returns the difference between the two executions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897182,
        "id": "9dd7e241-7192-4f96-970b-e5568303ba67",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897182,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Console timers",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/API/Console/time"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "console.time(\"labelName\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " starts a timer you can use to track how long an operation takes. You give each timer a unique label name, and may have up to 10,000 timers running on a given page. When you call "
            ],
            [
              "console.timeEnd(\"labelName\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with the same name, the browser will finish the timer for given name and output the time in milliseconds, that elapsed since the timer was started. The strings passed to time() and timeEnd() must match otherwise the timer will not finish."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Console timers",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/API/Console/time"
          },
          {
            "Text": " "
          },
          {
            "Text": "console.time(\"labelName\")",
            "AttrFlags": 2
          },
          {
            "Text": " starts a timer you can use to track how long an operation takes. You give each timer a unique label name, and may have up to 10,000 timers running on a given page. When you call "
          },
          {
            "Text": "console.timeEnd(\"labelName\")",
            "AttrFlags": 2
          },
          {
            "Text": " with the same name, the browser will finish the timer for given name and output the time in milliseconds, that elapsed since the timer was started. The strings passed to time() and timeEnd() must match otherwise the timer will not finish."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897183,
        "id": "ba2f08d2-2ae7-4142-8324-998c6b7e8ddd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897183,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Date.now",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now"
                ]
              ]
            ],
            [
              " function "
            ],
            [
              "Date.now()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns current "
            ],
            [
              "Timestamp",
              [
                [
                  "a",
                  "http://www.unixtimestamp.com/"
                ]
              ]
            ],
            [
              " in milliseconds, which is a "
            ],
            [
              "Number",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"
                ]
              ]
            ],
            [
              " representation of time since 1 January 1970 00:00:00 UTC until now. The method now() is a static method of Date, therefore you always use it as Date.now()."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Date.now",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now"
          },
          {
            "Text": " function "
          },
          {
            "Text": "Date.now()",
            "AttrFlags": 2
          },
          {
            "Text": " returns current "
          },
          {
            "Text": "Timestamp",
            "Link": "http://www.unixtimestamp.com/"
          },
          {
            "Text": " in milliseconds, which is a "
          },
          {
            "Text": "Number",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"
          },
          {
            "Text": " representation of time since 1 January 1970 00:00:00 UTC until now. The method now() is a static method of Date, therefore you always use it as Date.now()."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897183,
        "id": "5efb35b6-d63a-4fbb-95a5-bac21e99da8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897183,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 1",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using: "
            ],
            [
              "performance.now()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 1",
            "AttrFlags": 1
          },
          {
            "Text": " using: "
          },
          {
            "Text": "performance.now()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897184,
        "id": "ca62cb1f-2aef-4776-a596-51bafad24a06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897184,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example we are going to calculate the elapsed time for the execution of our function, and we are going to use the "
            ],
            [
              "Performance.now()",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"
                ]
              ]
            ],
            [
              " method that returns a "
            ],
            [
              "DOMHighResTimeStamp",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp"
                ]
              ]
            ],
            [
              ", measured in milliseconds, accurate to one thousandth of a millisecond."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example we are going to calculate the elapsed time for the execution of our function, and we are going to use the "
          },
          {
            "Text": "Performance.now()",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"
          },
          {
            "Text": " method that returns a "
          },
          {
            "Text": "DOMHighResTimeStamp",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp"
          },
          {
            "Text": ", measured in milliseconds, accurate to one thousandth of a millisecond."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897184,
        "id": "06793c44-cf23-4f96-a752-cbf33a667cdc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594900000,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "let startTime, endTime;\n\nfunction myFunction() {\n    //Slow code you want to measure\n}\n\n//Get the start time\nstartTime = performance.now();\n\n//Call the time-consuming function\nmyFunction();\n\n//Get the end time\nendTime = performance.now();\n\n//The difference is how many milliseconds it took to call myFunction()\nconsole.debug('Elapsed time:', (endTime - startTime));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "let startTime, endTime;\n\nfunction myFunction() {\n    //Slow code you want to measure\n}\n\n//Get the start time\nstartTime = performance.now();\n\n//Call the time-consuming function\nmyFunction();\n\n//Get the end time\nendTime = performance.now();\n\n//The difference is how many milliseconds it took to call myFunction()\nconsole.debug('Elapsed time:', (endTime - startTime));",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897185,
        "id": "dc2e7e7b-40fd-43fc-a154-6a40cb8bbd28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897185,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result in console will look something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result in console will look something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897185,
        "id": "254bece5-7200-48bf-8afb-a578c46116cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897185,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Elapsed time: 0.10000000009313226"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Elapsed time: 0.10000000009313226",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897186,
        "id": "4fa8cc3f-521a-4047-a5c4-495346302514",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897186,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage of "
            ],
            [
              "performance.now()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"
                ]
              ]
            ],
            [
              " has the highest precision in browsers with accuracy to one thousandth of a millisecond, but the lowest "
            ],
            [
              "compatibility",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Browser_compatibility"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage of "
          },
          {
            "Text": "performance.now()",
            "AttrFlags": 2,
            "Link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"
          },
          {
            "Text": " has the highest precision in browsers with accuracy to one thousandth of a millisecond, but the lowest "
          },
          {
            "Text": "compatibility",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Browser_compatibility"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897186,
        "id": "e78ed10b-b520-4072-8a28-50eb229d5785",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897186,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 2",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using: "
            ],
            [
              "Date.now()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 2",
            "AttrFlags": 1
          },
          {
            "Text": " using: "
          },
          {
            "Text": "Date.now()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897186,
        "id": "d424ad48-e4e6-4534-a27b-a60e64f31156",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897186,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example we are going to calculate the elapsed time for the initialization of a big array (1 million values), and we are going to use the "
            ],
            [
              "Date.now()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example we are going to calculate the elapsed time for the initialization of a big array (1 million values), and we are going to use the "
          },
          {
            "Text": "Date.now()",
            "AttrFlags": 2
          },
          {
            "Text": " method"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897186,
        "id": "d0b32b2c-ebbf-414f-b887-2290eac30428",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594900000,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "let t0 = Date.now(); //stores current Timestamp in milliseconds since 1 January 1970 00:00:00 UTC\nlet arr = []; //store empty array\nfor (let i = 0; i \u003c 1000000; i++) { //1 million iterations\n   arr.push(i); //push current i value\n}\nconsole.log(Date.now() - t0); //print elapsed time between stored t0 and now"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "let t0 = Date.now(); //stores current Timestamp in milliseconds since 1 January 1970 00:00:00 UTC\nlet arr = []; //store empty array\nfor (let i = 0; i \u003c 1000000; i++) { //1 million iterations\n   arr.push(i); //push current i value\n}\nconsole.log(Date.now() - t0); //print elapsed time between stored t0 and now",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897187,
        "id": "6087eadf-81bb-46a3-842c-44586057f9fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897187,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example 3",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using: "
            ],
            [
              "console.time(\"label\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " \u0026 "
            ],
            [
              "console.timeEnd(\"label\")",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example 3",
            "AttrFlags": 1
          },
          {
            "Text": " using: "
          },
          {
            "Text": "console.time(\"label\")",
            "AttrFlags": 2
          },
          {
            "Text": " \u0026 "
          },
          {
            "Text": "console.timeEnd(\"label\")",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897187,
        "id": "16f8392a-0a77-4cca-abf4-01c38a9b7d9d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897187,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example we are doing the same task as in Example 2, but we are going to use the "
            ],
            [
              "console.time(\"label\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " \u0026 "
            ],
            [
              "console.timeEnd(\"label\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " methods"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example we are doing the same task as in Example 2, but we are going to use the "
          },
          {
            "Text": "console.time(\"label\")",
            "AttrFlags": 2
          },
          {
            "Text": " \u0026 "
          },
          {
            "Text": "console.timeEnd(\"label\")",
            "AttrFlags": 2
          },
          {
            "Text": " methods"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897187,
        "id": "536e5d0b-d527-4742-ab9c-2d118fa3cc21",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594900000,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "console.time(\"t\"); //start new timer for label name: \"t\"\nlet arr = []; //store empty array\nfor(let i = 0; i \u003c 1000000; i++) { //1 million iterations\n   arr.push(i); //push current i value\n}\nconsole.timeEnd(\"t\"); //stop the timer for label name: \"t\" and print elapsed time"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "console.time(\"t\"); //start new timer for label name: \"t\"\nlet arr = []; //store empty array\nfor(let i = 0; i \u003c 1000000; i++) { //1 million iterations\n   arr.push(i); //push current i value\n}\nconsole.timeEnd(\"t\"); //stop the timer for label name: \"t\" and print elapsed time",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897187,
        "id": "028fd509-3caa-4794-a26b-ffee5932a28b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897187,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Exemple 4",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " using "
            ],
            [
              "process.hrtime()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Exemple 4",
            "AttrFlags": 1
          },
          {
            "Text": " using "
          },
          {
            "Text": "process.hrtime()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897187,
        "id": "6adedcbe-c668-4942-a233-922eb8abe3c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715897187,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In Node.js programs this is the most precise way to measure spent time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In Node.js programs this is the most precise way to measure spent time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715897188,
        "id": "f495ae04-d564-4766-84b3-0c046f1b698b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594900000,
        "parent_id": "cbdadda0-d052-4285-8e79-10bea59a5ceb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "let start = process.hrtime();\n\n// long execution here, maybe asynchronous\n\nlet diff = process.hrtime(start);\n// returns for example [ 1, 2325 ]\nconsole.log(`Operation took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n// logs: Operation took 1000002325 nanoseconds"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "let start = process.hrtime();\n\n// long execution here, maybe asynchronous\n\nlet diff = process.hrtime(start);\n// returns for example [ 1, 2325 ]\nconsole.log(`Operation took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n// logs: Operation took 1000002325 nanoseconds",
        "code_language": "JavaScript"
      }
    ],
    "title": "Benchmarking your code - measuring execution time",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}