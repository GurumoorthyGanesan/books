{
  "ID": "1d97859f-1edb-4a2b-8128-2945741b938f",
  "Root": {
    "alive": true,
    "content": [
      "a58c5fb3-3040-4183-81c9-2a5e09843b2c",
      "343c3e9d-ba05-41e7-a769-cecc40e19e87",
      "98f73cf6-396c-4d37-bcfb-e3ba90797181",
      "3c90f278-fa07-4dbf-b194-845db5dfb990",
      "360f95e2-6965-4ea0-943f-550d2d6a70d9",
      "b960e59b-7d4a-46c1-8d9b-be93a119d096",
      "c01916ba-0742-4387-a286-59a836428c1a",
      "ca7df3cb-015e-432f-9dbc-ce4f45178529",
      "3aefef2c-91f9-4522-bcef-7339adbe479e",
      "fcadc728-4a9d-4f10-9e9b-9702e4743293",
      "094a7a62-d652-4b02-9b34-1ec80ee5e7fa",
      "34d4db99-1901-4d2d-9601-e3ccfbd7749a",
      "b9b33a3b-7025-42d3-8327-40c1aec335b0",
      "88c007df-4641-4cea-8def-fa04306721d5",
      "2d63cabd-9b5e-441f-be54-068e1ab5cab3",
      "40f1fefd-21d3-4ccb-8524-dc41b9887c6a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715898744,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1d97859f-1edb-4a2b-8128-2945741b938f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551595020000,
    "parent_id": "337f40a2-6b9b-4941-a028-cebbb21ea965",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Cache (memoize) heavy-computing functions"
        ]
      ]
    },
    "type": "page",
    "version": 47,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898739,
        "id": "a58c5fb3-3040-4183-81c9-2a5e09843b2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898739,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you are building a function that may be heavy on the processor (either clientside or serverside) you may want to consider a "
            ],
            [
              "memoizer",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " which is a "
            ],
            [
              "cache of previous function executions and their returned values",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ". This allows you to check if the parameters of a function were passed before. Remember, pure functions are those that given an input, return a corresponding unique output and don’t cause side-effects outside their scope so, you should not add memoizers to functions that are unpredictable or depend on external resources (like AJAX calls or randomly returned values)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you are building a function that may be heavy on the processor (either clientside or serverside) you may want to consider a "
          },
          {
            "Text": "memoizer",
            "AttrFlags": 1
          },
          {
            "Text": " which is a "
          },
          {
            "Text": "cache of previous function executions and their returned values",
            "AttrFlags": 4
          },
          {
            "Text": ". This allows you to check if the parameters of a function were passed before. Remember, pure functions are those that given an input, return a corresponding unique output and don’t cause side-effects outside their scope so, you should not add memoizers to functions that are unpredictable or depend on external resources (like AJAX calls or randomly returned values)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898739,
        "id": "343c3e9d-ba05-41e7-a769-cecc40e19e87",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898739,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s say I have a recursive factorial function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Let’s say I have a recursive factorial function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898739,
        "id": "98f73cf6-396c-4d37-bcfb-e3ba90797181",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594960000,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function fact(num) {\n  return (num === 0)? 1 : num * fact(num - 1);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function fact(num) {\n  return (num === 0)? 1 : num * fact(num - 1);\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898740,
        "id": "3c90f278-fa07-4dbf-b194-845db5dfb990",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898740,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If I pass small values from 1 to 100 for example, there would be no problem, but once we start going deeper, we might blow up the call stack or make the process a bit painful for the Javascript engine we’re doing this in, especially if the engine doesn’t count with tail-call optimization (although Douglas Crockford says that native ES6 has tail-call optimization included)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If I pass small values from 1 to 100 for example, there would be no problem, but once we start going deeper, we might blow up the call stack or make the process a bit painful for the Javascript engine we’re doing this in, especially if the engine doesn’t count with tail-call optimization (although Douglas Crockford says that native ES6 has tail-call optimization included)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898742,
        "id": "360f95e2-6965-4ea0-943f-550d2d6a70d9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898742,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We could hard code our own dictionary from 1 to god-knows-what number with their corresponding factorials but, I’m not sure if I advise that! Let’s create a memoizer, shall we?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We could hard code our own dictionary from 1 to god-knows-what number with their corresponding factorials but, I’m not sure if I advise that! Let’s create a memoizer, shall we?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898742,
        "id": "b960e59b-7d4a-46c1-8d9b-be93a119d096",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594960000,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var fact = (function() {\n  var cache = {}; // Initialise a memory cache object\n  \n  // Use and return this function to check if val is cached\n  function checkCache(val) {\n    if (val in cache) {\n      console.log('It was in the cache :D');\n      return cache[val]; // return cached\n    } else {\n      cache[val] = factorial(val); // we cache it\n      return cache[val]; // and then return it\n    }\n    \n    /* Other alternatives for checking are:\n    || cache.hasOwnProperty(val) or !!cache[val]\n    || but wouldn't work if the results of those\n    || executions were falsy values.\n    */\n  }\n\n  // We create and name the actual function to be used\n  function factorial(num) {\n    return (num === 0)? 1 : num * factorial(num - 1);\n  } // End of factorial function\n\n  /* We return the function that checks, not the one\n  || that computes because  it happens to be recursive,\n  || if it weren't you could avoid creating an extra\n  || function in this self-invoking closure function.\n  */\n  return checkCache; \n}());"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var fact = (function() {\n  var cache = {}; // Initialise a memory cache object\n  \n  // Use and return this function to check if val is cached\n  function checkCache(val) {\n    if (val in cache) {\n      console.log('It was in the cache :D');\n      return cache[val]; // return cached\n    } else {\n      cache[val] = factorial(val); // we cache it\n      return cache[val]; // and then return it\n    }\n    \n    /* Other alternatives for checking are:\n    || cache.hasOwnProperty(val) or !!cache[val]\n    || but wouldn't work if the results of those\n    || executions were falsy values.\n    */\n  }\n\n  // We create and name the actual function to be used\n  function factorial(num) {\n    return (num === 0)? 1 : num * factorial(num - 1);\n  } // End of factorial function\n\n  /* We return the function that checks, not the one\n  || that computes because  it happens to be recursive,\n  || if it weren't you could avoid creating an extra\n  || function in this self-invoking closure function.\n  */\n  return checkCache; \n}());",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898742,
        "id": "c01916ba-0742-4387-a286-59a836428c1a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898742,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we can start using it:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we can start using it:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551595042768,
        "format": {
          "display_source": "http://i.stack.imgur.com/2fkTB.png"
        },
        "id": "ca7df3cb-015e-432f-9dbc-ce4f45178529",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595020000,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "http://i.stack.imgur.com/2fkTB.png"
            ]
          ]
        },
        "type": "image",
        "version": 6,
        "source": "http://i.stack.imgur.com/2fkTB.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2F2fkTB.png",
        "format_image": {
          "block_aspect_ratio": 0,
          "block_full_width": false,
          "block_page_width": false,
          "block_preserve_scale": false,
          "block_width": 0,
          "display_source": "http://i.stack.imgur.com/2fkTB.png",
          "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.sohttp:%2F%2Fi.stack.imgur.com%2F2fkTB.png"
        }
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898742,
        "id": "3aefef2c-91f9-4522-bcef-7339adbe479e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898742,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now that I start to reflect on what I did, if I were to increment from 1 instead of decrement from "
            ],
            [
              "num",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ", I could have cached all of the factorials from 1 to "
            ],
            [
              "num",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " in the cache recursively, but I will leave that for you."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now that I start to reflect on what I did, if I were to increment from 1 instead of decrement from "
          },
          {
            "Text": "num",
            "AttrFlags": 4
          },
          {
            "Text": ", I could have cached all of the factorials from 1 to "
          },
          {
            "Text": "num",
            "AttrFlags": 4
          },
          {
            "Text": " in the cache recursively, but I will leave that for you."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "fcadc728-4a9d-4f10-9e9b-9702e4743293",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898743,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is great but what if we have "
            ],
            [
              "multiple parameters",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "? This is a problem? Not quite, we can do some nice tricks like using JSON.stringify() on the arguments array or even a list of values that the function will depend on (for object-oriented approaches). This is done to generate a unique key with all the arguments and dependencies included."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is great but what if we have "
          },
          {
            "Text": "multiple parameters",
            "AttrFlags": 1
          },
          {
            "Text": "? This is a problem? Not quite, we can do some nice tricks like using JSON.stringify() on the arguments array or even a list of values that the function will depend on (for object-oriented approaches). This is done to generate a unique key with all the arguments and dependencies included."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "094a7a62-d652-4b02-9b34-1ec80ee5e7fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898743,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can also create a function that “memoizes” other functions, using the same scope concept as before (returning a new function that uses the original and has access to the cache object):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can also create a function that “memoizes” other functions, using the same scope concept as before (returning a new function that uses the original and has access to the cache object):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "34d4db99-1901-4d2d-9601-e3ccfbd7749a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898743,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "WARNING: ES6 syntax, if you don’t like it, replace … with nothing and use the "
            ],
            [
              "var args = Array.prototype.slice.call(null, arguments);",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " trick; replace const and let with var, and the other things you already know."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "WARNING: ES6 syntax, if you don’t like it, replace … with nothing and use the "
          },
          {
            "Text": "var args = Array.prototype.slice.call(null, arguments);",
            "AttrFlags": 2
          },
          {
            "Text": " trick; replace const and let with var, and the other things you already know."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "b9b33a3b-7025-42d3-8327-40c1aec335b0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595020000,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function memoize(func) {\n  let cache = {};\n\n  // You can opt for not naming the function\n  function memoized(...args) {\n    const argsKey = JSON.stringify(args);\n    \n    // The same alternatives apply for this example\n    if (argsKey in cache) {\n      console.log(argsKey + ' was/were in cache :D');\n      return cache[argsKey];\n    } else {\n      cache[argsKey] = func.apply(null, args); // Cache it\n      return cache[argsKey]; // And then return it\n    }\n  }\n\n  return memoized; // Return the memoized function\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function memoize(func) {\n  let cache = {};\n\n  // You can opt for not naming the function\n  function memoized(...args) {\n    const argsKey = JSON.stringify(args);\n    \n    // The same alternatives apply for this example\n    if (argsKey in cache) {\n      console.log(argsKey + ' was/were in cache :D');\n      return cache[argsKey];\n    } else {\n      cache[argsKey] = func.apply(null, args); // Cache it\n      return cache[argsKey]; // And then return it\n    }\n  }\n\n  return memoized; // Return the memoized function\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "88c007df-4641-4cea-8def-fa04306721d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898743,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now notice that this will work for multiple arguments but won’t be of much use in object-oriented methods I think, you may need an extra object for dependencies. Also, "
            ],
            [
              "func.apply(null, args)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be replaced with "
            ],
            [
              "func(...args)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " since array destructuring will send them separately instead of as an array form. Also, just for reference, passing an array as an argument to func won’t work unless you use "
            ],
            [
              "Function.prototype.apply",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as I did."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now notice that this will work for multiple arguments but won’t be of much use in object-oriented methods I think, you may need an extra object for dependencies. Also, "
          },
          {
            "Text": "func.apply(null, args)",
            "AttrFlags": 2
          },
          {
            "Text": " can be replaced with "
          },
          {
            "Text": "func(...args)",
            "AttrFlags": 2
          },
          {
            "Text": " since array destructuring will send them separately instead of as an array form. Also, just for reference, passing an array as an argument to func won’t work unless you use "
          },
          {
            "Text": "Function.prototype.apply",
            "AttrFlags": 2
          },
          {
            "Text": " as I did."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "2d63cabd-9b5e-441f-be54-068e1ab5cab3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715898743,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To use the above method you just:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To use the above method you just:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715898743,
        "id": "40f1fefd-21d3-4ccb-8524-dc41b9887c6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595020000,
        "parent_id": "1d97859f-1edb-4a2b-8128-2945741b938f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "const newFunction = memoize(oldFunction);\n\n// Assuming new oldFunction just sums/concatenates:\nnewFunction('meaning of life', 42);\n// -\u003e \"meaning of life42\"\n\nnewFunction('meaning of life', 42); // again\n// =\u003e [\"meaning of life\",42] was/were in cache :D\n// -\u003e \"meaning of life42\""
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const newFunction = memoize(oldFunction);\n\n// Assuming new oldFunction just sums/concatenates:\nnewFunction('meaning of life', 42);\n// -\u003e \"meaning of life42\"\n\nnewFunction('meaning of life', 42); // again\n// =\u003e [\"meaning of life\",42] was/were in cache :D\n// -\u003e \"meaning of life42\"",
        "code_language": "JavaScript"
      }
    ],
    "title": "Cache (memoize) heavy-computing functions",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}