{
  "ID": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
  "Root": {
    "alive": true,
    "content": [
      "a7c09ac3-94cb-4ce8-8123-70f5def6f180",
      "01dfa6cb-45db-4242-9d3a-58dbb45024f7",
      "2abca87d-e36e-40b8-a0e5-124a12c1fb63",
      "4c53b50d-3c66-4583-a724-f54e526f10f4",
      "d3e0416e-65ac-4a11-a515-ede87871738b",
      "48ed2acd-1306-45eb-b4dd-52873ce12d2b",
      "c6947375-0c4d-4cb1-8777-6206088e0872"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550714980319,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550817780000,
    "parent_id": "258d5f6e-0cc0-4d61-b286-ea3a708b3390",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Recursive Function"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714980318,
        "id": "a7c09ac3-94cb-4ce8-8123-70f5def6f180",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714980318,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A recursive function is simply a function, that would call itself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A recursive function is simply a function, that would call itself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714980318,
        "id": "01dfa6cb-45db-4242-9d3a-58dbb45024f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817780000,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function factorial (n) {\n    if (n \u003c= 1) {\n        return 1;\n    }\n    \n    return n * factorial(n - 1);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function factorial (n) {\n    if (n \u003c= 1) {\n        return 1;\n    }\n    \n    return n * factorial(n - 1);\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714980318,
        "id": "2abca87d-e36e-40b8-a0e5-124a12c1fb63",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714980318,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The above function shows a basic example of how to perform a recursive function to return a factorial."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The above function shows a basic example of how to perform a recursive function to return a factorial."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550817780000,
        "id": "4c53b50d-3c66-4583-a724-f54e526f10f4",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817780000,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714980319,
        "id": "d3e0416e-65ac-4a11-a515-ede87871738b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714980319,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another example, would be to retrieve the sum of even numbers in an array."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another example, would be to retrieve the sum of even numbers in an array."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714980319,
        "id": "48ed2acd-1306-45eb-b4dd-52873ce12d2b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817780000,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function countEvenNumbers (arr) {\n    // Sentinel value.  Recursion stops on empty array.\n    if (arr.length \u003c 1) {\n        return 0;\n    }\n    // The shift() method removes the first element from an array \n    // and returns that element. This method changes the length of the array.\n    var value = arr.shift();\n\n    // `value % 2 === 0` tests if the number is even or odd\n    // If it's even we add one to the result of counting the remainder of \n    // the array.  If it's odd, we add zero to it.\n    return ((value % 2 === 0) ? 1 : 0) + countEvens(arr);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function countEvenNumbers (arr) {\n    // Sentinel value.  Recursion stops on empty array.\n    if (arr.length \u003c 1) {\n        return 0;\n    }\n    // The shift() method removes the first element from an array \n    // and returns that element. This method changes the length of the array.\n    var value = arr.shift();\n\n    // `value % 2 === 0` tests if the number is even or odd\n    // If it's even we add one to the result of counting the remainder of \n    // the array.  If it's odd, we add zero to it.\n    return ((value % 2 === 0) ? 1 : 0) + countEvens(arr);\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714980319,
        "id": "c6947375-0c4d-4cb1-8777-6206088e0872",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714980319,
        "parent_id": "33ecdad8-22da-48f2-ac91-d800e9f0305b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It is important that such functions make some sort of sentinel value check to avoid infinite loops. In the first example above, when "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is less than or equal to 1, the recursion stops, allowing the result of each call to be returned back up the call stack."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It is important that such functions make some sort of sentinel value check to avoid infinite loops. In the first example above, when "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is less than or equal to 1, the recursion stops, allowing the result of each call to be returned back up the call stack."
          }
        ]
      }
    ],
    "title": "Recursive Function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}