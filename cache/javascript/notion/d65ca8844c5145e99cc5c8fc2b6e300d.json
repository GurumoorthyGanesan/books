{
  "ID": "d65ca884-4c51-45e9-9cc5-c8fc2b6e300d",
  "Root": {
    "alive": true,
    "content": [
      "74beb535-2429-40ac-b750-f64f9799116d",
      "9b345add-8fb2-498d-9327-807316e3f9f3",
      "6e3b9a38-235a-4123-8e4c-268e252bdbd5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716816190,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d65ca884-4c51-45e9-9cc5-c8fc2b6e300d",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683879855,
    "parent_id": "5c603754-a24c-4533-b6e8-6bd7452110bf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Weak reference demo"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716816189,
        "id": "74beb535-2429-40ac-b750-f64f9799116d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716816189,
        "parent_id": "d65ca884-4c51-45e9-9cc5-c8fc2b6e300d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "JavaScript uses "
            ],
            [
              "reference counting",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
                ]
              ]
            ],
            [
              " technique to detect unused objects. When reference count to an object is zero, that object will be released by the garbage collector. Weakmap uses weak reference that does not contribute to reference count of an object, therefore it is very useful to solve memory "
            ],
            [
              "leak problems",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/29413222/what-are-the-actual-uses-of-es6-weakmap"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "JavaScript uses "
          },
          {
            "Text": "reference counting",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
          },
          {
            "Text": " technique to detect unused objects. When reference count to an object is zero, that object will be released by the garbage collector. Weakmap uses weak reference that does not contribute to reference count of an object, therefore it is very useful to solve memory "
          },
          {
            "Text": "leak problems",
            "Link": "http://stackoverflow.com/questions/29413222/what-are-the-actual-uses-of-es6-weakmap"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716816190,
        "id": "9b345add-8fb2-498d-9327-807316e3f9f3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716816190,
        "parent_id": "d65ca884-4c51-45e9-9cc5-c8fc2b6e300d",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here is a demo of weakmap. I use a very large object as value to show that weak reference does not contribute to reference count."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here is a demo of weakmap. I use a very large object as value to show that weak reference does not contribute to reference count."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716816190,
        "id": "6e3b9a38-235a-4123-8e4c-268e252bdbd5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716816190,
        "parent_id": "d65ca884-4c51-45e9-9cc5-c8fc2b6e300d",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// manually trigger garbage collection to make sure that we are in good status.\n\u003e global.gc(); \nundefined\n\n// check initial memory use，heapUsed is 4M or so\n\u003e process.memoryUsage(); \n{ rss: 21106688,\n  heapTotal: 7376896,\n  heapUsed: 4153936,\n  external: 9059 }\n\n\u003e let wm = new WeakMap();\nundefined\n\n\u003e const b = new Object();\nundefined\n\n\u003e global.gc();\nundefined\n\n// heapUsed is still 4M or so\n\u003e process.memoryUsage(); \n{ rss: 20537344,\n  heapTotal: 9474048,\n  heapUsed: 3967272,\n  external: 8993 }\n\n// add key-value tuple into WeakMap，\n// key is b，value is 5*1024*1024 array \n\u003e wm.set(b, new Array(5*1024*1024));\nWeakMap {}\n\n// manually garbage collection\n\u003e global.gc();\nundefined\n\n// heapUsed is still 45M\n\u003e process.memoryUsage(); \n{ rss: 62652416,\n  heapTotal: 51437568,\n  heapUsed: 45911664,\n  external: 8951 }\n\n// b reference to null\n\u003e b = null;\nnull\n\n// garbage collection\n\u003e global.gc();\nundefined\n\n// after remove b reference to object，heapUsed is 4M again \n// it means the big array in WeakMap is released\n// it also means weekmap does not contribute to big array's reference count, only b does.\n\u003e process.memoryUsage(); \n{ rss: 20639744,\n  heapTotal: 8425472,\n  heapUsed: 3979792,\n  external: 8956 }"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// manually trigger garbage collection to make sure that we are in good status.\n\u003e global.gc(); \nundefined\n\n// check initial memory use，heapUsed is 4M or so\n\u003e process.memoryUsage(); \n{ rss: 21106688,\n  heapTotal: 7376896,\n  heapUsed: 4153936,\n  external: 9059 }\n\n\u003e let wm = new WeakMap();\nundefined\n\n\u003e const b = new Object();\nundefined\n\n\u003e global.gc();\nundefined\n\n// heapUsed is still 4M or so\n\u003e process.memoryUsage(); \n{ rss: 20537344,\n  heapTotal: 9474048,\n  heapUsed: 3967272,\n  external: 8993 }\n\n// add key-value tuple into WeakMap，\n// key is b，value is 5*1024*1024 array \n\u003e wm.set(b, new Array(5*1024*1024));\nWeakMap {}\n\n// manually garbage collection\n\u003e global.gc();\nundefined\n\n// heapUsed is still 45M\n\u003e process.memoryUsage(); \n{ rss: 62652416,\n  heapTotal: 51437568,\n  heapUsed: 45911664,\n  external: 8951 }\n\n// b reference to null\n\u003e b = null;\nnull\n\n// garbage collection\n\u003e global.gc();\nundefined\n\n// after remove b reference to object，heapUsed is 4M again \n// it means the big array in WeakMap is released\n// it also means weekmap does not contribute to big array's reference count, only b does.\n\u003e process.memoryUsage(); \n{ rss: 20639744,\n  heapTotal: 8425472,\n  heapUsed: 3979792,\n  external: 8956 }",
        "code_language": "Plain Text"
      }
    ],
    "title": "Weak reference demo",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}