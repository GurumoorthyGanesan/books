{
  "ID": "944e589f-f98f-4d7f-b94c-463daa592a60",
  "Root": {
    "alive": true,
    "content": [
      "9e56a019-b780-4a49-8d9c-afc32feac58f",
      "aa064480-bad0-44d7-a8fa-7ea93456e5d8",
      "aadbdd7d-09c3-47cd-9a4f-a7ce7496a13b",
      "e48dcd83-e6b0-4c53-8dfb-8c93cb5d1dc2",
      "ee0df9cc-974a-4c32-960b-4e9720679ab9",
      "59b61011-01fa-4534-a3ce-0ddde880d042",
      "4680486d-c46a-4a22-809b-600dabfcde03"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716380586,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "944e589f-f98f-4d7f-b94c-463daa592a60",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683700816,
    "parent_id": "46a61fb6-4858-4553-a41b-39c060cd058f",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Asynchronous operations and the event loop"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380584,
        "id": "9e56a019-b780-4a49-8d9c-afc32feac58f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380584,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Many interesting operations in common JavaScript programming environments are asynchronous. For example, in the browser we see things like"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Many interesting operations in common JavaScript programming environments are asynchronous. For example, in the browser we see things like"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380585,
        "id": "aa064480-bad0-44d7-a8fa-7ea93456e5d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380585,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "window.setTimeout(() =\u003e {  console.log(\"this happens later\");}, 100);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "window.setTimeout(() =\u003e {  console.log(\"this happens later\");}, 100);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380585,
        "id": "aadbdd7d-09c3-47cd-9a4f-a7ce7496a13b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380585,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "and in Node.js we see things like"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "and in Node.js we see things like"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380585,
        "id": "e48dcd83-e6b0-4c53-8dfb-8c93cb5d1dc2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380585,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "fs.readFile(\"file.txt\", (err, data) =\u003e {  console.log(\"data\");});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "fs.readFile(\"file.txt\", (err, data) =\u003e {  console.log(\"data\");});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380585,
        "id": "ee0df9cc-974a-4c32-960b-4e9720679ab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380585,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How does this fit with the event loop?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How does this fit with the event loop?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380586,
        "id": "59b61011-01fa-4534-a3ce-0ddde880d042",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380586,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How this works is that when these statements execute, they tell the "
            ],
            [
              "host environment",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " (i.e., the browser or Node.js runtime, respectively) to go off and do something, probably in another thread. When the host environment is done doing that thing (respectively, waiting 100 milliseconds or reading the file "
            ],
            [
              "file.txt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") it will post a task to the event loop, saying “call the callback I was given earlier with these arguments”."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "How this works is that when these statements execute, they tell the "
          },
          {
            "Text": "host environment",
            "AttrFlags": 4
          },
          {
            "Text": " (i.e., the browser or Node.js runtime, respectively) to go off and do something, probably in another thread. When the host environment is done doing that thing (respectively, waiting 100 milliseconds or reading the file "
          },
          {
            "Text": "file.txt",
            "AttrFlags": 2
          },
          {
            "Text": ") it will post a task to the event loop, saying “call the callback I was given earlier with these arguments”."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716380586,
        "id": "4680486d-c46a-4a22-809b-600dabfcde03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716380586,
        "parent_id": "944e589f-f98f-4d7f-b94c-463daa592a60",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The event loop is then busy doing its thing: rendering the webpage, listening for user input, and continually looking for posted tasks. When it sees these posted tasks to call the callbacks, it will call back into JavaScript. That’s how you get asynchronous behavior!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The event loop is then busy doing its thing: rendering the webpage, listening for user input, and continually looking for posted tasks. When it sees these posted tasks to call the callbacks, it will call back into JavaScript. That’s how you get asynchronous behavior!"
          }
        ]
      }
    ],
    "title": "Asynchronous operations and the event loop",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}