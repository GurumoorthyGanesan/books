{
  "ID": "7deabff2-94df-4f29-976d-3a04e89d4652",
  "Root": {
    "alive": true,
    "content": [
      "e37d24a0-ec35-43c7-9bd7-b8587808afba",
      "57478930-2167-45eb-91ef-86e42fd1ddb1",
      "8a2f477a-9e24-4148-b079-ab696bdf77e5",
      "adedf0b6-6c1c-4f3d-a7d3-1a52ae8f5ab7",
      "05fb0b02-f005-4980-ab8f-57cfbe04a2f6",
      "14ad3375-c1fe-45f2-a1f4-882a956a5d83",
      "e3ef5e8e-6a9a-493c-9c3a-e995e88202f5",
      "4fd8c51c-8797-4079-b4fd-09e0a7c89b27",
      "bec9fcd0-ab4f-4886-8949-bc7f37ed9a9e",
      "ad9b7569-a103-49f1-8a47-95277c828d4c",
      "b5cf813f-6190-426e-a135-0992ab3d3886"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716409070,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7deabff2-94df-4f29-976d-3a04e89d4652",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683727554,
    "parent_id": "2555b903-ee7b-44e4-8df6-ff5cfc0d7c96",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Shift Operators"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409066,
        "id": "e37d24a0-ec35-43c7-9bd7-b8587808afba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409066,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise shifting can be thought as “moving” the bits either left or right, and hence changing the value of the data operated on."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise shifting can be thought as “moving” the bits either left or right, and hence changing the value of the data operated on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409068,
        "id": "57478930-2167-45eb-91ef-86e42fd1ddb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409068,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Left Shift"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Left Shift"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409069,
        "id": "8a2f477a-9e24-4148-b079-ab696bdf77e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409069,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The left shift operator "
            ],
            [
              "(value) \u003c\u003c (shift amount)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will shift the bits to the left by "
            ],
            [
              "(shift amount)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " bits; the new bits coming in from the right will be "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The left shift operator "
          },
          {
            "Text": "(value) \u003c\u003c (shift amount)",
            "AttrFlags": 2
          },
          {
            "Text": " will shift the bits to the left by "
          },
          {
            "Text": "(shift amount)",
            "AttrFlags": 2
          },
          {
            "Text": " bits; the new bits coming in from the right will be "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409069,
        "id": "adedf0b6-6c1c-4f3d-a7d3-1a52ae8f5ab7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409069,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "5 \u003c\u003c 2 =\u003e 20\n//  5:      0..000101\n// 20:      0..010100 \u003c= adds two 0's to the right"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "5 \u003c\u003c 2 =\u003e 20\n//  5:      0..000101\n// 20:      0..010100 \u003c= adds two 0's to the right",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409069,
        "id": "05fb0b02-f005-4980-ab8f-57cfbe04a2f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409069,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Right Shift ("
            ],
            [
              "Sign-propagating",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Right Shift ("
          },
          {
            "Text": "Sign-propagating",
            "AttrFlags": 4
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409070,
        "id": "14ad3375-c1fe-45f2-a1f4-882a956a5d83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409070,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The right shift operator "
            ],
            [
              "(value) \u003e\u003e (shift amount)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is also known as the “Sign-propagating right shift” because it keeps the sign of the initial operand. The right shift operator shifts the "
            ],
            [
              "value",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the specified "
            ],
            [
              "shift amount",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of bits to the right. Excess bits shifted off the right are discarded. The new bits coming in from the left will be based on the sign of the initial operand. If the left-most bit was "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then the new bits will all be "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and vise-versa for "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The right shift operator "
          },
          {
            "Text": "(value) \u003e\u003e (shift amount)",
            "AttrFlags": 2
          },
          {
            "Text": " is also known as the “Sign-propagating right shift” because it keeps the sign of the initial operand. The right shift operator shifts the "
          },
          {
            "Text": "value",
            "AttrFlags": 2
          },
          {
            "Text": " the specified "
          },
          {
            "Text": "shift amount",
            "AttrFlags": 2
          },
          {
            "Text": " of bits to the right. Excess bits shifted off the right are discarded. The new bits coming in from the left will be based on the sign of the initial operand. If the left-most bit was "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " then the new bits will all be "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " and vise-versa for "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409070,
        "id": "e3ef5e8e-6a9a-493c-9c3a-e995e88202f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409070,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "20 \u003e\u003e 2 =\u003e 5\n// 20:      0..010100\n//  5:      0..000101 \u003c= added two 0's from the left and chopped off 00 from the right\n\n-5 \u003e\u003e 3 =\u003e -1\n// -5:      1..111011\n// -2:      1..111111 \u003c= added three 1's from the left and chopped off 011 from the right"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "20 \u003e\u003e 2 =\u003e 5\n// 20:      0..010100\n//  5:      0..000101 \u003c= added two 0's from the left and chopped off 00 from the right\n\n-5 \u003e\u003e 3 =\u003e -1\n// -5:      1..111011\n// -2:      1..111111 \u003c= added three 1's from the left and chopped off 011 from the right",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409070,
        "id": "4fd8c51c-8797-4079-b4fd-09e0a7c89b27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409070,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Right Shift ("
            ],
            [
              "Zero fill",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Right Shift ("
          },
          {
            "Text": "Zero fill",
            "AttrFlags": 4
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409070,
        "id": "bec9fcd0-ab4f-4886-8949-bc7f37ed9a9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409070,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The zero-fill right shift operator "
            ],
            [
              "(value) \u003e\u003e\u003e (shift amount)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will move the bits to the right, and the new bits will be "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s. The "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s are shifted in from the left, and excess bits to the right are shifted off and discarded. This means it can make negative numbers into positive ones."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The zero-fill right shift operator "
          },
          {
            "Text": "(value) \u003e\u003e\u003e (shift amount)",
            "AttrFlags": 2
          },
          {
            "Text": " will move the bits to the right, and the new bits will be "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s. The "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s are shifted in from the left, and excess bits to the right are shifted off and discarded. This means it can make negative numbers into positive ones."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409070,
        "id": "ad9b7569-a103-49f1-8a47-95277c828d4c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409070,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-30 \u003e\u003e\u003e 2 =\u003e 1073741816\n//       -30:      111..1100010\n//1073741816:      001..1111000"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-30 \u003e\u003e\u003e 2 =\u003e 1073741816\n//       -30:      111..1100010\n//1073741816:      001..1111000",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716409070,
        "id": "b5cf813f-6190-426e-a135-0992ab3d3886",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716409070,
        "parent_id": "7deabff2-94df-4f29-976d-3a04e89d4652",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Zero-fill right shift and sign-propagating right shift yield the same result for non negative numbers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Zero-fill right shift and sign-propagating right shift yield the same result for non negative numbers."
          }
        ]
      }
    ],
    "title": "Shift Operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}