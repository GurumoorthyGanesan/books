{
  "ID": "7fd0ce7d-04c1-4640-b750-661009558470",
  "Root": {
    "alive": true,
    "content": [
      "6af41239-0a69-410b-a1e0-97d259854b9e",
      "59087f3a-83ee-4191-a8b8-156d062b9640",
      "6f833821-4327-4821-91cb-05ff9bb2d6e5",
      "03d8c16a-4841-486a-88cb-31f95ed90a75",
      "eabb1cf4-3280-4b92-959f-fc6be796627f",
      "f3cad198-9096-4c0c-baac-248df7157945",
      "02cea050-683f-4f07-bf8e-1c9bcb5a6019",
      "3520df7c-a89a-4f8a-b058-f7fce0670d77",
      "40357e78-1f89-431a-afc9-b9b31cc88ea9",
      "1a041009-7659-43fc-923e-d3ac3b7b78ed",
      "fd787d06-d5d6-4ee3-93f0-6b719dba0b0d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550714995209,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7fd0ce7d-04c1-4640-b750-661009558470",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550868000000,
    "parent_id": "a72911dd-354d-4c5c-b786-a7eb42d855b4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Object cloning"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995207,
        "id": "6af41239-0a69-410b-a1e0-97d259854b9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995207,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you want a complete copy of an object (i.e. the object properties and the values inside those properties, etc…), that is called "
            ],
            [
              "deep cloning",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you want a complete copy of an object (i.e. the object properties and the values inside those properties, etc…), that is called "
          },
          {
            "Text": "deep cloning",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995207,
        "id": "59087f3a-83ee-4191-a8b8-156d062b9640",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995207,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If an object can be serialized to JSON, then you can create a deep clone of it with a combination of "
            ],
            [
              "JSON.parse",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "JSON.stringify",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If an object can be serialized to JSON, then you can create a deep clone of it with a combination of "
          },
          {
            "Text": "JSON.parse",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "JSON.stringify",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995208,
        "id": "6f833821-4327-4821-91cb-05ff9bb2d6e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550868000000,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var existing = { a: 1, b: { c: 2 } };\nvar copy = JSON.parse(JSON.stringify(existing));\nexisting.b.c = 3; // copy.b.c will not change"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var existing = { a: 1, b: { c: 2 } };\nvar copy = JSON.parse(JSON.stringify(existing));\nexisting.b.c = 3; // copy.b.c will not change",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995208,
        "id": "03d8c16a-4841-486a-88cb-31f95ed90a75",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995208,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that "
            ],
            [
              "JSON.stringify",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will convert "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " objects to ISO-format string representations, but "
            ],
            [
              "JSON.parse",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will not convert the string back into a "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that "
          },
          {
            "Text": "JSON.stringify",
            "AttrFlags": 2
          },
          {
            "Text": " will convert "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": " objects to ISO-format string representations, but "
          },
          {
            "Text": "JSON.parse",
            "AttrFlags": 2
          },
          {
            "Text": " will not convert the string back into a "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995208,
        "id": "eabb1cf4-3280-4b92-959f-fc6be796627f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995208,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is no built-in function in JavaScript for creating deep clones, and it is not possible in general to create deep clones for every object for many reasons. For example,"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is no built-in function in JavaScript for creating deep clones, and it is not possible in general to create deep clones for every object for many reasons. For example,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995208,
        "id": "f3cad198-9096-4c0c-baac-248df7157945",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995208,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "objects can have non-enumerable and hidden properties which cannot be detected."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "objects can have non-enumerable and hidden properties which cannot be detected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995208,
        "id": "02cea050-683f-4f07-bf8e-1c9bcb5a6019",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995208,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "object getters and setters cannot be copied."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "object getters and setters cannot be copied."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995209,
        "id": "3520df7c-a89a-4f8a-b058-f7fce0670d77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995209,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "objects can have a cyclic structure."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "objects can have a cyclic structure."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995209,
        "id": "40357e78-1f89-431a-afc9-b9b31cc88ea9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995209,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "function properties can depend on state in a hidden scope."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "function properties can depend on state in a hidden scope."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995209,
        "id": "1a041009-7659-43fc-923e-d3ac3b7b78ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714995209,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assuming that you have a “nice” object whose properties only contain primitive values, dates, arrays, or other “nice” objects, then the following function can be used for making deep clones. It is a recursive function that can detect objects with a cyclic structure and will throw an error in such cases."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assuming that you have a “nice” object whose properties only contain primitive values, dates, arrays, or other “nice” objects, then the following function can be used for making deep clones. It is a recursive function that can detect objects with a cyclic structure and will throw an error in such cases."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714995209,
        "id": "fd787d06-d5d6-4ee3-93f0-6b719dba0b0d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550868000000,
        "parent_id": "7fd0ce7d-04c1-4640-b750-661009558470",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function deepClone(obj) {\n    function clone(obj, traversedObjects) {\n        var copy;\n        // primitive types\n        if(obj === null || typeof obj !== \"object\") {\n            return obj;\n        }\n\n        // detect cycles\n        for(var i = 0; i \u003c traversedObjects.length; i++) {\n            if(traversedObjects[i] === obj) {\n                throw new Error(\"Cannot clone circular object.\");\n            }\n        }\n\n        // dates\n        if(obj instanceof Date) {\n            copy = new Date();\n            copy.setTime(obj.getTime());\n            return copy;\n        }\n        // arrays\n        if(obj instanceof Array) {\n            copy = [];\n            for(var i = 0; i \u003c obj.length; i++) {\n                copy.push(clone(obj[i], traversedObjects.concat(obj)));\n            }\n            return copy;\n        }\n        // simple objects\n        if(obj instanceof Object) {\n            copy = {};\n            for(var key in obj) {\n                if(obj.hasOwnProperty(key)) {\n                    copy[key] = clone(obj[key], traversedObjects.concat(obj));\n                }\n            }\n            return copy;\n        }\n        throw new Error(\"Not a cloneable object.\");\n    }\n\n    return clone(obj, []);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function deepClone(obj) {\n    function clone(obj, traversedObjects) {\n        var copy;\n        // primitive types\n        if(obj === null || typeof obj !== \"object\") {\n            return obj;\n        }\n\n        // detect cycles\n        for(var i = 0; i \u003c traversedObjects.length; i++) {\n            if(traversedObjects[i] === obj) {\n                throw new Error(\"Cannot clone circular object.\");\n            }\n        }\n\n        // dates\n        if(obj instanceof Date) {\n            copy = new Date();\n            copy.setTime(obj.getTime());\n            return copy;\n        }\n        // arrays\n        if(obj instanceof Array) {\n            copy = [];\n            for(var i = 0; i \u003c obj.length; i++) {\n                copy.push(clone(obj[i], traversedObjects.concat(obj)));\n            }\n            return copy;\n        }\n        // simple objects\n        if(obj instanceof Object) {\n            copy = {};\n            for(var key in obj) {\n                if(obj.hasOwnProperty(key)) {\n                    copy[key] = clone(obj[key], traversedObjects.concat(obj));\n                }\n            }\n            return copy;\n        }\n        throw new Error(\"Not a cloneable object.\");\n    }\n\n    return clone(obj, []);\n}",
        "code_language": "JavaScript"
      }
    ],
    "title": "Object cloning",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}