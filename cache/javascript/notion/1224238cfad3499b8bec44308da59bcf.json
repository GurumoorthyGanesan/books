{
  "ID": "1224238c-fad3-499b-8bec-44308da59bcf",
  "Root": {
    "alive": true,
    "content": [
      "414318f0-d84a-44c8-bf0a-4434e85dd3f7",
      "19b96148-10cf-4a62-9d6c-2d740b2efcd6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715590091,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "1224238c-fad3-499b-8bec-44308da59bcf",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551593820000,
    "parent_id": "3776e702-7f6c-45eb-83d8-15379c3eb16b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating digests e.g. SHA-256"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715590087,
        "id": "414318f0-d84a-44c8-bf0a-4434e85dd3f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593820000,
        "parent_id": "1224238c-fad3-499b-8bec-44308da59bcf",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// Convert string to ArrayBuffer. This step is only necessary if you wish to hash a string, not if you aready got an ArrayBuffer such as an Uint8Array.\nvar input = new TextEncoder('utf-8').encode('Hello world!');\n\n// Calculate the SHA-256 digest\ncrypto.subtle.digest('SHA-256', input)\n// Wait for completion\n.then(function(digest) {\n  // digest is an ArrayBuffer. There are multiple ways to proceed.\n\n  // If you want to display the digest as a hexadecimal string, this will work:\n  var view = new DataView(digest);\n  var hexstr = '';\n  for(var i = 0; i \u003c view.byteLength; i++) {\n    var b = view.getUint8(i);\n    hexstr += '0123456789abcdef'[(b \u0026 0xf0) \u003e\u003e 4];\n    hexstr += '0123456789abcdef'[(b \u0026 0x0f)];\n  }\n  console.log(hexstr);\n\n  // Otherwise, you can simply create an Uint8Array from the buffer:\n  var digestAsArray = new Uint8Array(digest);\n  console.log(digestAsArray);\n})\n// Catch errors\n.catch(function(err) {\n  console.error(err);\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Convert string to ArrayBuffer. This step is only necessary if you wish to hash a string, not if you aready got an ArrayBuffer such as an Uint8Array.\nvar input = new TextEncoder('utf-8').encode('Hello world!');\n\n// Calculate the SHA-256 digest\ncrypto.subtle.digest('SHA-256', input)\n// Wait for completion\n.then(function(digest) {\n  // digest is an ArrayBuffer. There are multiple ways to proceed.\n\n  // If you want to display the digest as a hexadecimal string, this will work:\n  var view = new DataView(digest);\n  var hexstr = '';\n  for(var i = 0; i \u003c view.byteLength; i++) {\n    var b = view.getUint8(i);\n    hexstr += '0123456789abcdef'[(b \u0026 0xf0) \u003e\u003e 4];\n    hexstr += '0123456789abcdef'[(b \u0026 0x0f)];\n  }\n  console.log(hexstr);\n\n  // Otherwise, you can simply create an Uint8Array from the buffer:\n  var digestAsArray = new Uint8Array(digest);\n  console.log(digestAsArray);\n})\n// Catch errors\n.catch(function(err) {\n  console.error(err);\n});",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715590090,
        "id": "19b96148-10cf-4a62-9d6c-2d740b2efcd6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715590090,
        "parent_id": "1224238c-fad3-499b-8bec-44308da59bcf",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The current draft suggests to provide at least "
            ],
            [
              "SHA-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "SHA-256",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "SHA-384",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "SHA-512",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but this is no strict requirement and subject to change. However, the SHA family can still be considered a good choice as it will likely be supported in all major browsers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The current draft suggests to provide at least "
          },
          {
            "Text": "SHA-1",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "SHA-256",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "SHA-384",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "SHA-512",
            "AttrFlags": 2
          },
          {
            "Text": ", but this is no strict requirement and subject to change. However, the SHA family can still be considered a good choice as it will likely be supported in all major browsers."
          }
        ]
      }
    ],
    "title": "Creating digests e.g. SHA-256",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}