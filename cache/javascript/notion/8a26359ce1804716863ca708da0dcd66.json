{
  "ID": "8a26359c-e180-4716-863c-a708da0dcd66",
  "Root": {
    "alive": true,
    "content": [
      "0305a011-90ae-46b5-8ef1-cc3b2c6c4356",
      "4d5c6195-2b56-4607-8489-ec94ba99d2a7",
      "e7cb3ae9-d0e3-4b01-a54c-89f9a84ca671",
      "428b8306-d80a-4706-932d-9850fed724b1",
      "fc103ebd-64e7-4290-8db8-702ba42f66d3",
      "b6f91022-44c7-40a6-830e-5e7037d01e1f",
      "281dfbc9-50dd-4983-af5f-ab2dbabc265f",
      "75aa8f3d-b347-4b62-82e4-2a4c4716b542",
      "89baf839-1ae3-4a50-bdb9-af71e29b2196",
      "e904cf50-514e-4edc-a195-30ff575f74f1",
      "d031b08f-c882-4c53-bfc7-12a732283324",
      "ff9553b3-f371-43dc-a1a2-0cacd0a6376d",
      "5f660669-13b1-453e-9701-10036f4408fe",
      "6cf2d660-f72a-4ff2-9f53-d218b5fed047",
      "a94951fb-073f-4601-a42e-7cca54ff0ea6",
      "fbc197e1-5360-4f20-8fbe-c3913d3b6153",
      "6cdb71cc-663b-4745-a2e4-3dac02500bfe",
      "727881a2-69d0-4239-9b7b-e324c54b16af",
      "6b523660-56ea-48d7-892d-57d361d90001",
      "c47065f5-c303-4597-b5be-1b3189f6d726",
      "5b4b4adf-418a-4952-80b2-ccbb29372a72",
      "3334f321-d15a-4cc7-8ee5-9c5102998127",
      "5b677fea-6463-44be-b8e4-820ea7fb2f4b",
      "8f6f076f-3855-416f-961a-dc22fd512589",
      "a4b33627-0209-4e46-b8fb-fa01d2c2aee4",
      "2da93726-8dc5-4df8-90e9-58c18be18685",
      "521cb2ab-e765-4ca0-972c-3cf50037325e",
      "b28dfb45-f2a3-414d-98c5-43d3b02494b6",
      "e1f7da66-107b-4048-8c3a-3a4c03c244b3"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715085477,
    "id": "8a26359c-e180-4716-863c-a708da0dcd66",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550715085477,
    "parent_id": "8258c948-9475-41eb-8bbe-cdf7703094bf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "060 Bitwise operators"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085471,
        "id": "0305a011-90ae-46b5-8ef1-cc3b2c6c4356",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085471,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise operators perform operations on bit values of data. These operators convert operands to signed 32-bit integers in "
            ],
            [
              "two’s complement",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/1049722/what-is-2s-complement"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise operators perform operations on bit values of data. These operators convert operands to signed 32-bit integers in "
          },
          {
            "Text": "two’s complement",
            "Link": "http://stackoverflow.com/questions/1049722/what-is-2s-complement"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085472,
        "id": "4d5c6195-2b56-4607-8489-ec94ba99d2a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085472,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversion to 32-bit integers"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversion to 32-bit integers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085473,
        "id": "e7cb3ae9-d0e3-4b01-a54c-89f9a84ca671",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085473,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Numbers with more than 32 bits discard their most significant bits. For example, the following integer with more than 32 bits is converted to a 32-bit integer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Numbers with more than 32 bits discard their most significant bits. For example, the following integer with more than 32 bits is converted to a 32-bit integer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085473,
        "id": "428b8306-d80a-4706-932d-9850fed724b1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085473,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Before: 10100110111110100000000010000011110001000001\nAfter:              10100000000010000011110001000001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Before: 10100110111110100000000010000011110001000001\nAfter:              10100000000010000011110001000001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085473,
        "id": "fc103ebd-64e7-4290-8db8-702ba42f66d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085473,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two’s Complement"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two’s Complement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085473,
        "id": "b6f91022-44c7-40a6-830e-5e7037d01e1f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085473,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In normal binary we find the binary value by adding the "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s based on their position as powers of 2 - The rightmost bit being "
            ],
            [
              "2^0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the leftmost bit being "
            ],
            [
              "2^n-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the number of bits. For example, using 4 bits:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In normal binary we find the binary value by adding the "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s based on their position as powers of 2 - The rightmost bit being "
          },
          {
            "Text": "2^0",
            "AttrFlags": 2
          },
          {
            "Text": " to the leftmost bit being "
          },
          {
            "Text": "2^n-1",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is the number of bits. For example, using 4 bits:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085473,
        "id": "281dfbc9-50dd-4983-af5f-ab2dbabc265f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085473,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Normal Binary\n// 8 4 2 1\n   0 1 1 0  =\u003e 0 + 4 + 2 + 0 =\u003e 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Normal Binary\n// 8 4 2 1\n   0 1 1 0  =\u003e 0 + 4 + 2 + 0 =\u003e 6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085474,
        "id": "75aa8f3d-b347-4b62-82e4-2a4c4716b542",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085474,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two complement’s format means that the number’s negative counterpart (6 vs -6) is all the bits for a number inverted, plus one. The inverted bits of 6 would be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two complement’s format means that the number’s negative counterpart (6 vs -6) is all the bits for a number inverted, plus one. The inverted bits of 6 would be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085474,
        "id": "89baf839-1ae3-4a50-bdb9-af71e29b2196",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085474,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Normal binary\n   0 1 1 0\n// One's complement (all bits inverted)\n   1 0 0 1  =\u003e -8 + 0 + 0 + 1 =\u003e -7\n// Two's complement (add 1 to one's complement)\n   1 0 1 0  =\u003e -8 + 0 + 2 + 0 =\u003e -6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Normal binary\n   0 1 1 0\n// One's complement (all bits inverted)\n   1 0 0 1  =\u003e -8 + 0 + 0 + 1 =\u003e -7\n// Two's complement (add 1 to one's complement)\n   1 0 1 0  =\u003e -8 + 0 + 2 + 0 =\u003e -6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085474,
        "id": "e904cf50-514e-4edc-a195-30ff575f74f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085474,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Adding more "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "‘s to the left of a binary number does not change its value in two’s compliment. The value "
            ],
            [
              "1010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "1111111111010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are both "
            ],
            [
              "-6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 4
          },
          {
            "Text": " Adding more "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "‘s to the left of a binary number does not change its value in two’s compliment. The value "
          },
          {
            "Text": "1010",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "1111111111010",
            "AttrFlags": 2
          },
          {
            "Text": " are both "
          },
          {
            "Text": "-6",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085474,
        "id": "d031b08f-c882-4c53-bfc7-12a732283324",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085474,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise AND"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise AND"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085474,
        "id": "ff9553b3-f371-43dc-a1a2-0cacd0a6376d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085474,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise AND operation "
            ],
            [
              "a \u0026 b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the binary value with a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where both binary operands have "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s in a specific position, and "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in all other positions. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise AND operation "
          },
          {
            "Text": "a \u0026 b",
            "AttrFlags": 2
          },
          {
            "Text": " returns the binary value with a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " where both binary operands have "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s in a specific position, and "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " in all other positions. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085474,
        "id": "5f660669-13b1-453e-9701-10036f4408fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085474,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "13 \u0026 7 =\u003e 5\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n//  5:     0..00101 (0 + 0 + 4 + 0 + 1)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "13 \u0026 7 =\u003e 5\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n//  5:     0..00101 (0 + 0 + 4 + 0 + 1)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "6cf2d660-f72a-4ff2-9f53-d218b5fed047",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Real world example: Number’s Parity Check",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Real world example: Number’s Parity Check",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "a94951fb-073f-4601-a42e-7cca54ff0ea6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of this “masterpiece” (unfortunately too often seen in many real code parts):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of this “masterpiece” (unfortunately too often seen in many real code parts):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "fbc197e1-5360-4f20-8fbe-c3913d3b6153",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function isEven(n) {\n    return n % 2 == 0;\n}\n\nfunction isOdd(n) {\n    if (isEven(n)) {\n        return false;\n    } else {\n        return true;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function isEven(n) {\n    return n % 2 == 0;\n}\n\nfunction isOdd(n) {\n    if (isEven(n)) {\n        return false;\n    } else {\n        return true;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "6cdb71cc-663b-4745-a2e4-3dac02500bfe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can check the (integer) number’s parity in much more effective and simple manner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can check the (integer) number’s parity in much more effective and simple manner:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "727881a2-69d0-4239-9b7b-e324c54b16af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if(n \u0026 1) {\n    console.log(\"ODD!\");\n} else {\n    console.log(\"EVEN!\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if(n \u0026 1) {\n    console.log(\"ODD!\");\n} else {\n    console.log(\"EVEN!\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "6b523660-56ea-48d7-892d-57d361d90001",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise OR"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise OR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "c47065f5-c303-4597-b5be-1b3189f6d726",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise OR operation "
            ],
            [
              "a | b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the binary value with a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where either operands or both operands have "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s in a specific position, and "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when both values have "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a position. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise OR operation "
          },
          {
            "Text": "a | b",
            "AttrFlags": 2
          },
          {
            "Text": " returns the binary value with a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " where either operands or both operands have "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s in a specific position, and "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " when both values have "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " in a position. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085475,
        "id": "5b4b4adf-418a-4952-80b2-ccbb29372a72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085475,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "13 | 7 =\u003e 15\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 15:     0..01111 (0 + 8 + 4 + 2 + 1)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "13 | 7 =\u003e 15\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 15:     0..01111 (0 + 8 + 4 + 2 + 1)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085476,
        "id": "3334f321-d15a-4cc7-8ee5-9c5102998127",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085476,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise NOT"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise NOT"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085476,
        "id": "5b677fea-6463-44be-b8e4-820ea7fb2f4b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085476,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise NOT operation "
            ],
            [
              "~a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "flips",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the bits of the given value "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This means all the "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s will become "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s and all the "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s will become "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise NOT operation "
          },
          {
            "Text": "~a",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "flips",
            "AttrFlags": 4
          },
          {
            "Text": " the bits of the given value "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". This means all the "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s will become "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s and all the "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s will become "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085476,
        "id": "8f6f076f-3855-416f-961a-dc22fd512589",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085476,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "~13 =\u003e -14\n// 13:     0..01101\n//-----------------\n//-14:     1..10010 (-16 + 0 + 0 + 2 + 0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "~13 =\u003e -14\n// 13:     0..01101\n//-----------------\n//-14:     1..10010 (-16 + 0 + 0 + 2 + 0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085476,
        "id": "a4b33627-0209-4e46-b8fb-fa01d2c2aee4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085476,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise XOR"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise XOR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085476,
        "id": "2da93726-8dc5-4df8-90e9-58c18be18685",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085476,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise XOR ("
            ],
            [
              "exclusive or",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") operation "
            ],
            [
              "a ^ b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " places a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only if the two bits are different. Exclusive or means "
            ],
            [
              "either one or the other, but not both",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise XOR ("
          },
          {
            "Text": "exclusive or",
            "AttrFlags": 4
          },
          {
            "Text": ") operation "
          },
          {
            "Text": "a ^ b",
            "AttrFlags": 2
          },
          {
            "Text": " places a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " only if the two bits are different. Exclusive or means "
          },
          {
            "Text": "either one or the other, but not both",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085477,
        "id": "521cb2ab-e765-4ca0-972c-3cf50037325e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085477,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "13 ^ 7 =\u003e 10\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 10:     0..01010  (0 + 8 + 0 + 2 + 0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "13 ^ 7 =\u003e 10\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 10:     0..01010  (0 + 8 + 0 + 2 + 0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085477,
        "id": "b28dfb45-f2a3-414d-98c5-43d3b02494b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085477,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Real world example: swapping two integer values without additional memory allocation",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Real world example: swapping two integer values without additional memory allocation",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715085477,
        "id": "e1f7da66-107b-4048-8c3a-3a4c03c244b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715085477,
        "parent_id": "8a26359c-e180-4716-863c-a708da0dcd66",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var a = 11, b = 22;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(\"a = \" + a + \"; b = \" + b);// a is now 22 and b is now 11"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var a = 11, b = 22;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(\"a = \" + a + \"; b = \" + b);// a is now 22 and b is now 11",
        "code_language": "Plain Text"
      }
    ],
    "title": "060 Bitwise operators"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}