{
  "ID": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
  "Root": {
    "alive": true,
    "content": [
      "b229e39f-6463-4bf8-b168-9b7a5b2e5cd9",
      "2af186ff-ea32-49bb-9fd7-b53e3c37dcdf",
      "a40ae327-3ed6-46eb-81a9-bae24edd98f5",
      "208b8f39-e4c1-4dbf-ab79-cf0d68d25af1",
      "352d9dd0-ca40-4c16-96b8-d722535edbb7",
      "6980aea7-4e65-4ece-9776-3d670a584910",
      "c60d26fe-d31d-4ca7-8773-7cbf97a1b923",
      "7e48b621-dbc4-4dd0-8ff5-b3295ba92170",
      "819d5c99-018e-4cb1-9604-2f60ddd8e351",
      "b7654b26-b14c-4bed-a20e-bd4e5b482101",
      "7798bfb5-de6c-4f8a-b1d2-3560e225f6c5",
      "0c212b5d-7751-4b29-89da-c06cc5db36bc"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715613786,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551593640000,
    "parent_id": "0a8fef9d-a46b-4135-9e0b-09adc1486be0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Async functions compared to Promises"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613779,
        "id": "b229e39f-6463-4bf8-b168-9b7a5b2e5cd9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613779,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions do not replace the "
            ],
            [
              "Promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " type; they add language keywords that make promises easier to call. They are interchangeable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " functions do not replace the "
          },
          {
            "Text": "Promise",
            "AttrFlags": 2
          },
          {
            "Text": " type; they add language keywords that make promises easier to call. They are interchangeable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613782,
        "id": "2af186ff-ea32-49bb-9fd7-b53e3c37dcdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593640000,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "async function doAsyncThing() { ... }\n\nfunction doPromiseThing(input) { return new Promise((r, x) =\u003e ...); }\n\n// Call with promise syntax\ndoAsyncThing()\n    .then(a =\u003e doPromiseThing(a))\n    .then(b =\u003e ...)\n    .catch(ex =\u003e ...);\n\n// Call with await syntax\ntry {\n    const a = await doAsyncThing();\n    const b = await doPromiseThing(a);\n    ...\n}\ncatch(ex) { ... }"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "async function doAsyncThing() { ... }\n\nfunction doPromiseThing(input) { return new Promise((r, x) =\u003e ...); }\n\n// Call with promise syntax\ndoAsyncThing()\n    .then(a =\u003e doPromiseThing(a))\n    .then(b =\u003e ...)\n    .catch(ex =\u003e ...);\n\n// Call with await syntax\ntry {\n    const a = await doAsyncThing();\n    const b = await doPromiseThing(a);\n    ...\n}\ncatch(ex) { ... }",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613782,
        "id": "a40ae327-3ed6-46eb-81a9-bae24edd98f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613782,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Any function that uses chains of promises can be rewritten using "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Any function that uses chains of promises can be rewritten using "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613782,
        "id": "208b8f39-e4c1-4dbf-ab79-cf0d68d25af1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593640000,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function newUnicorn() {\n  return fetch('unicorn.json')                     // fetch unicorn.json from server\n  .then(responseCurrent =\u003e responseCurrent.json()) // parse the response as JSON\n  .then(unicorn =\u003e\n    fetch('new/unicorn', {                         // send a request to 'new/unicorn' \n        method: 'post',                            // using the POST method\n        body: JSON.stringify({unicorn})            // pass the unicorn to the request body\n    })\n  )\n  .then(responseNew =\u003e responseNew.json())\n  .then(json =\u003e json.success)                      // return success property of response\n  .catch(err =\u003e console.log('Error creating unicorn:', err));\n }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function newUnicorn() {\n  return fetch('unicorn.json')                     // fetch unicorn.json from server\n  .then(responseCurrent =\u003e responseCurrent.json()) // parse the response as JSON\n  .then(unicorn =\u003e\n    fetch('new/unicorn', {                         // send a request to 'new/unicorn' \n        method: 'post',                            // using the POST method\n        body: JSON.stringify({unicorn})            // pass the unicorn to the request body\n    })\n  )\n  .then(responseNew =\u003e responseNew.json())\n  .then(json =\u003e json.success)                      // return success property of response\n  .catch(err =\u003e console.log('Error creating unicorn:', err));\n }",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613783,
        "id": "352d9dd0-ca40-4c16-96b8-d722535edbb7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613783,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function can be rewritten using "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " / "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as follows:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function can be rewritten using "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " / "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " as follows:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613783,
        "id": "6980aea7-4e65-4ece-9776-3d670a584910",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593640000,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "async function newUnicorn() {\n  try {\n    const responseCurrent = await fetch('unicorn.json'); // fetch unicorn.json from server\n    const unicorn = await responseCurrent.json();        // parse the response as JSON\n    const responseNew = await fetch('new/unicorn', {     // send a request to 'new/unicorn'\n      method: 'post',                                    // using the POST method\n      body: JSON.stringify({unicorn})                    // pass the unicorn to the request body\n    });\n    const json = await responseNew.json();\n    return json.success                                  // return success property of response\n  } catch (err) {\n    console.log('Error creating unicorn:', err);\n  }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "async function newUnicorn() {\n  try {\n    const responseCurrent = await fetch('unicorn.json'); // fetch unicorn.json from server\n    const unicorn = await responseCurrent.json();        // parse the response as JSON\n    const responseNew = await fetch('new/unicorn', {     // send a request to 'new/unicorn'\n      method: 'post',                                    // using the POST method\n      body: JSON.stringify({unicorn})                    // pass the unicorn to the request body\n    });\n    const json = await responseNew.json();\n    return json.success                                  // return success property of response\n  } catch (err) {\n    console.log('Error creating unicorn:', err);\n  }\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613783,
        "id": "c60d26fe-d31d-4ca7-8773-7cbf97a1b923",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613783,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " variant of "
            ],
            [
              "newUnicorn()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " appears to return a "
            ],
            [
              "Promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but really there were multiple "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keywords. Each one returned a "
            ],
            [
              "Promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so really we had a collection of promises rather than a chain."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " variant of "
          },
          {
            "Text": "newUnicorn()",
            "AttrFlags": 2
          },
          {
            "Text": " appears to return a "
          },
          {
            "Text": "Promise",
            "AttrFlags": 2
          },
          {
            "Text": ", but really there were multiple "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " keywords. Each one returned a "
          },
          {
            "Text": "Promise",
            "AttrFlags": 2
          },
          {
            "Text": ", so really we had a collection of promises rather than a chain."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613783,
        "id": "7e48b621-dbc4-4dd0-8ff5-b3295ba92170",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613783,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In fact we can think of it as a "
            ],
            [
              "function*",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " generator, with each "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " being a "
            ],
            [
              "yield new Promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". However, the results of each promise are needed by the next to continue the function. This is why the additional keyword "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is needed on the function (as well as the "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword when calling the promises) as it tells Javascript to automatically creates an observer for this iteration. The "
            ],
            [
              "Promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returned by "
            ],
            [
              "async function newUnicorn()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " resolves when this iteration completes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In fact we can think of it as a "
          },
          {
            "Text": "function*",
            "AttrFlags": 2
          },
          {
            "Text": " generator, with each "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " being a "
          },
          {
            "Text": "yield new Promise",
            "AttrFlags": 2
          },
          {
            "Text": ". However, the results of each promise are needed by the next to continue the function. This is why the additional keyword "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " is needed on the function (as well as the "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " keyword when calling the promises) as it tells Javascript to automatically creates an observer for this iteration. The "
          },
          {
            "Text": "Promise",
            "AttrFlags": 2
          },
          {
            "Text": " returned by "
          },
          {
            "Text": "async function newUnicorn()",
            "AttrFlags": 2
          },
          {
            "Text": " resolves when this iteration completes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613784,
        "id": "819d5c99-018e-4cb1-9604-2f60ddd8e351",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613784,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Practically, you don’t need to consider that; "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " hides the promise and "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " hides the generator iteration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Practically, you don’t need to consider that; "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " hides the promise and "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " hides the generator iteration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613784,
        "id": "b7654b26-b14c-4bed-a20e-bd4e5b482101",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613784,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can call "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " functions as if they were promises, and "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " any promise or any "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function. You don’t need to "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " an async function, just as you can execute a promise without a "
            ],
            [
              ".then()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can call "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " functions as if they were promises, and "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " any promise or any "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " function. You don’t need to "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " an async function, just as you can execute a promise without a "
          },
          {
            "Text": ".then()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613786,
        "id": "7798bfb5-de6c-4f8a-b1d2-3560e225f6c5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715613786,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also use an "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "IIFE",
              [
                [
                  "a",
                  "https://en.wikipedia.org/wiki/Immediately-invoked_function_expression"
                ]
              ]
            ],
            [
              " if you want to execute that code immediately:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also use an "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "IIFE",
            "Link": "https://en.wikipedia.org/wiki/Immediately-invoked_function_expression"
          },
          {
            "Text": " if you want to execute that code immediately:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715613786,
        "id": "0c212b5d-7751-4b29-89da-c06cc5db36bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593640000,
        "parent_id": "0b92356c-a6a5-46b8-84db-b66fc5d0fb27",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "(async () =\u003e {\n  await makeCoffee()\n  console.log('coffee is ready!')\n})()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "(async () =\u003e {\n  await makeCoffee()\n  console.log('coffee is ready!')\n})()",
        "code_language": "JavaScript"
      }
    ],
    "title": "Async functions compared to Promises",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}