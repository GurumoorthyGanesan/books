{
  "ID": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
  "Root": {
    "alive": true,
    "content": [
      "50be1a50-5d22-46f3-82d1-460c81cb6100",
      "3ef62a1f-a491-447b-a438-d9809b151d8a",
      "68b9a913-9c94-4a5f-be8f-832b532fb464",
      "ba03cda4-c667-468e-9bf4-70a1324352f5",
      "2007e873-5784-4a5b-a26e-68f089ec0f83",
      "3499cd73-86c8-460a-88a6-c0a6a3f1e505",
      "9e8efc5b-bd51-4c54-93ab-adee72fc25a6",
      "6eb14f31-57d5-4219-bca7-89ef658a70b6",
      "46bffb9f-61f2-45d9-a59a-a723dde202f2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715899172,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551595020000,
    "parent_id": "337f40a2-6b9b-4941-a028-cebbb21ea965",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Initializing object properties with null"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899170,
        "id": "50be1a50-5d22-46f3-82d1-460c81cb6100",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899170,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All modern JavaScript JIT compilers trying to optimize code based on expected object structures. Some tip from "
            ],
            [
              "mdn",
              [
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/The_performance_hazards_of__%5B%5BPrototype%5D%5D_mutation#How_JavaScript_engines_optimize_property_accesses"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All modern JavaScript JIT compilers trying to optimize code based on expected object structures. Some tip from "
          },
          {
            "Text": "mdn",
            "Link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/The_performance_hazards_of__%5B%5BPrototype%5D%5D_mutation#How_JavaScript_engines_optimize_property_accesses"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899171,
        "id": "3ef62a1f-a491-447b-a438-d9809b151d8a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899171,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fortunately, the objects and properties are often “predictable”, and in such cases their underlying structure can also be predictable. JITs can rely on this to make predictable accesses faster."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fortunately, the objects and properties are often “predictable”, and in such cases their underlying structure can also be predictable. JITs can rely on this to make predictable accesses faster."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899171,
        "id": "68b9a913-9c94-4a5f-be8f-832b532fb464",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899171,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The best way to make object predictable is to define a whole structure in a constructor. So if you’re going to add some extra properties after object creation, define them in a constructor with "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This will help the optimizer to predict object behavior for its whole life cycle. However all compilers have different optimizers, and the performance increase can be different, but overall it’s good practice to define all properties in a constructor, even when their value is not yet known."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The best way to make object predictable is to define a whole structure in a constructor. So if you’re going to add some extra properties after object creation, define them in a constructor with "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": ". This will help the optimizer to predict object behavior for its whole life cycle. However all compilers have different optimizers, and the performance increase can be different, but overall it’s good practice to define all properties in a constructor, even when their value is not yet known."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899171,
        "id": "ba03cda4-c667-468e-9bf4-70a1324352f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899171,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Time for some testing. In my test, I’m creating a big array of some class instances with a for loop. Within the loop, I’m assigning the same string to all object’s “x” property before array initialization. If constructor initializes “x” property with null, array always processes better even if it’s doing extra statement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Time for some testing. In my test, I’m creating a big array of some class instances with a for loop. Within the loop, I’m assigning the same string to all object’s “x” property before array initialization. If constructor initializes “x” property with null, array always processes better even if it’s doing extra statement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899171,
        "id": "2007e873-5784-4a5b-a26e-68f089ec0f83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899171,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899172,
        "id": "3499cd73-86c8-460a-88a6-c0a6a3f1e505",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595020000,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function f1() {\n    var P = function () {\n        this.value = 1\n    };\n    var big_array = new Array(10000000).fill(1).map((x, index)=\u003e {\n        p = new P();\n        if (index \u003e 5000000) {\n            p.x = \"some_string\";\n        }\n\n        return p;\n    });\n    big_array.reduce((sum, p)=\u003e sum + p.value, 0);\n}\n\nfunction f2() {\n    var P = function () {\n        this.value = 1;\n        this.x = null;\n    };\n    var big_array = new Array(10000000).fill(1).map((x, index)=\u003e {\n        p = new P();\n        if (index \u003e 5000000) {\n            p.x = \"some_string\";\n        }\n\n        return p;\n    });\n    big_array.reduce((sum, p)=\u003e sum + p.value, 0);\n}\n\n\n(function perform(){\n    var start = performance.now();\n    f1();\n    var duration = performance.now() - start;\n\n    console.log('duration of f1  ' + duration);\n\n\n    start = performance.now();\n    f2();\n    duration = performance.now() - start;\n\n    console.log('duration of f2 ' + duration);\n})()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function f1() {\n    var P = function () {\n        this.value = 1\n    };\n    var big_array = new Array(10000000).fill(1).map((x, index)=\u003e {\n        p = new P();\n        if (index \u003e 5000000) {\n            p.x = \"some_string\";\n        }\n\n        return p;\n    });\n    big_array.reduce((sum, p)=\u003e sum + p.value, 0);\n}\n\nfunction f2() {\n    var P = function () {\n        this.value = 1;\n        this.x = null;\n    };\n    var big_array = new Array(10000000).fill(1).map((x, index)=\u003e {\n        p = new P();\n        if (index \u003e 5000000) {\n            p.x = \"some_string\";\n        }\n\n        return p;\n    });\n    big_array.reduce((sum, p)=\u003e sum + p.value, 0);\n}\n\n\n(function perform(){\n    var start = performance.now();\n    f1();\n    var duration = performance.now() - start;\n\n    console.log('duration of f1  ' + duration);\n\n\n    start = performance.now();\n    f2();\n    duration = performance.now() - start;\n\n    console.log('duration of f2 ' + duration);\n})()",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899172,
        "id": "9e8efc5b-bd51-4c54-93ab-adee72fc25a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899172,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is the result for Chrome and Firefox."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is the result for Chrome and Firefox."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899172,
        "id": "6eb14f31-57d5-4219-bca7-89ef658a70b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899172,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "FireFox     Chrome\n--------------------------\nf1      6,400      11,400\nf2      1,700       9,600"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "FireFox     Chrome\n--------------------------\nf1      6,400      11,400\nf2      1,700       9,600",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715899172,
        "id": "46bffb9f-61f2-45d9-a59a-a723dde202f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715899172,
        "parent_id": "82f46026-7e9d-4283-ad51-d21cbd87b4be",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As we can see, the performance improvements are very different between the two."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As we can see, the performance improvements are very different between the two."
          }
        ]
      }
    ],
    "title": "Initializing object properties with null",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}