{
  "ID": "94f85007-3ab2-4981-8a49-34a289bd637b",
  "Root": {
    "alive": true,
    "content": [
      "6174ebcb-7c3a-4e3e-b8a4-088526fb1c26",
      "b6bbe0c8-1a26-4f7c-8c0e-8b7abedaa2e8",
      "ee9d46a3-071f-4852-84d3-d1eb1aa8a409",
      "3022aa1f-b33f-4ddb-b4ca-ae534db3ef04",
      "d8441a2a-14e3-4b13-82ad-5e7b011b4056"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715617112,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "94f85007-3ab2-4981-8a49-34a289bd637b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551593760000,
    "parent_id": "0a8fef9d-a46b-4135-9e0b-09adc1486be0",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simultaneous async parallel operations"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715617106,
        "id": "6174ebcb-7c3a-4e3e-b8a4-088526fb1c26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715617106,
        "parent_id": "94f85007-3ab2-4981-8a49-34a289bd637b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Often you will want to perform asynchronous operations in parallel. There is direct syntax that supports this in the "
            ],
            [
              "async",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "/"
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " proposal, but since "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will wait for a promise, you can wrap multiple promises together in "
            ],
            [
              "Promise.all",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to wait for them:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Often you will want to perform asynchronous operations in parallel. There is direct syntax that supports this in the "
          },
          {
            "Text": "async",
            "AttrFlags": 2
          },
          {
            "Text": "/"
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " proposal, but since "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " will wait for a promise, you can wrap multiple promises together in "
          },
          {
            "Text": "Promise.all",
            "AttrFlags": 2
          },
          {
            "Text": " to wait for them:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715617111,
        "id": "b6bbe0c8-1a26-4f7c-8c0e-8b7abedaa2e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593760000,
        "parent_id": "94f85007-3ab2-4981-8a49-34a289bd637b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// Not in parallel\n\nasync function getFriendPosts(user) {\n    friendIds = await db.get(\"friends\", {user}, {id: 1});\n    friendPosts = [];\n    for (let id in friendIds) {\n        friendPosts = friendPosts.concat( await db.get(\"posts\", {user: id}) );\n    }\n    // etc.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Not in parallel\n\nasync function getFriendPosts(user) {\n    friendIds = await db.get(\"friends\", {user}, {id: 1});\n    friendPosts = [];\n    for (let id in friendIds) {\n        friendPosts = friendPosts.concat( await db.get(\"posts\", {user: id}) );\n    }\n    // etc.\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715617111,
        "id": "ee9d46a3-071f-4852-84d3-d1eb1aa8a409",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715617111,
        "parent_id": "94f85007-3ab2-4981-8a49-34a289bd637b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will do each query to get each friend’s posts serially, but they can be done simultaneously:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will do each query to get each friend’s posts serially, but they can be done simultaneously:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715617111,
        "id": "3022aa1f-b33f-4ddb-b4ca-ae534db3ef04",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593760000,
        "parent_id": "94f85007-3ab2-4981-8a49-34a289bd637b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// In parallel\n\nasync function getFriendPosts(user) {\n    friendIds = await.db.get(\"friends\", {user}, {id: 1});\n    friendPosts = await Promise.all( friendIds.map(id =\u003e \n      db.get(\"posts\", {user: id})\n    );\n    // etc.\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// In parallel\n\nasync function getFriendPosts(user) {\n    friendIds = await.db.get(\"friends\", {user}, {id: 1});\n    friendPosts = await Promise.all( friendIds.map(id =\u003e \n      db.get(\"posts\", {user: id})\n    );\n    // etc.\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715617111,
        "id": "d8441a2a-14e3-4b13-82ad-5e7b011b4056",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715617111,
        "parent_id": "94f85007-3ab2-4981-8a49-34a289bd637b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This will loop over the list of IDs to create an array of promises. "
            ],
            [
              "await",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will wait for "
            ],
            [
              "all",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " promises to be complete. "
            ],
            [
              "Promise.all",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " combines them into a single promise, but they are done in parallel."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This will loop over the list of IDs to create an array of promises. "
          },
          {
            "Text": "await",
            "AttrFlags": 2
          },
          {
            "Text": " will wait for "
          },
          {
            "Text": "all",
            "AttrFlags": 4
          },
          {
            "Text": " promises to be complete. "
          },
          {
            "Text": "Promise.all",
            "AttrFlags": 2
          },
          {
            "Text": " combines them into a single promise, but they are done in parallel."
          }
        ]
      }
    ],
    "title": "Simultaneous async parallel operations",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}