{
  "ID": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
  "Root": {
    "alive": true,
    "content": [
      "e717528e-7b3b-436b-8aba-db088c47babe",
      "61a5b7e5-6603-4e12-9873-ae107e64b3ed",
      "da2262eb-813e-4f75-91d8-1793236e1f03",
      "78168a4b-a285-4278-b95d-5098fb214ebb",
      "46c90f46-2879-4d7d-be0b-0e2844e19f73",
      "b4c7ec6b-332c-44a9-969c-b9a7f4b1fbfa",
      "2ba3538f-ce9b-480c-93fc-ccc32654aba3",
      "1a638848-db2a-4c5b-b38d-55481b793e8f",
      "1f89e5d7-8e72-4f57-8ab6-5f613273cf6c",
      "9b40659f-287f-458c-95e6-4c637d23ed7f",
      "2f69f170-c63b-4aeb-a110-01cb0554c7c3",
      "3b0b5368-7927-4598-96ac-aff4c81c2be7",
      "50b58754-ebc5-4294-bacd-02889b929ab9",
      "17990fd4-7612-463a-9e2e-fe50307add5c",
      "5efa24b7-0cd9-4588-8ddd-5484febba83b",
      "4c80a6fa-c12b-4fad-a667-55fb8cee850a",
      "c027ea9d-9126-418e-bd6b-0fd51e180d2c",
      "38658e3e-2177-4b37-afd9-f5b579471a9c",
      "a17e9a32-390a-469c-b76d-91921208d27b",
      "8fc1a0e4-12c6-4fb4-8ea5-b26782482dc3",
      "50d98943-b14c-4b36-975e-8543a9bf8963",
      "1e756ac8-6896-41e6-bbd8-5fb5f38e1f50",
      "df85b934-a3ee-493e-903c-9ed45b91d80f",
      "010ee564-7965-4502-893c-7d176688bca4",
      "4edb4a9b-6497-4336-9508-ea8b2c604a6b",
      "c8f74f37-0d08-4106-a619-a5da49a7dcdd",
      "e412020b-2aa3-4504-8e2a-c6e929cde8af",
      "af2502bd-1d35-4329-b146-805e39fe425c",
      "f3fd6c18-7b61-4475-96e3-6149d9ef7168",
      "c8410578-1ec3-40a9-ab2e-6f55a2ca350c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550714971167,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550817540000,
    "parent_id": "258d5f6e-0cc0-4d61-b286-ea3a708b3390",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Anonymous Function"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971160,
        "id": "e717528e-7b3b-436b-8aba-db088c47babe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971160,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Defining an Anonymous Function"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Defining an Anonymous Function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971163,
        "id": "61a5b7e5-6603-4e12-9873-ae107e64b3ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971163,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a function is defined, you often give it a name and then invoke it using that name, like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a function is defined, you often give it a name and then invoke it using that name, like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "da2262eb-813e-4f75-91d8-1793236e1f03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817480000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "foo();\n\nfunction foo(){\n    // ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "foo();\n\nfunction foo(){\n    // ...\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "78168a4b-a285-4278-b95d-5098fb214ebb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971164,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you define a function this way, the Javascript runtime stores your function in memory and then creates a reference to that function, using the name you’ve assigned it. That name is then accessible within the current scope. This can be a very convenient way to create a function, but Javascript does not require you to assign a name to a function. The following is also perfectly legal:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you define a function this way, the Javascript runtime stores your function in memory and then creates a reference to that function, using the name you’ve assigned it. That name is then accessible within the current scope. This can be a very convenient way to create a function, but Javascript does not require you to assign a name to a function. The following is also perfectly legal:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "46c90f46-2879-4d7d-be0b-0e2844e19f73",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817480000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function() {\n    // ...\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function() {\n    // ...\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "b4c7ec6b-332c-44a9-969c-b9a7f4b1fbfa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971164,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When a function is defined without a name, it’s known as an anonymous function. The function is stored in memory, but the runtime doesn’t automatically create a reference to it for you. At first glance, it may appear as if such a thing would have no use, but there are several scenarios where anonymous functions are very convenient."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When a function is defined without a name, it’s known as an anonymous function. The function is stored in memory, but the runtime doesn’t automatically create a reference to it for you. At first glance, it may appear as if such a thing would have no use, but there are several scenarios where anonymous functions are very convenient."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "2ba3538f-ce9b-480c-93fc-ccc32654aba3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971164,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assigning an Anonymous Function to a Variable"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Assigning an Anonymous Function to a Variable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "1a638848-db2a-4c5b-b38d-55481b793e8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971164,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A very common use of anonymous functions is to assign them to a variable:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A very common use of anonymous functions is to assign them to a variable:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "1f89e5d7-8e72-4f57-8ab6-5f613273cf6c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817480000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var foo = function(){ /*...*/ };\n\nfoo();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var foo = function(){ /*...*/ };\n\nfoo();",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971164,
        "id": "9b40659f-287f-458c-95e6-4c637d23ed7f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817480000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This use of anonymous functions is covered in more detail in "
            ],
            [
              "http://stackoverflow.com/documentation/javascript/186/functions/716/functions-as-a-variable#t=20160817162538432807",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/186/functions/716/functions-as-a-variable#t=20160817162538432807"
                ]
              ]
            ],
            [
              " "
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "This use of anonymous functions is covered in more detail in "
          },
          {
            "Text": "http://stackoverflow.com/documentation/javascript/186/functions/716/functions-as-a-variable#t=20160817162538432807",
            "Link": "http://stackoverflow.com/documentation/javascript/186/functions/716/functions-as-a-variable#t=20160817162538432807"
          },
          {
            "Text": " "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "2f69f170-c63b-4aeb-a110-01cb0554c7c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Supplying an Anonymous Function as a Parameter to Another Function"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Supplying an Anonymous Function as a Parameter to Another Function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "3b0b5368-7927-4598-96ac-aff4c81c2be7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some functions may accept a reference to a function as a parameter. These are sometimes referred to as “dependency injections” or “callbacks”, because it allows the function your calling to “call back” to your code, giving you an opportunity to change the way the called function behaves. For example, the Array object’s map function allows you to iterate over each element of an array, then build a new array by applying a transform function to each element."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some functions may accept a reference to a function as a parameter. These are sometimes referred to as “dependency injections” or “callbacks”, because it allows the function your calling to “call back” to your code, giving you an opportunity to change the way the called function behaves. For example, the Array object’s map function allows you to iterate over each element of an array, then build a new array by applying a transform function to each element."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "50b58754-ebc5-4294-bacd-02889b929ab9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817480000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var nums = [0,1,2];\nvar doubledNums = nums.map( function(element){ return element * 2; } ); // [0,2,4]"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var nums = [0,1,2];\nvar doubledNums = nums.map( function(element){ return element * 2; } ); // [0,2,4]",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "17990fd4-7612-463a-9e2e-fe50307add5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It would be tedious, sloppy and unnecessary to create a named function, which would clutter your scope with a function only needed in this one place and break the natural flow and reading of your code (a colleague would have to leave this code to find your function to understand what’s going on)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It would be tedious, sloppy and unnecessary to create a named function, which would clutter your scope with a function only needed in this one place and break the natural flow and reading of your code (a colleague would have to leave this code to find your function to understand what’s going on)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "5efa24b7-0cd9-4588-8ddd-5484febba83b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Returning an Anonymous Function From Another Function"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Returning an Anonymous Function From Another Function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "4c80a6fa-c12b-4fad-a667-55fb8cee850a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes it’s useful to return a function as the result of another function. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes it’s useful to return a function as the result of another function. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "c027ea9d-9126-418e-bd6b-0fd51e180d2c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817540000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var hash = getHashFunction( 'sha1' );\nvar hashValue = hash( 'Secret Value' );\n\nfunction getHashFunction( algorithm ){\n\n    if ( algorithm === 'sha1' ) return function( value ){ /*...*/ };\n    else if ( algorithm === 'md5' ) return function( value ){ /*...*/ };\n\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var hash = getHashFunction( 'sha1' );\nvar hashValue = hash( 'Secret Value' );\n\nfunction getHashFunction( algorithm ){\n\n    if ( algorithm === 'sha1' ) return function( value ){ /*...*/ };\n    else if ( algorithm === 'md5' ) return function( value ){ /*...*/ };\n\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "38658e3e-2177-4b37-afd9-f5b579471a9c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Immediately Invoking an Anonymous Function"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Immediately Invoking an Anonymous Function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971165,
        "id": "a17e9a32-390a-469c-b76d-91921208d27b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971165,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unlike many other languages, scoping in Javascript is function-level, not block-level. (See http://stackoverflow.com/documentation/javascript/186/functions/844/function-scoping#t=20160817162538432807 ). In some cases, however, it’s necessary to create a new scope. For example, it’s common to create a new scope when adding code via a "
            ],
            [
              "\u003cscript\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " tag, rather than allowing variable names to be defined in the global scope (which runs the risk of other scripts colliding with your variable names). A common method to handle this situation is to define a new anonymous function and then immediately invoke it, safely hiding you variables within the scope of the anonymous function and without making your code accessible to third-parties via a leaked function name. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unlike many other languages, scoping in Javascript is function-level, not block-level. (See http://stackoverflow.com/documentation/javascript/186/functions/844/function-scoping#t=20160817162538432807 ). In some cases, however, it’s necessary to create a new scope. For example, it’s common to create a new scope when adding code via a "
          },
          {
            "Text": "\u003cscript\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " tag, rather than allowing variable names to be defined in the global scope (which runs the risk of other scripts colliding with your variable names). A common method to handle this situation is to define a new anonymous function and then immediately invoke it, safely hiding you variables within the scope of the anonymous function and without making your code accessible to third-parties via a leaked function name. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "8fc1a0e4-12c6-4fb4-8ea5-b26782482dc3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817540000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "HTML"
            ]
          ],
          "title": [
            [
              "\u003c!-- My Script --\u003e\n\u003cscript\u003e\nfunction initialize(){\n    // foo is safely hidden within initialize, but...\n    var foo = '';\n}\n\n// ...my initialize function is now accessible from global scope.\n// There's a risk someone could call it again, probably by accident.\ninitialize();\n\u003c/script\u003e\n\n\u003cscript\u003e\n// Using an anonymous function, and then immediately\n// invoking it, hides my foo variable and guarantees\n// no one else can call it a second time.\n(function(){\n    var foo = '';\n}()) // \u003c--- the parentheses invokes the function immediately\n\u003c/script\u003e"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "\u003c!-- My Script --\u003e\n\u003cscript\u003e\nfunction initialize(){\n    // foo is safely hidden within initialize, but...\n    var foo = '';\n}\n\n// ...my initialize function is now accessible from global scope.\n// There's a risk someone could call it again, probably by accident.\ninitialize();\n\u003c/script\u003e\n\n\u003cscript\u003e\n// Using an anonymous function, and then immediately\n// invoking it, hides my foo variable and guarantees\n// no one else can call it a second time.\n(function(){\n    var foo = '';\n}()) // \u003c--- the parentheses invokes the function immediately\n\u003c/script\u003e",
        "code_language": "HTML"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "50d98943-b14c-4b36-975e-8543a9bf8963",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971166,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Self-Referential Anonymous Functions"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Self-Referential Anonymous Functions"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "1e756ac8-6896-41e6-bbd8-5fb5f38e1f50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971166,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sometimes it’s useful for an anonymous function to be able to refer to itself. For example, the function may need to recursively call itself or add properties to itself. If the function is anonymous, though, this can be very difficult as it requires knowledge of the variable that the function has been assigned to. This is the less than ideal solution:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sometimes it’s useful for an anonymous function to be able to refer to itself. For example, the function may need to recursively call itself or add properties to itself. If the function is anonymous, though, this can be very difficult as it requires knowledge of the variable that the function has been assigned to. This is the less than ideal solution:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "df85b934-a3ee-493e-903c-9ed45b91d80f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817540000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var foo = function(callAgain){\n    console.log( 'Whassup?' );\n    // Less then ideal... we're dependent on a variable reference...\n    if (callAgain === true) foo(false);\n};\n\nfoo(true);\n\n// Console Output:\n// Whassup?\n// Whassup?\n\n// Assign bar to the original function, and assign foo to another function.\nvar bar = foo;\nfoo = function(){\n    console.log('Bad.')\n};\n\nbar(true);\n\n// Console Output:\n// Whassup?\n// Bad."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var foo = function(callAgain){\n    console.log( 'Whassup?' );\n    // Less then ideal... we're dependent on a variable reference...\n    if (callAgain === true) foo(false);\n};\n\nfoo(true);\n\n// Console Output:\n// Whassup?\n// Whassup?\n\n// Assign bar to the original function, and assign foo to another function.\nvar bar = foo;\nfoo = function(){\n    console.log('Bad.')\n};\n\nbar(true);\n\n// Console Output:\n// Whassup?\n// Bad.",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "010ee564-7965-4502-893c-7d176688bca4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971166,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The intent here was for the anonymous function to recursively call itself, but when the value of foo changes, you end up with a potentially difficult to trace bug."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The intent here was for the anonymous function to recursively call itself, but when the value of foo changes, you end up with a potentially difficult to trace bug."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "4edb4a9b-6497-4336-9508-ea8b2c604a6b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971166,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead, we can give the anonymous function a reference to itself by giving it a private name, like so:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead, we can give the anonymous function a reference to itself by giving it a private name, like so:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "c8f74f37-0d08-4106-a619-a5da49a7dcdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817540000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var foo = function myself(callAgain){\n    console.log( 'Whassup?' );\n    // Less then ideal... we're dependent on a variable reference...\n    if (callAgain === true) myself(false);\n};\n\nfoo(true);\n\n// Console Output:\n// Whassup?\n// Whassup?\n\n// Assign bar to the original function, and assign foo to another function.\nvar bar = foo;\nfoo = function(){\n    console.log('Bad.')\n};\n\nbar(true);\n\n// Console Output:\n// Whassup?\n// Whassup?"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var foo = function myself(callAgain){\n    console.log( 'Whassup?' );\n    // Less then ideal... we're dependent on a variable reference...\n    if (callAgain === true) myself(false);\n};\n\nfoo(true);\n\n// Console Output:\n// Whassup?\n// Whassup?\n\n// Assign bar to the original function, and assign foo to another function.\nvar bar = foo;\nfoo = function(){\n    console.log('Bad.')\n};\n\nbar(true);\n\n// Console Output:\n// Whassup?\n// Whassup?",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "e412020b-2aa3-4504-8e2a-c6e929cde8af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971166,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that the function name is scoped to itself. The name has not leaked into the outer scope:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that the function name is scoped to itself. The name has not leaked into the outer scope:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971166,
        "id": "af2502bd-1d35-4329-b146-805e39fe425c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817540000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "myself(false); // ReferenceError: myself is not defined"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "myself(false); // ReferenceError: myself is not defined",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971167,
        "id": "f3fd6c18-7b61-4475-96e3-6149d9ef7168",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714971167,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This technique is especially useful when dealing with recursive anonymous functions as callback parameters:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This technique is especially useful when dealing with recursive anonymous functions as callback parameters:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714971167,
        "id": "c8410578-1ec3-40a9-ab2e-6f55a2ca350c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550817540000,
        "parent_id": "7d18f92f-1f9c-4ede-8233-74c1812ebea1",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// Calculate the fibonacci value for each number in an array:\nvar fib = false,\n    result = [1,2,3,4,5,6,7,8].map(\n        function fib(n){\n            return ( n \u003c= 2 ) ? 1 : fib( n - 1 ) + fib( n - 2 );\n        });\n// result = [1, 1, 2, 3, 5, 8, 13, 21]\n// fib = false (the anonymous function name did not overwrite our fib variable)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// Calculate the fibonacci value for each number in an array:\nvar fib = false,\n    result = [1,2,3,4,5,6,7,8].map(\n        function fib(n){\n            return ( n \u003c= 2 ) ? 1 : fib( n - 1 ) + fib( n - 2 );\n        });\n// result = [1, 1, 2, 3, 5, 8, 13, 21]\n// fib = false (the anonymous function name did not overwrite our fib variable)",
        "code_language": "JavaScript"
      }
    ],
    "title": "Anonymous Function",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}