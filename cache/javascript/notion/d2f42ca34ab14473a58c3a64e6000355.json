{
  "ID": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
  "Root": {
    "alive": true,
    "content": [
      "0121ccf3-2e4c-42c0-bcd4-4987bb92b3cb",
      "f631f9ba-62a8-4e12-89e3-2f08c70539bd",
      "52ef847f-d933-4949-9705-4f63071c39ef",
      "1f1a8b5a-bc18-46be-b1b6-619559593dfc",
      "f83cadf8-8b75-40fb-918f-0a423791ebf8",
      "6a99048f-944e-4562-a4bb-8181caa8da93",
      "dfe62192-a98a-4898-a0bc-5814018cc556",
      "1e1b7504-9e70-4d2f-82a8-7eba8e784a5c",
      "7a888392-d980-4b44-b0fd-23b02d09e852",
      "8488b712-cb50-4c60-97d8-e84c67626afd",
      "866f6ecf-e7d7-421a-9adb-f95865bbefa0",
      "26cea89f-b16c-4f64-b981-ef8e9cfd44b2",
      "9deaa5ec-e2ae-4608-9900-7acdf5273f13",
      "9206195c-1125-4f8f-95c9-c41bc6cea7c4",
      "431b0855-ec6f-426e-b27d-e591653bf4b4",
      "f7557553-353e-4e82-9a85-7b48ef845c48",
      "171395a5-b908-445c-bbbc-042e63b30a50",
      "93d3441f-5aa9-40d7-ae20-ef737b8cb81c"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715080194,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550870040000,
    "parent_id": "8258c948-9475-41eb-8bbe-cdf7703094bf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Abstract equality inequality and type conversion"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080186,
        "id": "0121ccf3-2e4c-42c0-bcd4-4987bb92b3cb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080186,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Problem"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Problem"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080189,
        "id": "f631f9ba-62a8-4e12-89e3-2f08c70539bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080189,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The abstract equality and inequality operators ("
            ],
            [
              "==",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "!=",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") convert their operands if the operand types do not match. This type coercion is a common source of confusion about the results of these operators, in particular, these operators aren’t always transitive as one would expect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The abstract equality and inequality operators ("
          },
          {
            "Text": "==",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "!=",
            "AttrFlags": 2
          },
          {
            "Text": ") convert their operands if the operand types do not match. This type coercion is a common source of confusion about the results of these operators, in particular, these operators aren’t always transitive as one would expect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080189,
        "id": "52ef847f-d933-4949-9705-4f63071c39ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869980000,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "\"\" ==  0;     // true A\n 0 == \"0\";    // true A\n\"\" == \"0\";    // false B\nfalse == 0;   // true\nfalse == \"0\"; // true\n\n\"\" !=  0;     // false A\n 0 != \"0\";    // false A\n\"\" != \"0\";    // true B\nfalse != 0;   // false\nfalse != \"0\"; // false"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\"\" ==  0;     // true A\n 0 == \"0\";    // true A\n\"\" == \"0\";    // false B\nfalse == 0;   // true\nfalse == \"0\"; // true\n\n\"\" !=  0;     // false A\n 0 != \"0\";    // false A\n\"\" != \"0\";    // true B\nfalse != 0;   // false\nfalse != \"0\"; // false",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080189,
        "id": "1f1a8b5a-bc18-46be-b1b6-619559593dfc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080189,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The results start to make sense if you consider how JavaScript converts empty strings to numbers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The results start to make sense if you consider how JavaScript converts empty strings to numbers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080189,
        "id": "f83cadf8-8b75-40fb-918f-0a423791ebf8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869980000,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "Number(\"\");    // 0\nNumber(\"0\");   // 0\nNumber(false); // 0"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Number(\"\");    // 0\nNumber(\"0\");   // 0\nNumber(false); // 0",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080190,
        "id": "6a99048f-944e-4562-a4bb-8181caa8da93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080190,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Solution"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Solution"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080190,
        "id": "dfe62192-a98a-4898-a0bc-5814018cc556",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080190,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the statement "
            ],
            [
              "false B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", both the operands are strings ("
            ],
            [
              "\"\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\"0\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "), hence there will be "
            ],
            [
              "no type conversion",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " and since "
            ],
            [
              "\"\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\"0\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are not the same value, "
            ],
            [
              "\"\" == \"0\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as expected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the statement "
          },
          {
            "Text": "false B",
            "AttrFlags": 2
          },
          {
            "Text": ", both the operands are strings ("
          },
          {
            "Text": "\"\"",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\"0\"",
            "AttrFlags": 2
          },
          {
            "Text": "), hence there will be "
          },
          {
            "Text": "no type conversion",
            "AttrFlags": 1
          },
          {
            "Text": " and since "
          },
          {
            "Text": "\"\"",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\"0\"",
            "AttrFlags": 2
          },
          {
            "Text": " are not the same value, "
          },
          {
            "Text": "\"\" == \"0\"",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " as expected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080190,
        "id": "1e1b7504-9e70-4d2f-82a8-7eba8e784a5c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080190,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One way to eliminate unexpected behavior here is making sure that you always compare operands of the same type. For example, if you want the results of numerical comparison use explicit conversion:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One way to eliminate unexpected behavior here is making sure that you always compare operands of the same type. For example, if you want the results of numerical comparison use explicit conversion:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080190,
        "id": "7a888392-d980-4b44-b0fd-23b02d09e852",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869980000,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var test = (a,b) =\u003e Number(a) == Number(b); \ntest(\"\", 0);        // true;\ntest(\"0\", 0);       // true\ntest(\"\", \"0\");      // true;\ntest(\"abc\", \"abc\"); // false as operands are not numbers"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var test = (a,b) =\u003e Number(a) == Number(b); \ntest(\"\", 0);        // true;\ntest(\"0\", 0);       // true\ntest(\"\", \"0\");      // true;\ntest(\"abc\", \"abc\"); // false as operands are not numbers",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080190,
        "id": "8488b712-cb50-4c60-97d8-e84c67626afd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080190,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or, if you want string comparison:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or, if you want string comparison:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080190,
        "id": "866f6ecf-e7d7-421a-9adb-f95865bbefa0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869980000,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var test = (a,b) =\u003e String(a) == String(b);\ntest(\"\", 0);   // false;\ntest(\"0\", 0);  // true\ntest(\"\", \"0\"); // false;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var test = (a,b) =\u003e String(a) == String(b);\ntest(\"\", 0);   // false;\ntest(\"0\", 0);  // true\ntest(\"\", \"0\"); // false;",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080191,
        "id": "26cea89f-b16c-4f64-b981-ef8e9cfd44b2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080191,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Side-note",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ": "
            ],
            [
              "Number(\"0\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "new Number(\"0\")",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " isn’t the same thing! While the former performs a type conversion, the latter will create a new object. Objects are compared by reference and not by value which explains the results below."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Side-note",
            "AttrFlags": 4
          },
          {
            "Text": ": "
          },
          {
            "Text": "Number(\"0\")",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "new Number(\"0\")",
            "AttrFlags": 2
          },
          {
            "Text": " isn’t the same thing! While the former performs a type conversion, the latter will create a new object. Objects are compared by reference and not by value which explains the results below."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080191,
        "id": "9deaa5ec-e2ae-4608-9900-7acdf5273f13",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869980000,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "Number(\"0\") == Number(\"0\");         // true;\nnew Number(\"0\") == new Number(\"0\"); // false"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Number(\"0\") == Number(\"0\");         // true;\nnew Number(\"0\") == new Number(\"0\"); // false",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080191,
        "id": "9206195c-1125-4f8f-95c9-c41bc6cea7c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080191,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Finally, you have the option to use strict equality and inequality operators which will not perform any implicit type conversions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Finally, you have the option to use strict equality and inequality operators which will not perform any implicit type conversions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080191,
        "id": "431b0855-ec6f-426e-b27d-e591653bf4b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869980000,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "\"\" ===  0;  // false\n 0 === \"0\"; // false\n\"\" === \"0\"; // false"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "\"\" ===  0;  // false\n 0 === \"0\"; // false\n\"\" === \"0\"; // false",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080191,
        "id": "f7557553-353e-4e82-9a85-7b48ef845c48",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080191,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Further reference to this topic can be found here:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Further reference to this topic can be found here:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080193,
        "id": "171395a5-b908-445c-bbbc-042e63b30a50",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080193,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which equals operator (== vs ===) should be used in JavaScript comparisons?",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which equals operator (== vs ===) should be used in JavaScript comparisons?",
            "Link": "http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080193,
        "id": "93d3441f-5aa9-40d7-ae20-ef737b8cb81c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080193,
        "parent_id": "d2f42ca3-4ab1-4473-a58c-3a64e6000355",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Abstract Equality (==)",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/208/comparison-operations/796/abstract-equality#t=20160804184158484392"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Abstract Equality (==)",
            "Link": "http://stackoverflow.com/documentation/javascript/208/comparison-operations/796/abstract-equality#t=20160804184158484392"
          }
        ]
      }
    ],
    "title": "Abstract equality inequality and type conversion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}