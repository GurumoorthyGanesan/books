{
  "ID": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
  "Root": {
    "alive": true,
    "content": [
      "a6b2366c-76d1-46d3-b88f-02ddb39d02fa",
      "dc02844c-c096-469c-8edd-ed7230f99fca",
      "a26f64bb-298f-42a9-a816-8a66654537c1",
      "94ae58d8-ef41-4edd-b17a-bdc799f8de14",
      "75ace35e-19f0-4781-9573-391edd619230",
      "a52b7bfa-ad82-4217-abe5-86df5160677d",
      "7ae789f4-4cbb-4a05-8750-e8137cd8ace7",
      "966ff642-0d8f-4e9a-8449-b2d059749126",
      "5696c9ba-ef67-4121-b223-e5522dfcf2d5",
      "d2b5468b-df4c-44ee-8531-b8cfc60c8a1e",
      "1dfa3223-73b2-47f9-954e-21abbf91d802"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715080203,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550869560000,
    "parent_id": "521bee64-2ddd-4a12-939f-508459526ff2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Little Big endian for typed arrays when using bitwise operators"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080201,
        "id": "a6b2366c-76d1-46d3-b88f-02ddb39d02fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080201,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To detect the endian of the device"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To detect the endian of the device"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "dc02844c-c096-469c-8edd-ed7230f99fca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869560000,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var isLittleEndian = true;\n(()=\u003e{\n    var buf = new ArrayBuffer(4);\n    var buf8 = new Uint8ClampedArray(buf);\n    var data = new Uint32Array(buf);\n    data[0] = 0x0F000000;\n    if(buf8[0] === 0x0f){\n        isLittleEndian = false;\n    }\n})();"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var isLittleEndian = true;\n(()=\u003e{\n    var buf = new ArrayBuffer(4);\n    var buf8 = new Uint8ClampedArray(buf);\n    var data = new Uint32Array(buf);\n    data[0] = 0x0F000000;\n    if(buf8[0] === 0x0f){\n        isLittleEndian = false;\n    }\n})();",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "a26f64bb-298f-42a9-a816-8a66654537c1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080202,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Little-Endian stores most significant bytes from right to left."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Little-Endian stores most significant bytes from right to left."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "94ae58d8-ef41-4edd-b17a-bdc799f8de14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080202,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Big-Endian stores most significant bytes from left to right."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Big-Endian stores most significant bytes from left to right."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "75ace35e-19f0-4781-9573-391edd619230",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869560000,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var myNum = 0x11223344 | 0;  // 32 bit signed integer\nvar buf = new ArrayBuffer(4);\nvar data8 = new Uint8ClampedArray(buf);\nvar data32 = new Uint32Array(buf);\ndata32[0] = myNum; // store number in 32Bit array"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var myNum = 0x11223344 | 0;  // 32 bit signed integer\nvar buf = new ArrayBuffer(4);\nvar data8 = new Uint8ClampedArray(buf);\nvar data32 = new Uint32Array(buf);\ndata32[0] = myNum; // store number in 32Bit array",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "a52b7bfa-ad82-4217-abe5-86df5160677d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080202,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the system uses Little-Endian, then the 8bit byte values will be"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the system uses Little-Endian, then the 8bit byte values will be"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "7ae789f4-4cbb-4a05-8750-e8137cd8ace7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869560000,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "console.log(data8[0].toString(16)); // 0x44\nconsole.log(data8[1].toString(16)); // 0x33\nconsole.log(data8[2].toString(16)); // 0x22\nconsole.log(data8[3].toString(16)); // 0x11"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "console.log(data8[0].toString(16)); // 0x44\nconsole.log(data8[1].toString(16)); // 0x33\nconsole.log(data8[2].toString(16)); // 0x22\nconsole.log(data8[3].toString(16)); // 0x11",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "966ff642-0d8f-4e9a-8449-b2d059749126",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080202,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the system uses Big-Endian, then the 8bit byte values will be"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the system uses Big-Endian, then the 8bit byte values will be"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080202,
        "id": "5696c9ba-ef67-4121-b223-e5522dfcf2d5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869560000,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "console.log(data8[0].toString(16)); // 0x11\nconsole.log(data8[1].toString(16)); // 0x22\nconsole.log(data8[2].toString(16)); // 0x33\nconsole.log(data8[3].toString(16)); // 0x44"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "console.log(data8[0].toString(16)); // 0x11\nconsole.log(data8[1].toString(16)); // 0x22\nconsole.log(data8[2].toString(16)); // 0x33\nconsole.log(data8[3].toString(16)); // 0x44",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080203,
        "id": "d2b5468b-df4c-44ee-8531-b8cfc60c8a1e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715080203,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example where Edian type is important"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example where Edian type is important"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715080203,
        "id": "1dfa3223-73b2-47f9-954e-21abbf91d802",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869560000,
        "parent_id": "5825331f-1210-4565-8c67-52ba9f0f6c9b",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var canvas = document.createElement(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n// To speed up read and write from the image buffer you can create a buffer view that is \n// 32 bits allowing you to read/write a pixel in a single operation\nvar buf32 = new Uint32Array(imgData.data.buffer);\n// Mask out Red and Blue channels\nvar mask = 0x00FF00FF; // bigEndian pixel channels Red,Green,Blue,Alpha\nif(isLittleEndian){\n    mask = 0xFF00FF00; // littleEndian pixel channels Alpha,Blue,Green,Red\n}    \nvar len = buf32.length;\nvar i = 0;\nwhile(i \u003c len){  // Mask all pixels\n    buf32[i] \u0026= mask; //Mask out Red and Blue\n}\nctx.putImageData(imgData);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var canvas = document.createElement(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n// To speed up read and write from the image buffer you can create a buffer view that is \n// 32 bits allowing you to read/write a pixel in a single operation\nvar buf32 = new Uint32Array(imgData.data.buffer);\n// Mask out Red and Blue channels\nvar mask = 0x00FF00FF; // bigEndian pixel channels Red,Green,Blue,Alpha\nif(isLittleEndian){\n    mask = 0xFF00FF00; // littleEndian pixel channels Alpha,Blue,Green,Red\n}    \nvar len = buf32.length;\nvar i = 0;\nwhile(i \u003c len){  // Mask all pixels\n    buf32[i] \u0026= mask; //Mask out Red and Blue\n}\nctx.putImageData(imgData);",
        "code_language": "JavaScript"
      }
    ],
    "title": "Little Big endian for typed arrays when using bitwise operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}