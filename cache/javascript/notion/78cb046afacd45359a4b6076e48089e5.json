{
  "ID": "78cb046a-facd-4535-9a4b-6076e48089e5",
  "Root": {
    "alive": true,
    "content": [
      "46491455-8366-4c93-a668-94efaeb22bd8",
      "8c45939c-9f68-4783-b814-42c80032bfe4",
      "7098a978-8a71-4dba-b8b5-06e74a4d7d20",
      "5dd3bc4c-85df-494b-8bab-bc0263f1e34d",
      "16d096f6-9b4e-43ea-b040-afd36bedb501",
      "92daa9d3-0b5a-4c70-af51-1aea063de45a",
      "ff22ff77-a2d8-45ef-8387-da3770cbe65f",
      "439279ef-b0d9-4773-b4d2-f30a4354b567",
      "ab077453-36d1-40fd-a0e8-c3278acad6fd",
      "9065e3bb-7218-430c-ae7b-2877e56a810e",
      "41cae93b-11b2-48a0-bb21-c1676825e125",
      "9c6d380a-877d-4676-b9d0-d109c2e43627",
      "51c7fc08-89a6-4168-912d-375660a927aa",
      "b11b6ac9-460e-4e21-ab93-1114016a9381",
      "6e82eb39-d15b-4d30-a833-0e441e02575f",
      "19f5cf48-21cb-4736-8330-11a23e47378e",
      "12f5a882-d98e-4cc6-9c93-b415db7773d7",
      "31ada97c-182e-48c8-a766-eaa0edc5c0ba",
      "9a3f1b00-6ca5-4b6a-aa6a-c1320acc614e",
      "615aeb7f-edc2-4041-93fd-d0c1da339036",
      "12dfa36d-cac9-407e-ad7b-14ec56dfab0b",
      "d1093873-9501-43e2-8511-960b46a023ec",
      "a7070e41-ddc0-4134-8e8b-ab86c44ffb9e",
      "64994050-5dc9-442a-a5d3-76ccef46fe7e",
      "1048861c-6a67-48a7-bdbe-facd4d47914a",
      "03462ce6-8517-4443-95f9-6f335647e7d0",
      "0e5df7fb-8730-4eaa-ad13-b4360a450e25",
      "7159eb88-e98a-4f25-a43f-22f4d573fa08",
      "65bb6611-41fe-4b52-9c21-637f0747fcdd"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716408122,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "78cb046a-facd-4535-9a4b-6076e48089e5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683718303,
    "parent_id": "2555b903-ee7b-44e4-8df6-ff5cfc0d7c96",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bitwise operators"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408117,
        "id": "46491455-8366-4c93-a668-94efaeb22bd8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408117,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise operators perform operations on bit values of data. These operators convert operands to signed 32-bit integers in "
            ],
            [
              "two’s complement",
              [
                [
                  "a",
                  "http://stackoverflow.com/questions/1049722/what-is-2s-complement"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise operators perform operations on bit values of data. These operators convert operands to signed 32-bit integers in "
          },
          {
            "Text": "two’s complement",
            "Link": "http://stackoverflow.com/questions/1049722/what-is-2s-complement"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408118,
        "id": "8c45939c-9f68-4783-b814-42c80032bfe4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408118,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conversion to 32-bit integers"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conversion to 32-bit integers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408118,
        "id": "7098a978-8a71-4dba-b8b5-06e74a4d7d20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408118,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Numbers with more than 32 bits discard their most significant bits. For example, the following integer with more than 32 bits is converted to a 32-bit integer:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Numbers with more than 32 bits discard their most significant bits. For example, the following integer with more than 32 bits is converted to a 32-bit integer:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408118,
        "id": "5dd3bc4c-85df-494b-8bab-bc0263f1e34d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408118,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Before: 10100110111110100000000010000011110001000001\nAfter:              10100000000010000011110001000001"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Before: 10100110111110100000000010000011110001000001\nAfter:              10100000000010000011110001000001",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408118,
        "id": "16d096f6-9b4e-43ea-b040-afd36bedb501",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408118,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two’s Complement"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two’s Complement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408118,
        "id": "92daa9d3-0b5a-4c70-af51-1aea063de45a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408118,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In normal binary we find the binary value by adding the "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s based on their position as powers of 2 - The rightmost bit being "
            ],
            [
              "2^0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to the leftmost bit being "
            ],
            [
              "2^n-1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "n",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the number of bits. For example, using 4 bits:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In normal binary we find the binary value by adding the "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s based on their position as powers of 2 - The rightmost bit being "
          },
          {
            "Text": "2^0",
            "AttrFlags": 2
          },
          {
            "Text": " to the leftmost bit being "
          },
          {
            "Text": "2^n-1",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "n",
            "AttrFlags": 2
          },
          {
            "Text": " is the number of bits. For example, using 4 bits:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408118,
        "id": "ff22ff77-a2d8-45ef-8387-da3770cbe65f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408118,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Normal Binary\n// 8 4 2 1\n   0 1 1 0  =\u003e 0 + 4 + 2 + 0 =\u003e 6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Normal Binary\n// 8 4 2 1\n   0 1 1 0  =\u003e 0 + 4 + 2 + 0 =\u003e 6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408119,
        "id": "439279ef-b0d9-4773-b4d2-f30a4354b567",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408119,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Two complement’s format means that the number’s negative counterpart (6 vs -6) is all the bits for a number inverted, plus one. The inverted bits of 6 would be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Two complement’s format means that the number’s negative counterpart (6 vs -6) is all the bits for a number inverted, plus one. The inverted bits of 6 would be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408119,
        "id": "ab077453-36d1-40fd-a0e8-c3278acad6fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408119,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Normal binary\n   0 1 1 0\n// One's complement (all bits inverted)\n   1 0 0 1  =\u003e -8 + 0 + 0 + 1 =\u003e -7\n// Two's complement (add 1 to one's complement)\n   1 0 1 0  =\u003e -8 + 0 + 2 + 0 =\u003e -6"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Normal binary\n   0 1 1 0\n// One's complement (all bits inverted)\n   1 0 0 1  =\u003e -8 + 0 + 0 + 1 =\u003e -7\n// Two's complement (add 1 to one's complement)\n   1 0 1 0  =\u003e -8 + 0 + 2 + 0 =\u003e -6",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408119,
        "id": "9065e3bb-7218-430c-ae7b-2877e56a810e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408119,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note:",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " Adding more "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "‘s to the left of a binary number does not change its value in two’s compliment. The value "
            ],
            [
              "1010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "1111111111010",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are both "
            ],
            [
              "-6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note:",
            "AttrFlags": 4
          },
          {
            "Text": " Adding more "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "‘s to the left of a binary number does not change its value in two’s compliment. The value "
          },
          {
            "Text": "1010",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "1111111111010",
            "AttrFlags": 2
          },
          {
            "Text": " are both "
          },
          {
            "Text": "-6",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408119,
        "id": "41cae93b-11b2-48a0-bb21-c1676825e125",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408119,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise AND"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise AND"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408119,
        "id": "9c6d380a-877d-4676-b9d0-d109c2e43627",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408119,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise AND operation "
            ],
            [
              "a \u0026 b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the binary value with a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where both binary operands have "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s in a specific position, and "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in all other positions. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise AND operation "
          },
          {
            "Text": "a \u0026 b",
            "AttrFlags": 2
          },
          {
            "Text": " returns the binary value with a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " where both binary operands have "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s in a specific position, and "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " in all other positions. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408119,
        "id": "51c7fc08-89a6-4168-912d-375660a927aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408119,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "13 \u0026 7 =\u003e 5\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n//  5:     0..00101 (0 + 0 + 4 + 0 + 1)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "13 \u0026 7 =\u003e 5\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n//  5:     0..00101 (0 + 0 + 4 + 0 + 1)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "b11b6ac9-460e-4e21-ab93-1114016a9381",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Real world example: Number’s Parity Check",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Real world example: Number’s Parity Check",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "6e82eb39-d15b-4d30-a833-0e441e02575f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Instead of this “masterpiece” (unfortunately too often seen in many real code parts):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Instead of this “masterpiece” (unfortunately too often seen in many real code parts):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "19f5cf48-21cb-4736-8330-11a23e47378e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function isEven(n) {\n    return n % 2 == 0;\n}\n\nfunction isOdd(n) {\n    if (isEven(n)) {\n        return false;\n    } else {\n        return true;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function isEven(n) {\n    return n % 2 == 0;\n}\n\nfunction isOdd(n) {\n    if (isEven(n)) {\n        return false;\n    } else {\n        return true;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "12f5a882-d98e-4cc6-9c93-b415db7773d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can check the (integer) number’s parity in much more effective and simple manner:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can check the (integer) number’s parity in much more effective and simple manner:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "31ada97c-182e-48c8-a766-eaa0edc5c0ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if(n \u0026 1) {\n    console.log(\"ODD!\");\n} else {\n    console.log(\"EVEN!\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if(n \u0026 1) {\n    console.log(\"ODD!\");\n} else {\n    console.log(\"EVEN!\");\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "9a3f1b00-6ca5-4b6a-aa6a-c1320acc614e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise OR"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise OR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "615aeb7f-edc2-4041-93fd-d0c1da339036",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise OR operation "
            ],
            [
              "a | b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the binary value with a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where either operands or both operands have "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s in a specific position, and "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " when both values have "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in a position. For example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise OR operation "
          },
          {
            "Text": "a | b",
            "AttrFlags": 2
          },
          {
            "Text": " returns the binary value with a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " where either operands or both operands have "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s in a specific position, and "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " when both values have "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": " in a position. For example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408120,
        "id": "12dfa36d-cac9-407e-ad7b-14ec56dfab0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408120,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "13 | 7 =\u003e 15\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 15:     0..01111 (0 + 8 + 4 + 2 + 1)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "13 | 7 =\u003e 15\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 15:     0..01111 (0 + 8 + 4 + 2 + 1)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408121,
        "id": "d1093873-9501-43e2-8511-960b46a023ec",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408121,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise NOT"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise NOT"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408121,
        "id": "a7070e41-ddc0-4134-8e8b-ab86c44ffb9e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408121,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise NOT operation "
            ],
            [
              "~a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "flips",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " the bits of the given value "
            ],
            [
              "a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This means all the "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s will become "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s and all the "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s will become "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "’s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise NOT operation "
          },
          {
            "Text": "~a",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "flips",
            "AttrFlags": 4
          },
          {
            "Text": " the bits of the given value "
          },
          {
            "Text": "a",
            "AttrFlags": 2
          },
          {
            "Text": ". This means all the "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s will become "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s and all the "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": "’s will become "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": "’s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408121,
        "id": "64994050-5dc9-442a-a5d3-76ccef46fe7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408121,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "~13 =\u003e -14\n// 13:     0..01101\n//-----------------\n//-14:     1..10010 (-16 + 0 + 0 + 2 + 0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "~13 =\u003e -14\n// 13:     0..01101\n//-----------------\n//-14:     1..10010 (-16 + 0 + 0 + 2 + 0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408121,
        "id": "1048861c-6a67-48a7-bdbe-facd4d47914a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408121,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise XOR"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise XOR"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408121,
        "id": "03462ce6-8517-4443-95f9-6f335647e7d0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408121,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The bitwise XOR ("
            ],
            [
              "exclusive or",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              ") operation "
            ],
            [
              "a ^ b",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " places a "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " only if the two bits are different. Exclusive or means "
            ],
            [
              "either one or the other, but not both",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The bitwise XOR ("
          },
          {
            "Text": "exclusive or",
            "AttrFlags": 4
          },
          {
            "Text": ") operation "
          },
          {
            "Text": "a ^ b",
            "AttrFlags": 2
          },
          {
            "Text": " places a "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " only if the two bits are different. Exclusive or means "
          },
          {
            "Text": "either one or the other, but not both",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408122,
        "id": "0e5df7fb-8730-4eaa-ad13-b4360a450e25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408122,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "13 ^ 7 =\u003e 10\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 10:     0..01010  (0 + 8 + 0 + 2 + 0)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "13 ^ 7 =\u003e 10\n// 13:     0..01101\n//  7:     0..00111\n//-----------------\n// 10:     0..01010  (0 + 8 + 0 + 2 + 0)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408122,
        "id": "7159eb88-e98a-4f25-a43f-22f4d573fa08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408122,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Real world example: swapping two integer values without additional memory allocation",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Real world example: swapping two integer values without additional memory allocation",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716408122,
        "id": "65bb6611-41fe-4b52-9c21-637f0747fcdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716408122,
        "parent_id": "78cb046a-facd-4535-9a4b-6076e48089e5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var a = 11, b = 22;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(\"a = \" + a + \"; b = \" + b);// a is now 22 and b is now 11"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var a = 11, b = 22;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\nconsole.log(\"a = \" + a + \"; b = \" + b);// a is now 22 and b is now 11",
        "code_language": "Plain Text"
      }
    ],
    "title": "Bitwise operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}