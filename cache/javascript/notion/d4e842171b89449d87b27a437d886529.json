{
  "ID": "d4e84217-1b89-449d-87b2-7a437d886529",
  "Root": {
    "alive": true,
    "content": [
      "7f1bc870-e7a6-42cb-8585-c9147eea5f91",
      "ecd8b1d8-32eb-4d20-99b3-c0f0e21323c8",
      "51dfe05c-b58c-4001-80d5-fd602c104256",
      "b955fca3-cb1f-4d6b-b6be-cc4691645fca",
      "aefdd4fd-895e-42c6-ae93-8804077e236a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715201282,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d4e84217-1b89-449d-87b2-7a437d886529",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551340680000,
    "parent_id": "1a45a60e-581c-44a4-8504-9468f2150e17",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Async flow with generators"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715201281,
        "id": "7f1bc870-e7a6-42cb-8585-c9147eea5f91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715201281,
        "parent_id": "d4e84217-1b89-449d-87b2-7a437d886529",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generators are functions which are able to pause and then resume execution. This allows to emulate async functions using external libraries, mainly q or co. Basically it allows to write functions that wait for async results in order to go on:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generators are functions which are able to pause and then resume execution. This allows to emulate async functions using external libraries, mainly q or co. Basically it allows to write functions that wait for async results in order to go on:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715201282,
        "id": "ecd8b1d8-32eb-4d20-99b3-c0f0e21323c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551340680000,
        "parent_id": "d4e84217-1b89-449d-87b2-7a437d886529",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function someAsyncResult() {\n    return Promise.resolve('newValue')\n}\n\nq.spawn(function * () {\n    var result = yield someAsyncResult()\n    console.log(result) // 'newValue'\n})"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function someAsyncResult() {\n    return Promise.resolve('newValue')\n}\n\nq.spawn(function * () {\n    var result = yield someAsyncResult()\n    console.log(result) // 'newValue'\n})",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715201282,
        "id": "51dfe05c-b58c-4001-80d5-fd602c104256",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715201282,
        "parent_id": "d4e84217-1b89-449d-87b2-7a437d886529",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows to write async code as if it were synchronous. Moreover, try and catch work over several async blocks. If the promise is rejected, the error is caught by the next catch:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows to write async code as if it were synchronous. Moreover, try and catch work over several async blocks. If the promise is rejected, the error is caught by the next catch:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715201282,
        "id": "b955fca3-cb1f-4d6b-b6be-cc4691645fca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551340680000,
        "parent_id": "d4e84217-1b89-449d-87b2-7a437d886529",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function asyncError() {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            reject(new Error('Something went wrong'))\n        }, 100)\n    })\n}\n\nq.spawn(function * () {\n    try {\n        var result = yield asyncError()\n    } catch (e) {\n        console.error(e) // Something went wrong\n    }\n})"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function asyncError() {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            reject(new Error('Something went wrong'))\n        }, 100)\n    })\n}\n\nq.spawn(function * () {\n    try {\n        var result = yield asyncError()\n    } catch (e) {\n        console.error(e) // Something went wrong\n    }\n})",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715201282,
        "id": "aefdd4fd-895e-42c6-ae93-8804077e236a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715201282,
        "parent_id": "d4e84217-1b89-449d-87b2-7a437d886529",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using co would work exactly the same but with "
            ],
            [
              "co(function * (){...})",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " instead of "
            ],
            [
              "q.spawn",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using co would work exactly the same but with "
          },
          {
            "Text": "co(function * (){...})",
            "AttrFlags": 2
          },
          {
            "Text": " instead of "
          },
          {
            "Text": "q.spawn",
            "AttrFlags": 2
          }
        ]
      }
    ],
    "title": "Async flow with generators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}