{
  "ID": "ac13f622-9fb8-483d-8d0d-a1ed84bf7f16",
  "Root": {
    "alive": true,
    "content": [
      "de9697e8-82a0-44eb-9862-7be4f32cba5d",
      "736735d1-1a1f-4807-89bd-121d78388b69"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715923370,
    "id": "ac13f622-9fb8-483d-8d0d-a1ed84bf7f16",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550715923370,
    "parent_id": "2023fa0a-be42-4a7c-84ca-22f2a013d046",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "080 Abstract Factory Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715923367,
        "id": "de9697e8-82a0-44eb-9862-7be4f32cba5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715923367,
        "parent_id": "ac13f622-9fb8-483d-8d0d-a1ed84bf7f16",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Abstract Factory Pattern is a creational design pattern that can be used to define specific instances or classes without having to specify the exact object that is being created."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Abstract Factory Pattern is a creational design pattern that can be used to define specific instances or classes without having to specify the exact object that is being created."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715923370,
        "id": "736735d1-1a1f-4807-89bd-121d78388b69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715923370,
        "parent_id": "ac13f622-9fb8-483d-8d0d-a1ed84bf7f16",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function Car() { this.name = \"Car\"; this.wheels = 4; }\nfunction Truck() { this.name = \"Truck\"; this.wheels = 6; }\nfunction Bike() { this.name = \"Bike\"; this.wheels = 2; }\n\nconst vehicleFactory = {\n    createVehicle: function (type) {\n        switch (type.toLowerCase()) {\n            case \"car\":\n                return new Car();\n            case \"truck\":\n                return new Truck();\n            case \"bike\":\n                return new Bike();\n            default:\n                return null;\n        }\n    }\n};\n\nconst car = vehicleFactory.createVehicle(\"Car\"); // Car { name: \"Car\", wheels: 4 }  \nconst truck = vehicleFactory.createVehicle(\"Truck\"); // Truck { name: \"Truck\", wheels: 6 }  \nconst bike = vehicleFactory.createVehicle(\"Bike\"); // Bike { name: \"Bike\", wheels: 2 }  \nconst unknown = vehicleFactory.createVehicle(\"Boat\"); // null ( Vehicle not known )"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function Car() { this.name = \"Car\"; this.wheels = 4; }\nfunction Truck() { this.name = \"Truck\"; this.wheels = 6; }\nfunction Bike() { this.name = \"Bike\"; this.wheels = 2; }\n\nconst vehicleFactory = {\n    createVehicle: function (type) {\n        switch (type.toLowerCase()) {\n            case \"car\":\n                return new Car();\n            case \"truck\":\n                return new Truck();\n            case \"bike\":\n                return new Bike();\n            default:\n                return null;\n        }\n    }\n};\n\nconst car = vehicleFactory.createVehicle(\"Car\"); // Car { name: \"Car\", wheels: 4 }  \nconst truck = vehicleFactory.createVehicle(\"Truck\"); // Truck { name: \"Truck\", wheels: 6 }  \nconst bike = vehicleFactory.createVehicle(\"Bike\"); // Bike { name: \"Bike\", wheels: 2 }  \nconst unknown = vehicleFactory.createVehicle(\"Boat\"); // null ( Vehicle not known )",
        "code_language": "Plain Text"
      }
    ],
    "title": "080 Abstract Factory Pattern"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}