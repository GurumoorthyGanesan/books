{
  "ID": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
  "Root": {
    "alive": true,
    "content": [
      "8e187c25-1906-4f6c-824f-62f435806d12",
      "8e7410e1-0406-485c-9ddf-8e2f3ac04040",
      "4e713ac9-8614-4e87-9130-055f14bb608f",
      "5459d72b-465b-47f7-9117-40b8574374d7",
      "f4fb2c24-e8ba-4afa-b3a4-8718874c597b",
      "0185c888-cedd-4740-9e6f-4996ceb2f302",
      "83b9a4d4-e638-49c8-8393-2d171fce68cd",
      "7cdfd527-cc42-40ef-a9d6-75cdd16405da",
      "aa1e1e58-cc15-4b29-a409-48c7fd1511eb",
      "8596fb07-92d9-458d-aa7f-3a759d8a3229",
      "09ab021c-6a64-43db-a07f-8d4a94374345",
      "fdc108fe-ec70-485c-ba1a-ea89701d45ea",
      "6179e0c1-e03e-4cec-9775-149db3c0e9aa",
      "e2defb07-3917-4264-a8ff-f2a16858ad62",
      "73c7da22-4686-4037-9ab1-76a8757bf733",
      "14cbefeb-faf3-4fe4-b48b-4dcdea270d44",
      "849e4473-c720-404b-b7b0-0cb6f4251805",
      "d42ed4bc-5e67-489c-affe-cd4248cc6875",
      "bf32341b-2e04-473b-9ddd-642e9b4885a7",
      "97da10c6-b8a5-492e-b9ae-5e8aa5c74a91",
      "0e7d0a9f-b84b-4e6c-89b8-89891830b882",
      "a4bb86c7-0b53-4d61-a07c-32f424bad8da"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715922096,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552213560000,
    "parent_id": "2023fa0a-be42-4a7c-84ca-22f2a013d046",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Chainable object design and chaining"
        ]
      ]
    },
    "type": "page",
    "version": 16,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922089,
        "id": "8e187c25-1906-4f6c-824f-62f435806d12",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922089,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Chaining and Chainable is a design methodology used to design object behaviors so that calls to object functions return references to self, or another object, providing access to additional function calls allowing the calling statement to chain together many calls without the need to reference the variable holding the object/s."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Chaining and Chainable is a design methodology used to design object behaviors so that calls to object functions return references to self, or another object, providing access to additional function calls allowing the calling statement to chain together many calls without the need to reference the variable holding the object/s."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922094,
        "id": "8e7410e1-0406-485c-9ddf-8e2f3ac04040",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922094,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Objects that can be chained are said to be chainable. If you call an object chainable, you should ensure that all returned objects / primitives are of the correct type. It only takes one time for your chainable object to not return the correct reference (easy to forget to add "
            ],
            [
              "return this",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") and the person using your API will lose trust and avoid chaining. Chainable objects should be all or nothing (not a chainable object even if parts are). An object should not be called chainable if only some of its functions are."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Objects that can be chained are said to be chainable. If you call an object chainable, you should ensure that all returned objects / primitives are of the correct type. It only takes one time for your chainable object to not return the correct reference (easy to forget to add "
          },
          {
            "Text": "return this",
            "AttrFlags": 2
          },
          {
            "Text": ") and the person using your API will lose trust and avoid chaining. Chainable objects should be all or nothing (not a chainable object even if parts are). An object should not be called chainable if only some of its functions are."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922094,
        "id": "4e713ac9-8614-4e87-9130-055f14bb608f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922094,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Object designed to be chainable"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Object designed to be chainable"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922094,
        "id": "5459d72b-465b-47f7-9117-40b8574374d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595560000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function Vec(x = 0, y = 0){\n    this.x = x;\n    this.y = y;\n    // the new keyword implicitly implies the return type \n    // as this and thus is chainable by default.\n}\nVec.prototype = {\n    add : function(vec){\n        this.x += vec.x;\n        this.y += vec.y;\n        return this; // return reference to self to allow chaining of function calls\n    },\n    scale : function(val){\n        this.x *= val;\n        this.y *= val;\n        return this; //  return reference to self to allow chaining of function calls\n    },\n    log :function(val){\n        console.log(this.x + ' : ' + this.y);\n        return this;\n    },\n    clone : function(){\n        return new Vec(this.x,this.y);\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function Vec(x = 0, y = 0){\n    this.x = x;\n    this.y = y;\n    // the new keyword implicitly implies the return type \n    // as this and thus is chainable by default.\n}\nVec.prototype = {\n    add : function(vec){\n        this.x += vec.x;\n        this.y += vec.y;\n        return this; // return reference to self to allow chaining of function calls\n    },\n    scale : function(val){\n        this.x *= val;\n        this.y *= val;\n        return this; //  return reference to self to allow chaining of function calls\n    },\n    log :function(val){\n        console.log(this.x + ' : ' + this.y);\n        return this;\n    },\n    clone : function(){\n        return new Vec(this.x,this.y);\n    }\n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922094,
        "id": "f4fb2c24-e8ba-4afa-b3a4-8718874c597b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922094,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Chaining example"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Chaining example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "0185c888-cedd-4740-9e6f-4996ceb2f302",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595560000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var vec = new Vec();\nvec.add({x:10,y:10})\n    .add({x:10,y:10})\n    .log()             // console output \"20 : 20\"\n    .add({x:10,y:10})\n    .scale(1/30)\n    .log()             // console output \"1 : 1\"\n    .clone()           // returns a new instance of the object\n    .scale(2)          // from which you can continue chaining\n    .log()"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var vec = new Vec();\nvec.add({x:10,y:10})\n    .add({x:10,y:10})\n    .log()             // console output \"20 : 20\"\n    .add({x:10,y:10})\n    .scale(1/30)\n    .log()             // console output \"1 : 1\"\n    .clone()           // returns a new instance of the object\n    .scale(2)          // from which you can continue chaining\n    .log()",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "83b9a4d4-e638-49c8-8393-2d171fce68cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922095,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Don’t create ambiguity in the return type"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Don’t create ambiguity in the return type"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "7cdfd527-cc42-40ef-a9d6-75cdd16405da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922095,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Not all function calls return a useful chainable type, nor do they always return a reference to self. This is where common sense use of naming is important. In the above example the function call "
            ],
            [
              ".clone()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is unambiguous. Other examples are "
            ],
            [
              ".toString()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implies a string is returned."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Not all function calls return a useful chainable type, nor do they always return a reference to self. This is where common sense use of naming is important. In the above example the function call "
          },
          {
            "Text": ".clone()",
            "AttrFlags": 2
          },
          {
            "Text": " is unambiguous. Other examples are "
          },
          {
            "Text": ".toString()",
            "AttrFlags": 2
          },
          {
            "Text": " implies a string is returned."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "aa1e1e58-cc15-4b29-a409-48c7fd1511eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922095,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An example of an ambiguous function name in a chainable object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An example of an ambiguous function name in a chainable object."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "8596fb07-92d9-458d-aa7f-3a759d8a3229",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552213500000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// object represents a line\nline.rotate(1)\n   .vec();  // ambiguous you don't need to be looking up docs while writing.\n\nline.rotate(1)\n   .asVec()    // unambiguous implies the return type is the line as a vec (vector)\n   .add({x:10,y:10)\n// toVec is just as good as long as the programmer can use the naming \n// to infer the return type"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// object represents a line\nline.rotate(1)\n   .vec();  // ambiguous you don't need to be looking up docs while writing.\n\nline.rotate(1)\n   .asVec()    // unambiguous implies the return type is the line as a vec (vector)\n   .add({x:10,y:10)\n// toVec is just as good as long as the programmer can use the naming \n// to infer the return type",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "09ab021c-6a64-43db-a07f-8d4a94374345",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922095,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Syntax convention"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Syntax convention"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "fdc108fe-ec70-485c-ba1a-ea89701d45ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922095,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is no formal usage syntax when chaining. The convention is to either chain the calls on a single line if short or to chain on the new line indented one tab from the referenced object with the dot on the new line. Use of the semicolon is optional but does help by clearly denoting the end of the chain."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is no formal usage syntax when chaining. The convention is to either chain the calls on a single line if short or to chain on the new line indented one tab from the referenced object with the dot on the new line. Use of the semicolon is optional but does help by clearly denoting the end of the chain."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922095,
        "id": "6179e0c1-e03e-4cec-9775-149db3c0e9aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595560000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "vec.scale(2).add({x:2,y:2}).log();  // for short chains\n\n vec.scale(2)     // or alternate syntax\n     .add({x:2,y:2})\n     .log();  // semicolon makes it clear the chain ends here\n\n// and sometimes though not necessary\nvec.scale(2)     \n    .add({x:2,y:2})\n    .clone()    // clone adds a new reference to the chain\n         .log(); // indenting to signify the new reference\n\n// for chains in chains\nvec.scale(2)     \n    .add({x:2,y:2})\n    .add(vec1.add({x:2,y:2})  // a chain as an argument \n         .add({x:2,y:2})      // is indented\n         .scale(2))\n    .log();\n\n// or sometimes \nvec.scale(2)     \n    .add({x:2,y:2})\n    .add(vec1.add({x:2,y:2})  // a chain as an argument \n         .add({x:2,y:2})      // is indented\n         .scale(2)\n    ).log();   // the argument list is closed on the new line"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "vec.scale(2).add({x:2,y:2}).log();  // for short chains\n\n vec.scale(2)     // or alternate syntax\n     .add({x:2,y:2})\n     .log();  // semicolon makes it clear the chain ends here\n\n// and sometimes though not necessary\nvec.scale(2)     \n    .add({x:2,y:2})\n    .clone()    // clone adds a new reference to the chain\n         .log(); // indenting to signify the new reference\n\n// for chains in chains\nvec.scale(2)     \n    .add({x:2,y:2})\n    .add(vec1.add({x:2,y:2})  // a chain as an argument \n         .add({x:2,y:2})      // is indented\n         .scale(2))\n    .log();\n\n// or sometimes \nvec.scale(2)     \n    .add({x:2,y:2})\n    .add(vec1.add({x:2,y:2})  // a chain as an argument \n         .add({x:2,y:2})      // is indented\n         .scale(2)\n    ).log();   // the argument list is closed on the new line",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1552213564716,
        "id": "e2defb07-3917-4264-a8ff-f2a16858ad62",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1552213560000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "73c7da22-4686-4037-9ab1-76a8757bf733",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922096,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A bad syntax"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "A bad syntax"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "14cbefeb-faf3-4fe4-b48b-4dcdea270d44",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595560000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "vec          // new line before the first function call\n   .scale()  // can make it unclear what the intention is\n   .log();\n\nvec.          // the dot on the end of the line\n   scale(2).  // is very difficult to see in a mass of code\n   scale(1/2); // and will likely frustrate as can easily be missed\n               // when trying to locate bugs"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "vec          // new line before the first function call\n   .scale()  // can make it unclear what the intention is\n   .log();\n\nvec.          // the dot on the end of the line\n   scale(2).  // is very difficult to see in a mass of code\n   scale(1/2); // and will likely frustrate as can easily be missed\n               // when trying to locate bugs",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "849e4473-c720-404b-b7b0-0cb6f4251805",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922096,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Left hand side of assignment"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Left hand side of assignment"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "d42ed4bc-5e67-489c-affe-cd4248cc6875",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922096,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When you assign the results of a chain the last returning call or object reference is assigned."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When you assign the results of a chain the last returning call or object reference is assigned."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "bf32341b-2e04-473b-9ddd-642e9b4885a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551595560000,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var vec2 = vec.scale(2)\n               .add(x:1,y:10)\n               .clone();   // the last returned result is assigned\n                               // vec2 is a clone of vec after the scale and add"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var vec2 = vec.scale(2)\n               .add(x:1,y:10)\n               .clone();   // the last returned result is assigned\n                               // vec2 is a clone of vec after the scale and add",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "97da10c6-b8a5-492e-b9ae-5e8aa5c74a91",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922096,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example "
            ],
            [
              "vec2",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is assigned the value returned from the last call in the chain. In this case, that would be a copy of "
            ],
            [
              "vec",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " after the scale and add."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example "
          },
          {
            "Text": "vec2",
            "AttrFlags": 2
          },
          {
            "Text": " is assigned the value returned from the last call in the chain. In this case, that would be a copy of "
          },
          {
            "Text": "vec",
            "AttrFlags": 2
          },
          {
            "Text": " after the scale and add."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "0e7d0a9f-b84b-4e6c-89b8-89891830b882",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922096,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Summary"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Summary"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715922096,
        "id": "a4bb86c7-0b53-4d61-a07c-32f424bad8da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715922096,
        "parent_id": "5d4ed337-5cb1-4eda-b7f3-427a1f4383ee",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The advantage of changing is clearer more maintainable code. Some people prefer it and will make chainable a requirement when selecting an API. There is also a performance benefit as it allows you to avoid having to create variables to hold interim results. With the last word being that chainable objects can be used in a conventional way as well so you don’t enforce chaining by making an object chainable."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The advantage of changing is clearer more maintainable code. Some people prefer it and will make chainable a requirement when selecting an API. There is also a performance benefit as it allows you to avoid having to create variables to hold interim results. With the last word being that chainable objects can be used in a conventional way as well so you don’t enforce chaining by making an object chainable."
          }
        ]
      }
    ],
    "title": "Chainable object design and chaining",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}