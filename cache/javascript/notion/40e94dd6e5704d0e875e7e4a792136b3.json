{
  "ID": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
  "Root": {
    "alive": true,
    "content": [
      "dff94cc0-eeea-4aac-af94-80e9e8180eb4",
      "ef80ddb4-3957-4bcf-87b6-fd937502174a",
      "d2fc8c0a-bbb0-4228-9d07-6baa1969280e",
      "73c7dc53-e79c-45dc-910b-221bbba1e668",
      "7cdd019c-b834-4128-a50f-8867e2d3ff81",
      "907cf129-b6c2-4dc9-8896-a9cf82ff70a7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550717176121,
    "id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550717176121,
    "parent_id": "2112464b-fe1c-4148-af0b-897c9ea1eece",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Creation and initialising Prototype"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550717176117,
        "id": "dff94cc0-eeea-4aac-af94-80e9e8180eb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550717176117,
        "parent_id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var Human = function() {\n  this.canWalk = true;\n  this.canSpeak = true; // \n\n};\n\nPerson.prototype.greet = function() {\n  if (this.canSpeak) { // checks whether this prototype has instance of speak\n    this.name = \"Steve\"\n    console.log('Hi, I am ' + this.name);\n  } else{\n     console.log('Sorry i can not speak');\n  }\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var Human = function() {\n  this.canWalk = true;\n  this.canSpeak = true; // \n\n};\n\nPerson.prototype.greet = function() {\n  if (this.canSpeak) { // checks whether this prototype has instance of speak\n    this.name = \"Steve\"\n    console.log('Hi, I am ' + this.name);\n  } else{\n     console.log('Sorry i can not speak');\n  }\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550717176120,
        "id": "ef80ddb4-3957-4bcf-87b6-fd937502174a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550717176120,
        "parent_id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The prototype can be instantiated like this"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The prototype can be instantiated like this"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550717176120,
        "id": "d2fc8c0a-bbb0-4228-9d07-6baa1969280e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550717176120,
        "parent_id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "obj = Object.create(Person.prototype);\nob.greet();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "obj = Object.create(Person.prototype);\nob.greet();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550717176120,
        "id": "73c7dc53-e79c-45dc-910b-221bbba1e668",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550717176120,
        "parent_id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can pass value for the constructor and make the boolean true and false based on the requirement."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can pass value for the constructor and make the boolean true and false based on the requirement."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550717176120,
        "id": "7cdd019c-b834-4128-a50f-8867e2d3ff81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550717176120,
        "parent_id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Detailed Explanation"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Detailed Explanation"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550717176120,
        "id": "907cf129-b6c2-4dc9-8896-a9cf82ff70a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550717176120,
        "parent_id": "40e94dd6-e570-4d0e-875e-7e4a792136b3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var Human = function() {\n    this.canSpeak = true;\n};\n// Basic greet function which will greet based on the canSpeak flag\nHuman.prototype.greet = function() {\n    if (this.canSpeak) {\n        console.log('Hi, I am ' + this.name);\n    }\n};\n\nvar Student = function(name, title) {\n    Human.call(this); // Instantiating the Human object and getting the memebers of the class\n    this.name = name; // inherting the name from the human class\n    this.title = title; // getting the title from the called function\n};\n\nStudent.prototype = Object.create(Human.prototype);\nStudent.prototype.constructor = Student;\n\nStudent.prototype.greet = function() {\n    if (this.canSpeak) {\n        console.log('Hi, I am ' + this.name + ', the ' + this.title);\n    }\n};\n\nvar Customer = function(name) {\n    Human.call(this); // inherting from the base class\n    this.name = name;\n};\n\nCustomer.prototype = Object.create(Human.prototype); // creating the object\nCustomer.prototype.constructor = Customer;\n\n\nvar bill = new Student('Billy', 'Teacher');\nvar carter = new Customer('Carter');\nvar andy = new Student('Andy', 'Bill');\nvar virat = new Customer('Virat');\n\nbill.greet();\n// Hi, I am Bob, the Teacher\n\ncarter.greet();\n// Hi, I am Carter\n\nandy.greet();\n// Hi, I am Andy, the Bill\n\nvirat.greet();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var Human = function() {\n    this.canSpeak = true;\n};\n// Basic greet function which will greet based on the canSpeak flag\nHuman.prototype.greet = function() {\n    if (this.canSpeak) {\n        console.log('Hi, I am ' + this.name);\n    }\n};\n\nvar Student = function(name, title) {\n    Human.call(this); // Instantiating the Human object and getting the memebers of the class\n    this.name = name; // inherting the name from the human class\n    this.title = title; // getting the title from the called function\n};\n\nStudent.prototype = Object.create(Human.prototype);\nStudent.prototype.constructor = Student;\n\nStudent.prototype.greet = function() {\n    if (this.canSpeak) {\n        console.log('Hi, I am ' + this.name + ', the ' + this.title);\n    }\n};\n\nvar Customer = function(name) {\n    Human.call(this); // inherting from the base class\n    this.name = name;\n};\n\nCustomer.prototype = Object.create(Human.prototype); // creating the object\nCustomer.prototype.constructor = Customer;\n\n\nvar bill = new Student('Billy', 'Teacher');\nvar carter = new Customer('Carter');\nvar andy = new Student('Andy', 'Bill');\nvar virat = new Customer('Virat');\n\nbill.greet();\n// Hi, I am Bob, the Teacher\n\ncarter.greet();\n// Hi, I am Carter\n\nandy.greet();\n// Hi, I am Andy, the Bill\n\nvirat.greet();",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Creation and initialising Prototype"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}