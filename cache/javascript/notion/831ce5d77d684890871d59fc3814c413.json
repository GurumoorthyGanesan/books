{
  "ID": "831ce5d7-7d68-4890-871d-59fc3814c413",
  "Root": {
    "alive": true,
    "content": [
      "8ab1003f-bf47-4cb7-8c71-7942af94f709",
      "e8f5d11e-02ce-41f5-bd1f-946545028f65",
      "2790a4a4-b0cb-4a3e-b41a-447f3ae415f7",
      "e1353de6-626f-41e8-97d2-4bbeb00d3017",
      "0f06c19e-9431-4cbc-9453-79d77587b420",
      "0b2ca44d-63e5-44ef-95a1-55597c30c3b8",
      "e7ce4c4a-ac52-400f-9804-b7b4126bc6a8",
      "dd667f0a-1be0-484f-be1d-210d5bea5064",
      "11088e66-1da0-4e43-aa3f-0b3779d7f809",
      "0f676aa2-e7ce-42de-acd0-a56b148d2b01",
      "af00429c-f975-45fb-be0e-026147177f19",
      "ce7244ec-f191-4ca4-abbe-5193639edee7",
      "1e1b52ea-2e6b-461e-8cab-b30c76f79594",
      "41b99746-2917-4987-8a02-e674d807d9ef",
      "0fabed09-bfd5-4de5-a580-14b118e3c8bd",
      "47fc1e42-0ea4-40c4-b2b1-a02af1fcccfd",
      "717e9792-5b1c-4a8e-81c0-b5001946cba6",
      "3d4e76c8-4406-4848-9d0e-dcfb79d094f8",
      "5083cb37-d1ed-481b-b4b3-1b544ea810fe",
      "53c4e998-ff06-4da9-aab8-72f96f8b0b8f",
      "60b9c3fc-c60e-4dd6-bc4b-79df43402eb4",
      "cba166bb-7d73-4bdd-99dc-ffe5021ae5f8",
      "3fcfa653-5590-4852-a7ef-d033e79092a7",
      "5650377b-7f1d-4d1f-b8b8-585927c7044f",
      "963e9ae4-6d93-4340-88ed-533448ef2177",
      "dcd74709-047a-4a10-b082-b56f0eec4d7e",
      "e410730d-d093-446c-bec9-b8efa612a0af",
      "ebe8fc32-2939-41bf-92f7-85e7172404dc",
      "80bce0a2-be9e-48b0-b082-1607f8dab746",
      "431bbd5a-6bbe-44aa-ba71-11872540cb62",
      "e953c686-4cb2-4870-9300-ab8418559926",
      "28c00292-a173-43b2-bba8-892efd30e8b6",
      "eadcd624-1c86-481c-b842-98dbcfa46113",
      "28bcf948-dbbd-4369-b774-46d664a72aa1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715141605,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "831ce5d7-7d68-4890-871d-59fc3814c413",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551339480000,
    "parent_id": "f196cebe-aa59-4659-9d28-ef72c6b81093",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Creating a Date from UTC"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141590,
        "id": "8ab1003f-bf47-4cb7-8c71-7942af94f709",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141590,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By default, a "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object is created as local time. This is not always desirable, for example when communicating a date between a server and a client that do not reside in the same timezone. In this scenario, one doesn’t want to worry about timezones at all until the date needs to be displayed in local time, if that is even required at all."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By default, a "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": " object is created as local time. This is not always desirable, for example when communicating a date between a server and a client that do not reside in the same timezone. In this scenario, one doesn’t want to worry about timezones at all until the date needs to be displayed in local time, if that is even required at all."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141591,
        "id": "e8f5d11e-02ce-41f5-bd1f-946545028f65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141591,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141591,
        "id": "2790a4a4-b0cb-4a3e-b41a-447f3ae415f7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141591,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this problem we want to communicate a specific date (day, month, year) with someone in a different timezone. The first implementation naively uses local times, which results in wrong results. The second implementation uses UTC dates to avoid timezones where they are not needed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this problem we want to communicate a specific date (day, month, year) with someone in a different timezone. The first implementation naively uses local times, which results in wrong results. The second implementation uses UTC dates to avoid timezones where they are not needed."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141591,
        "id": "e1353de6-626f-41e8-97d2-4bbeb00d3017",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141591,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Naive approach with WRONG results"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Naive approach with WRONG results"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141591,
        "id": "0f06c19e-9431-4cbc-9453-79d77587b420",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339420000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function formatDate(dayOfWeek, day, month, year) {\n  var daysOfWeek = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n  var months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  return daysOfWeek[dayOfWeek] + \" \" + months[month] + \" \" + day + \" \" + year;\n}\n\n// Foo lives in a country with timezone GMT + 1\nvar birthday = new Date(2000,0,1);\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getDay(), birthday.getDate(),\n      birthday.getMonth(), birthday.getFullYear()));\n\nsendToBar(birthday.getTime());"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "function formatDate(dayOfWeek, day, month, year) {\n  var daysOfWeek = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n  var months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  return daysOfWeek[dayOfWeek] + \" \" + months[month] + \" \" + day + \" \" + year;\n}\n\n// Foo lives in a country with timezone GMT + 1\nvar birthday = new Date(2000,0,1);\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getDay(), birthday.getDate(),\n      birthday.getMonth(), birthday.getFullYear()));\n\nsendToBar(birthday.getTime());",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141591,
        "id": "0b2ca44d-63e5-44ef-95a1-55597c30c3b8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141591,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Foo was born on: Sat Jan 1 2000"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Foo was born on: Sat Jan 1 2000"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "e7ce4c4a-ac52-400f-9804-b7b4126bc6a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339420000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// Meanwhile somewhere else...\n\n// Bar lives in a country with timezone GMT - 1\nvar birthday = new Date(receiveFromFoo());\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getDay(), birthday.getDate(),\n      birthday.getMonth(), birthday.getFullYear()));"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "// Meanwhile somewhere else...\n\n// Bar lives in a country with timezone GMT - 1\nvar birthday = new Date(receiveFromFoo());\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getDay(), birthday.getDate(),\n      birthday.getMonth(), birthday.getFullYear()));",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "dd667f0a-1be0-484f-be1d-210d5bea5064",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141592,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Foo was born on: Fri Dec 31 1999"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Foo was born on: Fri Dec 31 1999"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "11088e66-1da0-4e43-aa3f-0b3779d7f809",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141592,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And thus, Bar would always believe Foo was born on the last day of 1999."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And thus, Bar would always believe Foo was born on the last day of 1999."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "0f676aa2-e7ce-42de-acd0-a56b148d2b01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141592,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Correct approach"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Correct approach"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "af00429c-f975-45fb-be0e-026147177f19",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339480000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function formatDate(dayOfWeek, day, month, year) {\n  var daysOfWeek = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n  var months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  return daysOfWeek[dayOfWeek] + \" \" + months[month] + \" \" + day + \" \" + year;\n}\n\n// Foo lives in a country with timezone GMT + 1\nvar birthday = new Date(Date.UTC(2000,0,1));\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getUTCDay(), birthday.getUTCDate(),\n      birthday.getUTCMonth(), birthday.getUTCFullYear()));\n\nsendToBar(birthday.getTime());"
            ]
          ]
        },
        "type": "code",
        "version": 5,
        "code": "function formatDate(dayOfWeek, day, month, year) {\n  var daysOfWeek = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n  var months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  return daysOfWeek[dayOfWeek] + \" \" + months[month] + \" \" + day + \" \" + year;\n}\n\n// Foo lives in a country with timezone GMT + 1\nvar birthday = new Date(Date.UTC(2000,0,1));\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getUTCDay(), birthday.getUTCDate(),\n      birthday.getUTCMonth(), birthday.getUTCFullYear()));\n\nsendToBar(birthday.getTime());",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "ce7244ec-f191-4ca4-abbe-5193639edee7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141592,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Foo was born on: Sat Jan 1 2000"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Foo was born on: Sat Jan 1 2000"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "1e1b52ea-2e6b-461e-8cab-b30c76f79594",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339480000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// Meanwhile somewhere else...\n\n// Bar lives in a country with timezone GMT - 1\nvar birthday = new Date(receiveFromFoo());\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getUTCDay(), birthday.getUTCDate(), \n      birthday.getUTCMonth(), birthday.getUTCFullYear()));"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// Meanwhile somewhere else...\n\n// Bar lives in a country with timezone GMT - 1\nvar birthday = new Date(receiveFromFoo());\nconsole.log(\"Foo was born on: \" + formatDate(birthday.getUTCDay(), birthday.getUTCDate(), \n      birthday.getUTCMonth(), birthday.getUTCFullYear()));",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "41b99746-2917-4987-8a02-e674d807d9ef",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141592,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Foo was born on: Sat Jan 1 2000"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Foo was born on: Sat Jan 1 2000"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141592,
        "id": "0fabed09-bfd5-4de5-a580-14b118e3c8bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141592,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creating a Date from UTC"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creating a Date from UTC"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "47fc1e42-0ea4-40c4-b2b1-a02af1fcccfd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141593,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If one wants to create a "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object based on UTC or GMT, the "
            ],
            [
              "Date.UTC(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method can be used. It uses the same arguments as the longest "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructor. This method will return a number representing the time that has passed since January 1, 1970, 00:00:00 UTC."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If one wants to create a "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": " object based on UTC or GMT, the "
          },
          {
            "Text": "Date.UTC(...)",
            "AttrFlags": 2
          },
          {
            "Text": " method can be used. It uses the same arguments as the longest "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": " constructor. This method will return a number representing the time that has passed since January 1, 1970, 00:00:00 UTC."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "717e9792-5b1c-4a8e-81c0-b5001946cba6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339420000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "console.log(Date.UTC(2000,0,31,12));"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "console.log(Date.UTC(2000,0,31,12));",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "3d4e76c8-4406-4848-9d0e-dcfb79d094f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141593,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: 949320000000"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: 949320000000"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "5083cb37-d1ed-481b-b4b3-1b544ea810fe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339420000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var utcDate = new Date(Date.UTC(2000,0,31,12));\nconsole.log(utcDate);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var utcDate = new Date(Date.UTC(2000,0,31,12));\nconsole.log(utcDate);",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "53c4e998-ff06-4da9-aab8-72f96f8b0b8f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141593,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "60b9c3fc-c60e-4dd6-bc4b-79df43402eb4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141593,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unsurprisingly, the difference between UTC time and local time is, in fact, the timezone offset converted to milliseconds."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unsurprisingly, the difference between UTC time and local time is, in fact, the timezone offset converted to milliseconds."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141593,
        "id": "cba166bb-7d73-4bdd-99dc-ffe5021ae5f8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339420000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var utcDate = new Date(Date.UTC(2000,0,31,12));\nvar localDate = new Date(2000,0,31,12);\n\nconsole.log(localDate - utcDate === utcDate.getTimezoneOffset() * 60 * 1000);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var utcDate = new Date(Date.UTC(2000,0,31,12));\nvar localDate = new Date(2000,0,31,12);\n\nconsole.log(localDate - utcDate === utcDate.getTimezoneOffset() * 60 * 1000);",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141594,
        "id": "3fcfa653-5590-4852-a7ef-d033e79092a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141594,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: true"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: true"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141594,
        "id": "5650377b-7f1d-4d1f-b8b8-585927c7044f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141594,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Changing a Date object"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Changing a Date object"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141594,
        "id": "963e9ae4-6d93-4340-88ed-533448ef2177",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141594,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "All "
            ],
            [
              "Date",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " object modifiers, such as "
            ],
            [
              "setDate(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "setFullYear(...)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " have an equivalent takes an argument in UTC time rather than in local time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "All "
          },
          {
            "Text": "Date",
            "AttrFlags": 2
          },
          {
            "Text": " object modifiers, such as "
          },
          {
            "Text": "setDate(...)",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "setFullYear(...)",
            "AttrFlags": 2
          },
          {
            "Text": " have an equivalent takes an argument in UTC time rather than in local time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141594,
        "id": "dcd74709-047a-4a10-b082-b56f0eec4d7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339420000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var date = new Date();\ndate.setUTCFullYear(2000,0,31);\ndate.setUTCHours(12,0,0,0);\nconsole.log(date);"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var date = new Date();\ndate.setUTCFullYear(2000,0,31);\ndate.setUTCHours(12,0,0,0);\nconsole.log(date);",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141594,
        "id": "e410730d-d093-446c-bec9-b8efa612a0af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141594,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141595,
        "id": "ebe8fc32-2939-41bf-92f7-85e7172404dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141595,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The other UTC-specific modifiers are "
            ],
            [
              ".setUTCMonth()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              ".setUTCDate()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (for the day of the month), "
            ],
            [
              ".setUTCMinutes()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              ".setUTCSeconds()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              ".setUTCMilliseconds()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The other UTC-specific modifiers are "
          },
          {
            "Text": ".setUTCMonth()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": ".setUTCDate()",
            "AttrFlags": 2
          },
          {
            "Text": " (for the day of the month), "
          },
          {
            "Text": ".setUTCMinutes()",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": ".setUTCSeconds()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": ".setUTCMilliseconds()",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141595,
        "id": "80bce0a2-be9e-48b0-b082-1607f8dab746",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141595,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Avoiding ambiguity with getTime() and setTime()"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Avoiding ambiguity with getTime() and setTime()"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141595,
        "id": "431bbd5a-6bbe-44aa-ba71-11872540cb62",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141595,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Where the methods above are required to differentiate between ambiguity in dates, it is usually easier to communicate a date as the amount of time that has passed since January 1, 1970, 00:00:00 UTC. This single number represents a single point in time, and can be converted to local time whenever necessary."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Where the methods above are required to differentiate between ambiguity in dates, it is usually easier to communicate a date as the amount of time that has passed since January 1, 1970, 00:00:00 UTC. This single number represents a single point in time, and can be converted to local time whenever necessary."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141605,
        "id": "e953c686-4cb2-4870-9300-ab8418559926",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339480000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var date = new Date(Date.UTC(2000,0,31,12));\nvar timestamp = date.getTime();\n// Alternatively\nvar timestamp2 = Date.UTC(2000,0,31,12);\nconsole.log(timestamp === timestamp2);"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "var date = new Date(Date.UTC(2000,0,31,12));\nvar timestamp = date.getTime();\n// Alternatively\nvar timestamp2 = Date.UTC(2000,0,31,12);\nconsole.log(timestamp === timestamp2);",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141605,
        "id": "28c00292-a173-43b2-bba8-892efd30e8b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141605,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: true"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: true"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141605,
        "id": "eadcd624-1c86-481c-b842-98dbcfa46113",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551339480000,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// And when constructing a date from it elsewhere...\nvar otherDate = new Date(timestamp);\n\n// Represented as an universal date\nconsole.log(otherDate.toUTCString());\n// Represented as a local date\nconsole.log(otherDate);"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "// And when constructing a date from it elsewhere...\nvar otherDate = new Date(timestamp);\n\n// Represented as an universal date\nconsole.log(otherDate.toUTCString());\n// Represented as a local date\nconsole.log(otherDate);",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715141605,
        "id": "28bcf948-dbbd-4369-b774-46d664a72aa1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715141605,
        "parent_id": "831ce5d7-7d68-4890-871d-59fc3814c413",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Sample output: Mon, 31 Jan 2000 12:00:00 GMT Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Sample output: Mon, 31 Jan 2000 12:00:00 GMT Mon Jan 31 2000 13:00:00 GMT+0100 (West-Europa (standaardtijd))"
          }
        ]
      }
    ],
    "title": "Creating a Date from UTC",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}