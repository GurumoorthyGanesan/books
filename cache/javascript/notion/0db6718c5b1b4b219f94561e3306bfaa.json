{
  "ID": "0db6718c-5b1b-4b21-9f94-561e3306bfaa",
  "Root": {
    "alive": true,
    "content": [
      "db159b29-a0fa-4941-a2cd-55633fad2293",
      "2aa2f297-3cde-4f2f-8c8c-154e7086aee2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715063210,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "0db6718c-5b1b-4b21-9f94-561e3306bfaa",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550868960000,
    "parent_id": "f78c32e2-a34f-4413-9045-987dc7f4ca99",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dynamic Method Names"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715063207,
        "id": "db159b29-a0fa-4941-a2cd-55633fad2293",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715063207,
        "parent_id": "0db6718c-5b1b-4b21-9f94-561e3306bfaa",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is also the ability to evaluate expressions when naming methods similar to how you can access an objects’ properties with "
            ],
            [
              "[]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This can be useful for having dynamic property names, however is often used in conjunction with Symbols."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is also the ability to evaluate expressions when naming methods similar to how you can access an objects’ properties with "
          },
          {
            "Text": "[]",
            "AttrFlags": 2
          },
          {
            "Text": ". This can be useful for having dynamic property names, however is often used in conjunction with Symbols."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715063210,
        "id": "2aa2f297-3cde-4f2f-8c8c-154e7086aee2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550868960000,
        "parent_id": "0db6718c-5b1b-4b21-9f94-561e3306bfaa",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "let METADATA = Symbol('metadata');\n\nclass Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n  \n  // example using symbols\n  [METADATA]() {\n    return {\n      make: this.make,\n      model: this.model\n    };\n  }\n\n  // you can also use any javascript expression\n\n  // this one is just a string, and could also be defined with simply add()\n  [\"add\"](a, b) {\n    return a + b;\n  }\n\n  // this one is dynamically evaluated\n  [1 + 2]() {\n    return \"three\";\n  }\n}\n\nlet MazdaMPV = new Car(\"Mazda\", \"MPV\");\nMazdaMPV.add(4, 5); // 9\nMazdaMPV[3](); // \"three\"\nMazdaMPV[METADATA](); // { make: \"Mazda\", model: \"MPV\" }"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "let METADATA = Symbol('metadata');\n\nclass Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n  \n  // example using symbols\n  [METADATA]() {\n    return {\n      make: this.make,\n      model: this.model\n    };\n  }\n\n  // you can also use any javascript expression\n\n  // this one is just a string, and could also be defined with simply add()\n  [\"add\"](a, b) {\n    return a + b;\n  }\n\n  // this one is dynamically evaluated\n  [1 + 2]() {\n    return \"three\";\n  }\n}\n\nlet MazdaMPV = new Car(\"Mazda\", \"MPV\");\nMazdaMPV.add(4, 5); // 9\nMazdaMPV[3](); // \"three\"\nMazdaMPV[METADATA](); // { make: \"Mazda\", model: \"MPV\" }",
        "code_language": "JavaScript"
      }
    ],
    "title": "Dynamic Method Names",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}