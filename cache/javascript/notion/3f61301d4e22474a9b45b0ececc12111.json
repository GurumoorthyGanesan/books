{
  "ID": "3f61301d-4e22-474a-9b45-b0ececc12111",
  "Root": {
    "alive": true,
    "content": [
      "0df7b4e7-5ae5-4021-85a5-cdb8f21ca381",
      "8dbf7b30-d80b-466f-8422-644fc5fea16e",
      "fb8eaad9-29da-429e-b3e2-28c178e73e2f",
      "0807d15c-44d4-49e0-b8e1-23d223d62af1",
      "cc9e4711-0562-4ffd-beac-267fa64317ce",
      "2c9a82b1-735a-4be4-b156-25c28f8b5fcf",
      "68373eb1-b986-48a1-bc2b-4519711a0bee",
      "e726d0c7-f7e9-4bbf-81f5-4e38f77fba68",
      "312f440c-ff77-4b3a-a9dc-cbf91a4891aa",
      "69d3c534-f041-475b-821b-ca5099b6ed25",
      "5ed9733a-c4c1-4ece-9c8d-6948ad578424",
      "83b3ecd9-3675-4ef1-8900-ed75b5ca3d20",
      "b299387c-973d-4191-b847-5be74664d50a",
      "dabde0ca-a609-4764-bd1c-b17928263895",
      "738a49d4-3dfb-41dd-b42f-926a6523cffc",
      "6446dbfe-83b9-4566-b617-6732f53e980e",
      "09ae8e3f-8137-4192-abae-fa437bb27c32",
      "3a5ed344-9c1f-42fe-8d6a-b72a29beb613",
      "a163ca9c-7a74-4155-93ac-a7191f1a489c",
      "1999e4f2-7036-46cb-b3e9-c10669df54a5",
      "b9be2f07-3a39-4721-b113-2ce87828593e",
      "f5b4765e-20ad-42da-b662-d82a443414cd",
      "0f4bd15d-a13e-4e2e-904e-0cbfc7789c6f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716441901,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "3f61301d-4e22-474a-9b45-b0ececc12111",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683755017,
    "parent_id": "89aa2888-b776-464c-937d-be57d6a81e90",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Unit Testing Promises with Mocha Sinon Chai and Proxyquire"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441889,
        "id": "0df7b4e7-5ae5-4021-85a5-cdb8f21ca381",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441889,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here we have a simple class to be tested that returns a "
            ],
            [
              "Promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " based on the results of an external "
            ],
            [
              "ResponseProcessor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that takes time to execute."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here we have a simple class to be tested that returns a "
          },
          {
            "Text": "Promise",
            "AttrFlags": 2
          },
          {
            "Text": " based on the results of an external "
          },
          {
            "Text": "ResponseProcessor",
            "AttrFlags": 2
          },
          {
            "Text": " that takes time to execute."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441892,
        "id": "8dbf7b30-d80b-466f-8422-644fc5fea16e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441892,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For simplicty we’ll assume that the "
            ],
            [
              "processResponse",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method won’t ever fail."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For simplicty we’ll assume that the "
          },
          {
            "Text": "processResponse",
            "AttrFlags": 2
          },
          {
            "Text": " method won’t ever fail."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441892,
        "id": "fb8eaad9-29da-429e-b3e2-28c178e73e2f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441892,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import {processResponse} from '../utils/response_processor';\n\nconst ping = () =\u003e {\n  return new Promise((resolve, _reject) =\u003e {\n    const response = processResponse(data);\n    resolve(response);\n  });\n}\n\nmodule.exports = ping;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import {processResponse} from '../utils/response_processor';\n\nconst ping = () =\u003e {\n  return new Promise((resolve, _reject) =\u003e {\n    const response = processResponse(data);\n    resolve(response);\n  });\n}\n\nmodule.exports = ping;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441892,
        "id": "0807d15c-44d4-49e0-b8e1-23d223d62af1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441892,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To test this we can leverage the following tools."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To test this we can leverage the following tools."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441894,
        "id": "cc9e4711-0562-4ffd-beac-267fa64317ce",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441894,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "mocha",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://mochajs.org/"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "mocha",
            "AttrFlags": 2,
            "Link": "https://mochajs.org/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441895,
        "id": "2c9a82b1-735a-4be4-b156-25c28f8b5fcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441895,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "chai",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://chaijs.com/"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "chai",
            "AttrFlags": 2,
            "Link": "http://chaijs.com/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441895,
        "id": "68373eb1-b986-48a1-bc2b-4519711a0bee",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441895,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "sinon",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://sinonjs.org/"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "sinon",
            "AttrFlags": 2,
            "Link": "http://sinonjs.org/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441896,
        "id": "e726d0c7-f7e9-4bbf-81f5-4e38f77fba68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441896,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "proxyquire",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://github.com/thlorenz/proxyquire"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "proxyquire",
            "AttrFlags": 2,
            "Link": "https://github.com/thlorenz/proxyquire"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441897,
        "id": "312f440c-ff77-4b3a-a9dc-cbf91a4891aa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441897,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "chai-as-promised",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://github.com/domenic/chai-as-promised"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "chai-as-promised",
            "AttrFlags": 2,
            "Link": "https://github.com/domenic/chai-as-promised"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441897,
        "id": "69d3c534-f041-475b-821b-ca5099b6ed25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441897,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I use the following "
            ],
            [
              "test",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " script in my "
            ],
            [
              "package.json",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " file."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I use the following "
          },
          {
            "Text": "test",
            "AttrFlags": 2
          },
          {
            "Text": " script in my "
          },
          {
            "Text": "package.json",
            "AttrFlags": 2
          },
          {
            "Text": " file."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441897,
        "id": "5ed9733a-c4c1-4ece-9c8d-6948ad578424",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441897,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\"test\": \"NODE_ENV=test mocha --compilers js:babel-core/register --require ./test/unit/test_helper.js  --recursive test/**/*_spec.js\""
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\"test\": \"NODE_ENV=test mocha --compilers js:babel-core/register --require ./test/unit/test_helper.js  --recursive test/**/*_spec.js\"",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441897,
        "id": "83b3ecd9-3675-4ef1-8900-ed75b5ca3d20",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441897,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This allows me to use "
            ],
            [
              "es6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " syntax. It references a "
            ],
            [
              "test_helper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that will look like"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This allows me to use "
          },
          {
            "Text": "es6",
            "AttrFlags": 2
          },
          {
            "Text": " syntax. It references a "
          },
          {
            "Text": "test_helper",
            "AttrFlags": 2
          },
          {
            "Text": " that will look like"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441897,
        "id": "b299387c-973d-4191-b847-5be74664d50a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441897,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport sinonStubPromise from 'sinon-stub-promise';\n\nchai.use(sinonChai);\nchai.use(chaiAsPromised);\nsinonStubPromise(sinon);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import chai from 'chai';\nimport sinon from 'sinon';\nimport sinonChai from 'sinon-chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport sinonStubPromise from 'sinon-stub-promise';\n\nchai.use(sinonChai);\nchai.use(chaiAsPromised);\nsinonStubPromise(sinon);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441898,
        "id": "dabde0ca-a609-4764-bd1c-b17928263895",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441898,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Proxyquire",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows us to inject our own stub in the place of the external "
            ],
            [
              "ResponseProcessor",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". We can then use "
            ],
            [
              "sinon",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to spy on that stub’s methods. We use the extensions to "
            ],
            [
              "chai",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " that "
            ],
            [
              "chai-as-promised",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " injects to check that the "
            ],
            [
              "ping()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method’s promise is "
            ],
            [
              "fullfilled",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", and that it "
            ],
            [
              "eventually",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns the required response."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Proxyquire",
            "AttrFlags": 2
          },
          {
            "Text": " allows us to inject our own stub in the place of the external "
          },
          {
            "Text": "ResponseProcessor",
            "AttrFlags": 2
          },
          {
            "Text": ". We can then use "
          },
          {
            "Text": "sinon",
            "AttrFlags": 2
          },
          {
            "Text": " to spy on that stub’s methods. We use the extensions to "
          },
          {
            "Text": "chai",
            "AttrFlags": 2
          },
          {
            "Text": " that "
          },
          {
            "Text": "chai-as-promised",
            "AttrFlags": 2
          },
          {
            "Text": " injects to check that the "
          },
          {
            "Text": "ping()",
            "AttrFlags": 2
          },
          {
            "Text": " method’s promise is "
          },
          {
            "Text": "fullfilled",
            "AttrFlags": 2
          },
          {
            "Text": ", and that it "
          },
          {
            "Text": "eventually",
            "AttrFlags": 2
          },
          {
            "Text": " returns the required response."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441898,
        "id": "738a49d4-3dfb-41dd-b42f-926a6523cffc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441898,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import {expect}       from 'chai';\nimport sinon          from 'sinon';\nimport proxyquire     from 'proxyquire';\n\nlet formattingStub = {\n  wrapResponse: () =\u003e {}\n}\n\nlet ping = proxyquire('../../../src/api/ping', {\n  '../utils/formatting': formattingStub\n});\n\ndescribe('ping', () =\u003e {\n  let wrapResponseSpy, pingResult;\n  const response = 'some response';\n\n  beforeEach(() =\u003e {\n    wrapResponseSpy = sinon.stub(formattingStub, 'wrapResponse').returns(response);\n    pingResult = ping();\n  })\n\n  afterEach(() =\u003e {\n    formattingStub.wrapResponse.restore();\n  })\n\n  it('returns a fullfilled promise', () =\u003e {\n    expect(pingResult).to.be.fulfilled;\n  })\n\n  it('eventually returns the correct response', () =\u003e {\n    expect(pingResult).to.eventually.equal(response);\n  })\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import {expect}       from 'chai';\nimport sinon          from 'sinon';\nimport proxyquire     from 'proxyquire';\n\nlet formattingStub = {\n  wrapResponse: () =\u003e {}\n}\n\nlet ping = proxyquire('../../../src/api/ping', {\n  '../utils/formatting': formattingStub\n});\n\ndescribe('ping', () =\u003e {\n  let wrapResponseSpy, pingResult;\n  const response = 'some response';\n\n  beforeEach(() =\u003e {\n    wrapResponseSpy = sinon.stub(formattingStub, 'wrapResponse').returns(response);\n    pingResult = ping();\n  })\n\n  afterEach(() =\u003e {\n    formattingStub.wrapResponse.restore();\n  })\n\n  it('returns a fullfilled promise', () =\u003e {\n    expect(pingResult).to.be.fulfilled;\n  })\n\n  it('eventually returns the correct response', () =\u003e {\n    expect(pingResult).to.eventually.equal(response);\n  })\n});",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441898,
        "id": "6446dbfe-83b9-4566-b617-6732f53e980e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441898,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now instead let’s assume you wish to test something that uses the response from "
            ],
            [
              "ping",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now instead let’s assume you wish to test something that uses the response from "
          },
          {
            "Text": "ping",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441898,
        "id": "09ae8e3f-8137-4192-abae-fa437bb27c32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441898,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import {ping} from './ping';\n\nconst pingWrapper = () =\u003e {\n  ping.then((response) =\u003e {\n    // do something with the response\n  });\n}\n\nmodule.exports = pingWrapper;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import {ping} from './ping';\n\nconst pingWrapper = () =\u003e {\n  ping.then((response) =\u003e {\n    // do something with the response\n  });\n}\n\nmodule.exports = pingWrapper;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441899,
        "id": "3a5ed344-9c1f-42fe-8d6a-b72a29beb613",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441899,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To test the "
            ],
            [
              "pingWrapper",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we leverage"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To test the "
          },
          {
            "Text": "pingWrapper",
            "AttrFlags": 2
          },
          {
            "Text": " we leverage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441899,
        "id": "a163ca9c-7a74-4155-93ac-a7191f1a489c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441899,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "sinon",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://sinonjs.org/"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "sinon",
            "AttrFlags": 2,
            "Link": "http://sinonjs.org/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441900,
        "id": "1999e4f2-7036-46cb-b3e9-c10669df54a5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441900,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "proxyquire",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://github.com/thlorenz/proxyquire"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "proxyquire",
            "AttrFlags": 2,
            "Link": "https://github.com/thlorenz/proxyquire"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441900,
        "id": "b9be2f07-3a39-4721-b113-2ce87828593e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441900,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "sinon-stub-promise",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://github.com/substantial/sinon-stub-promise"
                ]
              ]
            ]
          ]
        },
        "type": "numbered_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "sinon-stub-promise",
            "AttrFlags": 2,
            "Link": "https://github.com/substantial/sinon-stub-promise"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441901,
        "id": "f5b4765e-20ad-42da-b662-d82a443414cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441901,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As before, "
            ],
            [
              "Proxyquire",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " allows us to inject our own stub in the place of the external dependency, in this case the "
            ],
            [
              "ping",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method we tested previously. We can then use "
            ],
            [
              "sinon",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to spy on that stub’s methods and leverage "
            ],
            [
              "sinon-stub-promise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to allow us to "
            ],
            [
              "returnsPromise",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This promise can then be resolved or rejected as we wish in the test, in order to test the wrapper’s response to that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As before, "
          },
          {
            "Text": "Proxyquire",
            "AttrFlags": 2
          },
          {
            "Text": " allows us to inject our own stub in the place of the external dependency, in this case the "
          },
          {
            "Text": "ping",
            "AttrFlags": 2
          },
          {
            "Text": " method we tested previously. We can then use "
          },
          {
            "Text": "sinon",
            "AttrFlags": 2
          },
          {
            "Text": " to spy on that stub’s methods and leverage "
          },
          {
            "Text": "sinon-stub-promise",
            "AttrFlags": 2
          },
          {
            "Text": " to allow us to "
          },
          {
            "Text": "returnsPromise",
            "AttrFlags": 2
          },
          {
            "Text": ". This promise can then be resolved or rejected as we wish in the test, in order to test the wrapper’s response to that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716441901,
        "id": "0f4bd15d-a13e-4e2e-904e-0cbfc7789c6f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716441901,
        "parent_id": "3f61301d-4e22-474a-9b45-b0ececc12111",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "import {expect}   from 'chai';\nimport sinon      from 'sinon';\nimport proxyquire from 'proxyquire';\n\nlet pingStub = {\n  ping: () =\u003e {}\n};\n\nlet pingWrapper = proxyquire('../src/pingWrapper', {\n  './ping': pingStub\n});\n\ndescribe('pingWrapper', () =\u003e {\n  let pingSpy;\n  const response = 'some response';\n\n  beforeEach(() =\u003e {\n    pingSpy = sinon.stub(pingStub, 'ping').returnsPromise();\n    pingSpy.resolves(response);\n    pingWrapper();\n  });\n\n  afterEach(() =\u003e {\n    pingStub.wrapResponse.restore();\n  });\n\n  it('wraps the ping', () =\u003e {\n    expect(pingSpy).to.have.been.calledWith(response);\n  });\n});"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "import {expect}   from 'chai';\nimport sinon      from 'sinon';\nimport proxyquire from 'proxyquire';\n\nlet pingStub = {\n  ping: () =\u003e {}\n};\n\nlet pingWrapper = proxyquire('../src/pingWrapper', {\n  './ping': pingStub\n});\n\ndescribe('pingWrapper', () =\u003e {\n  let pingSpy;\n  const response = 'some response';\n\n  beforeEach(() =\u003e {\n    pingSpy = sinon.stub(pingStub, 'ping').returnsPromise();\n    pingSpy.resolves(response);\n    pingWrapper();\n  });\n\n  afterEach(() =\u003e {\n    pingStub.wrapResponse.restore();\n  });\n\n  it('wraps the ping', () =\u003e {\n    expect(pingSpy).to.have.been.calledWith(response);\n  });\n});",
        "code_language": "Plain Text"
      }
    ],
    "title": "Unit Testing Promises with Mocha Sinon Chai and Proxyquire",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}