{
  "ID": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
  "Root": {
    "alive": true,
    "content": [
      "624a091c-4887-4ec2-b1e0-8bcc1f02872b",
      "607c1044-04a0-4501-bee8-aab69041b3b9",
      "7b7554ea-b736-4622-8738-a11314392147",
      "3a5f1de1-c0f1-4abc-ab5a-356ac3e28869",
      "8642e780-acf1-4008-98ec-8ecc7453ee51",
      "1641e118-c133-4e49-94f0-2925e4534467",
      "e64772e5-7b55-43b1-888f-4157f323fa82",
      "010733f2-cfff-4304-9178-8d09f537fb09"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715061097,
    "id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550715061097,
    "parent_id": "f78c32e2-a34f-4413-9045-987dc7f4ca99",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "040 Getters and Setters"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061094,
        "id": "624a091c-4887-4ec2-b1e0-8bcc1f02872b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061094,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Getters and setters allow you to define custom behaviour for reading and writing a given property on your class. To the user, they appear the same as any typical property. However, internally a custom function you provide is used to determine the value when the property is accessed (the getter), and to preform any necessary changes when the property is assigned (the setter)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Getters and setters allow you to define custom behaviour for reading and writing a given property on your class. To the user, they appear the same as any typical property. However, internally a custom function you provide is used to determine the value when the property is accessed (the getter), and to preform any necessary changes when the property is assigned (the setter)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061096,
        "id": "607c1044-04a0-4501-bee8-aab69041b3b9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061096,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In a "
            ],
            [
              "class",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " definition, a getter is written like a no-argument method prefixed by the "
            ],
            [
              "get",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword. A setter is similar, except that it accepts one argument (the new value being assigned) and the "
            ],
            [
              "set",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " keyword is used instead."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In a "
          },
          {
            "Text": "class",
            "AttrFlags": 2
          },
          {
            "Text": " definition, a getter is written like a no-argument method prefixed by the "
          },
          {
            "Text": "get",
            "AttrFlags": 2
          },
          {
            "Text": " keyword. A setter is similar, except that it accepts one argument (the new value being assigned) and the "
          },
          {
            "Text": "set",
            "AttrFlags": 2
          },
          {
            "Text": " keyword is used instead."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061096,
        "id": "7b7554ea-b736-4622-8738-a11314392147",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061096,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s an example class which provides a getter and setter for its "
            ],
            [
              ".name",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " property. Each time it’s assigned, we’ll record the new name in an internal "
            ],
            [
              ".names_",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array. Each time it’s accessed, we’ll return the latest name."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s an example class which provides a getter and setter for its "
          },
          {
            "Text": ".name",
            "AttrFlags": 2
          },
          {
            "Text": " property. Each time it’s assigned, we’ll record the new name in an internal "
          },
          {
            "Text": ".names_",
            "AttrFlags": 2
          },
          {
            "Text": " array. Each time it’s accessed, we’ll return the latest name."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061097,
        "id": "3a5f1de1-c0f1-4abc-ab5a-356ac3e28869",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061097,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "class MyClass {\n    constructor() {\n        this.names_ = [];\n    }\n\n    set name(value) {\n        this.names_.push(value);\n    }\n\n    get name() {\n        return this.names_[this.names_.length - 1];\n    }\n}\n\nconst myClassInstance = new MyClass();\nmyClassInstance.name = 'Joe';\nmyClassInstance.name = 'Bob';\n\nconsole.log(myClassInstance.name); // logs: \"Bob\"\nconsole.log(myClassInstance.names_); // logs: [\"Joe\", \"Bob\"]"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class MyClass {\n    constructor() {\n        this.names_ = [];\n    }\n\n    set name(value) {\n        this.names_.push(value);\n    }\n\n    get name() {\n        return this.names_[this.names_.length - 1];\n    }\n}\n\nconst myClassInstance = new MyClass();\nmyClassInstance.name = 'Joe';\nmyClassInstance.name = 'Bob';\n\nconsole.log(myClassInstance.name); // logs: \"Bob\"\nconsole.log(myClassInstance.names_); // logs: [\"Joe\", \"Bob\"]",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061097,
        "id": "8642e780-acf1-4008-98ec-8ecc7453ee51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061097,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you only define a setter, attempting to access the property will always return "
            ],
            [
              "undefined",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you only define a setter, attempting to access the property will always return "
          },
          {
            "Text": "undefined",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061097,
        "id": "1641e118-c133-4e49-94f0-2925e4534467",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061097,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const classInstance = new class {\n    set prop(value) {\n        console.log('setting', value);\n    }\n};\n\nclassInstance.prop = 10; // logs: \"setting\", 10\n\nconsole.log(classInstance.prop); // logs: undefined"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const classInstance = new class {\n    set prop(value) {\n        console.log('setting', value);\n    }\n};\n\nclassInstance.prop = 10; // logs: \"setting\", 10\n\nconsole.log(classInstance.prop); // logs: undefined",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061097,
        "id": "e64772e5-7b55-43b1-888f-4157f323fa82",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061097,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you only define a getter, attempting to assign the property will have no effect."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you only define a getter, attempting to assign the property will have no effect."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715061097,
        "id": "010733f2-cfff-4304-9178-8d09f537fb09",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715061097,
        "parent_id": "2f6c3113-5ad8-4f7c-a1ef-3d16c5ca6637",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const classInstance = new class {\n    get prop() {\n        return 5;\n    }\n};\n\nclassInstance.prop = 10;\n\nconsole.log(classInstance.prop); // logs: 5"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const classInstance = new class {\n    get prop() {\n        return 5;\n    }\n};\n\nclassInstance.prop = 10;\n\nconsole.log(classInstance.prop); // logs: 5",
        "code_language": "Plain Text"
      }
    ],
    "title": "040 Getters and Setters"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}