{
  "ID": "b0ae6c42-ecae-46c8-8d92-a4e204d9a7eb",
  "Root": {
    "alive": true,
    "content": [
      "6dc98b1d-8b97-4736-bb18-e07887c6c92b",
      "a593a87b-cccb-4545-906e-4000bac386f1",
      "4cf69514-7fa3-428e-8889-28c0c95590b7",
      "e12d47c1-7203-4b6b-9428-0ec73db621b7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716841168,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "b0ae6c42-ecae-46c8-8d92-a4e204d9a7eb",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551664560000,
    "parent_id": "cbb9c137-3d95-4448-8b01-c2da14811905",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Mediator Pattern"
        ]
      ]
    },
    "type": "page",
    "version": 9,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716841164,
        "id": "6dc98b1d-8b97-4736-bb18-e07887c6c92b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716841164,
        "parent_id": "b0ae6c42-ecae-46c8-8d92-a4e204d9a7eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Think of the mediator pattern as the flight control tower that controls planes in the air: it directs this plane to land now, the second to wait, and the third to take off, etc. However no plane is ever allowed to talk to its peers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Think of the mediator pattern as the flight control tower that controls planes in the air: it directs this plane to land now, the second to wait, and the third to take off, etc. However no plane is ever allowed to talk to its peers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716841167,
        "id": "a593a87b-cccb-4545-906e-4000bac386f1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716841167,
        "parent_id": "b0ae6c42-ecae-46c8-8d92-a4e204d9a7eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is how mediator works, it works as a communication hub among different modules, this way you reduce module dependency on each other, increase loose coupling, and consequently portability."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is how mediator works, it works as a communication hub among different modules, this way you reduce module dependency on each other, increase loose coupling, and consequently portability."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716841168,
        "id": "4cf69514-7fa3-428e-8889-28c0c95590b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716841168,
        "parent_id": "b0ae6c42-ecae-46c8-8d92-a4e204d9a7eb",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This "
            ],
            [
              "Chatroom example",
              [
                [
                  "b"
                ],
                [
                  "a",
                  "http://www.dofactory.com/javascript/mediator-design-pattern"
                ]
              ]
            ],
            [
              " explains how mediator patterns works:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This "
          },
          {
            "Text": "Chatroom example",
            "AttrFlags": 1,
            "Link": "http://www.dofactory.com/javascript/mediator-design-pattern"
          },
          {
            "Text": " explains how mediator patterns works:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716841168,
        "id": "e12d47c1-7203-4b6b-9428-0ec73db621b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716841168,
        "parent_id": "b0ae6c42-ecae-46c8-8d92-a4e204d9a7eb",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// each participant is just a module that wants to talk to other modules(other participants)\nvar Participant = function(name) {\n    this.name = name;\n    this.chatroom = null;\n};\n // each participant has method for talking, and also listening to other participants\nParticipant.prototype = {\n    send: function(message, to) {\n        this.chatroom.send(message, this, to);\n    },\n    receive: function(message, from) {\n        log.add(from.name + \" to \" + this.name + \": \" + message);\n    }\n};\n\n // chatroom is the Mediator: it is the hub where participants send messages to, and receive messages from\nvar Chatroom = function() {\n    var participants = {};\n \n    return {\n \n        register: function(participant) {\n            participants[participant.name] = participant;\n            participant.chatroom = this;\n        },\n \n        send: function(message, from) {\n            for (key in participants) {   \n                if (participants[key] !== from) {//you cant message yourself !\n                    participants[key].receive(message, from);\n                }\n            }\n        }\n\n    };\n};\n \n// log helper\n \nvar log = (function() {\n    var log = \"\";\n \n    return {\n        add: function(msg) { log += msg + \"\\n\"; },\n        show: function() { alert(log); log = \"\"; }\n    }\n})();\n \nfunction run() {\n    var yoko = new Participant(\"Yoko\");\n    var john = new Participant(\"John\");\n    var paul = new Participant(\"Paul\");\n    var ringo = new Participant(\"Ringo\");\n \n    var chatroom = new Chatroom();\n    chatroom.register(yoko);\n    chatroom.register(john);\n    chatroom.register(paul);\n    chatroom.register(ringo);\n \n    yoko.send(\"All you need is love.\");\n    yoko.send(\"I love you John.\");        \n    paul.send(\"Ha, I heard that!\");\n \n    log.show();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// each participant is just a module that wants to talk to other modules(other participants)\nvar Participant = function(name) {\n    this.name = name;\n    this.chatroom = null;\n};\n // each participant has method for talking, and also listening to other participants\nParticipant.prototype = {\n    send: function(message, to) {\n        this.chatroom.send(message, this, to);\n    },\n    receive: function(message, from) {\n        log.add(from.name + \" to \" + this.name + \": \" + message);\n    }\n};\n\n // chatroom is the Mediator: it is the hub where participants send messages to, and receive messages from\nvar Chatroom = function() {\n    var participants = {};\n \n    return {\n \n        register: function(participant) {\n            participants[participant.name] = participant;\n            participant.chatroom = this;\n        },\n \n        send: function(message, from) {\n            for (key in participants) {   \n                if (participants[key] !== from) {//you cant message yourself !\n                    participants[key].receive(message, from);\n                }\n            }\n        }\n\n    };\n};\n \n// log helper\n \nvar log = (function() {\n    var log = \"\";\n \n    return {\n        add: function(msg) { log += msg + \"\\n\"; },\n        show: function() { alert(log); log = \"\"; }\n    }\n})();\n \nfunction run() {\n    var yoko = new Participant(\"Yoko\");\n    var john = new Participant(\"John\");\n    var paul = new Participant(\"Paul\");\n    var ringo = new Participant(\"Ringo\");\n \n    var chatroom = new Chatroom();\n    chatroom.register(yoko);\n    chatroom.register(john);\n    chatroom.register(paul);\n    chatroom.register(ringo);\n \n    yoko.send(\"All you need is love.\");\n    yoko.send(\"I love you John.\");        \n    paul.send(\"Ha, I heard that!\");\n \n    log.show();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Mediator Pattern",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}