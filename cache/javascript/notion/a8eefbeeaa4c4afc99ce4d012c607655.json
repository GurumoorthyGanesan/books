{
  "ID": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
  "Root": {
    "alive": true,
    "content": [
      "e0ea48cc-f9f1-4539-b3ea-0d95c8c92ba6",
      "1a65a6e8-80a4-4536-8ed0-293d4a095984",
      "5460b50b-3b33-48f2-aad1-6fceee6b37e4",
      "457a64ef-557e-4b79-a11c-ee78dc6a72c2",
      "5833e70f-f6f0-4d36-8ec9-59feae4790c0"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715084533,
    "id": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550715084533,
    "parent_id": "8258c948-9475-41eb-8bbe-cdf7703094bf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "050 Abstract Equality "
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715084530,
        "id": "e0ea48cc-f9f1-4539-b3ea-0d95c8c92ba6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715084530,
        "parent_id": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Operands of the abstract equality operator are compared "
            ],
            [
              "after",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " being converted to a common type. How this conversion happens is based on the specification of the operator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Operands of the abstract equality operator are compared "
          },
          {
            "Text": "after",
            "AttrFlags": 4
          },
          {
            "Text": " being converted to a common type. How this conversion happens is based on the specification of the operator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715084532,
        "id": "1a65a6e8-80a4-4536-8ed0-293d4a095984",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715084532,
        "parent_id": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Specification for the ",
              [
                [
                  "a",
                  "https://tc39.github.io/ecma262/#sec-abstract-equality-comparison"
                ]
              ]
            ],
            [
              "==",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://tc39.github.io/ecma262/#sec-abstract-equality-comparison"
                ]
              ]
            ],
            [
              " operator:",
              [
                [
                  "a",
                  "https://tc39.github.io/ecma262/#sec-abstract-equality-comparison"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Specification for the ",
            "Link": "https://tc39.github.io/ecma262/#sec-abstract-equality-comparison"
          },
          {
            "Text": "==",
            "AttrFlags": 2,
            "Link": "https://tc39.github.io/ecma262/#sec-abstract-equality-comparison"
          },
          {
            "Text": " operator:",
            "Link": "https://tc39.github.io/ecma262/#sec-abstract-equality-comparison"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715084533,
        "id": "5460b50b-3b33-48f2-aad1-6fceee6b37e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715084533,
        "parent_id": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "7.2.13 Abstract Equality Comparison\nThe comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows: 1. If Type(x) is the same as Type(y), then: - a. Return the result of performing Strict Equality Comparison x === y. 2. If x is null and y is undefined, return true. 3. If x is undefined and y is null, return true. 4. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y). 5. If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y. 6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y. 7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y). 8. If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y). 9. If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x) == y. 10. Return false."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "7.2.13 Abstract Equality Comparison\nThe comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows: 1. If Type(x) is the same as Type(y), then: - a. Return the result of performing Strict Equality Comparison x === y. 2. If x is null and y is undefined, return true. 3. If x is undefined and y is null, return true. 4. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y). 5. If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y. 6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y. 7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y). 8. If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y). 9. If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x) == y. 10. Return false."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715084533,
        "id": "457a64ef-557e-4b79-a11c-ee78dc6a72c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715084533,
        "parent_id": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Examples:"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715084533,
        "id": "5833e70f-f6f0-4d36-8ec9-59feae4790c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715084533,
        "parent_id": "a8eefbee-aa4c-4afc-99ce-4d012c607655",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "1 == 1;                     // true\n1 == true;                  // true  (operand converted to number: true =\u003e 1)\n1 == '1';                   // true  (operand converted to number: '1' =\u003e 1 )\n1 == '1.00';                // true\n1 == '1.00000000001';       // false\n1 == '1.00000000000000001'; // true  (true due to precision loss)\nnull == undefined;          // true  (spec #2)\n1 == 2;                     // false\n0 == false;                 // true\n0 == undefined;             // false\n0 == \"\";                    // true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "1 == 1;                     // true\n1 == true;                  // true  (operand converted to number: true =\u003e 1)\n1 == '1';                   // true  (operand converted to number: '1' =\u003e 1 )\n1 == '1.00';                // true\n1 == '1.00000000001';       // false\n1 == '1.00000000000000001'; // true  (true due to precision loss)\nnull == undefined;          // true  (spec #2)\n1 == 2;                     // false\n0 == false;                 // true\n0 == undefined;             // false\n0 == \"\";                    // true",
        "code_language": "Plain Text"
      }
    ],
    "title": "050 Abstract Equality "
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}