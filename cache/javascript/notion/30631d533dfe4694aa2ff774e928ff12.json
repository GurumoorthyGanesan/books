{
  "ID": "30631d53-3dfe-4694-aa2f-f774e928ff12",
  "Root": {
    "alive": true,
    "content": [
      "b5253079-39f7-4819-806e-9776a4d694fd",
      "cfebd4ba-7860-4591-b573-f3e8e5cc163b",
      "d0b0909f-8246-4a56-8c7e-d949675b90a1",
      "e8d6343a-35e8-4d70-876d-b7e4d1724f27",
      "1d912ae8-dd24-4e70-a660-05986977e624",
      "e7b0bc3f-5fa6-4bc5-8b37-82df7183e076"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715119080,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551338400000,
    "parent_id": "499ecbda-9a83-4992-8013-1e2d2247246e",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Waiting for multiple concurrent promises"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715119078,
        "id": "b5253079-39f7-4819-806e-9776a4d694fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715119078,
        "parent_id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "Promise.all()",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"
                ]
              ]
            ],
            [
              " static method accepts an iterable (e.g. an "
            ],
            [
              "Array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") of promises and returns a new promise, which resolves when "
            ],
            [
              "all",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " promises in the iterable have resolved, or rejects if "
            ],
            [
              "at least one",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " of the promises in the iterable have rejected."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "Promise.all()",
            "AttrFlags": 2,
            "Link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"
          },
          {
            "Text": " static method accepts an iterable (e.g. an "
          },
          {
            "Text": "Array",
            "AttrFlags": 2
          },
          {
            "Text": ") of promises and returns a new promise, which resolves when "
          },
          {
            "Text": "all",
            "AttrFlags": 1
          },
          {
            "Text": " promises in the iterable have resolved, or rejects if "
          },
          {
            "Text": "at least one",
            "AttrFlags": 1
          },
          {
            "Text": " of the promises in the iterable have rejected."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715119079,
        "id": "cfebd4ba-7860-4591-b573-f3e8e5cc163b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551338400000,
        "parent_id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// wait \"millis\" ms, then resolve with \"value\"\nfunction resolve(value, milliseconds) {\n    return new Promise(resolve =\u003e setTimeout(() =\u003e resolve(value), milliseconds));\n}\n\n// wait \"millis\" ms, then reject with \"reason\"\nfunction reject(reason, milliseconds) {\n    return new Promise((_, reject) =\u003e setTimeout(() =\u003e reject(reason), milliseconds));\n}\n\nPromise.all([\n    resolve(1, 5000),\n    resolve(2, 6000),\n    resolve(3, 7000)    \n]).then(values =\u003e console.log(values)); // outputs \"[1, 2, 3]\" after 7 seconds.\n\nPromise.all([\n    resolve(1, 5000),\n    reject('Error!', 6000),\n    resolve(2, 7000)\n]).then(values =\u003e console.log(values)) // does not output anything\n.catch(reason =\u003e console.log(reason)); // outputs \"Error!\" after 6 seconds."
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// wait \"millis\" ms, then resolve with \"value\"\nfunction resolve(value, milliseconds) {\n    return new Promise(resolve =\u003e setTimeout(() =\u003e resolve(value), milliseconds));\n}\n\n// wait \"millis\" ms, then reject with \"reason\"\nfunction reject(reason, milliseconds) {\n    return new Promise((_, reject) =\u003e setTimeout(() =\u003e reject(reason), milliseconds));\n}\n\nPromise.all([\n    resolve(1, 5000),\n    resolve(2, 6000),\n    resolve(3, 7000)    \n]).then(values =\u003e console.log(values)); // outputs \"[1, 2, 3]\" after 7 seconds.\n\nPromise.all([\n    resolve(1, 5000),\n    reject('Error!', 6000),\n    resolve(2, 7000)\n]).then(values =\u003e console.log(values)) // does not output anything\n.catch(reason =\u003e console.log(reason)); // outputs \"Error!\" after 6 seconds.",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715119080,
        "id": "d0b0909f-8246-4a56-8c7e-d949675b90a1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715119080,
        "parent_id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Non-promise values in the iterable are "
            ],
            [
              "“promisified”",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/231/promises/1850/promisifying-values"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Non-promise values in the iterable are "
          },
          {
            "Text": "“promisified”",
            "Link": "http://stackoverflow.com/documentation/javascript/231/promises/1850/promisifying-values"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715119080,
        "id": "e8d6343a-35e8-4d70-876d-b7e4d1724f27",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551338400000,
        "parent_id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "Promise.all([\n    resolve(1, 5000),\n    resolve(2, 6000),\n    { hello: 3 }\n])\n.then(values =\u003e console.log(values)); // outputs \"[1, 2, { hello: 3 }]\" after 6 seconds"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Promise.all([\n    resolve(1, 5000),\n    resolve(2, 6000),\n    { hello: 3 }\n])\n.then(values =\u003e console.log(values)); // outputs \"[1, 2, { hello: 3 }]\" after 6 seconds",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715119080,
        "id": "1d912ae8-dd24-4e70-a660-05986977e624",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715119080,
        "parent_id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Destructuring assignment can help to retrieve results from multiple promises."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Destructuring assignment can help to retrieve results from multiple promises."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715119080,
        "id": "e7b0bc3f-5fa6-4bc5-8b37-82df7183e076",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551338400000,
        "parent_id": "30631d53-3dfe-4694-aa2f-f774e928ff12",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "Promise.all([\n    resolve(1, 5000),\n    resolve(2, 6000),\n    resolve(3, 7000)\n])\n.then(([result1, result2, result3]) =\u003e {\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "Promise.all([\n    resolve(1, 5000),\n    resolve(2, 6000),\n    resolve(3, 7000)\n])\n.then(([result1, result2, result3]) =\u003e {\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n});",
        "code_language": "JavaScript"
      }
    ],
    "title": "Waiting for multiple concurrent promises",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}