{
  "ID": "53d8211d-3a63-453f-aa5b-33e65a892d96",
  "Root": {
    "alive": true,
    "content": [
      "75f19030-bf9f-429d-a67c-78dc87316300",
      "e383344f-408f-4375-844e-2e5a8737de2a",
      "40a3b2d6-7045-47c3-ae70-2218eae07d9f",
      "af3adc7f-21f1-4cbf-8efa-207f05d9414b",
      "9ac082ec-4574-4909-a5b7-67fd2f1e0027",
      "2f07e0dd-98ab-4891-a031-78db11c2df51",
      "760dab4e-dee1-4ec2-b841-51522d3ce8c0",
      "8efe25bf-29b2-4e2f-9519-1441065f9e6a",
      "7f4e84dc-0abb-4359-981a-9245c63316e7",
      "55618e98-a18e-4d9e-a632-f87bd517a9c0",
      "a0823d2d-55fb-4c96-975e-37bfb3c520e6",
      "dee91898-4d42-45fa-a9fb-6aa61f01e39a",
      "ec82d614-0688-4e05-bde8-b9882a98b842",
      "189f537d-39ef-4a90-adc7-ed5c2b20709c",
      "c33314c0-3652-44cf-979f-84daecf59561"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716443373,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683762905,
    "parent_id": "89aa2888-b776-464c-937d-be57d6a81e90",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Basic Assertion"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443368,
        "id": "75f19030-bf9f-429d-a67c-78dc87316300",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443368,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At its most basic level, Unit Testing in any language provides assertions against some known or expected output."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At its most basic level, Unit Testing in any language provides assertions against some known or expected output."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443371,
        "id": "e383344f-408f-4375-844e-2e5a8737de2a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443371,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function assert( outcome, description ) { \n    var passFail = outcome ? 'pass' : 'fail'; \n    console.log(passFail, ': ', description);\n    return outcome;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function assert( outcome, description ) { \n    var passFail = outcome ? 'pass' : 'fail'; \n    console.log(passFail, ': ', description);\n    return outcome;\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443371,
        "id": "40a3b2d6-7045-47c3-ae70-2218eae07d9f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443371,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The popular assertion method above shows us one quick and easy way to assert a value in most web browsers and interpreters like Node.js with virtually any version of ECMAScript."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The popular assertion method above shows us one quick and easy way to assert a value in most web browsers and interpreters like Node.js with virtually any version of ECMAScript."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "af3adc7f-21f1-4cbf-8efa-207f05d9414b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A good unit test is designed to test a discreet unit of code; usually a function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A good unit test is designed to test a discreet unit of code; usually a function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "9ac082ec-4574-4909-a5b7-67fd2f1e0027",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function add(num1, num2) { \n    return num1 + num2; \n} \n \nvar result = add(5, 20); \nassert( result == 24, 'add(5, 20) should return 25...');"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function add(num1, num2) { \n    return num1 + num2; \n} \n \nvar result = add(5, 20); \nassert( result == 24, 'add(5, 20) should return 25...');",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "2f07e0dd-98ab-4891-a031-78db11c2df51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the example above, the return value from the function "
            ],
            [
              "add(x, y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "5 + 20",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is clearly "
            ],
            [
              "25",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", so our assertion of "
            ],
            [
              "24",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should fail, and the assert method will log a “fail” line."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the example above, the return value from the function "
          },
          {
            "Text": "add(x, y)",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "5 + 20",
            "AttrFlags": 2
          },
          {
            "Text": " is clearly "
          },
          {
            "Text": "25",
            "AttrFlags": 2
          },
          {
            "Text": ", so our assertion of "
          },
          {
            "Text": "24",
            "AttrFlags": 2
          },
          {
            "Text": " should fail, and the assert method will log a “fail” line."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "760dab4e-dee1-4ec2-b841-51522d3ce8c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If we simply modify our expected assertion outcome, the test will succeed and the resulting output would look something like this."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If we simply modify our expected assertion outcome, the test will succeed and the resulting output would look something like this."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "8efe25bf-29b2-4e2f-9519-1441065f9e6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "assert( result == 25, 'add(5, 20) should return 25...');\n\nconsole output:\n\n\u003e pass: should return 25..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "assert( result == 25, 'add(5, 20) should return 25...');\n\nconsole output:\n\n\u003e pass: should return 25...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "7f4e84dc-0abb-4359-981a-9245c63316e7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This simple assertion can assure that in many different cases, your “add” function will always return the expected result and requires no additional frameworks or libraries to work."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This simple assertion can assure that in many different cases, your “add” function will always return the expected result and requires no additional frameworks or libraries to work."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443372,
        "id": "55618e98-a18e-4d9e-a632-f87bd517a9c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443372,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A more rigorous set of assertions would look like this (using "
            ],
            [
              "var result = add(x,y)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " for each assertion):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A more rigorous set of assertions would look like this (using "
          },
          {
            "Text": "var result = add(x,y)",
            "AttrFlags": 2
          },
          {
            "Text": " for each assertion):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443373,
        "id": "a0823d2d-55fb-4c96-975e-37bfb3c520e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443373,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "assert( result == 0, 'add(0, 0) should return 0...');\nassert( result == -1, 'add(0, -1) should return -1...');\nassert( result == 1, 'add(0, 1) should return 1...');"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "assert( result == 0, 'add(0, 0) should return 0...');\nassert( result == -1, 'add(0, -1) should return -1...');\nassert( result == 1, 'add(0, 1) should return 1...');",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443373,
        "id": "dee91898-4d42-45fa-a9fb-6aa61f01e39a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443373,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And console output would be this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And console output would be this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443373,
        "id": "ec82d614-0688-4e05-bde8-b9882a98b842",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443373,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "\u003e pass: should return 0...\n\u003e pass: should return -1...\n\u003e pass: should return 1..."
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "\u003e pass: should return 0...\n\u003e pass: should return -1...\n\u003e pass: should return 1...",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443373,
        "id": "189f537d-39ef-4a90-adc7-ed5c2b20709c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443373,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can now safely say that "
            ],
            [
              "add(x,y)",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              "… should return the sum of two integers",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ". We can roll these up into something like this:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can now safely say that "
          },
          {
            "Text": "add(x,y)",
            "AttrFlags": 3
          },
          {
            "Text": "… should return the sum of two integers",
            "AttrFlags": 1
          },
          {
            "Text": ". We can roll these up into something like this:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716443373,
        "id": "c33314c0-3652-44cf-979f-84daecf59561",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716443373,
        "parent_id": "53d8211d-3a63-453f-aa5b-33e65a892d96",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function test__addsIntegers() {\n\n    // expect a number of passed assertions\n    var passed = 3;\n\n    // number of assertions to be reduced and added as Booleans\n    var assertions = [\n\n        assert( add(0, 0) == 0, 'add(0, 0) should return 0...'),\n        assert( add(0, -1) == -1, 'add(0, -1) should return -1...'),\n        assert( add(0, 1) == 1, 'add(0, 1) should return 1...')\n\n    ].reduce(function(previousValue, currentValue){\n\n        return previousValue + current;\n\n    });\n\n    if (assertions === passed) {\n\n        console.log(\"add(x,y)... did return the sum of two integers\");\n        return true;\n\n    } else {\n\n        console.log(\"add(x,y)... does not reliably return the sum of two integers\");\n        return false;\n\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function test__addsIntegers() {\n\n    // expect a number of passed assertions\n    var passed = 3;\n\n    // number of assertions to be reduced and added as Booleans\n    var assertions = [\n\n        assert( add(0, 0) == 0, 'add(0, 0) should return 0...'),\n        assert( add(0, -1) == -1, 'add(0, -1) should return -1...'),\n        assert( add(0, 1) == 1, 'add(0, 1) should return 1...')\n\n    ].reduce(function(previousValue, currentValue){\n\n        return previousValue + current;\n\n    });\n\n    if (assertions === passed) {\n\n        console.log(\"add(x,y)... did return the sum of two integers\");\n        return true;\n\n    } else {\n\n        console.log(\"add(x,y)... does not reliably return the sum of two integers\");\n        return false;\n\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Basic Assertion",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}