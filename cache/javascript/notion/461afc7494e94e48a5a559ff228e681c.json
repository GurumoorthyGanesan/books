{
  "ID": "461afc74-94e9-4e48-a5a5-59ff228e681c",
  "Root": {
    "alive": true,
    "content": [
      "fe02ad7d-5cfd-460c-bd11-01789861e037",
      "1d587324-6db5-4330-9537-d9c7e3e4890b",
      "ce846380-8893-46ea-ad2c-00d1bdc846e8",
      "9151c950-69a8-4edc-b782-4faab2e26d83",
      "b011d497-ccca-489c-b14b-1f9b8c414fb8",
      "d100bc96-ccec-417d-a85e-8bebcd2f3323",
      "57435d79-32d8-45d2-9292-dbeef6f87f77",
      "6540db33-bdd7-4426-ac48-ef67dbef0981",
      "bffebad4-a757-4eb0-b730-ac21ee1dac56",
      "ab88ebc1-1938-465d-9650-c4c54e653a8d",
      "ecc33b7e-575d-402e-88a8-1be819e7554a",
      "89fdcff8-fa44-42e2-88ba-ac7a19c716d2",
      "66f3d775-573a-43e8-b8e2-a45570f50e06",
      "80925533-03f4-447c-8f6c-f3cfcdc533b7",
      "1c5e7674-fab8-4ab3-a3a0-577e8d50555d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715096196,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550870580000,
    "parent_id": "8258c948-9475-41eb-8bbe-cdf7703094bf",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bit fields to optimize comparison of multi state data"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096193,
        "id": "fe02ad7d-5cfd-460c-bd11-01789861e037",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096193,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A bit field is a variable that holds various boolean states as individual bits. A bit on would represent true, and off would be false. In the past bit fields were routinely used as they saved memory and reduced processing load. Though the need to use bit field is no longer so important they do offer some benefits that can simplify many processing tasks."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A bit field is a variable that holds various boolean states as individual bits. A bit on would represent true, and off would be false. In the past bit fields were routinely used as they saved memory and reduced processing load. Though the need to use bit field is no longer so important they do offer some benefits that can simplify many processing tasks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096193,
        "id": "1d587324-6db5-4330-9537-d9c7e3e4890b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096193,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For example user input. When getting input from a keyboard’s direction keys up, down, left,right you can encode the various keys into a single variable with each direction assigned a bit."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For example user input. When getting input from a keyboard’s direction keys up, down, left,right you can encode the various keys into a single variable with each direction assigned a bit."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096194,
        "id": "ce846380-8893-46ea-ad2c-00d1bdc846e8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096194,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example reading keyboard via bitfield"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example reading keyboard via bitfield"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096194,
        "id": "9151c950-69a8-4edc-b782-4faab2e26d83",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550870580000,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var bitField = 0;  // the value to hold the bits\nconst KEY_BITS = [4,1,8,2]; // left up right down\nconst KEY_MASKS = [0b1011,0b1110,0b0111,0b1101]; // left up right down\nwindow.onkeydown = window.onkeyup = function (e) {\n    if(e.keyCode \u003e= 37 \u0026\u0026 e.keyCode \u003c41){\n        if(e.type === \"keydown\"){\n            bitField |= KEY_BITS[e.keyCode - 37];\n        }else{\n            bitField \u0026= KEY_MASKS[e.keyCode - 37];\n        }\n    }    \n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var bitField = 0;  // the value to hold the bits\nconst KEY_BITS = [4,1,8,2]; // left up right down\nconst KEY_MASKS = [0b1011,0b1110,0b0111,0b1101]; // left up right down\nwindow.onkeydown = window.onkeyup = function (e) {\n    if(e.keyCode \u003e= 37 \u0026\u0026 e.keyCode \u003c41){\n        if(e.type === \"keydown\"){\n            bitField |= KEY_BITS[e.keyCode - 37];\n        }else{\n            bitField \u0026= KEY_MASKS[e.keyCode - 37];\n        }\n    }    \n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096194,
        "id": "b011d497-ccca-489c-b14b-1f9b8c414fb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096194,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example reading as an array"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example reading as an array"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096194,
        "id": "d100bc96-ccec-417d-a85e-8bebcd2f3323",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550870580000,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var directionState = [false,false,false,false];\nwindow.onkeydown = window.onkeyup = function (e) {\n    if (e.keyCode \u003e= 37 \u0026\u0026 e.keyCode \u003c41){\n        directionState[e.keyCode - 37] = e.type === \"keydown\";\n    }    \n}"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "var directionState = [false,false,false,false];\nwindow.onkeydown = window.onkeyup = function (e) {\n    if (e.keyCode \u003e= 37 \u0026\u0026 e.keyCode \u003c41){\n        directionState[e.keyCode - 37] = e.type === \"keydown\";\n    }    \n}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096194,
        "id": "57435d79-32d8-45d2-9292-dbeef6f87f77",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096194,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To turn on a bit use bitwise "
            ],
            [
              "or",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the value corresponding to the bit. So if you wish to set the 2nd bit "
            ],
            [
              "bitField |= 0b10",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will turn it on. If you wish to turn a bit off use bitwise "
            ],
            [
              "and",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with a value that has all by the required bit on. Using 4 bits and turning the 2nd bit off "
            ],
            [
              "bitfield \u0026= 0b1101;",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To turn on a bit use bitwise "
          },
          {
            "Text": "or",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " and the value corresponding to the bit. So if you wish to set the 2nd bit "
          },
          {
            "Text": "bitField |= 0b10",
            "AttrFlags": 2
          },
          {
            "Text": " will turn it on. If you wish to turn a bit off use bitwise "
          },
          {
            "Text": "and",
            "AttrFlags": 4
          },
          {
            "Text": " "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " with a value that has all by the required bit on. Using 4 bits and turning the 2nd bit off "
          },
          {
            "Text": "bitfield \u0026= 0b1101;",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "6540db33-bdd7-4426-ac48-ef67dbef0981",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096195,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You may say the above example seems a lot more complex than assigning the various key states to a array. Yes It is a little more complex to set but the advantage comes when interrogating the state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You may say the above example seems a lot more complex than assigning the various key states to a array. Yes It is a little more complex to set but the advantage comes when interrogating the state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "bffebad4-a757-4eb0-b730-ac21ee1dac56",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096195,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you want to test if all keys are up."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you want to test if all keys are up."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "ab88ebc1-1938-465d-9650-c4c54e653a8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550870580000,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// as bit field\nif(!bitfield) // no keys are on\n\n// as array test each item in array\nif(!(directionState[0] \u0026\u0026 directionState[1] \u0026\u0026 directionState[2] \u0026\u0026 directionState[3])){"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// as bit field\nif(!bitfield) // no keys are on\n\n// as array test each item in array\nif(!(directionState[0] \u0026\u0026 directionState[1] \u0026\u0026 directionState[2] \u0026\u0026 directionState[3])){",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "ecc33b7e-575d-402e-88a8-1be819e7554a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096195,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can set some constants to make things easier"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can set some constants to make things easier"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "89fdcff8-fa44-42e2-88ba-ac7a19c716d2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550870580000,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// postfix U,D,L,R for Up down left right\nconst KEY_U = 1;\nconst KEY_D = 2;\nconst KEY_L = 4;\nconst KEY_R = 8;\nconst KEY_UL = KEY_U + KEY_L; // up left\nconst KEY_UR = KEY_U + KEY_R; // up Right\nconst KEY_DL = KEY_D + KEY_L; // down left\nconst KEY_DR = KEY_D + KEY_R; // down right"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// postfix U,D,L,R for Up down left right\nconst KEY_U = 1;\nconst KEY_D = 2;\nconst KEY_L = 4;\nconst KEY_R = 8;\nconst KEY_UL = KEY_U + KEY_L; // up left\nconst KEY_UR = KEY_U + KEY_R; // up Right\nconst KEY_DL = KEY_D + KEY_L; // down left\nconst KEY_DR = KEY_D + KEY_R; // down right",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "66f3d775-573a-43e8-b8e2-a45570f50e06",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096195,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can then quickly test for many various keyboard states"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can then quickly test for many various keyboard states"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096195,
        "id": "80925533-03f4-447c-8f6c-f3cfcdc533b7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550870580000,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "if ((bitfield \u0026 KEY_UL) === KEY_UL) { // is UP and LEFT only down\nif (bitfield  \u0026 KEY_UL) {             // is Up left down \nif ((bitfield \u0026 KEY_U) === KEY_U) {   // is Up only down\nif (bitfield \u0026 KEY_U) {               // is Up down (any other key may be down)\nif (!(bitfield \u0026 KEY_U)) {            // is Up up (any other key may be down)\nif (!bitfield ) {                     // no keys are down\nif (bitfield ) {                      // any one or more keys are down"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "if ((bitfield \u0026 KEY_UL) === KEY_UL) { // is UP and LEFT only down\nif (bitfield  \u0026 KEY_UL) {             // is Up left down \nif ((bitfield \u0026 KEY_U) === KEY_U) {   // is Up only down\nif (bitfield \u0026 KEY_U) {               // is Up down (any other key may be down)\nif (!(bitfield \u0026 KEY_U)) {            // is Up up (any other key may be down)\nif (!bitfield ) {                     // no keys are down\nif (bitfield ) {                      // any one or more keys are down",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715096196,
        "id": "1c5e7674-fab8-4ab3-a3a0-577e8d50555d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715096196,
        "parent_id": "461afc74-94e9-4e48-a5a5-59ff228e681c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The keyboard input is just one example. Bitfields are useful when you have various states that must in combination be acted on. Javascript can use upto 32 bits for a bit field. Using them can offer significant performance increases. They are worth being familiar with."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The keyboard input is just one example. Bitfields are useful when you have various states that must in combination be acted on. Javascript can use upto 32 bits for a bit field. Using them can offer significant performance increases. They are worth being familiar with."
          }
        ]
      }
    ],
    "title": "Bit fields to optimize comparison of multi state data",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}