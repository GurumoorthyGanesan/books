{
  "ID": "716d83aa-693b-4702-9a76-a4921e303700",
  "Root": {
    "alive": true,
    "content": [
      "99940386-5f9b-4365-808e-dfec9a224638",
      "6834cc3e-935d-423a-bce9-89ec41a7e5ac",
      "9b9b107c-aee1-4c77-9ecc-d8aee97bb536",
      "c5f13a32-6a8f-4ee1-bf2e-eb542026b950",
      "7477a263-db48-4519-ac2c-60b809ae67f9",
      "8785bafb-22a5-4dc7-ad47-d25dd4a340b4",
      "e339b37b-6b2e-4fbf-95d5-aff755017143",
      "7c087877-b859-4565-a4ce-6b3015340aa9",
      "1fd6ed5e-60fe-40d6-8d32-581336afe70c",
      "7c0fd060-d82f-46de-b5aa-437249ecd304",
      "b68cabc5-f2c8-4757-8497-e80b41d57029",
      "58d9ff04-5648-4559-8333-9fc3b6a9d37a",
      "d6ad3b06-4289-4004-9b1c-a47763e370fb",
      "08251105-c9ba-4468-8b5c-caa6a6daa382",
      "f007602c-51ad-4815-a2ae-eb9a3638babf",
      "1afdb8a4-619a-4de6-b05e-48aa9d34b460",
      "1bbb37f1-7cc0-4228-8204-6fc1e8b295ed",
      "8b863ab5-4d8a-4161-9105-654e4915bef3",
      "09f88722-aa2c-4639-856a-7aeb38b59e59",
      "e746161d-74bf-45c8-97fe-0455311bd1cd",
      "1a8d7b49-6ec2-4ccf-88d0-e5d970a35b70",
      "48d5cc32-47c0-438b-af1e-5548c340af26",
      "10aa4f55-afaf-4d0b-9cd7-71c873a06656",
      "cddba574-cb39-414a-979d-2a635dfc522c",
      "f0281bf2-3dfc-4951-b197-8161a7dbb941",
      "e2146df8-db93-4cf8-aed8-76480c212c08",
      "2b832caf-b0a7-4d49-9045-5eceaf8c10eb",
      "2733f09c-5357-4620-a900-4315b2d82db7"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715413269,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "716d83aa-693b-4702-9a76-a4921e303700",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551341400000,
    "parent_id": "e0d3f5dc-ee20-4e4b-b0e0-1084a18748fd",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "JSON versus JavaScript literals"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413259,
        "id": "99940386-5f9b-4365-808e-dfec9a224638",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413259,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "JSON stands for “JavaScript Object Notation”, but it’s not JavaScript. Think of it as just a "
            ],
            [
              "data serialization format",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " that "
            ],
            [
              "happens",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " to be directly usable as a JavaScript literal. However, it is not advisable to directly run (i.e. through "
            ],
            [
              "eval()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") JSON that is fetched from an external source. Functionally, JSON isn’t very different from XML or YAML – some confusion can be avoided if JSON is just imagined as some serialization format that looks very much like JavaScript."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "JSON stands for “JavaScript Object Notation”, but it’s not JavaScript. Think of it as just a "
          },
          {
            "Text": "data serialization format",
            "AttrFlags": 4
          },
          {
            "Text": " that "
          },
          {
            "Text": "happens",
            "AttrFlags": 4
          },
          {
            "Text": " to be directly usable as a JavaScript literal. However, it is not advisable to directly run (i.e. through "
          },
          {
            "Text": "eval()",
            "AttrFlags": 2
          },
          {
            "Text": ") JSON that is fetched from an external source. Functionally, JSON isn’t very different from XML or YAML – some confusion can be avoided if JSON is just imagined as some serialization format that looks very much like JavaScript."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413261,
        "id": "6834cc3e-935d-423a-bce9-89ec41a7e5ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413261,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Even though the name implies just objects, and even though the majority of use cases through some kind of API always happen to be objects and arrays, JSON is not for just objects or arrays. The following primitive types are supported:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Even though the name implies just objects, and even though the majority of use cases through some kind of API always happen to be objects and arrays, JSON is not for just objects or arrays. The following primitive types are supported:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413262,
        "id": "9b9b107c-aee1-4c77-9ecc-d8aee97bb536",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413262,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "String (e.g. "
            ],
            [
              "\"Hello World!\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "String (e.g. "
          },
          {
            "Text": "\"Hello World!\"",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413262,
        "id": "c5f13a32-6a8f-4ee1-bf2e-eb542026b950",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413262,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Number (e.g. "
            ],
            [
              "42",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Number (e.g. "
          },
          {
            "Text": "42",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413263,
        "id": "7477a263-db48-4519-ac2c-60b809ae67f9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413263,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Boolean (e.g. "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "Boolean (e.g. "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413266,
        "id": "8785bafb-22a5-4dc7-ad47-d25dd4a340b4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413266,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The value "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "The value "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413266,
        "id": "e339b37b-6b2e-4fbf-95d5-aff755017143",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413266,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "undefined",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is not supported in the sense that an undefined property will be omitted from JSON upon serialization. Therefore, there is no way to deserialize JSON and end up with a property whose value is "
            ],
            [
              "undefined",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "undefined",
            "AttrFlags": 2
          },
          {
            "Text": " is not supported in the sense that an undefined property will be omitted from JSON upon serialization. Therefore, there is no way to deserialize JSON and end up with a property whose value is "
          },
          {
            "Text": "undefined",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413266,
        "id": "7c087877-b859-4565-a4ce-6b3015340aa9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413266,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The string "
            ],
            [
              "\"42\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is valid JSON. JSON doesn’t always have to have an outer envelope of "
            ],
            [
              "\"{...}\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "\"[...]\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The string "
          },
          {
            "Text": "\"42\"",
            "AttrFlags": 2
          },
          {
            "Text": " is valid JSON. JSON doesn’t always have to have an outer envelope of "
          },
          {
            "Text": "\"{...}\"",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "\"[...]\"",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413266,
        "id": "1fd6ed5e-60fe-40d6-8d32-581336afe70c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413266,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "While nome JSON is also valid JavaScript and some JavaScript is also valid JSON, there are some subtle differences between both languages and neither language is a subset of the other."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "While nome JSON is also valid JavaScript and some JavaScript is also valid JSON, there are some subtle differences between both languages and neither language is a subset of the other."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413266,
        "id": "7c0fd060-d82f-46de-b5aa-437249ecd304",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413266,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Take the following JSON string as an example:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Take the following JSON string as an example:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413266,
        "id": "b68cabc5-f2c8-4757-8497-e80b41d57029",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "{\"color\": \"blue\"}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "{\"color\": \"blue\"}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "58d9ff04-5648-4559-8333-9fc3b6a9d37a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413267,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be directly inserted into JavaScript. It will be syntactically valid and will yield the correct value:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be directly inserted into JavaScript. It will be syntactically valid and will yield the correct value:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "d6ad3b06-4289-4004-9b1c-a47763e370fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "const skin = {\"color\": \"blue\"};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const skin = {\"color\": \"blue\"};",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "08251105-c9ba-4468-8b5c-caa6a6daa382",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413267,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "However, we know that “color” is a valid identifier name and the quotes around the property name can be omitted:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "However, we know that “color” is a valid identifier name and the quotes around the property name can be omitted:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "f007602c-51ad-4815-a2ae-eb9a3638babf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "const skin = {color: \"blue\"};"
            ]
          ]
        },
        "type": "code",
        "version": 4,
        "code": "const skin = {color: \"blue\"};",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "1afdb8a4-619a-4de6-b05e-48aa9d34b460",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413267,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We also know that we can use single quotes instead of double quotes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We also know that we can use single quotes instead of double quotes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "1bbb37f1-7cc0-4228-8204-6fc1e8b295ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "const skin = {'color': 'blue'};"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const skin = {'color': 'blue'};",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "8b863ab5-4d8a-4161-9105-654e4915bef3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413267,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But, if we were to take both of these literals and treat them as JSON, "
            ],
            [
              "neither will be syntactically valid",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " JSON:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But, if we were to take both of these literals and treat them as JSON, "
          },
          {
            "Text": "neither will be syntactically valid",
            "AttrFlags": 1
          },
          {
            "Text": " JSON:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413267,
        "id": "09f88722-aa2c-4639-856a-7aeb38b59e59",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "{color: \"blue\"}\n{'color': 'blue'}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "{color: \"blue\"}\n{'color': 'blue'}",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "e746161d-74bf-45c8-97fe-0455311bd1cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413268,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "JSON strictly requires all property names to be double quoted and string values to be double quoted as well."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "JSON strictly requires all property names to be double quoted and string values to be double quoted as well."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "1a8d7b49-6ec2-4ccf-88d0-e5d970a35b70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413268,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s common for JSON-newcomers to attempt to use code excerpts with JavaScript literals as JSON, and scratch their heads about the syntax errors they are getting from the JSON parser."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s common for JSON-newcomers to attempt to use code excerpts with JavaScript literals as JSON, and scratch their heads about the syntax errors they are getting from the JSON parser."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "48d5cc32-47c0-438b-af1e-5548c340af26",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413268,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More confusion starts arising when "
            ],
            [
              "incorrect terminology",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              " is applied in code or in conversation."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More confusion starts arising when "
          },
          {
            "Text": "incorrect terminology",
            "AttrFlags": 4
          },
          {
            "Text": " is applied in code or in conversation."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "10aa4f55-afaf-4d0b-9cd7-71c873a06656",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413268,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A common anti-pattern is to name variables that hold non-JSON values as “json”:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A common anti-pattern is to name variables that hold non-JSON values as “json”:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "cddba574-cb39-414a-979d-2a635dfc522c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "fetch(url).then(function (response) {\n  const json = JSON.parse(response.data); // Confusion ensues!\n\n  // We're done with the notion of \"JSON\" at this point,\n  // but the concept stuck with the variable name.\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "fetch(url).then(function (response) {\n  const json = JSON.parse(response.data); // Confusion ensues!\n\n  // We're done with the notion of \"JSON\" at this point,\n  // but the concept stuck with the variable name.\n});",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "f0281bf2-3dfc-4951-b197-8161a7dbb941",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413268,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example, "
            ],
            [
              "response.data",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is a JSON string that is returned by some API. JSON stops at the HTTP response domain. The variable with the “json” misnomer holds just a JavaScript value (could be an object, an array, or even a simple number!)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example, "
          },
          {
            "Text": "response.data",
            "AttrFlags": 2
          },
          {
            "Text": " is a JSON string that is returned by some API. JSON stops at the HTTP response domain. The variable with the “json” misnomer holds just a JavaScript value (could be an object, an array, or even a simple number!)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "e2146df8-db93-4cf8-aed8-76480c212c08",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413268,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A less confusing way to write the above is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A less confusing way to write the above is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413268,
        "id": "2b832caf-b0a7-4d49-9045-5eceaf8c10eb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551341400000,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "fetch(url).then(function (response) {\n  const value = JSON.parse(response.data);\n\n  // We're done with the notion of \"JSON\" at this point.\n  // You don't talk about JSON after parsing JSON.\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "fetch(url).then(function (response) {\n  const value = JSON.parse(response.data);\n\n  // We're done with the notion of \"JSON\" at this point.\n  // You don't talk about JSON after parsing JSON.\n});",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715413269,
        "id": "2733f09c-5357-4620-a900-4315b2d82db7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715413269,
        "parent_id": "716d83aa-693b-4702-9a76-a4921e303700",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Developers also tend to throw the phrase “JSON object” around a lot. This also leads to confusion. Because as mentioned above, a JSON string doesn’t have to hold an object as a value. “JSON string” is a better term. Just like “XML string” or “YAML string”. You get a string, you parse it, and you end up with a value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Developers also tend to throw the phrase “JSON object” around a lot. This also leads to confusion. Because as mentioned above, a JSON string doesn’t have to hold an object as a value. “JSON string” is a better term. Just like “XML string” or “YAML string”. You get a string, you parse it, and you end up with a value."
          }
        ]
      }
    ],
    "title": "JSON versus JavaScript literals",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}