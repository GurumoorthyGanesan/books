{
  "ID": "76728cf7-80f0-4399-a183-74e41a762270",
  "Root": {
    "alive": true,
    "content": [
      "7b52bab5-6816-4009-bd46-d8394ecc7a0e",
      "bf8a9dba-c9d6-4600-ad05-0c5738caa8ad",
      "0c26ca80-8def-4a46-8895-07aa26491572",
      "a0151cc9-c4ba-4e8f-88ab-28674bfbcc40",
      "66569255-fca8-4d38-bd81-0267e85939bc",
      "96285378-b7e4-479c-8f69-ca30b5b7cf3a",
      "c35faae3-ed4b-4cd5-a386-15417a2f66cc",
      "e4b47465-79ad-4815-948a-59674e05308a"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550714986077,
    "id": "76728cf7-80f0-4399-a183-74e41a762270",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550714986077,
    "parent_id": "cd5e094d-a719-40d5-a8b3-87b712a9acb4",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "090 Array comparison"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986073,
        "id": "7b52bab5-6816-4009-bd46-d8394ecc7a0e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986073,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For simple array comparison you can use JSON stringify and compare the output strings:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For simple array comparison you can use JSON stringify and compare the output strings:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986076,
        "id": "bf8a9dba-c9d6-4600-ad05-0c5738caa8ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986076,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "JSON.stringify(array1) === JSON.stringify(array2)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "JSON.stringify(array1) === JSON.stringify(array2)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986076,
        "id": "0c26ca80-8def-4a46-8895-07aa26491572",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986076,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: that this will only work if both objects are JSON serializable and do not contain cyclic references. It may throw TypeError: Converting circular structure to JSON"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: that this will only work if both objects are JSON serializable and do not contain cyclic references. It may throw TypeError: Converting circular structure to JSON"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986076,
        "id": "a0151cc9-c4ba-4e8f-88ab-28674bfbcc40",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986076,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use a recursive function to compare arrays."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can use a recursive function to compare arrays."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986076,
        "id": "66569255-fca8-4d38-bd81-0267e85939bc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986076,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function compareArrays(array1, array2) { \n  var i, isA1, isA2;\n  isA1 = Array.isArray(array1);\n  isA2 = Array.isArray(array2);\n  \n  if (isA1 !== isA2) { // is one an array and the other not?\n    return false;      // yes then can not be the same\n  }\n  if (! (isA1 \u0026\u0026 isA2)) {      // Are both not arrays \n    return array1 === array2;  // return strict equality\n  }\n  if (array1.length !== array2.length) { // if lengths differ then can not be the same\n    return false;\n  }\n  // iterate arrays and compare them\n  for (i = 0; i \u003c array1.length; i += 1) {\n    if (!compareArrays(array1[i], array2[i])) { // Do items compare recursively\n      return false;\n    }           \n  }\n  return true; // must be equal\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function compareArrays(array1, array2) { \n  var i, isA1, isA2;\n  isA1 = Array.isArray(array1);\n  isA2 = Array.isArray(array2);\n  \n  if (isA1 !== isA2) { // is one an array and the other not?\n    return false;      // yes then can not be the same\n  }\n  if (! (isA1 \u0026\u0026 isA2)) {      // Are both not arrays \n    return array1 === array2;  // return strict equality\n  }\n  if (array1.length !== array2.length) { // if lengths differ then can not be the same\n    return false;\n  }\n  // iterate arrays and compare them\n  for (i = 0; i \u003c array1.length; i += 1) {\n    if (!compareArrays(array1[i], array2[i])) { // Do items compare recursively\n      return false;\n    }           \n  }\n  return true; // must be equal\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986076,
        "id": "96285378-b7e4-479c-8f69-ca30b5b7cf3a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986076,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "WARNING:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Using the above function is dangerous and should be wrapped in a "
            ],
            [
              "try",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "catch",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if you suspect there is a chance the array has cyclic references (a reference to an array that contains a reference to itself)"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "WARNING:",
            "AttrFlags": 1
          },
          {
            "Text": " Using the above function is dangerous and should be wrapped in a "
          },
          {
            "Text": "try",
            "AttrFlags": 2
          },
          {
            "Text": " "
          },
          {
            "Text": "catch",
            "AttrFlags": 2
          },
          {
            "Text": " if you suspect there is a chance the array has cyclic references (a reference to an array that contains a reference to itself)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986077,
        "id": "c35faae3-ed4b-4cd5-a386-15417a2f66cc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986077,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "a = [0] ;\na[1] = a;\nb = [0, a]; \ncompareArrays(a, b); // throws RangeError: Maximum call stack size exceeded"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "a = [0] ;\na[1] = a;\nb = [0, a]; \ncompareArrays(a, b); // throws RangeError: Maximum call stack size exceeded",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550714986077,
        "id": "e4b47465-79ad-4815-948a-59674e05308a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550714986077,
        "parent_id": "76728cf7-80f0-4399-a183-74e41a762270",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: The function uses the strict equality operator === to compare non array items {a: 0} === {a: 0} is false"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: The function uses the strict equality operator === to compare non array items {a: 0} === {a: 0} is false"
          }
        ]
      }
    ],
    "title": "090 Array comparison"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}