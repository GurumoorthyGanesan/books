{
  "ID": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
  "Root": {
    "alive": true,
    "content": [
      "f881acbc-248c-4e0d-80c4-3c11ebfafe95",
      "38015aab-9068-40b2-a2f6-445b51349603",
      "7783e785-7eed-4b92-86c8-6822845f6c68",
      "0bf55d09-962e-48e0-a8a4-ba47a9ab736e",
      "40c49134-3bcf-4416-b491-c3801eb47497",
      "21fb3e53-c436-45c2-805c-07c2c0781cae",
      "425a011f-f020-43ec-9ade-a06a57afba0b",
      "658ac93d-e4c2-4cd5-97c7-4b2f5a50bcf3",
      "2f58c7b4-4d11-489a-8026-80cab6a3cc11",
      "733287e3-8c33-4802-902a-b2b3f0ad41da",
      "b8845006-940e-4ceb-b7fa-3928f4aaff01",
      "581ebf6f-488d-4f77-ac42-e26e037cc91e",
      "9c84bc58-89ba-4bd0-9009-e76d13c5d4de"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715570641,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1552172280000,
    "parent_id": "06908f53-fe5f-48d5-bbaf-7077cac617c3",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Testing for NaN using isNaN"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570633,
        "id": "f881acbc-248c-4e0d-80c4-3c11ebfafe95",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570633,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "window.isNaN()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "window.isNaN()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570636,
        "id": "38015aab-9068-40b2-a2f6-445b51349603",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570636,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The global function "
            ],
            [
              "isNaN()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can be used to check if a certain value or expression evaluates to "
            ],
            [
              "NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This function (in short) first checks if the value is a number, if not tries to convert it (*), and then checks if the resulting value is "
            ],
            [
              "NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". For this reason, "
            ],
            [
              "this testing method may cause confusion",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The global function "
          },
          {
            "Text": "isNaN()",
            "AttrFlags": 2
          },
          {
            "Text": " can be used to check if a certain value or expression evaluates to "
          },
          {
            "Text": "NaN",
            "AttrFlags": 2
          },
          {
            "Text": ". This function (in short) first checks if the value is a number, if not tries to convert it (*), and then checks if the resulting value is "
          },
          {
            "Text": "NaN",
            "AttrFlags": 2
          },
          {
            "Text": ". For this reason, "
          },
          {
            "Text": "this testing method may cause confusion",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570638,
        "id": "7783e785-7eed-4b92-86c8-6822845f6c68",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570638,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "(*) The \"conversion\" method is not that simple, see "
            ],
            [
              "ECMA-262 18.2.3",
              [
                [
                  "a",
                  "http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number"
                ]
              ]
            ],
            [
              " for a detailed explanation of the algorithm."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "(*) The \"conversion\" method is not that simple, see "
          },
          {
            "Text": "ECMA-262 18.2.3",
            "Link": "http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number"
          },
          {
            "Text": " for a detailed explanation of the algorithm."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570638,
        "id": "0bf55d09-962e-48e0-a8a4-ba47a9ab736e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570638,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "These examples will help you better understand the "
            ],
            [
              "isNaN()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " behavior:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "These examples will help you better understand the "
          },
          {
            "Text": "isNaN()",
            "AttrFlags": 2
          },
          {
            "Text": " behavior:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570638,
        "id": "40c49134-3bcf-4416-b491-c3801eb47497",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570638,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "isNaN(NaN);          // true\nisNaN(1);            // false: 1 is a number\nisNaN(-2e-4);        // false: -2e-4 is a number (-0.0002) in scientific notation\nisNaN(Infinity);     // false: Infinity is a number\nisNaN(true);         // false: converted to 1, which is a number\nisNaN(false);        // false: converted to 0, which is a number\nisNaN(null);         // false: converted to 0, which is a number\nisNaN(\"\");           // false: converted to 0, which is a number\nisNaN(\" \");          // false: converted to 0, which is a number\nisNaN(\"45.3\");       // false: string representing a number, converted to 45.3\nisNaN(\"1.2e3\");      // false: string representing a number, converted to 1.2e3\nisNaN(\"Infinity\");   // false: string representing a number, converted to Infinity\nisNaN(new Date);     // false: Date object, converted to milliseconds since epoch\nisNaN(\"10$\");        // true : conversion fails, the dollar sign is not a digit\nisNaN(\"hello\");      // true : conversion fails, no digits at all\nisNaN(undefined);    // true : converted to NaN\nisNaN();             // true : converted to NaN (implicitly undefined)\nisNaN(function(){}); // true : conversion fails\nisNaN({});           // true : conversion fails\nisNaN([1, 2]);       // true : converted to \"1, 2\", which can't be converted to a number"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "isNaN(NaN);          // true\nisNaN(1);            // false: 1 is a number\nisNaN(-2e-4);        // false: -2e-4 is a number (-0.0002) in scientific notation\nisNaN(Infinity);     // false: Infinity is a number\nisNaN(true);         // false: converted to 1, which is a number\nisNaN(false);        // false: converted to 0, which is a number\nisNaN(null);         // false: converted to 0, which is a number\nisNaN(\"\");           // false: converted to 0, which is a number\nisNaN(\" \");          // false: converted to 0, which is a number\nisNaN(\"45.3\");       // false: string representing a number, converted to 45.3\nisNaN(\"1.2e3\");      // false: string representing a number, converted to 1.2e3\nisNaN(\"Infinity\");   // false: string representing a number, converted to Infinity\nisNaN(new Date);     // false: Date object, converted to milliseconds since epoch\nisNaN(\"10$\");        // true : conversion fails, the dollar sign is not a digit\nisNaN(\"hello\");      // true : conversion fails, no digits at all\nisNaN(undefined);    // true : converted to NaN\nisNaN();             // true : converted to NaN (implicitly undefined)\nisNaN(function(){}); // true : conversion fails\nisNaN({});           // true : conversion fails\nisNaN([1, 2]);       // true : converted to \"1, 2\", which can't be converted to a number",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570639,
        "id": "21fb3e53-c436-45c2-805c-07c2c0781cae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570639,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This last one is a bit tricky: checking if an "
            ],
            [
              "Array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is "
            ],
            [
              "NaN",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". To do this, the "
            ],
            [
              "Number()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " constructor first converts the array to a string, then to a number; this is the reason why "
            ],
            [
              "isNaN([])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "isNaN([34])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " both return "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", but "
            ],
            [
              "isNaN([1, 2])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "isNaN([true])",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " both return "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ": because they get converted to "
            ],
            [
              "\"\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\"34\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "\"1,2\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\"true\"",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " respectively. In general, "
            ],
            [
              "an array is considered ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "NaN",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " by ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "isNaN()",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " unless it only holds one element whose string representation can be converted to a valid number",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This last one is a bit tricky: checking if an "
          },
          {
            "Text": "Array",
            "AttrFlags": 2
          },
          {
            "Text": " is "
          },
          {
            "Text": "NaN",
            "AttrFlags": 2
          },
          {
            "Text": ". To do this, the "
          },
          {
            "Text": "Number()",
            "AttrFlags": 2
          },
          {
            "Text": " constructor first converts the array to a string, then to a number; this is the reason why "
          },
          {
            "Text": "isNaN([])",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "isNaN([34])",
            "AttrFlags": 2
          },
          {
            "Text": " both return "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": ", but "
          },
          {
            "Text": "isNaN([1, 2])",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "isNaN([true])",
            "AttrFlags": 2
          },
          {
            "Text": " both return "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ": because they get converted to "
          },
          {
            "Text": "\"\"",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\"34\"",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "\"1,2\"",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\"true\"",
            "AttrFlags": 2
          },
          {
            "Text": " respectively. In general, "
          },
          {
            "Text": "an array is considered ",
            "AttrFlags": 1
          },
          {
            "Text": "NaN",
            "AttrFlags": 3
          },
          {
            "Text": " by ",
            "AttrFlags": 1
          },
          {
            "Text": "isNaN()",
            "AttrFlags": 3
          },
          {
            "Text": " unless it only holds one element whose string representation can be converted to a valid number",
            "AttrFlags": 1
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570639,
        "id": "425a011f-f020-43ec-9ade-a06a57afba0b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570639,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "6"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "6"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570639,
        "id": "658ac93d-e4c2-4cd5-97c7-4b2f5a50bcf3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570639,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Number.isNaN()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Number.isNaN()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570640,
        "id": "2f58c7b4-4d11-489a-8026-80cab6a3cc11",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570640,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In ECMAScript 6, the "
            ],
            [
              "Number.isNaN()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function has been implemented primarily to avoid the problem of "
            ],
            [
              "window.isNaN()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " of forcefully converting the parameter to a number. "
            ],
            [
              "Number.isNaN()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", indeed, "
            ],
            [
              "doesn't try to convert",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the value to a number before testing. This also means that "
            ],
            [
              "only values of the type number, that are also ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "NaN",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              ", return ",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              "true",
              [
                [
                  "b"
                ],
                [
                  "c"
                ]
              ]
            ],
            [
              " (which basically means only "
            ],
            [
              "Number.isNaN(NaN)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In ECMAScript 6, the "
          },
          {
            "Text": "Number.isNaN()",
            "AttrFlags": 2
          },
          {
            "Text": " function has been implemented primarily to avoid the problem of "
          },
          {
            "Text": "window.isNaN()",
            "AttrFlags": 2
          },
          {
            "Text": " of forcefully converting the parameter to a number. "
          },
          {
            "Text": "Number.isNaN()",
            "AttrFlags": 2
          },
          {
            "Text": ", indeed, "
          },
          {
            "Text": "doesn't try to convert",
            "AttrFlags": 1
          },
          {
            "Text": " the value to a number before testing. This also means that "
          },
          {
            "Text": "only values of the type number, that are also ",
            "AttrFlags": 1
          },
          {
            "Text": "NaN",
            "AttrFlags": 3
          },
          {
            "Text": ", return ",
            "AttrFlags": 1
          },
          {
            "Text": "true",
            "AttrFlags": 3
          },
          {
            "Text": " (which basically means only "
          },
          {
            "Text": "Number.isNaN(NaN)",
            "AttrFlags": 2
          },
          {
            "Text": ")."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570641,
        "id": "733287e3-8c33-4802-902a-b2b3f0ad41da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570641,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "From "
            ],
            [
              "ECMA-262 20.1.2.4",
              [
                [
                  "a",
                  "http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "From "
          },
          {
            "Text": "ECMA-262 20.1.2.4",
            "Link": "http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570641,
        "id": "b8845006-940e-4ceb-b7fa-3928f4aaff01",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570641,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When the Number.isNaN is called with one argument number, the following steps are taken:If Type(number) is not Number, return false.If number is NaN, return true.Otherwise, return false."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "When the Number.isNaN is called with one argument number, the following steps are taken:If Type(number) is not Number, return false.If number is NaN, return true.Otherwise, return false."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570641,
        "id": "581ebf6f-488d-4f77-ac42-e26e037cc91e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715570641,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some examples:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some examples:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715570641,
        "id": "9c84bc58-89ba-4bd0-9009-e76d13c5d4de",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551594360000,
        "parent_id": "ccbc02eb-4aeb-4eed-afc5-c9bc98f3dee5",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "// The one and only \nNumber.isNaN(NaN);          // true\n\n// Numbers\nNumber.isNaN(1);            // false\nNumber.isNaN(-2e-4);        // false\nNumber.isNaN(Infinity);     // false\n\n// Values not of type number\nNumber.isNaN(true);         // false\nNumber.isNaN(false);        // false\nNumber.isNaN(null);         // false\nNumber.isNaN(\"\");           // false\nNumber.isNaN(\" \");          // false\nNumber.isNaN(\"45.3\");       // false\nNumber.isNaN(\"1.2e3\");      // false\nNumber.isNaN(\"Infinity\");   // false\nNumber.isNaN(new Date);     // false\nNumber.isNaN(\"10$\");        // false\nNumber.isNaN(\"hello\");      // false\nNumber.isNaN(undefined);    // false\nNumber.isNaN();             // false\nNumber.isNaN(function(){}); // false\nNumber.isNaN({});           // false\nNumber.isNaN([]);           // false\nNumber.isNaN([1]);          // false\nNumber.isNaN([1, 2]);       // false\nNumber.isNaN([true]);       // false"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// The one and only \nNumber.isNaN(NaN);          // true\n\n// Numbers\nNumber.isNaN(1);            // false\nNumber.isNaN(-2e-4);        // false\nNumber.isNaN(Infinity);     // false\n\n// Values not of type number\nNumber.isNaN(true);         // false\nNumber.isNaN(false);        // false\nNumber.isNaN(null);         // false\nNumber.isNaN(\"\");           // false\nNumber.isNaN(\" \");          // false\nNumber.isNaN(\"45.3\");       // false\nNumber.isNaN(\"1.2e3\");      // false\nNumber.isNaN(\"Infinity\");   // false\nNumber.isNaN(new Date);     // false\nNumber.isNaN(\"10$\");        // false\nNumber.isNaN(\"hello\");      // false\nNumber.isNaN(undefined);    // false\nNumber.isNaN();             // false\nNumber.isNaN(function(){}); // false\nNumber.isNaN({});           // false\nNumber.isNaN([]);           // false\nNumber.isNaN([1]);          // false\nNumber.isNaN([1, 2]);       // false\nNumber.isNaN([true]);       // false",
        "code_language": "JavaScript"
      }
    ],
    "title": "Testing for NaN using isNaN",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}