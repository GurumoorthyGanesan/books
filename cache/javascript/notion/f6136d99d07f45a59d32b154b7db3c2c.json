{
  "ID": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
  "Root": {
    "alive": true,
    "content": [
      "d7a73bc1-7363-44db-9c1a-084f59aaa140",
      "e5488d45-3b06-492e-b4ce-f6fb13036bc7",
      "a78846a7-14c5-4224-a802-e65d1fd83ec7",
      "9cbf3181-5511-4857-84e2-2e1195ee7593",
      "d3f5077b-2bbf-4615-8dd9-cc5a32deb5ae",
      "5dc1c1fc-5b2c-49ef-a058-92d29cb5beb8",
      "a326362c-04ef-42f0-b56f-f1a60fe2caa5",
      "6d3aa449-a518-4717-8c7f-7494db320878",
      "20f4a18d-724c-47c0-b2bf-d259873fe418",
      "9b126532-9b63-4777-800d-c9a7e3d106af",
      "17dbd229-255a-4413-a64e-a88cece271f6"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715423233,
    "id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550715423233,
    "parent_id": "d2331001-56b1-44a6-aa42-d1c266b59d1b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "010 Getting binary representation of an image file"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423230,
        "id": "d7a73bc1-7363-44db-9c1a-084f59aaa140",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423230,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example is inspired by "
            ],
            [
              "this question",
              [
                [
                  "a",
                  "http://stackoverflow.com/q/38334315/2271269"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example is inspired by "
          },
          {
            "Text": "this question",
            "Link": "http://stackoverflow.com/q/38334315/2271269"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423231,
        "id": "e5488d45-3b06-492e-b4ce-f6fb13036bc7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423231,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll assume you know how to "
            ],
            [
              "load a file using the File API",
              [
                [
                  "a",
                  "http://www.html5rocks.com/en/tutorials/file/dndfiles/"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll assume you know how to "
          },
          {
            "Text": "load a file using the File API",
            "Link": "http://www.html5rocks.com/en/tutorials/file/dndfiles/"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423231,
        "id": "a78846a7-14c5-4224-a802-e65d1fd83ec7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423231,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// preliminary code to handle getting local file and finally printing to console\n// the results of our function ArrayBufferToBinary().\nvar file = // get handle to local file.\nvar reader = new FileReader();\nreader.onload = function(event) {\n    var data = event.target.result;\n    console.log(ArrayBufferToBinary(data));\n};\nreader.readAsArrayBuffer(file); //gets an ArrayBuffer of the file"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// preliminary code to handle getting local file and finally printing to console\n// the results of our function ArrayBufferToBinary().\nvar file = // get handle to local file.\nvar reader = new FileReader();\nreader.onload = function(event) {\n    var data = event.target.result;\n    console.log(ArrayBufferToBinary(data));\n};\nreader.readAsArrayBuffer(file); //gets an ArrayBuffer of the file",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423232,
        "id": "9cbf3181-5511-4857-84e2-2e1195ee7593",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423232,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Now we perform the actual conversion of the file data into 1’s and 0’s using a "
            ],
            [
              "DataView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Now we perform the actual conversion of the file data into 1’s and 0’s using a "
          },
          {
            "Text": "DataView",
            "AttrFlags": 2
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423232,
        "id": "d3f5077b-2bbf-4615-8dd9-cc5a32deb5ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423232,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function ArrayBufferToBinary(buffer) {\n   // Convert an array buffer to a string bit-representation: 0 1 1 0 0 0...\n   var dataView = new DataView(buffer);\n   var response = \"\", offset = (8/8); \n   for(var i = 0; i \u003c dataView.byteLength; i += offset) {\n       response += dataView.getInt8(i).toString(2); \n   }\n   return response;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function ArrayBufferToBinary(buffer) {\n   // Convert an array buffer to a string bit-representation: 0 1 1 0 0 0...\n   var dataView = new DataView(buffer);\n   var response = \"\", offset = (8/8); \n   for(var i = 0; i \u003c dataView.byteLength; i += offset) {\n       response += dataView.getInt8(i).toString(2); \n   }\n   return response;\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423232,
        "id": "5dc1c1fc-5b2c-49ef-a058-92d29cb5beb8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423232,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "DataView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s let you read/write numeric data; "
            ],
            [
              "getInt8",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " converts the data from the byte position - here "
            ],
            [
              "0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", the value passed in - in the "
            ],
            [
              "ArrayBuffer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to signed 8-bit integer representation, and "
            ],
            [
              "toString(2)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " converts the 8-bit integer to binary representation format (i.e. a string of 1’s and 0’s)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "DataView",
            "AttrFlags": 2
          },
          {
            "Text": "s let you read/write numeric data; "
          },
          {
            "Text": "getInt8",
            "AttrFlags": 2
          },
          {
            "Text": " converts the data from the byte position - here "
          },
          {
            "Text": "0",
            "AttrFlags": 2
          },
          {
            "Text": ", the value passed in - in the "
          },
          {
            "Text": "ArrayBuffer",
            "AttrFlags": 2
          },
          {
            "Text": " to signed 8-bit integer representation, and "
          },
          {
            "Text": "toString(2)",
            "AttrFlags": 2
          },
          {
            "Text": " converts the 8-bit integer to binary representation format (i.e. a string of 1’s and 0’s)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423232,
        "id": "a326362c-04ef-42f0-b56f-f1a60fe2caa5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423232,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Files are saved as bytes. The ‘magic’ offset value is obtained by noting we are taking files stored as bytes i.e. as 8-bit integers and reading it in 8-bit integer representation. If we were trying to read our byte-saved (i.e. 8 bits) files to 32-bit integers, we would note that 32/8 = 4 is the number of byte spaces, which is our byte offset value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Files are saved as bytes. The ‘magic’ offset value is obtained by noting we are taking files stored as bytes i.e. as 8-bit integers and reading it in 8-bit integer representation. If we were trying to read our byte-saved (i.e. 8 bits) files to 32-bit integers, we would note that 32/8 = 4 is the number of byte spaces, which is our byte offset value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423232,
        "id": "6d3aa449-a518-4717-8c7f-7494db320878",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423232,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423233,
        "id": "20f4a18d-724c-47c0-b2bf-d259873fe418",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423233,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For this task, "
            ],
            [
              "DataView",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "s are overkill. They are typically used in cases where endianness or heterogeneity of data are encountered (e.g. in reading PDF files, which have headers encoded in different bases and we would like to meaningfully extract that value). Because we just want a textual representation, we do not care about heterogeneity as there is never a need to"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For this task, "
          },
          {
            "Text": "DataView",
            "AttrFlags": 2
          },
          {
            "Text": "s are overkill. They are typically used in cases where endianness or heterogeneity of data are encountered (e.g. in reading PDF files, which have headers encoded in different bases and we would like to meaningfully extract that value). Because we just want a textual representation, we do not care about heterogeneity as there is never a need to"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423233,
        "id": "9b126532-9b63-4777-800d-c9a7e3d106af",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423233,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A much better - and shorter - solution can be found using an "
            ],
            [
              "UInt8Array",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " typed array, which treats the entire "
            ],
            [
              "ArrayBuffer",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " as composed of unsigned 8-bit integers:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A much better - and shorter - solution can be found using an "
          },
          {
            "Text": "UInt8Array",
            "AttrFlags": 2
          },
          {
            "Text": " typed array, which treats the entire "
          },
          {
            "Text": "ArrayBuffer",
            "AttrFlags": 2
          },
          {
            "Text": " as composed of unsigned 8-bit integers:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715423233,
        "id": "17dbd229-255a-4413-a64e-a88cece271f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715423233,
        "parent_id": "f6136d99-d07f-45a5-9d32-b154b7db3c2c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "function ArrayBufferToBinary(buffer) {\n    var uint8 = new Uint8Array(buffer);\n    return uint8.reduce((binary, uint8) =\u003e binary + uint8.toString(2), \"\");\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "function ArrayBufferToBinary(buffer) {\n    var uint8 = new Uint8Array(buffer);\n    return uint8.reduce((binary, uint8) =\u003e binary + uint8.toString(2), \"\");\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "010 Getting binary representation of an image file"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}