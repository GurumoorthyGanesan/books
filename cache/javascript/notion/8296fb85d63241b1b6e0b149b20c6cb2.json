{
  "ID": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
  "Root": {
    "alive": true,
    "content": [
      "73e21fe5-062d-4bb5-8fe8-fa7e6a4011b6",
      "512bb0b6-1a63-451e-a3de-fd21c75b06db",
      "dad031b4-8421-432c-92fa-cd15129aa2b3",
      "3da1f16c-96db-4e5c-814c-c9b8e5ebb17d",
      "16a142ca-1306-4fdd-baad-31a6401fee81",
      "e4d377c7-5cd9-48f0-ae84-69ee21716c9a",
      "5921337d-eeae-4f81-ac83-9a9db51d23fb",
      "40612f18-e11c-468a-819e-cbd3299ce65c",
      "b3744fe8-b249-479f-ba91-f06e4cd064c4",
      "2319af68-e65d-4026-8947-d0fbfa117fd0",
      "19fb860a-2885-47d4-96bf-789a21ca162c",
      "586c9876-e47e-4daa-9218-fc6b9acca34e",
      "a91ca6b8-2c33-4d20-adac-b24df5969246",
      "3ee68dda-173a-4250-842f-3c7646b951f5",
      "90847538-5468-4ce6-998b-c8717a571992",
      "9a3ce1fb-d09f-4e73-b771-8e32c229f32f",
      "9975de1c-1d5b-4172-8ea4-9f2867e85864",
      "8e5520b9-d2bf-4036-a08c-487e18708cc0",
      "3a8af3ac-7185-4cb6-8e71-beddf346caa7",
      "1da96ed5-bdb8-4564-9c20-3b52eab9d311",
      "e29b0737-5c17-4c23-a6e1-7055320baa4a",
      "abaea689-e612-4811-ad3d-bcab727a8bf2",
      "9097de14-1a7f-4f89-9c23-33016f6de234",
      "0399de71-aa2d-48f0-8b74-1b09b8c24d34",
      "ff2c9918-5e89-4ba0-b680-730d50e233da",
      "e7eccef9-915d-434e-9094-e8e21d98fd45",
      "3eb696f0-7f13-4c35-b6ab-d84ac70c2937",
      "762eb7c4-27b5-4581-b32f-ef76e01a0369"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715074145,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550869320000,
    "parent_id": "521bee64-2ddd-4a12-939f-508459526ff2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Bitwise operators"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074138,
        "id": "73e21fe5-062d-4bb5-8fe8-fa7e6a4011b6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074138,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note that all bitwise operations operate on 32-bit integers by passing any operands to the internal function "
            ],
            [
              "ToInt32",
              [
                [
                  "a",
                  "http://www.ecma-international.org/ecma-262/6.0/#sec-toint32"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note that all bitwise operations operate on 32-bit integers by passing any operands to the internal function "
          },
          {
            "Text": "ToInt32",
            "Link": "http://www.ecma-international.org/ecma-262/6.0/#sec-toint32"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074138,
        "id": "512bb0b6-1a63-451e-a3de-fd21c75b06db",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074138,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise "
            ],
            [
              "or",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise "
          },
          {
            "Text": "or",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "dad031b4-8421-432c-92fa-cd15129aa2b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869260000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var a;\na = 0b0011 | 0b1010; // a === 0b1011\n// truth table\n// 1010 | (or)\n// 0011  \n// 1011  (result)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var a;\na = 0b0011 | 0b1010; // a === 0b1011\n// truth table\n// 1010 | (or)\n// 0011  \n// 1011  (result)",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "3da1f16c-96db-4e5c-814c-c9b8e5ebb17d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074139,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise "
            ],
            [
              "and",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise "
          },
          {
            "Text": "and",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "16a142ca-1306-4fdd-baad-31a6401fee81",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869260000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = 0b0011 \u0026 0b1010; // a === 0b0010\n// truth table\n// 1010 \u0026 (and)\n// 0011  \n// 0010  (result)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = 0b0011 \u0026 0b1010; // a === 0b0010\n// truth table\n// 1010 \u0026 (and)\n// 0011  \n// 0010  (result)",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "e4d377c7-5cd9-48f0-ae84-69ee21716c9a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074139,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "5921337d-eeae-4f81-ac83-9a9db51d23fb",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869260000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = ~0b0011; // a === 0b1100\n// truth table\n// 10 ~(not)\n// 01  (result)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = ~0b0011; // a === 0b1100\n// truth table\n// 10 ~(not)\n// 01  (result)",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "40612f18-e11c-468a-819e-cbd3299ce65c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074139,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise "
            ],
            [
              "xor",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " (exclusive or)"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise "
          },
          {
            "Text": "xor",
            "AttrFlags": 1
          },
          {
            "Text": " (exclusive or)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "b3744fe8-b249-479f-ba91-f06e4cd064c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869260000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = 0b1010 ^ 0b0011; // a === 0b1001\n// truth table\n// 1010 ^ (xor)\n// 0011  \n// 1001  (result)"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = 0b1010 ^ 0b0011; // a === 0b1001\n// truth table\n// 1010 ^ (xor)\n// 0011  \n// 1001  (result)",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "2319af68-e65d-4026-8947-d0fbfa117fd0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074139,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise "
            ],
            [
              "left shift",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise "
          },
          {
            "Text": "left shift",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074139,
        "id": "19fb860a-2885-47d4-96bf-789a21ca162c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869260000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = 0b0001 \u003c\u003c 1; // a === 0b0010\na = 0b0001 \u003c\u003c 2; // a === 0b0100\na = 0b0001 \u003c\u003c 3; // a === 0b1000"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = 0b0001 \u003c\u003c 1; // a === 0b0010\na = 0b0001 \u003c\u003c 2; // a === 0b0100\na = 0b0001 \u003c\u003c 3; // a === 0b1000",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "586c9876-e47e-4daa-9218-fc6b9acca34e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074140,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Shift left is equivalent to integer multiply by "
            ],
            [
              "Math.pow(2, n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". When doing integer math, shift can significantly improve the speed of some math operations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Shift left is equivalent to integer multiply by "
          },
          {
            "Text": "Math.pow(2, n)",
            "AttrFlags": 2
          },
          {
            "Text": ". When doing integer math, shift can significantly improve the speed of some math operations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "a91ca6b8-2c33-4d20-adac-b24df5969246",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869320000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "var n = 2;\nvar a = 5.4;\nvar result = (a \u003c\u003c n) === Math.floor(a) * Math.pow(2,n);\n// result is true\na = 5.4 \u003c\u003c n; // 20"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "var n = 2;\nvar a = 5.4;\nvar result = (a \u003c\u003c n) === Math.floor(a) * Math.pow(2,n);\n// result is true\na = 5.4 \u003c\u003c n; // 20",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "3ee68dda-173a-4250-842f-3c7646b951f5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074140,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise "
            ],
            [
              "right shift",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (Sign-propagating shift) "
            ],
            [
              "\u003e\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (Zero-fill right shift)"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise "
          },
          {
            "Text": "right shift",
            "AttrFlags": 1
          },
          {
            "Text": " "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " (Sign-propagating shift) "
          },
          {
            "Text": "\u003e\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " (Zero-fill right shift)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "90847538-5468-4ce6-998b-c8717a571992",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869320000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = 0b1001 \u003e\u003e 1; // a === 0b0100\na = 0b1001 \u003e\u003e 2; // a === 0b0010\na = 0b1001 \u003e\u003e 3; // a === 0b0001\n\na = 0b1001 \u003e\u003e\u003e 1; // a === 0b0100\na = 0b1001 \u003e\u003e\u003e 2; // a === 0b0010\na = 0b1001 \u003e\u003e\u003e 3; // a === 0b0001"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = 0b1001 \u003e\u003e 1; // a === 0b0100\na = 0b1001 \u003e\u003e 2; // a === 0b0010\na = 0b1001 \u003e\u003e 3; // a === 0b0001\n\na = 0b1001 \u003e\u003e\u003e 1; // a === 0b0100\na = 0b1001 \u003e\u003e\u003e 2; // a === 0b0010\na = 0b1001 \u003e\u003e\u003e 3; // a === 0b0001",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "9a3ce1fb-d09f-4e73-b771-8e32c229f32f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074140,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A negative 32bit value always has the left most bit on:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A negative 32bit value always has the left most bit on:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "9975de1c-1d5b-4172-8ea4-9f2867e85864",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869320000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = 0b11111111111111111111111111110111 | 0;   \nconsole.log(a); // -9\nb = a \u003e\u003e 2;     // leftmost bit is shifted 1 to the right then new left most bit is set to on (1)\nconsole.log(b); // -3\nb = a \u003e\u003e\u003e 2;    // leftmost bit is shifted 1 to the right. the new left most bit is set to off (0)\nconsole.log(b); // 2147483643"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = 0b11111111111111111111111111110111 | 0;   \nconsole.log(a); // -9\nb = a \u003e\u003e 2;     // leftmost bit is shifted 1 to the right then new left most bit is set to on (1)\nconsole.log(b); // -3\nb = a \u003e\u003e\u003e 2;    // leftmost bit is shifted 1 to the right. the new left most bit is set to off (0)\nconsole.log(b); // 2147483643",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074140,
        "id": "8e5520b9-d2bf-4036-a08c-487e18708cc0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074140,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of a "
            ],
            [
              "\u003e\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operation is always positive."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of a "
          },
          {
            "Text": "\u003e\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " operation is always positive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "3a8af3ac-7185-4cb6-8e71-beddf346caa7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074141,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The result of a "
            ],
            [
              "\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is always the same sign as the shifted value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The result of a "
          },
          {
            "Text": "\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": " is always the same sign as the shifted value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "1da96ed5-bdb8-4564-9c20-3b52eab9d311",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074141,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Right shift on positive numbers is the equivalent of dividing by the "
            ],
            [
              "Math.pow(2,n)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and flooring the result:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Right shift on positive numbers is the equivalent of dividing by the "
          },
          {
            "Text": "Math.pow(2,n)",
            "AttrFlags": 2
          },
          {
            "Text": " and flooring the result:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "e29b0737-5c17-4c23-a6e1-7055320baa4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869320000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = 256.67;\nn = 4;\nresult = (a \u003e\u003e n) === Math.floor( Math.floor(a) / Math.pow(2,n) );\n// result is true\na = a \u003e\u003e n; //  16\n\nresult = (a \u003e\u003e\u003e n) === Math.floor( Math.floor(a) / Math.pow(2,n) );\n// result is true\na = a \u003e\u003e\u003e n; //  16"
            ]
          ]
        },
        "type": "code",
        "version": 6,
        "code": "a = 256.67;\nn = 4;\nresult = (a \u003e\u003e n) === Math.floor( Math.floor(a) / Math.pow(2,n) );\n// result is true\na = a \u003e\u003e n; //  16\n\nresult = (a \u003e\u003e\u003e n) === Math.floor( Math.floor(a) / Math.pow(2,n) );\n// result is true\na = a \u003e\u003e\u003e n; //  16",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "abaea689-e612-4811-ad3d-bcab727a8bf2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074141,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Right shift zero fill ("
            ],
            [
              "\u003e\u003e\u003e",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") on negative numbers is different. As JavaScript does not convert to unsigned ints when doing bit operations there is no operational equivalent:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Right shift zero fill ("
          },
          {
            "Text": "\u003e\u003e\u003e",
            "AttrFlags": 2
          },
          {
            "Text": ") on negative numbers is different. As JavaScript does not convert to unsigned ints when doing bit operations there is no operational equivalent:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "9097de14-1a7f-4f89-9c23-33016f6de234",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869320000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a = -256.67;\nresult = (a \u003e\u003e\u003e n) === Math.floor( Math.floor(a) / Math.pow(2,n) );\n// result is false"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a = -256.67;\nresult = (a \u003e\u003e\u003e n) === Math.floor( Math.floor(a) / Math.pow(2,n) );\n// result is false",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "0399de71-aa2d-48f0-8b74-1b09b8c24d34",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074141,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Bitwise assignment operators"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Bitwise assignment operators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074141,
        "id": "ff2c9918-5e89-4ba0-b680-730d50e233da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074141,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With the exception of not ("
            ],
            [
              "~",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") all the above bitwise operators can be used as assignment operators:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "With the exception of not ("
          },
          {
            "Text": "~",
            "AttrFlags": 2
          },
          {
            "Text": ") all the above bitwise operators can be used as assignment operators:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074142,
        "id": "e7eccef9-915d-434e-9094-e8e21d98fd45",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550869320000,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "a |= b;   // same as: a = a | b;\na ^= b;   // same as: a = a ^ b;\na \u0026= b;   // same as: a = a \u0026 b;\na \u003e\u003e= b;  // same as: a = a \u003e\u003e b;\na \u003e\u003e\u003e= b; // same as: a = a \u003e\u003e\u003e b;\na \u003c\u003c= b;  // same as: a = a \u003c\u003c b;"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "a |= b;   // same as: a = a | b;\na ^= b;   // same as: a = a ^ b;\na \u0026= b;   // same as: a = a \u0026 b;\na \u003e\u003e= b;  // same as: a = a \u003e\u003e b;\na \u003e\u003e\u003e= b; // same as: a = a \u003e\u003e\u003e b;\na \u003c\u003c= b;  // same as: a = a \u003c\u003c b;",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074142,
        "id": "3eb696f0-7f13-4c35-b6ab-d84ac70c2937",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074142,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Warning",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Javascript uses Big Endian to store integers. This will not always match the Endian of the device/OS. When using typed arrays with bit lengths greater than 8 bits you should check if the environment is Little Endian or Big Endian before applying bitwise operations."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Warning",
            "AttrFlags": 1
          },
          {
            "Text": ": Javascript uses Big Endian to store integers. This will not always match the Endian of the device/OS. When using typed arrays with bit lengths greater than 8 bits you should check if the environment is Little Endian or Big Endian before applying bitwise operations."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715074144,
        "id": "762eb7c4-27b5-4581-b32f-ef76e01a0369",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715074144,
        "parent_id": "8296fb85-d632-41b1-b6e0-b149b20c6cb2",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Warning",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": Bitwise operators such as "
            ],
            [
              "\u0026",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "|",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the same as the logical operators "
            ],
            [
              "\u0026\u0026",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
                ]
              ]
            ],
            [
              " (and)",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "||",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
                ]
              ]
            ],
            [
              " (or)",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
                ]
              ]
            ],
            [
              ". They will provide incorrect results if used as logical operators. The "
            ],
            [
              "^",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " operator is "
            ],
            [
              "not",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the "
            ],
            [
              "power operator (",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/203/arithmetic-math/763/exponentiation-math-pow-or"
                ]
              ]
            ],
            [
              "ab",
              [
                [
                  "i"
                ],
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/203/arithmetic-math/763/exponentiation-math-pow-or"
                ]
              ]
            ],
            [
              ")",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/javascript/203/arithmetic-math/763/exponentiation-math-pow-or"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Warning",
            "AttrFlags": 1
          },
          {
            "Text": ": Bitwise operators such as "
          },
          {
            "Text": "\u0026",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "|",
            "AttrFlags": 2
          },
          {
            "Text": " are "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " the same as the logical operators "
          },
          {
            "Text": "\u0026\u0026",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
          },
          {
            "Text": " (and)",
            "Link": "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
          },
          {
            "Text": " and "
          },
          {
            "Text": "||",
            "AttrFlags": 2,
            "Link": "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
          },
          {
            "Text": " (or)",
            "Link": "http://stackoverflow.com/documentation/javascript/208/boolean-logic/779/logic-operators-with-booleans#t=201606101417337061178"
          },
          {
            "Text": ". They will provide incorrect results if used as logical operators. The "
          },
          {
            "Text": "^",
            "AttrFlags": 2
          },
          {
            "Text": " operator is "
          },
          {
            "Text": "not",
            "AttrFlags": 1
          },
          {
            "Text": " the "
          },
          {
            "Text": "power operator (",
            "Link": "http://stackoverflow.com/documentation/javascript/203/arithmetic-math/763/exponentiation-math-pow-or"
          },
          {
            "Text": "ab",
            "AttrFlags": 4,
            "Link": "http://stackoverflow.com/documentation/javascript/203/arithmetic-math/763/exponentiation-math-pow-or"
          },
          {
            "Text": ")",
            "Link": "http://stackoverflow.com/documentation/javascript/203/arithmetic-math/763/exponentiation-math-pow-or"
          },
          {
            "Text": "."
          }
        ]
      }
    ],
    "title": "Bitwise operators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 19
    }
  ],
  "Tables": null
}