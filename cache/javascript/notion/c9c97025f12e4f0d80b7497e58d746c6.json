{
  "ID": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
  "Root": {
    "alive": true,
    "content": [
      "acfd60c1-d691-4672-b5aa-e1fb6ac5a818",
      "5bb6acd9-8634-4975-9f05-8fd911e86465",
      "a102c89e-263b-412b-bae2-a371103d9d53",
      "165a3b92-0a81-4311-a2d1-404d6b8f26e9",
      "71d25f09-0bf3-4cf0-91ab-4c0c6ebaa769"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550715592315,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551593880000,
    "parent_id": "3776e702-7f6c-45eb-83d8-15379c3eb16b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Generating RSA key pair and converting to PEM format"
        ]
      ]
    },
    "type": "page",
    "version": 8,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715592312,
        "id": "acfd60c1-d691-4672-b5aa-e1fb6ac5a818",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715592312,
        "parent_id": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this example you will learn how to generate RSA-OAEP key pair and how to convert private key from this key pair to base64 so you can use it with OpenSSL etc. Please note that this process can also be used for public key you just have to use prefix and suffix below:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this example you will learn how to generate RSA-OAEP key pair and how to convert private key from this key pair to base64 so you can use it with OpenSSL etc. Please note that this process can also be used for public key you just have to use prefix and suffix below:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715592315,
        "id": "5bb6acd9-8634-4975-9f05-8fd911e86465",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715592315,
        "parent_id": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "-----BEGIN PUBLIC KEY-----\n-----END PUBLIC KEY-----"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "-----BEGIN PUBLIC KEY-----\n-----END PUBLIC KEY-----",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715592315,
        "id": "a102c89e-263b-412b-bae2-a371103d9d53",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715592315,
        "parent_id": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE: This example is fully tested in these browsers: Chrome, Firefox, Opera, Vivaldi"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE: This example is fully tested in these browsers: Chrome, Firefox, Opera, Vivaldi"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715592315,
        "id": "165a3b92-0a81-4311-a2d1-404d6b8f26e9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551593880000,
        "parent_id": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "JavaScript"
            ]
          ],
          "title": [
            [
              "function arrayBufferToBase64(arrayBuffer) {\n    var byteArray = new Uint8Array(arrayBuffer);\n    var byteString = '';\n    for(var i=0; i \u003c byteArray.byteLength; i++) {\n        byteString += String.fromCharCode(byteArray[i]);\n    }\n    var b64 = window.btoa(byteString);\n\n    return b64;\n}\n\nfunction addNewLines(str) {\n    var finalString = '';\n    while(str.length \u003e 0) {\n        finalString += str.substring(0, 64) + '\\n';\n        str = str.substring(64);\n    }\n\n    return finalString;\n}\n\nfunction toPem(privateKey) {\n    var b64 = addNewLines(arrayBufferToBase64(privateKey));\n    var pem = \"-----BEGIN PRIVATE KEY-----\\n\" + b64 + \"-----END PRIVATE KEY-----\";\n    \n    return pem;\n}\n\n// Let's generate the key pair first\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"RSA-OAEP\",\n        modulusLength: 2048, // can be 1024, 2048 or 4096\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: \"SHA-256\"} // or SHA-512\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n).then(function(keyPair) {\n    /* now when the key pair is generated we are going\n       to export it from the keypair object in pkcs8\n    */\n    window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        keyPair.privateKey\n    ).then(function(exportedPrivateKey) {\n        // converting exported private key to PEM format\n        var pem = toPem(exportedPrivateKey);\n        console.log(pem);\n    }).catch(function(err) {\n        console.log(err);\n    });\n});"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "function arrayBufferToBase64(arrayBuffer) {\n    var byteArray = new Uint8Array(arrayBuffer);\n    var byteString = '';\n    for(var i=0; i \u003c byteArray.byteLength; i++) {\n        byteString += String.fromCharCode(byteArray[i]);\n    }\n    var b64 = window.btoa(byteString);\n\n    return b64;\n}\n\nfunction addNewLines(str) {\n    var finalString = '';\n    while(str.length \u003e 0) {\n        finalString += str.substring(0, 64) + '\\n';\n        str = str.substring(64);\n    }\n\n    return finalString;\n}\n\nfunction toPem(privateKey) {\n    var b64 = addNewLines(arrayBufferToBase64(privateKey));\n    var pem = \"-----BEGIN PRIVATE KEY-----\\n\" + b64 + \"-----END PRIVATE KEY-----\";\n    \n    return pem;\n}\n\n// Let's generate the key pair first\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"RSA-OAEP\",\n        modulusLength: 2048, // can be 1024, 2048 or 4096\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: \"SHA-256\"} // or SHA-512\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n).then(function(keyPair) {\n    /* now when the key pair is generated we are going\n       to export it from the keypair object in pkcs8\n    */\n    window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        keyPair.privateKey\n    ).then(function(exportedPrivateKey) {\n        // converting exported private key to PEM format\n        var pem = toPem(exportedPrivateKey);\n        console.log(pem);\n    }).catch(function(err) {\n        console.log(err);\n    });\n});",
        "code_language": "JavaScript"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550715592315,
        "id": "71d25f09-0bf3-4cf0-91ab-4c0c6ebaa769",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550715592315,
        "parent_id": "c9c97025-f12e-4f0d-80b7-497e58d746c6",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That’s it! Now you have a fully working and compatiable RSA-OAEP Private Key in PEM format which you can use whereever you want. Enjoy!"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That’s it! Now you have a fully working and compatiable RSA-OAEP Private Key in PEM format which you can use whereever you want. Enjoy!"
          }
        ]
      }
    ],
    "title": "Generating RSA key pair and converting to PEM format",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}