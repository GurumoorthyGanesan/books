{
  "ID": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
  "Root": {
    "alive": true,
    "content": [
      "c48c64ef-f19b-4aa5-b96d-c7174847ee60",
      "84135ce6-234b-4084-9743-1b0e3e8eb05a",
      "0a0561b9-1d91-422d-a533-188f6e748716",
      "e2b350e0-72fd-46fa-84d8-3265c03bd1bd",
      "97f0cbcb-8feb-45b1-8e3f-232274e512da",
      "a129f36d-2b7c-4274-b413-beb63bbb76c3",
      "254c3f5e-013b-4ac4-880f-b0496ad2a340",
      "dc41d98a-42b9-4099-9f4d-02a71deb3838",
      "5a7cd77c-7bbe-420d-80fa-385385084061",
      "68e57efd-3a55-4678-be56-a39f03562c92",
      "bbd6ded6-48c1-4bce-8afe-996db0841bde",
      "aff4b606-35de-4dce-8e37-cf2c743143ba",
      "99878c82-4b38-4431-a4ea-c6cab45787c2",
      "284602c6-33b1-4c47-bb62-370673467798",
      "6a94405c-d65a-45ef-ace4-df81587416dd",
      "e1ba78b8-f6b5-4fcd-a21d-1fb199cfb2e5",
      "0b3053c0-77e3-4cd6-9b30-c103dd10030a",
      "ed39981f-14c5-4719-abb2-641976ab1824",
      "fcd484ef-8684-4ad1-ba05-5ab8cad4aa72"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716350616,
    "id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1550716350616,
    "parent_id": "1adc95eb-ee7c-4f85-b617-83245474b49a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "020 Identity Monad"
        ]
      ]
    },
    "type": "page",
    "version": 1,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350610,
        "id": "c48c64ef-f19b-4aa5-b96d-c7174847ee60",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350610,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is an example of an implementation of the identity monad in JavaScript, and could serve as a starting point to create other monads."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is an example of an implementation of the identity monad in JavaScript, and could serve as a starting point to create other monads."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350614,
        "id": "84135ce6-234b-4084-9743-1b0e3e8eb05a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350614,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Based on the "
            ],
            [
              "conference by Douglas Crockford on monads and gonads",
              [
                [
                  "a",
                  "https://www.youtube.com/watch?v=b0EF0VTs9Dc"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Based on the "
          },
          {
            "Text": "conference by Douglas Crockford on monads and gonads",
            "Link": "https://www.youtube.com/watch?v=b0EF0VTs9Dc"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350614,
        "id": "0a0561b9-1d91-422d-a533-188f6e748716",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350614,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using this approach reusing your functions will be easier because of the flexibility this monad provides, and composition nightmares:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using this approach reusing your functions will be easier because of the flexibility this monad provides, and composition nightmares:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350614,
        "id": "e2b350e0-72fd-46fa-84d8-3265c03bd1bd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350614,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "f(g(h(i(j(k(value), j1), i2), h1, h2), g1, g2), f1, f2)"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "f(g(h(i(j(k(value), j1), i2), h1, h2), g1, g2), f1, f2)",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "97f0cbcb-8feb-45b1-8e3f-232274e512da",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "readable, nice and clean:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "readable, nice and clean:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "a129f36d-2b7c-4274-b413-beb63bbb76c3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "identityMonad(value)\n    .bind(k)\n    .bind(j, j1, j2)\n    .bind(i, i2)\n    .bind(h, h1, h2)\n    .bind(g, g1, g2)\n    .bind(f, f1, f2);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "identityMonad(value)\n    .bind(k)\n    .bind(j, j1, j2)\n    .bind(i, i2)\n    .bind(h, h1, h2)\n    .bind(g, g1, g2)\n    .bind(f, f1, f2);",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "254c3f5e-013b-4ac4-880f-b0496ad2a340",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "—``` function identityMonad(value) { var monad = Object.create(null);"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "—``` function identityMonad(value) { var monad = Object.create(null);"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "dc41d98a-42b9-4099-9f4d-02a71deb3838",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// func should return a monad\nmonad.bind = function (func, ...args) {\n    return func(value, ...args);\n};\n\n// whatever func does, we get our monad back\nmonad.call = function (func, ...args) {\n    func(value, ...args);\n\n    return identityMonad(value);\n};\n\n// func doesn't have to know anything about monads\nmonad.apply = function (func, ...args) {\n    return identityMonad(func(value, ...args));\n};\n\n// Get the value wrapped in this monad\nmonad.value = function () {\n    return value;\n};\n\nreturn monad;"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// func should return a monad\nmonad.bind = function (func, ...args) {\n    return func(value, ...args);\n};\n\n// whatever func does, we get our monad back\nmonad.call = function (func, ...args) {\n    func(value, ...args);\n\n    return identityMonad(value);\n};\n\n// func doesn't have to know anything about monads\nmonad.apply = function (func, ...args) {\n    return identityMonad(func(value, ...args));\n};\n\n// Get the value wrapped in this monad\nmonad.value = function () {\n    return value;\n};\n\nreturn monad;",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "5a7cd77c-7bbe-420d-80fa-385385084061",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "};"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "};"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "68e57efd-3a55-4678-be56-a39f03562c92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "It works with primitive values"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "It works with primitive values",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "bbd6ded6-48c1-4bce-8afe-996db0841bde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "var value = ‘foo’, f = x =\u003e x + ’ changed’, g = x =\u003e x + ’ again’;"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "var value = ‘foo’, f = x =\u003e x + ’ changed’, g = x =\u003e x + ’ again’;"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "aff4b606-35de-4dce-8e37-cf2c743143ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "identityMonad(value) .apply(f) .apply(g) .bind(alert); // Alerts ‘foo changed again’"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "identityMonad(value) .apply(f) .apply(g) .bind(alert); // Alerts ‘foo changed again’"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "99878c82-4b38-4431-a4ea-c6cab45787c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "And also with objects"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "And also with objects",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350615,
        "id": "284602c6-33b1-4c47-bb62-370673467798",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350615,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "var value = { foo: ‘foo’ }, f = x =\u003e identityMonad(Object.assign(x, { foo: ‘bar’ })), g = x =\u003e Object.assign(x, { bar: ‘foo’ }), h = x =\u003e console.log(‘foo:’ + x.foo + ‘, bar:’ + x.bar);"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "var value = { foo: ‘foo’ }, f = x =\u003e identityMonad(Object.assign(x, { foo: ‘bar’ })), g = x =\u003e Object.assign(x, { bar: ‘foo’ }), h = x =\u003e console.log(‘foo:’ + x.foo + ‘, bar:’ + x.bar);"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350616,
        "id": "6a94405c-d65a-45ef-ace4-df81587416dd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350616,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "identityMonad(value) .bind(f) .apply(g) .bind(h); // Logs ‘foo: bar, bar: foo’"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "identityMonad(value) .bind(f) .apply(g) .bind(h); // Logs ‘foo: bar, bar: foo’"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350616,
        "id": "e1ba78b8-f6b5-4fcd-a21d-1fb199cfb2e5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350616,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "Let’s try everything:"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "Let’s try everything:",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350616,
        "id": "0b3053c0-77e3-4cd6-9b30-c103dd10030a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350616,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "var add = (x, …args) =\u003e x + args.reduce((r, n) =\u003e r + n, 0), multiply = (x, …args) =\u003e x * args.reduce((r, n) =\u003e r * n, 1), divideMonad = (x, …args) =\u003e identityMonad(x / multiply(…args)), log = x =\u003e console.log(x), substract = (x, …args) =\u003e x - add(…args);"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "var add = (x, …args) =\u003e x + args.reduce((r, n) =\u003e r + n, 0), multiply = (x, …args) =\u003e x * args.reduce((r, n) =\u003e r * n, 1), divideMonad = (x, …args) =\u003e identityMonad(x / multiply(…args)), log = x =\u003e console.log(x), substract = (x, …args) =\u003e x - add(…args);"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350616,
        "id": "ed39981f-14c5-4719-abb2-641976ab1824",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350616,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "identityMonad(100) .apply(add, 10, 29, 13) .apply(multiply, 2) .bind(divideMonad, 2) .apply(substract, 67, 34) .apply(multiply, 1239) .bind(divideMonad, 20, 54, 2) .apply(Math.round) .call(log); // Logs 29"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "identityMonad(100) .apply(add, 10, 29, 13) .apply(multiply, 2) .bind(divideMonad, 2) .apply(substract, 67, 34) .apply(multiply, 1239) .bind(divideMonad, 20, 54, 2) .apply(Math.round) .call(log); // Logs 29"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716350616,
        "id": "fcd484ef-8684-4ad1-ba05-5ab8cad4aa72",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716350616,
        "parent_id": "2a99c934-89b9-4f49-82d5-4790e7f37ea9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "```"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "```"
          }
        ]
      }
    ],
    "title": "020 Identity Monad"
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}