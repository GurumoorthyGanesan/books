{
  "ID": "5886cdb8-1a7f-4254-a424-55afd85b3630",
  "Root": {
    "alive": true,
    "content": [
      "3b226d36-174e-4b27-8d8a-08d0e06818f2",
      "b416b16f-bec2-43f0-b561-def3b80f5d5f",
      "5549b19b-43ef-40ec-a806-d9f355b5f9e6",
      "7d1cee3a-8cd6-410f-bd92-eeec3d86a9e4",
      "6d483871-cb60-4270-8c61-d3cae7d500a8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1550716476195,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5886cdb8-1a7f-4254-a424-55afd85b3630",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551683792917,
    "parent_id": "b361aa68-6764-41b9-96fd-b8cfd83c4c4d",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Adding objects"
        ]
      ]
    },
    "type": "page",
    "version": 6,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716476192,
        "id": "3b226d36-174e-4b27-8d8a-08d0e06818f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716476192,
        "parent_id": "5886cdb8-1a7f-4254-a424-55afd85b3630",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Anything that needs to happen with data in an IndexedDB database happens in a transaction. There are a few things to note about transactions that are mentioned in the Remarks section at the bottom of this page."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Anything that needs to happen with data in an IndexedDB database happens in a transaction. There are a few things to note about transactions that are mentioned in the Remarks section at the bottom of this page."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716476195,
        "id": "b416b16f-bec2-43f0-b561-def3b80f5d5f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716476195,
        "parent_id": "5886cdb8-1a7f-4254-a424-55afd85b3630",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We’ll use the database we set up in "
            ],
            [
              "Opening a database.",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We’ll use the database we set up in "
          },
          {
            "Text": "Opening a database.",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716476195,
        "id": "5549b19b-43ef-40ec-a806-d9f355b5f9e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716476195,
        "parent_id": "5886cdb8-1a7f-4254-a424-55afd85b3630",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Create a new readwrite (since we want to change things) transaction for the things store\nvar transaction = db.transaction([\"things\"], \"readwrite\");\n\n// Transactions use events, just like database open requests. Let's listen for success\ntransaction.oncomplete = function() {\n    console.log(\"All done!\");\n};\n\n// And make sure we handle errors\ntransaction.onerror = function() {\n    console.log(\"Something went wrong with our transaction: \", transaction.error);\n};\n\n// Now that our event handlers are set up, let's get our things store and add some objects!\nvar store = transaction.objectStore(\"things\");"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Create a new readwrite (since we want to change things) transaction for the things store\nvar transaction = db.transaction([\"things\"], \"readwrite\");\n\n// Transactions use events, just like database open requests. Let's listen for success\ntransaction.oncomplete = function() {\n    console.log(\"All done!\");\n};\n\n// And make sure we handle errors\ntransaction.onerror = function() {\n    console.log(\"Something went wrong with our transaction: \", transaction.error);\n};\n\n// Now that our event handlers are set up, let's get our things store and add some objects!\nvar store = transaction.objectStore(\"things\");",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716476195,
        "id": "7d1cee3a-8cd6-410f-bd92-eeec3d86a9e4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716476195,
        "parent_id": "5886cdb8-1a7f-4254-a424-55afd85b3630",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Transactions can do a few things at a time. Let's start with a simple insertion\nvar request = store.add({\n    // \"things\" uses auto-incrementing keys, so we don't need one, but we can set it anyway\n    key: \"coffee_cup\",\n    name: \"Coffee Cup\",\n    contents: [\"coffee\", \"cream\"]\n});\n\n// Let's listen so we can see if everything went well\nrequest.onsuccess = function(event) {\n    // Done! Here, `request.result` will be the object's key, \"coffee_cup\"\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Transactions can do a few things at a time. Let's start with a simple insertion\nvar request = store.add({\n    // \"things\" uses auto-incrementing keys, so we don't need one, but we can set it anyway\n    key: \"coffee_cup\",\n    name: \"Coffee Cup\",\n    contents: [\"coffee\", \"cream\"]\n});\n\n// Let's listen so we can see if everything went well\nrequest.onsuccess = function(event) {\n    // Done! Here, `request.result` will be the object's key, \"coffee_cup\"\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1550716476195,
        "id": "6d483871-cb60-4270-8c61-d3cae7d500a8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1550716476195,
        "parent_id": "5886cdb8-1a7f-4254-a424-55afd85b3630",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// We can also add a bunch of things from an array. We'll use auto-generated keys\nvar thingsToAdd = [{ name: \"Example object\" }, { value: \"I don't have a name\" }];\n\n// Let's use more compact code this time and ignore the results of our insertions\nthingsToAdd.forEach(e =\u003e store.add(e));"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// We can also add a bunch of things from an array. We'll use auto-generated keys\nvar thingsToAdd = [{ name: \"Example object\" }, { value: \"I don't have a name\" }];\n\n// Let's use more compact code this time and ignore the results of our insertions\nthingsToAdd.forEach(e =\u003e store.add(e));",
        "code_language": "Plain Text"
      }
    ],
    "title": "Adding objects",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}