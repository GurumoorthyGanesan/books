{
  "ID": "6054d5e3-b639-49e3-8bde-829935a68309",
  "Root": {
    "id": "6054d5e3-b639-49e3-8bde-829935a68309",
    "alive": true,
    "content": [
      "b6e4cf7f-af61-466e-8ff9-b31d2912ca17",
      "9b957369-5e8d-4576-9091-0a4475b1b078",
      "6aff6237-f78c-4a66-8243-3f50aad3d2ae",
      "f00e6443-bfb5-462d-8760-08cbb7fed6b5",
      "a1e20146-5f26-4014-8392-f19aa4fb6cf4",
      "32069a1f-877f-4bae-b895-3175f74d2909",
      "ea4f2b02-6043-4080-a68e-93604d11c62b",
      "4b1806db-d8be-48a9-afb3-fdae5e615fd1",
      "85bbdf44-45ab-4ea0-b0ea-08564b2313ed",
      "74deea58-90c8-4373-a932-b90d00555c5a",
      "ead3c400-42ab-4189-b890-4eb3c4272134",
      "d9b57f00-3b7d-4f55-95d3-ee916e82309c",
      "84501591-6a34-4f10-8878-4475508acd9a",
      "952a5f5b-d73c-46ca-93c7-5e14bb713eac",
      "544408b9-e9ca-402d-a925-f8c509492fb9",
      "9237886f-2f46-4d36-b502-f8f1b7855c30",
      "bca2d878-ebb4-4796-857c-81a9f38bd2d0",
      "922d1dab-c04b-4544-9eca-ea033c8f4153",
      "5d7b2f83-597d-431c-b4f1-8928474542d7",
      "d94762ba-71f1-4316-9659-860c98e3bfe0",
      "224351ee-f8e9-4065-8718-1620df238c69",
      "d93e2ccd-0040-481d-823d-fff561cba016",
      "a56ce2f7-061b-4d36-b9f8-fb9c6a1508a9",
      "6993d818-efaf-47c1-bd0b-9865a1070ad2",
      "535b9acc-7822-463d-8f87-f3925244951f",
      "5f2f6a61-7627-4a7b-807a-b6d7d01cd02e",
      "9ae497c7-cb75-4a41-a19a-5fca42de4dc4",
      "4cd2c3d5-4366-45e0-89da-49038baf40c8",
      "a8ec3872-627a-47ac-a0d3-dd313975717d",
      "b110caf8-86e0-499b-b14b-eee764fd3075"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949755452,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949755452,
    "parent_id": "0d20929d-b856-4186-bfed-fbeecbb675d5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Justified paragraphs."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "b6e4cf7f-af61-466e-8ff9-b31d2912ca17",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755446,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755446,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Renders text as justified paragraphs. "
            ],
            [
              "REQUIRES",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " the example "
            ],
            [
              "Justified text",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Renders text as justified paragraphs. "
          },
          {
            "Text": "REQUIRES",
            "AttrFlags": 1
          },
          {
            "Text": " the example "
          },
          {
            "Text": "Justified text",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "9b957369-5e8d-4576-9091-0a4475b1b078",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "6aff6237-f78c-4a66-8243-3f50aad3d2ae",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example render"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example render"
          }
        ]
      },
      {
        "id": "f00e6443-bfb5-462d-8760-08cbb7fed6b5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Top paragraph has setting.compact = true and bottom false and line spacing is 1.2 rather than the default 1.5. Rendered by code usage example bottom of this example."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Top paragraph has setting.compact = true and bottom false and line spacing is 1.2 rather than the default 1.5. Rendered by code usage example bottom of this example."
          }
        ]
      },
      {
        "id": "a1e20146-5f26-4014-8392-f19aa4fb6cf4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/318d5a58-50a2-440d-9ff6-dbaab6f2210c/1c56c80646f413df770db8755ca6e3ddfcffc5fa.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/318d5a58-50a2-440d-9ff6-dbaab6f2210c/1c56c80646f413df770db8755ca6e3ddfcffc5fa.png",
        "image_url": "/tmp/318d5a58-50a2-440d-9ff6-dbaab6f2210c/1c56c80646f413df770db8755ca6e3ddfcffc5fa.png"
      },
      {
        "id": "32069a1f-877f-4bae-b895-3175f74d2909",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "ea4f2b02-6043-4080-a68e-93604d11c62b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example code"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example code"
          }
        ]
      },
      {
        "id": "4b1806db-d8be-48a9-afb3-fdae5e615fd1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Requires justified text extensions \n(function(){\n   // code point A\n   if(typeof CanvasRenderingContext2D.prototype.fillJustifyText !== \"function\"){\n       throw new ReferenceError(\"Justified Paragraph extension missing requiered CanvasRenderingContext2D justified text extension\");\n   }\n   var maxSpaceSize = 3; // Multiplier for max space size. If greater then no justificatoin applied\n   var minSpaceSize = 0.5; // Multiplier for minimum space size   \n   var compact = true; // if true then try and fit as many words as possible. If false then try to get the spacing as close as possible to normal\n   var lineSpacing = 1.5; // space between lines\n   const noJustifySetting = {  // This setting forces justified text off. Used to render last line of paragraph.\n       minSpaceSize : 1,\n       maxSpaceSize : 1,\n   }\n\n   // Parse vet and set settings object.\n   var justifiedTextSettings = function(settings){\n       var min, max;\n       var vetNumber = (num, defaultNum) =\u003e {\n           num = num !== null \u0026\u0026 num !== null \u0026\u0026 !isNaN(num) ? num : defaultNum;\n           return num \u003c 0 ? defaultNum : num;\n       }\n       if(settings === undefined || settings === null){ return; }\n       compact = settings.compact === true ? true : settings.compact === false ? false : compact;\n       max = vetNumber(settings.maxSpaceSize, maxSpaceSize);\n       min = vetNumber(settings.minSpaceSize, minSpaceSize);\n       lineSpacing = vetNumber(settings.lineSpacing, lineSpacing);\n       if(min \u003e max){ return; }\n       minSpaceSize = min;\n       maxSpaceSize = max;\n   }        \n   var getFontSize = function(font){  // get the font size. \n       var numFind = /[0-9]+/;\n       var number = numFind.exec(font)[0];\n       if(isNaN(number)){\n           throw new ReferenceError(\"justifiedPar Cant find font size\");\n       }\n       return Number(number);\n   }\n   function justifiedPar(ctx, text, x, y, width, settings, stroke){\n       var spaceWidth, minS, maxS, words, count, lines, lineWidth, lastLineWidth, lastSize, i, renderer, fontSize, adjSpace, spaces, word, lineWords, lineFound;\n       spaceWidth = ctx.measureText(\" \").width;\n       minS = spaceWidth * minSpaceSize;\n       maxS = spaceWidth * maxSpaceSize;\n       words = text.split(\" \").map(word =\u003e {  // measure all words.\n           var w = ctx.measureText(word).width;                \n           return {\n               width : w,\n               word : word,\n           };\n       });\n       // count = num words, spaces = number spaces, spaceWidth normal space size\n       // adjSpace new space size \u003e= min size. useSize Resulting space size used to render\n       count = 0;\n       lines = [];\n       // create lines by shifting words from the words array until the spacing is optimal. If compact\n       // true then will true and fit as many words as possible. Else it will try and get the spacing as\n       // close as possible to the normal spacing\n       while(words.length \u003e 0){\n           lastLineWidth = 0;\n           lastSize = -1;\n           lineFound = false;\n           // each line must have at least one word.\n           word = words.shift();\n           lineWidth = word.width;\n           lineWords = [word.word];\n           count = 0;\n           while(lineWidth \u003c width \u0026\u0026 words.length \u003e 0){ // Add words to line\n               word = words.shift();\n               lineWidth += word.width;\n               lineWords.push(word.word);\n               count += 1;\n               spaces = count - 1;\n               adjSpace =  (width - lineWidth) / spaces;\n               if(minS \u003e adjSpace){  // if spacing less than min remove last word and finish line\n                   lineFound = true;\n                   words.unshift(word);\n                   lineWords.pop();\n               }else{\n                   if(!compact){ // if compact mode \n                       if(adjSpace \u003c spaceWidth){ // if less than normal space width\n                           if(lastSize === -1){\n                               lastSize = adjSpace;\n                           }\n                           // check if with last word on if its closer to space width\n                           if(Math.abs(spaceWidth - adjSpace) \u003c Math.abs(spaceWidth - lastSize)){\n                               lineFound = true; // yes keep it\n                           }else{\n                               words.unshift(word);  // no better fit if last word removes\n                               lineWords.pop();\n                               lineFound = true;\n                           }\n                       }\n                   }\n               }\n               lastSize = adjSpace; // remember spacing \n           }\n           lines.push(lineWords.join(\" \")); // and the line\n       }\n       // lines have been worked out get font size, render, and render all the lines. last\n       // line may need to be rendered as normal so it is outside the loop.\n       fontSize = getFontSize(ctx.font);\n       renderer = stroke === true ? ctx.strokeJustifyText.bind(ctx) : ctx.fillJustifyText.bind(ctx);\n       for(i = 0; i \u003c lines.length - 1; i ++){\n           renderer(lines[i], x, y, width, settings);\n           y += lineSpacing * fontSize;\n       }\n       if(lines.length \u003e 0){ // last line if left or start aligned for no justify\n           if(ctx.textAlign === \"left\" || ctx.textAlign === \"start\"){\n               renderer(lines[lines.length - 1], x, y, width, noJustifySetting);\n               ctx.measureJustifiedText(\"\", width, settings);\n           }else{\n               renderer(lines[lines.length - 1], x, y, width);\n           }\n       }\n       // return details about the paragraph.\n       y += lineSpacing * fontSize;\n       return {\n           nextLine : y,\n           fontSize : fontSize,\n           lineHeight : lineSpacing * fontSize,\n       };\n   }\n   // define fill\n   var fillParagraphText = function(text, x, y, width, settings){\n       justifiedTextSettings(settings);\n       settings = {\n           minSpaceSize : minSpaceSize,\n           maxSpaceSize : maxSpaceSize,\n       };\n       return justifiedPar(this, text, x, y, width, settings);\n   }\n   // define stroke\n   var strokeParagraphText = function(text, x, y, width, settings){\n       justifiedTextSettings(settings);\n       settings = {\n           minSpaceSize : minSpaceSize,\n           maxSpaceSize : maxSpaceSize,\n       };\n       return justifiedPar(this, text, x, y, width, settings,true);\n   }\n   CanvasRenderingContext2D.prototype.fillParaText = fillParagraphText;\n   CanvasRenderingContext2D.prototype.strokeParaText = strokeParagraphText;\n})();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Requires justified text extensions \n(function(){\n   // code point A\n   if(typeof CanvasRenderingContext2D.prototype.fillJustifyText !== \"function\"){\n       throw new ReferenceError(\"Justified Paragraph extension missing requiered CanvasRenderingContext2D justified text extension\");\n   }\n   var maxSpaceSize = 3; // Multiplier for max space size. If greater then no justificatoin applied\n   var minSpaceSize = 0.5; // Multiplier for minimum space size   \n   var compact = true; // if true then try and fit as many words as possible. If false then try to get the spacing as close as possible to normal\n   var lineSpacing = 1.5; // space between lines\n   const noJustifySetting = {  // This setting forces justified text off. Used to render last line of paragraph.\n       minSpaceSize : 1,\n       maxSpaceSize : 1,\n   }\n\n   // Parse vet and set settings object.\n   var justifiedTextSettings = function(settings){\n       var min, max;\n       var vetNumber = (num, defaultNum) =\u003e {\n           num = num !== null \u0026\u0026 num !== null \u0026\u0026 !isNaN(num) ? num : defaultNum;\n           return num \u003c 0 ? defaultNum : num;\n       }\n       if(settings === undefined || settings === null){ return; }\n       compact = settings.compact === true ? true : settings.compact === false ? false : compact;\n       max = vetNumber(settings.maxSpaceSize, maxSpaceSize);\n       min = vetNumber(settings.minSpaceSize, minSpaceSize);\n       lineSpacing = vetNumber(settings.lineSpacing, lineSpacing);\n       if(min \u003e max){ return; }\n       minSpaceSize = min;\n       maxSpaceSize = max;\n   }        \n   var getFontSize = function(font){  // get the font size. \n       var numFind = /[0-9]+/;\n       var number = numFind.exec(font)[0];\n       if(isNaN(number)){\n           throw new ReferenceError(\"justifiedPar Cant find font size\");\n       }\n       return Number(number);\n   }\n   function justifiedPar(ctx, text, x, y, width, settings, stroke){\n       var spaceWidth, minS, maxS, words, count, lines, lineWidth, lastLineWidth, lastSize, i, renderer, fontSize, adjSpace, spaces, word, lineWords, lineFound;\n       spaceWidth = ctx.measureText(\" \").width;\n       minS = spaceWidth * minSpaceSize;\n       maxS = spaceWidth * maxSpaceSize;\n       words = text.split(\" \").map(word =\u003e {  // measure all words.\n           var w = ctx.measureText(word).width;                \n           return {\n               width : w,\n               word : word,\n           };\n       });\n       // count = num words, spaces = number spaces, spaceWidth normal space size\n       // adjSpace new space size \u003e= min size. useSize Resulting space size used to render\n       count = 0;\n       lines = [];\n       // create lines by shifting words from the words array until the spacing is optimal. If compact\n       // true then will true and fit as many words as possible. Else it will try and get the spacing as\n       // close as possible to the normal spacing\n       while(words.length \u003e 0){\n           lastLineWidth = 0;\n           lastSize = -1;\n           lineFound = false;\n           // each line must have at least one word.\n           word = words.shift();\n           lineWidth = word.width;\n           lineWords = [word.word];\n           count = 0;\n           while(lineWidth \u003c width \u0026\u0026 words.length \u003e 0){ // Add words to line\n               word = words.shift();\n               lineWidth += word.width;\n               lineWords.push(word.word);\n               count += 1;\n               spaces = count - 1;\n               adjSpace =  (width - lineWidth) / spaces;\n               if(minS \u003e adjSpace){  // if spacing less than min remove last word and finish line\n                   lineFound = true;\n                   words.unshift(word);\n                   lineWords.pop();\n               }else{\n                   if(!compact){ // if compact mode \n                       if(adjSpace \u003c spaceWidth){ // if less than normal space width\n                           if(lastSize === -1){\n                               lastSize = adjSpace;\n                           }\n                           // check if with last word on if its closer to space width\n                           if(Math.abs(spaceWidth - adjSpace) \u003c Math.abs(spaceWidth - lastSize)){\n                               lineFound = true; // yes keep it\n                           }else{\n                               words.unshift(word);  // no better fit if last word removes\n                               lineWords.pop();\n                               lineFound = true;\n                           }\n                       }\n                   }\n               }\n               lastSize = adjSpace; // remember spacing \n           }\n           lines.push(lineWords.join(\" \")); // and the line\n       }\n       // lines have been worked out get font size, render, and render all the lines. last\n       // line may need to be rendered as normal so it is outside the loop.\n       fontSize = getFontSize(ctx.font);\n       renderer = stroke === true ? ctx.strokeJustifyText.bind(ctx) : ctx.fillJustifyText.bind(ctx);\n       for(i = 0; i \u003c lines.length - 1; i ++){\n           renderer(lines[i], x, y, width, settings);\n           y += lineSpacing * fontSize;\n       }\n       if(lines.length \u003e 0){ // last line if left or start aligned for no justify\n           if(ctx.textAlign === \"left\" || ctx.textAlign === \"start\"){\n               renderer(lines[lines.length - 1], x, y, width, noJustifySetting);\n               ctx.measureJustifiedText(\"\", width, settings);\n           }else{\n               renderer(lines[lines.length - 1], x, y, width);\n           }\n       }\n       // return details about the paragraph.\n       y += lineSpacing * fontSize;\n       return {\n           nextLine : y,\n           fontSize : fontSize,\n           lineHeight : lineSpacing * fontSize,\n       };\n   }\n   // define fill\n   var fillParagraphText = function(text, x, y, width, settings){\n       justifiedTextSettings(settings);\n       settings = {\n           minSpaceSize : minSpaceSize,\n           maxSpaceSize : maxSpaceSize,\n       };\n       return justifiedPar(this, text, x, y, width, settings);\n   }\n   // define stroke\n   var strokeParagraphText = function(text, x, y, width, settings){\n       justifiedTextSettings(settings);\n       settings = {\n           minSpaceSize : minSpaceSize,\n           maxSpaceSize : maxSpaceSize,\n       };\n       return justifiedPar(this, text, x, y, width, settings,true);\n   }\n   CanvasRenderingContext2D.prototype.fillParaText = fillParagraphText;\n   CanvasRenderingContext2D.prototype.strokeParaText = strokeParagraphText;\n})();",
        "code_language": "Plain Text"
      },
      {
        "id": "85bbdf44-45ab-4ea0-b0ea-08564b2313ed",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755447,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755447,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE this extends the CanvasRenderingContext2D prototype. If you do not wish this to happen use the example Justified text to work out how to change this example to be part of the global namespace."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE this extends the CanvasRenderingContext2D prototype. If you do not wish this to happen use the example Justified text to work out how to change this example to be part of the global namespace."
          }
        ]
      },
      {
        "id": "74deea58-90c8-4373-a932-b90d00555c5a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755448,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755448,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE Will throw a ReferenceError if this example can not find the function CanvasRenderingContext2D.prototype.fillJustifyText"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE Will throw a ReferenceError if this example can not find the function CanvasRenderingContext2D.prototype.fillJustifyText"
          }
        ]
      },
      {
        "id": "ead3c400-42ab-4189-b890-4eb3c4272134",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755448,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755448,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "d9b57f00-3b7d-4f55-95d3-ee916e82309c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755448,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755448,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to use"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to use"
          }
        ]
      },
      {
        "id": "84501591-6a34-4f10-8878-4475508acd9a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755448,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755448,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ctx.fillParaText(text, x, y, width, [settings]);\nctx.strokeParaText(text, x, y, width, [settings]);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ctx.fillParaText(text, x, y, width, [settings]);\nctx.strokeParaText(text, x, y, width, [settings]);",
        "code_language": "Plain Text"
      },
      {
        "id": "952a5f5b-d73c-46ca-93c7-5e14bb713eac",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755448,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755448,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See "
            ],
            [
              "Justified text",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " for details on arguments. Arguments between "
            ],
            [
              "\\[",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "\\]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are optional."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See "
          },
          {
            "Text": "Justified text",
            "AttrFlags": 1
          },
          {
            "Text": " for details on arguments. Arguments between "
          },
          {
            "Text": "\\[",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "\\]",
            "AttrFlags": 2
          },
          {
            "Text": " are optional."
          }
        ]
      },
      {
        "id": "544408b9-e9ca-402d-a925-f8c509492fb9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755448,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755448,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "settings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument has two additional properties."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "settings",
            "AttrFlags": 2
          },
          {
            "Text": " argument has two additional properties."
          }
        ]
      },
      {
        "id": "9237886f-2f46-4d36-b502-f8f1b7855c30",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755449,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755449,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "compact:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Default "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If true tries to pack as many words as possible per line. If false the tries to get the word spacing as close as possible to normal spacing."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "compact:",
            "AttrFlags": 1
          },
          {
            "Text": " Default "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": ". If true tries to pack as many words as possible per line. If false the tries to get the word spacing as close as possible to normal spacing."
          }
        ]
      },
      {
        "id": "bca2d878-ebb4-4796-857c-81a9f38bd2d0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755450,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755450,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lineSpacing",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Default "
            ],
            [
              "1.5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Space per line default "
            ],
            [
              "1.5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the distance from on line to the next in terms of font size"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "lineSpacing",
            "AttrFlags": 1
          },
          {
            "Text": " Default "
          },
          {
            "Text": "1.5",
            "AttrFlags": 2
          },
          {
            "Text": ". Space per line default "
          },
          {
            "Text": "1.5",
            "AttrFlags": 2
          },
          {
            "Text": " the distance from on line to the next in terms of font size"
          }
        ]
      },
      {
        "id": "922d1dab-c04b-4544-9eca-ea033c8f4153",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755450,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755450,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Properties missing from the settings object will default to their default values or to the last valid values. The properties will only be changed if the new values are valid. For "
            ],
            [
              "compact",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " valid values are only booleans "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " Truthy values are not considered valid."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Properties missing from the settings object will default to their default values or to the last valid values. The properties will only be changed if the new values are valid. For "
          },
          {
            "Text": "compact",
            "AttrFlags": 2
          },
          {
            "Text": " valid values are only booleans "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " Truthy values are not considered valid."
          }
        ]
      },
      {
        "id": "5d7b2f83-597d-431c-b4f1-8928474542d7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755450,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755450,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Return object"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Return object"
          }
        ]
      },
      {
        "id": "d94762ba-71f1-4316-9659-860c98e3bfe0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755450,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755450,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The two functions return an object containing information to help you place the next paragraph. The object contains the following properties."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The two functions return an object containing information to help you place the next paragraph. The object contains the following properties."
          }
        ]
      },
      {
        "id": "224351ee-f8e9-4065-8718-1620df238c69",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755451,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755451,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "nextLine",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Position of the next line after the paragraph pixels."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "nextLine",
            "AttrFlags": 1
          },
          {
            "Text": " Position of the next line after the paragraph pixels."
          }
        ]
      },
      {
        "id": "d93e2ccd-0040-481d-823d-fff561cba016",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755451,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755451,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "fontSize",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Size of the font. (please note only use fonts defined in pixels eg "
            ],
            [
              "14px arial",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ")"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "fontSize",
            "AttrFlags": 1
          },
          {
            "Text": " Size of the font. (please note only use fonts defined in pixels eg "
          },
          {
            "Text": "14px arial",
            "AttrFlags": 2
          },
          {
            "Text": ")"
          }
        ]
      },
      {
        "id": "a56ce2f7-061b-4d36-b9f8-fb9c6a1508a9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755451,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755451,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lineHeight",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Distance in pixels from one line to the next"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "lineHeight",
            "AttrFlags": 1
          },
          {
            "Text": " Distance in pixels from one line to the next"
          }
        ]
      },
      {
        "id": "6993d818-efaf-47c1-bd0b-9865a1070ad2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755451,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755451,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example uses a simple algorithm that works one line at to time to find the best fit for a paragraph. This does not mean that it the best fit (rather the algorithm’s best) You may wish to improve the algorithm by creating a multi pass line algorithm over the generated lines. Moving words from the end of one line to the start of the next, or from the start back to the end. The best look is achieved when the spacing over the entire paragraph has the smallest variation and is the closest to the normal text spacing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example uses a simple algorithm that works one line at to time to find the best fit for a paragraph. This does not mean that it the best fit (rather the algorithm’s best) You may wish to improve the algorithm by creating a multi pass line algorithm over the generated lines. Moving words from the end of one line to the start of the next, or from the start back to the end. The best look is achieved when the spacing over the entire paragraph has the smallest variation and is the closest to the normal text spacing."
          }
        ]
      },
      {
        "id": "535b9acc-7822-463d-8f87-f3925244951f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755452,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755452,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As this example is dependent on the "
            ],
            [
              "Justified text",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " example the code is very similar. You may wish to move the two into one function. Replace the function "
            ],
            [
              "justifiedTextSettings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in the other example with the one used in this example. Then copy all the rest of the code from this example into the anonymous function body of the "
            ],
            [
              "Justified text",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " example. You will no longer need to test for dependencies found at "
            ],
            [
              "// Code point A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " It can be removed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As this example is dependent on the "
          },
          {
            "Text": "Justified text",
            "AttrFlags": 1
          },
          {
            "Text": " example the code is very similar. You may wish to move the two into one function. Replace the function "
          },
          {
            "Text": "justifiedTextSettings",
            "AttrFlags": 2
          },
          {
            "Text": " in the other example with the one used in this example. Then copy all the rest of the code from this example into the anonymous function body of the "
          },
          {
            "Text": "Justified text",
            "AttrFlags": 1
          },
          {
            "Text": " example. You will no longer need to test for dependencies found at "
          },
          {
            "Text": "// Code point A",
            "AttrFlags": 2
          },
          {
            "Text": " It can be removed."
          }
        ]
      },
      {
        "id": "5f2f6a61-7627-4a7b-807a-b6d7d01cd02e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755452,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755452,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "9ae497c7-cb75-4a41-a19a-5fca42de4dc4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755452,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755452,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage example"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage example"
          }
        ]
      },
      {
        "id": "4cd2c3d5-4366-45e0-89da-49038baf40c8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755452,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755452,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "ctx.font = \"25px arial\";\nctx.textAlign = \"center\"\n\nvar left = 10;\nvar center = canvas.width / 2;\nvar width = canvas.width-left*2;\nvar y = 20;\nvar size = 16;\nvar i = 0;\nctx.fillText(\"Justified paragraph examples.\",center,y);\ny+= 30;\nctx.font = \"14px arial\";\nctx.textAlign = \"left\"\n// set para settings\nvar setting = {\n    maxSpaceSize : 6,\n    minSpaceSize : 0.5,\n    lineSpacing : 1.2,\n    compact : true,\n}\n// Show the left and right bounds.\nctx.strokeStyle = \"red\"\nctx.beginPath();\nctx.moveTo(left,y - size * 2);\nctx.lineTo(left, y + size * 15);\nctx.moveTo(canvas.width - left,y - size * 2);\nctx.lineTo(canvas.width - left, y + size * 15);\nctx.stroke();\nctx.textAlign = \"left\";\nctx.fillStyle = \"black\";\n\n// Draw paragraph\nvar line = ctx.fillParaText(para, left, y, width, setting);  // settings is remembered    \n\n// Next paragraph\ny = line.nextLine + line.lineHeight;\nsetting.compact = false;\nctx.fillParaText(para, left, y, width, setting);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "ctx.font = \"25px arial\";\nctx.textAlign = \"center\"\n\nvar left = 10;\nvar center = canvas.width / 2;\nvar width = canvas.width-left*2;\nvar y = 20;\nvar size = 16;\nvar i = 0;\nctx.fillText(\"Justified paragraph examples.\",center,y);\ny+= 30;\nctx.font = \"14px arial\";\nctx.textAlign = \"left\"\n// set para settings\nvar setting = {\n    maxSpaceSize : 6,\n    minSpaceSize : 0.5,\n    lineSpacing : 1.2,\n    compact : true,\n}\n// Show the left and right bounds.\nctx.strokeStyle = \"red\"\nctx.beginPath();\nctx.moveTo(left,y - size * 2);\nctx.lineTo(left, y + size * 15);\nctx.moveTo(canvas.width - left,y - size * 2);\nctx.lineTo(canvas.width - left, y + size * 15);\nctx.stroke();\nctx.textAlign = \"left\";\nctx.fillStyle = \"black\";\n\n// Draw paragraph\nvar line = ctx.fillParaText(para, left, y, width, setting);  // settings is remembered    \n\n// Next paragraph\ny = line.nextLine + line.lineHeight;\nsetting.compact = false;\nctx.fillParaText(para, left, y, width, setting);",
        "code_language": "Plain Text"
      },
      {
        "id": "a8ec3872-627a-47ac-a0d3-dd313975717d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755452,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755452,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: For text aligned left or start the last line of tha paragraph will always have normal spacing. For all other alignments the last line is treated like all others."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: For text aligned left or start the last line of tha paragraph will always have normal spacing. For all other alignments the last line is treated like all others."
          }
        ]
      },
      {
        "id": "b110caf8-86e0-499b-b14b-eee764fd3075",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949755452,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949755452,
        "parent_id": "6054d5e3-b639-49e3-8bde-829935a68309",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: You can inset the start of the paragraph with spaces. Though this may not be consistent from paragraph to paragraph. It is always a good thing to learn what a function is doing and modifying it. An exercise would be to add a setting to the settings that indents the first line by a fixed amount. Hint the while loop will need to temporarily make the first word appear larger (+ indent) words[0].width += ? and then when rendering lines indent the first line."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: You can inset the start of the paragraph with spaces. Though this may not be consistent from paragraph to paragraph. It is always a good thing to learn what a function is doing and modifying it. An exercise would be to add a setting to the settings that indents the first line by a fixed amount. Hint the while loop will need to temporarily make the first word appear larger (+ indent) words[0].width += ? and then when rendering lines indent the first line."
          }
        ]
      }
    ],
    "title": "Justified paragraphs.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}