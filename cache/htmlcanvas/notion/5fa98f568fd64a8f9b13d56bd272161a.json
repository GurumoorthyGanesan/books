{
  "ID": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
  "Root": {
    "alive": true,
    "content": [
      "61049c91-4992-43bc-9597-525a9ecf078d",
      "f328ff17-72a7-4cbf-8c64-20e79357de38",
      "20ee2866-3d35-4956-87ed-7ce0e1ad5b9b",
      "74a29576-7386-425b-823a-d3fe93af4c39",
      "13590aad-c36c-4466-afc0-731f10649ca3",
      "9cf5b05e-4c2a-4e00-a5dd-ef51bd160db5",
      "b3485b0b-c734-4a0b-8ef0-6e7743491b65",
      "80f8398a-473a-4c08-9c79-3c41b2ccd615",
      "e8e63862-a0a5-451e-9fb1-6f8ea65d6397",
      "9458cc3f-5612-4fd9-9913-998f91bbae99"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949716496,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949716496,
    "parent_id": "c37198be-d8f3-48ef-8bfc-2cebe79b5d8b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Are 2 line segments intercepting"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716492,
        "id": "61049c91-4992-43bc-9597-525a9ecf078d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716492,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function in this example returns "
            ],
            [
              "true",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if two line segments are intersecting and "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if not."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function in this example returns "
          },
          {
            "Text": "true",
            "AttrFlags": 2
          },
          {
            "Text": " if two line segments are intersecting and "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " if not."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716495,
        "id": "f328ff17-72a7-4cbf-8c64-20e79357de38",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716495,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example is designed for performance and uses closure to hold working variables"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example is designed for performance and uses closure to hold working variables"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716495,
        "id": "20ee2866-3d35-4956-87ed-7ce0e1ad5b9b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716495,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// point object: {x:, y:}    // p0 \u0026 p1 form one segment, p2 \u0026 p3 form the second segment    // Returns true if lines segments are intercepting    var lineSegmentsIntercept = (function(){ // function as singleton so that closure can be used                var v1, v2, v3, cross, u1, u2;  // working variable are closed over so they do not need creation                                    // each time the function is called. This gives a significant performance boost.        v1 = {x : null, y : null}; // line p0, p1 as vector        v2 = {x : null, y : null}; // line p2, p3 as vector        v3 = {x : null, y : null}; // the line from p0 to p2 as vector                function lineSegmentsIntercept (p0, p1, p2, p3) {            v1.x = p1.x - p0.x; // line p0, p1 as vector            v1.y = p1.y - p0.y;             v2.x = p3.x - p2.x; // line p2, p3 as vector            v2.y = p3.y - p2.y;             if((cross = v1.x * v2.y - v1.y * v2.x) === 0){  // cross prod 0 if lines parallel                return false; // no intercept            }            v3 = {x : p0.x - p2.x, y : p0.y - p2.y};  // the line from p0 to p2 as vector            u2 = (v1.x * v3.y - v1.y * v3.x) / cross; // get unit distance along line p2 p3             // code point B            if (u2 \u003e= 0 \u0026\u0026 u2 \u003c= 1){                   // is intercept on line p2, p3                u1 = (v2.x * v3.y - v2.y * v3.x) / cross; // get unit distance on line p0, p1;                // code point A                return (u1 \u003e= 0 \u0026\u0026 u1 \u003c= 1);           // return true if on line else false.                // code point A end            }            return false; // no intercept;            // code point B end        }        return lineSegmentsIntercept;  // return function with closure for optimisation.    })();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// point object: {x:, y:}    // p0 \u0026 p1 form one segment, p2 \u0026 p3 form the second segment    // Returns true if lines segments are intercepting    var lineSegmentsIntercept = (function(){ // function as singleton so that closure can be used                var v1, v2, v3, cross, u1, u2;  // working variable are closed over so they do not need creation                                    // each time the function is called. This gives a significant performance boost.        v1 = {x : null, y : null}; // line p0, p1 as vector        v2 = {x : null, y : null}; // line p2, p3 as vector        v3 = {x : null, y : null}; // the line from p0 to p2 as vector                function lineSegmentsIntercept (p0, p1, p2, p3) {            v1.x = p1.x - p0.x; // line p0, p1 as vector            v1.y = p1.y - p0.y;             v2.x = p3.x - p2.x; // line p2, p3 as vector            v2.y = p3.y - p2.y;             if((cross = v1.x * v2.y - v1.y * v2.x) === 0){  // cross prod 0 if lines parallel                return false; // no intercept            }            v3 = {x : p0.x - p2.x, y : p0.y - p2.y};  // the line from p0 to p2 as vector            u2 = (v1.x * v3.y - v1.y * v3.x) / cross; // get unit distance along line p2 p3             // code point B            if (u2 \u003e= 0 \u0026\u0026 u2 \u003c= 1){                   // is intercept on line p2, p3                u1 = (v2.x * v3.y - v2.y * v3.x) / cross; // get unit distance on line p0, p1;                // code point A                return (u1 \u003e= 0 \u0026\u0026 u1 \u003c= 1);           // return true if on line else false.                // code point A end            }            return false; // no intercept;            // code point B end        }        return lineSegmentsIntercept;  // return function with closure for optimisation.    })();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "74a29576-7386-425b-823a-d3fe93af4c39",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage example"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage example"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "13590aad-c36c-4466-afc0-731f10649ca3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var p1 = {x: 100, y: 0};   // line 1\nvar p2 = {x: 120, y: 200};\nvar p3 = {x: 0,   y: 100}; // line 2\nvar p4 = {x: 100, y: 120};\nvar areIntersepting = lineSegmentsIntercept (p1, p2, p3, p4); // true"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var p1 = {x: 100, y: 0};   // line 1\nvar p2 = {x: 120, y: 200};\nvar p3 = {x: 0,   y: 100}; // line 2\nvar p4 = {x: 100, y: 120};\nvar areIntersepting = lineSegmentsIntercept (p1, p2, p3, p4); // true",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "9cf5b05e-4c2a-4e00-a5dd-ef51bd160db5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The example is easily modified to return the point of intercept. Replace the code between "
            ],
            [
              "code point A",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "A end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The example is easily modified to return the point of intercept. Replace the code between "
          },
          {
            "Text": "code point A",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "A end",
            "AttrFlags": 2
          },
          {
            "Text": " with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "b3485b0b-c734-4a0b-8ef0-6e7743491b65",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "if(u1 \u003e= 0 \u0026\u0026 u1 \u003c= 1){\n    return {\n        x : p0.x + v1.x * u1,\n        y : p0.y + v1.y * u1,\n    };\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "if(u1 \u003e= 0 \u0026\u0026 u1 \u003c= 1){\n    return {\n        x : p0.x + v1.x * u1,\n        y : p0.y + v1.y * u1,\n    };\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "80f8398a-473a-4c08-9c79-3c41b2ccd615",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Or if you want to get the intercept point on the lines, ignoring the line segments start and ends replace the code between "
            ],
            [
              "code point B",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "B end",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Or if you want to get the intercept point on the lines, ignoring the line segments start and ends replace the code between "
          },
          {
            "Text": "code point B",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "B end",
            "AttrFlags": 2
          },
          {
            "Text": " with"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "e8e63862-a0a5-451e-9fb1-6f8ea65d6397",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "return {\n    x : p2.x + v2.x * u2,\n    y : p2.y + v2.y * u2,\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "return {\n    x : p2.x + v2.x * u2,\n    y : p2.y + v2.y * u2,\n};",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949716496,
        "id": "9458cc3f-5612-4fd9-9913-998f91bbae99",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949716496,
        "parent_id": "5fa98f56-8fd6-4a8f-9b13-d56bd272161a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both modifications will return false if there is no intercept or return the point of intercept as "
            ],
            [
              "{x : xCoord, y : yCoord}",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both modifications will return false if there is no intercept or return the point of intercept as "
          },
          {
            "Text": "{x : xCoord, y : yCoord}",
            "AttrFlags": 2
          }
        ]
      }
    ],
    "title": "Are 2 line segments intercepting",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}