{
  "ID": "7194e1da-6023-4240-baa7-0d2901d316b9",
  "Root": {
    "alive": true,
    "content": [
      "792f1beb-e06c-4e37-a2dc-4ca337c31083",
      "6a194b8d-eba9-43a7-a2c1-09df6ac51bdd",
      "449b3d38-6451-4faf-aa6a-c47ce4772d6a",
      "2b081658-56f6-4d94-a505-6d9254bea88a",
      "d1cf9f82-c503-4a64-a85e-c805f3cf6f5a",
      "b4c2d757-4291-4671-a848-fcb2efa489b3",
      "8dc535b6-b0e8-4c0b-8eeb-a26f29618a7e",
      "93cb1c42-1cde-4694-9e33-2428a7369122",
      "95c56e72-d99d-4f87-9322-8e1eb0a705d4",
      "0aa1e236-0b7d-4b6d-9f25-0ddfaaab225b",
      "d6072cd7-aa7b-4324-bae3-17179e6318ad",
      "53d0ada0-7634-403c-879d-5d3222525953",
      "d9781b06-c6c9-4e2f-9638-6ec5fbc63038",
      "ec8fd64a-d341-4ce7-b3bd-470932d7bdd7",
      "10e823c5-ee5a-4e4e-b346-148f3311d52b",
      "125211fe-1dfe-4d85-97e8-390acfeab87c",
      "15ece6dd-6c97-4f3f-b4c4-a0cf7afbc7a6",
      "dbe3175c-1a20-45a2-b38c-9ac5adeef166",
      "962c6792-85bd-4813-86d9-4bafe06fabca",
      "e5c70c15-9119-4d61-b75a-478281832d69",
      "26b85678-4360-4679-a424-05e11d728044",
      "f403f016-18c5-406a-8ab2-14ed0ec5b4d8"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949771439,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "7194e1da-6023-4240-baa7-0d2901d316b9",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949771439,
    "parent_id": "69ada749-d571-44f8-9e7e-47f98efde9a1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Finding points along an entire Path containing curves and lines"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771433,
        "id": "792f1beb-e06c-4e37-a2dc-4ca337c31083",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771433,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example finds an array of approximately evenly spaced points along an entire Path."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example finds an array of approximately evenly spaced points along an entire Path."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771435,
        "id": "6a194b8d-eba9-43a7-a2c1-09df6ac51bdd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771435,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It decomposes all Path segments created with "
            ],
            [
              "context.lineTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "context.quadraticCurveTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and/or "
            ],
            [
              "context.bezierCurveTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into points along that Path."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It decomposes all Path segments created with "
          },
          {
            "Text": "context.lineTo",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "context.quadraticCurveTo",
            "AttrFlags": 2
          },
          {
            "Text": " and/or "
          },
          {
            "Text": "context.bezierCurveTo",
            "AttrFlags": 2
          },
          {
            "Text": " into points along that Path."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771435,
        "id": "449b3d38-6451-4faf-aa6a-c47ce4772d6a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771435,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771435,
        "id": "2b081658-56f6-4d94-a505-6d9254bea88a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771435,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Path related variables\nvar A={x:50,y:100};\nvar B={x:125,y:25};\nvar BB={x:150,y:15};\nvar BB2={x:150,y:185};\nvar C={x:175,y:200};\nvar D={x:300,y:150};\nvar n=1000;\nvar tolerance=1.5;\nvar pts;\n\n// canvas related variables\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\ndocument.body.appendChild(canvas);\ncanvas.width=378;\ncanvas.height=256;\n\n// Tell the Context to plot waypoint in addition to \n// drawing the path\nplotPathCommands(ctx,n,tolerance);\n\n// Path drawing commands\nctx.beginPath();\nctx.moveTo(A.x,A.y);\nctx.bezierCurveTo(B.x,B.y,C.x,C.y,D.x,D.y);\nctx.quadraticCurveTo(BB.x,BB.y,A.x,A.y);\nctx.lineTo(D.x,D.y);\nctx.strokeStyle='gray';\nctx.stroke();\n\n// Tell the Context to stop plotting waypoints\nctx.stopPlottingPathCommands();\n\n// Demo: Incrementally draw the path using the plotted points\nptsToRects(ctx.getPathPoints());\nfunction ptsToRects(pts){\n    ctx.fillStyle='red';\n    var i=0;\n    requestAnimationFrame(animate);\n    function animate(){\n        ctx.fillRect(pts[i].x-0.50,pts[i].y-0.50,tolerance,tolerance);\n        i++;\n        if(i\u003cpts.length){ requestAnimationFrame(animate); }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Path related variables\nvar A={x:50,y:100};\nvar B={x:125,y:25};\nvar BB={x:150,y:15};\nvar BB2={x:150,y:185};\nvar C={x:175,y:200};\nvar D={x:300,y:150};\nvar n=1000;\nvar tolerance=1.5;\nvar pts;\n\n// canvas related variables\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\ndocument.body.appendChild(canvas);\ncanvas.width=378;\ncanvas.height=256;\n\n// Tell the Context to plot waypoint in addition to \n// drawing the path\nplotPathCommands(ctx,n,tolerance);\n\n// Path drawing commands\nctx.beginPath();\nctx.moveTo(A.x,A.y);\nctx.bezierCurveTo(B.x,B.y,C.x,C.y,D.x,D.y);\nctx.quadraticCurveTo(BB.x,BB.y,A.x,A.y);\nctx.lineTo(D.x,D.y);\nctx.strokeStyle='gray';\nctx.stroke();\n\n// Tell the Context to stop plotting waypoints\nctx.stopPlottingPathCommands();\n\n// Demo: Incrementally draw the path using the plotted points\nptsToRects(ctx.getPathPoints());\nfunction ptsToRects(pts){\n    ctx.fillStyle='red';\n    var i=0;\n    requestAnimationFrame(animate);\n    function animate(){\n        ctx.fillRect(pts[i].x-0.50,pts[i].y-0.50,tolerance,tolerance);\n        i++;\n        if(i\u003cpts.length){ requestAnimationFrame(animate); }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771435,
        "id": "d1cf9f82-c503-4a64-a85e-c805f3cf6f5a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771435,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "An plug-in that automatically calculates points along the path",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "An plug-in that automatically calculates points along the path",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771436,
        "id": "b4c2d757-4291-4671-a848-fcb2efa489b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771436,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code modifies these Canvas Context’s drawing commands so the commands not only draw the line or curve, but also create an array of points along the entire path:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code modifies these Canvas Context’s drawing commands so the commands not only draw the line or curve, but also create an array of points along the entire path:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771437,
        "id": "8dc535b6-b0e8-4c0b-8eeb-a26f29618a7e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771437,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "beginPath,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "beginPath,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771437,
        "id": "93cb1c42-1cde-4694-9e33-2428a7369122",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771437,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "moveTo,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "moveTo,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771437,
        "id": "95c56e72-d99d-4f87-9322-8e1eb0a705d4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771437,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lineTo,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "lineTo,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771437,
        "id": "0aa1e236-0b7d-4b6d-9f25-0ddfaaab225b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771437,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "quadraticCurveTo,"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "quadraticCurveTo,"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771437,
        "id": "d6072cd7-aa7b-4324-bae3-17179e6318ad",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771437,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "bezierCurveTo."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "bezierCurveTo."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771437,
        "id": "53d0ada0-7634-403c-879d-5d3222525953",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771437,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important Note!",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important Note!",
            "AttrFlags": 4
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "d9781b06-c6c9-4e2f-9638-6ec5fbc63038",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This code modifies the actual drawing functions of the Context so when you are done plotting points along the path, you should call the supplied "
            ],
            [
              "stopPlottingPathCommands",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to return the Context drawing functions to their unmodified state."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This code modifies the actual drawing functions of the Context so when you are done plotting points along the path, you should call the supplied "
          },
          {
            "Text": "stopPlottingPathCommands",
            "AttrFlags": 2
          },
          {
            "Text": " to return the Context drawing functions to their unmodified state."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "ec8fd64a-d341-4ce7-b3bd-470932d7bdd7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The purpose of this modified Context is to allow you to “plug-in” the points-array calculation into your existing code without having to modify your existing Path drawing commands. But, you don’t need to use this modified Context – you can separately call the individual functions that decompose a line, a quadratic curve and a cubic Bezier curve and then manually concatenate those individual point-arrays into a single point-array for the entire path."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The purpose of this modified Context is to allow you to “plug-in” the points-array calculation into your existing code without having to modify your existing Path drawing commands. But, you don’t need to use this modified Context – you can separately call the individual functions that decompose a line, a quadratic curve and a cubic Bezier curve and then manually concatenate those individual point-arrays into a single point-array for the entire path."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "10e823c5-ee5a-4e4e-b346-148f3311d52b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You fetch a copy of the resulting points-array using the supplied "
            ],
            [
              "getPathPoints",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You fetch a copy of the resulting points-array using the supplied "
          },
          {
            "Text": "getPathPoints",
            "AttrFlags": 2
          },
          {
            "Text": " function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "125211fe-1dfe-4d85-97e8-390acfeab87c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you draw multiple Paths with the modified Context, the points-array will contain a single concatenated set of points for all the multiple Paths drawn."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you draw multiple Paths with the modified Context, the points-array will contain a single concatenated set of points for all the multiple Paths drawn."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "15ece6dd-6c97-4f3f-b4c4-a0cf7afbc7a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If, instead, you want to get separate points-arrays, you can fetch the current array with "
            ],
            [
              "getPathPoints",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and then clear those points from the array with the supplied "
            ],
            [
              "clearPathPoints",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If, instead, you want to get separate points-arrays, you can fetch the current array with "
          },
          {
            "Text": "getPathPoints",
            "AttrFlags": 2
          },
          {
            "Text": " and then clear those points from the array with the supplied "
          },
          {
            "Text": "clearPathPoints",
            "AttrFlags": 2
          },
          {
            "Text": " function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "dbe3175c-1a20-45a2-b38c-9ac5adeef166",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Modify the Canvas' Context to calculate a set of approximately\n//     evenly spaced waypoints as it draws path(s).\nfunction plotPathCommands(ctx,sampleCount,pointSpacing){\n    ctx.mySampleCount=sampleCount;\n    ctx.myPointSpacing=pointSpacing;\n    ctx.myTolerance=pointSpacing*pointSpacing;\n    ctx.myBeginPath=ctx.beginPath;\n    ctx.myMoveTo=ctx.moveTo;\n    ctx.myLineTo=ctx.lineTo;\n    ctx.myQuadraticCurveTo=ctx.quadraticCurveTo;\n    ctx.myBezierCurveTo=ctx.bezierCurveTo;\n    // don't use myPathPoints[] directly -- use \"ctx.getPathPoints\"\n    ctx.myPathPoints=[];\n    ctx.beginPath=function(){\n        this.myLastX=0;\n        this.myLastY=0;\n        this.myBeginPath();\n    }\n    ctx.moveTo=function(x,y){\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myMoveTo(x,y);\n    }\n    ctx.lineTo=function(x,y){\n        var pts=plotLine(this.myTolerance,this.myLastX,this.myLastY,x,y);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myLineTo(x,y);\n    }\n    ctx.quadraticCurveTo=function(x0,y0,x1,y1){\n        var pts=plotQBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x1;\n        this.myLastY=y1;\n        this.myQuadraticCurveTo(x0,y0,x1,y1);\n    }\n    ctx.bezierCurveTo=function(x0,y0,x1,y1,x2,y2){\n        var pts=plotCBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1,x2,y2);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x2;\n        this.myLastY=y2;\n        this.myBezierCurveTo(x0,y0,x1,y1,x2,y2);\n    }\n    ctx.getPathPoints=function(){\n        return(this.myPathPoints.slice());\n    }\n    ctx.clearPathPoints=function(){\n        this.myPathPoints.length=0;\n    }\n    ctx.stopPlottingPathCommands=function(){\n        if(!this.myBeginPath){return;}\n        this.beginPath=this.myBeginPath;\n        this.moveTo=this.myMoveTo;\n        this.lineTo=this.myLineTo;\n        this.quadraticCurveto=this.myQuadraticCurveTo;\n        this.bezierCurveTo=this.myBezierCurveTo;\n        this.myBeginPath=undefined;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Modify the Canvas' Context to calculate a set of approximately\n//     evenly spaced waypoints as it draws path(s).\nfunction plotPathCommands(ctx,sampleCount,pointSpacing){\n    ctx.mySampleCount=sampleCount;\n    ctx.myPointSpacing=pointSpacing;\n    ctx.myTolerance=pointSpacing*pointSpacing;\n    ctx.myBeginPath=ctx.beginPath;\n    ctx.myMoveTo=ctx.moveTo;\n    ctx.myLineTo=ctx.lineTo;\n    ctx.myQuadraticCurveTo=ctx.quadraticCurveTo;\n    ctx.myBezierCurveTo=ctx.bezierCurveTo;\n    // don't use myPathPoints[] directly -- use \"ctx.getPathPoints\"\n    ctx.myPathPoints=[];\n    ctx.beginPath=function(){\n        this.myLastX=0;\n        this.myLastY=0;\n        this.myBeginPath();\n    }\n    ctx.moveTo=function(x,y){\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myMoveTo(x,y);\n    }\n    ctx.lineTo=function(x,y){\n        var pts=plotLine(this.myTolerance,this.myLastX,this.myLastY,x,y);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myLineTo(x,y);\n    }\n    ctx.quadraticCurveTo=function(x0,y0,x1,y1){\n        var pts=plotQBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x1;\n        this.myLastY=y1;\n        this.myQuadraticCurveTo(x0,y0,x1,y1);\n    }\n    ctx.bezierCurveTo=function(x0,y0,x1,y1,x2,y2){\n        var pts=plotCBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1,x2,y2);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x2;\n        this.myLastY=y2;\n        this.myBezierCurveTo(x0,y0,x1,y1,x2,y2);\n    }\n    ctx.getPathPoints=function(){\n        return(this.myPathPoints.slice());\n    }\n    ctx.clearPathPoints=function(){\n        this.myPathPoints.length=0;\n    }\n    ctx.stopPlottingPathCommands=function(){\n        if(!this.myBeginPath){return;}\n        this.beginPath=this.myBeginPath;\n        this.moveTo=this.myMoveTo;\n        this.lineTo=this.myLineTo;\n        this.quadraticCurveto=this.myQuadraticCurveTo;\n        this.bezierCurveTo=this.myBezierCurveTo;\n        this.myBeginPath=undefined;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771438,
        "id": "962c6792-85bd-4813-86d9-4bafe06fabca",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771438,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A complete Demo:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A complete Demo:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771439,
        "id": "e5c70c15-9119-4d61-b75a-478281832d69",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771439,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Path related variables\nvar A={x:50,y:100};\nvar B={x:125,y:25};\nvar BB={x:150,y:15};\nvar BB2={x:150,y:185};\nvar C={x:175,y:200};\nvar D={x:300,y:150};\nvar n=1000;\nvar tolerance=1.5;\nvar pts;\n\n// canvas related variables\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\ndocument.body.appendChild(canvas);\ncanvas.width=378;\ncanvas.height=256;\n\n// Tell the Context to plot waypoint in addition to \n// drawing the path\nplotPathCommands(ctx,n,tolerance);\n\n// Path drawing commands\nctx.beginPath();\nctx.moveTo(A.x,A.y);\nctx.bezierCurveTo(B.x,B.y,C.x,C.y,D.x,D.y);\nctx.quadraticCurveTo(BB.x,BB.y,A.x,A.y);\nctx.lineTo(D.x,D.y);\nctx.strokeStyle='gray';\nctx.stroke();\n\n// Tell the Context to stop plotting waypoints\nctx.stopPlottingPathCommands();\n\n// Incrementally draw the path using the plotted points\nptsToRects(ctx.getPathPoints());\nfunction ptsToRects(pts){\n    ctx.fillStyle='red';\n    var i=0;\n    requestAnimationFrame(animate);\n    function animate(){\n        ctx.fillRect(pts[i].x-0.50,pts[i].y-0.50,tolerance,tolerance);\n        i++;\n        if(i\u003cpts.length){ requestAnimationFrame(animate); }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Path related variables\nvar A={x:50,y:100};\nvar B={x:125,y:25};\nvar BB={x:150,y:15};\nvar BB2={x:150,y:185};\nvar C={x:175,y:200};\nvar D={x:300,y:150};\nvar n=1000;\nvar tolerance=1.5;\nvar pts;\n\n// canvas related variables\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\ndocument.body.appendChild(canvas);\ncanvas.width=378;\ncanvas.height=256;\n\n// Tell the Context to plot waypoint in addition to \n// drawing the path\nplotPathCommands(ctx,n,tolerance);\n\n// Path drawing commands\nctx.beginPath();\nctx.moveTo(A.x,A.y);\nctx.bezierCurveTo(B.x,B.y,C.x,C.y,D.x,D.y);\nctx.quadraticCurveTo(BB.x,BB.y,A.x,A.y);\nctx.lineTo(D.x,D.y);\nctx.strokeStyle='gray';\nctx.stroke();\n\n// Tell the Context to stop plotting waypoints\nctx.stopPlottingPathCommands();\n\n// Incrementally draw the path using the plotted points\nptsToRects(ctx.getPathPoints());\nfunction ptsToRects(pts){\n    ctx.fillStyle='red';\n    var i=0;\n    requestAnimationFrame(animate);\n    function animate(){\n        ctx.fillRect(pts[i].x-0.50,pts[i].y-0.50,tolerance,tolerance);\n        i++;\n        if(i\u003cpts.length){ requestAnimationFrame(animate); }\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771439,
        "id": "26b85678-4360-4679-a424-05e11d728044",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771439,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "////////////////////////////////////////\n// A Plug-in\n////////////////////////////////////////\n\n// Modify the Canvas' Context to calculate a set of approximately\n//     evenly spaced waypoints as it draws path(s).\nfunction plotPathCommands(ctx,sampleCount,pointSpacing){\n    ctx.mySampleCount=sampleCount;\n    ctx.myPointSpacing=pointSpacing;\n    ctx.myTolerance=pointSpacing*pointSpacing;\n    ctx.myBeginPath=ctx.beginPath;\n    ctx.myMoveTo=ctx.moveTo;\n    ctx.myLineTo=ctx.lineTo;\n    ctx.myQuadraticCurveTo=ctx.quadraticCurveTo;\n    ctx.myBezierCurveTo=ctx.bezierCurveTo;\n    // don't use myPathPoints[] directly -- use \"ctx.getPathPoints\"\n    ctx.myPathPoints=[];\n    ctx.beginPath=function(){\n        this.myLastX=0;\n        this.myLastY=0;\n        this.myBeginPath();\n    }\n    ctx.moveTo=function(x,y){\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myMoveTo(x,y);\n    }\n    ctx.lineTo=function(x,y){\n        var pts=plotLine(this.myTolerance,this.myLastX,this.myLastY,x,y);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myLineTo(x,y);\n    }\n    ctx.quadraticCurveTo=function(x0,y0,x1,y1){\n        var pts=plotQBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x1;\n        this.myLastY=y1;\n        this.myQuadraticCurveTo(x0,y0,x1,y1);\n    }\n    ctx.bezierCurveTo=function(x0,y0,x1,y1,x2,y2){\n        var pts=plotCBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1,x2,y2);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x2;\n        this.myLastY=y2;\n        this.myBezierCurveTo(x0,y0,x1,y1,x2,y2);\n    }\n    ctx.getPathPoints=function(){\n        return(this.myPathPoints.slice());\n    }\n    ctx.clearPathPoints=function(){\n        this.myPathPoints.length=0;\n    }\n    ctx.stopPlottingPathCommands=function(){\n        if(!this.myBeginPath){return;}\n        this.beginPath=this.myBeginPath;\n        this.moveTo=this.myMoveTo;\n        this.lineTo=this.myLineTo;\n        this.quadraticCurveto=this.myQuadraticCurveTo;\n        this.bezierCurveTo=this.myBezierCurveTo;\n        this.myBeginPath=undefined;\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "////////////////////////////////////////\n// A Plug-in\n////////////////////////////////////////\n\n// Modify the Canvas' Context to calculate a set of approximately\n//     evenly spaced waypoints as it draws path(s).\nfunction plotPathCommands(ctx,sampleCount,pointSpacing){\n    ctx.mySampleCount=sampleCount;\n    ctx.myPointSpacing=pointSpacing;\n    ctx.myTolerance=pointSpacing*pointSpacing;\n    ctx.myBeginPath=ctx.beginPath;\n    ctx.myMoveTo=ctx.moveTo;\n    ctx.myLineTo=ctx.lineTo;\n    ctx.myQuadraticCurveTo=ctx.quadraticCurveTo;\n    ctx.myBezierCurveTo=ctx.bezierCurveTo;\n    // don't use myPathPoints[] directly -- use \"ctx.getPathPoints\"\n    ctx.myPathPoints=[];\n    ctx.beginPath=function(){\n        this.myLastX=0;\n        this.myLastY=0;\n        this.myBeginPath();\n    }\n    ctx.moveTo=function(x,y){\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myMoveTo(x,y);\n    }\n    ctx.lineTo=function(x,y){\n        var pts=plotLine(this.myTolerance,this.myLastX,this.myLastY,x,y);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x;\n        this.myLastY=y;\n        this.myLineTo(x,y);\n    }\n    ctx.quadraticCurveTo=function(x0,y0,x1,y1){\n        var pts=plotQBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x1;\n        this.myLastY=y1;\n        this.myQuadraticCurveTo(x0,y0,x1,y1);\n    }\n    ctx.bezierCurveTo=function(x0,y0,x1,y1,x2,y2){\n        var pts=plotCBez(this.mySampleCount,this.myTolerance,this.myLastX,this.myLastY,x0,y0,x1,y1,x2,y2);\n        Array.prototype.push.apply(this.myPathPoints,pts);\n        this.myLastX=x2;\n        this.myLastY=y2;\n        this.myBezierCurveTo(x0,y0,x1,y1,x2,y2);\n    }\n    ctx.getPathPoints=function(){\n        return(this.myPathPoints.slice());\n    }\n    ctx.clearPathPoints=function(){\n        this.myPathPoints.length=0;\n    }\n    ctx.stopPlottingPathCommands=function(){\n        if(!this.myBeginPath){return;}\n        this.beginPath=this.myBeginPath;\n        this.moveTo=this.myMoveTo;\n        this.lineTo=this.myLineTo;\n        this.quadraticCurveto=this.myQuadraticCurveTo;\n        this.bezierCurveTo=this.myBezierCurveTo;\n        this.myBeginPath=undefined;\n    }\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949771439,
        "id": "f403f016-18c5-406a-8ab2-14ed0ec5b4d8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949771439,
        "parent_id": "7194e1da-6023-4240-baa7-0d2901d316b9",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "////////////////////////////////\n// Helper functions\n////////////////////////////////\n\n// Return: a set of approximately evenly spaced points along a cubic Bezier curve\n//\n// Attribution: Stackoverflow's @Blindman67\n// Cite: http://stackoverflow.com/questions/36637211/drawing-a-curved-line-in-css-or-canvas-and-moving-circle-along-it/36827074#36827074\n// As modified from the above citation\n// \n// ptCount: sample this many points at interval along the curve\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By,Cx,Cy,Dx,Dy: control points defining the curve\n//\nfunction plotCBez(ptCount,pxTolerance,Ax,Ay,Bx,By,Cx,Cy,Dx,Dy){\n    var deltaBAx=Bx-Ax;\n    var deltaCBx=Cx-Bx;\n    var deltaDCx=Dx-Cx;\n    var deltaBAy=By-Ay;\n    var deltaCBy=Cy-By;\n    var deltaDCy=Dy-Cy;\n    var ax,ay,bx,by;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003cptCount;i++){\n        var t=i/ptCount;\n        ax=Ax+deltaBAx*t;\n        bx=Bx+deltaCBx*t;\n        cx=Cx+deltaDCx*t;\n        ax+=(bx-ax)*t;\n        bx+=(cx-bx)*t;\n        //\n        ay=Ay+deltaBAy*t;\n        by=By+deltaCBy*t;\n        cy=Cy+deltaDCy*t;\n        ay+=(by-ay)*t;\n        by+=(cy-by)*t;\n        var x=ax+(bx-ax)*t;\n        var y=ay+(by-ay)*t;\n        var dx=x-lastX;\n        var dy=y-lastY;\n        if(dx*dx+dy*dy\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Dx,y:Dy});\n    return(pts);\n}\n\n// Return: an array of approximately evenly spaced points along a Quadratic curve\n//\n// Attribution: Stackoverflow's @Blindman67\n// Cite: http://stackoverflow.com/questions/36637211/drawing-a-curved-line-in-css-or-canvas-and-moving-circle-along-it/36827074#36827074\n// As modified from the above citation\n//\n// ptCount: sample this many points at interval along the curve\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By,Cx,Cy: control points defining the curve\n//\nfunction plotQBez(ptCount,pxTolerance,Ax,Ay,Bx,By,Cx,Cy){\n    var deltaBAx=Bx-Ax;\n    var deltaCBx=Cx-Bx;\n    var deltaBAy=By-Ay;\n    var deltaCBy=Cy-By;\n    var ax,ay;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003cptCount;i++){\n        var t=i/ptCount;\n        ax=Ax+deltaBAx*t;\n        ay=Ay+deltaBAy*t;\n        var x=ax+((Bx+deltaCBx*t)-ax)*t;\n        var y=ay+((By+deltaCBy*t)-ay)*t;\n        var dx=x-lastX;\n        var dy=y-lastY;\n        if(dx*dx+dy*dy\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Cx,y:Cy});\n    return(pts);\n}\n\n// Return: an array of approximately evenly spaced points along a line\n//\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By: end points defining the line\n//\nfunction plotLine(pxTolerance,Ax,Ay,Bx,By){\n    var dx=Bx-Ax;\n    var dy=By-Ay;\n    var ptCount=parseInt(Math.sqrt(dx*dx+dy*dy))*3;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003c=ptCount;i++){\n        var t=i/ptCount;\n        var x=Ax+dx*t;\n        var y=Ay+dy*t;\n        var dx1=x-lastX;\n        var dy1=y-lastY;\n        if(dx1*dx1+dy1*dy1\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Bx,y:By});\n    return(pts);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "////////////////////////////////\n// Helper functions\n////////////////////////////////\n\n// Return: a set of approximately evenly spaced points along a cubic Bezier curve\n//\n// Attribution: Stackoverflow's @Blindman67\n// Cite: http://stackoverflow.com/questions/36637211/drawing-a-curved-line-in-css-or-canvas-and-moving-circle-along-it/36827074#36827074\n// As modified from the above citation\n// \n// ptCount: sample this many points at interval along the curve\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By,Cx,Cy,Dx,Dy: control points defining the curve\n//\nfunction plotCBez(ptCount,pxTolerance,Ax,Ay,Bx,By,Cx,Cy,Dx,Dy){\n    var deltaBAx=Bx-Ax;\n    var deltaCBx=Cx-Bx;\n    var deltaDCx=Dx-Cx;\n    var deltaBAy=By-Ay;\n    var deltaCBy=Cy-By;\n    var deltaDCy=Dy-Cy;\n    var ax,ay,bx,by;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003cptCount;i++){\n        var t=i/ptCount;\n        ax=Ax+deltaBAx*t;\n        bx=Bx+deltaCBx*t;\n        cx=Cx+deltaDCx*t;\n        ax+=(bx-ax)*t;\n        bx+=(cx-bx)*t;\n        //\n        ay=Ay+deltaBAy*t;\n        by=By+deltaCBy*t;\n        cy=Cy+deltaDCy*t;\n        ay+=(by-ay)*t;\n        by+=(cy-by)*t;\n        var x=ax+(bx-ax)*t;\n        var y=ay+(by-ay)*t;\n        var dx=x-lastX;\n        var dy=y-lastY;\n        if(dx*dx+dy*dy\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Dx,y:Dy});\n    return(pts);\n}\n\n// Return: an array of approximately evenly spaced points along a Quadratic curve\n//\n// Attribution: Stackoverflow's @Blindman67\n// Cite: http://stackoverflow.com/questions/36637211/drawing-a-curved-line-in-css-or-canvas-and-moving-circle-along-it/36827074#36827074\n// As modified from the above citation\n//\n// ptCount: sample this many points at interval along the curve\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By,Cx,Cy: control points defining the curve\n//\nfunction plotQBez(ptCount,pxTolerance,Ax,Ay,Bx,By,Cx,Cy){\n    var deltaBAx=Bx-Ax;\n    var deltaCBx=Cx-Bx;\n    var deltaBAy=By-Ay;\n    var deltaCBy=Cy-By;\n    var ax,ay;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003cptCount;i++){\n        var t=i/ptCount;\n        ax=Ax+deltaBAx*t;\n        ay=Ay+deltaBAy*t;\n        var x=ax+((Bx+deltaCBx*t)-ax)*t;\n        var y=ay+((By+deltaCBy*t)-ay)*t;\n        var dx=x-lastX;\n        var dy=y-lastY;\n        if(dx*dx+dy*dy\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Cx,y:Cy});\n    return(pts);\n}\n\n// Return: an array of approximately evenly spaced points along a line\n//\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By: end points defining the line\n//\nfunction plotLine(pxTolerance,Ax,Ay,Bx,By){\n    var dx=Bx-Ax;\n    var dy=By-Ay;\n    var ptCount=parseInt(Math.sqrt(dx*dx+dy*dy))*3;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003c=ptCount;i++){\n        var t=i/ptCount;\n        var x=Ax+dx*t;\n        var y=Ay+dy*t;\n        var dx1=x-lastX;\n        var dy1=y-lastY;\n        if(dx1*dx1+dy1*dy1\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Bx,y:By});\n    return(pts);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Finding points along an entire Path containing curves and lines",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}