{
  "ID": "88ceec51-5e57-4149-94f3-b3e6a16563ba",
  "Root": {
    "id": "88ceec51-5e57-4149-94f3-b3e6a16563ba",
    "alive": true,
    "content": [
      "bfae6bb8-5d60-4fe1-a152-47cfeae5de01"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949718469,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949718469,
    "parent_id": "c37198be-d8f3-48ef-8bfc-2cebe79b5d8b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Are line segment and rectangle colliding"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "bfae6bb8-5d60-4fe1-a152-47cfeae5de01",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949718467,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949718467,
        "parent_id": "88ceec51-5e57-4149-94f3-b3e6a16563ba",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// var rect={x:,y:,width:,height:};\n// var line={x1:,y1:,x2:,y2:};\n// Get interseting point of line segment \u0026 rectangle (if any)\nfunction lineRectCollide(line,rect){\n\n    // p=line startpoint, p2=line endpoint\n    var p={x:line.x1,y:line.y1};\n    var p2={x:line.x2,y:line.y2};\n\n    // top rect line\n    var q={x:rect.x,y:rect.y};\n    var q2={x:rect.x+rect.width,y:rect.y};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n    // right rect line\n    var q=q2;\n    var q2={x:rect.x+rect.width,y:rect.y+rect.height};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n    // bottom rect line\n    var q=q2;\n    var q2={x:rect.x,y:rect.y+rect.height};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n    // left rect line\n    var q=q2;\n    var q2={x:rect.x,y:rect.y};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n\n    // not intersecting with any of the 4 rect sides\n    return(false);\n}\n\n// point object: {x:, y:}\n// p0 \u0026 p1 form one segment, p2 \u0026 p3 form the second segment\n// Get interseting point of 2 line segments (if any)\n// Attribution: http://paulbourke.net/geometry/pointlineplane/\nfunction lineSegmentsCollide(p0,p1,p2,p3) {\n\n    var unknownA = (p3.x-p2.x) * (p0.y-p2.y) - (p3.y-p2.y) * (p0.x-p2.x);\n    var unknownB = (p1.x-p0.x) * (p0.y-p2.y) - (p1.y-p0.y) * (p0.x-p2.x);\n    var denominator  = (p3.y-p2.y) * (p1.x-p0.x) - (p3.x-p2.x) * (p1.y-p0.y);        \n\n    // Test if Coincident\n    // If the denominator and numerator for the ua and ub are 0\n    //    then the two lines are coincident.    \n    if(unknownA==0 \u0026\u0026 unknownB==0 \u0026\u0026 denominator==0){return(null);}\n\n    // Test if Parallel \n    // If the denominator for the equations for ua and ub is 0\n    //     then the two lines are parallel. \n    if (denominator == 0) return null;\n\n    // test if line segments are colliding\n    unknownA /= denominator;\n    unknownB /= denominator;\n    var isIntersecting=(unknownA\u003e=0 \u0026\u0026 unknownA\u003c=1 \u0026\u0026 unknownB\u003e=0 \u0026\u0026 unknownB\u003c=1)\n\n    return(isIntersecting);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// var rect={x:,y:,width:,height:};\n// var line={x1:,y1:,x2:,y2:};\n// Get interseting point of line segment \u0026 rectangle (if any)\nfunction lineRectCollide(line,rect){\n\n    // p=line startpoint, p2=line endpoint\n    var p={x:line.x1,y:line.y1};\n    var p2={x:line.x2,y:line.y2};\n\n    // top rect line\n    var q={x:rect.x,y:rect.y};\n    var q2={x:rect.x+rect.width,y:rect.y};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n    // right rect line\n    var q=q2;\n    var q2={x:rect.x+rect.width,y:rect.y+rect.height};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n    // bottom rect line\n    var q=q2;\n    var q2={x:rect.x,y:rect.y+rect.height};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n    // left rect line\n    var q=q2;\n    var q2={x:rect.x,y:rect.y};\n    if(lineSegmentsCollide(p,p2,q,q2)){ return true; }\n\n    // not intersecting with any of the 4 rect sides\n    return(false);\n}\n\n// point object: {x:, y:}\n// p0 \u0026 p1 form one segment, p2 \u0026 p3 form the second segment\n// Get interseting point of 2 line segments (if any)\n// Attribution: http://paulbourke.net/geometry/pointlineplane/\nfunction lineSegmentsCollide(p0,p1,p2,p3) {\n\n    var unknownA = (p3.x-p2.x) * (p0.y-p2.y) - (p3.y-p2.y) * (p0.x-p2.x);\n    var unknownB = (p1.x-p0.x) * (p0.y-p2.y) - (p1.y-p0.y) * (p0.x-p2.x);\n    var denominator  = (p3.y-p2.y) * (p1.x-p0.x) - (p3.x-p2.x) * (p1.y-p0.y);        \n\n    // Test if Coincident\n    // If the denominator and numerator for the ua and ub are 0\n    //    then the two lines are coincident.    \n    if(unknownA==0 \u0026\u0026 unknownB==0 \u0026\u0026 denominator==0){return(null);}\n\n    // Test if Parallel \n    // If the denominator for the equations for ua and ub is 0\n    //     then the two lines are parallel. \n    if (denominator == 0) return null;\n\n    // test if line segments are colliding\n    unknownA /= denominator;\n    unknownB /= denominator;\n    var isIntersecting=(unknownA\u003e=0 \u0026\u0026 unknownA\u003c=1 \u0026\u0026 unknownB\u003e=0 \u0026\u0026 unknownB\u003c=1)\n\n    return(isIntersecting);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Are line segment and rectangle colliding",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}