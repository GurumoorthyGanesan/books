{
  "ID": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
  "Root": {
    "alive": true,
    "content": [
      "49c912b2-de46-4eba-9c09-d62735741383",
      "c3c0af74-c37b-4450-bb61-768c2ee015ba",
      "d4b43542-c845-41fc-9bfb-850feed70935",
      "7303017a-b027-4d40-a804-7e8aec5dce49",
      "e57d80fa-4725-4211-a8d0-d02c576546e1",
      "8757a470-9155-4051-bb58-db1a3d2e60be"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949739598,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949739598,
    "parent_id": "041fccae-eb96-4fce-9577-0aaf8da6dad2",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Render a rounded polygon."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949739594,
        "id": "49c912b2-de46-4eba-9c09-d62735741383",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949739594,
        "parent_id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Creates a path from a set of points "
            ],
            [
              "[{x:?,y:?},{x:?,y:?},...,{x:?,y:?}]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " with rounded corners of radius. If the corner angle is too small to fit the radius or the distance between corners does not allow room the corners radius is reduced to a best fit."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Creates a path from a set of points "
          },
          {
            "Text": "[{x:?,y:?},{x:?,y:?},...,{x:?,y:?}]",
            "AttrFlags": 2
          },
          {
            "Text": " with rounded corners of radius. If the corner angle is too small to fit the radius or the distance between corners does not allow room the corners radius is reduced to a best fit."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949739597,
        "id": "c3c0af74-c37b-4450-bb61-768c2ee015ba",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949739597,
        "parent_id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/3a507458-c08b-4071-966c-e578ee804233/7c98b01af1c95a9e9f85b954b223e56934be76a3.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/3a507458-c08b-4071-966c-e578ee804233/7c98b01af1c95a9e9f85b954b223e56934be76a3.png",
        "image_url": "https://www.notion.so/image/https:%2F%2Fwww.notion.so%2Ftmp%2F3a507458-c08b-4071-966c-e578ee804233%2F7c98b01af1c95a9e9f85b954b223e56934be76a3.png"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949739597,
        "id": "d4b43542-c845-41fc-9bfb-850feed70935",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949739597,
        "parent_id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Usage Example",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Usage Example",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949739597,
        "id": "7303017a-b027-4d40-a804-7e8aec5dce49",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949739597,
        "parent_id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var triangle = [\n    { x: 200, y : 50 },\n    { x: 300, y : 200 },\n    { x: 100, y : 200 }\n];\nvar cornerRadius = 30;\nctx.lineWidth = 4;\nctx.fillStyle = \"Green\";\nctx.strokeStyle = \"black\";\nctx.beginPath(); // start a new path\nroundedPoly(triangle, cornerRadius);\nctx.fill();\nctx.stroke();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var triangle = [\n    { x: 200, y : 50 },\n    { x: 300, y : 200 },\n    { x: 100, y : 200 }\n];\nvar cornerRadius = 30;\nctx.lineWidth = 4;\nctx.fillStyle = \"Green\";\nctx.strokeStyle = \"black\";\nctx.beginPath(); // start a new path\nroundedPoly(triangle, cornerRadius);\nctx.fill();\nctx.stroke();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949739598,
        "id": "e57d80fa-4725-4211-a8d0-d02c576546e1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949739598,
        "parent_id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Render function",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Render function",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949739598,
        "id": "8757a470-9155-4051-bb58-db1a3d2e60be",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949739598,
        "parent_id": "dbee7194-5ae2-499b-acf8-ad01e05a1fac",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var roundedPoly = function(points,radius){\n    var i, x, y, len, p1, p2, p3, v1, v2, sinA, sinA90, radDirection, drawDirection, angle, halfAngle, cRadius, lenOut;\n    var asVec = function (p, pp, v) { // convert points to a line with len and normalised\n        v.x = pp.x - p.x; // x,y as vec\n        v.y = pp.y - p.y;\n        v.len = Math.sqrt(v.x * v.x + v.y * v.y); // length of vec\n        v.nx = v.x / v.len; // normalised\n        v.ny = v.y / v.len;\n        v.ang = Math.atan2(v.ny, v.nx); // direction of vec\n    }\n    v1 = {};\n    v2 = {};\n    len = points.length;                         // number points\n    p1 = points[len - 1];                        // start at end of path\n    for (i = 0; i \u003c len; i++) {                  // do each corner\n        p2 = points[(i) % len];                  // the corner point that is being rounded\n        p3 = points[(i + 1) % len];\n        // get the corner as vectors out away from corner\n        asVec(p2, p1, v1);                       // vec back from corner point\n        asVec(p2, p3, v2);                       // vec forward from corner point\n        // get corners cross product (asin of angle)\n        sinA = v1.nx * v2.ny - v1.ny * v2.nx;    // cross product\n        // get cross product of first line and perpendicular second line\n        sinA90 = v1.nx * v2.nx - v1.ny * -v2.ny; // cross product to normal of line 2\n        angle = Math.asin(sinA);                 // get the angle\n        radDirection = 1;                        // may need to reverse the radius\n        drawDirection = false;                   // may need to draw the arc anticlockwise\n        // find the correct quadrant for circle center\n        if (sinA90 \u003c 0) {\n            if (angle \u003c 0) {\n                angle = Math.PI + angle; // add 180 to move us to the 3 quadrant\n            } else {\n                angle = Math.PI - angle; // move back into the 2nd quadrant\n                radDirection = -1;\n                drawDirection = true;\n            }\n        } else {\n            if (angle \u003e 0) {\n                radDirection = -1;\n                drawDirection = true;\n            }\n        }\n        halfAngle = angle / 2;\n        // get distance from corner to point where round corner touches line\n        lenOut = Math.abs(Math.cos(halfAngle) * radius / Math.sin(halfAngle));\n        if (lenOut \u003e Math.min(v1.len / 2, v2.len / 2)) { // fix if longer than half line length\n            lenOut = Math.min(v1.len / 2, v2.len / 2);\n            // ajust the radius of corner rounding to fit\n            cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));\n        } else {\n            cRadius = radius;\n        }\n        x = p2.x + v2.nx * lenOut; // move out from corner along second line to point where rounded circle touches\n        y = p2.y + v2.ny * lenOut;\n        x += -v2.ny * cRadius * radDirection; // move away from line to circle center\n        y += v2.nx * cRadius * radDirection;\n        // x,y is the rounded corner circle center\n        ctx.arc(x, y, cRadius, v1.ang + Math.PI / 2 * radDirection, v2.ang - Math.PI / 2 * radDirection, drawDirection); // draw the arc clockwise\n        p1 = p2;\n        p2 = p3;\n    }\n    ctx.closePath();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var roundedPoly = function(points,radius){\n    var i, x, y, len, p1, p2, p3, v1, v2, sinA, sinA90, radDirection, drawDirection, angle, halfAngle, cRadius, lenOut;\n    var asVec = function (p, pp, v) { // convert points to a line with len and normalised\n        v.x = pp.x - p.x; // x,y as vec\n        v.y = pp.y - p.y;\n        v.len = Math.sqrt(v.x * v.x + v.y * v.y); // length of vec\n        v.nx = v.x / v.len; // normalised\n        v.ny = v.y / v.len;\n        v.ang = Math.atan2(v.ny, v.nx); // direction of vec\n    }\n    v1 = {};\n    v2 = {};\n    len = points.length;                         // number points\n    p1 = points[len - 1];                        // start at end of path\n    for (i = 0; i \u003c len; i++) {                  // do each corner\n        p2 = points[(i) % len];                  // the corner point that is being rounded\n        p3 = points[(i + 1) % len];\n        // get the corner as vectors out away from corner\n        asVec(p2, p1, v1);                       // vec back from corner point\n        asVec(p2, p3, v2);                       // vec forward from corner point\n        // get corners cross product (asin of angle)\n        sinA = v1.nx * v2.ny - v1.ny * v2.nx;    // cross product\n        // get cross product of first line and perpendicular second line\n        sinA90 = v1.nx * v2.nx - v1.ny * -v2.ny; // cross product to normal of line 2\n        angle = Math.asin(sinA);                 // get the angle\n        radDirection = 1;                        // may need to reverse the radius\n        drawDirection = false;                   // may need to draw the arc anticlockwise\n        // find the correct quadrant for circle center\n        if (sinA90 \u003c 0) {\n            if (angle \u003c 0) {\n                angle = Math.PI + angle; // add 180 to move us to the 3 quadrant\n            } else {\n                angle = Math.PI - angle; // move back into the 2nd quadrant\n                radDirection = -1;\n                drawDirection = true;\n            }\n        } else {\n            if (angle \u003e 0) {\n                radDirection = -1;\n                drawDirection = true;\n            }\n        }\n        halfAngle = angle / 2;\n        // get distance from corner to point where round corner touches line\n        lenOut = Math.abs(Math.cos(halfAngle) * radius / Math.sin(halfAngle));\n        if (lenOut \u003e Math.min(v1.len / 2, v2.len / 2)) { // fix if longer than half line length\n            lenOut = Math.min(v1.len / 2, v2.len / 2);\n            // ajust the radius of corner rounding to fit\n            cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));\n        } else {\n            cRadius = radius;\n        }\n        x = p2.x + v2.nx * lenOut; // move out from corner along second line to point where rounded circle touches\n        y = p2.y + v2.ny * lenOut;\n        x += -v2.ny * cRadius * radDirection; // move away from line to circle center\n        y += v2.nx * cRadius * radDirection;\n        // x,y is the rounded corner circle center\n        ctx.arc(x, y, cRadius, v1.ang + Math.PI / 2 * radDirection, v2.ang - Math.PI / 2 * radDirection, drawDirection); // draw the arc clockwise\n        p1 = p2;\n        p2 = p3;\n    }\n    ctx.closePath();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Render a rounded polygon.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}