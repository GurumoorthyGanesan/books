{
  "ID": "c51cbae6-5e58-459c-8e4a-ef58a7215602",
  "Root": {
    "alive": true,
    "content": [
      "c8d883d9-8954-4d5b-be79-07872e195bcf",
      "81a03a9d-ab5c-4296-9a95-b971ce4ba331",
      "6541bb1c-b009-4ebe-a289-c5d289978722"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949769348,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "c51cbae6-5e58-459c-8e4a-ef58a7215602",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949769348,
    "parent_id": "69ada749-d571-44f8-9e7e-47f98efde9a1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Finding points along a cubic Bezier curve"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949769345,
        "id": "c8d883d9-8954-4d5b-be79-07872e195bcf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949769345,
        "parent_id": "c51cbae6-5e58-459c-8e4a-ef58a7215602",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example finds an array of approximately evenly spaced points along a cubic Bezier curve."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example finds an array of approximately evenly spaced points along a cubic Bezier curve."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949769348,
        "id": "81a03a9d-ab5c-4296-9a95-b971ce4ba331",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949769348,
        "parent_id": "c51cbae6-5e58-459c-8e4a-ef58a7215602",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It decomposes Path segments created with "
            ],
            [
              "context.bezierCurveTo",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into points along that curve."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It decomposes Path segments created with "
          },
          {
            "Text": "context.bezierCurveTo",
            "AttrFlags": 2
          },
          {
            "Text": " into points along that curve."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949769348,
        "id": "6541bb1c-b009-4ebe-a289-c5d289978722",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949769348,
        "parent_id": "c51cbae6-5e58-459c-8e4a-ef58a7215602",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// Return: an array of approximately evenly spaced points along a cubic Bezier curve\n//\n// Attribution: Stackoverflow's @Blindman67\n// Cite: http://stackoverflow.com/questions/36637211/drawing-a-curved-line-in-css-or-canvas-and-moving-circle-along-it/36827074#36827074\n// As modified from the above citation\n// \n// ptCount: sample this many points at interval along the curve\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By,Cx,Cy,Dx,Dy: control points defining the curve\n//\nfunction plotCBez(ptCount,pxTolerance,Ax,Ay,Bx,By,Cx,Cy,Dx,Dy){\n    var deltaBAx=Bx-Ax;\n    var deltaCBx=Cx-Bx;\n    var deltaDCx=Dx-Cx;\n    var deltaBAy=By-Ay;\n    var deltaCBy=Cy-By;\n    var deltaDCy=Dy-Cy;\n    var ax,ay,bx,by;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003cptCount;i++){\n        var t=i/ptCount;\n        ax=Ax+deltaBAx*t;\n        bx=Bx+deltaCBx*t;\n        cx=Cx+deltaDCx*t;\n        ax+=(bx-ax)*t;\n        bx+=(cx-bx)*t;\n        //\n        ay=Ay+deltaBAy*t;\n        by=By+deltaCBy*t;\n        cy=Cy+deltaDCy*t;\n        ay+=(by-ay)*t;\n        by+=(cy-by)*t;\n        var x=ax+(bx-ax)*t;\n        var y=ay+(by-ay)*t;\n        var dx=x-lastX;\n        var dy=y-lastY;\n        if(dx*dx+dy*dy\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Dx,y:Dy});\n    return(pts);\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// Return: an array of approximately evenly spaced points along a cubic Bezier curve\n//\n// Attribution: Stackoverflow's @Blindman67\n// Cite: http://stackoverflow.com/questions/36637211/drawing-a-curved-line-in-css-or-canvas-and-moving-circle-along-it/36827074#36827074\n// As modified from the above citation\n// \n// ptCount: sample this many points at interval along the curve\n// pxTolerance: approximate spacing allowed between points\n// Ax,Ay,Bx,By,Cx,Cy,Dx,Dy: control points defining the curve\n//\nfunction plotCBez(ptCount,pxTolerance,Ax,Ay,Bx,By,Cx,Cy,Dx,Dy){\n    var deltaBAx=Bx-Ax;\n    var deltaCBx=Cx-Bx;\n    var deltaDCx=Dx-Cx;\n    var deltaBAy=By-Ay;\n    var deltaCBy=Cy-By;\n    var deltaDCy=Dy-Cy;\n    var ax,ay,bx,by;\n    var lastX=-10000;\n    var lastY=-10000;\n    var pts=[{x:Ax,y:Ay}];\n    for(var i=1;i\u003cptCount;i++){\n        var t=i/ptCount;\n        ax=Ax+deltaBAx*t;\n        bx=Bx+deltaCBx*t;\n        cx=Cx+deltaDCx*t;\n        ax+=(bx-ax)*t;\n        bx+=(cx-bx)*t;\n        //\n        ay=Ay+deltaBAy*t;\n        by=By+deltaCBy*t;\n        cy=Cy+deltaDCy*t;\n        ay+=(by-ay)*t;\n        by+=(cy-by)*t;\n        var x=ax+(bx-ax)*t;\n        var y=ay+(by-ay)*t;\n        var dx=x-lastX;\n        var dy=y-lastY;\n        if(dx*dx+dy*dy\u003epxTolerance){\n            pts.push({x:x,y:y});\n            lastX=x;\n            lastY=y;\n        }\n    }\n    pts.push({x:Dx,y:Dy});\n    return(pts);\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Finding points along a cubic Bezier curve",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}