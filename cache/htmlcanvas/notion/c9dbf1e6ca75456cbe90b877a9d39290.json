{
  "ID": "c9dbf1e6-ca75-456c-be90-b877a9d39290",
  "Root": {
    "id": "c9dbf1e6-ca75-456c-be90-b877a9d39290",
    "alive": true,
    "content": [
      "58490f63-6453-4061-b409-a37b8d0919f5",
      "c1127767-fd49-4e87-b3cf-99328a2d5571",
      "25897b3e-a901-406d-aeca-3f9179a8b5ff",
      "4f8edef7-291f-43a0-bdb1-28d2c0e8ba2d"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949719847,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949719847,
    "parent_id": "c37198be-d8f3-48ef-8bfc-2cebe79b5d8b",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Are 2 convex polygons colliding"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "58490f63-6453-4061-b409-a37b8d0919f5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949719845,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949719845,
        "parent_id": "c9dbf1e6-ca75-456c-be90-b877a9d39290",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Use the Separating Axis Theorem to determine if 2 convex polygons are intersecting"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Use the Separating Axis Theorem to determine if 2 convex polygons are intersecting"
          }
        ]
      },
      {
        "id": "c1127767-fd49-4e87-b3cf-99328a2d5571",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949719847,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949719847,
        "parent_id": "c9dbf1e6-ca75-456c-be90-b877a9d39290",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "THE POLYGONS MUST BE CONVEX",
              [
                [
                  "i"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "THE POLYGONS MUST BE CONVEX",
            "AttrFlags": 4
          }
        ]
      },
      {
        "id": "25897b3e-a901-406d-aeca-3f9179a8b5ff",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949719847,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949719847,
        "parent_id": "c9dbf1e6-ca75-456c-be90-b877a9d39290",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Attribution: Markus Jarderot @ http://stackoverflow.com/questions/10962379/how-to-check-intersection-between-2-rotated-rectangles"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Attribution: Markus Jarderot @ http://stackoverflow.com/questions/10962379/how-to-check-intersection-between-2-rotated-rectangles"
          }
        ]
      },
      {
        "id": "4f8edef7-291f-43a0-bdb1-28d2c0e8ba2d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949719847,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949719847,
        "parent_id": "c9dbf1e6-ca75-456c-be90-b877a9d39290",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// polygon objects are an array of vertices forming the polygon\n//     var polygon1=[{x:100,y:100},{x:150,y:150},{x:50,y:150},...];\n// THE POLYGONS MUST BE CONVEX\n// return true if the 2 polygons are colliding \n\nfunction convexPolygonsCollide(a, b){\n    var polygons = [a, b];\n    var minA, maxA, projected, i, i1, j, minB, maxB;\n\n    for (i = 0; i \u003c polygons.length; i++) {\n\n        // for each polygon, look at each edge of the polygon, and determine if it separates\n        // the two shapes\n        var polygon = polygons[i];\n        for (i1 = 0; i1 \u003c polygon.length; i1++) {\n\n            // grab 2 vertices to create an edge\n            var i2 = (i1 + 1) % polygon.length;\n            var p1 = polygon[i1];\n            var p2 = polygon[i2];\n\n            // find the line perpendicular to this edge\n            var normal = { x: p2.y - p1.y, y: p1.x - p2.x };\n\n            minA = maxA = undefined;\n            // for each vertex in the first shape, project it onto the line perpendicular to the edge\n            // and keep track of the min and max of these values\n            for (j = 0; j \u003c a.length; j++) {\n                projected = normal.x * a[j].x + normal.y * a[j].y;\n                if (minA==undefined || projected \u003c minA) {\n                    minA = projected;\n                }\n                if (maxA==undefined || projected \u003e maxA) {\n                    maxA = projected;\n                }\n            }\n\n            // for each vertex in the second shape, project it onto the line perpendicular to the edge\n            // and keep track of the min and max of these values\n            minB = maxB = undefined;\n            for (j = 0; j \u003c b.length; j++) {\n                projected = normal.x * b[j].x + normal.y * b[j].y;\n                if (minB==undefined || projected \u003c minB) {\n                    minB = projected;\n                }\n                if (maxB==undefined || projected \u003e maxB) {\n                    maxB = projected;\n                }\n            }\n\n            // if there is no overlap between the projects, the edge we are looking at separates the two\n            // polygons, and we know there is no overlap\n            if (maxA \u003c minB || maxB \u003c minA) {\n                return false;\n            }\n        }\n    }\n    return true;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// polygon objects are an array of vertices forming the polygon\n//     var polygon1=[{x:100,y:100},{x:150,y:150},{x:50,y:150},...];\n// THE POLYGONS MUST BE CONVEX\n// return true if the 2 polygons are colliding \n\nfunction convexPolygonsCollide(a, b){\n    var polygons = [a, b];\n    var minA, maxA, projected, i, i1, j, minB, maxB;\n\n    for (i = 0; i \u003c polygons.length; i++) {\n\n        // for each polygon, look at each edge of the polygon, and determine if it separates\n        // the two shapes\n        var polygon = polygons[i];\n        for (i1 = 0; i1 \u003c polygon.length; i1++) {\n\n            // grab 2 vertices to create an edge\n            var i2 = (i1 + 1) % polygon.length;\n            var p1 = polygon[i1];\n            var p2 = polygon[i2];\n\n            // find the line perpendicular to this edge\n            var normal = { x: p2.y - p1.y, y: p1.x - p2.x };\n\n            minA = maxA = undefined;\n            // for each vertex in the first shape, project it onto the line perpendicular to the edge\n            // and keep track of the min and max of these values\n            for (j = 0; j \u003c a.length; j++) {\n                projected = normal.x * a[j].x + normal.y * a[j].y;\n                if (minA==undefined || projected \u003c minA) {\n                    minA = projected;\n                }\n                if (maxA==undefined || projected \u003e maxA) {\n                    maxA = projected;\n                }\n            }\n\n            // for each vertex in the second shape, project it onto the line perpendicular to the edge\n            // and keep track of the min and max of these values\n            minB = maxB = undefined;\n            for (j = 0; j \u003c b.length; j++) {\n                projected = normal.x * b[j].x + normal.y * b[j].y;\n                if (minB==undefined || projected \u003c minB) {\n                    minB = projected;\n                }\n                if (maxB==undefined || projected \u003e maxB) {\n                    maxB = projected;\n                }\n            }\n\n            // if there is no overlap between the projects, the edge we are looking at separates the two\n            // polygons, and we know there is no overlap\n            if (maxA \u003c minB || maxB \u003c minA) {\n                return false;\n            }\n        }\n    }\n    return true;\n};",
        "code_language": "Plain Text"
      }
    ],
    "title": "Are 2 convex polygons colliding",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}