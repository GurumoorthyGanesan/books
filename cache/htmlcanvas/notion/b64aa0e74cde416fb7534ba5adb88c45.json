{
  "ID": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
  "Root": {
    "id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
    "alive": true,
    "content": [
      "ce8116a1-b5d0-46f4-8c43-99af4aef9d93",
      "5f63ebe8-a390-4032-9c52-792d8b6c8e38",
      "ae67f5ba-32ca-4dbe-ac1e-5c34ce02a8fa",
      "803c00a9-9a08-4d31-8b2d-84a6e1e39818",
      "e3114f6d-d8c5-4de5-ba49-8948a714b938",
      "6c03fda0-30e5-4d9e-b72d-98ed4810cb6b",
      "823a345c-2528-4fe9-8958-cc377608a760",
      "de5b74fe-0b1d-4595-9573-e287aea305ad",
      "0e004cdd-bc3a-448d-ad92-21225906831b",
      "8002030d-35d7-433c-bd75-8d4e46e2730b",
      "c5e06ae6-9d07-47e0-9260-b5781a0fe339",
      "e3cadc15-6a93-437f-9f5c-8914dcf3bb6d",
      "36b6795c-6f0a-4f82-bcd8-ea04abe9305c",
      "cf4c4ac6-97ba-4211-89d9-5b23ab188858",
      "197bc5f3-115d-4870-a81e-f809a5198c85",
      "b68fdf11-abbf-44db-88fa-948ee87d6dc7",
      "0f46a9dc-09f8-4d78-851c-9b64a0f0c8d5",
      "1bda7de7-7962-4163-8cde-fca19081f704"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949782732,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949782732,
    "parent_id": "dd776e0e-e228-4dd6-99b4-439d20e57076",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dragging circles rectangles around the Canvas"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "ce8116a1-b5d0-46f4-8c43-99af4aef9d93",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782728,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782728,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What is a “Shape”?"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "What is a “Shape”?"
          }
        ]
      },
      {
        "id": "5f63ebe8-a390-4032-9c52-792d8b6c8e38",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782730,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782730,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You typically save your shapes by creating a JavaScript “shape” object representing each shape."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You typically save your shapes by creating a JavaScript “shape” object representing each shape."
          }
        ]
      },
      {
        "id": "ae67f5ba-32ca-4dbe-ac1e-5c34ce02a8fa",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782730,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782730,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var myCircle = { x:30, y:20, radius:15 };"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var myCircle = { x:30, y:20, radius:15 };",
        "code_language": "Plain Text"
      },
      {
        "id": "803c00a9-9a08-4d31-8b2d-84a6e1e39818",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Of course, you’re not really saving shapes. Instead, you’re saving the definition of how to draw the shapes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Of course, you’re not really saving shapes. Instead, you’re saving the definition of how to draw the shapes."
          }
        ]
      },
      {
        "id": "e3114f6d-d8c5-4de5-ba49-8948a714b938",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then put every shape-object into an array for easy reference."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then put every shape-object into an array for easy reference."
          }
        ]
      },
      {
        "id": "6c03fda0-30e5-4d9e-b72d-98ed4810cb6b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// save relevant information about shapes drawn on the canvas\nvar shapes=[];\n\n// define one circle and save it in the shapes[] array\nshapes.push( {x:10, y:20, radius:15, fillcolor:'blue'} );\n\n// define one rectangle and save it in the shapes[] array\nshapes.push( {x:10, y:100, width:50, height:35, fillcolor:'red'} );"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// save relevant information about shapes drawn on the canvas\nvar shapes=[];\n\n// define one circle and save it in the shapes[] array\nshapes.push( {x:10, y:20, radius:15, fillcolor:'blue'} );\n\n// define one rectangle and save it in the shapes[] array\nshapes.push( {x:10, y:100, width:50, height:35, fillcolor:'red'} );",
        "code_language": "Plain Text"
      },
      {
        "id": "823a345c-2528-4fe9-8958-cc377608a760",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using mouse events to do Dragging"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using mouse events to do Dragging"
          }
        ]
      },
      {
        "id": "de5b74fe-0b1d-4595-9573-e287aea305ad",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Dragging a shape or image requires responding to these mouse events:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Dragging a shape or image requires responding to these mouse events:"
          }
        ]
      },
      {
        "id": "0e004cdd-bc3a-448d-ad92-21225906831b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On mousedown:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On mousedown:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "8002030d-35d7-433c-bd75-8d4e46e2730b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Test if any shape is under the mouse. If a shape is under the mouse, the user is intending to drag that shape. So keep a reference to that shape and set a true/false "
            ],
            [
              "isDragging",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " flag indicating that a drag is in process."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Test if any shape is under the mouse. If a shape is under the mouse, the user is intending to drag that shape. So keep a reference to that shape and set a true/false "
          },
          {
            "Text": "isDragging",
            "AttrFlags": 2
          },
          {
            "Text": " flag indicating that a drag is in process."
          }
        ]
      },
      {
        "id": "c5e06ae6-9d07-47e0-9260-b5781a0fe339",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782731,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782731,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On mousemove:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On mousemove:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "e3cadc15-6a93-437f-9f5c-8914dcf3bb6d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calculate the distance that the mouse has been dragged since the last "
            ],
            [
              "mousemove",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " event and change the dragged shape’s position by that distance. To change the shape’s position, you change the "
            ],
            [
              "x,y",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " position properties in that shape’s object."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Calculate the distance that the mouse has been dragged since the last "
          },
          {
            "Text": "mousemove",
            "AttrFlags": 2
          },
          {
            "Text": " event and change the dragged shape’s position by that distance. To change the shape’s position, you change the "
          },
          {
            "Text": "x,y",
            "AttrFlags": 2
          },
          {
            "Text": " position properties in that shape’s object."
          }
        ]
      },
      {
        "id": "36b6795c-6f0a-4f82-bcd8-ea04abe9305c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On mouseup or mouseout:",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On mouseup or mouseout:",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "cf4c4ac6-97ba-4211-89d9-5b23ab188858",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The user is intending to stop the drag operation, so clear the “isDragging” flag. Dragging is completed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The user is intending to stop the drag operation, so clear the “isDragging” flag. Dragging is completed."
          }
        ]
      },
      {
        "id": "197bc5f3-115d-4870-a81e-f809a5198c85",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Demo: Dragging circles \u0026 rectangles on the canvas"
            ]
          ]
        },
        "type": "header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Demo: Dragging circles \u0026 rectangles on the canvas"
          }
        ]
      },
      {
        "id": "b68fdf11-abbf-44db-88fa-948ee87d6dc7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This demo drags circles \u0026 rectangles on the canvas by responding to mouse events and giving the illusion of movement by clearing and redrawing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This demo drags circles \u0026 rectangles on the canvas by responding to mouse events and giving the illusion of movement by clearing and redrawing."
          }
        ]
      },
      {
        "id": "0f46a9dc-09f8-4d78-851c-9b64a0f0c8d5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// canvas related vars\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\nvar cw=canvas.width;\nvar ch=canvas.height;\ndocument.body.appendChild(canvas);\ncanvas.style.border='1px solid red';\n\n// used to calc canvas position relative to window\nfunction reOffset(){\n    var BB=canvas.getBoundingClientRect();\n    offsetX=BB.left;\n    offsetY=BB.top;        \n}\nvar offsetX,offsetY;\nreOffset();\nwindow.onscroll=function(e){ reOffset(); }\nwindow.onresize=function(e){ reOffset(); }\ncanvas.onresize=function(e){ reOffset(); }\n\n// save relevant information about shapes drawn on the canvas\nvar shapes=[];\n// define one circle and save it in the shapes[] array\nshapes.push( {x:30, y:30, radius:15, color:'blue'} );\n// define one rectangle and save it in the shapes[] array\nshapes.push( {x:100, y:-1, width:75, height:35, color:'red'} );"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// canvas related vars\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\nvar cw=canvas.width;\nvar ch=canvas.height;\ndocument.body.appendChild(canvas);\ncanvas.style.border='1px solid red';\n\n// used to calc canvas position relative to window\nfunction reOffset(){\n    var BB=canvas.getBoundingClientRect();\n    offsetX=BB.left;\n    offsetY=BB.top;        \n}\nvar offsetX,offsetY;\nreOffset();\nwindow.onscroll=function(e){ reOffset(); }\nwindow.onresize=function(e){ reOffset(); }\ncanvas.onresize=function(e){ reOffset(); }\n\n// save relevant information about shapes drawn on the canvas\nvar shapes=[];\n// define one circle and save it in the shapes[] array\nshapes.push( {x:30, y:30, radius:15, color:'blue'} );\n// define one rectangle and save it in the shapes[] array\nshapes.push( {x:100, y:-1, width:75, height:35, color:'red'} );",
        "code_language": "Plain Text"
      },
      {
        "id": "1bda7de7-7962-4163-8cde-fca19081f704",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949782732,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949782732,
        "parent_id": "b64aa0e7-4cde-416f-b753-4ba5adb88c45",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// drag related vars\nvar isDragging=false;\nvar startX,startY;\n\n// hold the index of the shape being dragged (if any)\nvar selectedShapeIndex;\n\n// draw the shapes on the canvas\ndrawAll();\n\n// listen for mouse events\ncanvas.onmousedown=handleMouseDown;\ncanvas.onmousemove=handleMouseMove;\ncanvas.onmouseup=handleMouseUp;\ncanvas.onmouseout=handleMouseOut;\n\n// given mouse X \u0026 Y (mx \u0026 my) and shape object\n// return true/false whether mouse is inside the shape\nfunction isMouseInShape(mx,my,shape){\n    if(shape.radius){\n        // this is a circle\n        var dx=mx-shape.x;\n        var dy=my-shape.y;\n        // math test to see if mouse is inside circle\n        if(dx*dx+dy*dy\u003cshape.radius*shape.radius){\n            // yes, mouse is inside this circle\n            return(true);\n        }\n    }else if(shape.width){\n        // this is a rectangle\n        var rLeft=shape.x;\n        var rRight=shape.x+shape.width;\n        var rTop=shape.y;\n        var rBott=shape.y+shape.height;\n        // math test to see if mouse is inside rectangle\n        if( mx\u003erLeft \u0026\u0026 mx\u003crRight \u0026\u0026 my\u003erTop \u0026\u0026 my\u003crBott){\n            return(true);\n        }\n    }\n    // the mouse isn't in any of the shapes\n    return(false);\n}\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    startX=parseInt(e.clientX-offsetX);\n    startY=parseInt(e.clientY-offsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    for(var i=0;i\u003cshapes.length;i++){\n        if(isMouseInShape(startX,startY,shapes[i])){\n            // the mouse is inside this shape\n            // select this shape\n            selectedShapeIndex=i;\n            // set the isDragging flag\n            isDragging=true;\n            // and return (==stop looking for \n            //     further shapes under the mouse)\n            return;\n        }\n    }\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    mouseX=parseInt(e.clientX-offsetX);\n    mouseY=parseInt(e.clientY-offsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-startX;\n    var dy=mouseY-startY;\n    // move the selected shape by the drag distance\n    var selectedShape=shapes[selectedShapeIndex];\n    selectedShape.x+=dx;\n    selectedShape.y+=dy;\n    // clear the canvas and redraw all shapes\n    drawAll();\n    // update the starting drag position (== the current mouse position)\n    startX=mouseX;\n    startY=mouseY;\n}\n\n// clear the canvas and \n// redraw all shapes in their current positions\nfunction drawAll(){\n    ctx.clearRect(0,0,cw,ch);\n    for(var i=0;i\u003cshapes.length;i++){\n        var shape=shapes[i];\n        if(shape.radius){\n            // it's a circle\n            ctx.beginPath();\n            ctx.arc(shape.x,shape.y,shape.radius,0,Math.PI*2);\n            ctx.fillStyle=shape.color;\n            ctx.fill();\n        }else if(shape.width){\n            // it's a rectangle\n            ctx.fillStyle=shape.color;\n            ctx.fillRect(shape.x,shape.y,shape.width,shape.height);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// drag related vars\nvar isDragging=false;\nvar startX,startY;\n\n// hold the index of the shape being dragged (if any)\nvar selectedShapeIndex;\n\n// draw the shapes on the canvas\ndrawAll();\n\n// listen for mouse events\ncanvas.onmousedown=handleMouseDown;\ncanvas.onmousemove=handleMouseMove;\ncanvas.onmouseup=handleMouseUp;\ncanvas.onmouseout=handleMouseOut;\n\n// given mouse X \u0026 Y (mx \u0026 my) and shape object\n// return true/false whether mouse is inside the shape\nfunction isMouseInShape(mx,my,shape){\n    if(shape.radius){\n        // this is a circle\n        var dx=mx-shape.x;\n        var dy=my-shape.y;\n        // math test to see if mouse is inside circle\n        if(dx*dx+dy*dy\u003cshape.radius*shape.radius){\n            // yes, mouse is inside this circle\n            return(true);\n        }\n    }else if(shape.width){\n        // this is a rectangle\n        var rLeft=shape.x;\n        var rRight=shape.x+shape.width;\n        var rTop=shape.y;\n        var rBott=shape.y+shape.height;\n        // math test to see if mouse is inside rectangle\n        if( mx\u003erLeft \u0026\u0026 mx\u003crRight \u0026\u0026 my\u003erTop \u0026\u0026 my\u003crBott){\n            return(true);\n        }\n    }\n    // the mouse isn't in any of the shapes\n    return(false);\n}\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    startX=parseInt(e.clientX-offsetX);\n    startY=parseInt(e.clientY-offsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    for(var i=0;i\u003cshapes.length;i++){\n        if(isMouseInShape(startX,startY,shapes[i])){\n            // the mouse is inside this shape\n            // select this shape\n            selectedShapeIndex=i;\n            // set the isDragging flag\n            isDragging=true;\n            // and return (==stop looking for \n            //     further shapes under the mouse)\n            return;\n        }\n    }\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    mouseX=parseInt(e.clientX-offsetX);\n    mouseY=parseInt(e.clientY-offsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-startX;\n    var dy=mouseY-startY;\n    // move the selected shape by the drag distance\n    var selectedShape=shapes[selectedShapeIndex];\n    selectedShape.x+=dx;\n    selectedShape.y+=dy;\n    // clear the canvas and redraw all shapes\n    drawAll();\n    // update the starting drag position (== the current mouse position)\n    startX=mouseX;\n    startY=mouseY;\n}\n\n// clear the canvas and \n// redraw all shapes in their current positions\nfunction drawAll(){\n    ctx.clearRect(0,0,cw,ch);\n    for(var i=0;i\u003cshapes.length;i++){\n        var shape=shapes[i];\n        if(shape.radius){\n            // it's a circle\n            ctx.beginPath();\n            ctx.arc(shape.x,shape.y,shape.radius,0,Math.PI*2);\n            ctx.fillStyle=shape.color;\n            ctx.fill();\n        }else if(shape.width){\n            // it's a rectangle\n            ctx.fillStyle=shape.color;\n            ctx.fillRect(shape.x,shape.y,shape.width,shape.height);\n        }\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Dragging circles rectangles around the Canvas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}