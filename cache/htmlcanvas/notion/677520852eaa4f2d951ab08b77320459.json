{
  "ID": "67752085-2eaa-4f2d-951a-b08b77320459",
  "Root": {
    "id": "67752085-2eaa-4f2d-951a-b08b77320459",
    "alive": true,
    "content": [
      "cfdc0fe4-aa77-4e26-bad6-df807f574d1b",
      "56e2867b-40e4-49ef-98cb-88e92081bab4",
      "a3ace0ec-3600-4ae6-b67f-c3f903a206f1",
      "77a19c1f-c248-4242-8923-479e6c2c7b20",
      "ea4cdf2d-b8d3-4d26-9919-5c90523ae4b6",
      "795a6fea-4cf5-4ac8-bc68-86a97e43d2dc",
      "4bd826a5-d321-4d6b-9b7b-2d521f013333",
      "d29a929f-7177-40c3-88de-e6980e4d99bc",
      "4be3619c-3a93-4382-acbd-dfc81f2af5eb",
      "d25bea67-5088-414a-982d-7a5f3ba1b0f2",
      "5d2cb15e-f9c8-4045-b647-5c5537337116",
      "cb354614-21cb-441b-8bff-3463570afbc7",
      "a2cf9a1c-aacf-4f63-a635-f5c40a2e23b5",
      "29f0fe35-a2db-47eb-9f2a-86dbd9132efc",
      "c720f583-34bf-4097-999f-5656fd858b7f",
      "7a92c61f-013b-480c-a6f1-fe9740082f7b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949774643,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949774643,
    "parent_id": "69ada749-d571-44f8-9e7e-47f98efde9a1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Trim bezier curve."
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "cfdc0fe4-aa77-4e26-bad6-df807f574d1b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774638,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774638,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example show you how to trim a bezier."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example show you how to trim a bezier."
          }
        ]
      },
      {
        "id": "56e2867b-40e4-49ef-98cb-88e92081bab4",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774641,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774641,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function trimBezier trims the ends off of the curve returning the curve "
            ],
            [
              "fromPos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "toPos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". "
            ],
            [
              "fromPos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "toPos",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are in the range 0 to 1 inclusive, It can trim quadratic and cubic curves. The curve type is determined by the last x argument "
            ],
            [
              "x4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If not "
            ],
            [
              "undefined",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then it assumes the curve is cubic else the curve is a quadratic"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function trimBezier trims the ends off of the curve returning the curve "
          },
          {
            "Text": "fromPos",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "toPos",
            "AttrFlags": 2
          },
          {
            "Text": ". "
          },
          {
            "Text": "fromPos",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "toPos",
            "AttrFlags": 2
          },
          {
            "Text": " are in the range 0 to 1 inclusive, It can trim quadratic and cubic curves. The curve type is determined by the last x argument "
          },
          {
            "Text": "x4",
            "AttrFlags": 2
          },
          {
            "Text": ". If not "
          },
          {
            "Text": "undefined",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " then it assumes the curve is cubic else the curve is a quadratic"
          }
        ]
      },
      {
        "id": "a3ace0ec-3600-4ae6-b67f-c3f903a206f1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774641,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774641,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The trimmed curve is returned as an array of points. 6 points for quadratic curves and 8 for cubic curves."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The trimmed curve is returned as an array of points. 6 points for quadratic curves and 8 for cubic curves."
          }
        ]
      },
      {
        "id": "77a19c1f-c248-4242-8923-479e6c2c7b20",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774641,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774641,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "ea4cdf2d-b8d3-4d26-9919-5c90523ae4b6",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774641,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774641,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Usage"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Usage"
          }
        ]
      },
      {
        "id": "795a6fea-4cf5-4ac8-bc68-86a97e43d2dc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774641,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774641,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Trimming a quadratic curve."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Trimming a quadratic curve."
          }
        ]
      },
      {
        "id": "4bd826a5-d321-4d6b-9b7b-2d521f013333",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774641,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774641,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar newCurve = splitCurveAt(0.25, 0.75, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y)\n\nvar i = 0;\nvar p = newCurve\n// Draw the trimmed curve\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.quadraticCurveTo(p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar newCurve = splitCurveAt(0.25, 0.75, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y)\n\nvar i = 0;\nvar p = newCurve\n// Draw the trimmed curve\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.quadraticCurveTo(p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();",
        "code_language": "Plain Text"
      },
      {
        "id": "d29a929f-7177-40c3-88de-e6980e4d99bc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Trimming a cubic curve."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Trimming a cubic curve."
          }
        ]
      },
      {
        "id": "4be3619c-3a93-4382-acbd-dfc81f2af5eb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar p4 = {x : 300, y : 100};\nvar newCurve = splitCurveAt(0.25, 0.75, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y)\n\nvar i = 0;\nvar p = newCurve\n// Draw the trimmed curve\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.bezierCurveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar p4 = {x : 300, y : 100};\nvar newCurve = splitCurveAt(0.25, 0.75, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y)\n\nvar i = 0;\nvar p = newCurve\n// Draw the trimmed curve\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.bezierCurveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();",
        "code_language": "Plain Text"
      },
      {
        "id": "d25bea67-5088-414a-982d-7a5f3ba1b0f2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "5d2cb15e-f9c8-4045-b647-5c5537337116",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example Function"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example Function"
          }
        ]
      },
      {
        "id": "cb354614-21cb-441b-8bff-3463570afbc7",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "trimBezier = function(fromPos, toPos, x1, y1, x2, y2, x3, y3, [x4, y4])",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "trimBezier = function(fromPos, toPos, x1, y1, x2, y2, x3, y3, [x4, y4])",
            "AttrFlags": 1
          }
        ]
      },
      {
        "id": "a2cf9a1c-aacf-4f63-a635-f5c40a2e23b5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: Arguments inside [x4, y4] are optional."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: Arguments inside [x4, y4] are optional."
          }
        ]
      },
      {
        "id": "29f0fe35-a2db-47eb-9f2a-86dbd9132efc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: This function requires the function in the example Split Bezier Curves At in this section"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: This function requires the function in the example Split Bezier Curves At in this section"
          }
        ]
      },
      {
        "id": "c720f583-34bf-4097-999f-5656fd858b7f",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var trimBezier = function(fromPos, toPos, x1, y1, x2, y2, x3, y3, x4, y4){\n    var quad, i, s, retBez;\n    quad = false;\n    if(x4 === undefined || x4 === null){\n        quad = true;  // this is a quadratic bezier    \n    }\n    if(fromPos \u003e toPos){ // swap is from is after to\n        i = fromPos;\n        fromPos = toPos\n        toPos = i;\n    }\n    // clamp to on the curve\n    toPos = toPos \u003c= 0 ? 0 : toPos \u003e= 1 ? 1 : toPos;\n    fromPos = fromPos \u003c= 0 ? 0 : fromPos \u003e= 1 ? 1 : fromPos;\n    if(toPos === fromPos){\n        s = splitBezierAt(toPos, x1, y1, x2, y2, x3, y3, x4, y4);\n        i = quad ? 4 : 6;\n        retBez = [s[i], s[i+1], s[i], s[i+1], s[i], s[i+1]];\n        if(!quad){\n            retBez.push(s[i], s[i+1]);\n        }\n        return retBez;\n    }\n    if(toPos === 1 \u0026\u0026 fromPos === 0){       // no trimming required\n        retBez = [x1, y1, x2, y2, x3, y3];  // return original bezier\n        if(!quad){\n            retBez.push(x4, y4);\n        }\n        return retBez;\n    }\n    if(fromPos === 0){\n        if(toPos \u003c 1){\n            s = splitBezierAt(toPos, x1, y1, x2, y2, x3, y3, x4, y4);\n            i = 0;\n            retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n            if(!quad){\n                retBez.push(s[i++], s[i++]);\n            }\n        }\n        return retBez;\n    }\n    if(toPos === 1){\n        if(fromPos \u003c 1){\n            s = splitBezierAt(toPos, x1, y1, x2, y2, x3, y3, x4, y4);\n            i = quad ? 4 : 6;\n            retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n            if(!quad){\n                retBez.push(s[i++], s[i++]);\n            }\n        }\n        return retBez;\n    }\n    s = splitBezierAt(fromPos, x1, y1, x2, y2, x3, y3, x4, y4);\n    if(quad){\n        i = 4;\n        toPos = (toPos - fromPos) / (1 - fromPos);\n        s = splitBezierAt(toPos, s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]);\n        i = 0;\n        retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n        return retBez;\n        \n    }\n    i = 6;\n    toPos = (toPos - fromPos) / (1 - fromPos);\n    s = splitBezierAt(toPos, s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]);\n    i = 0;\n    retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n    return retBez;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var trimBezier = function(fromPos, toPos, x1, y1, x2, y2, x3, y3, x4, y4){\n    var quad, i, s, retBez;\n    quad = false;\n    if(x4 === undefined || x4 === null){\n        quad = true;  // this is a quadratic bezier    \n    }\n    if(fromPos \u003e toPos){ // swap is from is after to\n        i = fromPos;\n        fromPos = toPos\n        toPos = i;\n    }\n    // clamp to on the curve\n    toPos = toPos \u003c= 0 ? 0 : toPos \u003e= 1 ? 1 : toPos;\n    fromPos = fromPos \u003c= 0 ? 0 : fromPos \u003e= 1 ? 1 : fromPos;\n    if(toPos === fromPos){\n        s = splitBezierAt(toPos, x1, y1, x2, y2, x3, y3, x4, y4);\n        i = quad ? 4 : 6;\n        retBez = [s[i], s[i+1], s[i], s[i+1], s[i], s[i+1]];\n        if(!quad){\n            retBez.push(s[i], s[i+1]);\n        }\n        return retBez;\n    }\n    if(toPos === 1 \u0026\u0026 fromPos === 0){       // no trimming required\n        retBez = [x1, y1, x2, y2, x3, y3];  // return original bezier\n        if(!quad){\n            retBez.push(x4, y4);\n        }\n        return retBez;\n    }\n    if(fromPos === 0){\n        if(toPos \u003c 1){\n            s = splitBezierAt(toPos, x1, y1, x2, y2, x3, y3, x4, y4);\n            i = 0;\n            retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n            if(!quad){\n                retBez.push(s[i++], s[i++]);\n            }\n        }\n        return retBez;\n    }\n    if(toPos === 1){\n        if(fromPos \u003c 1){\n            s = splitBezierAt(toPos, x1, y1, x2, y2, x3, y3, x4, y4);\n            i = quad ? 4 : 6;\n            retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n            if(!quad){\n                retBez.push(s[i++], s[i++]);\n            }\n        }\n        return retBez;\n    }\n    s = splitBezierAt(fromPos, x1, y1, x2, y2, x3, y3, x4, y4);\n    if(quad){\n        i = 4;\n        toPos = (toPos - fromPos) / (1 - fromPos);\n        s = splitBezierAt(toPos, s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]);\n        i = 0;\n        retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n        return retBez;\n        \n    }\n    i = 6;\n    toPos = (toPos - fromPos) / (1 - fromPos);\n    s = splitBezierAt(toPos, s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]);\n    i = 0;\n    retBez = [s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++], s[i++]];\n    return retBez;\n}",
        "code_language": "Plain Text"
      },
      {
        "id": "7a92c61f-013b-480c-a6f1-fe9740082f7b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949774642,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949774642,
        "parent_id": "67752085-2eaa-4f2d-951a-b08b77320459",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003c!—- Please note anyone editing this example that it is dependent on the example Split Bezier Curves At. If you make changes to either example please ensure that they remain compatible. If you remove the dependent please provide a replacement function or remove this as well (and may you be infested with bugs) —–!\u003e"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003c!—- Please note anyone editing this example that it is dependent on the example Split Bezier Curves At. If you make changes to either example please ensure that they remain compatible. If you remove the dependent please provide a replacement function or remove this as well (and may you be infested with bugs) —–!\u003e"
          }
        ]
      }
    ],
    "title": "Trim bezier curve.",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}