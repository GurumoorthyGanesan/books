{
  "ID": "33aa3726-ce6f-4b4e-9d76-3a7374e42113",
  "Root": {
    "alive": true,
    "content": [
      "284f202b-bf02-4ef3-b2c6-a4676f5e2e03",
      "4a1a2fd3-ebb0-4bb1-ab23-7ef5ba378208",
      "0c0ec41c-af25-456b-bbde-813b806c7059"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949706615,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "33aa3726-ce6f-4b4e-9d76-3a7374e42113",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949706615,
    "parent_id": "43473e47-27d0-430a-914d-cd63a767322a",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Simple animation with 2D context and requestAnimationFrame"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949706614,
        "id": "284f202b-bf02-4ef3-b2c6-a4676f5e2e03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949706614,
        "parent_id": "33aa3726-ce6f-4b4e-9d76-3a7374e42113",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example will show you how to create a simple animation using the canvas and the 2D context. It is assumed you know how to create and add a canvas to the DOM and obtain the context"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example will show you how to create a simple animation using the canvas and the 2D context. It is assumed you know how to create and add a canvas to the DOM and obtain the context"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949706614,
        "id": "4a1a2fd3-ebb0-4bb1-ab23-7ef5ba378208",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949706615,
        "parent_id": "33aa3726-ce6f-4b4e-9d76-3a7374e42113",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// this example assumes ctx and canvas have been created\nconst textToDisplay = \"This is an example that uses the canvas to animate some text.\";\nconst textStyle     = \"white\";\nconst BGStyle       = \"black\";  // background style\nconst textSpeed     = 0.2;      // in pixels per millisecond\nconst textHorMargin = 8;        // have the text a little outside the canvas \n\n\nctx.font = Math.floor(canvas.height * 0.8) + \"px arial\"; // size the font to 80% of canvas height\nvar textWidth     = ctx.measureText(textToDisplay).width; // get the text width\nvar totalTextSize = (canvas.width + textHorMargin * 2 + textWidth);\nctx.textBaseline  = \"middle\";           // not put the text in the vertical center\nctx.textAlign     = \"left\";             // align to the left\nvar textX         = canvas.width + 8;   // start with the text off screen to the right\nvar textOffset    = 0;                  // how far the text has moved\n\nvar startTime;\n// this function is call once a frame which is approx 16.66 ms (60fps)\nfunction update(time){              // time is passed by requestAnimationFrame\n    if(startTime === undefined){    // get a reference for the start time if this is the first frame\n        startTime = time;\n    }\n    ctx.fillStyle = BGStyle;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);                    // clear the canvas by drawing over it\n    textOffset    = ((time - startTime) * textSpeed) % (totalTextSize); // move the text left \n    ctx.fillStyle = textStyle;                                          // set the text style\n    ctx.fillText(textToDisplay, textX - textOffset, canvas.height / 2); // render the text\n\n    requestAnimationFrame(update);// all done request the next frame\n}\nrequestAnimationFrame(update);// to start request the first frame"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// this example assumes ctx and canvas have been created\nconst textToDisplay = \"This is an example that uses the canvas to animate some text.\";\nconst textStyle     = \"white\";\nconst BGStyle       = \"black\";  // background style\nconst textSpeed     = 0.2;      // in pixels per millisecond\nconst textHorMargin = 8;        // have the text a little outside the canvas \n\n\nctx.font = Math.floor(canvas.height * 0.8) + \"px arial\"; // size the font to 80% of canvas height\nvar textWidth     = ctx.measureText(textToDisplay).width; // get the text width\nvar totalTextSize = (canvas.width + textHorMargin * 2 + textWidth);\nctx.textBaseline  = \"middle\";           // not put the text in the vertical center\nctx.textAlign     = \"left\";             // align to the left\nvar textX         = canvas.width + 8;   // start with the text off screen to the right\nvar textOffset    = 0;                  // how far the text has moved\n\nvar startTime;\n// this function is call once a frame which is approx 16.66 ms (60fps)\nfunction update(time){              // time is passed by requestAnimationFrame\n    if(startTime === undefined){    // get a reference for the start time if this is the first frame\n        startTime = time;\n    }\n    ctx.fillStyle = BGStyle;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);                    // clear the canvas by drawing over it\n    textOffset    = ((time - startTime) * textSpeed) % (totalTextSize); // move the text left \n    ctx.fillStyle = textStyle;                                          // set the text style\n    ctx.fillText(textToDisplay, textX - textOffset, canvas.height / 2); // render the text\n\n    requestAnimationFrame(update);// all done request the next frame\n}\nrequestAnimationFrame(update);// to start request the first frame",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949706615,
        "id": "0c0ec41c-af25-456b-bbde-813b806c7059",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949706615,
        "parent_id": "33aa3726-ce6f-4b4e-9d76-3a7374e42113",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A demo of this example",
              [
                [
                  "a",
                  "https://jsfiddle.net/nzromo1n/"
                ]
              ]
            ],
            [
              " at jsfiddle"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A demo of this example",
            "Link": "https://jsfiddle.net/nzromo1n/"
          },
          {
            "Text": " at jsfiddle"
          }
        ]
      }
    ],
    "title": "Simple animation with 2D context and requestAnimationFrame",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}