{
  "ID": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
  "Root": {
    "id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
    "alive": true,
    "content": [
      "0b61af5b-0356-4528-99af-93039476bafc",
      "0e4ed28b-541d-4e9f-95de-20e344bcb2f5",
      "e8e95316-d53d-4734-9950-0fc208e01693",
      "579b287a-0875-4821-813a-cfad7f87f474",
      "4e6e04c4-e610-4525-97bb-a6058341917a",
      "affb896c-87fc-4b6b-aa5f-a6290bf28c11",
      "33bf9a2c-ee19-4900-8f85-6eb190734617",
      "3a208862-22f3-47ea-a826-4c857fc1c864"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949783832,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949783832,
    "parent_id": "dd776e0e-e228-4dd6-99b4-439d20e57076",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dragging irregular shapes around the Canvas"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "0b61af5b-0356-4528-99af-93039476bafc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783831,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783831,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Most Canvas drawings are either rectangular (rectangles, images, text-blocks) or circular (circles)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Most Canvas drawings are either rectangular (rectangles, images, text-blocks) or circular (circles)."
          }
        ]
      },
      {
        "id": "0e4ed28b-541d-4e9f-95de-20e344bcb2f5",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783831,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783831,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Circles \u0026 rectangles have mathematical tests to check if the mouse is inside them. This makes testing circles and rectangles easy, quick and efficient. You can “hit-test” hundreds of circles or rectangles in a fraction of a second."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Circles \u0026 rectangles have mathematical tests to check if the mouse is inside them. This makes testing circles and rectangles easy, quick and efficient. You can “hit-test” hundreds of circles or rectangles in a fraction of a second."
          }
        ]
      },
      {
        "id": "e8e95316-d53d-4734-9950-0fc208e01693",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783831,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783831,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can also drag irregular shapes. But irregular shapes have no quick mathematical hit-test. Fortunately, irregular shapes do have a built-in hit-test to determine if a point (mouse) is inside the shape: "
            ],
            [
              "context.isPointInPath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". While "
            ],
            [
              "isPointInPath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " works well, it is not nearly as efficient as purely mathematical hit-tests – it is often up to 10X slower than pure mathematical hit-tests."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can also drag irregular shapes. But irregular shapes have no quick mathematical hit-test. Fortunately, irregular shapes do have a built-in hit-test to determine if a point (mouse) is inside the shape: "
          },
          {
            "Text": "context.isPointInPath",
            "AttrFlags": 2
          },
          {
            "Text": ". While "
          },
          {
            "Text": "isPointInPath",
            "AttrFlags": 2
          },
          {
            "Text": " works well, it is not nearly as efficient as purely mathematical hit-tests – it is often up to 10X slower than pure mathematical hit-tests."
          }
        ]
      },
      {
        "id": "579b287a-0875-4821-813a-cfad7f87f474",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783832,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783832,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One requirement when using "
            ],
            [
              "isPointInPath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is that you must “redefine” the Path being tested immediately before calling "
            ],
            [
              "isPointInPath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". “Redefine” means you must issue the path drawing commands (as above), but you don’t need to stroke() or fill() the Path before testing it with "
            ],
            [
              "isPointInPath",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". This way you can test previously drawn Paths without having to overwrite (stroke/fill) those previous Paths on the Canvas itself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "One requirement when using "
          },
          {
            "Text": "isPointInPath",
            "AttrFlags": 2
          },
          {
            "Text": " is that you must “redefine” the Path being tested immediately before calling "
          },
          {
            "Text": "isPointInPath",
            "AttrFlags": 2
          },
          {
            "Text": ". “Redefine” means you must issue the path drawing commands (as above), but you don’t need to stroke() or fill() the Path before testing it with "
          },
          {
            "Text": "isPointInPath",
            "AttrFlags": 2
          },
          {
            "Text": ". This way you can test previously drawn Paths without having to overwrite (stroke/fill) those previous Paths on the Canvas itself."
          }
        ]
      },
      {
        "id": "4e6e04c4-e610-4525-97bb-a6058341917a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783832,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783832,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The irregular shape doesn’t need to be as common as the everyday triangle. You can also hit-test any wildly irregular Paths."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The irregular shape doesn’t need to be as common as the everyday triangle. You can also hit-test any wildly irregular Paths."
          }
        ]
      },
      {
        "id": "affb896c-87fc-4b6b-aa5f-a6290bf28c11",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783832,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783832,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This annotated example shows how to drag irregular Path shapes as well as circles and rectangles:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This annotated example shows how to drag irregular Path shapes as well as circles and rectangles:"
          }
        ]
      },
      {
        "id": "33bf9a2c-ee19-4900-8f85-6eb190734617",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783832,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783832,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// canvas related vars\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\nvar cw=canvas.width;\nvar ch=canvas.height;\ndocument.body.appendChild(canvas);\ncanvas.style.border='1px solid red';\n\n// used to calc canvas position relative to window\nfunction reOffset(){\n    var BB=canvas.getBoundingClientRect();\n    offsetX=BB.left;\n    offsetY=BB.top;        \n}\nvar offsetX,offsetY;\nreOffset();\nwindow.onscroll=function(e){ reOffset(); }\nwindow.onresize=function(e){ reOffset(); }\ncanvas.onresize=function(e){ reOffset(); }\n\n// save relevant information about shapes drawn on the canvas\nvar shapes=[];\n// define one circle and save it in the shapes[] array\nshapes.push( {x:20, y:20, radius:15, color:'blue'} );\n// define one rectangle and save it in the shapes[] array\nshapes.push( {x:100, y:-1, width:75, height:35, color:'red'} );\n// define one triangle path and save it in the shapes[] array\nshapes.push( {x:0, y:0, points:[{x:50,y:30},{x:75,y:60},{x:25,y:60}],color:'green'} );"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// canvas related vars\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\nvar cw=canvas.width;\nvar ch=canvas.height;\ndocument.body.appendChild(canvas);\ncanvas.style.border='1px solid red';\n\n// used to calc canvas position relative to window\nfunction reOffset(){\n    var BB=canvas.getBoundingClientRect();\n    offsetX=BB.left;\n    offsetY=BB.top;        \n}\nvar offsetX,offsetY;\nreOffset();\nwindow.onscroll=function(e){ reOffset(); }\nwindow.onresize=function(e){ reOffset(); }\ncanvas.onresize=function(e){ reOffset(); }\n\n// save relevant information about shapes drawn on the canvas\nvar shapes=[];\n// define one circle and save it in the shapes[] array\nshapes.push( {x:20, y:20, radius:15, color:'blue'} );\n// define one rectangle and save it in the shapes[] array\nshapes.push( {x:100, y:-1, width:75, height:35, color:'red'} );\n// define one triangle path and save it in the shapes[] array\nshapes.push( {x:0, y:0, points:[{x:50,y:30},{x:75,y:60},{x:25,y:60}],color:'green'} );",
        "code_language": "Plain Text"
      },
      {
        "id": "3a208862-22f3-47ea-a826-4c857fc1c864",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949783832,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949783832,
        "parent_id": "f524f7ee-bf76-4f52-b7d6-173818f7d82a",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// drag related vars\nvar isDragging=false;\nvar startX,startY;\n\n// hold the index of the shape being dragged (if any)\nvar selectedShapeIndex;\n\n// draw the shapes on the canvas\ndrawAll();\n\n// listen for mouse events\ncanvas.onmousedown=handleMouseDown;\ncanvas.onmousemove=handleMouseMove;\ncanvas.onmouseup=handleMouseUp;\ncanvas.onmouseout=handleMouseOut;\n\n// given mouse X \u0026 Y (mx \u0026 my) and shape object\n// return true/false whether mouse is inside the shape\nfunction isMouseInShape(mx,my,shape){\n    if(shape.radius){\n        // this is a circle\n        var dx=mx-shape.x;\n        var dy=my-shape.y;\n        // math test to see if mouse is inside circle\n        if(dx*dx+dy*dy\u003cshape.radius*shape.radius){\n            // yes, mouse is inside this circle\n            return(true);\n        }\n    }else if(shape.width){\n        // this is a rectangle\n        var rLeft=shape.x;\n        var rRight=shape.x+shape.width;\n        var rTop=shape.y;\n        var rBott=shape.y+shape.height;\n        // math test to see if mouse is inside rectangle\n        if( mx\u003erLeft \u0026\u0026 mx\u003crRight \u0026\u0026 my\u003erTop \u0026\u0026 my\u003crBott){\n            return(true);\n        }\n    }else if(shape.points){\n        // this is a polyline path\n        // First redefine the path again (no need to stroke/fill!)\n        defineIrregularPath(shape);\n        // Then hit-test with isPointInPath\n        if(ctx.isPointInPath(mx,my)){\n            return(true);\n        }                \n    }\n    // the mouse isn't in any of the shapes\n    return(false);\n}\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    startX=parseInt(e.clientX-offsetX);\n    startY=parseInt(e.clientY-offsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    for(var i=0;i\u003cshapes.length;i++){\n        if(isMouseInShape(startX,startY,shapes[i])){\n            // the mouse is inside this shape\n            // select this shape\n            selectedShapeIndex=i;\n            // set the isDragging flag\n            isDragging=true;\n            // and return (==stop looking for \n            //     further shapes under the mouse)\n            return;\n        }\n    }\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    mouseX=parseInt(e.clientX-offsetX);\n    mouseY=parseInt(e.clientY-offsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-startX;\n    var dy=mouseY-startY;\n    // move the selected shape by the drag distance\n    var selectedShape=shapes[selectedShapeIndex];\n    selectedShape.x+=dx;\n    selectedShape.y+=dy;\n    // clear the canvas and redraw all shapes\n    drawAll();\n    // update the starting drag position (== the current mouse position)\n    startX=mouseX;\n    startY=mouseY;\n}\n\n// clear the canvas and \n// redraw all shapes in their current positions\nfunction drawAll(){\n    ctx.clearRect(0,0,cw,ch);\n    for(var i=0;i\u003cshapes.length;i++){\n        var shape=shapes[i];\n        if(shape.radius){\n            // it's a circle\n            ctx.beginPath();\n            ctx.arc(shape.x,shape.y,shape.radius,0,Math.PI*2);\n            ctx.fillStyle=shape.color;\n            ctx.fill();\n        }else if(shape.width){\n            // it's a rectangle\n            ctx.fillStyle=shape.color;\n            ctx.fillRect(shape.x,shape.y,shape.width,shape.height);\n        }else if(shape.points){\n            // its a polyline path\n            defineIrregularPath(shape);\n            ctx.fillStyle=shape.color;\n            ctx.fill();\n        }\n    }\n}\n\nfunction defineIrregularPath(shape){\n    var points=shape.points;\n    ctx.beginPath();\n    ctx.moveTo(shape.x+points[0].x,shape.y+points[0].y);\n    for(var i=1;i\u003cpoints.length;i++){\n        ctx.lineTo(shape.x+points[i].x,shape.y+points[i].y);\n    }\n    ctx.closePath();\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// drag related vars\nvar isDragging=false;\nvar startX,startY;\n\n// hold the index of the shape being dragged (if any)\nvar selectedShapeIndex;\n\n// draw the shapes on the canvas\ndrawAll();\n\n// listen for mouse events\ncanvas.onmousedown=handleMouseDown;\ncanvas.onmousemove=handleMouseMove;\ncanvas.onmouseup=handleMouseUp;\ncanvas.onmouseout=handleMouseOut;\n\n// given mouse X \u0026 Y (mx \u0026 my) and shape object\n// return true/false whether mouse is inside the shape\nfunction isMouseInShape(mx,my,shape){\n    if(shape.radius){\n        // this is a circle\n        var dx=mx-shape.x;\n        var dy=my-shape.y;\n        // math test to see if mouse is inside circle\n        if(dx*dx+dy*dy\u003cshape.radius*shape.radius){\n            // yes, mouse is inside this circle\n            return(true);\n        }\n    }else if(shape.width){\n        // this is a rectangle\n        var rLeft=shape.x;\n        var rRight=shape.x+shape.width;\n        var rTop=shape.y;\n        var rBott=shape.y+shape.height;\n        // math test to see if mouse is inside rectangle\n        if( mx\u003erLeft \u0026\u0026 mx\u003crRight \u0026\u0026 my\u003erTop \u0026\u0026 my\u003crBott){\n            return(true);\n        }\n    }else if(shape.points){\n        // this is a polyline path\n        // First redefine the path again (no need to stroke/fill!)\n        defineIrregularPath(shape);\n        // Then hit-test with isPointInPath\n        if(ctx.isPointInPath(mx,my)){\n            return(true);\n        }                \n    }\n    // the mouse isn't in any of the shapes\n    return(false);\n}\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    startX=parseInt(e.clientX-offsetX);\n    startY=parseInt(e.clientY-offsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    for(var i=0;i\u003cshapes.length;i++){\n        if(isMouseInShape(startX,startY,shapes[i])){\n            // the mouse is inside this shape\n            // select this shape\n            selectedShapeIndex=i;\n            // set the isDragging flag\n            isDragging=true;\n            // and return (==stop looking for \n            //     further shapes under the mouse)\n            return;\n        }\n    }\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    mouseX=parseInt(e.clientX-offsetX);\n    mouseY=parseInt(e.clientY-offsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-startX;\n    var dy=mouseY-startY;\n    // move the selected shape by the drag distance\n    var selectedShape=shapes[selectedShapeIndex];\n    selectedShape.x+=dx;\n    selectedShape.y+=dy;\n    // clear the canvas and redraw all shapes\n    drawAll();\n    // update the starting drag position (== the current mouse position)\n    startX=mouseX;\n    startY=mouseY;\n}\n\n// clear the canvas and \n// redraw all shapes in their current positions\nfunction drawAll(){\n    ctx.clearRect(0,0,cw,ch);\n    for(var i=0;i\u003cshapes.length;i++){\n        var shape=shapes[i];\n        if(shape.radius){\n            // it's a circle\n            ctx.beginPath();\n            ctx.arc(shape.x,shape.y,shape.radius,0,Math.PI*2);\n            ctx.fillStyle=shape.color;\n            ctx.fill();\n        }else if(shape.width){\n            // it's a rectangle\n            ctx.fillStyle=shape.color;\n            ctx.fillRect(shape.x,shape.y,shape.width,shape.height);\n        }else if(shape.points){\n            // its a polyline path\n            defineIrregularPath(shape);\n            ctx.fillStyle=shape.color;\n            ctx.fill();\n        }\n    }\n}\n\nfunction defineIrregularPath(shape){\n    var points=shape.points;\n    ctx.beginPath();\n    ctx.moveTo(shape.x+points[0].x,shape.y+points[0].y);\n    for(var i=1;i\u003cpoints.length;i++){\n        ctx.lineTo(shape.x+points[i].x,shape.y+points[i].y);\n    }\n    ctx.closePath();\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Dragging irregular shapes around the Canvas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}