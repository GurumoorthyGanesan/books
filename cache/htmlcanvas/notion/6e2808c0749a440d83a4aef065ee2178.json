{
  "ID": "6e2808c0-749a-440d-83a4-aef065ee2178",
  "Root": {
    "id": "6e2808c0-749a-440d-83a4-aef065ee2178",
    "alive": true,
    "content": [
      "8ac1e4a7-6fee-4953-a098-e7fa087282cb",
      "a5a6ec98-4c2f-4847-8e27-2c6e26e0ae59",
      "1e29fa24-b208-4dc7-829d-a388d15fd744",
      "ebbd9137-f506-48dc-a103-f9ce2943cc40",
      "a55e6a98-a65d-4ca5-813b-b4f7bccdcb84",
      "ffe7bbaf-39ca-4493-b9b1-73b6eea28f07",
      "e3cb3c65-5ef9-4f99-89b6-39c3205b15c1",
      "7399275a-9867-4c4d-99f6-51a0affc4f5d",
      "30065992-80d8-4b94-96f7-4ff71229d0be",
      "e68b2b18-13e9-4ba3-9edf-306a6d4ac7fc",
      "bfe95acf-b91d-4cb2-a3b9-874606fbfd7b",
      "2ad7a4d1-f0be-4fc5-aaa4-88d90d7c344b",
      "e1e00035-304c-4474-91d0-b3e74bcfcb69",
      "e6128916-3680-470b-874b-49f52ee54f5b",
      "b4777645-5c4e-49ba-9165-8a3076721d91",
      "67460f33-cdaa-4e72-8709-6646dfd80ade",
      "58796136-bdb0-409a-930a-dacc43463e66",
      "eb73a8ff-0212-47a6-add3-c6587ee4c7e1",
      "322eee6b-6ef0-4aa3-95da-40126eafd73a",
      "aaad5922-dfce-484a-937b-e740b0b88334",
      "6b438c87-0ef2-4e34-bcad-6441069a9a2c",
      "1dd56859-7b91-49fb-8d8a-f749ac14e2e0",
      "326390d3-3d55-4750-9822-de61fcdf6281",
      "e8c7fee6-07cb-4888-8fb8-4e5083a12a97",
      "7be1aff7-3520-4c3b-92d1-f033ffaccb72",
      "6f6518ed-e58d-461e-84ab-3c53acfb4f8e",
      "90699347-dfa0-4f01-9c30-5e1c480dc761",
      "98c4693c-ef39-4d21-b656-637b3af732f9",
      "abfacc99-dccd-44e8-bc69-6f5074c3fa79",
      "33c6b063-79c6-45ec-ac03-db82c1676678",
      "8eb9f9f5-bb2f-4947-a037-1c0ad679340b",
      "2f685f2d-261b-43d3-ad50-2432233e6376",
      "cdf505d4-673c-4a9d-b631-4d6cb085e011"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949753687,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949753687,
    "parent_id": "0d20929d-b856-4186-bfed-fbeecbb675d5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Justified text"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "8ac1e4a7-6fee-4953-a098-e7fa087282cb",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753680,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753680,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example renders justified text. It adds extra functionality to the "
            ],
            [
              "CanvasRenderingContext2D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by extending its prototype or as a global object "
            ],
            [
              "justifiedText",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (optional see Note A)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example renders justified text. It adds extra functionality to the "
          },
          {
            "Text": "CanvasRenderingContext2D",
            "AttrFlags": 2
          },
          {
            "Text": " by extending its prototype or as a global object "
          },
          {
            "Text": "justifiedText",
            "AttrFlags": 2
          },
          {
            "Text": " (optional see Note A)."
          }
        ]
      },
      {
        "id": "a5a6ec98-4c2f-4847-8e27-2c6e26e0ae59",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753682,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753682,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "1e29fa24-b208-4dc7-829d-a388d15fd744",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example rendering."
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example rendering."
          }
        ]
      },
      {
        "id": "ebbd9137-f506-48dc-a103-f9ce2943cc40",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              ""
            ],
            [
              "Code to render this image is in the usage examples at the bottom",
              [
                [
                  "i"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": ""
          },
          {
            "Text": "Code to render this image is in the usage examples at the bottom",
            "AttrFlags": 4
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "id": "a55e6a98-a65d-4ca5-813b-b4f7bccdcb84",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "source": [
            [
              "/tmp/5b89c8a4-1a77-4de2-9d87-822e580ca87e/a1bcbd80a0c412fc694f58a806515580f57a8a78.png"
            ]
          ]
        },
        "type": "image",
        "version": 1,
        "source": "/tmp/5b89c8a4-1a77-4de2-9d87-822e580ca87e/a1bcbd80a0c412fc694f58a806515580f57a8a78.png",
        "image_url": "/tmp/5b89c8a4-1a77-4de2-9d87-822e580ca87e/a1bcbd80a0c412fc694f58a806515580f57a8a78.png"
      },
      {
        "id": "ffe7bbaf-39ca-4493-b9b1-73b6eea28f07",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "e3cb3c65-5ef9-4f99-89b6-39c3205b15c1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The Example"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The Example"
          }
        ]
      },
      {
        "id": "7399275a-9867-4c4d-99f6-51a0affc4f5d",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function as a anonymous immediately invoked function."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function as a anonymous immediately invoked function."
          }
        ]
      },
      {
        "id": "30065992-80d8-4b94-96f7-4ff71229d0be",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "(function(){\n    const FILL = 0;        // const to indicate filltext render\n    const STROKE = 1;\n    const MEASURE = 2;\n    var renderType = FILL; // used internal to set fill or stroke text\n    \n    var maxSpaceSize = 3; // Multiplier for max space size. If greater then no justificatoin applied\n    var minSpaceSize = 0.5; // Multiplier for minimum space size\n    var renderTextJustified = function(ctx,text,x,y,width){\n        var words, wordsWidth, count, spaces, spaceWidth, adjSpace, renderer, i, textAlign, useSize, totalWidth;\n        textAlign = ctx.textAlign; // get current align settings\n        ctx.textAlign = \"left\";\n        wordsWidth = 0;\n        words = text.split(\" \").map(word =\u003e {\n            var w = ctx.measureText(word).width;                \n            wordsWidth += w;\n            return {\n                width : w,\n                word : word,\n            };\n        });\n        // count = num words, spaces = number spaces, spaceWidth normal space size\n        // adjSpace new space size \u003e= min size. useSize Resulting space size used to render\n        count = words.length;\n        spaces = count - 1;\n        spaceWidth = ctx.measureText(\" \").width;\n        adjSpace = Math.max(spaceWidth * minSpaceSize, (width - wordsWidth) / spaces);\n        useSize = adjSpace \u003e spaceWidth * maxSpaceSize ? spaceWidth : adjSpace;\n        totalWidth = wordsWidth + useSize * spaces\n        if(renderType === MEASURE){ // if measuring return size\n            ctx.textAlign = textAlign;\n            return totalWidth;\n        }\n        renderer = renderType === FILL ? ctx.fillText.bind(ctx) : ctx.strokeText.bind(ctx); // fill or stroke\n        switch(textAlign){\n            case \"right\":\n                x -= totalWidth;\n                break;\n            case \"end\":\n                x += width - totalWidth;\n                break;\n            case \"center\": // intentional fall through to default\n                x -= totalWidth / 2;                     \n            default:\n        }\n        if(useSize === spaceWidth){ // if space size unchanged\n            renderer(text,x,y);\n        } else {\n            for(i = 0; i \u003c count; i += 1){\n                renderer(words[i].word,x,y);\n                x += words[i].width;\n                x += useSize;\n            }\n        }\n        ctx.textAlign = textAlign;\n    }\n    // Parse vet and set settings object.\n    var justifiedTextSettings = function(settings){\n        var min,max;\n        var vetNumber = (num, defaultNum) =\u003e {\n            num = num !== null \u0026\u0026 num !== null \u0026\u0026 !isNaN(num) ? num : defaultNum;\n            if(num \u003c 0){\n                num = defaultNum;\n            }\n            return num;\n        }\n        if(settings === undefined || settings === null){\n            return;\n        }\n        max = vetNumber(settings.maxSpaceSize, maxSpaceSize);\n        min = vetNumber(settings.minSpaceSize, minSpaceSize);\n        if(min \u003e max){\n            return;\n        }\n        minSpaceSize = min;\n        maxSpaceSize = max;\n    }\n    // define fill text\n    var fillJustifyText = function(text, x, y, width, settings){\n        justifiedTextSettings(settings);\n        renderType = FILL;\n        renderTextJustified(this, text, x, y, width);\n    }\n    // define stroke text\n    var strokeJustifyText = function(text, x, y, width, settings){\n        justifiedTextSettings(settings);\n        renderType = STROKE;\n        renderTextJustified(this, text, x, y, width);\n    }\n    // define measure text\n    var measureJustifiedText = function(text, width, settings){\n        justifiedTextSettings(settings);\n        renderType = MEASURE;\n        return renderTextJustified(this, text, 0, 0, width);\n    }\n    // code point A\n    // set the prototypes\n    CanvasRenderingContext2D.prototype.fillJustifyText = fillJustifyText;\n    CanvasRenderingContext2D.prototype.strokeJustifyText = strokeJustifyText;\n    CanvasRenderingContext2D.prototype.measureJustifiedText = measureJustifiedText;  \n    // code point B\n    \n    // optional code if you do not wish to extend the CanvasRenderingContext2D prototype\n    /* Uncomment from here to the closing comment\n    window.justifiedText = {\n        fill : function(ctx, text, x, y, width, settings){\n            justifiedTextSettings(settings);\n            renderType = FILL;\n            renderTextJustified(ctx, text, x, y, width);\n        },\n        stroke : function(ctx, text, x, y, width, settings){\n            justifiedTextSettings(settings);\n            renderType = STROKE;\n            renderTextJustified(ctx, text, x, y, width);\n        },\n        measure : function(ctx, text, width, settings){\n            justifiedTextSettings(settings);\n            renderType = MEASURE;\n            return renderTextJustified(ctx, text, 0, 0, width);\n        }\n    }\n    to here*/\n})();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "(function(){\n    const FILL = 0;        // const to indicate filltext render\n    const STROKE = 1;\n    const MEASURE = 2;\n    var renderType = FILL; // used internal to set fill or stroke text\n    \n    var maxSpaceSize = 3; // Multiplier for max space size. If greater then no justificatoin applied\n    var minSpaceSize = 0.5; // Multiplier for minimum space size\n    var renderTextJustified = function(ctx,text,x,y,width){\n        var words, wordsWidth, count, spaces, spaceWidth, adjSpace, renderer, i, textAlign, useSize, totalWidth;\n        textAlign = ctx.textAlign; // get current align settings\n        ctx.textAlign = \"left\";\n        wordsWidth = 0;\n        words = text.split(\" \").map(word =\u003e {\n            var w = ctx.measureText(word).width;                \n            wordsWidth += w;\n            return {\n                width : w,\n                word : word,\n            };\n        });\n        // count = num words, spaces = number spaces, spaceWidth normal space size\n        // adjSpace new space size \u003e= min size. useSize Resulting space size used to render\n        count = words.length;\n        spaces = count - 1;\n        spaceWidth = ctx.measureText(\" \").width;\n        adjSpace = Math.max(spaceWidth * minSpaceSize, (width - wordsWidth) / spaces);\n        useSize = adjSpace \u003e spaceWidth * maxSpaceSize ? spaceWidth : adjSpace;\n        totalWidth = wordsWidth + useSize * spaces\n        if(renderType === MEASURE){ // if measuring return size\n            ctx.textAlign = textAlign;\n            return totalWidth;\n        }\n        renderer = renderType === FILL ? ctx.fillText.bind(ctx) : ctx.strokeText.bind(ctx); // fill or stroke\n        switch(textAlign){\n            case \"right\":\n                x -= totalWidth;\n                break;\n            case \"end\":\n                x += width - totalWidth;\n                break;\n            case \"center\": // intentional fall through to default\n                x -= totalWidth / 2;                     \n            default:\n        }\n        if(useSize === spaceWidth){ // if space size unchanged\n            renderer(text,x,y);\n        } else {\n            for(i = 0; i \u003c count; i += 1){\n                renderer(words[i].word,x,y);\n                x += words[i].width;\n                x += useSize;\n            }\n        }\n        ctx.textAlign = textAlign;\n    }\n    // Parse vet and set settings object.\n    var justifiedTextSettings = function(settings){\n        var min,max;\n        var vetNumber = (num, defaultNum) =\u003e {\n            num = num !== null \u0026\u0026 num !== null \u0026\u0026 !isNaN(num) ? num : defaultNum;\n            if(num \u003c 0){\n                num = defaultNum;\n            }\n            return num;\n        }\n        if(settings === undefined || settings === null){\n            return;\n        }\n        max = vetNumber(settings.maxSpaceSize, maxSpaceSize);\n        min = vetNumber(settings.minSpaceSize, minSpaceSize);\n        if(min \u003e max){\n            return;\n        }\n        minSpaceSize = min;\n        maxSpaceSize = max;\n    }\n    // define fill text\n    var fillJustifyText = function(text, x, y, width, settings){\n        justifiedTextSettings(settings);\n        renderType = FILL;\n        renderTextJustified(this, text, x, y, width);\n    }\n    // define stroke text\n    var strokeJustifyText = function(text, x, y, width, settings){\n        justifiedTextSettings(settings);\n        renderType = STROKE;\n        renderTextJustified(this, text, x, y, width);\n    }\n    // define measure text\n    var measureJustifiedText = function(text, width, settings){\n        justifiedTextSettings(settings);\n        renderType = MEASURE;\n        return renderTextJustified(this, text, 0, 0, width);\n    }\n    // code point A\n    // set the prototypes\n    CanvasRenderingContext2D.prototype.fillJustifyText = fillJustifyText;\n    CanvasRenderingContext2D.prototype.strokeJustifyText = strokeJustifyText;\n    CanvasRenderingContext2D.prototype.measureJustifiedText = measureJustifiedText;  \n    // code point B\n    \n    // optional code if you do not wish to extend the CanvasRenderingContext2D prototype\n    /* Uncomment from here to the closing comment\n    window.justifiedText = {\n        fill : function(ctx, text, x, y, width, settings){\n            justifiedTextSettings(settings);\n            renderType = FILL;\n            renderTextJustified(ctx, text, x, y, width);\n        },\n        stroke : function(ctx, text, x, y, width, settings){\n            justifiedTextSettings(settings);\n            renderType = STROKE;\n            renderTextJustified(ctx, text, x, y, width);\n        },\n        measure : function(ctx, text, width, settings){\n            justifiedTextSettings(settings);\n            renderType = MEASURE;\n            return renderTextJustified(ctx, text, 0, 0, width);\n        }\n    }\n    to here*/\n})();",
        "code_language": "Plain Text"
      },
      {
        "id": "e68b2b18-13e9-4ba3-9edf-306a6d4ac7fc",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753683,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753683,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note A: If you do not wish to extend the CanvasRenderingContext2D prototype Remove from the example all code between // code point A and // code point B and uncomment the code marked /* Uncomment from here to the closing comment"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note A: If you do not wish to extend the CanvasRenderingContext2D prototype Remove from the example all code between // code point A and // code point B and uncomment the code marked /* Uncomment from here to the closing comment"
          }
        ]
      },
      {
        "id": "bfe95acf-b91d-4cb2-a3b9-874606fbfd7b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753684,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753684,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "2ad7a4d1-f0be-4fc5-aaa4-88d90d7c344b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753684,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753684,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How to use"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How to use"
          }
        ]
      },
      {
        "id": "e1e00035-304c-4474-91d0-b3e74bcfcb69",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753684,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753684,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Three functions are added to the "
            ],
            [
              "CanvasRenderingContext2D",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and are available to all 2D context objects created."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Three functions are added to the "
          },
          {
            "Text": "CanvasRenderingContext2D",
            "AttrFlags": 2
          },
          {
            "Text": " and are available to all 2D context objects created."
          }
        ]
      },
      {
        "id": "e6128916-3680-470b-874b-49f52ee54f5b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753684,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753684,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ctx.fillJustifyText( text, x, y, width, [settings]);"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "ctx.fillJustifyText( text, x, y, width, [settings]);"
          }
        ]
      },
      {
        "id": "b4777645-5c4e-49ba-9165-8a3076721d91",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753684,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753684,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ctx.strokeJustifyText( text, x, y, width, [settings]);"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "ctx.strokeJustifyText( text, x, y, width, [settings]);"
          }
        ]
      },
      {
        "id": "67460f33-cdaa-4e72-8709-6646dfd80ade",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753685,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753685,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "ctx.measureJustifiedText( text, width, [settings]);"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "ctx.measureJustifiedText( text, width, [settings]);"
          }
        ]
      },
      {
        "id": "58796136-bdb0-409a-930a-dacc43463e66",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753685,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753685,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Fill and stroke text function fill or stroke text and use the same arguments. "
            ],
            [
              "measureJustifiedText",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will return the actual width that text would be rendered at. This may be equal, less, or greater than the argument "
            ],
            [
              "width",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " depending on current settings."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Fill and stroke text function fill or stroke text and use the same arguments. "
          },
          {
            "Text": "measureJustifiedText",
            "AttrFlags": 2
          },
          {
            "Text": " will return the actual width that text would be rendered at. This may be equal, less, or greater than the argument "
          },
          {
            "Text": "width",
            "AttrFlags": 2
          },
          {
            "Text": " depending on current settings."
          }
        ]
      },
      {
        "id": "eb73a8ff-0212-47a6-add3-c6587ee4c7e1",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753685,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753685,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: Arguments inside \\[ and \\] are optional."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: Arguments inside \\[ and \\] are optional."
          }
        ]
      },
      {
        "id": "322eee6b-6ef0-4aa3-95da-40126eafd73a",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753685,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753685,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Function arguments"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Function arguments"
          }
        ]
      },
      {
        "id": "aaad5922-dfce-484a-937b-e740b0b88334",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753685,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753685,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "text:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " String containing the text to be rendered."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "text:",
            "AttrFlags": 1
          },
          {
            "Text": " String containing the text to be rendered."
          }
        ]
      },
      {
        "id": "6b438c87-0ef2-4e34-bcad-6441069a9a2c",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753685,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753685,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "x, y:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Coordinates to render the text at."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "x, y:",
            "AttrFlags": 1
          },
          {
            "Text": " Coordinates to render the text at."
          }
        ]
      },
      {
        "id": "1dd56859-7b91-49fb-8d8a-f749ac14e2e0",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753686,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753686,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "width:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Width of the justified text. Text will increase/decrease spaces between words to fit the width. If the space between words is greater than "
            ],
            [
              "maxSpaceSize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (default = 6) times normal spacing will be used and the text will not fill the required width. If the spacing is less than "
            ],
            [
              "minSpaceSize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (default = 0.5) time normal spacing then the min space size is used and the text will overrun the width requested"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "width:",
            "AttrFlags": 1
          },
          {
            "Text": " Width of the justified text. Text will increase/decrease spaces between words to fit the width. If the space between words is greater than "
          },
          {
            "Text": "maxSpaceSize",
            "AttrFlags": 2
          },
          {
            "Text": " (default = 6) times normal spacing will be used and the text will not fill the required width. If the spacing is less than "
          },
          {
            "Text": "minSpaceSize",
            "AttrFlags": 2
          },
          {
            "Text": " (default = 0.5) time normal spacing then the min space size is used and the text will overrun the width requested"
          }
        ]
      },
      {
        "id": "326390d3-3d55-4750-9822-de61fcdf6281",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753686,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753686,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "settings:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " Optional. Object containing min and max space sizes."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "settings:",
            "AttrFlags": 1
          },
          {
            "Text": " Optional. Object containing min and max space sizes."
          }
        ]
      },
      {
        "id": "e8c7fee6-07cb-4888-8fb8-4e5083a12a97",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753686,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753686,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The "
            ],
            [
              "settings",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " argument is optional and if not included text rendering will use the last setting defined or the default (shown below)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The "
          },
          {
            "Text": "settings",
            "AttrFlags": 2
          },
          {
            "Text": " argument is optional and if not included text rendering will use the last setting defined or the default (shown below)."
          }
        ]
      },
      {
        "id": "7be1aff7-3520-4c3b-92d1-f033ffaccb72",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753686,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753686,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Both min and max are the min and max sizes for the [space] character separating words. The default "
            ],
            [
              "maxSpaceSize = 6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " means that when the space between characters is \u003e 63 * ctx.measureText(” “).width text will not be justified. If text to be justified has spaces less than "
            ],
            [
              "minSpaceSize = 0.5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " (default value 0.5) * "
            ],
            [
              "ctx.measureText(\" \").width",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " the spacing will be set to "
            ],
            [
              "minSpaceSize * ctx.measureText(\" \").width",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and the resulting text will overrun the justifying width."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Both min and max are the min and max sizes for the [space] character separating words. The default "
          },
          {
            "Text": "maxSpaceSize = 6",
            "AttrFlags": 2
          },
          {
            "Text": " means that when the space between characters is \u003e 63 * ctx.measureText(” “).width text will not be justified. If text to be justified has spaces less than "
          },
          {
            "Text": "minSpaceSize = 0.5",
            "AttrFlags": 2
          },
          {
            "Text": " (default value 0.5) * "
          },
          {
            "Text": "ctx.measureText(\" \").width",
            "AttrFlags": 2
          },
          {
            "Text": " the spacing will be set to "
          },
          {
            "Text": "minSpaceSize * ctx.measureText(\" \").width",
            "AttrFlags": 2
          },
          {
            "Text": " and the resulting text will overrun the justifying width."
          }
        ]
      },
      {
        "id": "6f6518ed-e58d-461e-84ab-3c53acfb4f8e",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The following rules are applied, min and max must be numbers. If not then the associate values will not be changed. If "
            ],
            [
              "minSpaceSize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is larger than "
            ],
            [
              "maxSpaceSize",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " both input setting are invalid and min max will not be changed."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The following rules are applied, min and max must be numbers. If not then the associate values will not be changed. If "
          },
          {
            "Text": "minSpaceSize",
            "AttrFlags": 2
          },
          {
            "Text": " is larger than "
          },
          {
            "Text": "maxSpaceSize",
            "AttrFlags": 2
          },
          {
            "Text": " both input setting are invalid and min max will not be changed."
          }
        ]
      },
      {
        "id": "90699347-dfa0-4f01-9c30-5e1c480dc761",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example setting object with defaults"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example setting object with defaults"
          }
        ]
      },
      {
        "id": "98c4693c-ef39-4d21-b656-637b3af732f9",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "settings = { \n    maxSpaceSize : 6;   // Multiplier for max space size. \n    minSpaceSize : 0.5; // Multiplier for minimum space size\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "settings = { \n    maxSpaceSize : 6;   // Multiplier for max space size. \n    minSpaceSize : 0.5; // Multiplier for minimum space size\n};",
        "code_language": "Plain Text"
      },
      {
        "id": "abfacc99-dccd-44e8-bc69-6f5074c3fa79",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "NOTE: These text functions introduce a subtle behaviour change for the textAlign property of the 2D context. ‘Left’, ‘right’, ‘center’ and ‘start’ behave as is expected but ‘end’ will not align from the right of the function argument x but rather from the right of x + width"
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "NOTE: These text functions introduce a subtle behaviour change for the textAlign property of the 2D context. ‘Left’, ‘right’, ‘center’ and ‘start’ behave as is expected but ‘end’ will not align from the right of the function argument x but rather from the right of x + width"
          }
        ]
      },
      {
        "id": "33c6b063-79c6-45ec-ac03-db82c1676678",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: settings (min and max space size) are global to all 2D context objects."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: settings (min and max space size) are global to all 2D context objects."
          }
        ]
      },
      {
        "id": "8eb9f9f5-bb2f-4947-a037-1c0ad679340b",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "id": "2f685f2d-261b-43d3-ad50-2432233e6376",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "USAGE Examples"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "USAGE Examples"
          }
        ]
      },
      {
        "id": "cdf505d4-673c-4a9d-b631-4d6cb085e011",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949753687,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949753687,
        "parent_id": "6e2808c0-749a-440d-83a4-aef065ee2178",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var i = 0;\ntext[i++] = \"This text is aligned from the left of the canvas.\"; \ntext[i++] = \"This text is near the max spacing size\"; \ntext[i++] = \"This text is way too short.\"; \ntext[i++] = \"This text is too long for the space provied and will overflow#\";\ntext[i++] = \"This text is aligned using 'end' and starts at x + width\"; \ntext[i++] = \"This text is near the max spacing size\"; \ntext[i++] = \"This text is way too short.\"; \ntext[i++] = \"#This text is too long for the space provied and will overflow\";\ntext[i++] = \"This is aligned with 'center' and is placed from the center\"; \ntext[i++] = \"This text is near the max spacing size\"; \ntext[i++] = \"This text is way too short.\"; \ntext[i++] = \"This text is just too long for the space provied and will overflow\";\n\n// ctx is the 2d context\n// canvas is the canvas\n\nctx.clearRect(0,0,w,h);\nctx.font = \"25px arial\";\nctx.textAlign = \"center\"\nvar left = 20;\nvar center = canvas.width / 2;\nvar width = canvas.width-left*2;\nvar y = 40;\nvar size = 16;\nvar i = 0;\nctx.fillText(\"Justified text examples.\",center,y);\ny+= 40;\nctx.font = \"14px arial\";\nctx.textAlign = \"left\"\nvar ww = ctx.measureJustifiedText(text[0], width);\nvar setting = {\n    maxSpaceSize : 6,\n    minSpaceSize : 0.5\n}\nctx.strokeStyle = \"red\"\nctx.beginPath();\nctx.moveTo(left,y - size * 2);\nctx.lineTo(left, y + size * 15);\nctx.moveTo(canvas.width - left,y - size * 2);\nctx.lineTo(canvas.width - left, y + size * 15);\nctx.stroke();\nctx.textAlign = \"left\";\nctx.fillStyle = \"red\";\nctx.fillText(\"\u003c 'left' aligned\",left,y - size)\nctx.fillStyle = \"black\";\nctx.fillJustifyText(text[i++], left, y, width, setting);  // settings is remembered\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\ny += 2.3*size;\nctx.fillStyle = \"red\";\nctx.fillText(\"\u003c 'end' aligned from x plus the width --------------------\u003e\",left,y - size)\nctx.fillStyle = \"black\";\nctx.textAlign = \"end\";\nctx.fillJustifyText(text[i++], left, y, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\n\ny += 40;\nctx.strokeStyle = \"red\"\nctx.beginPath();\nctx.moveTo(center,y - size * 2);\nctx.lineTo(center, y + size * 5);\nctx.stroke();\nctx.textAlign = \"center\";\nctx.fillStyle = \"red\";\nctx.fillText(\"'center' aligned\",center,y - size)\nctx.fillStyle = \"black\";\nctx.fillJustifyText(text[i++], center, y, width);\nctx.fillJustifyText(text[i++], center, y+=size, width);\nctx.fillJustifyText(text[i++], center, y+=size, width);\nctx.fillJustifyText(text[i++], center, y+=size, width);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var i = 0;\ntext[i++] = \"This text is aligned from the left of the canvas.\"; \ntext[i++] = \"This text is near the max spacing size\"; \ntext[i++] = \"This text is way too short.\"; \ntext[i++] = \"This text is too long for the space provied and will overflow#\";\ntext[i++] = \"This text is aligned using 'end' and starts at x + width\"; \ntext[i++] = \"This text is near the max spacing size\"; \ntext[i++] = \"This text is way too short.\"; \ntext[i++] = \"#This text is too long for the space provied and will overflow\";\ntext[i++] = \"This is aligned with 'center' and is placed from the center\"; \ntext[i++] = \"This text is near the max spacing size\"; \ntext[i++] = \"This text is way too short.\"; \ntext[i++] = \"This text is just too long for the space provied and will overflow\";\n\n// ctx is the 2d context\n// canvas is the canvas\n\nctx.clearRect(0,0,w,h);\nctx.font = \"25px arial\";\nctx.textAlign = \"center\"\nvar left = 20;\nvar center = canvas.width / 2;\nvar width = canvas.width-left*2;\nvar y = 40;\nvar size = 16;\nvar i = 0;\nctx.fillText(\"Justified text examples.\",center,y);\ny+= 40;\nctx.font = \"14px arial\";\nctx.textAlign = \"left\"\nvar ww = ctx.measureJustifiedText(text[0], width);\nvar setting = {\n    maxSpaceSize : 6,\n    minSpaceSize : 0.5\n}\nctx.strokeStyle = \"red\"\nctx.beginPath();\nctx.moveTo(left,y - size * 2);\nctx.lineTo(left, y + size * 15);\nctx.moveTo(canvas.width - left,y - size * 2);\nctx.lineTo(canvas.width - left, y + size * 15);\nctx.stroke();\nctx.textAlign = \"left\";\nctx.fillStyle = \"red\";\nctx.fillText(\"\u003c 'left' aligned\",left,y - size)\nctx.fillStyle = \"black\";\nctx.fillJustifyText(text[i++], left, y, width, setting);  // settings is remembered\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\ny += 2.3*size;\nctx.fillStyle = \"red\";\nctx.fillText(\"\u003c 'end' aligned from x plus the width --------------------\u003e\",left,y - size)\nctx.fillStyle = \"black\";\nctx.textAlign = \"end\";\nctx.fillJustifyText(text[i++], left, y, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\nctx.fillJustifyText(text[i++], left, y+=size, width);\n\ny += 40;\nctx.strokeStyle = \"red\"\nctx.beginPath();\nctx.moveTo(center,y - size * 2);\nctx.lineTo(center, y + size * 5);\nctx.stroke();\nctx.textAlign = \"center\";\nctx.fillStyle = \"red\";\nctx.fillText(\"'center' aligned\",center,y - size)\nctx.fillStyle = \"black\";\nctx.fillJustifyText(text[i++], center, y, width);\nctx.fillJustifyText(text[i++], center, y+=size, width);\nctx.fillJustifyText(text[i++], center, y+=size, width);\nctx.fillJustifyText(text[i++], center, y+=size, width);",
        "code_language": "Plain Text"
      }
    ],
    "title": "Justified text",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}