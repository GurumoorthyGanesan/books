{
  "ID": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
  "Root": {
    "id": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
    "alive": true,
    "content": [
      "5db5112c-95c5-4cbe-b14f-244d159900d8",
      "0d6854ea-d9a4-4213-91b6-9dfc599cfc86",
      "145d5a52-b59d-4f11-8049-fe67c25d95d8",
      "b8fb114e-6a0f-4325-8d3c-a2f7aa55caed",
      "bfe1a84c-5962-4c27-bbd5-4d63a431aff2"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949784283,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949784283,
    "parent_id": "dd776e0e-e228-4dd6-99b4-439d20e57076",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Dragging images around the Canvas"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "id": "5db5112c-95c5-4cbe-b14f-244d159900d8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949784282,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949784282,
        "parent_id": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "See this "
            ],
            [
              "Example",
              [
                [
                  "a",
                  "http://stackoverflow.com/documentation/html5-canvas/5318/dragging-path-shapes-images-on-canvas"
                ]
              ]
            ],
            [
              " for a general explanation of dragging Shapes around the Canvas."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "See this "
          },
          {
            "Text": "Example",
            "Link": "http://stackoverflow.com/documentation/html5-canvas/5318/dragging-path-shapes-images-on-canvas"
          },
          {
            "Text": " for a general explanation of dragging Shapes around the Canvas."
          }
        ]
      },
      {
        "id": "0d6854ea-d9a4-4213-91b6-9dfc599cfc86",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949784282,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949784282,
        "parent_id": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This annotated example shows how to drag images around the Canvas"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This annotated example shows how to drag images around the Canvas"
          }
        ]
      },
      {
        "id": "145d5a52-b59d-4f11-8049-fe67c25d95d8",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949784282,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949784282,
        "parent_id": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// canvas related vars\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\ncanvas.width=378;\ncanvas.height=378;\nvar cw=canvas.width;\nvar ch=canvas.height;\ndocument.body.appendChild(canvas);\ncanvas.style.border='1px solid red';\n\n// used to calc canvas position relative to window\nfunction reOffset(){\n    var BB=canvas.getBoundingClientRect();\n    offsetX=BB.left;\n    offsetY=BB.top;        \n}\nvar offsetX,offsetY;\nreOffset();\nwindow.onscroll=function(e){ reOffset(); }\nwindow.onresize=function(e){ reOffset(); }\ncanvas.onresize=function(e){ reOffset(); }\n\n// save relevant information about shapes drawn on the canvas\nvar shapes=[];"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// canvas related vars\nvar canvas=document.createElement(\"canvas\");\nvar ctx=canvas.getContext(\"2d\");\ncanvas.width=378;\ncanvas.height=378;\nvar cw=canvas.width;\nvar ch=canvas.height;\ndocument.body.appendChild(canvas);\ncanvas.style.border='1px solid red';\n\n// used to calc canvas position relative to window\nfunction reOffset(){\n    var BB=canvas.getBoundingClientRect();\n    offsetX=BB.left;\n    offsetY=BB.top;        \n}\nvar offsetX,offsetY;\nreOffset();\nwindow.onscroll=function(e){ reOffset(); }\nwindow.onresize=function(e){ reOffset(); }\ncanvas.onresize=function(e){ reOffset(); }\n\n// save relevant information about shapes drawn on the canvas\nvar shapes=[];",
        "code_language": "Plain Text"
      },
      {
        "id": "b8fb114e-6a0f-4325-8d3c-a2f7aa55caed",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949784283,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949784283,
        "parent_id": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// drag related vars\nvar isDragging=false;\nvar startX,startY;\n\n// hold the index of the shape being dragged (if any)\nvar selectedShapeIndex;\n\n// load the image\nvar card=new Image();\ncard.onload=function(){\n    // define one image and save it in the shapes[] array\n    shapes.push( {x:30, y:10, width:127, height:150, image:card} );\n    // draw the shapes on the canvas\n    drawAll();\n    // listen for mouse events\n    canvas.onmousedown=handleMouseDown;\n    canvas.onmousemove=handleMouseMove;\n    canvas.onmouseup=handleMouseUp;\n    canvas.onmouseout=handleMouseOut;\n};\n// put your image src here!\ncard.src='https://dl.dropboxusercontent.com/u/139992952/stackoverflow/card.png';"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// drag related vars\nvar isDragging=false;\nvar startX,startY;\n\n// hold the index of the shape being dragged (if any)\nvar selectedShapeIndex;\n\n// load the image\nvar card=new Image();\ncard.onload=function(){\n    // define one image and save it in the shapes[] array\n    shapes.push( {x:30, y:10, width:127, height:150, image:card} );\n    // draw the shapes on the canvas\n    drawAll();\n    // listen for mouse events\n    canvas.onmousedown=handleMouseDown;\n    canvas.onmousemove=handleMouseMove;\n    canvas.onmouseup=handleMouseUp;\n    canvas.onmouseout=handleMouseOut;\n};\n// put your image src here!\ncard.src='https://dl.dropboxusercontent.com/u/139992952/stackoverflow/card.png';",
        "code_language": "Plain Text"
      },
      {
        "id": "bfe1a84c-5962-4c27-bbd5-4d63a431aff2",
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949784283,
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949784283,
        "parent_id": "32efdb1c-f2bf-4730-847a-ae18f694bf0c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// given mouse X \u0026 Y (mx \u0026 my) and shape object\n// return true/false whether mouse is inside the shape\nfunction isMouseInShape(mx,my,shape){\n    // is this shape an image?\n    if(shape.image){\n        // this is a rectangle\n        var rLeft=shape.x;\n        var rRight=shape.x+shape.width;\n        var rTop=shape.y;\n        var rBott=shape.y+shape.height;\n        // math test to see if mouse is inside image\n        if( mx\u003erLeft \u0026\u0026 mx\u003crRight \u0026\u0026 my\u003erTop \u0026\u0026 my\u003crBott){\n            return(true);\n        }\n    }\n    // the mouse isn't in any of this shapes\n    return(false);\n}\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    startX=parseInt(e.clientX-offsetX);\n    startY=parseInt(e.clientY-offsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    for(var i=0;i\u003cshapes.length;i++){\n        if(isMouseInShape(startX,startY,shapes[i])){\n            // the mouse is inside this shape\n            // select this shape\n            selectedShapeIndex=i;\n            // set the isDragging flag\n            isDragging=true;\n            // and return (==stop looking for \n            //     further shapes under the mouse)\n            return;\n        }\n    }\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    mouseX=parseInt(e.clientX-offsetX);\n    mouseY=parseInt(e.clientY-offsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-startX;\n    var dy=mouseY-startY;\n    // move the selected shape by the drag distance\n    var selectedShape=shapes[selectedShapeIndex];\n    selectedShape.x+=dx;\n    selectedShape.y+=dy;\n    // clear the canvas and redraw all shapes\n    drawAll();\n    // update the starting drag position (== the current mouse position)\n    startX=mouseX;\n    startY=mouseY;\n}\n\n// clear the canvas and \n// redraw all shapes in their current positions\nfunction drawAll(){\n    ctx.clearRect(0,0,cw,ch);\n    for(var i=0;i\u003cshapes.length;i++){\n        var shape=shapes[i];\n        if(shape.image){\n            // it's an image\n            ctx.drawImage(shape.image,shape.x,shape.y);\n        }\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// given mouse X \u0026 Y (mx \u0026 my) and shape object\n// return true/false whether mouse is inside the shape\nfunction isMouseInShape(mx,my,shape){\n    // is this shape an image?\n    if(shape.image){\n        // this is a rectangle\n        var rLeft=shape.x;\n        var rRight=shape.x+shape.width;\n        var rTop=shape.y;\n        var rBott=shape.y+shape.height;\n        // math test to see if mouse is inside image\n        if( mx\u003erLeft \u0026\u0026 mx\u003crRight \u0026\u0026 my\u003erTop \u0026\u0026 my\u003crBott){\n            return(true);\n        }\n    }\n    // the mouse isn't in any of this shapes\n    return(false);\n}\n\nfunction handleMouseDown(e){\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position\n    startX=parseInt(e.clientX-offsetX);\n    startY=parseInt(e.clientY-offsetY);\n    // test mouse position against all shapes\n    // post result if mouse is in a shape\n    for(var i=0;i\u003cshapes.length;i++){\n        if(isMouseInShape(startX,startY,shapes[i])){\n            // the mouse is inside this shape\n            // select this shape\n            selectedShapeIndex=i;\n            // set the isDragging flag\n            isDragging=true;\n            // and return (==stop looking for \n            //     further shapes under the mouse)\n            return;\n        }\n    }\n}\n\nfunction handleMouseUp(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseOut(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // the drag is over -- clear the isDragging flag\n    isDragging=false;\n}\n\nfunction handleMouseMove(e){\n    // return if we're not dragging\n    if(!isDragging){return;}\n    // tell the browser we're handling this event\n    e.preventDefault();\n    e.stopPropagation();\n    // calculate the current mouse position         \n    mouseX=parseInt(e.clientX-offsetX);\n    mouseY=parseInt(e.clientY-offsetY);\n    // how far has the mouse dragged from its previous mousemove position?\n    var dx=mouseX-startX;\n    var dy=mouseY-startY;\n    // move the selected shape by the drag distance\n    var selectedShape=shapes[selectedShapeIndex];\n    selectedShape.x+=dx;\n    selectedShape.y+=dy;\n    // clear the canvas and redraw all shapes\n    drawAll();\n    // update the starting drag position (== the current mouse position)\n    startX=mouseX;\n    startY=mouseY;\n}\n\n// clear the canvas and \n// redraw all shapes in their current positions\nfunction drawAll(){\n    ctx.clearRect(0,0,cw,ch);\n    for(var i=0;i\u003cshapes.length;i++){\n        var shape=shapes[i];\n        if(shape.image){\n            // it's an image\n            ctx.drawImage(shape.image,shape.x,shape.y);\n        }\n    }\n}",
        "code_language": "Plain Text"
      }
    ],
    "title": "Dragging images around the Canvas",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "",
      "version": 94
    }
  ],
  "Tables": null
}