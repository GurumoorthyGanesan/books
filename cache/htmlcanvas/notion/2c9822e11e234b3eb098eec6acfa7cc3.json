{
  "ID": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
  "Root": {
    "alive": true,
    "content": [
      "993d7cfc-e2ad-444e-a265-4b9694b6181a",
      "41ff4587-a5dd-4909-80cc-034ac7881993",
      "947f1912-700b-4f08-9992-71d896cf1b4a",
      "d0a373cf-a07a-4e07-af49-3fb7c664bbdf",
      "67b11ff3-469a-464a-a249-9c967f00d2c4",
      "f5de03ad-8de9-450e-a8e3-0e110f16b60f",
      "39dc5686-404f-4cec-a8ff-46202824e8c6",
      "89e76a00-17ba-4326-b7a5-cdf9485e392a",
      "d61ccae7-c42f-4f55-82da-187074d97c84",
      "5bf92ba4-c4d4-4797-9701-b7a83d9ec8d3",
      "e5bd0a40-d2aa-47c0-a4fc-0c27e743d482",
      "a7110cc6-237b-4fbd-8dd8-91894ef53332",
      "093c1041-56de-47f4-a45e-ef42777c36e0",
      "59b8d009-da65-4eda-8308-681403574758"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1551949773262,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1551949773262,
    "parent_id": "69ada749-d571-44f8-9e7e-47f98efde9a1",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Split bezier curves at position"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773259,
        "id": "993d7cfc-e2ad-444e-a265-4b9694b6181a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773259,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This example splits cubic and bezier curves in two."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This example splits cubic and bezier curves in two."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773260,
        "id": "41ff4587-a5dd-4909-80cc-034ac7881993",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773260,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The function "
            ],
            [
              "splitCurveAt",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " splits the curve at "
            ],
            [
              "position",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " where "
            ],
            [
              "0.0",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " = start, "
            ],
            [
              "0.5",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " = middle, and "
            ],
            [
              "1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " = end. It can split quadratic and cubic curves. The curve type is determined by the last x argument "
            ],
            [
              "x4",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If not "
            ],
            [
              "undefined",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or "
            ],
            [
              "null",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " then it assumes the curve is cubic else the curve is a quadratic"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The function "
          },
          {
            "Text": "splitCurveAt",
            "AttrFlags": 2
          },
          {
            "Text": " splits the curve at "
          },
          {
            "Text": "position",
            "AttrFlags": 2
          },
          {
            "Text": " where "
          },
          {
            "Text": "0.0",
            "AttrFlags": 2
          },
          {
            "Text": " = start, "
          },
          {
            "Text": "0.5",
            "AttrFlags": 2
          },
          {
            "Text": " = middle, and "
          },
          {
            "Text": "1",
            "AttrFlags": 2
          },
          {
            "Text": " = end. It can split quadratic and cubic curves. The curve type is determined by the last x argument "
          },
          {
            "Text": "x4",
            "AttrFlags": 2
          },
          {
            "Text": ". If not "
          },
          {
            "Text": "undefined",
            "AttrFlags": 2
          },
          {
            "Text": " or "
          },
          {
            "Text": "null",
            "AttrFlags": 2
          },
          {
            "Text": " then it assumes the curve is cubic else the curve is a quadratic"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773260,
        "id": "947f1912-700b-4f08-9992-71d896cf1b4a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773260,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Example usage"
            ]
          ]
        },
        "type": "sub_sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Example usage"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773260,
        "id": "d0a373cf-a07a-4e07-af49-3fb7c664bbdf",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773260,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Splitting quadratic bezier curve in two"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Splitting quadratic bezier curve in two"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "67b11ff3-469a-464a-a249-9c967f00d2c4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar newCurves = splitCurveAt(0.5, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y)\n\nvar i = 0;\nvar p = newCurves\n// Draw the 2 new curves\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.quadraticCurveTo(p[i++], p[i++], p[i++], p[i++]);\nctx.quadraticCurveTo(p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar newCurves = splitCurveAt(0.5, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y)\n\nvar i = 0;\nvar p = newCurves\n// Draw the 2 new curves\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.quadraticCurveTo(p[i++], p[i++], p[i++], p[i++]);\nctx.quadraticCurveTo(p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "f5de03ad-8de9-450e-a8e3-0e110f16b60f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Splitting cubic bezier curve in two"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Splitting cubic bezier curve in two"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "39dc5686-404f-4cec-a8ff-46202824e8c6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar p4 = {x : 300, y : 100};\nvar newCurves = splitCurveAt(0.5, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y)\n\nvar i = 0;\nvar p = newCurves\n// Draw the 2 new curves\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.bezierCurveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\nctx.bezierCurveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "var p1 = {x : 10 , y : 100};\nvar p2 = {x : 100, y : 200};\nvar p3 = {x : 200, y : 0};\nvar p4 = {x : 300, y : 100};\nvar newCurves = splitCurveAt(0.5, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y)\n\nvar i = 0;\nvar p = newCurves\n// Draw the 2 new curves\n// Assumes ctx is canvas 2d context\nctx.lineWidth = 1;\nctx.strokeStyle = \"black\";\nctx.beginPath();\nctx.moveTo(p[i++],p[i++]);\nctx.bezierCurveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\nctx.bezierCurveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);\nctx.stroke();",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "89e76a00-17ba-4326-b7a5-cdf9485e392a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "type": "divider",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "d61ccae7-c42f-4f55-82da-187074d97c84",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The split function"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "The split function"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "5bf92ba4-c4d4-4797-9701-b7a83d9ec8d3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "splitCurveAt = function(position, x1, y1, x2, y2, x3, y3, [x4, y4])",
              [
                [
                  "b"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "splitCurveAt = function(position, x1, y1, x2, y2, x3, y3, [x4, y4])",
            "AttrFlags": 1
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "e5bd0a40-d2aa-47c0-a4fc-0c27e743d482",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: Arguments inside [x4, y4] are optional."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: Arguments inside [x4, y4] are optional."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "a7110cc6-237b-4fbd-8dd8-91894ef53332",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Note: The function has some optional commented /* */ code that deals with edge cases where the resulting curves may have zero length, or fall outside the start or ends of the original curve. As is attempting to split a curve outside the valid range for position \u003e= 0 or position \u003e= 1 will throw a range error. This can be removed and will work just fine, though you may have resulting curves that have zero length."
            ]
          ]
        },
        "type": "quote",
        "version": 1,
        "inline_content": [
          {
            "Text": "Note: The function has some optional commented /* */ code that deals with edge cases where the resulting curves may have zero length, or fall outside the start or ends of the original curve. As is attempting to split a curve outside the valid range for position \u003e= 0 or position \u003e= 1 will throw a range error. This can be removed and will work just fine, though you may have resulting curves that have zero length."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "093c1041-56de-47f4-a45e-ef42777c36e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "// With throw RangeError if not 0 \u003c position \u003c 1\n// x1, y1, x2, y2, x3, y3 for quadratic curves\n// x1, y1, x2, y2, x3, y3, x4, y4 for cubic curves\n// Returns an array of points representing 2 curves. The curves are the same type as the split curve\nvar splitCurveAt = function(position, x1, y1, x2, y2, x3, y3, x4, y4){\n    var v1, v2, v3, v4, quad, retPoints, i, c;\n    \n    // =============================================================================================\n    // you may remove this as the function will still work and resulting curves will still render\n    // but other curve functions may not like curves with 0 length\n    // =============================================================================================\n    if(position \u003c= 0 || position \u003e= 1){\n        throw RangeError(\"spliteCurveAt requires position \u003e 0 \u0026\u0026 position \u003c 1\");\n    }\n\n    // =============================================================================================\n    // If you remove the above range error you may use one or both of the following commented sections\n    // Splitting curves position \u003c 0 or position \u003e 1 will still create valid curves but they will \n    // extend past the end points\n    \n    // =============================================================================================\n    // Lock the position to split on the curve. \n    /* optional A\n    position = position \u003c 0 ? 0 : position \u003e 1 ? 1 : position;\n    optional A end */\n    \n    // =============================================================================================\n    // the next commented section will return the original curve if the split results in 0 length curve\n    // You may wish to uncomment this If you desire such functionality\n    /*  optional B\n    if(position \u003c= 0 || position \u003e= 1){\n        if(x4 === undefined || x4 === null){\n            return [x1, y1, x2, y2, x3, y3];\n        }else{\n            return [x1, y1, x2, y2, x3, y3, x4, y4];\n        }\n    }\n    optional B end */\n    \n    \n    retPoints = []; // array of coordinates\n    i = 0;\n    quad = false;  // presume cubic bezier\n    v1 = {};\n    v2 = {};\n    v4 = {};\n    v1.x = x1;\n    v1.y = y1;\n    v2.x = x2;\n    v2.y = y2;\n    if(x4 === undefined || x4 === null){\n        quad = true;  // this is a quadratic bezier\n        v4.x = x3;\n        v4.y = y3;\n    }else{\n        v3 = {};\n        v3.x = x3;\n        v3.y = y3;\n        v4.x = x4;\n        v4.y = y4;\n    }\n    c = position;\n    retPoints[i++] = v1.x;  // start point \n    retPoints[i++] = v1.y;\n\n    if(quad){ // split quadratic bezier\n        retPoints[i++] = (v1.x += (v2.x - v1.x) * c);  // new control point for first curve\n        retPoints[i++] = (v1.y += (v2.y - v1.y) * c);\n        v2.x += (v4.x - v2.x) * c;\n        v2.y += (v4.y - v2.y) * c;\n        retPoints[i++] = v1.x + (v2.x - v1.x) * c;  // new end and start of first and second curves\n        retPoints[i++] = v1.y + (v2.y - v1.y) * c;\n        retPoints[i++] = v2.x;  // new control point for second curve\n        retPoints[i++] = v2.y;\n        retPoints[i++] = v4.x;  // new endpoint of second curve\n        retPoints[i++] = v4.y;\n        //=======================================================\n        // return array with 2 curves\n        return retPoints;\n    }\n    retPoints[i++] = (v1.x += (v2.x - v1.x) * c); // first curve first control point                \n    retPoints[i++] = (v1.y += (v2.y - v1.y) * c);\n    v2.x += (v3.x - v2.x) * c;\n    v2.y += (v3.y - v2.y) * c;\n    v3.x += (v4.x - v3.x) * c;\n    v3.y += (v4.y - v3.y) * c;\n    retPoints[i++] = (v1.x += (v2.x - v1.x) * c); // first curve second control point\n    retPoints[i++] = (v1.y += (v2.y - v1.y) * c);\n    v2.x += (v3.x - v2.x) * c;\n    v2.y += (v3.y - v2.y) * c;\n    retPoints[i++] = v1.x + (v2.x - v1.x) * c; // end and start point of first second curves\n    retPoints[i++] = v1.y + (v2.y - v1.y) * c;\n    retPoints[i++] = v2.x;  // second curve first control point\n    retPoints[i++] = v2.y;\n    retPoints[i++] = v3.x;  // second curve second control point\n    retPoints[i++] = v3.y;\n    retPoints[i++] = v4.x;  // endpoint of second curve\n    retPoints[i++] = v4.y;\n    //=======================================================\n    // return array with 2 curves\n    return retPoints;              \n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "// With throw RangeError if not 0 \u003c position \u003c 1\n// x1, y1, x2, y2, x3, y3 for quadratic curves\n// x1, y1, x2, y2, x3, y3, x4, y4 for cubic curves\n// Returns an array of points representing 2 curves. The curves are the same type as the split curve\nvar splitCurveAt = function(position, x1, y1, x2, y2, x3, y3, x4, y4){\n    var v1, v2, v3, v4, quad, retPoints, i, c;\n    \n    // =============================================================================================\n    // you may remove this as the function will still work and resulting curves will still render\n    // but other curve functions may not like curves with 0 length\n    // =============================================================================================\n    if(position \u003c= 0 || position \u003e= 1){\n        throw RangeError(\"spliteCurveAt requires position \u003e 0 \u0026\u0026 position \u003c 1\");\n    }\n\n    // =============================================================================================\n    // If you remove the above range error you may use one or both of the following commented sections\n    // Splitting curves position \u003c 0 or position \u003e 1 will still create valid curves but they will \n    // extend past the end points\n    \n    // =============================================================================================\n    // Lock the position to split on the curve. \n    /* optional A\n    position = position \u003c 0 ? 0 : position \u003e 1 ? 1 : position;\n    optional A end */\n    \n    // =============================================================================================\n    // the next commented section will return the original curve if the split results in 0 length curve\n    // You may wish to uncomment this If you desire such functionality\n    /*  optional B\n    if(position \u003c= 0 || position \u003e= 1){\n        if(x4 === undefined || x4 === null){\n            return [x1, y1, x2, y2, x3, y3];\n        }else{\n            return [x1, y1, x2, y2, x3, y3, x4, y4];\n        }\n    }\n    optional B end */\n    \n    \n    retPoints = []; // array of coordinates\n    i = 0;\n    quad = false;  // presume cubic bezier\n    v1 = {};\n    v2 = {};\n    v4 = {};\n    v1.x = x1;\n    v1.y = y1;\n    v2.x = x2;\n    v2.y = y2;\n    if(x4 === undefined || x4 === null){\n        quad = true;  // this is a quadratic bezier\n        v4.x = x3;\n        v4.y = y3;\n    }else{\n        v3 = {};\n        v3.x = x3;\n        v3.y = y3;\n        v4.x = x4;\n        v4.y = y4;\n    }\n    c = position;\n    retPoints[i++] = v1.x;  // start point \n    retPoints[i++] = v1.y;\n\n    if(quad){ // split quadratic bezier\n        retPoints[i++] = (v1.x += (v2.x - v1.x) * c);  // new control point for first curve\n        retPoints[i++] = (v1.y += (v2.y - v1.y) * c);\n        v2.x += (v4.x - v2.x) * c;\n        v2.y += (v4.y - v2.y) * c;\n        retPoints[i++] = v1.x + (v2.x - v1.x) * c;  // new end and start of first and second curves\n        retPoints[i++] = v1.y + (v2.y - v1.y) * c;\n        retPoints[i++] = v2.x;  // new control point for second curve\n        retPoints[i++] = v2.y;\n        retPoints[i++] = v4.x;  // new endpoint of second curve\n        retPoints[i++] = v4.y;\n        //=======================================================\n        // return array with 2 curves\n        return retPoints;\n    }\n    retPoints[i++] = (v1.x += (v2.x - v1.x) * c); // first curve first control point                \n    retPoints[i++] = (v1.y += (v2.y - v1.y) * c);\n    v2.x += (v3.x - v2.x) * c;\n    v2.y += (v3.y - v2.y) * c;\n    v3.x += (v4.x - v3.x) * c;\n    v3.y += (v4.y - v3.y) * c;\n    retPoints[i++] = (v1.x += (v2.x - v1.x) * c); // first curve second control point\n    retPoints[i++] = (v1.y += (v2.y - v1.y) * c);\n    v2.x += (v3.x - v2.x) * c;\n    v2.y += (v3.y - v2.y) * c;\n    retPoints[i++] = v1.x + (v2.x - v1.x) * c; // end and start point of first second curves\n    retPoints[i++] = v1.y + (v2.y - v1.y) * c;\n    retPoints[i++] = v2.x;  // second curve first control point\n    retPoints[i++] = v2.y;\n    retPoints[i++] = v3.x;  // second curve second control point\n    retPoints[i++] = v3.y;\n    retPoints[i++] = v4.x;  // endpoint of second curve\n    retPoints[i++] = v4.y;\n    //=======================================================\n    // return array with 2 curves\n    return retPoints;              \n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1551949773261,
        "id": "59b8d009-da65-4eda-8308-681403574758",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1551949773261,
        "parent_id": "2c9822e1-1e23-4b3e-b098-eec6acfa7cc3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "\u003c!—— Future editors Please note that this function will be used by other examples (yet to be written 10th August 2016) If you change the input arguments, or output, or uncomment optional parts (excluding optional A) you will also have to change those functions to account of the changed behaviour. I will be adding links in this example to any dependent examples. ——!\u003e"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "\u003c!—— Future editors Please note that this function will be used by other examples (yet to be written 10th August 2016) If you change the input arguments, or output, or uncomment optional parts (excluding optional A) you will also have to change those functions to account of the changed behaviour. I will be adding links in this example to any dependent examples. ——!\u003e"
          }
        ]
      }
    ],
    "title": "Split bezier curves at position",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}